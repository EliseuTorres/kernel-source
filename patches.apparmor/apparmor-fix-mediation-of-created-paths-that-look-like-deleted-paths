From john.johansen@canonical.com  Tue Nov 17 12:03:14 2009
From: John Johansen <john.johansen@canonical.com>
Date: Tue, 3 Nov 2009 19:15:55 +0000 (-0800)
Subject: AppArmor: Fix mediation of created paths that look like "deleted" paths
Git-commit: d3ed63523f31c0c88335ad2da246f98a153d6080
Git-Repo: git://kernel.ubuntu.com/jj/apparmor-mainline.git AppArmor-2.4

AppArmor: Fix mediation of created paths that look like "deleted" paths

Under some filesystems (that provide their own dentry instantiation)
the allocated dentry can be flag as unhashed (same as a deleted dentry)
until the d_inode is allocated.  Because of the location of the
security_path hooks AppArmor (and __d_path) sees the requested
path as deleted, and fails to allow the creation of the file/node,
as it is not covered by deleted file delegation.
Detect path dentries without allocated d_inodes and treat them
as regular file paths.

Signed-off-by: John Johansen <john.johansen@canonical.com>
Acked-by: Jeff Mahoney <jeffm@suse.com>
---

 security/apparmor/path.c |   11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/security/apparmor/path.c b/security/apparmor/path.c
index 21f3e67..85897e0 100644
--- a/security/apparmor/path.c
+++ b/security/apparmor/path.c
@@ -110,6 +110,17 @@ int d_namespace_path(struct path *path, char *buf, int buflen, char **name)
 	if (IS_ERR(res)) {
 		error = PTR_ERR(res);
 		*name = buf;
+	} else if (d_unhashed(path->dentry) && !path->dentry->d_inode) {
+		/* On some filesystems, newly allocated dentries appear
+		 * to the security_path hooks as a deleted
+		 * dentry except without an inode allocated.
+		 *
+		 * Remove the appended deleted text and return as a
+		 * string for normal mediation.  The (deleted) string
+		 * is guarenteed to be added in this case, so just
+		 * strip it.
+		 */
+		buf[buflen - 11] = 0;	/* - (len(" (deleted)") +\0) */
 	} else if (!IS_ROOT(path->dentry) && d_unhashed(path->dentry)) {
 		error = -ENOENT;
 #if 0

