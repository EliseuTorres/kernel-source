From apw@canonical.com  Tue Nov 17 11:13:49 2009
From: Andy Whitcroft <apw@canonical.com>
Date: Tue, 21 Jul 2009 11:16:07 +0000 (+0100)
Subject: AppArmor: fix argument size missmatch on 64 bit builds
Git-commit: fa557cce4bfa8f71b0c3c7546151e0edabf7456a
Git-Repo: git://kernel.ubuntu.com/jj/apparmor-mainline.git AppArmor-2.4

AppArmor: fix argument size missmatch on 64 bit builds

When building AppArmor on 64 bit we see a warning as below:

  .../apparmor/policy_interface.c: In function ‘audit_cb’:
  .../apparmor/policy_interface.c:101: warning: format ‘%d’ expects type
                                ‘int’, but argument 3 has type ‘long int’

This is triggered by the log format below.  We are printing the
difference
between two pointers which is potentially a long on 64bit.

    static void audit_cb(struct audit_buffer *ab, void *va)
    {
    [...]
        if (sa->base.error && sa->e)
            audit_log_format(ab, " offset=%d", sa->e->pos - sa->e->start);
    }

Convert this delta to a long for printing.

Signed-off-by: Andy Whitcroft <apw@canonical.com>
Acked-by: Tim Gardner <tim.gardner@canonical.com>
Signed-off-by: John Johansen <john.johansen@canonical.com>
Acked-by: Jeff Mahoney <jeffm@suse.com>
---
 security/apparmor/policy_interface.c |    3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

--- a/security/apparmor/policy_interface.c
+++ b/security/apparmor/policy_interface.c
@@ -92,13 +92,14 @@ static void aa_audit_init(struct aa_audi
 static void audit_cb(struct audit_buffer *ab, void *va)
 {
 	struct aa_audit_iface *sa = va;
+	long len = sa->e->pos - sa->e->start;
 
 	if (sa->name)
 		audit_log_format(ab, " name=%s", sa->name);
 	if (sa->name2)
 		audit_log_format(ab, " namespace=%s", sa->name2);
 	if (sa->base.error && sa->e)
-		audit_log_format(ab, " offset=%d", sa->e->pos - sa->e->start);
+		audit_log_format(ab, " offset=%ld", len);
 }
 
 static int aa_audit_iface(struct aa_audit_iface *sa)
