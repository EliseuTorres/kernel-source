From: Frank Blaschka <frank.blaschka@de.ibm.com>
Subject: [PATCH] ctcm: suspend has to wait for outstanding I/O
References: BNC#565612
Patch-mainline: 2.6.33-rc1
Git-commit: 1e1815be87e45ce512f998ab35e9554c25031f4d

State transition to DEV_STATE_STOPPED indicates all outstanding I/O has
finished. Add wait queue to wait for this state.

Signed-off-by: Frank Blaschka <frank.blaschka@de.ibm.com>
Acked-by: John Jolly <jjolly@suse.de>

---

 drivers/s390/net/ctcm_main.c |    5 +++++
 drivers/s390/net/fsm.c       |    1 +
 drivers/s390/net/fsm.h       |    2 ++
 3 files changed, 8 insertions(+)

Index: linux-sles11sp1/drivers/s390/net/ctcm_main.c
===================================================================
--- linux-sles11sp1.orig/drivers/s390/net/ctcm_main.c
+++ linux-sles11sp1/drivers/s390/net/ctcm_main.c
@@ -1695,6 +1695,11 @@ static int ctcm_pm_suspend(struct ccwgro
 		return 0;
 	netif_device_detach(priv->channel[READ]->netdev);
 	ctcm_close(priv->channel[READ]->netdev);
+	if (!wait_event_timeout(priv->fsm->wait_q,
+	    fsm_getstate(priv->fsm) == DEV_STATE_STOPPED, CTCM_TIME_5_SEC)) {
+		netif_device_attach(priv->channel[READ]->netdev);
+		return -EBUSY;
+	}
 	ccw_device_set_offline(gdev->cdev[1]);
 	ccw_device_set_offline(gdev->cdev[0]);
 	return 0;
Index: linux-sles11sp1/drivers/s390/net/fsm.c
===================================================================
--- linux-sles11sp1.orig/drivers/s390/net/fsm.c
+++ linux-sles11sp1/drivers/s390/net/fsm.c
@@ -27,6 +27,7 @@ init_fsm(char *name, const char **state_
 		return NULL;
 	}
 	strlcpy(this->name, name, sizeof(this->name));
+	init_waitqueue_head(&this->wait_q);
 
 	f = kzalloc(sizeof(fsm), order);
 	if (f == NULL) {
Index: linux-sles11sp1/drivers/s390/net/fsm.h
===================================================================
--- linux-sles11sp1.orig/drivers/s390/net/fsm.h
+++ linux-sles11sp1/drivers/s390/net/fsm.h
@@ -66,6 +66,7 @@ typedef struct fsm_instance_t {
 	char name[16];
 	void *userdata;
 	int userint;
+	wait_queue_head_t wait_q;
 #if FSM_DEBUG_HISTORY
 	int         history_index;
 	int         history_size;
@@ -197,6 +198,7 @@ fsm_newstate(fsm_instance *fi, int newst
 	printk(KERN_DEBUG "fsm(%s): New state %s\n", fi->name,
 		fi->f->state_names[newstate]);
 #endif
+	wake_up(&fi->wait_q);
 }
 
 /**
