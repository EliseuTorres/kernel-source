From: Michael Holzheu <holzheu@linux.vnet.ibm.com>
Subject: hibernate: Save and restore absolute zero pages
Patch-mainline: not yet
Git-commit: -
References: bnc#813708, LTC#91615

Description:  hibernate: Save and restore absolute zero pages
Symptom:      When kdump is triggered after suspend/resume the re-IPL
              of the kdump system fails.
Problem:      Since kernel upstream commit 5f954c34 ([S390] hibernation:
              fix lowcore handling) the absolute zero lowcore is lost
              during suspend/resume. For example, this leads to the problem
              that the re-IPL device for kdump is no longer set after resume.
Solution:     With this patch during suspend a buffer is allocated in the
              new PM notifier "suspend_pm_cb" and then the absolute zero
              lowcore is saved to that buffer. The resume code then copies
              back this buffer to absolute zero and afterwards the PM
              notifier releases the memory.
Reproduction: 1.  Add a swap disk
                  $ mkswap /dev/dasdb1
                  $ swapon -d /dev/dasdb1
              2.  Add kernel boot parameter entry to /etc/zipl.conf
                  "resume=/dev/dasdb1 no_console_suspend"
              3.  Add swap disk entry in /etc/fstab
                  /dev/dasdb1 swap swap defaults   0  0
              4.  run mkinitrd
              5.  $ zipl -V
              6.  $ reboot
              7.  After system boots suspend it
                  $ echo disk > /sys/power/state
              8.  Now resume it by IPL of the boot DASD
              9.  Trigger panic
                  $ echo c > /proc/sysrq-trigger
              10. kdump writes dump but reboot of original system fails.

Signed-off-by: Michael Holzheu <holzheu@linux.vnet.ibm.com>
Acked-by: John Jolly <jjolly@suse.de>
---
 arch/s390/kernel/suspend.c      |   33 +++++++++++++++++++++++++++++++++
 arch/s390/kernel/swsusp_asm64.S |   29 ++++++++++++++++++++++++++---
 2 files changed, 59 insertions(+), 3 deletions(-)

--- a/arch/s390/kernel/suspend.c
+++ b/arch/s390/kernel/suspend.c
@@ -7,8 +7,11 @@
  */
 
 #include <linux/pfn.h>
+#include <linux/suspend.h>
 #include <asm/system.h>
 
+unsigned long suspend_zero_pages;
+
 /*
  * References to section boundaries
  */
@@ -30,6 +33,36 @@ int pfn_is_nosave(unsigned long pfn)
 	return 0;
 }
 
+/*
+ * PM notifier callback for suspend
+ */
+static int suspend_pm_cb(struct notifier_block *nb, unsigned long action,
+			 void *ptr)
+{
+	switch (action) {
+	case PM_SUSPEND_PREPARE:
+	case PM_HIBERNATION_PREPARE:
+		suspend_zero_pages = __get_free_pages(GFP_KERNEL, LC_ORDER);
+		if (!suspend_zero_pages)
+			return NOTIFY_BAD;
+		break;
+	case PM_POST_SUSPEND:
+	case PM_POST_HIBERNATION:
+		free_pages(suspend_zero_pages, LC_ORDER);
+		break;
+	default:
+		return NOTIFY_DONE;
+	}
+	return NOTIFY_OK;
+}
+
+static int __init suspend_pm_init(void)
+{
+	pm_notifier(suspend_pm_cb, 0);
+	return 0;
+}
+arch_initcall(suspend_pm_init);
+
 void save_processor_state(void)
 {
 	/* swsusp_arch_suspend() actually saves all cpu register contents.
--- a/arch/s390/kernel/swsusp_asm64.S
+++ b/arch/s390/kernel/swsusp_asm64.S
@@ -36,8 +36,8 @@ swsusp_arch_suspend:
 	/* Store prefix register on stack */
 	stpx	__SF_EMPTY(%r15)
 
-	/* Save prefix register contents for lowcore */
-	llgf	%r4,__SF_EMPTY(%r15)
+	/* Save prefix register contents for lowcore copy */
+	llgf	%r10,__SF_EMPTY(%r15)
 
 	/* Get pointer to save area */
 	lghi	%r1,0x1000
@@ -91,7 +91,18 @@ swsusp_arch_suspend:
 	xc	__SF_EMPTY(4,%r15),__SF_EMPTY(%r15)
 	spx	__SF_EMPTY(%r15)
 
+	/* Save absolute zero pages */
+	larl	%r2,suspend_zero_pages
+	lg	%r2,0(%r2)
+	lghi	%r4,0
+	lghi	%r3,2*PAGE_SIZE
+	lghi	%r5,2*PAGE_SIZE
+1:	mvcle	%r2,%r4,0
+	jo	1b
+
+	/* Copy lowcore to absolute zero lowcore */
 	lghi	%r2,0
+	lgr	%r4,%r10
 	lghi	%r3,2*PAGE_SIZE
 	lghi	%r5,2*PAGE_SIZE
 1:	mvcle	%r2,%r4,0
@@ -246,8 +257,20 @@ restore_registers:
 	/* Load old stack */
 	lg	%r15,0x2f8(%r13)
 
+	/* Save prefix register */
+	mvc __SF_EMPTY(4,%r15),0x318(%r13)
+
+	/* Restore absolute zero pages */
+	lghi	%r2,0
+	larl	%r4,suspend_zero_pages
+	lg	%r4,0(%r4)
+	lghi	%r3,2*PAGE_SIZE
+	lghi	%r5,2*PAGE_SIZE
+1:	mvcle	%r2,%r4,0
+	jo	1b
+
 	/* Restore prefix register */
-	spx	0x318(%r13)
+	spx	__SF_EMPTY(%r15)
 
 	/* Activate DAT */
 	stosm	__SF_EMPTY(%r15),0x04
