From: Suresh Siddha <suresh.b.siddha@intel.com>
References: bnc#581940
Patch-mainline: yes
Git: 55ca3cc1746335bb6ef1d3894ddb6d0c729b3518
Subject: x86_64, ftrace: Make ftrace use kernel identity mapping to modify code

    On x86_64, kernel text mappings are mapped read-only with
    CONFIG_DEBUG_RODATA. So use the kernel identity mapping instead
    of the kernel text mapping to modify the kernel text.
    
    Signed-off-by: Suresh Siddha <suresh.b.siddha@intel.com>
    Acked-by: Steven Rostedt <rostedt@goodmis.org>
    Tested-by: Steven Rostedt <rostedt@goodmis.org>
    LKML-Reference: <20091029024821.080941108@sbs-t61.sc.intel.com>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>
Acked-by: Nick Piggin <npiggin@suse.de>

Index: linux-2.6.32/arch/x86/kernel/ftrace.c
===================================================================
--- linux-2.6.32.orig/arch/x86/kernel/ftrace.c	2010-03-11 02:09:31.000000000 +1100
+++ linux-2.6.32/arch/x86/kernel/ftrace.c	2010-03-11 02:12:21.000000000 +1100
@@ -187,9 +187,26 @@ static void wait_for_nmi(void)
 	nmi_wait_count++;
 }
 
+static inline int
+within(unsigned long addr, unsigned long start, unsigned long end)
+{
+	return addr >= start && addr < end;
+}
+
 static int
 do_ftrace_mod_code(unsigned long ip, void *new_code)
 {
+	/*
+	 * On x86_64, kernel text mappings are mapped read-only with
+	 * CONFIG_DEBUG_RODATA. So we use the kernel identity mapping instead
+	 * of the kernel text mapping to modify the kernel text.
+	 *
+	 * For 32bit kernels, these mappings are same and we can use
+	 * kernel identity mapping to modify code.
+	 */
+	if (within(ip, (unsigned long)_text, (unsigned long)_etext))
+		ip = (unsigned long)__va(__pa(ip));
+
 	mod_code_ip = (void *)ip;
 	mod_code_newcode = new_code;
 
