From: Gerald Schaefer <geraldsc@de.ibm.com>
Subject: zfcp: Remove lock dependency on unit add.
References: bnc#590926
Patch-mainline: Upstream submission made

Symptom:     Possible dead-lock on unit add.
Problem:     During the addition of a LUN the config_mutex has to be
             held to maintain the configuration consistency. However, a few
             process steps do fetch other locks which might interfere with
             the already held mutex. 
Solution:    The double protection is not required, so remove it.

Acked-by: John Jolly <jjolly@suse.de>

---
 drivers/s390/scsi/zfcp_sysfs.c |   21 ++++++++++-----------
 1 file changed, 10 insertions(+), 11 deletions(-)

--- a/drivers/s390/scsi/zfcp_sysfs.c
+++ b/drivers/s390/scsi/zfcp_sysfs.c
@@ -207,30 +207,29 @@ static ssize_t zfcp_sysfs_unit_add_store
 	struct zfcp_port *port = dev_get_drvdata(dev);
 	struct zfcp_unit *unit;
 	u64 fcp_lun;
-	int retval = -EINVAL;
 
 	mutex_lock(&zfcp_data.config_mutex);
 	if (atomic_read(&port->status) & ZFCP_STATUS_COMMON_REMOVE) {
-		retval = -EBUSY;
-		goto out;
+		mutex_unlock(&zfcp_data.config_mutex);
+		return -EBUSY;
 	}
 
-	if (strict_strtoull(buf, 0, (unsigned long long *) &fcp_lun))
-		goto out;
+	if (strict_strtoull(buf, 0, (unsigned long long *) &fcp_lun)) {
+		mutex_unlock(&zfcp_data.config_mutex);
+		return -EINVAL;
+	}
 
 	unit = zfcp_unit_enqueue(port, fcp_lun);
+	mutex_unlock(&zfcp_data.config_mutex);
 	if (IS_ERR(unit))
-		goto out;
-
-	retval = 0;
+		return -EINVAL;
 
 	zfcp_erp_unit_reopen(unit, 0, "syuas_1", NULL);
 	zfcp_erp_wait(unit->port->adapter);
 	flush_work(&unit->scsi_work);
 	zfcp_unit_put(unit);
-out:
-	mutex_unlock(&zfcp_data.config_mutex);
-	return retval ? retval : (ssize_t) count;
+
+	return (ssize_t) count;
 }
 static DEVICE_ATTR(unit_add, S_IWUSR, NULL, zfcp_sysfs_unit_add_store);
 
