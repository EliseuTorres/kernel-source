From: Gerald Schaefer <gerald.schaefer@de.ibm.com>
Subject: spinlock: fix system hang with spin_retry <= 0
Patch-mainline: v3.16-rc1
Git-commit: 2e4006b34d06681ed95d55510d4450f29a13c417
References: bnc#877098, LTC#110189

Description:  spinlock: fix system hang with spin_retry <= 0
Symptom:      On LPAR, when spin_retry is set to <= 0, system may hang.
Problem:      arch_spin_lock_wait() and arch_spin_lock_wait_flags()
              may end up in a while(1) loop w/o doing any compare and
              swap operation.
Solution:     Use do/while instead of for loop.
Reproduction: As root: echo 0 > /proc/sys/kernel/spin_retry

Signed-off-by: Gerald Schaefer <gerald.schaefer@de.ibm.com>
Acked-by: John Jolly <jjolly@suse.de>
---
 arch/s390/lib/spinlock.c |   14 ++++++++------
 1 file changed, 8 insertions(+), 6 deletions(-)

--- a/arch/s390/lib/spinlock.c
+++ b/arch/s390/lib/spinlock.c
@@ -26,20 +26,21 @@ __setup("spin_retry=", spin_retry_setup)
 
 void arch_spin_lock_wait(arch_spinlock_t *lp)
 {
-	int count = spin_retry;
 	unsigned int cpu = ~smp_processor_id();
 	unsigned int owner;
+	int count;
 
 	while (1) {
 		owner = lp->owner_cpu;
 		if (!owner || smp_vcpu_scheduled(~owner)) {
-			for (count = spin_retry; count > 0; count--) {
+			count = spin_retry;
+			do {
 				if (arch_spin_is_locked(lp))
 					continue;
 				if (_raw_compare_and_swap(&lp->owner_cpu, 0,
 							  cpu) == 0)
 					return;
-			}
+			} while (count-- > 0);
 			if (MACHINE_IS_LPAR)
 				continue;
 		}
@@ -54,15 +55,16 @@ EXPORT_SYMBOL(arch_spin_lock_wait);
 
 void arch_spin_lock_wait_flags(arch_spinlock_t *lp, unsigned long flags)
 {
-	int count = spin_retry;
 	unsigned int cpu = ~smp_processor_id();
 	unsigned int owner;
+	int count;
 
 	local_irq_restore(flags);
 	while (1) {
 		owner = lp->owner_cpu;
 		if (!owner || smp_vcpu_scheduled(~owner)) {
-			for (count = spin_retry; count > 0; count--) {
+			count = spin_retry;
+			do {
 				if (arch_spin_is_locked(lp))
 					continue;
 				local_irq_disable();
@@ -70,7 +72,7 @@ void arch_spin_lock_wait_flags(arch_spin
 							  cpu) == 0)
 					return;
 				local_irq_restore(flags);
-			}
+			} while (count-- > 0);
 			if (MACHINE_IS_LPAR)
 				continue;
 		}
