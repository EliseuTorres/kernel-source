From: Thomas Renninger <trenn@suse.de>
Subject: ACPI: Make Embedded Controller command timeout delay configurable
References: bnc#639261
Patch-Mainline: not yet

Here and then there show up machines which need higher timeout values.
Finding this out on affected machines is very cumbersome, because
ACPI_EC_DELAY is a compile option -> make it configurable via boot param.

Signed-off-by: Thomas Renninger <trenn@suse.de>


---
 drivers/acpi/ec.c |    9 +++++++--
 1 file changed, 7 insertions(+), 2 deletions(-)

Index: linux-2.6.32-SLE11-SP1/drivers/acpi/ec.c
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/drivers/acpi/ec.c
+++ linux-2.6.32-SLE11-SP1/drivers/acpi/ec.c
@@ -80,6 +80,11 @@ enum {
 					 * OpReg are installed */
 };
 
+/* ec.c is compiled in acpi namespace so this shows up as acpi.ec_delay param */
+static unsigned int ec_delay __read_mostly = ACPI_EC_DELAY;
+module_param(ec_delay, uint, 0644);
+MODULE_PARM_DESC(ec_delay, "Timeout(ms) waited until an EC command completes");
+
 /* If we find an EC via the ECDT, we need to keep a ptr to its context */
 /* External interfaces use first EC only, so remember */
 typedef int (*acpi_ec_query_func) (void *data);
@@ -219,7 +224,7 @@ static int ec_poll(struct acpi_ec *ec)
 	int repeat = 2; /* number of command restarts */
 	while (repeat--) {
 		unsigned long delay = jiffies +
-			msecs_to_jiffies(ACPI_EC_DELAY);
+			msecs_to_jiffies(ec_delay);
 		do {
 			/* don't sleep with disabled interrupts */
 			if (EC_FLAGS_MSI || irqs_disabled()) {
@@ -274,7 +279,7 @@ static int ec_check_ibf0(struct acpi_ec
 
 static int ec_wait_ibf0(struct acpi_ec *ec)
 {
-	unsigned long delay = jiffies + msecs_to_jiffies(ACPI_EC_DELAY);
+	unsigned long delay = jiffies + msecs_to_jiffies(ec_delay);
 	/* interrupt wait manually if GPE mode is not active */
 	while (time_before(jiffies, delay))
 		if (wait_event_timeout(ec->wait, ec_check_ibf0(ec),
