Subject: s390/bpf: Fix ALU_NEG (A = -A)
From: Michael Holzheu <holzheu@linux.vnet.ibm.com>
Patch-mainline: v3.19-rc5
Git-commit: df3eed3d282f2fe1ffb73d3545fcde4e9b80a0d3
References: bnc#917125,LTC#121759

Description:  s390/bpf: Fix several corner cases
Symptom:      In rare cases BPF filters may return wrong results or you
              even can get a kernel panic.
Problem:      The s390x BPF JIT code generation has several bugs.
Solution:     Fix the following bugs:
              - Zero extend parameters before calling C function
              - Fix sk_load_byte_msh()
              - Fix offset parameter for skb_copy_bits()
              - Fix skb_copy_bits() parameter passing
              - Fix JMP_JGE_K (A >= K) and JMP_JGT_K (A > K)
              - Fix JMP_JGE_X (A > X) and JMP_JGT_X (A >= X)
              - Fix ALU_NEG (A = -A)
Reproduction: Use tcpdump and generate network traffic to trigger
              the corner cases.

Upstream-Description:

              s390/bpf: Fix ALU_NEG (A = -A)

              Currently the LOAD NEGATIVE (lnr) instruction is used for ALU_NEG. This
              instruction always loads the negative value. Therefore, if A is already
              negative, it remains unchanged. To fix this use LOAD COMPLEMENT (lcr)
              instead.

              Signed-off-by: Michael Holzheu <holzheu@linux.vnet.ibm.com>
              Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>


Signed-off-by: Michael Holzheu <holzheu@linux.vnet.ibm.com>
Acked-by: John Jolly <jjolly@suse.de>
---
 arch/s390/net/bpf_jit_comp.c |    4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

--- a/arch/s390/net/bpf_jit_comp.c
+++ b/arch/s390/net/bpf_jit_comp.c
@@ -465,8 +465,8 @@ static int bpf_jit_insn(struct bpf_jit *
 		EMIT4_DISP(0x88500000, K);
 		break;
 	case BPF_S_ALU_NEG: /* A = -A */
-		/* lnr %r5,%r5 */
-		EMIT2(0x1155);
+		/* lcr %r5,%r5 */
+		EMIT2(0x1355);
 		break;
 	case BPF_S_JMP_JA: /* ip += K */
 		offset = addrs[i + K] + jit->start - jit->prg;
