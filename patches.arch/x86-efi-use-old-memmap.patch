From: Russ Anderson <rja@sgi.com>
Subject: x86: Fix efi boot breakage on UV
Patch-mainline: No
References: bnc#718165

Commit 7cb00b72876ea2451eb79d468da0e8fb9134aa8a allocated a new memmap
table to be passed down to bios.  The problem is that there needs to be a 
physical mapping of the table for bios to access it.  The bottom 512Gig
of memory has a physical mapping, so if the table is in that range 
bios can access it.  If the table is above that range bios cannot.  
UV systems with more than 512Gig of memory have hit this problem.

This patch undoes the previous commit, reverting back to using the
old memmap table.

Signed-off-by: Russ Anderson <rja@sgi.com>
Signed-off-by: Rafael J. Wysocki <rjw@suse.de>
---
 arch/x86/platform/efi/efi.c |   14 +++-----------
 1 file changed, 3 insertions(+), 11 deletions(-)

Index: linux-3.0-SLE11-SP2-3.0/arch/x86/platform/efi/efi.c
===================================================================
--- linux-3.0-SLE11-SP2-3.0.orig/arch/x86/platform/efi/efi.c
+++ linux-3.0-SLE11-SP2-3.0/arch/x86/platform/efi/efi.c
@@ -554,8 +554,7 @@ void __init efi_enter_virtual_mode(void)
 	efi_status_t status;
 	unsigned long size;
 	u64 end, systab, addr, npages, end_pfn;
-	void *p, *va, *new_memmap = NULL;
-	int count = 0;
+	void *p, *va;
 
 	efi.systab = NULL;
 
@@ -628,21 +627,15 @@ void __init efi_enter_virtual_mode(void)
 			systab += md->virt_addr - md->phys_addr;
 			efi.systab = (efi_system_table_t *) (unsigned long) systab;
 		}
-		new_memmap = krealloc(new_memmap,
-				      (count + 1) * memmap.desc_size,
-				      GFP_KERNEL);
-		memcpy(new_memmap + (count * memmap.desc_size), md,
-		       memmap.desc_size);
-		count++;
 	}
 
 	BUG_ON(!efi.systab);
 
 	status = phys_efi_set_virtual_address_map(
-		memmap.desc_size * count,
+		memmap.desc_size * memmap.nr_map,
 		memmap.desc_size,
 		memmap.desc_version,
-		(efi_memory_desc_t *)__pa(new_memmap));
+		memmap.phys_map);
 
 	if (status != EFI_SUCCESS) {
 		printk(KERN_ALERT "Unable to switch EFI into virtual mode "
@@ -677,7 +670,6 @@ void __init efi_enter_virtual_mode(void)
 		runtime_code_page_mkexec();
 	early_iounmap(memmap.map, memmap.nr_map * memmap.desc_size);
 	memmap.map = NULL;
-	kfree(new_memmap);
 }
 
 /*
