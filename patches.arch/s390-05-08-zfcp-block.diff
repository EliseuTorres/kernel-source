Subject: zfcp: Block SCSI EH thread for rport state BLOCKED
References: BNC#565612
From: Gerald Schaefer <geraldsc@de.ibm.com>
Patch-mainline: 2.6.33-rc1
Git-commit: af4de36d911ab907b92c5f3f81ceff8474ed7485

Symptom: In case the SCSI error recovery starts because of a SCSI
             command timeout, but then something else triggers the
             rport to be deleted, the SCSI error recovery will run to
             the end and set the SCSI device offline.
Problem: When the rport is in the state BLOCKED, all SCSI
             commands will fail because of this status. The SCSI EH
             will escalate and at the end set the SCSI devices offline.
Solution: In the scsi_eh callbacks in zfcp, call the new function
             fc_block_scsi_eh to wait until the rport leaves the
             state BLOCKED. With this, the rport is either RUNNING
             again and the SCSI commands can be issued to the device,
             or the rport is NOT_PRESENT and the SCSI devices have
             been deleted, thus we don't have to worry about SCSI
             device states.
Acked-by: John Jolly <jjolly@suse.de>

---

 drivers/s390/scsi/zfcp_scsi.c |    3 +++
 1 file changed, 3 insertions(+)

--- a/drivers/s390/scsi/zfcp_scsi.c	2009-12-09 15:59:10.000000000 +0100
+++ b/drivers/s390/scsi/zfcp_scsi.c	2009-12-09 15:59:22.000000000 +0100
@@ -210,6 +210,7 @@ static int zfcp_scsi_eh_abort_handler(st
 			break;
 
 		zfcp_erp_wait(adapter);
+		fc_block_scsi_eh(scpnt);
 		if (!(atomic_read(&adapter->status) &
 		      ZFCP_STATUS_COMMON_RUNNING)) {
 			zfcp_dbf_scsi_abort("nres", adapter->dbf, scpnt, NULL,
@@ -249,6 +250,7 @@ static int zfcp_task_mgmt_function(struc
 			break;
 
 		zfcp_erp_wait(adapter);
+		fc_block_scsi_eh(scpnt);
 		if (!(atomic_read(&adapter->status) &
 		      ZFCP_STATUS_COMMON_RUNNING)) {
 			zfcp_dbf_scsi_devreset("nres", tm_flags, unit, scpnt);
@@ -290,6 +292,7 @@ static int zfcp_scsi_eh_host_reset_handl
 
 	zfcp_erp_adapter_reopen(adapter, 0, "schrh_1", scpnt);
 	zfcp_erp_wait(adapter);
+	fc_block_scsi_eh(scpnt);
 
 	return SUCCESS;
 }
