From: Martin Schwidefsky <schwidefsky@de.ibm.com>
Subject: s390/spinlock: optimize spinlock code sequence
Patch-mainline: v3.16-rc1
Git-commit: 6c8cd5bbda7e6be166cf2e2dd4be5890193e17ac
References: bnc#926797, LTC#KRN1514

Summary:     s390: z13 base performance
Description: Provide the backport of a minimum set of upstream patches
             to optimize the base performance of the IBM z13 machine.

Upstream-Description:

             s390/spinlock: optimize spinlock code sequence

             Use lowcore constant to improve the code generated for spinlocks.

             [ Martin Schwidefsky: patch breakdown and code beautification ]

             Signed-off-by: Philipp Hachtmann <phacht@linux.vnet.ibm.com>
             Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>


Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
Acked-by: John Jolly <jjolly@suse.de>
---
 arch/s390/include/asm/lowcore.h  |   10 ++++++++++
 arch/s390/include/asm/spinlock.h |   15 +++++++++------
 arch/s390/kernel/setup.c         |    5 +++++
 arch/s390/kernel/smp.c           |    2 ++
 arch/s390/lib/spinlock.c         |    4 ++--
 5 files changed, 28 insertions(+), 8 deletions(-)

--- a/arch/s390/include/asm/lowcore.h
+++ b/arch/s390/include/asm/lowcore.h
@@ -142,7 +142,12 @@ struct _lowcore {
 	/* Interrupt response block */
 	__u8	irb[64];			/* 0x0300 */
 
+#ifndef __GENKSYMS__
+	__u32	spinlock_lockval;		/* 0x0340 */
+	__u8	pad_0x0344[0x0e00-0x0344];	/* 0x0344 */
+#else
 	__u8	pad_0x0340[0x0e00-0x0340];	/* 0x0340 */
+#endif
 
 	/*
 	 * 0xe00 contains the address of the IPL Parameter Information
@@ -281,7 +286,12 @@ struct _lowcore {
 	/* Per cpu primary space access list */
 	__u32	paste[16];			/* 0x03c0 */
 
+#ifndef __GENKSYMS__
+	__u32	spinlock_lockval;		/* 0x0400 */
+	__u8	pad_0x0404[0x0e00-0x0404];	/* 0x0404 */
+#else
 	__u8	pad_0x0400[0x0e00-0x0400];	/* 0x0400 */
+#endif
 
 	/*
 	 * 0xe00 contains the address of the IPL Parameter Information
--- a/arch/s390/include/asm/spinlock.h
+++ b/arch/s390/include/asm/spinlock.h
@@ -13,6 +13,8 @@
 
 #include <linux/smp.h>
 
+#define SPINLOCK_LOCKVAL (S390_lowcore.spinlock_lockval)
+
 static inline int
 _raw_compare_and_swap(unsigned int *lock, unsigned int old, unsigned int new)
 {
@@ -40,6 +42,11 @@ int arch_spin_trylock_retry(arch_spinloc
 void arch_spin_relax(arch_spinlock_t *);
 void arch_spin_lock_wait_flags(arch_spinlock_t *, unsigned long flags);
 
+static inline u32 arch_spin_lockval(int cpu)
+{
+	return ~cpu;
+}
+
 static inline int arch_spin_value_unlocked(arch_spinlock_t lock)
 {
 	return lock.lock == 0;
@@ -52,16 +59,12 @@ static inline int arch_spin_is_locked(ar
 
 static inline int arch_spin_trylock_once(arch_spinlock_t *lp)
 {
-	unsigned int new = ~smp_processor_id();
-
-	return _raw_compare_and_swap(&lp->lock, 0, new);
+	return _raw_compare_and_swap(&lp->lock, 0, SPINLOCK_LOCKVAL);
 }
 
 static inline int arch_spin_tryrelease_once(arch_spinlock_t *lp)
 {
-	unsigned int old = ~smp_processor_id();
-
-	return _raw_compare_and_swap(&lp->lock, old, 0);
+	return _raw_compare_and_swap(&lp->lock, SPINLOCK_LOCKVAL, 0);
 }
 
 static inline void arch_spin_lock(arch_spinlock_t *lp)
--- a/arch/s390/kernel/setup.c
+++ b/arch/s390/kernel/setup.c
@@ -427,6 +427,11 @@ setup_lowcore(void)
 	lc->last_update_timer = S390_lowcore.last_update_timer;
 	lc->last_update_clock = S390_lowcore.last_update_clock;
 	lc->ftrace_func = S390_lowcore.ftrace_func;
+
+#ifdef CONFIG_SMP
+	lc->spinlock_lockval = arch_spin_lockval(0);
+#endif
+
 	set_prefix((u32)(unsigned long) lc);
 	lowcore_ptr[0] = lc;
 }
--- a/arch/s390/kernel/smp.c
+++ b/arch/s390/kernel/smp.c
@@ -703,6 +703,7 @@ int __cpuinit __cpu_up(unsigned int cpu)
 	cpu_lowcore->percpu_offset = __per_cpu_offset[cpu];
 	cpu_lowcore->current_task = (unsigned long) idle;
 	cpu_lowcore->cpu_nr = cpu;
+	cpu_lowcore->spinlock_lockval = arch_spin_lockval(cpu);
 	cpu_lowcore->kernel_asce = S390_lowcore.kernel_asce;
 	cpu_lowcore->machine_flags = S390_lowcore.machine_flags;
 	cpu_lowcore->ftrace_func = S390_lowcore.ftrace_func;
@@ -855,6 +856,7 @@ void __init smp_cpus_done(unsigned int m
 void __init smp_setup_processor_id(void)
 {
 	S390_lowcore.cpu_nr = 0;
+	S390_lowcore.spinlock_lockval = arch_spin_lockval(0);
 	__cpu_logical_map[0] = stap();
 }
 
--- a/arch/s390/lib/spinlock.c
+++ b/arch/s390/lib/spinlock.c
@@ -41,7 +41,7 @@ static inline void _raw_yield_cpu(int cp
 
 void arch_spin_lock_wait(arch_spinlock_t *lp)
 {
-	unsigned int cpu = ~smp_processor_id();
+	unsigned int cpu = SPINLOCK_LOCKVAL;
 	unsigned int owner;
 	int count;
 
@@ -69,7 +69,7 @@ EXPORT_SYMBOL(arch_spin_lock_wait);
 
 void arch_spin_lock_wait_flags(arch_spinlock_t *lp, unsigned long flags)
 {
-	unsigned int cpu = ~smp_processor_id();
+	unsigned int cpu = SPINLOCK_LOCKVAL;
 	unsigned int owner;
 	int count;
 
