From: Martin Schwidefsky <schwidefsky@de.ibm.com>
Subject: kernel: z90crypt module load crash
Patch-mainline: not yet
Git-commit: -
References: bnc#831623, LTC#96214

Description:  kernel: z90crypt module load crash
Symptom:      The kernel crashes with an oops error message after the
              z90crypt module has been loaded.
Problem:      The module reference counting of the sub-modules for the
              type 6 and type 50 message operations uses a dummy module
              structure if the zcrypt driver is built as a single,
              monolithic module. The dummy module structures are not
              initialized correctly.
Solution:     Remove the dummy module structures and add the module
              name to the message type operations structure instead.
Reproduction: Load the z90crypt module.

Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
Acked-by: John Jolly <jjolly@suse.de>
---
 drivers/s390/crypto/zcrypt_api.c       |    2 +-
 drivers/s390/crypto/zcrypt_api.h       |    1 +
 drivers/s390/crypto/zcrypt_msgtype50.c |   10 +---------
 drivers/s390/crypto/zcrypt_msgtype6.c  |   14 ++------------
 4 files changed, 5 insertions(+), 22 deletions(-)

--- a/drivers/s390/crypto/zcrypt_api.c
+++ b/drivers/s390/crypto/zcrypt_api.c
@@ -340,7 +340,7 @@ struct zcrypt_ops *__ops_lookup(unsigned
 	spin_lock_bh(&zcrypt_ops_list_lock);
 	list_for_each_entry(zops, &zcrypt_ops_list, list) {
 		if ((zops->variant == variant) &&
-		    (!strncmp(zops->owner->name, name, MODULE_NAME_LEN))) {
+		    (!strncmp(zops->name, name, MODULE_NAME_LEN))) {
 			found = 1;
 			break;
 		}
--- a/drivers/s390/crypto/zcrypt_api.h
+++ b/drivers/s390/crypto/zcrypt_api.h
@@ -94,6 +94,7 @@ struct zcrypt_ops {
 	long (*rng)(struct zcrypt_device *, char *);
 	struct list_head list;		/* zcrypt ops list. */
 	struct module *owner;
+	char *name;
 	int variant;
 };
 
--- a/drivers/s390/crypto/zcrypt_msgtype50.c
+++ b/drivers/s390/crypto/zcrypt_msgtype50.c
@@ -50,11 +50,6 @@ MODULE_AUTHOR("IBM Corporation");
 MODULE_DESCRIPTION("Cryptographic Accelerator (message type 50), " \
 		   "Copyright IBM Corp. 2001, 2012");
 MODULE_LICENSE("GPL");
-#else
-/* Dummy msgtype50 module for monolithic device driver */
-static struct module msgtypt50_dummy_module = {
-	.name = MSGTYPE50_NAME,
-};
 #endif
 
 static void zcrypt_cex2a_receive(struct ap_device *, struct ap_message *,
@@ -503,11 +498,8 @@ out_free:
  * The crypto operations for message type 50.
  */
 static struct zcrypt_ops zcrypt_msgtype50_ops = {
-#ifndef CONFIG_ZCRYPT_MONOLITHIC
 	.owner = THIS_MODULE,
-#else
-	.owner = &msgtypt50_dummy_module,
-#endif
+	.name = MSGTYPE50_NAME,
 	.rsa_modexpo = zcrypt_cex2a_modexpo,
 	.rsa_modexpo_crt = zcrypt_cex2a_modexpo_crt,
 	.variant = MSGTYPE50_VARIANT_DEFAULT,
--- a/drivers/s390/crypto/zcrypt_msgtype6.c
+++ b/drivers/s390/crypto/zcrypt_msgtype6.c
@@ -56,10 +56,6 @@ MODULE_AUTHOR("IBM Corporation");
 MODULE_DESCRIPTION("Cryptographic Coprocessor (message type 6), " \
 		   "Copyright IBM Corp. 2001, 2012");
 MODULE_LICENSE("GPL");
-#else
-static struct module msgtype06_dummy_module = {
-	.name = MSGTYPE06_NAME,
-};
 #endif
 
 static void zcrypt_msgtype6_receive(struct ap_device *, struct ap_message *,
@@ -829,11 +825,8 @@ static long zcrypt_msgtype6_rng(struct z
  * The crypto operations for a PCIXCC/CEX2C card.
  */
 static struct zcrypt_ops zcrypt_msgtype6_norng_ops = {
-#ifndef CONFIG_ZCRYPT_MONOLITHIC
 	.owner = THIS_MODULE,
-#else
-	.owner = &msgtype06_dummy_module,
-#endif
+	.name = MSGTYPE06_NAME,
 	.variant = MSGTYPE06_VARIANT_NORNG,
 	.rsa_modexpo = zcrypt_msgtype6_modexpo,
 	.rsa_modexpo_crt = zcrypt_msgtype6_modexpo_crt,
@@ -841,11 +834,8 @@ static struct zcrypt_ops zcrypt_msgtype6
 };
 
 static struct zcrypt_ops zcrypt_msgtype6_ops = {
-#ifndef CONFIG_ZCRYPT_MONOLITHIC
 	.owner = THIS_MODULE,
-#else
-	.owner = &msgtype06_dummy_module,
-#endif
+	.name = MSGTYPE06_NAME,
 	.variant = MSGTYPE06_VARIANT_DEFAULT,
 	.rsa_modexpo = zcrypt_msgtype6_modexpo,
 	.rsa_modexpo_crt = zcrypt_msgtype6_modexpo_crt,
