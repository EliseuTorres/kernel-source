Subject: zfcp: Assign scheduled work to driver queue
References: BNC#565612
From: Gerald Schaefer <geraldsc@de.ibm.com>
Patch-mainline: 2.6.33-rc1
Git-commit: 9eae07ef6bb5988163d8bb82cd952905db47b721

Symptom: Kernel message "kobject_add_internal failed for
             0x5005076401a07163 with -EEXIST, don't try to register
             things with the same name in the same directory."
Problem: The port_scan work was scheduled to the work_queue
             provided by the kernel. This resulted on SMP systems
             to a likely situation that more than one scan_work were
             processed in parallel. This is not required and openes
             the possibility of race conditions between the removal
             of invalid ports and the enqueue of just scanned ports.
Solution: This patch synchronizes the scan_work tasks by scheduling
             them to adapter local work_queue.
Acked-by: John Jolly <jjolly@suse.de>

---

 drivers/s390/scsi/zfcp_aux.c   |    2 +-
 drivers/s390/scsi/zfcp_erp.c   |    2 +-
 drivers/s390/scsi/zfcp_ext.h   |    3 +--
 drivers/s390/scsi/zfcp_fc.c    |   25 +++++++++----------------
 drivers/s390/scsi/zfcp_fsf.c   |    2 +-
 drivers/s390/scsi/zfcp_sysfs.c |    8 +++++---
 6 files changed, 18 insertions(+), 24 deletions(-)

--- a/drivers/s390/scsi/zfcp_aux.c	2009-12-03 04:51:21.000000000 +0100
+++ b/drivers/s390/scsi/zfcp_aux.c	2009-12-07 14:25:19.000000000 +0100
@@ -556,7 +556,7 @@ int zfcp_adapter_enqueue(struct ccw_devi
 		goto erp_thread_failed;
 
 	INIT_WORK(&adapter->stat_work, _zfcp_status_read_scheduler);
-	INIT_WORK(&adapter->scan_work, _zfcp_fc_scan_ports_later);
+	INIT_WORK(&adapter->scan_work, zfcp_fc_scan_ports);
 
 	adapter->service_level.seq_print = zfcp_print_sl;
 
--- a/drivers/s390/scsi/zfcp_erp.c	2009-12-03 04:51:21.000000000 +0100
+++ b/drivers/s390/scsi/zfcp_erp.c	2009-12-07 14:25:19.000000000 +0100
@@ -1188,7 +1188,7 @@ static void zfcp_erp_action_cleanup(stru
 	case ZFCP_ERP_ACTION_REOPEN_ADAPTER:
 		if (result == ZFCP_ERP_SUCCEEDED) {
 			register_service_level(&adapter->service_level);
-			schedule_work(&adapter->scan_work);
+			queue_work(adapter->work_queue, &adapter->scan_work);
 		} else
 			unregister_service_level(&adapter->service_level);
 		zfcp_adapter_put(adapter);
--- a/drivers/s390/scsi/zfcp_ext.h	2009-12-03 04:51:21.000000000 +0100
+++ b/drivers/s390/scsi/zfcp_ext.h	2009-12-07 14:25:19.000000000 +0100
@@ -92,8 +92,7 @@ extern void zfcp_erp_adapter_access_chan
 extern void zfcp_erp_timeout_handler(unsigned long);
 
 /* zfcp_fc.c */
-extern int zfcp_fc_scan_ports(struct zfcp_adapter *);
-extern void _zfcp_fc_scan_ports_later(struct work_struct *);
+extern void zfcp_fc_scan_ports(struct work_struct *);
 extern void zfcp_fc_incoming_els(struct zfcp_fsf_req *);
 extern void zfcp_fc_port_did_lookup(struct work_struct *);
 extern void zfcp_fc_trigger_did_lookup(struct zfcp_port *);
--- a/drivers/s390/scsi/zfcp_fc.c	2009-12-03 04:51:21.000000000 +0100
+++ b/drivers/s390/scsi/zfcp_fc.c	2009-12-07 14:25:19.000000000 +0100
@@ -182,7 +182,7 @@ static void zfcp_fc_incoming_rscn(struct
 		range_mask = rscn_range_mask[fcp_rscn_element->addr_format];
 		_zfcp_fc_incoming_rscn(fsf_req, range_mask, fcp_rscn_element);
 	}
-	schedule_work(&fsf_req->adapter->scan_work);
+	queue_work(fsf_req->adapter->work_queue, &fsf_req->adapter->scan_work);
 }
 
 static void zfcp_fc_incoming_wwpn(struct zfcp_fsf_req *req, u64 wwpn)
@@ -664,10 +664,12 @@ static int zfcp_fc_eval_gpn_ft(struct zf
 
 /**
  * zfcp_fc_scan_ports - scan remote ports and attach new ports
- * @adapter: pointer to struct zfcp_adapter
+ * @work: reference to scheduled work
  */
-int zfcp_fc_scan_ports(struct zfcp_adapter *adapter)
+void zfcp_fc_scan_ports(struct work_struct *work)
 {
+	struct zfcp_adapter *adapter = container_of(work, struct zfcp_adapter,
+						    scan_work);
 	int ret, i;
 	struct zfcp_gpn_ft *gpn_ft;
 	int chain, max_entries, buf_num, max_bytes;
@@ -679,17 +681,14 @@ int zfcp_fc_scan_ports(struct zfcp_adapt
 
 	if (fc_host_port_type(adapter->scsi_host) != FC_PORTTYPE_NPORT &&
 	    fc_host_port_type(adapter->scsi_host) != FC_PORTTYPE_NPIV)
-		return 0;
+		return;
 
-	ret = zfcp_fc_wka_port_get(&adapter->gs->ds);
-	if (ret)
-		return ret;
+	if (zfcp_fc_wka_port_get(&adapter->gs->ds))
+		return;
 
 	gpn_ft = zfcp_alloc_sg_env(buf_num);
-	if (!gpn_ft) {
-		ret = -ENOMEM;
+	if (!gpn_ft)
 		goto out;
-	}
 
 	for (i = 0; i < 3; i++) {
 		ret = zfcp_fc_send_gpn_ft(gpn_ft, adapter, max_bytes);
@@ -704,15 +703,9 @@ int zfcp_fc_scan_ports(struct zfcp_adapt
 	zfcp_free_sg_env(gpn_ft, buf_num);
 out:
 	zfcp_fc_wka_port_put(&adapter->gs->ds);
-	return ret;
 }
 
 
-void _zfcp_fc_scan_ports_later(struct work_struct *work)
-{
-	zfcp_fc_scan_ports(container_of(work, struct zfcp_adapter, scan_work));
-}
-
 struct zfcp_els_fc_job {
 	struct zfcp_send_els els;
 	struct fc_bsg_job *job;
--- a/drivers/s390/scsi/zfcp_fsf.c	2009-12-03 04:51:21.000000000 +0100
+++ b/drivers/s390/scsi/zfcp_fsf.c	2009-12-07 14:25:19.000000000 +0100
@@ -291,7 +291,7 @@ static void zfcp_fsf_status_read_handler
 			zfcp_erp_adapter_access_changed(adapter, "fssrh_3",
 							req);
 		if (sr_buf->status_subtype & FSF_STATUS_READ_SUB_INCOMING_ELS)
-			schedule_work(&adapter->scan_work);
+			queue_work(adapter->work_queue, &adapter->scan_work);
 		break;
 	case FSF_STATUS_READ_CFDC_UPDATED:
 		zfcp_erp_adapter_access_changed(adapter, "fssrh_4", req);
--- a/drivers/s390/scsi/zfcp_sysfs.c	2009-12-03 04:51:21.000000000 +0100
+++ b/drivers/s390/scsi/zfcp_sysfs.c	2009-12-07 14:26:45.000000000 +0100
@@ -121,13 +121,15 @@ static ssize_t zfcp_sysfs_port_rescan_st
 					    const char *buf, size_t count)
 {
 	struct zfcp_adapter *adapter = dev_get_drvdata(dev);
-	int ret;
 
 	if (atomic_read(&adapter->status) & ZFCP_STATUS_COMMON_REMOVE)
 		return -EBUSY;
 
-	ret = zfcp_fc_scan_ports(adapter);
-	return ret ? ret : (ssize_t) count;
+	/* sync the user-space- with the kernel-invocation of scan_work */
+	queue_work(adapter->work_queue, &adapter->scan_work);
+	flush_work(&adapter->scan_work);
+
+	return (ssize_t) count;
 }
 static ZFCP_DEV_ATTR(adapter, port_rescan, S_IWUSR, NULL,
 		     zfcp_sysfs_port_rescan_store);
