From fd877c5dbc80e7c534b4ec915febae0d51ff441b Mon Sep 17 00:00:00 2001
From: Robert Richter <rrichter@cavium.com>
Date: Fri, 3 Jul 2015 15:46:04 +0200
Subject: [PATCH 130/131] arm64, acpi, iort: Shorten struct
 acpi_table_iort_node_*
Git-commit: 23d6d336c998c434a037791e2787f75a8813a3b0
Patch-mainline: Queued in subsystem maintainer repository
Git-repo: git://git.kernel.org/pub/scm/linux/kernel/git/rric/linux.git thunder/master-v4.1

Structs are way to long with acpi_table_iort_node_ prefix.

Shorten it with sed:

 sed -i -e 's/acpi_table_iort_node_/acpi_iort_/' drivers/acpi/iort.c   \
   include/acpi/actbl2.h drivers/iommu/arm-smmu.c include/linux/iort.h

Signed-off-by: Robert Richter <rrichter@cavium.com>

Signed-off-by: Matthias Brugger <mbrugger@suse.com>

---
 drivers/acpi/iort.c   | 40 ++++++++++++++++++++--------------------
 include/acpi/actbl2.h | 14 +++++++-------
 2 files changed, 27 insertions(+), 27 deletions(-)

diff --git a/drivers/acpi/iort.c b/drivers/acpi/iort.c
index 36c86fd..41791a1 100644
--- a/drivers/acpi/iort.c
+++ b/drivers/acpi/iort.c
@@ -41,7 +41,7 @@ struct iort_its_msi_chip {
 };
 
 typedef acpi_status (*iort_find_node_callback)
-	(struct acpi_table_iort_node_header *node, void *context);
+	(struct acpi_iort_header *node, void *context);
 
 static LIST_HEAD(iort_pci_msi_chip_list);
 static DEFINE_MUTEX(iort_pci_msi_chip_mutex);
@@ -99,17 +99,17 @@ static struct msi_controller *iort_pci_find_msi_chip_by_id(u32 its_id)
 }
 EXPORT_SYMBOL_GPL(iort_pci_find_msi_chip_by_id);
 
-static struct acpi_table_iort_node_header *
-iort_find_root_node(struct acpi_table_iort_node_header *node)
+static struct acpi_iort_header *
+iort_find_root_node(struct acpi_iort_header *node)
 {
-	struct acpi_table_iort_node_id *id_map;
+	struct acpi_iort_id *id_map;
 
 	if (!node)
 		return NULL;
 
 	/* Root node has no ID map */
 	while (node->ref_to_ids) {
-		id_map = ACPI_ADD_PTR(struct acpi_table_iort_node_id,
+		id_map = ACPI_ADD_PTR(struct acpi_iort_id,
 				      node, node->ref_to_ids);
 
 		/* Firmware bug! */
@@ -119,22 +119,22 @@ iort_find_root_node(struct acpi_table_iort_node_header *node)
 			return NULL;
 		}
 
-		node = ACPI_ADD_PTR(struct acpi_table_iort_node_header,
+		node = ACPI_ADD_PTR(struct acpi_iort_header,
 					 iort_table, id_map->output_ref);
 	}
 
 	return node;
 }
 
-static struct acpi_table_iort_node_header *
+static struct acpi_iort_header *
 iort_find_node_type(int type, iort_find_node_callback callback, void *context)
 {
-	struct acpi_table_iort_node_header *iort_node, *iort_end;
+	struct acpi_iort_header *iort_node, *iort_end;
 
 	/* Skip IORT header */
-	iort_node = ACPI_ADD_PTR(struct acpi_table_iort_node_header, iort_table,
+	iort_node = ACPI_ADD_PTR(struct acpi_iort_header, iort_table,
 				 sizeof(struct acpi_table_iort));
-	iort_end = ACPI_ADD_PTR(struct acpi_table_iort_node_header, iort_table,
+	iort_end = ACPI_ADD_PTR(struct acpi_iort_header, iort_table,
 				iort_table->length);
 
 	while (iort_node < iort_end) {
@@ -143,7 +143,7 @@ iort_find_node_type(int type, iort_find_node_callback callback, void *context)
 				return iort_node;
 		}
 
-		iort_node = ACPI_ADD_PTR(struct acpi_table_iort_node_header,
+		iort_node = ACPI_ADD_PTR(struct acpi_iort_header,
 					  iort_node, iort_node->length);
 	}
 
@@ -151,13 +151,13 @@ iort_find_node_type(int type, iort_find_node_callback callback, void *context)
 }
 
 static acpi_status
-iort_find_pci_rc_callback(struct acpi_table_iort_node_header *node, void *context)
+iort_find_pci_rc_callback(struct acpi_iort_header *node, void *context)
 {
 	int segment = *(int *)context;
-	struct acpi_table_iort_node_root_complex *pci_rc;
+	struct acpi_iort_root_complex *pci_rc;
 
-	pci_rc = ACPI_ADD_PTR(struct acpi_table_iort_node_root_complex, node,
-			      sizeof(struct acpi_table_iort_node_header));
+	pci_rc = ACPI_ADD_PTR(struct acpi_iort_root_complex, node,
+			      sizeof(struct acpi_iort_header));
 
 	if (pci_rc->segment == segment)
 		return AE_OK;
@@ -165,7 +165,7 @@ iort_find_pci_rc_callback(struct acpi_table_iort_node_header *node, void *contex
 	return AE_NOT_FOUND;
 }
 
-static struct acpi_table_iort_node_header *
+static struct acpi_iort_header *
 iort_find_pci_rc(int segment)
 {
 
@@ -178,8 +178,8 @@ iort_find_pci_rc(int segment)
 
 struct msi_controller *iort_find_pci_msi_chip(int segment, unsigned int idx)
 {
-	struct acpi_table_iort_node_its *its_node;
-	struct acpi_table_iort_node_header *node;
+	struct acpi_iort_its *its_node;
+	struct acpi_iort_header *node;
 	struct msi_controller *msi_chip;
 
 	if (!iort_table)
@@ -200,8 +200,8 @@ struct msi_controller *iort_find_pci_msi_chip(int segment, unsigned int idx)
 	}
 
 	/* Move to ITS specific data */
-	its_node = ACPI_ADD_PTR(struct acpi_table_iort_node_its, node,
-				sizeof(struct acpi_table_iort_node_header));
+	its_node = ACPI_ADD_PTR(struct acpi_iort_its, node,
+				sizeof(struct acpi_iort_header));
 
 	if (idx > its_node->number_of_its) {
 		pr_err(IORT_PFX "requested ITS ID index [%d] is greater than available ITS IDs [%d]\n",
diff --git a/include/acpi/actbl2.h b/include/acpi/actbl2.h
index f5a4a6f..7073455 100644
--- a/include/acpi/actbl2.h
+++ b/include/acpi/actbl2.h
@@ -662,7 +662,7 @@ struct acpi_table_iort
 
 };
 
-struct acpi_table_iort_node_header {
+struct acpi_iort_header {
 	u8	type;
 	u16	length;
 	u8	revision;
@@ -683,7 +683,7 @@ enum acpi_iort_type {
 	ACPI_IORT_TYPE_RESERVED = 5 /* 5 and greater are reserved */
 };
 
-struct acpi_table_iort_node_id {
+struct acpi_iort_id {
 	u16	length;
 	u16	flags;
 	u32	input_base;
@@ -693,7 +693,7 @@ struct acpi_table_iort_node_id {
 
 #define IORT_ID_SINGLE_MAPPING	(1 << 0ULL)
 
-struct acpi_table_iort_node_smmu_v12 {
+struct acpi_iort_smmu_v12 {
 	u64	base_address;
 	u64	span;
 	u32	model;
@@ -712,7 +712,7 @@ struct acpi_table_iort_node_smmu_v12 {
 	u32	smmu_nsg_cfg_irpt_flags;
 };
 
-struct acpi_table_iort_node_smmu_v3 {
+struct acpi_iort_smmu_v3 {
 	u64	base_address;
 	u64	span;
 	u32	model;
@@ -726,17 +726,17 @@ struct acpi_table_iort_node_smmu_v3 {
 	u32	sync_flags;
 };
 
-struct acpi_table_iort_node_its {
+struct acpi_iort_its {
 	u32	number_of_its;
 	u32	its_id[1];
 };
 
-struct acpi_table_iort_node_named_component {
+struct acpi_iort_named_component {
 	u32	coherency_attribute;
 	char	device_name[1];
 };
 
-struct acpi_table_iort_node_root_complex {
+struct acpi_iort_root_complex {
 	u32	ats_attribute;
 	u32	segment;
 };
-- 
1.7.12.4

