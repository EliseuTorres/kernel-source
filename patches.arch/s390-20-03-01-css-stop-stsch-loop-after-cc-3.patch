From: Peter Oberparleiter <oberpar@linux.vnet.ibm.com>
Subject: s390/css: stop stsch loop after cc 3
Patch-mainline: v3.7-rc3
Git-commit: cec8546638dc634824b629e33968d6c68f8b07d6
References: bnc#874145, LTC#109378

Description:  cio: Stop STSCH loop after CC 3
Symptom:      Unnecessarily high management time spent for Linux systems
              during subchannel scan, for example after path events.
Problem:      Linux always scans the full range of possible subchannels
              instead of aborting when the last subchannel in a subchannel
              set has been scanned.
Solution:     Abort subchannel scan loop when the STSCH instruction indicates
              last subchannel found.
Reproduction: Trigger a subchannel scan loop and observe the management time
              spent, for example using the hyptop tool.

Upstream-Description:

              s390/css: stop stsch loop after cc 3

              Receiving cc=3 from store subchannel means 2 things:
              * the subchannel is not provided
              * there are no further subchannels in this subchannel set

              With this patch we abort the store subchannel loop after cc=3 (or an
              exception) and clear the subsequent bits in the subchannel id set.

              Reported-by: Cornelia Huck <cornelia.huck@de.ibm.com>
              Signed-off-by: Sebastian Ott <sebott@linux.vnet.ibm.com>
              Acked-by: Peter Oberparleiter <peter.oberparleiter@de.ibm.com>
              Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>


Signed-off-by: Peter Oberparleiter <oberpar@linux.vnet.ibm.com>
Acked-by: John Jolly <jjolly@suse.de>
---
 drivers/s390/cio/css.c   |    7 ++++++-
 drivers/s390/cio/idset.c |    8 ++++++++
 drivers/s390/cio/idset.h |    1 +
 3 files changed, 15 insertions(+), 1 deletion(-)

--- a/drivers/s390/cio/css.c
+++ b/drivers/s390/cio/css.c
@@ -385,7 +385,11 @@ static int css_evaluate_new_subchannel(s
 		/* Will be done on the slow path. */
 		return -EAGAIN;
 	}
-	if (stsch_err(schid, &schib) || !css_sch_is_valid(&schib)) {
+	if (stsch_err(schid, &schib)) {
+		/* Subchannel is not provided. */
+		return -ENXIO;
+	}
+	if (!css_sch_is_valid(&schib)) {
 		/* Unusable - ignore. */
 		return 0;
 	}
@@ -544,6 +548,7 @@ static int slow_eval_unknown_fn(struct s
 		case -ENOMEM:
 		case -EIO:
 			/* These should abort looping */
+			idset_sch_del_subseq(slow_subchannel_set, schid);
 			break;
 		default:
 			rc = 0;
--- a/drivers/s390/cio/idset.c
+++ b/drivers/s390/cio/idset.c
@@ -59,6 +59,14 @@ static inline void idset_del(struct idse
 	clear_bit(ssid * set->num_id + id, set->bitmap);
 }
 
+/* Clear ids starting from @schid up to end of subchannel set. */
+void idset_sch_del_subseq(struct idset *set, struct subchannel_id schid)
+{
+	int pos = schid.ssid * set->num_id + schid.sch_no;
+
+	bitmap_clear(set->bitmap, pos, set->num_id - schid.sch_no);
+}
+
 static inline int idset_contains(struct idset *set, int ssid, int id)
 {
 	return test_bit(ssid * set->num_id + id, set->bitmap);
--- a/drivers/s390/cio/idset.h
+++ b/drivers/s390/cio/idset.h
@@ -19,6 +19,7 @@ void idset_fill(struct idset *set);
 struct idset *idset_sch_new(void);
 void idset_sch_add(struct idset *set, struct subchannel_id id);
 void idset_sch_del(struct idset *set, struct subchannel_id id);
+void idset_sch_del_subseq(struct idset *set, struct subchannel_id schid);
 int idset_sch_contains(struct idset *set, struct subchannel_id id);
 int idset_sch_get_first(struct idset *set, struct subchannel_id *id);
 int idset_is_empty(struct idset *set);
