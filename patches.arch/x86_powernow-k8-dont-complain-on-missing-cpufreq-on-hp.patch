From: Thomas Renninger <trenn@suse.de>
Subject: X86 cpufreq: Do not complain on missing cpufreq tables on ProLiants
References: bnc#787202
Patch-Mainline: no

They do by default cpufreq scaling in BIOS and do not export cpufreq
tables via ACPI (but some info via cpufreq_pcc).
Which option is set in BIOS (OS cpufreq control or in BIOS cpufreq
control) is hard to identify in powernow-k8 driver.
-> Simply be not that harsh for ProLiants.

Signed-off-by: Thomas Renninger <trenn@suse.de>

---
 drivers/cpufreq/powernow-k8.c |   18 +++++++++++++++++-
 1 file changed, 17 insertions(+), 1 deletion(-)

Index: linux-3.0-SLE11-SP2/drivers/cpufreq/powernow-k8.c
===================================================================
--- linux-3.0-SLE11-SP2.orig/drivers/cpufreq/powernow-k8.c
+++ linux-3.0-SLE11-SP2/drivers/cpufreq/powernow-k8.c
@@ -34,6 +34,7 @@
 #include <linux/cpumask.h>
 #include <linux/io.h>
 #include <linux/delay.h>
+#include <linux/dmi.h>
 
 #include <asm/msr.h>
 
@@ -1263,6 +1264,14 @@ static void __cpuinit powernowk8_cpu_ini
 	init_on_cpu->rc = 0;
 }
 
+/*
+ * Latest HP ProLiant do cpufreq in BIOS by default and may not present
+ * P-state related ACPI information to the OS/driver on cpufreq capable
+ * machines on purpose.
+ * Do not throw a firmware bug exception for these.
+ */
+static int is_proliant = -1;
+
 /* per CPU init entry point to the driver */
 static int __cpuinit powernowk8_cpu_init(struct cpufreq_policy *pol)
 {
@@ -1274,6 +1283,9 @@ static int __cpuinit powernowk8_cpu_init
 	int rc;
 	struct cpuinfo_x86 *c = &cpu_data(pol->cpu);
 
+	if (is_proliant == -1)
+		is_proliant = dmi_name_in_vendors("ProLiant");
+
 	if (!cpu_online(pol->cpu))
 		return -ENODEV;
 
@@ -1296,7 +1308,11 @@ static int __cpuinit powernowk8_cpu_init
 		 * an UP version, and is deprecated by AMD.
 		 */
 		if (num_online_cpus() != 1) {
-			printk_once(ACPI_PSS_BIOS_BUG_MSG);
+			if (is_proliant)
+				printk_once(KERN_INFO FW_INFO PFX
+    "HP ProLiant without cpufreq info. Assume BIOS driven cpufreq scaling\n");
+			else
+				printk_once(ACPI_PSS_BIOS_BUG_MSG);
 			goto err_out;
 		}
 		if (pol->cpu != 0) {
