From: Gerald Schaefer <geraldsc@de.ibm.com>
Subject: callhome:  fix broken proc interface and activate compid
References: bnc#748862,LTC#79115
Patch-mainline: No, SUSE only

Description: kernel: incorrect device printk message tags
Symptom:     The id of the message tag <component.id> for printk messages
             related to device are incorrect. The message description for
             device messages can not be found.
Problem:     The device printk message calls changed with kernel 2.6.36
             and the jhash implementation changed with kernel 2.6.38.
             The hashes calculated for the device printk strings do
             not match with the hashes in the message catalog.
Solution:    Use the custom jhash implementation that implements the
             old jhash algorith and adapt the device printk calls to
             match the format used in the message catalog.

Acked-by: John Jolly <jjolly@suse.de>
---
 arch/s390/kernel/Makefile |    3 +
 arch/s390/kernel/kmsg.c   |  123 ++++++++++++++++++++++++++++++++++++++++++++++
 drivers/base/core.c       |   62 -----------------------
 include/linux/device.h    |   24 +++++---
 kernel/printk.c           |   64 -----------------------
 5 files changed, 142 insertions(+), 134 deletions(-)

--- a/arch/s390/kernel/Makefile
+++ b/arch/s390/kernel/Makefile
@@ -58,3 +58,6 @@ obj-$(CONFIG_KEXEC) += $(S390_KEXEC_OBJS
 obj-$(CONFIG_64BIT)		+= vdso64/
 obj-$(CONFIG_32BIT)		+= vdso32/
 obj-$(CONFIG_COMPAT)		+= vdso32/
+
+# kernel message catalog
+obj-$(CONFIG_KMSG_IDS)		+= kmsg.o
--- /dev/null
+++ b/arch/s390/kernel/kmsg.c
@@ -0,0 +1,123 @@
+/*
+ * Message printing with message catalog prefixes.
+ *
+ * Copyright IBM Corp. 2012
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/jhash.h>
+#include <linux/device.h>
+
+static inline u32 __printk_jhash(const void *key, u32 length)
+{
+	u32 a, b, c, len;
+	const u8 *k;
+	u8 zk[12];
+
+	a = b = 0x9e3779b9;
+	c = 0;
+	for (len = length + 12, k = key; len >= 12; len -= 12, k += 12) {
+		if (len >= 24) {
+			a += k[0] | k[1] << 8 | k[2] << 16 | k[3] << 24;
+			b += k[4] | k[5] << 8 | k[6] << 16 | k[7] << 24;
+			c += k[8] | k[9] << 8 | k[10] << 16 | k[11] << 24;
+		} else {
+			memset(zk, 0, 12);
+			memcpy(zk, k, len - 12);
+			a += zk[0] | zk[1] << 8 | zk[2] << 16 | zk[3] << 24;
+			b += zk[4] | zk[5] << 8 | zk[6] << 16 | zk[7] << 24;
+			c += (u32) zk[8] << 8;
+			c += (u32) zk[9] << 16;
+			c += (u32) zk[10] << 24;
+			c += length;
+		}
+		a -= b + c; a ^= (c>>13);
+		b -= a + c; b ^= (a<<8);
+		c -= a + b; c ^= (b>>13);
+		a -= b + c; a ^= (c>>12);
+		b -= a + c; b ^= (a<<16);
+		c -= a + b; c ^= (b>>5);
+		a -= b + c; a ^= (c>>3);
+		b -= a + c; b ^= (a<<10);
+		c -= a + b; c ^= (b>>15);
+	}
+	return c;
+}
+
+/**
+ * printk_hash - print a kernel message include a hash over the message
+ * @prefix: message prefix including the ".%06x" for the hash
+ * @fmt: format string
+ */
+asmlinkage int printk_hash(const char *prefix, const char *fmt, ...)
+{
+	va_list args;
+	int r;
+
+	r = printk(prefix, __printk_jhash(fmt, strlen(fmt)) & 0xffffff);
+	va_start(args, fmt);
+	r += vprintk(fmt, args);
+	va_end(args);
+
+	return r;
+}
+EXPORT_SYMBOL(printk_hash);
+
+static int __dev_printk_hash(const char *level, const struct device *dev,
+			     struct va_format *vaf)
+{
+	if (!dev)
+		return printk("%s(NULL device *): %pV", level, vaf);
+
+	return printk("%s%s.%06x: %pV", level, dev_driver_string(dev),
+		      __printk_jhash(vaf->fmt, strlen(vaf->fmt)) & 0xffffff,
+		      vaf);
+}
+
+int dev_printk_hash(const char *level, const struct device *dev,
+		    const char *fmt, ...)
+{
+	struct va_format vaf;
+	va_list args;
+	int r;
+
+	va_start(args, fmt);
+
+	vaf.fmt = fmt;
+	vaf.va = &args;
+
+	r = __dev_printk_hash(level, dev, &vaf);
+	va_end(args);
+
+	return r;
+}
+EXPORT_SYMBOL(dev_printk_hash);
+
+#define define_dev_printk_hash_level(func, kern_level)		\
+int func(const struct device *dev, const char *fmt, ...)	\
+{								\
+	struct va_format vaf;					\
+	va_list args;						\
+	int r;							\
+								\
+	va_start(args, fmt);					\
+								\
+	vaf.fmt = fmt;						\
+	vaf.va = &args;						\
+								\
+	r = __dev_printk_hash(kern_level, dev, &vaf);		\
+	va_end(args);						\
+								\
+	return r;						\
+}								\
+EXPORT_SYMBOL(func);
+
+define_dev_printk_hash_level(dev_emerg_hash, KERN_EMERG);
+define_dev_printk_hash_level(dev_alert_hash, KERN_ALERT);
+define_dev_printk_hash_level(dev_crit_hash, KERN_CRIT);
+define_dev_printk_hash_level(dev_err_hash, KERN_ERR);
+define_dev_printk_hash_level(dev_warn_hash, KERN_WARNING);
+define_dev_printk_hash_level(dev_notice_hash, KERN_NOTICE);
+define_dev_printk_hash_level(_dev_info_hash, KERN_INFO);
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@ -1824,66 +1824,4 @@ define_dev_printk_level(dev_warn, KERN_W
 define_dev_printk_level(dev_notice, KERN_NOTICE);
 define_dev_printk_level(_dev_info, KERN_INFO);
 
-#ifdef CONFIG_KMSG_IDS
-
-static int __dev_printk_hash(const char *level, const struct device *dev,
-			     struct va_format *vaf)
-{
-	if (!dev)
-		return printk("%s(NULL device *): %pV", level, vaf);
-
-	return printk("%s%s.%06x: %s: %pV",
-		      level, dev_driver_string(dev),
-		      jhash(vaf->fmt, strlen(vaf->fmt), 0) & 0xffffff,
-		      dev_name(dev), vaf);
-}
-
-int dev_printk_hash(const char *level, const struct device *dev,
-		    const char *fmt, ...)
-{
-	struct va_format vaf;
-	va_list args;
-	int r;
-
-	va_start(args, fmt);
-
-	vaf.fmt = fmt;
-	vaf.va = &args;
-
-	r = __dev_printk(level, dev, &vaf);
-	va_end(args);
-
-	return r;
-}
-EXPORT_SYMBOL(dev_printk_hash);
-
-#define define_dev_printk_hash_level(func, kern_level)		\
-int func(const struct device *dev, const char *fmt, ...)	\
-{								\
-	struct va_format vaf;					\
-	va_list args;						\
-	int r;							\
-								\
-	va_start(args, fmt);					\
-								\
-	vaf.fmt = fmt;						\
-	vaf.va = &args;						\
-								\
-	r = __dev_printk_hash(kern_level, dev, &vaf);		\
-	va_end(args);						\
-								\
-	return r;						\
-}								\
-EXPORT_SYMBOL(func);
-
-define_dev_printk_hash_level(dev_emerg_hash, KERN_EMERG);
-define_dev_printk_hash_level(dev_alert_hash, KERN_ALERT);
-define_dev_printk_hash_level(dev_crit_hash, KERN_CRIT);
-define_dev_printk_hash_level(dev_err_hash, KERN_ERR);
-define_dev_printk_hash_level(dev_warn_hash, KERN_WARNING);
-define_dev_printk_hash_level(dev_notice_hash, KERN_NOTICE);
-define_dev_printk_hash_level(_dev_info_hash, KERN_INFO);
-
-#endif
-
 #endif
--- a/include/linux/device.h
+++ b/include/linux/device.h
@@ -821,14 +821,22 @@ extern int dev_notice_hash(const struct
 extern int _dev_info_hash(const struct device *dev, const char *fmt, ...)
 	__attribute__ ((format (printf, 2, 3)));
 
-#define dev_printk dev_printk_hash
-#define dev_emerg dev_emerg_hash
-#define dev_alert dev_alert_hash
-#define dev_crit dev_crit_hash
-#define dev_err dev_err_hash
-#define dev_warn dev_warn_hash
-#define dev_notice dev_notice_hash
-#define _dev_info _dev_info_hash
+#define dev_printk(level, dev, format, arg...)				\
+	dev_printk_hash(level, dev, "%s: " format, dev_name(dev), ## arg)
+#define dev_emerg(dev, format, arg...) \
+	dev_emerg_hash(dev, "%s: " format, dev_name(dev), ## arg)
+#define dev_alert(dev, format, arg...) \
+	dev_alert_hash(dev, "%s: " format, dev_name(dev), ## arg)
+#define dev_crit(dev, format, arg...) \
+	dev_crit_hash(dev, "%s: " format, dev_name(dev), ## arg)
+#define dev_err(dev, format, arg...) \
+	dev_err_hash(dev, "%s: " format, dev_name(dev), ## arg)
+#define dev_warn(dev, format, arg...) \
+	dev_warn_hash(dev, "%s: " format, dev_name(dev), ## arg)
+#define dev_notice(dev, format, arg...) \
+	dev_notice_hash(dev, "%s: " format, dev_name(dev), ## arg)
+#define _dev_info(dev, format, arg...) \
+	_dev_info_hash(dev, "%s: " format, dev_name(dev), ## arg)
 
 #else /* !defined(CONFIG_KMSG_IDS) */
 
--- a/kernel/printk.c
+++ b/kernel/printk.c
@@ -46,12 +46,6 @@
 #include <linux/cpu.h>
 #include <linux/notifier.h>
 #include <linux/rculist.h>
-#include <linux/jhash.h>
-#include <linux/device.h>
-
-#if defined CONFIG_PRINTK && defined CONFIG_KMSG_IDS
-#include <linux/unaligned/le_byteshift.h>
-#endif
 
 #include <asm/uaccess.h>
 
@@ -1759,61 +1753,3 @@ void kmsg_dump(enum kmsg_dump_reason rea
 	rcu_read_unlock();
 }
 #endif
-
-#if defined CONFIG_PRINTK && defined CONFIG_KMSG_IDS
-
-static inline u32 __printk_jhash(const void *key, u32 length)
-{
-	u32 a, b, c, len;
-	const u8 *k;
-	u8 zpad[12];
-
-	a = b = 0x9e3779b9;
-	c = 0;
-	for (len = length + 12, k = key; len >= 12; len -= 12, k += 12) {
-		if (len >= 24) {
-			a += __get_unaligned_le32(k);
-			b += __get_unaligned_le32(k + 4);
-			c += __get_unaligned_le32(k + 8);
-		} else {
-			memset(zpad, 0, 12);
-			memcpy(zpad, k, len - 12);
-			a += __get_unaligned_le32(zpad);
-			b += __get_unaligned_le32(zpad + 4);
-			c += (u32) zpad[8] << 8;
-			c += (u32) zpad[9] << 16;
-			c += (u32) zpad[10] << 24;
-			c += length;
-		}
-		a -= b + c; a ^= (c>>13);
-		b -= a + c; b ^= (a<<8);
-		c -= a + b; c ^= (b>>13);
-		a -= b + c; a ^= (c>>12);
-		b -= a + c; b ^= (a<<16);
-		c -= a + b; c ^= (b>>5);
-		a -= b + c; a ^= (c>>3);
-		b -= a + c; b ^= (a<<10);
-		c -= a + b; c ^= (b>>15);
-	}
-	return c;
-}
-
-/**
- * printk_hash - print a kernel message include a hash over the message
- * @prefix: message prefix including the ".%06x" for the hash
- * @fmt: format string
- */
-asmlinkage int printk_hash(const char *prefix, const char *fmt, ...)
-{
-	va_list args;
-	int r;
-
-	r = printk(prefix, __printk_jhash(fmt, strlen(fmt)) & 0xffffff);
-	va_start(args, fmt);
-	r += vprintk(fmt, args);
-	va_end(args);
-
-	return r;
-}
-EXPORT_SYMBOL(printk_hash);
-#endif
