From: Ingo Molnar <mingo@kernel.org>
Date: Thu, 17 Apr 2014 10:25:53 +0200
Subject: x86/mce: Fix CMCI preemption bugs
Git-commit: ea431643d6c38728195e2c456801c3ef66bb9991
Patch-mainline: v3.15-rc2
References: bnc#786450

The following commit:

  27f6c573e0f7 ("x86, CMCI: Add proper detection of end of CMCI storms")

Added two preemption bugs:

 - machine_check_poll() does a get_cpu_var() without a matching
   put_cpu_var(), which causes preemption imbalance and crashes upon
   bootup.

 - it does percpu ops without disabling preemption. Preemption is not
   disabled due to the mistaken use of a raw spinlock.

To fix these bugs fix the imbalance and change
cmci_discover_lock to a regular spinlock.

Reported-by: Owen Kibel <qmewlo@gmail.com>
Reported-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Ingo Molnar <mingo@kernel.org>
Cc: Chen, Gong <gong.chen@linux.intel.com>
Cc: Josh Boyer <jwboyer@fedoraproject.org>
Cc: Tony Luck <tony.luck@intel.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Alexander Todorov <atodorov@redhat.com>
Cc: Borislav Petkov <bp@alien8.de>
Link: http://lkml.kernel.org/n/tip-jtjptvgigpfkpvtQxpEk1at2@git.kernel.org
Signed-off-by: Ingo Molnar <mingo@kernel.org>
Acked-by: Borislav Petkov <bp@suse.de>
--
Index: kernel/arch/x86/kernel/cpu/mcheck/mce.c
===================================================================
--- kernel.orig/arch/x86/kernel/cpu/mcheck/mce.c	2014-05-19 18:24:08.332367143 +0200
+++ kernel/arch/x86/kernel/cpu/mcheck/mce.c	2014-05-19 18:24:44.496367268 +0200
@@ -602,7 +602,6 @@
 {
 	struct mce m;
 	int i;
-	unsigned long *v;
 
 	percpu_inc(mce_poll_count);
 
@@ -623,8 +622,7 @@
 		if (!(m.status & MCI_STATUS_VAL))
 			continue;
 
-		v = &get_cpu_var(mce_polled_error);
-		set_bit(0, v);
+		this_cpu_write(mce_polled_error, 1);
 		/*
 		 * Uncorrected or signalled events are handled by the exception
 		 * handler when it is enabled, so don't process those here.
