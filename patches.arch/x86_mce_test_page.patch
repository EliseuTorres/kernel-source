From: Andi Kleen <andi@firstfloor.org>
Subject: Expose Test pageflagA and set pageflagB primitive
References: fate#307738
Patch-Mainline: In Andi's mce subtree queued for 2.6.33 inclusion
Commit-ID: 2ec31ea0b82e4660e8d3a1bc60c5910e0095018f

Signed-off-by: Thomas Renninger <trenn@suse.de>

Now that cmpxchg is supposed to work on all architectures
we can use it to implement a "Test pageflagA and set pageflagB
primitive".  This is needed for page soft offlining to handle
free pages race free (test buddy and set hwpoison)
Right now it's only enabled for PageTestBuddyAndSetHWPoison
I had to add a asm/system.h dependency to linux/page-flags.h
to get cmpxchg for the inline
(alternative would be to move it all into pure macros)

OPEN Is asm/system.h the right include for cmpxchg
OPEN need to check compilation on more archs

Signed-off-by: Andi Kleen <ak@linux.intel.com>

diff --git a/include/linux/page-flags.h b/include/linux/page-flags.h
index 6b202b1..926edc1 100644
--- a/include/linux/page-flags.h
+++ b/include/linux/page-flags.h
@@ -9,6 +9,7 @@
 #ifndef __GENERATING_BOUNDS_H
 #include <linux/mm_types.h>
 #include <linux/bounds.h>
+#include <asm/system.h>
 #endif /* !__GENERATING_BOUNDS_H */
 
 /*
@@ -196,6 +197,19 @@ static inline int TestClearPage##uname(struct page *page) { return 0; }
 #define __TESTCLEARFLAG_FALSE(uname)					\
 static inline int __TestClearPage##uname(struct page *page) { return 0; }
 
+#define TESTSETOTHER(unamet, lnamet, unames, lnames) \
+static inline int PageTest##unamet##AndSet##unames(struct page *page) \
+{								\
+	unsigned long flags;					\
+	do {							\
+		flags = page->flags;				\
+		if (!(flags & (1UL << PG_ ## lnamet)))		\
+			return 0;				\
+	} while (cmpxchg(&page->flags, flags, flags | (1UL<<PG_##lnames)) != \
+			flags); 				\
+	return 1;						\
+}
+
 struct page;	/* forward declaration */
 
 TESTPAGEFLAG(Locked, locked) TESTSETFLAG(Locked, locked)
@@ -278,6 +292,7 @@ PAGEFLAG_FALSE(Uncached)
 #ifdef CONFIG_MEMORY_FAILURE
 PAGEFLAG(HWPoison, hwpoison)
 TESTSETFLAG(HWPoison, hwpoison)
+TESTSETOTHER(Buddy, buddy, HWPoison, hwpoison);
 #define __PG_HWPOISON (1UL << PG_hwpoison)
 #else
 PAGEFLAG_FALSE(HWPoison)
