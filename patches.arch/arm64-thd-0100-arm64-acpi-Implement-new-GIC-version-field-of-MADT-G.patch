From 206c79e867fa05b7ad0ea69dfdbe3137568d2dea Mon Sep 17 00:00:00 2001
From: Tomasz Nowicki <tomasz.nowicki@linaro.org>
Date: Thu, 8 Jan 2015 12:36:33 +0100
Subject: [PATCH 100/131] arm64, acpi: Implement new "GIC version" field of
 MADT GIC entry.
Git-commit: e96bf1e41da4f61c5f93e2e2c00d370e96440bbc
Patch-mainline: Queued in subsystem maintainer repository
Git-repo: git://git.kernel.org/pub/scm/linux/kernel/git/rric/linux.git thunder/master-v4.1

There is no need to probe GICv2 and GICv3 sequentially. From now on,
we know GIC version in advance. Note this patch does not break backward
compatibility for machines which are compliant with ACPI spec. 5.1.

Signed-off-by: Tomasz Nowicki <tomasz.nowicki@linaro.org>

Signed-off-by: Matthias Brugger <mbrugger@suse.com>

---
 arch/arm64/include/asm/acpi.h |  2 ++
 arch/arm64/kernel/acpi.c      | 31 +++++++++++++++++++++++++++++--
 include/acpi/actbl1.h         | 13 ++++++++++++-
 3 files changed, 43 insertions(+), 3 deletions(-)

diff --git a/arch/arm64/include/asm/acpi.h b/arch/arm64/include/asm/acpi.h
index 59c05d8..6592811 100644
--- a/arch/arm64/include/asm/acpi.h
+++ b/arch/arm64/include/asm/acpi.h
@@ -38,6 +38,7 @@ typedef u64 phys_cpuid_t;
 extern int acpi_disabled;
 extern int acpi_noirq;
 extern int acpi_pci_disabled;
+extern int acpi_gic_ver;
 
 /* 1 to indicate PSCI 0.2+ is implemented */
 static inline bool acpi_psci_present(void)
@@ -88,6 +89,7 @@ static inline void arch_fix_phys_package_id(int num, u32 slot) { }
 void __init acpi_init_cpus(void);
 
 #else
+#define acpi_gic_ver	0
 static inline bool acpi_psci_present(void) { return false; }
 static inline bool acpi_psci_use_hvc(void) { return false; }
 static inline void acpi_init_cpus(void) { }
diff --git a/arch/arm64/kernel/acpi.c b/arch/arm64/kernel/acpi.c
index 8b83955..88544e7 100644
--- a/arch/arm64/kernel/acpi.c
+++ b/arch/arm64/kernel/acpi.c
@@ -36,6 +36,8 @@ EXPORT_SYMBOL(acpi_disabled);
 int acpi_pci_disabled = 1;	/* skip ACPI PCI scan and IRQ initialization */
 EXPORT_SYMBOL(acpi_pci_disabled);
 
+int acpi_gic_ver;
+
 /* Processors with enabled flag and sane MPIDR */
 static int enabled_cpus;
 
@@ -319,12 +321,27 @@ void __init acpi_boot_table_init(void)
 	}
 }
 
+static int __init
+gic_acpi_find_ver(struct acpi_subtable_header *header,
+				const unsigned long end)
+{
+	struct acpi_madt_generic_distributor *dist;
+
+	dist = (struct acpi_madt_generic_distributor *)header;
+
+	if (BAD_MADT_ENTRY(dist, end))
+		return -EINVAL;
+
+	acpi_gic_ver = dist->gic_version;
+	return 0;
+}
+
 void __init acpi_gic_init(void)
 {
 	struct acpi_table_header *table;
 	acpi_status status;
 	acpi_size tbl_size;
-	int err;
+	int err, count;;
 
 	if (acpi_disabled)
 		return;
@@ -337,7 +354,17 @@ void __init acpi_gic_init(void)
 		return;
 	}
 
-	err = gic_v2_acpi_init(table);
+	count = acpi_parse_entries(ACPI_SIG_MADT,
+				   sizeof(struct acpi_table_madt),
+				   gic_acpi_find_ver, table,
+				   ACPI_MADT_TYPE_GENERIC_DISTRIBUTOR, 0);
+	if (count <= 0) {
+		pr_info("Error during GICD entries parsing, assuming GICv2\n");
+		acpi_gic_ver = ACPI_MADT_GIC_VER_V2;
+	}
+
+	err = acpi_gic_ver < ACPI_MADT_GIC_VER_V3 ?
+			gic_v2_acpi_init(table) : -ENXIO;
 	if (err)
 		pr_err("Failed to initialize GIC IRQ controller");
 
diff --git a/include/acpi/actbl1.h b/include/acpi/actbl1.h
index b80b0e6..c401396 100644
--- a/include/acpi/actbl1.h
+++ b/include/acpi/actbl1.h
@@ -819,6 +819,16 @@ struct acpi_madt_generic_interrupt {
 #define ACPI_MADT_PERFORMANCE_IRQ_MODE  (1<<1)	/* 01: Performance Interrupt Mode */
 #define ACPI_MADT_VGIC_IRQ_MODE         (1<<2)	/* 02: VGIC Maintenance Interrupt mode */
 
+enum acpi_madt_gic_ver_type
+{
+    ACPI_MADT_GIC_VER_UNKNOWN       = 0,
+    ACPI_MADT_GIC_VER_V2            = 1,
+    ACPI_MADT_GIC_VER_V2m           = 2,
+    ACPI_MADT_GIC_VER_V3            = 3,
+    ACPI_MADT_GIC_VER_V4            = 4,
+    ACPI_MADT_GIC_VER_RESERVED      = 5     /* 15 and greater are reserved */
+};
+
 /* 12: Generic Distributor (ACPI 5.0) */
 
 struct acpi_madt_generic_distributor {
@@ -827,7 +837,8 @@ struct acpi_madt_generic_distributor {
 	u32 gic_id;
 	u64 base_address;
 	u32 global_irq_base;
-	u32 reserved2;		/* reserved - must be zero */
+	u8 gic_version;
+	u8 reserved2[3];	/* reserved - must be zero */
 };
 
 /* 13: Generic MSI Frame (ACPI 5.1) */
-- 
1.7.12.4

