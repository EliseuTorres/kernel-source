From: FUJITA Tomonori <fujita.tomonori@lab.ntt.co.jp>
Subject: bootmem: Add free_bootmem_late()
Date: Tue Nov 10 19:46:17 2009 +0900
Patch-mainline: 2.6.33
References: bnc#568848, bnc#655434, bnc#681242

commit 9f993ac3f708b661207ed7de521f245586217a68

    bootmem: Add free_bootmem_late()
    
    Add a new function for freeing bootmem after the bootmem
    allocator has been released and the unreserved pages given to
    the page allocator.
    
    This allows us to reserve bootmem and then release it if we
    later discover it was not needed.
    
    ( This new API will be used by the swiotlb code to recover
      a significant amount of RAM (64MB). )
    
    Signed-off-by: FUJITA Tomonori <fujita.tomonori@lab.ntt.co.jp>
    Acked-by: Pekka Enberg <penberg@cs.helsinki.fi>
    Cc: chrisw@sous-sol.org
    Cc: dwmw2@infradead.org
    Cc: joerg.roedel@amd.com
    Cc: muli@il.ibm.com
    Cc: hannes@cmpxchg.org
    Cc: tj@kernel.org
    Cc: akpm@linux-foundation.org
    Cc: Linus Torvalds <torvalds@linux-foundation.org>
    LKML-Reference: <1257849980-22640-7-git-send-email-fujita.tomonori@lab.ntt.co.jp>
    Signed-off-by: Ingo Molnar <mingo@elte.hu>

--
Needed for 'patches.arch/x86-efi-06-retain-boot-service-code-longer'.

Acked-by: Raymund Will <rw@suse.de>

diff --git a/include/linux/bootmem.h b/include/linux/bootmem.h
index dd97fb8..b10ec49 100644
--- a/include/linux/bootmem.h
+++ b/include/linux/bootmem.h
@@ -53,6 +53,7 @@ extern void free_bootmem_node(pg_data_t *pgdat,
 			      unsigned long addr,
 			      unsigned long size);
 extern void free_bootmem(unsigned long addr, unsigned long size);
+extern void free_bootmem_late(unsigned long addr, unsigned long size);
 
 /*
  * Flags for reserve_bootmem (also if CONFIG_HAVE_ARCH_BOOTMEM_NODE,
diff --git a/mm/bootmem.c b/mm/bootmem.c
index 555d5d2..d1dc23c 100644
--- a/mm/bootmem.c
+++ b/mm/bootmem.c
@@ -143,6 +143,30 @@ unsigned long __init init_bootmem(unsigned long start, unsigned long pages)
 	return init_bootmem_core(NODE_DATA(0)->bdata, start, 0, pages);
 }
 
+/*
+ * free_bootmem_late - free bootmem pages directly to page allocator
+ * @addr: starting address of the range
+ * @size: size of the range in bytes
+ *
+ * This is only useful when the bootmem allocator has already been torn
+ * down, but we are still initializing the system.  Pages are given directly
+ * to the page allocator, no bootmem metadata is updated because it is gone.
+ */
+void __init free_bootmem_late(unsigned long addr, unsigned long size)
+{
+	unsigned long cursor, end;
+
+	kmemleak_free_part(__va(addr), size);
+
+	cursor = PFN_UP(addr);
+	end = PFN_DOWN(addr + size);
+
+	for (; cursor < end; cursor++) {
+		__free_pages_bootmem(pfn_to_page(cursor), 0);
+		totalram_pages++;
+	}
+}
+
 static unsigned long __init free_all_bootmem_core(bootmem_data_t *bdata)
 {
 	int aligned;
