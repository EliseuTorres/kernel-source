From: Martin Schwidefsky <schwidefsky@de.ibm.com>
Subject: s390/rwlock: add missing local_irq_restore calls
Patch-mainline: v3.16-rc1
Git-commit: 939c5ae4029e1679bb93f7d09afb8c831db985bd
References: bnc#925012

Summary:     s390: z13 base performance
Description: Provide the backport of a minimum set of upstream patches
             to optimize the base performance of the IBM z13 machine.

Upstream-Description:

             s390/rwlock: add missing local_irq_restore calls

             The out of line _raw_read_lock_wait_flags/_raw_write_lock_wait_flags
             functions for the arch_read_lock_flags/arch_write_lock_flags  calls
             fail to re-enable the interrupts after another unsuccessful try to
             get the lock with compare-and-swap. The following wait would be
             done with interrupts disabled which is suboptimal.

             Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>


Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
Acked-by: John Jolly <jjolly@suse.de>
---
 arch/s390/lib/spinlock.c |    2 ++
 1 file changed, 2 insertions(+)

--- a/arch/s390/lib/spinlock.c
+++ b/arch/s390/lib/spinlock.c
@@ -158,6 +158,7 @@ void _raw_read_lock_wait_flags(arch_rwlo
 		local_irq_disable();
 		if (_raw_compare_and_swap(&rw->lock, old, old + 1))
 			return;
+		local_irq_restore(flags);
 	}
 }
 EXPORT_SYMBOL(_raw_read_lock_wait_flags);
@@ -214,6 +215,7 @@ void _raw_write_lock_wait_flags(arch_rwl
 		local_irq_disable();
 		if (_raw_compare_and_swap(&rw->lock, 0, 0x80000000))
 			return;
+		local_irq_restore(flags);
 	}
 }
 EXPORT_SYMBOL(_raw_write_lock_wait_flags);
