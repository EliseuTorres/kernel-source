From: Heiko Carstens <heiko.carstens@de.ibm.com>
Subject: s390/nmi: fix vector register corruption
Patch-mainline: not yet
Git-commit: cad49cfc44a5160e3fa09b18e4e7f7cacd13f27d
References: bsc#934391,FATE#318028,LTC#127774

Description:  kernel: vector register corruption
Symptom:      Vector register contents may be corrupted after a machine check.
              This can lead to data corruption.
Problem:      The machine check handler validated vector register contents by
              loading them with the contents that have been stored to the
              machine check extended save area. Unfortunately the handler used
              the wrong address for this.
Solution:     Use the correct address and also always validate the registers.
Reproduction: Workload with vector register usage and generate machine checks.

Upstream-Description:

              s390/nmi: fix vector register corruption

              If a machine check happens, the machine has the vector facility installed
              and the extended save area exists, the cpu will save vector register
              contents into the extended save area. This is regardless of control
              register 0 contents, which enables and disables the vector facility during
              runtime.

              On each machine check we should validate the vector registers. The current
              code however tries to validate the registers only if the running task is
              using vector registers in user space.

              However even the current code is broken and causes vector register
              corruption on machine checks, if user space uses them:
              the prefix area contains a pointer (absolute address) to the machine check
              extended save area. In order to save some space the save area was put into
              an unused area of the second prefix page.
              When validating vector register contents the code uses the absolute address
              of the extended save area, which is wrong. Due to prefixing the vector
              instructions will then access contents using absolute addresses instead
              of real addresses, where the machine stored the contents.

              If the above would work there is still the problem that register validition
              would only happen if user space uses vector registers. If kernel space uses
              them also, this may also lead to vector register content corruption:
              if the kernel makes use of vector instructions, but the current running
              user space context does not, the machine check handler will validate
              floating point registers instead of vector registers.
              Given the fact that writing to a floating point register may change the
              upper halve of the corresponding vector register, we also experience vector
              register corruption in this case.

              Fix all of these issues, and always validate vector registers on each
              machine check, if the machine has the vector facility installed and the
              extended save area is defined.

              Cc: <stable@vger.kernel.org> # 4.1+
              Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
              Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>


Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
Acked-by: John Jolly <jjolly@suse.de>
---
 arch/s390/include/asm/ctl_reg.h |    5 ++++-
 arch/s390/kernel/nmi.c          |   11 +++++++++--
 2 files changed, 13 insertions(+), 3 deletions(-)

--- a/arch/s390/include/asm/ctl_reg.h
+++ b/arch/s390/include/asm/ctl_reg.h
@@ -71,7 +71,10 @@ union ctlreg0 {
 		unsigned long lap  : 1; /* Low-address-protection control */
 		unsigned long	   : 4;
 		unsigned long edat : 1; /* Enhanced-DAT-enablement control */
-		unsigned long	   : 23;
+		unsigned long	   : 4;
+		unsigned long afp  : 1; /* AFP-register control */
+		unsigned long vx   : 1; /* Vector enablement control */
+		unsigned long	   : 17;
 	};
 };
 
--- a/arch/s390/kernel/nmi.c
+++ b/arch/s390/kernel/nmi.c
@@ -21,6 +21,7 @@
 #include <asm/nmi.h>
 #include <asm/crw.h>
 #include <asm/switch_to.h>
+#include <asm/ctl_reg.h>
 
 struct mcck_struct {
 	int kill_task;
@@ -167,7 +168,9 @@ static int notrace s390_revalidate_regis
 
 #ifdef CONFIG_64BIT
 	/* Revalidate vector registers */
-	if (MACHINE_HAS_VX && current->thread.vxrs) {
+	if (MACHINE_HAS_VX) {
+		union ctlreg0 cr0;
+
 		if (!mci->vr) {
 			/*
 			 * Vector registers can't be restored and therefore
@@ -175,8 +178,12 @@ static int notrace s390_revalidate_regis
 			 */
 			kill_task = 1;
 		}
+		cr0.val = S390_lowcore.cregs_save_area[0];
+		cr0.afp = cr0.vx = 1;
+		__ctl_load(cr0.val, 0, 0);
 		restore_vx_regs((__vector128 *)
-				S390_lowcore.vector_save_area_addr);
+				&S390_lowcore.vector_save_area);
+		__ctl_load(S390_lowcore.cregs_save_area[0], 0, 0);
 	}
 #endif
 	/* Revalidate access registers */
