Subject: kernel: improve code generated by atomic operations.
References: BNC#565612
From: Gerald Schaefer <geraldsc@de.ibm.com>
Patch-mainline: 2.6.33-rc1
Git-commit: 39475179d40996b4efa662e3825735a84d2526d1

Symptom: Compiler generates slow code for atomic operations.
Problem: Git commit ea435467500612636f8f4fb639ff6e76b2496e4b
             changed the definition of atomic_t and atomic64_t for
	     s390 by adding the volatile modifier to the counter
	     field. This has an unfortunate side effect with newer
	     versions of the gcc. The typeof operator now picks up the
	     volatile modifier from the expression. This causes the
	     compiler to think that it has to store the two temporary
	     variable old_val and new_val in the __CS_LOOP for the
	     different atomic operations to the stack as the variables
	     are now volatile. Both stores are superfluous.
Solution: Replace typeof(ptr->counter) with int in __CS_LOOP and
             long long in __CSG_LOOP.
Acked-by: John Jolly <jjolly@suse.de>

---

 arch/s390/include/asm/atomic.h |    8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)

--- a/arch/s390/include/asm/atomic.h
+++ b/arch/s390/include/asm/atomic.h
@@ -21,7 +21,7 @@
 #if __GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ > 2)
 
 #define __CS_LOOP(ptr, op_val, op_string) ({				\
-	typeof(ptr->counter) old_val, new_val;				\
+	int old_val, new_val;						\
 	asm volatile(							\
 		"	l	%0,%2\n"				\
 		"0:	lr	%1,%0\n"				\
@@ -38,7 +38,7 @@
 #else /* __GNUC__ */
 
 #define __CS_LOOP(ptr, op_val, op_string) ({				\
-	typeof(ptr->counter) old_val, new_val;				\
+	int old_val, new_val;						\
 	asm volatile(							\
 		"	l	%0,0(%3)\n"				\
 		"0:	lr	%1,%0\n"				\
@@ -143,7 +143,7 @@ static inline int atomic_add_unless(atom
 #if __GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ > 2)
 
 #define __CSG_LOOP(ptr, op_val, op_string) ({				\
-	typeof(ptr->counter) old_val, new_val;				\
+	long long old_val, new_val;					\
 	asm volatile(							\
 		"	lg	%0,%2\n"				\
 		"0:	lgr	%1,%0\n"				\
@@ -160,7 +160,7 @@ static inline int atomic_add_unless(atom
 #else /* __GNUC__ */
 
 #define __CSG_LOOP(ptr, op_val, op_string) ({				\
-	typeof(ptr->counter) old_val, new_val;				\
+	long long old_val, new_val;					\
 	asm volatile(							\
 		"	lg	%0,0(%3)\n"				\
 		"0:	lgr	%1,%0\n"				\
