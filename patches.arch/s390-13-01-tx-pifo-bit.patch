From: Martin Schwidefsky <schwidefsky@de.ibm.com>
Subject: [PATCH] [BZ 97332] kernel: allow program interruption filtering in user space
Patch-mainline: After v3.11
Git-commit: 0628a5fbe1b5af35ef5346443ff1056e257a7350
References: bnc#837596, LTC#97332

Description:  kernel: allow program interruption filtering in user space
Symptom:      A user space program using transactional execution can not
              utlize program interruption filtering.
Problem:      The kernel always sets the transactional-execution program-
              interruption-filtering override (PIFO) bit in control
              register 0. This prevents the use of program interruption
              filtering in user space.
Solution:     Do not set the PIFO bit in control register 0.
Reproduction: A user space program utilizing program interupt filtering.

Signed-off-by: Martin Schwidefsky <schwidefsky@de.ibm.com>
Acked-by: John Jolly <jjolly@suse.de>
---
 arch/s390/kernel/ptrace.c |    6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

--- a/arch/s390/kernel/ptrace.c
+++ b/arch/s390/kernel/ptrace.c
@@ -57,11 +57,11 @@ void update_per_regs(struct task_struct
 		unsigned long cr0, cr0_new;
 
 		__ctl_store(cr0, 0, 0);
-		/* set or clear transaction execution bits 8 and 9. */
+		/* set or clear transaction execution bit 8. */
 		if (task->thread.per_flags & PER_FLAG_NO_TE)
-			cr0_new = cr0 & ~(3UL << 54);
+			cr0_new = cr0 & ~(1UL << 55);
 		else
-			cr0_new = cr0 | (3UL << 54);
+			cr0_new = cr0 | (1UL << 55);
 		/* Only load control register 0 if necessary. */
 		if (cr0 != cr0_new)
 			__ctl_load(cr0_new, 0, 0);
