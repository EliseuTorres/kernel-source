From: Heiko Carstens <heiko.carstens@de.ibm.com>
Subject: kernel: broken interrupt statistics
Patch-mainline: v3.8-rc4
Git-commit: add9bde216fefe1b65b41f7c0948cef48aa98c14
References: bnc#799275, LTC#87893

Description:  kernel: broken interrupt statistics
Symptom:      The file /proc/stat contains the entry intr. The first column
              should contain the number of interrupts since IPL time,
              however the value is always 0.
Problem:      Common code change f2c66cd8eeddedb440f33bc0f5cec1ed7ae376cb
              "/proc/stat: scalability of irq num per cpu" caused the output
              of /proc/stat being broken on s390.
              The first field in the "intr" line should contain the sum of
              all interrupts, however since the above mentioned change it is
              always zero.
              The reason for that is that a per cpu irq sum variable had been
              introduced which got incremented when calling
              kstat_incr_irqs_this_cpu(). However on s390 we directly
              incremented only the per cpu per irq counter by accessing the
              array element via kstat_cpu(smp_processor_id()).irqs[...].
Solution:     Use the kstat_incr_irqs_this_cpu() wrapper which increments
              both the per cpu per irq counter and the per cpu irq sum
              counter.
Reproduction: Verify the contents of /proc/stat's intr entry.

Signed-off-by: Heiko Carstens <heiko.carstens@de.ibm.com>
Acked-by: John Jolly <jjolly@suse.de>
---
 arch/s390/kernel/irq.c |    2 +-
 drivers/s390/cio/cio.c |    4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

--- a/arch/s390/kernel/irq.c
+++ b/arch/s390/kernel/irq.c
@@ -222,7 +222,7 @@ void __irq_entry do_extint(struct pt_reg
 	if (S390_lowcore.int_clock >= S390_lowcore.clock_comparator)
 		/* Serve timer interrupts first. */
 		clock_comparator_work();
-	kstat_cpu(smp_processor_id()).irqs[EXTERNAL_INTERRUPT]++;
+	kstat_incr_irqs_this_cpu(EXTERNAL_INTERRUPT, NULL);
 	if (code != 0x1004)
 		__get_cpu_var(s390_idle).nohz_delay = 1;
 	index = ext_hash(code);
--- a/drivers/s390/cio/cio.c
+++ b/drivers/s390/cio/cio.c
@@ -614,7 +614,7 @@ void __irq_entry do_IRQ(struct pt_regs *
 	tpi_info = (struct tpi_info *)&S390_lowcore.subchannel_id;
 	irb = (struct irb *)&S390_lowcore.irb;
 	do {
-		kstat_cpu(smp_processor_id()).irqs[IO_INTERRUPT]++;
+		kstat_incr_irqs_this_cpu(IO_INTERRUPT, NULL);
 		if (tpi_info->adapter_IO) {
 			do_adapter_IO(tpi_info->isc);
 			continue;
@@ -671,7 +671,7 @@ static int cio_tpi(void)
 	tpi_info = (struct tpi_info *)&S390_lowcore.subchannel_id;
 	if (tpi(NULL) != 1)
 		return 0;
-	kstat_cpu(smp_processor_id()).irqs[IO_INTERRUPT]++;
+	kstat_incr_irqs_this_cpu(IO_INTERRUPT, NULL);
 	if (tpi_info->adapter_IO) {
 		do_adapter_IO(tpi_info->isc);
 		return 1;
