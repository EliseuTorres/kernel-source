From: Eric B Munson <emunson@mgebm.net>
Subject: nodemask: make NODEMASK_ALLOC more general
References: fate#311647 bnc#691979
Patch-Mainline: yes

Signed-off-by: Thomas Renninger <trenn@suse.de>

This patch backports commit 4e7b8a6cef64a4c1f1194f9926f794c2b75ebdd7
by David Rientjes <rientjes@google.com>.

Signed-off-by: Eric B Munson <ebmuson@us.ibm.com>

Original commit message

    NODEMASK_ALLOC(x, m) assumes x is a type of struct, which is unnecessary.
    It's perfectly reasonable to use this macro to allocate a nodemask_t,
    which is anonymous, either dynamically or on the stack depending on
    NODES_SHIFT.
---
 include/linux/nodemask.h |    6 +++---
 1 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/include/linux/nodemask.h b/include/linux/nodemask.h
index b359c4a..054f645 100644
--- a/include/linux/nodemask.h
+++ b/include/linux/nodemask.h
@@ -484,10 +484,10 @@ static inline int num_node_state(enum node_states state)
  */
 
 #if NODES_SHIFT > 8 /* nodemask_t > 64 bytes */
-#define NODEMASK_ALLOC(x, m) struct x *m = kmalloc(sizeof(*m), GFP_KERNEL)
+#define NODEMASK_ALLOC(type, name) type *name = kmalloc(sizeof(*name), GFP_KERNEL)
 #define NODEMASK_FREE(m) kfree(m)
 #else
-#define NODEMASK_ALLOC(x, m) struct x _m, *m = &_m
+#define NODEMASK_ALLOC(type, name) type _name, *name = &_name
 #define NODEMASK_FREE(m)
 #endif
 
@@ -497,7 +497,7 @@ struct nodemask_scratch {
 	nodemask_t	mask2;
 };
 
-#define NODEMASK_SCRATCH(x) NODEMASK_ALLOC(nodemask_scratch, x)
+#define NODEMASK_SCRATCH(x) NODEMASK_ALLOC(struct nodemask_scratch, x)
 #define NODEMASK_SCRATCH_FREE(x)  NODEMASK_FREE(x)
 
 
-- 
1.7.4.1

