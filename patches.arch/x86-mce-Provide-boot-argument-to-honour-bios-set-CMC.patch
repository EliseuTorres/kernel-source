From: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Date: Thu, 27 Sep 2012 10:08:00 -0700
Subject: [PATCH] x86/mce: Provide boot argument to honour bios-set CMCI threshold
Git-commit: 450cc201038f31bd496e1b3a44a49790b8827a06
Patch-mainline: v3.7-rc1
Reference: fate#313970

The ACPI spec doesn't provide for a way for the bios to pass down
recommended thresholds to the OS on a _per-bank_ basis. This patch adds
a new boot option, which if passed, tells Linux to use CMCI thresholds
set by the bios.

As fail-safe, we initialize threshold to 1 if some banks have not been
initialized by the bios and warn the user.

Signed-off-by: Naveen N. Rao <naveen.n.rao@linux.vnet.ibm.com>
Signed-off-by: Tony Luck <tony.luck@intel.com>
Acked-by: Michael Chang <mchang@suse.com>

---
 Documentation/x86/x86_64/boot-options.txt |    7 ++++++
 arch/x86/include/asm/mce.h                |    1 
 arch/x86/kernel/cpu/mcheck/mce.c          |   10 ++++++++
 arch/x86/kernel/cpu/mcheck/mce_intel.c    |   35 +++++++++++++++++++++++++++---
 4 files changed, 50 insertions(+), 3 deletions(-)

Index: linux-3.0-SLE11-SP3/Documentation/x86/x86_64/boot-options.txt
===================================================================
--- linux-3.0-SLE11-SP3.orig/Documentation/x86/x86_64/boot-options.txt
+++ linux-3.0-SLE11-SP3/Documentation/x86/x86_64/boot-options.txt
@@ -50,6 +50,13 @@ Machine check
 		monarchtimeout:
 		Sets the time in us to wait for other CPUs on machine checks. 0
 		to disable.
+   mce=bios_cmci_threshold
+		Don't overwrite the bios-set CMCI threshold. This boot option
+		prevents Linux from overwriting the CMCI threshold set by the
+		bios. Without this option, Linux always sets the CMCI
+		threshold to 1. Enabling this may make memory predictive failure
+		analysis less effective if the bios sets thresholds for memory
+		errors since we will not see details for all errors.
 
    nomce (for compatibility with i386): same as mce=off
 
Index: linux-3.0-SLE11-SP3/arch/x86/include/asm/mce.h
===================================================================
--- linux-3.0-SLE11-SP3.orig/arch/x86/include/asm/mce.h
+++ linux-3.0-SLE11-SP3/arch/x86/include/asm/mce.h
@@ -171,6 +171,7 @@ DECLARE_PER_CPU(struct sys_device, mce_d
 #ifdef CONFIG_X86_MCE_INTEL
 extern int mce_cmci_disabled;
 extern int mce_ignore_ce;
+extern int mce_bios_cmci_threshold;
 void mce_intel_feature_init(struct cpuinfo_x86 *c);
 void cmci_clear(void);
 void cmci_reenable(void);
Index: linux-3.0-SLE11-SP3/arch/x86/kernel/cpu/mcheck/mce.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/arch/x86/kernel/cpu/mcheck/mce.c
+++ linux-3.0-SLE11-SP3/arch/x86/kernel/cpu/mcheck/mce.c
@@ -86,6 +86,7 @@ static int			mce_dont_log_ce		__read_mos
 int				mce_cmci_disabled	__read_mostly;
 int				mce_ignore_ce		__read_mostly;
 int				mce_ser			__read_mostly;
+int				mce_bios_cmci_threshold	__read_mostly;
 
 struct mce_bank                *mce_banks		__read_mostly;
 
@@ -1873,6 +1874,7 @@ static struct miscdevice mce_log_device
  *	check, or 0 to not wait
  * mce=bootlog Log MCEs from before booting. Disabled by default on AMD.
  * mce=nobootlog Don't log MCEs from before booting.
+ * mce=bios_cmci_threshold Don't program the CMCI threshold
  */
 static int __init mcheck_enable(char *str)
 {
@@ -1892,6 +1894,8 @@ static int __init mcheck_enable(char *st
 		mce_ignore_ce = 1;
 	else if (!strcmp(str, "bootlog") || !strcmp(str, "nobootlog"))
 		mce_bootlog = (str[0] == 'b');
+	else if (!strcmp(str, "bios_cmci_threshold"))
+		mce_bios_cmci_threshold = 1;
 	else if (isdigit(str[0])) {
 		get_option(&str, &tolerant);
 		if (*str == ',') {
@@ -2129,6 +2133,11 @@ static struct sysdev_ext_attribute attr_
 	&mce_cmci_disabled
 };
 
+static struct sysdev_ext_attribute attr_bios_cmci_threshold = {
+	_SYSDEV_ATTR(bios_cmci_threshold, 0444, sysdev_show_int, NULL),
+	&mce_bios_cmci_threshold
+};
+
 static struct sysdev_attribute *mce_attrs[] = {
 	&attr_tolerant.attr,
 	&attr_check_interval.attr,
@@ -2137,6 +2146,7 @@ static struct sysdev_attribute *mce_attr
 	&attr_dont_log_ce.attr,
 	&attr_ignore_ce.attr,
 	&attr_cmci_disabled.attr,
+	&attr_bios_cmci_threshold.attr,
 	NULL
 };
 
Index: linux-3.0-SLE11-SP3/arch/x86/kernel/cpu/mcheck/mce_intel.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/arch/x86/kernel/cpu/mcheck/mce_intel.c
+++ linux-3.0-SLE11-SP3/arch/x86/kernel/cpu/mcheck/mce_intel.c
@@ -190,10 +190,12 @@ static void cmci_discover(int banks, int
 	unsigned long flags;
 	int hdr = 0;
 	int i;
+	int bios_wrong_thresh = 0;
 
 	spin_lock_irqsave(&cmci_discover_lock, flags);
 	for (i = 0; i < banks; i++) {
 		u64 val;
+		int bios_zero_thresh = 0;
 
 		if (test_bit(i, owned))
 			continue;
@@ -208,8 +210,20 @@ static void cmci_discover(int banks, int
 			continue;
 		}
 
-		val &= ~MCI_CTL2_CMCI_THRESHOLD_MASK;
-		val |= MCI_CTL2_CMCI_EN | CMCI_THRESHOLD;
+		if (!mce_bios_cmci_threshold) {
+			val &= ~MCI_CTL2_CMCI_THRESHOLD_MASK;
+			val |= CMCI_THRESHOLD;
+		} else if (!(val & MCI_CTL2_CMCI_THRESHOLD_MASK)) {
+			/*
+			 * If bios_cmci_threshold boot option was specified
+			 * but the threshold is zero, we'll try to initialize
+			 * it to 1.
+			 */
+			bios_zero_thresh = 1;
+			val |= CMCI_THRESHOLD;
+		}
+
+		val |= MCI_CTL2_CMCI_EN;
 		wrmsrl(MSR_IA32_MCx_CTL2(i), val);
 		rdmsrl(MSR_IA32_MCx_CTL2(i), val);
 
@@ -218,11 +232,26 @@ static void cmci_discover(int banks, int
 			if (!test_and_set_bit(i, owned) && !boot)
 				print_update("CMCI", &hdr, i);
 			__clear_bit(i, __get_cpu_var(mce_poll_banks));
+			/*
+			 * We are able to set thresholds for some banks that
+			 * had a threshold of 0. This means the BIOS has not
+			 * set the thresholds properly or does not work with
+			 * this boot option. Note down now and report later.
+			 */
+			if (mce_bios_cmci_threshold && bios_zero_thresh &&
+					(val & MCI_CTL2_CMCI_THRESHOLD_MASK))
+				bios_wrong_thresh = 1;
 		} else {
 			WARN_ON(!test_bit(i, __get_cpu_var(mce_poll_banks)));
 		}
 	}
 	spin_unlock_irqrestore(&cmci_discover_lock, flags);
+	if (mce_bios_cmci_threshold && bios_wrong_thresh) {
+		pr_info_once(
+			"bios_cmci_threshold: Some banks do not have valid thresholds set\n");
+		pr_info_once(
+			"bios_cmci_threshold: Make sure your BIOS supports this boot option\n");
+	}
 	if (hdr)
 		printk(KERN_CONT "\n");
 }
@@ -262,7 +291,7 @@ void cmci_clear(void)
 			continue;
 		/* Disable CMCI */
 		rdmsrl(MSR_IA32_MCx_CTL2(i), val);
-		val &= ~(MCI_CTL2_CMCI_EN|MCI_CTL2_CMCI_THRESHOLD_MASK);
+		val &= ~MCI_CTL2_CMCI_EN;
 		wrmsrl(MSR_IA32_MCx_CTL2(i), val);
 		__clear_bit(i, __get_cpu_var(mce_banks_owned));
 	}
