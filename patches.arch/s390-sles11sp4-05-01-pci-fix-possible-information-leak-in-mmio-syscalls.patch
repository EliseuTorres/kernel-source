From: Alexey Ishchuk <aishchuk@linux.vnet.ibm.com>
Subject: s390/pci: fix possible information leak in mmio syscalls
Patch-mainline: v4.0-rc4
Git-commit: f0483044c1c96089256cda4cf182eea1ead77fe4
References: bnc#932697, LTC#125551

Description:  s390/pci: fix possible information leak in mmio syscalls
Symptom:      In an error situation copy_to_user or copy_from_user
              functions can be called on uninitialized kernel memory.
Problem:      Using of copy_to_user or copy_from_user function calls on
              uninitialized kernel memory can produce information leaks.
Solution:     The memcpy_toio and memcpy_fromio function calls are replaced
              with the zpci_memcpy_toio and zpci_memcpy_fromio function
              calls to avoid information leaks.
Reproduction: -

Signed-off-by: Alexey Ishchuk <aishchuk@linux.vnet.ibm.com>
Acked-by: John Jolly <jjolly@suse.de>
---
 arch/s390/pci/pci_mmio.c |   17 ++++++++---------
 1 file changed, 8 insertions(+), 9 deletions(-)

--- a/arch/s390/pci/pci_mmio.c
+++ b/arch/s390/pci/pci_mmio.c
@@ -65,8 +65,7 @@ SYSCALL_DEFINE3(s390_pci_mmio_write, uns
 	if (copy_from_user(buf, user_buffer, length))
 		goto out;
 
-	memcpy_toio(io_addr, buf, length);
-	ret = 0;
+	ret = zpci_memcpy_toio(io_addr, buf, length);
 out:
 	if (buf != local_buf)
 		kfree(buf);
@@ -100,16 +99,16 @@ SYSCALL_DEFINE3(s390_pci_mmio_read, unsi
 		goto out;
 	io_addr = (void *)((pfn << PAGE_SHIFT) | (mmio_addr & ~PAGE_MASK));
 
-	ret = -EFAULT;
-	if ((unsigned long)io_addr < ZPCI_IOMAP_ADDR_BASE)
+	if ((unsigned long)io_addr < ZPCI_IOMAP_ADDR_BASE) {
+		ret = -EFAULT;
 		goto out;
-
-	memcpy_fromio(buf, io_addr, length);
-
-	if (copy_to_user(user_buffer, buf, length))
+	}
+	ret = zpci_memcpy_fromio(buf, io_addr, length);
+	if (ret)
 		goto out;
+	if (copy_to_user(user_buffer, buf, length))
+		ret = -EFAULT;
 
-	ret = 0;
 out:
 	if (buf != local_buf)
 		kfree(buf);
