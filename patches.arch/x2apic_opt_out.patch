From: Youquan Song <youquan.song@intel.com>
Subject: x86, vt-d: enable x2apic opt out (disabling x2apic through BIOS flag)
References: bnc#701183, fate#311989
Patch-Mainline: not yet but submitted

Signed-off-by: Thomas Renninger <trenn@suse.de>

Git-commit: e670761f12f4069d204f433bf547d9c679a4fd05
got merged into this for easier backporting.

https://lkml.org/lkml/2011/4/14/37

New version of VT-d2 specification (http://download.intel.com/technology
/computing/vptech/Intel(r)_VT_for_Direct_IO.pdf) includes a new feature that 
provide firmware a way to request system software to opt out of enable x2APIC
mode. DMAR ACPI table newly define flags.1 bit: x2APIC_OPT_OUT which is set to
request System software opt out xAPIC mode if flags.0 bit:INTR_REMAP is also
set.

This patch enable the feature. Also re-define x2apic_supported() to address
platform x2apic support needs 1)processor has x2apic capability 2)interrupt
remapping support 3)firmware does not request opt-out.

Signed-off-by: Youquan Song <youquan.song@intel.com>
Reviewed-by: Kay, Allen M <allen.m.kay@intel.com>

---
 arch/x86/include/asm/apic.h |    2 --
 arch/x86/kernel/apic/apic.c |   20 +++++++++++---------
 drivers/pci/dmar.c          |   29 +++++++++++++++++++++++++++--
 include/linux/dmar.h        |    2 ++
 include/linux/intel-iommu.h |    4 ++++
 5 files changed, 44 insertions(+), 13 deletions(-)

Index: linux-2.6.32-SLE11-SP2/arch/x86/include/asm/apic.h
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/arch/x86/include/asm/apic.h
+++ linux-2.6.32-SLE11-SP2/arch/x86/include/asm/apic.h
@@ -192,7 +192,6 @@ static inline int x2apic_enabled(void)
 	return 0;
 }
 
-#define x2apic_supported()	(cpu_has_x2apic)
 static inline void x2apic_force_phys(void)
 {
 	x2apic_phys = 1;
@@ -213,7 +212,6 @@ static inline void x2apic_force_phys(voi
 }
 
 #define	x2apic_preenabled 0
-#define	x2apic_supported()	0
 #endif
 
 extern void enable_IR_x2apic(void);
Index: linux-2.6.32-SLE11-SP2/arch/x86/kernel/apic/apic.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/arch/x86/kernel/apic/apic.c
+++ linux-2.6.32-SLE11-SP2/arch/x86/kernel/apic/apic.c
@@ -1424,15 +1424,12 @@ void __init enable_IR_x2apic(void)
 {
 	unsigned long flags;
 	struct IO_APIC_route_entry **ioapic_entries = NULL;
-	int ret, x2apic_enabled = 0;
-	int dmar_table_init_ret = 0;
+	int ret = 0, x2apic_enabled = 0;
+	int dmar_table_init_ret;
 
-#ifdef CONFIG_INTR_REMAP
 	dmar_table_init_ret = dmar_table_init();
-	if (dmar_table_init_ret)
-		pr_debug("dmar_table_init() failed with %d:\n",
-				dmar_table_init_ret);
-#endif
+	if (dmar_table_init_ret && !cpu_has_x2apic)
+		return;
 
 	ioapic_entries = alloc_ioapic_entries();
 	if (!ioapic_entries) {
@@ -1443,6 +1440,7 @@ void __init enable_IR_x2apic(void)
 	ret = save_IO_APIC_setup(ioapic_entries);
 	if (ret) {
 		pr_info("Saving IO-APIC state failed: %d\n", ret);
+		ret = 0;
 		goto out;
 	}
 
@@ -1468,7 +1466,8 @@ void __init enable_IR_x2apic(void)
 		x2apic_force_phys();
 	}
 
-	x2apic_enabled = 1;
+	if (x2apic_supported())
+		x2apic_enabled = 1;
 
 	if (x2apic_supported() && !x2apic_mode) {
 		x2apic_mode = 1;
@@ -1491,8 +1490,11 @@ out:
 
 	if (x2apic_preenabled)
 		panic("x2apic: enabled by BIOS but kernel init failed.");
-	else if (cpu_has_x2apic)
+	else if (!ret && cpu_has_x2apic) /* IR enabling failed */
 		pr_info("Not enabling x2apic, Intr-remapping init failed.\n");
+	else if (!x2apic_supported() && cpu_has_x2apic)
+		pr_info("Not enabling x2apic, firmware requests OS opt-out "
+			  "x2apic.\n");
 }
 
 #ifdef CONFIG_X86_64
Index: linux-2.6.32-SLE11-SP2/drivers/pci/dmar.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/drivers/pci/dmar.c
+++ linux-2.6.32-SLE11-SP2/drivers/pci/dmar.c
@@ -668,7 +668,7 @@ void __init detect_intel_iommu(void)
 		 * is added, we will not need this any more.
 		 */
 		dmar = (struct acpi_table_dmar *) dmar_tbl;
-		if (ret && cpu_has_x2apic && dmar->flags & 0x1)
+		if (ret && x2apic_supported() && dmar->flags & DMAR_INTR_REMAP)
 			printk(KERN_INFO
 			       "Queued invalidation will be enabled to support "
 			       "x2apic and Intr-remapping.\n");
@@ -1423,5 +1423,30 @@ int dmar_ir_support(void)
 {
 	struct acpi_table_dmar *dmar;
 	dmar = (struct acpi_table_dmar *)dmar_tbl;
-	return dmar && dmar->flags & 0x1;
+	if (!dmar)
+		return 0;
+	return dmar->flags & DMAR_INTR_REMAP;
+}
+
+/*
+ * Check if the platform support x2apic
+ * three necessary conditions:
+ * a. processor support x2apic
+ * b. interrupt remapping support
+ * c. when interrupt reamapping support,bit of x2APIC_OPT_OUT at "DMAR flags"
+ *  is not set which means firmware does not tell OS opt out x2apic
+ */
+int __init x2apic_supported(void)
+{
+	struct acpi_table_dmar *dmar;
+	unsigned int flags = 0;
+
+	if (!cpu_has_x2apic)
+		return 0;
+
+	dmar = (struct acpi_table_dmar *)dmar_tbl;
+	if (!dmar)
+		return 0;
+	flags = DMAR_INTR_REMAP | DMAR_X2APIC_OPT_OUT;
+	return ((dmar->flags & flags) == DMAR_INTR_REMAP);
 }
Index: linux-2.6.32-SLE11-SP2/include/linux/dmar.h
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/include/linux/dmar.h
+++ linux-2.6.32-SLE11-SP2/include/linux/dmar.h
@@ -220,6 +220,7 @@ struct dmar_atsr_unit {
 
 /* Intel DMAR  initialization functions */
 extern int intel_iommu_init(void);
+extern int x2apic_supported(void);
 #else
 static inline int intel_iommu_init(void)
 {
@@ -229,5 +230,6 @@ static inline int intel_iommu_init(void)
 	return -ENODEV;
 #endif
 }
+static inline int x2apic_supported(void) { return 0; }
 #endif /* !CONFIG_DMAR */
 #endif /* __DMAR_H__ */
Index: linux-2.6.32-SLE11-SP2/include/linux/intel-iommu.h
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/include/linux/intel-iommu.h
+++ linux-2.6.32-SLE11-SP2/include/linux/intel-iommu.h
@@ -29,6 +29,10 @@
 #include <asm/cacheflush.h>
 #include <asm/iommu.h>
 
+/* DMAR Flags bits */
+#define DMAR_INTR_REMAP 0x1
+#define DMAR_X2APIC_OPT_OUT 0x2
+
 /*
  * Intel IOMMU register specification per version 1.0 public spec.
  */
