From: Gerald Schaefer <geraldsc@de.ibm.com>
Subject: filemap : fix race condition in xip_file_fault
References: bnc#617464,LTC#66066
Patch-mainline: Yes

Symptom:     Kernel Ooops due to BUG in mm/filemap_xip.c
Problem:     This patch fixes a race condition that shows in conjunction with
             xip_file_fault when two threads of the same user process fault on
             the same memory page. In this case, the race winner will install
             the page table entry, and the unlucky loser will cause an oops:
             xip_file_fault calls vm_insert_pfn (via vm_insert_mixed) which
             drops out at this check:
             -.......retval = -EBUSY;
             -.......if (!pte_none(*pte))
             -.......-.......goto out_unlock;
             The resulting -EBUSY return value will trigger a BUG_ON() in
             xip_file_fault.
Solution:    This fix simply considers the fault as fixed in this case,
             because the race winner has successfully installed the pte.

Acked-by: John Jolly <jjolly@suse.de>
---
 mm/filemap_xip.c |    5 ++++-
 1 file changed, 4 insertions(+), 1 deletion(-)

--- a/mm/filemap_xip.c
+++ b/mm/filemap_xip.c
@@ -262,7 +262,10 @@ found:
 							xip_pfn);
 		if (err == -ENOMEM)
 			return VM_FAULT_OOM;
-		BUG_ON(err);
+		/* err == -EBUSY is fine, we've raced against another thread
+		   that faulted-in the same page */
+		if (err != -EBUSY)
+			BUG_ON(err);
 		return VM_FAULT_NOPAGE;
 	} else {
 		int err, ret = VM_FAULT_OOM;
