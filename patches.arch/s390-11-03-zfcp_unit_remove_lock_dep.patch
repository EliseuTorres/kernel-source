From: Gerald Schaefer <geraldsc@de.ibm.com>
Subject: zfcp: Remove lock dependency on unit remove.
References: bnc#590926
Patch-mainline: Upstream submission made

Symptom:     Possible dead-lock on unit removal.
Problem:     During the removal of a LUN the config_mutex has to be
             held to maintain the configuration consistency. However, a few
             process steps do fetch other locks which might interfere with
             the already held mutex.
Solution:    The double protection is not required, so remove it.

Acked-by: John Jolly <jjolly@suse.de>

---
 drivers/s390/scsi/zfcp_sysfs.c |   49 +++++++++++++++++------------------------
 1 file changed, 21 insertions(+), 28 deletions(-)

--- a/drivers/s390/scsi/zfcp_sysfs.c
+++ b/drivers/s390/scsi/zfcp_sysfs.c
@@ -240,52 +240,45 @@ static ssize_t zfcp_sysfs_unit_remove_st
 	struct zfcp_port *port = dev_get_drvdata(dev);
 	struct zfcp_unit *unit;
 	u64 fcp_lun;
-	int retval = 0;
 	LIST_HEAD(unit_remove_lh);
 
 	mutex_lock(&zfcp_data.config_mutex);
 	if (atomic_read(&port->status) & ZFCP_STATUS_COMMON_REMOVE) {
-		retval = -EBUSY;
-		goto out;
+		mutex_unlock(&zfcp_data.config_mutex);
+		return -EBUSY;
 	}
 
 	if (strict_strtoull(buf, 0, (unsigned long long *) &fcp_lun)) {
-		retval = -EINVAL;
-		goto out;
+		mutex_unlock(&zfcp_data.config_mutex);
+		return -EINVAL;
 	}
 
-	write_lock_irq(&zfcp_data.config_lock);
+	read_lock_irq(&zfcp_data.config_lock);
 	unit = zfcp_get_unit_by_lun(port, fcp_lun);
-	if (unit) {
-		write_unlock_irq(&zfcp_data.config_lock);
-		/* wait for possible timeout during SCSI probe */
-		flush_work(&unit->scsi_work);
-		write_lock_irq(&zfcp_data.config_lock);
-
-		if (atomic_read(&unit->refcount) == 0) {
-			zfcp_unit_get(unit);
-			atomic_set_mask(ZFCP_STATUS_COMMON_REMOVE,
-					&unit->status);
-			list_move(&unit->list, &unit_remove_lh);
-		} else {
-			unit = NULL;
-		}
+	read_unlock_irq(&zfcp_data.config_lock);
+	if (!unit || atomic_read(&unit->refcount)) {
+		mutex_unlock(&zfcp_data.config_mutex);
+		return -ENXIO;
 	}
+	zfcp_unit_get(unit);
+	mutex_unlock(&zfcp_data.config_mutex);
 
-	write_unlock_irq(&zfcp_data.config_lock);
+	/* wait for possible timeout during SCSI probe */
+	flush_work(&unit->scsi_work);
 
-	if (!unit) {
-		retval = -ENXIO;
-		goto out;
-	}
+	mutex_lock(&zfcp_data.config_mutex);
+	write_lock_irq(&zfcp_data.config_lock);
+	atomic_set_mask(ZFCP_STATUS_COMMON_REMOVE, &unit->status);
+	list_move(&unit->list, &unit_remove_lh);
+	write_unlock_irq(&zfcp_data.config_lock);
+	mutex_unlock(&zfcp_data.config_mutex);
 
 	zfcp_erp_unit_shutdown(unit, 0, "syurs_1", NULL);
 	zfcp_erp_wait(unit->port->adapter);
 	zfcp_unit_put(unit);
 	zfcp_unit_dequeue(unit);
-out:
-	mutex_unlock(&zfcp_data.config_mutex);
-	return retval ? retval : (ssize_t) count;
+
+	return (ssize_t)count;
 }
 static DEVICE_ATTR(unit_remove, S_IWUSR, NULL, zfcp_sysfs_unit_remove_store);
 
