From: Gerald Schaefer <geraldsc@de.ibm.com>
Subject: kernel: nohz vs cpu hotplug system hang
References: bnc#659101,LTC#68888
Patch-mainline: Yes

Symptom:     After some cpu hotplug operations the system hangs.
Problem:     If a cpu gets set offline the nohz_load_balancer cpu gets
             updated. However there exist various conditions where this
             update doesn't get performed. The nohz_load_balancer cpu
             value is used by the __mod_timer() function via a call to
             get_nohz_load_balancer() in order to select a cpu where timers
             get enqueued. If the value doesn't get updated when a cpu
             is put into offline state the value could be the offline cpu.
             In that case timers will be enqueued on an offline cpu and
             therefore never expire. This can lead to a complete system
             hang.
Solution:    Fix several code paths that incorrectly tell the nohz code
             that the timer tick is still needed ignoring the fact that
             the cpu is going offline. That is what prevented the nohz
             code to update the nohz_load_balancer cpu.

Acked-by: John Jolly <jjolly@suse.de>
---
 arch/s390/kernel/vtime.c |   19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

Index: b/arch/s390/kernel/vtime.c
===================================================================
--- a/arch/s390/kernel/vtime.c
+++ b/arch/s390/kernel/vtime.c
@@ -19,6 +19,7 @@
 #include <linux/kernel_stat.h>
 #include <linux/rcupdate.h>
 #include <linux/posix-timers.h>
+#include <linux/cpu.h>
 
 #include <asm/s390_ext.h>
 #include <asm/timer.h>
@@ -562,6 +563,23 @@ void init_cpu_vtimer(void)
 	__ctl_set_bit(0,10);
 }
 
+static int __cpuinit s390_nohz_notify(struct notifier_block *self,
+				      unsigned long action, void *hcpu)
+{
+	struct s390_idle_data *idle;
+	long cpu = (long) hcpu;
+
+	idle = &per_cpu(s390_idle, cpu);
+	switch (action) {
+	case CPU_DYING:
+	case CPU_DYING_FROZEN:
+		idle->nohz_delay = 0;
+	default:
+		break;
+	}
+	return NOTIFY_OK;
+}
+
 void __init vtime_init(void)
 {
 	/* request the cpu timer external interrupt */
@@ -570,5 +588,6 @@ void __init vtime_init(void)
 
 	/* Enable cpu timer interrupts on the boot cpu. */
 	init_cpu_vtimer();
+	cpu_notifier(s390_nohz_notify, 0);
 }
 
