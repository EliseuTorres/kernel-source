From: Stefan Raspl <raspl@linux.vnet.ibm.com>
Subject: qeth: Fix crash on initial MTU size change
Patch-mainline: v3.11-rc1
Git-commit: ede88671664128b811e7c709bead39f5b3f3abcf
References: bnc#835175, LTC#96809

Description:  qeth: Fix crash on initial MTU size change
Symptom:      Kernel panic when attaching a vNIC.
Problem:      When the initial MTU size is changed prior to any activity on the
              device (e.g. by coupling a z/VM vNIC already configured in Linux
              to a guestLAN), we call dev_kfree_skb_irq(NULL) which results in
              a kernel panic.
Solution:     Adding a proper check for NULL pointers to address this issue.
Reproduction: (1) Create a GuestLAN with MFS > 8K,
                  e.g. 'vmcp DEFINE LAN ... TYPE HIPERS MFS 64K'
              (2) Create a vNIC in z/VM, e.g. 'vmcp DEFINE NIC 666 TYPE HIPERS'
              (3) Configure the vNIC in Linux using znetconf,
                  e.g. 'znetconf -a 0.0.0666'
              (4) Couple the vNIC to the GuestLAN, e.g.
                  'vmcp COUPLE 666 TO ...'

Signed-off-by: Stefan Raspl <raspl@linux.vnet.ibm.com>
Acked-by: John Jolly <jjolly@suse.de>
---
 drivers/s390/net/qeth_core_main.c |    6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

--- a/drivers/s390/net/qeth_core_main.c
+++ b/drivers/s390/net/qeth_core_main.c
@@ -1284,8 +1284,10 @@ static void qeth_free_qdio_buffers(struc
 
 	qeth_free_cq(card);
 	cancel_delayed_work_sync(&card->buffer_reclaim_work);
-	for (j = 0; j < QDIO_MAX_BUFFERS_PER_Q; ++j)
-		dev_kfree_skb_any(card->qdio.in_q->bufs[j].rx_skb);
+	for (j = 0; j < QDIO_MAX_BUFFERS_PER_Q; ++j) {
+		if (card->qdio.in_q->bufs[j].rx_skb)
+			dev_kfree_skb_any(card->qdio.in_q->bufs[j].rx_skb);
+	}
 	kfree(card->qdio.in_q);
 	card->qdio.in_q = NULL;
 	/* inbound buffer pool */
