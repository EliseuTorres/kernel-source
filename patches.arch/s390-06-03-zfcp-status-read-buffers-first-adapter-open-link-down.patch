From: Steffen Maier <maier@linux.vnet.ibm.com>
Subject: zfcp: status read buffers on first adapter open with link down
Patch-mainline: not yet
Git-commit: -
References: bnc#817401, LTC#92429

Description:  zfcp: status read buffers on first adapter open with link down
Symptom:      Kernel message "kernel BUG at mm/mempool.c:131!"
              in process "zfcperp<FCP-device-bus-ID>" with last function
              mempool_resize in Krnl PSW and zfcp_erp_thread in the
              Call Trace.
Problem:      Upstream commit 64deb6efdc5504ce97b5c1c6f281fffbc150bd93
              "[SCSI] zfcp: Use status_read_buf_num provided by FCP channel"
              started using a value returned by the channel
              but only evaluated the value if the fabric link is up.
              Upstream commit 8d88cf3f3b9af4713642caeb221b6d6a42019001
              "[SCSI] zfcp: Update status read mempool"
              introduced mempool resizings based on the above value.
              On setting an FCP device online for the very first time since
              boot, a new zeroed adapter object is allocated. If the link
              is down, the number of status read requests remains zero.
              Since just the config data exchange is incomplete, we proceed
              with adapter open recovery. However, we unconditionally call
              mempool_resize with adapter->stat_read_buf_num == 0 in this
              case.
Solution:     Don't evaluate channel values which are invalid on link down.
              The number of status read requests is always valid,
              evaluated, and set to a positive minimum greater than zero.
              The adapter open recovery can proceed and the channel has
              status read buffers to inform us on a future link up event.
              While we are not aware of any other code path that could
              result in mempool resize attempts of size zero, we still also
              initialize the number of status read buffers to be posted
              to a static minimum number on adapter object allocation.
Reproduction: Pull fibre from physical port of FCP device or turn FC
              switch adjacent port off. The FCP device must not have been
              online in Linux before (e.g. after fresh boot). Set the FCP
              device online for the first time.

Signed-off-by: Steffen Maier <maier@linux.vnet.ibm.com>
Acked-by: John Jolly <jjolly@suse.de>
---
 drivers/s390/scsi/zfcp_aux.c |    5 ++++-
 drivers/s390/scsi/zfcp_fsf.c |   23 ++++++++++++++++-------
 2 files changed, 20 insertions(+), 8 deletions(-)

--- a/drivers/s390/scsi/zfcp_aux.c
+++ b/drivers/s390/scsi/zfcp_aux.c
@@ -3,7 +3,7 @@
  *
  * Module interface and handling of zfcp data structures.
  *
- * Copyright IBM Corporation 2002, 2010
+ * Copyright IBM Corp. 2002, 2013
  */
 
 /*
@@ -23,6 +23,7 @@
  *            Christof Schmitt
  *            Martin Petermann
  *            Sven Schuetz
+ *            Steffen Maier
  */
 
 #define KMSG_COMPONENT "zfcp"
@@ -414,6 +415,8 @@ struct zfcp_adapter *zfcp_adapter_enqueu
 	adapter->dma_parms.max_segment_size = ZFCP_QDIO_SBALE_LEN;
 	adapter->ccw_device->dev.dma_parms = &adapter->dma_parms;
 
+	adapter->stat_read_buf_num = FSF_STATUS_READS_RECOM;
+
 	if (!zfcp_scsi_adapter_register(adapter))
 		return adapter;
 
--- a/drivers/s390/scsi/zfcp_fsf.c
+++ b/drivers/s390/scsi/zfcp_fsf.c
@@ -3,7 +3,7 @@
  *
  * Implementation of FSF commands.
  *
- * Copyright IBM Corporation 2002, 2010
+ * Copyright IBM Corp. 2002, 2013
  */
 
 #define KMSG_COMPONENT "zfcp"
@@ -483,12 +483,8 @@ static int zfcp_fsf_exchange_config_eval
 
 	fc_host_port_name(shost) = nsp->fl_wwpn;
 	fc_host_node_name(shost) = nsp->fl_wwnn;
-	fc_host_port_id(shost) = ntoh24(bottom->s_id);
-	fc_host_speed(shost) =
-		zfcp_fsf_convert_portspeed(bottom->fc_link_speed);
 	fc_host_supported_classes(shost) = FC_COS_CLASS2 | FC_COS_CLASS3;
 
-	adapter->hydra_version = bottom->adapter_type;
 	adapter->timer_ticks = bottom->timer_interval & ZFCP_FSF_TIMER_INT_MASK;
 	adapter->stat_read_buf_num = max(bottom->status_read_buf_num,
 					 (u16)FSF_STATUS_READS_RECOM);
@@ -496,6 +492,19 @@ static int zfcp_fsf_exchange_config_eval
 	if (fc_host_permanent_port_name(shost) == -1)
 		fc_host_permanent_port_name(shost) = fc_host_port_name(shost);
 
+	zfcp_scsi_set_prot(adapter);
+
+	/* no error return above here, otherwise must fix call chains */
+	/* do not evaluate invalid fields */
+	if (req->qtcb->header.fsf_status == FSF_EXCHANGE_CONFIG_DATA_INCOMPLETE)
+		return 0;
+
+	fc_host_port_id(shost) = ntoh24(bottom->s_id);
+	fc_host_speed(shost) =
+		zfcp_fsf_convert_portspeed(bottom->fc_link_speed);
+
+	adapter->hydra_version = bottom->adapter_type;
+
 	switch (bottom->fc_topology) {
 	case FSF_TOPO_P2P:
 		adapter->peer_d_id = ntoh24(bottom->peer_d_id);
@@ -517,8 +526,6 @@ static int zfcp_fsf_exchange_config_eval
 		return -EIO;
 	}
 
-	zfcp_scsi_set_prot(adapter);
-
 	return 0;
 }
 
@@ -569,6 +576,8 @@ static void zfcp_fsf_exchange_config_dat
 				&adapter->status);
 		zfcp_fsf_link_down_info_eval(req,
 			&qtcb->header.fsf_status_qual.link_down_info);
+		if (zfcp_fsf_exchange_config_evaluate(req))
+			return;
 		break;
 	default:
 		zfcp_erp_adapter_shutdown(adapter, 0, "fsecdh3");
