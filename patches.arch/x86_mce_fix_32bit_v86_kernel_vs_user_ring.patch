From: Thomas Renninger
Subject: X86 MCE: Fix correct ring/severity identification in V86 case
References: bnc#773267
Patch-Mainline: yes, already in 3.2.y also submitted to 3.0.y now

This is based on Andi's mainline commit:
a129a7c84582629741e5fa6f40026efcd7a65bd4

It already got committed to 3.2.y stable kernel tree, this is
a backport for 3.0.y.

Unfortunately things changed a bit there and I had to adjust
some pieces:
   - move mce_get_rip() up. It fills up m->cs and m->ip values which
     are evaluated in mce_severity(). Therefore move it up right before
     the mce_severity call. This seem to be another bug in 3.0?
   - Place the backport (fix m->cs in V86 case) to where m->cs gets
     filled which is mce_get_rip() in 3.0

Signed-off-by: Thomas Renninger <trenn@suse.de>
---
 arch/x86/kernel/cpu/mcheck/mce.c |    9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

Index: linux-3.0-SLE11-SP2/arch/x86/kernel/cpu/mcheck/mce.c
===================================================================
--- linux-3.0-SLE11-SP2.orig/arch/x86/kernel/cpu/mcheck/mce.c
+++ linux-3.0-SLE11-SP2/arch/x86/kernel/cpu/mcheck/mce.c
@@ -460,6 +460,13 @@ static inline void mce_get_rip(struct mc
 	if (regs && (m->mcgstatus & (MCG_STATUS_RIPV|MCG_STATUS_EIPV))) {
 		m->ip = regs->ip;
 		m->cs = regs->cs;
+		/*
+		 * When in VM86 mode make the cs look like ring 3
+		 * always. This is a lie, but it's better than passing
+		 * the additional vm86 bit around everywhere.
+		 */
+		if (v8086_mode(regs))
+			m->cs |= 3;
 	} else {
 		m->ip = 0;
 		m->cs = 0;
@@ -1003,6 +1010,7 @@ void do_machine_check(struct pt_regs *re
 		 */
 		add_taint(TAINT_MACHINE_CHECK);
 
+		mce_get_rip(&m, regs);
 		severity = mce_severity(&m, tolerant, NULL);
 
 		/*
@@ -1041,7 +1049,6 @@ void do_machine_check(struct pt_regs *re
 		if (severity == MCE_AO_SEVERITY && mce_usable_address(&m))
 			mce_ring_add(m.addr >> PAGE_SHIFT);
 
-		mce_get_rip(&m, regs);
 		mce_log(&m);
 
 		if (severity > worst) {
