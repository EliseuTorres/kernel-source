From: Gerald Schaefer <geraldsc@de.ibm.com>
Subject: kernel: memory leak with RCU_TABLE_FREE
Patch-mainline: yes
References: bnc#724227,LTC#75848

Symptom:     The PageTables value in /proc/meminfo continously increases
             until the system is out of memory.
Problem:     The rcu page table freeing code is incorrect and does not
             always free a page after all the page-table fragments of
             the page have been freed.
Solution:    Correct the bit mask used to extract the fragment index from
             the page table pointer.

Acked-by: John Jolly <jjolly@suse.de>
---
 arch/s390/mm/pgtable.c |    5 +++--
 1 file changed, 3 insertions(+), 2 deletions(-)

--- a/arch/s390/mm/pgtable.c
+++ b/arch/s390/mm/pgtable.c
@@ -291,8 +291,9 @@ void page_table_free_rcu(struct mmu_gath
 
 void __tlb_remove_table(void *_table)
 {
-	void *table = (void *)((unsigned long) _table & PAGE_MASK);
-	unsigned type = (unsigned long) _table & ~PAGE_MASK;
+	const unsigned long mask = (FRAG_MASK << 4) | FRAG_MASK;
+	void *table = (void *)((unsigned long) _table & ~mask);
+	unsigned type = (unsigned long) _table & mask;
 
 	if (type)
 		__page_table_free_rcu(table, type);
