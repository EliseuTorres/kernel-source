From: Gerald Schaefer <geraldsc@de.ibm.com>
Subject: zfcpdump: Add prefix registers to dump header
References: bnc#700080,LTC#69493,FATE#311897
Patch-mainline: Yes

Description: With this patch the prefix registers of all online CPUs are
             stored in the the zcore dump header. This allows dump analysis
             tools to access the register information that is stored in the
             prefix pages without using the System.map. This feature is
             also needed as preparation for makedumpfile support on s390.

Acked-by: John Jolly <jjolly@suse.de>
---
 drivers/s390/char/zcore.c |   25 ++++++++++++++++++++++---
 1 file changed, 22 insertions(+), 3 deletions(-)

--- a/drivers/s390/char/zcore.c
+++ b/drivers/s390/char/zcore.c
@@ -227,7 +227,7 @@ static int __init init_cpu_info(enum arc
 
 static DEFINE_MUTEX(zcore_mutex);
 
-#define DUMP_VERSION	0x3
+#define DUMP_VERSION	0x5
 #define DUMP_MAGIC	0xa8190173618f23fdULL
 #define DUMP_ARCH_S390X	2
 #define DUMP_ARCH_S390	1
@@ -252,7 +252,14 @@ struct zcore_header {
 	u32 volnr;
 	u32 build_arch;
 	u64 rmem_size;
-	char pad2[4016];
+	u8 mvdump;
+	u16 cpu_cnt;
+	u16 real_cpu_cnt;
+	u8 end_pad1[0x200-0x061];
+	u64 mvdump_sign;
+	u64 mvdump_zipl_time;
+	u8 end_pad2[0x800-0x210];
+	u32 lc_vec[512];
 } __attribute__((packed,__aligned__(16)));
 
 static struct zcore_header zcore_header = {
@@ -633,8 +640,9 @@ static int __init get_mem_size(unsigned
 
 static int __init zcore_header_init(int arch, struct zcore_header *hdr)
 {
-	int rc;
+	int rc, i;
 	unsigned long memory = 0;
+	u32 prefix;
 
 	if (arch == ARCH_S390X)
 		hdr->arch_id = DUMP_ARCH_S390X;
@@ -649,6 +657,17 @@ static int __init zcore_header_init(int
 	hdr->num_pages = memory / PAGE_SIZE;
 	hdr->tod = get_clock();
 	get_cpu_id(&hdr->cpu_id);
+	for (i = 0; zfcpdump_save_areas[i]; i++) {
+		if (arch == ARCH_S390X)
+			prefix = zfcpdump_save_areas[i]->s390x.pref_reg;
+		else
+			prefix = zfcpdump_save_areas[i]->s390.pref_reg;
+		hdr->real_cpu_cnt++;
+		if (!prefix)
+			continue;
+		hdr->lc_vec[hdr->cpu_cnt] = prefix;
+		hdr->cpu_cnt++;
+	}
 	return 0;
 }
 
