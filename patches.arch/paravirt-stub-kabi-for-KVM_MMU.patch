From: Mel Gorman <mgorman@suse.de>
Date: Wed, 30 May 2012 13:46:47 +0100
Subject: [PATCH] parvirt: Stub support KABI for KVM_MMU
References: bnc#556135, bnc#754690, FATE#306453
Patch-mainline: No, will be rendered obsolete by future MMU changes

Unfortunately the MMU-related paravirt ops are part of the KABI even
though they were not for SP1. There is no choice but to preserve the
KABI for the build but there is no way of handling this cleanly. Hence,
this bodges it by leaving the structure in place but it's effectively
useless and will cause panics if used.

Signed-off-by: Mel Gorman <mgorman@suse.de>
---
 arch/x86/include/asm/paravirt_types.h |    2 --
 arch/x86/kernel/paravirt.c            |    6 +-----
 arch/x86/kernel/paravirt_patch_32.c   |    4 ----
 arch/x86/kernel/paravirt_patch_64.c   |    6 +-----
 4 files changed, 2 insertions(+), 16 deletions(-)

Index: linux-3.0-SLE11-SP2/arch/x86/include/asm/paravirt_types.h
===================================================================
--- linux-3.0-SLE11-SP2.orig/arch/x86/include/asm/paravirt_types.h
+++ linux-3.0-SLE11-SP2/arch/x86/include/asm/paravirt_types.h
@@ -338,9 +338,7 @@ struct paravirt_patch_template {
 	struct pv_cpu_ops pv_cpu_ops;
 	struct pv_irq_ops pv_irq_ops;
 	struct pv_apic_ops pv_apic_ops;
-#ifdef CONFIG_PARAVIRT_MMU
 	struct pv_mmu_ops pv_mmu_ops;
-#endif
 	struct pv_lock_ops pv_lock_ops;
 };
 
Index: linux-3.0-SLE11-SP2/arch/x86/kernel/paravirt.c
===================================================================
--- linux-3.0-SLE11-SP2.orig/arch/x86/kernel/paravirt.c
+++ linux-3.0-SLE11-SP2/arch/x86/kernel/paravirt.c
@@ -128,9 +128,7 @@ static void *get_call_destination(u8 typ
 		.pv_cpu_ops = pv_cpu_ops,
 		.pv_irq_ops = pv_irq_ops,
 		.pv_apic_ops = pv_apic_ops,
-#ifdef CONFIG_PARAVIRT_MMU
 		.pv_mmu_ops = pv_mmu_ops,
-#endif
 #ifdef CONFIG_PARAVIRT_SPINLOCKS
 		.pv_lock_ops = pv_lock_ops,
 #endif
@@ -185,7 +183,6 @@ unsigned paravirt_patch_insns(void *insn
 	return insn_len;
 }
 
-#ifdef CONFIG_PARAVIRT_MMU
 static void native_flush_tlb(void)
 {
 	__native_flush_tlb();
@@ -204,7 +201,6 @@ static void native_flush_tlb_single(unsi
 {
 	__native_flush_tlb_single(addr);
 }
-#endif /* CONFIG_PARAVIRT_MMU */
 
 /* These are in entry.S */
 extern void native_iret(void);
@@ -402,7 +398,6 @@ struct pv_apic_ops pv_apic_ops = {
 #define PTE_IDENT	__PV_IS_CALLEE_SAVE(_paravirt_ident_64)
 #endif
 
-#ifdef CONFIG_PARAVIRT_MMU
 struct pv_mmu_ops pv_mmu_ops = {
 
 	.read_cr2 = native_read_cr2,
@@ -473,11 +468,10 @@ struct pv_mmu_ops pv_mmu_ops = {
 
 	.set_fixmap = native_set_fixmap,
 };
-EXPORT_SYMBOL    (pv_mmu_ops);
-#endif /* CONFIG_PARAVIRT_MMU */
 
 EXPORT_SYMBOL_GPL(pv_time_ops);
 EXPORT_SYMBOL    (pv_cpu_ops);
+EXPORT_SYMBOL    (pv_mmu_ops);
 EXPORT_SYMBOL_GPL(pv_apic_ops);
 EXPORT_SYMBOL_GPL(pv_info);
 EXPORT_SYMBOL    (pv_irq_ops);
Index: linux-3.0-SLE11-SP2/arch/x86/kernel/paravirt_patch_32.c
===================================================================
--- linux-3.0-SLE11-SP2.orig/arch/x86/kernel/paravirt_patch_32.c
+++ linux-3.0-SLE11-SP2/arch/x86/kernel/paravirt_patch_32.c
@@ -6,11 +6,9 @@ DEF_NATIVE(pv_irq_ops, restore_fl, "push
 DEF_NATIVE(pv_irq_ops, save_fl, "pushf; pop %eax");
 DEF_NATIVE(pv_cpu_ops, iret, "iret");
 DEF_NATIVE(pv_cpu_ops, irq_enable_sysexit, "sti; sysexit");
-#ifdef CONFIG_PARAVIRT_MMU
 DEF_NATIVE(pv_mmu_ops, read_cr2, "mov %cr2, %eax");
 DEF_NATIVE(pv_mmu_ops, write_cr3, "mov %eax, %cr3");
 DEF_NATIVE(pv_mmu_ops, read_cr3, "mov %cr3, %eax");
-#endif
 DEF_NATIVE(pv_cpu_ops, clts, "clts");
 DEF_NATIVE(pv_cpu_ops, read_tsc, "rdtsc");
 
@@ -44,11 +42,9 @@ unsigned native_patch(u8 type, u16 clobb
 		PATCH_SITE(pv_irq_ops, save_fl);
 		PATCH_SITE(pv_cpu_ops, iret);
 		PATCH_SITE(pv_cpu_ops, irq_enable_sysexit);
-#ifdef CONFIG_PARAVIRT_MMU
 		PATCH_SITE(pv_mmu_ops, read_cr2);
 		PATCH_SITE(pv_mmu_ops, read_cr3);
 		PATCH_SITE(pv_mmu_ops, write_cr3);
-#endif
 		PATCH_SITE(pv_cpu_ops, clts);
 		PATCH_SITE(pv_cpu_ops, read_tsc);
 
Index: linux-3.0-SLE11-SP2/arch/x86/kernel/paravirt_patch_64.c
===================================================================
--- linux-3.0-SLE11-SP2.orig/arch/x86/kernel/paravirt_patch_64.c
+++ linux-3.0-SLE11-SP2/arch/x86/kernel/paravirt_patch_64.c
@@ -7,12 +7,10 @@ DEF_NATIVE(pv_irq_ops, irq_enable, "sti"
 DEF_NATIVE(pv_irq_ops, restore_fl, "pushq %rdi; popfq");
 DEF_NATIVE(pv_irq_ops, save_fl, "pushfq; popq %rax");
 DEF_NATIVE(pv_cpu_ops, iret, "iretq");
-#ifdef CONFIG_PARAVIRT_MMU
 DEF_NATIVE(pv_mmu_ops, read_cr2, "movq %cr2, %rax");
 DEF_NATIVE(pv_mmu_ops, read_cr3, "movq %cr3, %rax");
 DEF_NATIVE(pv_mmu_ops, write_cr3, "movq %rdi, %cr3");
 DEF_NATIVE(pv_mmu_ops, flush_tlb_single, "invlpg (%rdi)");
-#endif
 DEF_NATIVE(pv_cpu_ops, clts, "clts");
 DEF_NATIVE(pv_cpu_ops, wbinvd, "wbinvd");
 
@@ -57,13 +55,11 @@ unsigned native_patch(u8 type, u16 clobb
 		PATCH_SITE(pv_cpu_ops, usergs_sysret32);
 		PATCH_SITE(pv_cpu_ops, usergs_sysret64);
 		PATCH_SITE(pv_cpu_ops, swapgs);
-#ifdef CONFIG_PARAVIRT_MMU
 		PATCH_SITE(pv_mmu_ops, read_cr2);
 		PATCH_SITE(pv_mmu_ops, read_cr3);
 		PATCH_SITE(pv_mmu_ops, write_cr3);
-		PATCH_SITE(pv_mmu_ops, flush_tlb_single);
-#endif
 		PATCH_SITE(pv_cpu_ops, clts);
+		PATCH_SITE(pv_mmu_ops, flush_tlb_single);
 		PATCH_SITE(pv_cpu_ops, wbinvd);
 
 	patch_site:
