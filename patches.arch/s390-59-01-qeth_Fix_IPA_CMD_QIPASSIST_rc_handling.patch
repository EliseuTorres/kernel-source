Subject: qeth: Fix IPA_CMD_QIPASSIST return code handling
From: Stefan Raspl <raspl@linux.vnet.ibm.com>
Patch-mainline: Submitted
References: bnc#785851,LTC#86101

Description:  qeth: Fix IPA_CMD_QIPASSIST return code handling
Symptom:      Older OSA card generations will cease to support features that
              rely on SETADAPTERPARM calls after a recovery.
Problem:      Return codes of IPA_CMD_QIPASSIST are not checked, especially
              the ones which indicate that the command is not supported. As
              a result, the device driver would not enable all available
              features on older card generations.
              This patch adds proper checking and sets the bare minimum in the
Solution:     Add proper checking and set the bare minimum of IP assists in
              the supported flags to avoid follow-on errors.
Reproduction: 1. Configure an OSA card that does not support the QIPASST IP
                 assist.
              2. Trigger recovery
              3. Try to set the port isolation (or any other functionality
              that depends upon a SETADAPTERPARM): You will receive an error
              indicating that the respective functionality is not supported.

Acked-by: John Jolly <jjolly@suse.de>
---
 drivers/s390/net/qeth_core_main.c |   24 ++++++++++++++++++++++--
 drivers/s390/net/qeth_l2_main.c   |   11 +++++++----
 2 files changed, 29 insertions(+), 6 deletions(-)

--- a/drivers/s390/net/qeth_core_main.c
+++ b/drivers/s390/net/qeth_core_main.c
@@ -2938,13 +2938,33 @@ static int qeth_query_ipassists_cb(struc
 	QETH_DBF_TEXT(SETUP, 2, "qipasscb");
 
 	cmd = (struct qeth_ipa_cmd *) data;
+
+	switch (cmd->hdr.return_code) {
+	case IPA_RC_NOTSUPP:
+	case IPA_RC_L2_UNSUPPORTED_CMD:
+		QETH_DBF_TEXT(SETUP, 2, "ipaunsup");
+		card->options.ipa4.supported_funcs |= IPA_SETADAPTERPARMS;
+		card->options.ipa6.supported_funcs |= IPA_SETADAPTERPARMS;
+		return -0;
+	default:
+		if (cmd->hdr.return_code) {
+			QETH_DBF_MESSAGE(1, "%s IPA_CMD_QIPASSIST: Unhandled "
+						"rc=%d\n",
+						dev_name(&card->gdev->dev),
+						cmd->hdr.return_code);
+			return 0;
+		}
+	}
+
 	if (cmd->hdr.prot_version == QETH_PROT_IPV4) {
 		card->options.ipa4.supported_funcs = cmd->hdr.ipa_supported;
 		card->options.ipa4.enabled_funcs = cmd->hdr.ipa_enabled;
-	} else {
+	} else if (cmd->hdr.prot_version == QETH_PROT_IPV6) {
 		card->options.ipa6.supported_funcs = cmd->hdr.ipa_supported;
 		card->options.ipa6.enabled_funcs = cmd->hdr.ipa_enabled;
-	}
+	} else
+		QETH_DBF_MESSAGE(1, "%s IPA_CMD_QIPASSIST: Flawed LIC detected"
+					"\n", dev_name(&card->gdev->dev));
 	QETH_DBF_TEXT(SETUP, 2, "suppenbl");
 	QETH_DBF_TEXT_(SETUP, 2, "%x", cmd->hdr.ipa_supported);
 	QETH_DBF_TEXT_(SETUP, 2, "%x", cmd->hdr.ipa_enabled);
--- a/drivers/s390/net/qeth_l2_main.c
+++ b/drivers/s390/net/qeth_l2_main.c
@@ -623,10 +623,13 @@ static int qeth_l2_request_initial_mac(s
 	QETH_DBF_TEXT(SETUP, 2, "doL2init");
 	QETH_DBF_TEXT_(SETUP, 2, "doL2%s", CARD_BUS_ID(card));
 
-	rc = qeth_query_setadapterparms(card);
-	if (rc) {
-		QETH_DBF_MESSAGE(2, "could not query adapter parameters on "
-			"device %s: x%x\n", CARD_BUS_ID(card), rc);
+	if (qeth_is_supported(card, IPA_SETADAPTERPARMS)) {
+		rc = qeth_query_setadapterparms(card);
+		if (rc) {
+			QETH_DBF_MESSAGE(2, "could not query adapter "
+				"parameters on device %s: x%x\n",
+				CARD_BUS_ID(card), rc);
+		}
 	}
 
 	if (card->info.type == QETH_CARD_TYPE_IQD ||
