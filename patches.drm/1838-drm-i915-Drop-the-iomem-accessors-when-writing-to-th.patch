From 52f0251604a0edcfcf8622546cc6b98b163feba9 Mon Sep 17 00:00:00 2001
From: Chris Wilson <chris@chris-wilson.co.uk>
Date: Tue, 2 Nov 2010 11:17:23 +0000
Patch-mainline: 2.6.38
References: fate#310916
Git-commit: 27153f72d04bcd83b3a66e219418a21d6269553b
Subject: [PATCH 1838/2588] drm/i915: Drop the iomem accessors when writing to
 the kmapped blt batch

I presumed that we would be writing to the batch through the GTT having
bound it, so I converted it to use iomem. Even later as I spotted that
we didn't even move the batch to the GTT (now an issue since we default
to uncached memory on SNB) I still didn't realise that using iomem for
kmapped memory was incorrect. Fix it.

Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
(cherry picked from commit 27153f72d04bcd83b3a66e219418a21d6269553b)

Signed-off-by: Takashi Iwai <tiwai@suse.de>
---
 drivers/gpu/drm/i915/intel_ringbuffer.c |    6 +++---
 1 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_ringbuffer.c b/drivers/gpu/drm/i915/intel_ringbuffer.c
index 3426940..2fb7988 100644
--- a/drivers/gpu/drm/i915/intel_ringbuffer.c
+++ b/drivers/gpu/drm/i915/intel_ringbuffer.c
@@ -909,7 +909,7 @@ static int blt_ring_init(struct intel_ring_buffer *ring)
 {
 	if (NEED_BLT_WORKAROUND(ring->dev)) {
 		struct drm_i915_gem_object *obj;
-		u32 __iomem *ptr;
+		u32 *ptr;
 		int ret;
 
 		obj = to_intel_bo(i915_gem_alloc_object(ring->dev, 4096));
@@ -923,8 +923,8 @@ static int blt_ring_init(struct intel_ring_buffer *ring)
 		}
 
 		ptr = kmap(obj->pages[0]);
-		iowrite32(MI_BATCH_BUFFER_END, ptr);
-		iowrite32(MI_NOOP, ptr+1);
+		*ptr++ = MI_BATCH_BUFFER_END;
+		*ptr++ = MI_NOOP;
 		kunmap(obj->pages[0]);
 
 		ret = i915_gem_object_set_to_gtt_domain(&obj->base, false);
-- 
1.7.6

