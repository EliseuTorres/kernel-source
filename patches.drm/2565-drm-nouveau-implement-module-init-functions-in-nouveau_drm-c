From 9458029940ffc64bca0c5a30ea626c377205842e Mon Sep 17 00:00:00 2001
From: Ben Skeggs <bskeggs@redhat.com>
Date: Fri, 6 Jul 2012 12:14:00 +1000
Subject: drm/nouveau: implement module init functions in nouveau_drm.c
Git-commit: 9458029940ffc64bca0c5a30ea626c377205842e
Patch-mainline: v3.7-rc3

These currently just call the existing ones in nouveau_drv.c, but will be
extended in upcoming commits.  This needed to be separated from the current
code as there will be some header clashes until things are ported.

Signed-off-by: Ben Skeggs <bskeggs@redhat.com>
Acked-by: Michal Srb <msrb@suse.com>
---
 drivers/gpu/drm/nouveau/Makefile                 |    3 +-
 drivers/gpu/drm/nouveau/core/engine/graph/nv04.c |    2 +-
 drivers/gpu/drm/nouveau/core/engine/graph/nv10.c |    2 +-
 drivers/gpu/drm/nouveau/core/engine/graph/nv20.c |    2 +-
 drivers/gpu/drm/nouveau/core/subdev/fb/nv04.c    |    2 +-
 drivers/gpu/drm/nouveau/core/subdev/fb/nv10.c    |    2 +-
 drivers/gpu/drm/nouveau/core/subdev/fb/nv20.c    |    2 +-
 drivers/gpu/drm/nouveau/core/subdev/fb/nv30.c    |    2 +-
 drivers/gpu/drm/nouveau/core/subdev/fb/nv40.c    |    2 +-
 drivers/gpu/drm/nouveau/core/subdev/fb/nv50.c    |    2 +-
 drivers/gpu/drm/nouveau/core/subdev/fb/nvc0.c    |    2 +-
 drivers/gpu/drm/nouveau/core/subdev/mc/nv04.c    |    2 +-
 drivers/gpu/drm/nouveau/core/subdev/mc/nv40.c    |    2 +-
 drivers/gpu/drm/nouveau/core/subdev/timer/nv04.c |    2 +-
 drivers/gpu/drm/nouveau/nouveau_acpi.c           |    2 +-
 drivers/gpu/drm/nouveau/nouveau_backlight.c      |    2 +-
 drivers/gpu/drm/nouveau/nouveau_bo.c             |    2 +-
 drivers/gpu/drm/nouveau/nouveau_channel.c        |    2 +-
 drivers/gpu/drm/nouveau/nouveau_drm.c            |  285 ++++++++++++++++++++++
 drivers/gpu/drm/nouveau/nouveau_drm.h            |   47 ++++
 drivers/gpu/drm/nouveau/nouveau_drv.c            |   75 +-----
 drivers/gpu/drm/nouveau/nouveau_drv.h            |    4 +-
 drivers/gpu/drm/nouveau/nouveau_fbcon.c          |    2 +-
 drivers/gpu/drm/nouveau/nouveau_gem.c            |    2 +-
 drivers/gpu/drm/nouveau/nouveau_gpuobj.c         |    2 +-
 drivers/gpu/drm/nouveau/nouveau_irq.c            |    2 +-
 drivers/gpu/drm/nouveau/nouveau_prime.c          |    2 +-
 drivers/gpu/drm/nouveau/nouveau_state.c          |   14 +-
 28 files changed, 381 insertions(+), 91 deletions(-)

Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/Makefile
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/Makefile
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/Makefile
@@ -80,7 +80,8 @@ nouveau-y += core/engine/mpeg/nv50.o
 nouveau-y += core/engine/ppp/nv98.o
 nouveau-y += core/engine/vp/nv84.o
 
-nouveau-y += nouveau_drv.o nouveau_state.o nouveau_channel.o nouveau_mem.o \
+nouveau-y += nouveau_drm.o \
+	     nouveau_drv.o nouveau_state.o nouveau_channel.o nouveau_mem.o \
              nouveau_gpuobj.o nouveau_irq.o nouveau_notifier.o \
              nouveau_sgdma.o nouveau_dma.o nouveau_util.o \
              nouveau_bo.o nouveau_fence.o nouveau_gem.o nouveau_ttm.o \
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/engine/graph/nv04.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/core/engine/graph/nv04.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/engine/graph/nv04.c
@@ -24,7 +24,7 @@
 
 #include "drmP.h"
 #include "drm.h"
-#include "nouveau_drm.h"
+#include <nouveau_drm.h>
 #include "nouveau_drv.h"
 #include "nouveau_hw.h"
 #include "nouveau_util.h"
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/engine/graph/nv10.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/core/engine/graph/nv10.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/engine/graph/nv10.c
@@ -24,7 +24,7 @@
 
 #include "drmP.h"
 #include "drm.h"
-#include "nouveau_drm.h"
+#include <nouveau_drm.h>
 #include "nouveau_drv.h"
 #include "nouveau_util.h"
 
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/engine/graph/nv20.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/core/engine/graph/nv20.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/engine/graph/nv20.c
@@ -1,7 +1,7 @@
 #include "drmP.h"
 #include "drm.h"
 #include "nouveau_drv.h"
-#include "nouveau_drm.h"
+#include <nouveau_drm.h>
 
 /*
  * NV20
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/fb/nv04.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/core/subdev/fb/nv04.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/fb/nv04.c
@@ -1,7 +1,7 @@
 #include "drmP.h"
 #include "drm.h"
 #include "nouveau_drv.h"
-#include "nouveau_drm.h"
+#include <nouveau_drm.h>
 
 int
 nv04_fb_vram_init(struct drm_device *dev)
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/fb/nv10.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/core/subdev/fb/nv10.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/fb/nv10.c
@@ -1,7 +1,7 @@
 #include "drmP.h"
 #include "drm.h"
 #include "nouveau_drv.h"
-#include "nouveau_drm.h"
+#include <nouveau_drm.h>
 
 void
 nv10_fb_init_tile_region(struct drm_device *dev, int i, uint32_t addr,
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/fb/nv20.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/core/subdev/fb/nv20.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/fb/nv20.c
@@ -1,7 +1,7 @@
 #include "drmP.h"
 #include "drm.h"
 #include "nouveau_drv.h"
-#include "nouveau_drm.h"
+#include <nouveau_drm.h>
 
 static struct drm_mm_node *
 nv20_fb_alloc_tag(struct drm_device *dev, uint32_t size)
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/fb/nv30.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/core/subdev/fb/nv30.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/fb/nv30.c
@@ -27,7 +27,7 @@
 #include "drmP.h"
 #include "drm.h"
 #include "nouveau_drv.h"
-#include "nouveau_drm.h"
+#include <nouveau_drm.h>
 
 void
 nv30_fb_init_tile_region(struct drm_device *dev, int i, uint32_t addr,
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/fb/nv40.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/core/subdev/fb/nv40.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/fb/nv40.c
@@ -1,7 +1,7 @@
 #include "drmP.h"
 #include "drm.h"
 #include "nouveau_drv.h"
-#include "nouveau_drm.h"
+#include <nouveau_drm.h>
 
 void
 nv40_fb_set_tile_region(struct drm_device *dev, int i)
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/fb/nv50.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/core/subdev/fb/nv50.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/fb/nv50.c
@@ -1,7 +1,7 @@
 #include "drmP.h"
 #include "drm.h"
 #include "nouveau_drv.h"
-#include "nouveau_drm.h"
+#include <nouveau_drm.h>
 #include <engine/fifo.h>
 
 struct nv50_fb_priv {
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/fb/nvc0.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/core/subdev/fb/nvc0.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/fb/nvc0.c
@@ -25,7 +25,7 @@
 #include "drmP.h"
 #include "drm.h"
 #include "nouveau_drv.h"
-#include "nouveau_drm.h"
+#include <nouveau_drm.h>
 
 struct nvc0_fb_priv {
 	struct page *r100c10_page;
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/mc/nv04.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/core/subdev/mc/nv04.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/mc/nv04.c
@@ -1,7 +1,7 @@
 #include "drmP.h"
 #include "drm.h"
 #include "nouveau_drv.h"
-#include "nouveau_drm.h"
+#include <nouveau_drm.h>
 
 int
 nv04_mc_init(struct drm_device *dev)
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/mc/nv40.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/core/subdev/mc/nv40.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/mc/nv40.c
@@ -1,7 +1,7 @@
 #include "drmP.h"
 #include "drm.h"
 #include "nouveau_drv.h"
-#include "nouveau_drm.h"
+#include <nouveau_drm.h>
 
 int
 nv40_mc_init(struct drm_device *dev)
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/timer/nv04.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/core/subdev/timer/nv04.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/core/subdev/timer/nv04.c
@@ -1,7 +1,7 @@
 #include "drmP.h"
 #include "drm.h"
 #include "nouveau_drv.h"
-#include "nouveau_drm.h"
+#include <nouveau_drm.h>
 #include "nouveau_hw.h"
 
 int
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_acpi.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/nouveau_acpi.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_acpi.c
@@ -10,7 +10,7 @@
 #include <drm/drmP.h>
 #include <drm/drm_crtc_helper.h>
 #include "nouveau_drv.h"
-#include <drm/nouveau_drm.h>
+#include <nouveau_drm.h>
 #include "nv50_display.h"
 #include "nouveau_connector.h"
 
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_backlight.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/nouveau_backlight.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_backlight.c
@@ -35,7 +35,7 @@
 
 #include <drm/drmP.h>
 #include "nouveau_drv.h"
-#include <drm/nouveau_drm.h>
+#include <nouveau_drm.h>
 #include "nouveau_reg.h"
 #include "nouveau_encoder.h"
 
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_bo.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/nouveau_bo.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_bo.c
@@ -30,7 +30,7 @@
 #include <drm/drmP.h>
 #include <drm/ttm/ttm_page_alloc.h>
 
-#include <drm/nouveau_drm.h>
+#include <nouveau_drm.h>
 #include "nouveau_drv.h"
 #include "nouveau_dma.h"
 #include <core/mm.h>
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_channel.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/nouveau_channel.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_channel.c
@@ -24,7 +24,7 @@
 
 #include <drm/drmP.h>
 #include "nouveau_drv.h"
-#include <drm/nouveau_drm.h>
+#include <nouveau_drm.h>
 #include "nouveau_dma.h"
 #include <engine/fifo.h>
 #include <core/ramht.h>
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_drm.c
===================================================================
--- /dev/null
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_drm.c
@@ -0,0 +1,285 @@
+/*
+ * Copyright 2012 Red Hat Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
+ * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ * OTHER DEALINGS IN THE SOFTWARE.
+ *
+ * Authors: Ben Skeggs
+ */
+
+#include <linux/module.h>
+#include <linux/pci.h>
+
+#include <core/device.h>
+#include <core/client.h>
+#include <core/class.h>
+
+#include <subdev/device.h>
+
+#include "nouveau_drm.h"
+
+int __devinit nouveau_pci_probe(struct pci_dev *, const struct pci_device_id *);
+void nouveau_pci_remove(struct pci_dev *);
+int nouveau_pci_suspend(struct pci_dev *, pm_message_t);
+int nouveau_pci_resume(struct pci_dev *);
+int __init nouveau_init(struct pci_driver *);
+void __exit nouveau_exit(struct pci_driver *);
+
+int nouveau_load(struct drm_device *, unsigned long);
+int nouveau_unload(struct drm_device *);
+void *nouveau_newpriv(struct drm_device *);
+
+MODULE_PARM_DESC(config, "option string to pass to driver core");
+static char *nouveau_config;
+module_param_named(config, nouveau_config, charp, 0400);
+
+MODULE_PARM_DESC(debug, "debug string to pass to driver core");
+static char *nouveau_debug;
+module_param_named(debug, nouveau_debug, charp, 0400);
+
+static u64
+nouveau_name(struct pci_dev *pdev)
+{
+	u64 name = (u64)pci_domain_nr(pdev->bus) << 32;
+	name |= pdev->bus->number << 16;
+	name |= PCI_SLOT(pdev->devfn) << 8;
+	return name | PCI_FUNC(pdev->devfn);
+}
+
+static int
+nouveau_cli_create(struct pci_dev *pdev, u32 name, int size, void **pcli)
+{
+	struct nouveau_cli *cli;
+	int ret;
+
+	ret = nouveau_client_create_(name, nouveau_name(pdev), nouveau_config,
+				     nouveau_debug, size, pcli);
+	cli = *pcli;
+	if (ret)
+		return ret;
+
+	mutex_init(&cli->mutex);
+	return 0;
+}
+
+static void
+nouveau_cli_destroy(struct nouveau_cli *cli)
+{
+	struct nouveau_object *client = nv_object(cli);
+	nouveau_client_fini(&cli->base, false);
+	atomic_set(&client->refcount, 1);
+	nouveau_object_ref(NULL, &client);
+}
+
+static int __devinit
+nouveau_drm_probe(struct pci_dev *pdev, const struct pci_device_id *pent)
+{
+	struct nouveau_device *device;
+	int ret;
+
+	ret = nouveau_device_create(pdev, nouveau_name(pdev), pci_name(pdev),
+				    nouveau_config, nouveau_debug, &device);
+	if (ret)
+		return ret;
+
+	pci_set_master(pdev);
+
+	ret = nouveau_pci_probe(pdev, pent);
+	if (ret) {
+		nouveau_device_destroy(&device);
+		return ret;
+	}
+
+	return 0;
+}
+
+int
+nouveau_drm_load(struct drm_device *dev, unsigned long flags)
+{
+	struct pci_dev *pdev = dev->pdev;
+	struct nouveau_drm *drm;
+	int ret;
+
+	ret = nouveau_cli_create(pdev, 0, sizeof(*drm), (void**)&drm);
+	dev->dev_private = drm;
+	if (ret)
+		return ret;
+
+	INIT_LIST_HEAD(&drm->clients);
+	drm->dev = dev;
+
+	ret = nouveau_object_new(nv_object(drm), NVDRM_CLIENT, NVDRM_DEVICE,
+				 0x0080, &(struct nv_device_class) {
+					.device = ~0,
+					.disable = 0,
+					.debug0 = 0,
+				 }, sizeof(struct nv_device_class),
+				 &drm->device);
+	if (ret)
+		goto fail_device;
+
+	ret = nouveau_load(dev, flags);
+	if (ret)
+		goto fail_device;
+
+	return 0;
+
+fail_device:
+	nouveau_cli_destroy(&drm->client);
+	return ret;
+}
+
+int
+nouveau_drm_unload(struct drm_device *dev)
+{
+	struct nouveau_drm *drm = nouveau_newpriv(dev);
+	struct pci_dev *pdev = dev->pdev;
+	int ret;
+
+	ret = nouveau_unload(dev);
+	if (ret)
+		return ret;
+
+	pci_set_drvdata(pdev, drm->client.base.device);
+	nouveau_cli_destroy(&drm->client);
+	return 0;
+}
+
+static void
+nouveau_drm_remove(struct pci_dev *pdev)
+{
+	struct nouveau_device *device;
+	nouveau_pci_remove(pdev);
+	device = pci_get_drvdata(pdev);
+	nouveau_device_destroy(&device);
+}
+
+int
+nouveau_drm_suspend(struct pci_dev *pdev, pm_message_t pm_state)
+{
+	struct drm_device *dev = pci_get_drvdata(pdev);
+	struct nouveau_drm *drm = nouveau_newpriv(dev);
+	struct nouveau_cli *cli;
+	int ret;
+
+	if (dev->switch_power_state == DRM_SWITCH_POWER_OFF ||
+	    pm_state.event == PM_EVENT_PRETHAW)
+		return 0;
+
+	ret = nouveau_pci_suspend(pdev, pm_state);
+	if (ret)
+		return ret;
+
+	list_for_each_entry(cli, &drm->clients, head) {
+		ret = nouveau_client_fini(&cli->base, true);
+		if (ret)
+			goto fail_client;
+	}
+
+	ret = nouveau_client_fini(&drm->client.base, true);
+	if (ret)
+		goto fail_client;
+
+	pci_save_state(pdev);
+	if (pm_state.event == PM_EVENT_SUSPEND) {
+		pci_disable_device(pdev);
+		pci_set_power_state(pdev, PCI_D3hot);
+	}
+
+	return 0;
+
+fail_client:
+	list_for_each_entry_continue_reverse(cli, &drm->clients, head) {
+		nouveau_client_init(&cli->base);
+	}
+
+	nouveau_pci_resume(pdev);
+	return ret;
+}
+
+int
+nouveau_drm_resume(struct pci_dev *pdev)
+{
+	struct drm_device *dev = pci_get_drvdata(pdev);
+	struct nouveau_drm *drm = nouveau_newpriv(dev);
+	struct nouveau_cli *cli;
+	int ret;
+
+	if (dev->switch_power_state == DRM_SWITCH_POWER_OFF)
+		return 0;
+
+	pci_set_power_state(pdev, PCI_D0);
+	pci_restore_state(pdev);
+	ret = pci_enable_device(pdev);
+	if (ret)
+		return ret;
+	pci_set_master(pdev);
+
+	nouveau_client_init(&drm->client.base);
+
+	list_for_each_entry(cli, &drm->clients, head) {
+		nouveau_client_init(&cli->base);
+	}
+
+	return nouveau_pci_resume(pdev);
+}
+
+static struct pci_device_id
+nouveau_drm_pci_table[] = {
+	{
+		PCI_DEVICE(PCI_VENDOR_ID_NVIDIA, PCI_ANY_ID),
+		.class = PCI_BASE_CLASS_DISPLAY << 16,
+		.class_mask  = 0xff << 16,
+	},
+	{
+		PCI_DEVICE(PCI_VENDOR_ID_NVIDIA_SGS, PCI_ANY_ID),
+		.class = PCI_BASE_CLASS_DISPLAY << 16,
+		.class_mask  = 0xff << 16,
+	},
+	{}
+};
+
+static struct pci_driver
+nouveau_drm_pci_driver = {
+	.name = "nouveau",
+	.id_table = nouveau_drm_pci_table,
+	.probe = nouveau_drm_probe,
+	.remove = nouveau_drm_remove,
+	.suspend = nouveau_drm_suspend,
+	.resume = nouveau_drm_resume,
+};
+
+static int __init
+nouveau_drm_init(void)
+{
+	return nouveau_init(&nouveau_drm_pci_driver);
+}
+
+static void __exit
+nouveau_drm_exit(void)
+{
+	nouveau_exit(&nouveau_drm_pci_driver);
+}
+
+module_init(nouveau_drm_init);
+module_exit(nouveau_drm_exit);
+
+MODULE_DEVICE_TABLE(pci, nouveau_drm_pci_table);
+MODULE_AUTHOR("Nouveau Project");
+MODULE_DESCRIPTION("nVidia Riva/TNT/GeForce/Quadro/Tesla");
+MODULE_LICENSE("GPL and additional rights");
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_drm.h
===================================================================
--- /dev/null
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_drm.h
@@ -0,0 +1,47 @@
+#ifndef __NOUVEAU_DRMCLI_H__
+#define __NOUVEAU_DRMCLI_H__
+
+#include <core/client.h>
+
+#include <drmP.h>
+#include <drm/nouveau_drm.h>
+
+enum nouveau_drm_handle {
+	NVDRM_CLIENT = 0xffffffff,
+	NVDRM_DEVICE = 0xdddddddd,
+};
+
+struct nouveau_cli {
+	struct nouveau_client base;
+	struct list_head head;
+	struct mutex mutex;
+};
+
+struct nouveau_drm {
+	struct nouveau_cli client;
+	struct drm_device *dev;
+
+	struct nouveau_object *device;
+	struct list_head clients;
+};
+
+int nouveau_drm_suspend(struct pci_dev *, pm_message_t);
+int nouveau_drm_resume(struct pci_dev *);
+
+#define NV_PRINTK(level, code, drm, fmt, args...)                              \
+	printk(level "nouveau " code "[     DRM][%s] " fmt,                    \
+	       pci_name((drm)->dev->pdev), ##args)
+#define NV_FATAL(drm, fmt, args...)                                            \
+	NV_PRINTK(KERN_CRIT, "!", (drm), fmt, ##args)
+#define NV_ERROR(drm, fmt, args...)                                            \
+	NV_PRINTK(KERN_ERR, "E", (drm), fmt, ##args)
+#define NV_WARN(drm, fmt, args...)                                             \
+	NV_PRINTK(KERN_WARNING, "W", (drm), fmt, ##args)
+#define NV_INFO(drm, fmt, args...)                                             \
+	NV_PRINTK(KERN_INFO, " ", (drm), fmt, ##args)
+#define NV_DEBUG(drm, fmt, args...) do {                                       \
+	if (drm_debug & DRM_UT_DRIVER)                                         \
+		NV_PRINTK(KERN_DEBUG, "D", drm, fmt, ##args);                  \
+} while (0)
+
+#endif
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_drv.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/nouveau_drv.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_drv.c
@@ -135,31 +135,15 @@ int nouveau_fbpercrtc;
 module_param_named(fbpercrtc, nouveau_fbpercrtc, int, 0400);
 #endif
 
-static struct pci_device_id pciidlist[] = {
-	{
-		PCI_DEVICE(PCI_VENDOR_ID_NVIDIA, PCI_ANY_ID),
-		.class = PCI_BASE_CLASS_DISPLAY << 16,
-		.class_mask  = 0xff << 16,
-	},
-	{
-		PCI_DEVICE(PCI_VENDOR_ID_NVIDIA_SGS, PCI_ANY_ID),
-		.class = PCI_BASE_CLASS_DISPLAY << 16,
-		.class_mask  = 0xff << 16,
-	},
-	{}
-};
-
-MODULE_DEVICE_TABLE(pci, pciidlist);
-
 static struct drm_driver driver;
 
-static int __devinit
+int __devinit
 nouveau_pci_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 {
 	return drm_get_pci_dev(pdev, ent, &driver);
 }
 
-static void
+void
 nouveau_pci_remove(struct pci_dev *pdev)
 {
 	struct drm_device *dev = pci_get_drvdata(pdev);
@@ -178,12 +162,6 @@ nouveau_pci_suspend(struct pci_dev *pdev
 	struct drm_crtc *crtc;
 	int ret, i, e;
 
-	if (pm_state.event == PM_EVENT_PRETHAW)
-		return 0;
-
-	if (dev->switch_power_state == DRM_SWITCH_POWER_OFF)
-		return 0;
-
 	NV_INFO(dev, "Disabling display...\n");
 	nouveau_display_fini(dev);
 
@@ -245,14 +223,6 @@ nouveau_pci_suspend(struct pci_dev *pdev
 	}
 
 	nouveau_agp_fini(dev);
-
-	NV_INFO(dev, "And we're gone!\n");
-	pci_save_state(pdev);
-	if (pm_state.event == PM_EVENT_SUSPEND) {
-		pci_disable_device(pdev);
-		pci_set_power_state(pdev, PCI_D3hot);
-	}
-
 	return 0;
 
 out_abort:
@@ -274,16 +244,6 @@ nouveau_pci_resume(struct pci_dev *pdev)
 	struct drm_crtc *crtc;
 	int ret, i;
 
-	if (dev->switch_power_state == DRM_SWITCH_POWER_OFF)
-		return 0;
-
-	NV_INFO(dev, "We're back, enabling device...\n");
-	pci_set_power_state(pdev, PCI_D0);
-	pci_restore_state(pdev);
-	if (pci_enable_device(pdev))
-		return -1;
-	pci_set_master(dev->pdev);
-
 	/* Make sure the AGP controller is in a consistent state */
 	nouveau_agp_reset(dev);
 
@@ -406,15 +366,18 @@ static const struct file_operations nouv
 	.llseek = noop_llseek,
 };
 
+int nouveau_drm_load(struct drm_device *, unsigned long);
+int nouveau_drm_unload(struct drm_device *);
+
 static struct drm_driver driver = {
 	.driver_features =
 		DRIVER_USE_AGP | DRIVER_PCI_DMA | DRIVER_SG |
 		DRIVER_HAVE_IRQ | DRIVER_IRQ_SHARED | DRIVER_GEM |
 		DRIVER_MODESET | DRIVER_PRIME,
-	.load = nouveau_load,
+	.load = nouveau_drm_load,
 	.firstopen = nouveau_firstopen,
 	.lastclose = nouveau_lastclose,
-	.unload = nouveau_unload,
+	.unload = nouveau_drm_unload,
 	.open = nouveau_open,
 	.preclose = nouveau_preclose,
 	.postclose = nouveau_postclose,
@@ -458,16 +421,7 @@ static struct drm_driver driver = {
 	.patchlevel = DRIVER_PATCHLEVEL,
 };
 
-static struct pci_driver nouveau_pci_driver = {
-		.name = DRIVER_NAME,
-		.id_table = pciidlist,
-		.probe = nouveau_pci_probe,
-		.remove = nouveau_pci_remove,
-		.suspend = nouveau_pci_suspend,
-		.resume = nouveau_pci_resume
-};
-
-static int __init nouveau_init(void)
+int __init nouveau_init(struct pci_driver *pdrv)
 {
 	driver.num_ioctls = ARRAY_SIZE(nouveau_ioctls);
 
@@ -484,21 +438,14 @@ static int __init nouveau_init(void)
 		return 0;
 
 	nouveau_register_dsm_handler();
-	return drm_pci_init(&driver, &nouveau_pci_driver);
+	return drm_pci_init(&driver, pdrv);
 }
 
-static void __exit nouveau_exit(void)
+void __exit nouveau_exit(struct pci_driver *pdrv)
 {
 	if (!nouveau_modeset)
 		return;
 
-	drm_pci_exit(&driver, &nouveau_pci_driver);
+	drm_pci_exit(&driver, pdrv);
 	nouveau_unregister_dsm_handler();
 }
-
-module_init(nouveau_init);
-module_exit(nouveau_exit);
-
-MODULE_AUTHOR(DRIVER_AUTHOR);
-MODULE_DESCRIPTION(DRIVER_DESC);
-MODULE_LICENSE("GPL and additional rights");
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_drv.h
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/nouveau_drv.h
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_drv.h
@@ -664,6 +664,8 @@ struct drm_nouveau_private {
 	struct drm_device *dev;
 	bool noaccel;
 
+	void *newpriv;
+
 	/* the card type, takes NV_* as values */
 	enum nouveau_card_type card_type;
 	/* exact chipset, derived from NV_PMC_BOOT_0 */
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_fbcon.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/nouveau_fbcon.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_fbcon.c
@@ -43,7 +43,7 @@
 #include <drm/drm_crtc_helper.h>
 #include <drm/drm_fb_helper.h>
 #include "nouveau_drv.h"
-#include <drm/nouveau_drm.h>
+#include <nouveau_drm.h>
 #include "nouveau_crtc.h"
 #include "nouveau_fb.h"
 #include "nouveau_fbcon.h"
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_gem.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/nouveau_gem.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_gem.c
@@ -27,7 +27,7 @@
 #include <drm/drmP.h>
 
 #include "nouveau_drv.h"
-#include <drm/nouveau_drm.h>
+#include <nouveau_drm.h>
 #include "nouveau_dma.h"
 #include "nouveau_fence.h"
 
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_gpuobj.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/nouveau_gpuobj.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_gpuobj.c
@@ -32,7 +32,7 @@
 
 #include <drm/drmP.h>
 #include "nouveau_drv.h"
-#include <drm/nouveau_drm.h>
+#include <nouveau_drm.h>
 #include <engine/fifo.h>
 #include <core/ramht.h>
 #include "nouveau_software.h"
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_irq.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/nouveau_irq.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_irq.c
@@ -31,7 +31,7 @@
  */
 
 #include <drm/drmP.h>
-#include <drm/nouveau_drm.h>
+#include <nouveau_drm.h>
 #include "nouveau_drv.h"
 #include "nouveau_reg.h"
 #include <core/ramht.h>
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_prime.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/nouveau_prime.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_prime.c
@@ -25,7 +25,7 @@
 #include <drm/drmP.h>
 
 #include "nouveau_drv.h"
-#include <drm/nouveau_drm.h>
+#include <nouveau_drm.h>
 #include "nouveau_dma.h"
 
 #include <linux/dma-buf.h>
Index: linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_state.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/gpu/drm/nouveau/nouveau_state.c
+++ linux-3.0-SLE11-SP3/drivers/gpu/drm/nouveau/nouveau_state.c
@@ -1025,6 +1025,13 @@ static int nouveau_remove_conflicting_dr
 	return 0;
 }
 
+void *
+nouveau_newpriv(struct drm_device *dev)
+{
+	struct drm_nouveau_private *dev_priv = dev->dev_private;
+	return dev_priv->newpriv;
+}
+
 int nouveau_load(struct drm_device *dev, unsigned long flags)
 {
 	struct drm_nouveau_private *dev_priv;
@@ -1037,6 +1044,7 @@ int nouveau_load(struct drm_device *dev,
 		ret = -ENOMEM;
 		goto err_out;
 	}
+	dev_priv->newpriv = dev->dev_private;
 	dev->dev_private = dev_priv;
 	dev_priv->dev = dev;
 
@@ -1212,8 +1220,8 @@ err_ramin:
 err_mmio:
 	iounmap(dev_priv->mmio);
 err_priv:
+	dev->dev_private = dev_priv->newpriv;
 	kfree(dev_priv);
-	dev->dev_private = NULL;
 err_out:
 	return ret;
 }
@@ -1232,8 +1240,8 @@ int nouveau_unload(struct drm_device *de
 	iounmap(dev_priv->mmio);
 	iounmap(dev_priv->ramin);
 
+	dev->dev_private = dev_priv->newpriv;
 	kfree(dev_priv);
-	dev->dev_private = NULL;
 	return 0;
 }
 
