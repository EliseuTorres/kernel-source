From 1ef3a2c6b1be7a6eed47014e8415d0661458467e Mon Sep 17 00:00:00 2001
From: Chris Wilson <chris@chris-wilson.co.uk>
Date: Fri, 29 Oct 2010 21:44:37 +0100
Patch-mainline: 2.6.38
References: fate#310916
Git-commit: 6aa56062eaba67adfb247cded244fd877329588d
Subject: [PATCH 1828/2588] drm/i915/ringbuffer: Use the HEAD auto-reporting
 mechanism

My Sandybridge only reports 0 for the ring buffer registers, causing it
to hang as soon as we exhaust the available ring. As a workaround, take
advantage of our huge ring buffers and use the auto-reporting mechanism
to update the status page with the HEAD location every 64 KiB.

Signed-off-by: Chris Wilson <chris@chris-wilson.co.uk>
(cherry picked from commit 6aa56062eaba67adfb247cded244fd877329588d)

Signed-off-by: Takashi Iwai <tiwai@suse.de>
---
 drivers/gpu/drm/i915/intel_ringbuffer.c |   11 +++++++++++
 1 files changed, 11 insertions(+), 0 deletions(-)

diff --git a/drivers/gpu/drm/i915/intel_ringbuffer.c b/drivers/gpu/drm/i915/intel_ringbuffer.c
index 2e894b6..81bce80 100644
--- a/drivers/gpu/drm/i915/intel_ringbuffer.c
+++ b/drivers/gpu/drm/i915/intel_ringbuffer.c
@@ -697,6 +697,17 @@ int intel_wait_ring_buffer(struct intel_ring_buffer *ring, int n)
 	drm_i915_private_t *dev_priv = dev->dev_private;
 	u32 head;
 	unsigned long end;
+	u32 head;
+
+	head = intel_read_status_page(ring, 4);
+	if (head) {
+		ring->head = head & HEAD_ADDR;
+		ring->space = ring->head - (ring->tail + 8);
+		if (ring->space < 0)
+			ring->space += ring->size;
+		if (ring->space >= n)
+			return 0;
+	}
 
 	trace_i915_ring_wait_begin (dev);
 	end = jiffies + 3 * HZ;
-- 
1.7.6

