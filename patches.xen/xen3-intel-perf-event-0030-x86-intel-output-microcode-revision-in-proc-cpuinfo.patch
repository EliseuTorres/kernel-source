From: Andi Kleen <ak@linux.intel.com>
Subject: x86, intel: Output microcode revision in /proc/cpuinfo
References: bnc#789200, fate#313753, fate#312066, fate#313762
Patch-mainline: v3.2-rc1
Signed-off-by: Youquan Song <youquan.song@intel.com>
Signed-off-by: Tony Jones <tonyj@suse.de>

[tonyj]:  adjust context for stable patch-3.0.40-41 (asm/processor.h)

I got a request to make it easier to determine the microcode
update level on Intel CPUs. This patch adds a new "microcode"
field to /proc/cpuinfo.

The microcode level is also outputed on fatal machine checks
together with the other CPUID model information.

I removed the respective code from the microcode update driver,
it just reads the field from cpu_data. Also when the microcode
is updated it fills in the new values too.

I had to add a memory barrier to native_cpuid to prevent it
being optimized away when the result is not used.

This turns out to clean up further code which already got this
information manually. This is done in followon patches.

Signed-off-by: Andi Kleen <ak@linux.intel.com>
Acked-by: H. Peter Anvin <hpa@zytor.com>
Link: http://lkml.kernel.org/r/1318466795-7393-1-git-send-email-andi@firstfloor.org
Signed-off-by: Ingo Molnar <mingo@elte.hu>

Automatically created from "patches.suse/intel-perf-event-0030-x86-intel-output-microcode-revision-in-proc-cpuinfo.patch" by xen-port-patches.py

--- sle11sp4.orig/arch/x86/include/mach-xen/asm/processor.h	2012-09-04 16:49:21.000000000 +0200
+++ sle11sp4/arch/x86/include/mach-xen/asm/processor.h	2011-11-17 16:53:30.000000000 +0100
@@ -121,6 +121,9 @@ struct cpuinfo_x86 {
 #endif
 	/* Index into per_cpu list: */
 	u16			cpu_index;
+#ifndef CONFIG_XEN
+	u32			microcode;
+#endif
 } __attribute__((__aligned__(SMP_CACHE_BYTES)));
 
 #define X86_VENDOR_INTEL	0
@@ -188,7 +191,8 @@ static inline void xen_cpuid(unsigned in
 	      "=b" (*ebx),
 	      "=c" (*ecx),
 	      "=d" (*edx)
-	    : "0" (*eax), "2" (*ecx));
+	    : "0" (*eax), "2" (*ecx)
+	    : "memory");
 }
 
 static inline void load_cr3(pgd_t *pgdir)
--- sle11sp4.orig/arch/x86/kernel/cpu/intel.c	2012-12-11 14:54:33.000000000 +0100
+++ sle11sp4/arch/x86/kernel/cpu/intel.c	2011-11-17 16:57:31.000000000 +0100
@@ -52,6 +52,7 @@ static void __cpuinit early_init_intel(s
 		(c->x86 == 0x6 && c->x86_model >= 0x0e))
 		set_cpu_cap(c, X86_FEATURE_CONSTANT_TSC);
 
+#ifndef CONFIG_XEN
 	if (c->x86 >= 6 && !cpu_has(c, X86_FEATURE_IA64)) {
 		unsigned lower_word;
 
@@ -69,9 +70,6 @@ static void __cpuinit early_init_intel(s
 	 * need the microcode to have already been loaded... so if it is
 	 * not, recommend a BIOS update and disable large pages.
 	 */
-#ifdef CONFIG_XEN
-	if (cpu_has(c, X86_FEATURE_PSE))
-#endif
 	if (c->x86 == 6 && c->x86_model == 0x1c && c->x86_mask <= 2) {
 		u32 ucode, junk;
 
@@ -84,6 +82,7 @@ static void __cpuinit early_init_intel(s
 			clear_cpu_cap(c, X86_FEATURE_PSE);
 		}
 	}
+#endif
 
 #ifdef CONFIG_X86_64
 	set_cpu_cap(c, X86_FEATURE_SYSENTER32);
--- sle11sp4.orig/arch/x86/kernel/cpu/mcheck/mce.c	2013-02-05 16:19:54.000000000 +0100
+++ sle11sp4/arch/x86/kernel/cpu/mcheck/mce.c	2013-02-05 16:49:55.000000000 +0100
@@ -252,9 +252,14 @@ static void print_mce(struct mce *m)
 	 * Note this output is parsed by external tools and old fields
 	 * should not be changed.
 	 */
+#ifndef CONFIG_XEN
 	pr_emerg(HW_ERR "PROCESSOR %u:%x TIME %llu SOCKET %u APIC %x microcode %u\n",
 		m->cpuvendor, m->cpuid, m->time, m->socketid, m->apicid,
 		cpu_data(m->extcpu).microcode);
+#else
+	pr_emerg(HW_ERR "PROCESSOR %u:%x TIME %llu SOCKET %u APIC %x\n",
+		m->cpuvendor, m->cpuid, m->time, m->socketid, m->apicid);
+#endif
 
 	/*
 	 * Print out human-readable details about the MCE error,
--- sle11sp4.orig/arch/x86/kernel/cpu/proc.c	2011-03-03 16:38:42.000000000 +0100
+++ sle11sp4/arch/x86/kernel/cpu/proc.c	2012-02-08 13:08:10.000000000 +0100
@@ -87,8 +87,10 @@ static int show_cpuinfo(struct seq_file 
 		seq_printf(m, "stepping\t: %d\n", c->x86_mask);
 	else
 		seq_printf(m, "stepping\t: unknown\n");
+#ifndef CONFIG_XEN
 	if (c->microcode)
 		seq_printf(m, "microcode\t: %u\n", c->microcode);
+#endif
 
 	if (cpu_has(c, X86_FEATURE_TSC)) {
 		unsigned int freq = cpufreq_quick_get(cpu);
