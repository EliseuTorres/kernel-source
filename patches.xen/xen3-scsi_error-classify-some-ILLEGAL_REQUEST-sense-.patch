From: Mike Snitzer <snitzer@redhat.com>
Date: Mon, 13 Feb 2012 18:35:11 -0500
Subject: [PATCH] [SCSI] scsi_error: classify some ILLEGAL_REQUEST sense as a permanent TARGET_ERROR
References: FATE#313629
Patch-Mainline: v3.4

Permanent target failures are non-retryable and should be classified as
TARGET_ERROR; otherwise dm-multipath will retry an IO request that will
always fail at the target.

A SCSI command that fails with ILLEGAL_REQUEST sense and Additional
sense 0x20, 0x21, 0x24 or 0x26 represents a permanent TARGET_ERROR.

Signed-off-by: Mike Snitzer <snitzer@redhat.com>
Signed-off-by: James Bottomley <JBottomley@Parallels.com>
Acked-by: Hannes Reinecke <hare@suse.de>

Automatically created from "patches.fixes/scsi_error-classify-some-ILLEGAL_REQUEST-sense-.patch" by xen-port-patches.py

(If the "same return value for successive invocations" statement below is
 correct, this ought to be merged into the 2.6.39 merge patch.)

--- sle11sp3.orig/drivers/scsi/scsi_error.c	2012-12-04 11:46:56.000000000 +0100
+++ sle11sp3/drivers/scsi/scsi_error.c	2012-12-06 10:08:39.000000000 +0100
@@ -1622,6 +1622,31 @@ int scsi_decide_disposition(struct scsi_
 		}
 	case DID_RESET:
 		return SUCCESS;
+#ifdef CONFIG_XEN /* Shouldn't this be done always?
+		   *
+		   * Overall, shouldn't the return value of this function be
+		   * the same when called twice in immediate succession?
+		   */
+	case DID_TARGET_FAILURE:
+		/*
+		 * scsi_check_sense(scmd) returning TARGET_ERROR gets
+		 * converted to DID_TARGET_FAILURE below, so if that
+		 * happened on the backend side, the frontend side
+		 * handling here would otherwise cause error handling to be
+		 * invoked from scsi_softirq_done().
+		 */
+		if (msg_byte(scmd->result) == COMMAND_COMPLETE &&
+		    status_byte(scmd->result) == CHECK_CONDITION &&
+		    scsi_check_sense(scmd) == TARGET_ERROR)
+			return SUCCESS;
+		return FAILED;
+	case DID_NEXUS_FAILURE:
+		/* Similarly for the respective conversion above/below. */
+		if (msg_byte(scmd->result) == COMMAND_COMPLETE &&
+		    status_byte(scmd->result) == RESERVATION_CONFLICT)
+			break;
+		/* fallthrough */
+#endif
 	default:
 		return FAILED;
 	}
