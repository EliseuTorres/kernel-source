From: http://xenbits.xen.org/hg/linux-2.6.18-xen.hg/rev/821a5b2a10c8
# HG changeset patch
# User Ian Campbell <ian.campbell@citrix.com>
# Date 1325755282 -3600
# Node ID 821a5b2a10c86f18fbce0907af0db6905b9d540a
# Parent  bf19dd41c5c9bf6a30d8405a9e1f3b17884b1e4e
Subject: xenbus: Reject replies with payload > XENSTORE_PAYLOAD_MAX
Patch-mainline: n/a

This also avoids a potential integer overflow pointed out by Haogang
Chen.

Also use this in struct xenbus_dev_data even though it happens to be
== PAGE_SIZE.

The code which takes requests from userspace already validates against
the size of this buffer so no further checks are required to ensure
that userspace requests comply with the protocol in this respect.

Signed-off-by: Ian Campbell <ian.campbell@citrix.com>
Cc: Haogang Chen <haogangchen@gmail.com>

Acked-by: jbeulich@suse.com

--- sle11sp2-2012-01-11.orig/drivers/xen/xenbus/xenbus_dev.c	2012-01-11 12:00:49.000000000 +0100
+++ sle11sp2-2012-01-11/drivers/xen/xenbus/xenbus_dev.c	2012-01-11 12:01:47.000000000 +0100
@@ -78,7 +78,7 @@ struct xenbus_dev_data {
 	unsigned int len;
 	union {
 		struct xsd_sockmsg msg;
-		char buffer[PAGE_SIZE];
+		char buffer[XENSTORE_PAYLOAD_MAX];
 	} u;
 
 	/* Response queue. */
--- sle11sp2-2012-01-11.orig/drivers/xen/xenbus/xenbus_xs.c	2011-10-06 11:34:39.000000000 +0200
+++ sle11sp2-2012-01-11/drivers/xen/xenbus/xenbus_xs.c	2012-01-11 12:01:47.000000000 +0100
@@ -847,6 +847,12 @@ static int process_msg(void)
 		goto out;
 	}
 
+	if (msg->hdr.len > XENSTORE_PAYLOAD_MAX) {
+		kfree(msg);
+		err = -EINVAL;
+		goto out;
+	}
+
 	body = kmalloc(msg->hdr.len + 1, GFP_NOIO | __GFP_HIGH);
 	if (body == NULL) {
 		kfree(msg);
