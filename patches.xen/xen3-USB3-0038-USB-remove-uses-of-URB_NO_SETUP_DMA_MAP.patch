From: Alan Stern <stern@rowland.harvard.edu>
Date: Fri, 5 Mar 2010 15:10:17 -0500
Subject: USB: remove uses of URB_NO_SETUP_DMA_MAP
Patch-mainline: v2.6.35

This patch (as1350) removes all usages of coherent buffers for USB
control-request setup-packet buffers.  There's no good reason to
reserve coherent memory for these things; control requests are hardly
ever used in large quantity (the major exception is firmware
transfers, and they aren't time-critical).  Furthermore, only seven
drivers used it.  We might as well always use streaming DMA mappings
for setup-packet buffers, and remove some extra complexity from
usbcore.

The DMA-mapping portion of hcd.c is currently in flux.  A separate
patch will be submitted to remove support for URB_NO_SETUP_DMA_MAP
after everything else settles down.  The removal should go smoothly,
as by then nobody will be using it.

Signed-off-by: Alan Stern <stern@rowland.harvard.edu>
Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>

Automatically created from "patches.drivers/USB3-0038-USB-remove-uses-of-URB_NO_SETUP_DMA_MAP.patch" by xen-port-patches.py

--- sle11sp2-2011-07-01.orig/drivers/xen/usbback/usbback.c	2011-05-04 15:07:01.000000000 +0200
+++ sle11sp2-2011-07-01/drivers/xen/usbback/usbback.c	2011-04-11 15:05:47.000000000 +0200
@@ -75,7 +75,6 @@ typedef struct {
 	void *buffer;
 	dma_addr_t transfer_dma;
 	struct usb_ctrlrequest *setup;
-	dma_addr_t setup_dma;
 
 	/* request segments */
 	uint16_t nr_buffer_segs; /* number of urb->transfer_buffer segments */
@@ -241,7 +240,7 @@ static int usbbk_alloc_urb(usbif_urb_req
 	}
 
 	if (req->buffer_length) {
-		pending_req->buffer = usb_buffer_alloc(pending_req->stub->udev,
+		pending_req->buffer = usb_alloc_coherent(pending_req->stub->udev,
 				req->buffer_length, GFP_KERNEL,
 				&pending_req->transfer_dma);
 		if (!pending_req->buffer) {
@@ -252,9 +251,8 @@ static int usbbk_alloc_urb(usbif_urb_req
 	}
 
 	if (usb_pipecontrol(req->pipe)) {
-		pending_req->setup = usb_buffer_alloc(pending_req->stub->udev,
-				sizeof(struct usb_ctrlrequest), GFP_KERNEL,
-				&pending_req->setup_dma);
+		pending_req->setup = kmalloc(sizeof(struct usb_ctrlrequest),
+					     GFP_KERNEL);
 		if (!pending_req->setup) {
 			pr_err("usbback: can't alloc usb_ctrlrequest\n");
 			ret = -ENOMEM;
@@ -266,8 +264,10 @@ static int usbbk_alloc_urb(usbif_urb_req
 
 fail_free_buffer:
 	if (req->buffer_length)
-		usb_buffer_free(pending_req->stub->udev, req->buffer_length,
-				pending_req->buffer, pending_req->transfer_dma);
+		usb_free_coherent(pending_req->stub->udev,
+				  req->buffer_length,
+				  pending_req->buffer,
+				  pending_req->transfer_dma);
 fail_free_urb:
 	usb_free_urb(pending_req->urb);
 fail:
@@ -286,11 +286,10 @@ static void usbbk_free_urb(struct urb *u
 static void _usbbk_free_urb(struct urb *urb)
 {
 	if (usb_pipecontrol(urb->pipe))
-		usb_buffer_free(urb->dev, sizeof(struct usb_ctrlrequest),
-				urb->setup_packet, urb->setup_dma);
+		kfree(urb->setup_packet);
 	if (urb->transfer_buffer_length)
-		usb_buffer_free(urb->dev, urb->transfer_buffer_length,
-				urb->transfer_buffer, urb->transfer_dma);
+		usb_free_coherent(urb->dev, urb->transfer_buffer_length,
+				  urb->transfer_buffer, urb->transfer_dma);
 	barrier();
 	usb_free_urb(urb);
 }
@@ -536,9 +535,7 @@ static void usbbk_init_urb(usbif_urb_req
 				pending_req->buffer, req->buffer_length,
 				usbbk_urb_complete, pending_req);
 		memcpy(pending_req->setup, req->u.ctrl, 8);
-		urb->setup_dma = pending_req->setup_dma;
 		urb->transfer_flags = req->transfer_flags;
-		urb->transfer_flags |= URB_NO_SETUP_DMA_MAP;
 
 		break;
 	case PIPE_BULK:
