From afe698c02d4321f461f12553ff02aae0a73dfccc Mon Sep 17 00:00:00 2001
From: "Lee, Chun-Yi" <jlee@suse.com>
Date: Tue, 7 Jul 2015 12:17:23 +0800
Subject: [PATCH v2 09/16] PM / hibernate: Reserve hibernation key and erase
 footprints
Patch-mainline: Never, SUSE-Xen specific
References: fate#316350

Add handler to parse the setup data that carrying hibernation key, it
reserves hibernation key by memblock then copies key to a allocated page
in later initcall stage.

And for erasing footprints, the codes in this patch remove setup
data that carried hibernation key, and clean the memory space that
reserved by memblock.

Joey Lee:
 - Replaced early_memunmap() with early_iounmap() for v3.12 kernel.

Reviewed-by: Jiri Kosina <jkosina@suse.com>
Tested-by: Jiri Kosina <jkosina@suse.com>
Signed-off-by: Lee, Chun-Yi <jlee@suse.com>
Automatically created from "patches.suse/0009-PM-hibernate-Reserve-hibernation-key-and-erase-footp.patch" by xen-port-patches.py

--- a/arch/x86/kernel/setup-xen.c
+++ b/arch/x86/kernel/setup-xen.c
@@ -110,7 +110,9 @@
 #include <asm/alternative.h>
 #include <asm/prom.h>
 
-#ifdef CONFIG_XEN
+#ifndef CONFIG_XEN
+#include <asm/suspend.h>
+#else
 #include <asm/hypervisor.h>
 #include <xen/interface/kexec.h>
 #include <xen/interface/memory.h>
@@ -488,11 +490,25 @@ static void __init reserve_initrd(void)
 }
 #endif /* CONFIG_BLK_DEV_INITRD */
 
+#ifndef CONFIG_XEN
+static void __init remove_setup_data(u64 pa_prev, u64 pa_next)
+{
+	struct setup_data *data;
+
+	if (pa_prev) {
+		data = early_memremap(pa_prev, sizeof(*data));
+		data->next = pa_next;
+		early_iounmap(data, sizeof(*data));
+	} else
+		boot_params.hdr.setup_data = pa_next;
+}
+#endif
+
 static void __init parse_setup_data(void)
 {
 #ifndef CONFIG_XEN
 	struct setup_data *data;
-	u64 pa_data, pa_next;
+	u64 pa_data, pa_next, pa_prev = 0;
 
 	pa_data = boot_params.hdr.setup_data;
 	while (pa_data) {
@@ -516,9 +532,14 @@ static void __init parse_setup_data(void
 		case SETUP_EFI:
 			parse_efi_setup(pa_data, data_len);
 			break;
+		case SETUP_HIBERNATION_KEYS:
+			parse_hibernation_keys(pa_data, data_len);
+			remove_setup_data(pa_prev, pa_next);
+			break;
 		default:
 			break;
 		}
+		pa_prev = pa_data;
 		pa_data = pa_next;
 	}
 #endif
