From: Paul Mundt <lethal@linux-sh.org>
Date: Mon, 5 Oct 2009 19:23:06 +0900
Subject: x86/hw-breakpoints: Actually flush thread breakpoints in
 flush_thread().
Patch-mainline: v2.6.33-rc1

flush_thread() tries to do a TIF_DEBUG check before calling in to
flush_thread_hw_breakpoint() (which subsequently clears the thread flag),
but for some reason, the x86 code is manually clearing TIF_DEBUG
immediately before the test, so this path will never be taken.

This kills off the erroneous clear_tsk_thread_flag() and lets
flush_thread_hw_breakpoint() actually get invoked.

Presumably folks were getting lucky with testing and the
free_thread_info() -> free_thread_xstate() path was taking care of the
flush there.

Signed-off-by: Paul Mundt <lethal@linux-sh.org>
Acked-by: "K.Prasad" <prasad@linux.vnet.ibm.com>
Cc: Ingo Molnar <mingo@elte.hu>
Cc: Alan Stern <stern@rowland.harvard.edu>
LKML-Reference: <20091005102306.GA7889@linux-sh.org>
Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
Acked-by: Jeff Mahoney <jeffm@suse.com>
Automatically created from "patches.suse/x86-hw-breakpoints-actually-flush-thread-breakpoints-in-flush_thread" by xen-port-patches.py

--- sle11sp2-2011-07-15.orig/arch/x86/kernel/process-xen.c	2011-07-15 14:12:24.000000000 +0200
+++ sle11sp2-2011-07-15/arch/x86/kernel/process-xen.c	2011-07-15 14:12:29.000000000 +0200
@@ -95,8 +95,6 @@ void flush_thread(void)
 {
 	struct task_struct *tsk = current;
 
-	clear_tsk_thread_flag(tsk, TIF_DEBUG);
-
 	if (unlikely(test_tsk_thread_flag(tsk, TIF_DEBUG)))
 		flush_thread_hw_breakpoint(tsk);
 	memset(tsk->thread.tls_array, 0, sizeof(tsk->thread.tls_array));
