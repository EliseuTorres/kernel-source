From: Steven Rostedt <srostedt@redhat.com>
Date: Tue, 13 Oct 2009 16:33:50 -0400
Subject: function-graph/x86: Replace unbalanced ret with jmp
Patch-mainline: v2.6.33-rc1

The function graph tracer replaces the return address with a hook
to trace the exit of the function call. This hook will finish by
returning to the real location the function should return to.

But the current implementation uses a ret to jump to the real
return location. This causes a imbalance between calls and ret.
That is the original function does a call, the ret goes to the
handler and then the handler does a ret without a matching call.

Although the function graph tracer itself still breaks the branch
predictor by replacing the original ret, by using a second ret and
causing an imbalance, it breaks the predictor even more.

This patch replaces the ret with a jmp to keep the calls and ret
balanced. I tested this on one box and it showed a 1.7% increase in
performance. Another box only showed a small 0.3% increase. But no
box that I tested this on showed a decrease in performance by
making this change.

Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
Acked-by: Mathieu Desnoyers <mathieu.desnoyers@polymtl.ca>
Cc: Frederic Weisbecker <fweisbec@gmail.com>
LKML-Reference: <20091013203425.042034383@goodmis.org>
Signed-off-by: Ingo Molnar <mingo@elte.hu>
Acked-by: Jeff Mahoney <jeffm@suse.com>
Automatically created from "patches.suse/function-graph-x86-replace-unbalanced-ret-with-jmp" by xen-port-patches.py

--- sle11sp2-2011-08-08.orig/arch/x86/kernel/entry_32-xen.S	2011-07-15 14:20:55.000000000 +0200
+++ sle11sp2-2011-08-08/arch/x86/kernel/entry_32-xen.S	2011-08-08 14:14:56.000000000 +0200
@@ -1377,17 +1377,14 @@ END(ftrace_graph_caller)
 
 .globl return_to_handler
 return_to_handler:
-	pushl $0
 	pushl %eax
-	pushl %ecx
 	pushl %edx
 	movl %ebp, %eax
 	call ftrace_return_to_handler
-	movl %eax, 0xc(%esp)
+	movl %eax, %ecx
 	popl %edx
-	popl %ecx
 	popl %eax
-	ret
+	jmp *%ecx
 #endif
 
 #include <asm/alternative-asm.h>
--- sle11sp2-2011-08-08.orig/arch/x86/kernel/entry_64-xen.S	2011-05-05 16:10:27.000000000 +0200
+++ sle11sp2-2011-08-08/arch/x86/kernel/entry_64-xen.S	2011-08-08 14:14:52.000000000 +0200
@@ -161,11 +161,11 @@ GLOBAL(return_to_handler)
 
 	call ftrace_return_to_handler
 
-	movq %rax, 16(%rsp)
+	movq %rax, %rdi
 	movq 8(%rsp), %rdx
 	movq (%rsp), %rax
-	addq $16, %rsp
-	retq
+	addq $24, %rsp
+	jmp *%rdi
 #endif
 
 
