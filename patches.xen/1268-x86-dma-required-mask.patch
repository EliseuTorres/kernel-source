From http://xenbits.xen.org/hg/linux-2.6.18-xen.hg/rev/78e400792c76
From: xen-devel@lists.xenproject.org
Patch-mainline: n/a
Subject: x86: use custom dma_get_required_mask()

On a Xen PV guest the DMA addresses and physical addresses are not 1:1
(such as Xen PV guests) and the generic dma_get_required_mask() does
not return the correct mask (since it uses max_pfn).

Some device drivers (such as mptsas, mpt2sas) use
dma_get_required_mask() to set the device's DMA mask to allow them to
use only 32-bit DMA addresses in hardware structures.  This results in
unnecessary use of the SWIOTLB if DMA addresses are more than 32-bits,
impacting performance significantly.

Provide a get_required_mask op that uses the maximum MFN to calculate
the DMA mask.

Signed-off-by: David Vrabel <david.vrabel@citrix.com>
Signed-off-by: Jan Beulich <jbeulich@suse.com>

--- sle12.orig/arch/x86/kernel/pci-dma-xen.c	2014-12-08 12:48:46.000000000 +0100
+++ sle12/arch/x86/kernel/pci-dma-xen.c	2014-12-08 13:06:30.000000000 +0100
@@ -22,6 +22,8 @@
 #include <asm-i386/mach-xen/asm/gnttab_dma.h>
 #include <asm/bug.h>
 
+#include <xen/interface/memory.h>
+
 #ifdef __x86_64__
 #include <asm/proto.h>
 
@@ -208,6 +210,16 @@ dma_supported(struct device *dev, u64 ma
 }
 EXPORT_SYMBOL(dma_supported);
 
+u64 dma_get_required_mask(struct device *dev)
+{
+	unsigned long max_mfn = HYPERVISOR_memory_op(XENMEM_maximum_ram_page,
+						     NULL);
+
+	return (((u64)1 << (__fls(max_mfn - 1) + 1 + PAGE_SHIFT)) - 1)
+	       & *dev->dma_mask;
+}
+EXPORT_SYMBOL_GPL(dma_get_required_mask);
+
 void *dma_alloc_coherent(struct device *dev, size_t size,
 			   dma_addr_t *dma_handle, gfp_t gfp)
 {
--- sle12.orig/arch/x86/include/mach-xen/asm/hypercall_64.h	2014-12-08 12:48:46.000000000 +0100
+++ sle12/arch/x86/include/mach-xen/asm/hypercall_64.h	2014-12-08 13:06:30.000000000 +0100
@@ -248,11 +248,11 @@ HYPERVISOR_update_descriptor(
 	return _hypercall2(int, update_descriptor, ma, word);
 }
 
-static inline int __must_check
+static inline long __must_check
 HYPERVISOR_memory_op(
 	unsigned int cmd, void *arg)
 {
-	return _hypercall2(int, memory_op, cmd, arg);
+	return _hypercall2(long, memory_op, cmd, arg);
 }
 
 static inline int __must_check
