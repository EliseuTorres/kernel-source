From: "H. Peter Anvin" <hpa@zytor.com>
Date: Sun, 4 May 2014 10:36:22 -0700
Subject: x86, espfix: Make it possible to disable 16-bit support
Patch-mainline: v3.16-rc1
References: bsc#907818,CVE-2014-9090

Embedded systems, which may be very memory-size-sensitive, are
extremely unlikely to ever encounter any 16-bit software, so make it
a CONFIG_EXPERT option to turn off support for any 16-bit software
whatsoever.

Signed-off-by: H. Peter Anvin <hpa@zytor.com>
Link: http://lkml.kernel.org/r/1398816946-3351-1-git-send-email-hpa@linux.intel.com

Acked-by: Borislav Petkov <bp@suse.de>
Automatically created from "patches.fixes/x86-espfix-make-it-possible-to-disable-16-bit-support.patch" by xen-port-patches.py

--- sle11sp4.orig/arch/x86/kernel/entry_32-xen.S	2014-07-29 11:21:59.000000000 +0200
+++ sle11sp4/arch/x86/kernel/entry_32-xen.S	2014-07-29 11:21:59.000000000 +0200
@@ -555,7 +555,7 @@ syscall_exit:
 restore_all:
 	TRACE_IRQS_IRET
 restore_all_notrace:
-#ifndef CONFIG_XEN
+#ifdef CONFIG_X86_ESPFIX32
 	movl PT_EFLAGS(%esp), %eax	# mix EFLAGS, SS and CS
 	# Warning: PT_OLDSS(%esp) contains the wrong/random values if we
 	# are returning to the kernel.
@@ -566,9 +566,9 @@ restore_all_notrace:
 	cmpl $((SEGMENT_LDT << 8) | USER_RPL), %eax
 	CFI_REMEMBER_STATE
 	je ldt_ss			# returning to user-space with LDT SS
+#endif
 restore_nocheck:
-#else
-restore_nocheck:
+#ifdef CONFIG_XEN
 	movl PT_EFLAGS(%esp), %eax
 	testl $(X86_EFLAGS_VM|NMI_MASK), %eax
 	CFI_REMEMBER_STATE
@@ -595,7 +595,7 @@ ENTRY(iret_exc)
 .previous
 
 	CFI_RESTORE_STATE
-#ifndef CONFIG_XEN
+#ifdef CONFIG_X86_ESPFIX32
 ldt_ss:
 	larl PT_OLDSS(%esp), %eax
 	jnz restore_nocheck
@@ -643,7 +643,8 @@ ldt_ss:
 	lss (%esp), %esp		/* switch to espfix segment */
 	CFI_ADJUST_CFA_OFFSET -8
 	jmp restore_nocheck
-#else
+#endif
+#ifdef CONFIG_XEN
         ALIGN
 restore_all_enable_events:
 	TRACE_IRQS_ON
@@ -840,6 +841,7 @@ ENDPROC(ptregs_clone)
  * the high word of the segment base from the GDT and swiches to the
  * normal stack and adjusts ESP with the matching offset.
  */
+#ifdef CONFIG_X86_ESPFIX32
 	/* fixup the stack */
 	mov GDT_ESPFIX_SS + 4, %al /* bits 16..23 */
 	mov GDT_ESPFIX_SS + 7, %ah /* bits 24..31 */
@@ -849,8 +851,10 @@ ENDPROC(ptregs_clone)
 	pushl_cfi %eax
 	lss (%esp), %esp		/* switch to the normal stack segment */
 	CFI_ADJUST_CFA_OFFSET -8
+#endif
 .endm
 .macro UNWIND_ESPFIX_STACK
+#ifdef CONFIG_X86_ESPFIX32
 	movl %ss, %eax
 	/* see if on espfix stack */
 	cmpw $__ESPFIX_SS, %ax
@@ -861,6 +865,7 @@ ENDPROC(ptregs_clone)
 	/* switch to normal stack */
 	FIXUP_ESPFIX_STACK
 27:
+#endif
 .endm
 
 /*
@@ -1630,12 +1635,14 @@ END(debug)
  */
 ENTRY(nmi)
 	RING0_INT_FRAME
+#ifdef CONFIG_X86_ESPFIX32
 	pushl_cfi %eax
-#ifndef CONFIG_XEN
 	movl %ss, %eax
 	cmpw $__ESPFIX_SS, %ax
 	popl_cfi %eax
 	je nmi_espfix_stack
+#endif
+#ifndef CONFIG_XEN
 	cmpl $ia32_sysenter_target,(%esp)
 	je nmi_stack_fixup
 	pushl_cfi %eax
@@ -1675,6 +1682,7 @@ nmi_debug_stack_check:
 	FIX_STACK 24, nmi_stack_correct, 1
 	jmp nmi_stack_correct
 
+#ifdef CONFIG_X86_ESPFIX32
 nmi_espfix_stack:
 	/* We have a RING0_INT_FRAME here.
 	 *
@@ -1696,7 +1704,9 @@ nmi_espfix_stack:
 	lss 12+4(%esp), %esp		# back to espfix stack
 	CFI_ADJUST_CFA_OFFSET -24
 	jmp irq_return
-#else
+#endif
+#else /* CONFIG_XEN */
+ 	pushl_cfi %eax
 	SAVE_ALL
 	xorl %edx,%edx		# zero error code
 	movl %esp,%eax		# pt_regs pointer
--- sle11sp4.orig/arch/x86/kernel/entry_64-xen.S	2015-01-09 14:36:11.000000000 +0100
+++ sle11sp4/arch/x86/kernel/entry_64-xen.S	2014-08-06 12:39:46.000000000 +0200
@@ -832,6 +832,7 @@ END(retint_check)
 	 * modify the stack to make it look like we just entered
 	 * the #GP handler from user space, similar to bad_iret.
 	 */
+#ifdef CONFIG_X86_ESPFIX64
 	ALIGN
 __do_double_fault:
 	XCPT_FRAME 1 RDI+8
@@ -852,6 +853,9 @@ __do_double_fault:
 	retq
 	CFI_ENDPROC
 END(__do_double_fault)
+#else
+# define __do_double_fault do_double_fault
+#endif
 
 /*
  * Exception entry points.
--- sle11sp4.orig/arch/x86/kernel/ldt-xen.c	2011-02-01 15:03:03.000000000 +0100
+++ sle11sp4/arch/x86/kernel/ldt-xen.c	2014-06-27 10:54:54.000000000 +0200
@@ -235,6 +235,13 @@ static int write_ldt(void __user *ptr, u
 		}
 	}
 
+#ifndef CONFIG_X86_16BIT
+	if (!ldt_info.seg_32bit) {
+		error = -EINVAL;
+		goto out_unlock;
+	}
+#endif
+
 	fill_ldt(&ldt, &ldt_info);
 	if (oldmode)
 		ldt.avl = 0;
