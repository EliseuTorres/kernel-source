Subject: x86: report ACPI-reserved state of PCI MMCONFIG region to hypervisor
From: jbeulich@novell.com
Patch-mainline: n/a

To be merged into xen3-patch-2.6.27.

--- head-2011-06-30.orig/include/xen/interface/physdev.h	2011-03-17 13:50:24.000000000 +0100
+++ head-2011-06-30/include/xen/interface/physdev.h	2011-07-05 17:23:43.000000000 +0200
@@ -251,6 +251,19 @@ struct physdev_get_free_pirq {
 typedef struct physdev_get_free_pirq physdev_get_free_pirq_t;
 DEFINE_XEN_GUEST_HANDLE(physdev_get_free_pirq_t);
 
+#define XEN_PCI_MMCFG_RESERVED         0x1
+
+#define PHYSDEVOP_pci_mmcfg_reserved    24
+struct physdev_pci_mmcfg_reserved {
+    uint64_t address;
+    uint16_t segment;
+    uint8_t start_bus;
+    uint8_t end_bus;
+    uint32_t flags;
+};
+typedef struct physdev_pci_mmcfg_reserved physdev_pci_mmcfg_reserved_t;
+DEFINE_XEN_GUEST_HANDLE(physdev_pci_mmcfg_reserved_t);
+
 /*
  * Notify that some PIRQ-bound event channels have been unmasked.
  * ** This command is obsolete since interface version 0x00030202 and is **
--- head-2011-06-30.orig/arch/x86/pci/mmconfig-shared.c	2011-06-30 15:04:12.000000000 +0200
+++ head-2011-06-30/arch/x86/pci/mmconfig-shared.c	2011-07-06 12:20:45.000000000 +0200
@@ -21,6 +21,10 @@
 #include <asm/pci_x86.h>
 #include <asm/acpi.h>
 
+#ifdef CONFIG_XEN
+#include <xen/interface/physdev.h>
+#endif
+
 #define PREFIX "PCI: "
 
 /* Indicate if the mmcfg resources have been placed into the resource table. */
@@ -471,6 +475,31 @@ static int __init is_mmconf_reserved(che
 		}
 	}
 
+#ifdef CONFIG_XEN
+	if (!with_e820)	{
+		struct physdev_pci_mmcfg_reserved r = {
+			.address = cfg->address,
+			.segment = cfg->segment,
+			.start_bus = cfg->start_bus,
+			.end_bus = cfg->end_bus,
+			.flags = valid ? XEN_PCI_MMCFG_RESERVED : 0
+		};
+		int rc;
+
+		rc = HYPERVISOR_physdev_op(PHYSDEVOP_pci_mmcfg_reserved, &r);
+		switch (rc) {
+		case 0: case -ENOSYS:
+			break;
+		default:
+			pr_warn(PREFIX "Failed to report MMCONFIG reservation"
+				" state for %04x [bus%02x-%02x] to hypervisor"
+				" (%d)\n",
+				cfg->segment, cfg->start_bus, cfg->end_bus,
+				rc);
+		}
+	}
+#endif
+
 	return valid;
 }
 
