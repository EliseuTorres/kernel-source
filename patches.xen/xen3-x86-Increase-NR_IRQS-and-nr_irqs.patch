From: Yinghai Lu <yinghai@kernel.org>
Date: Mon, 28 Dec 2009 21:08:29 -0800
Subject: x86: Increase NR_IRQS and nr_irqs
Git-commit: 9959c888a38b0f25b0e81a480f537d6489348442
References: bnc#605686 fate#311591
Patch-mainline: v2.6.34-rc1

I have a system with lots of igb and ixgbe, when iov/vf are
enabled for them, we hit the limit of 3064.

when system has 20 pcie installed, and one card has 2
functions, and one function needs 64 msi-x,
 may need 20 * 2 * 64 = 2560 for msi-x

but if iov and vf are enabled
 may need 20 * 2 * 64 * 3 = 7680 for msi-x
assume system with 5 ioapic, nr_irqs_gsi will be 120.

NR_CPUS = 512, and nr_cpu_ids = 128
will have NR_IRQS = 256 + 512 * 64 = 33024
will have nr_irqs = 120 + 8 * 128 + 120 * 64 = 8824

When SPARSE_IRQ is not set, there is no increase with kernel data
size.

when NR_CPUS=128, and SPARSE_IRQ is set:
   text		   data	    bss		   dec		 hex	filename
21837444	4216564	12480736	38534744	24bfe58	vmlinux.before
21837442	4216580	12480736	38534758	24bfe66	vmlinux.after
when NR_CPUS=4096, and SPARSE_IRQ is set
   text		   data	    bss		   dec		 hex	filename
21878619	5610244	13415392	40904255	270263f	vmlinux.before
21878617	5610244	13415392	40904253	270263d	vmlinux.after

Signed-off-by: Yinghai Lu <yinghai@kernel.org>
Cc: Linus Torvalds <torvalds@linux-foundation.org>
Cc: Andrew Morton <akpm@linux-foundation.org>
LKML-Reference: <4B398ECD.1080506@kernel.org>
Signed-off-by: Ingo Molnar <mingo@elte.hu>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
Automatically created from "patches.arch/x86-Increase-NR_IRQS-and-nr_irqs.patch" by xen-port-patches.py

 arch/x86/include/mach-xen/asm/irq_vectors.h |    7 ++++++-
 arch/x86/kernel/apic/io_apic-xen.c          |    2 +-
 drivers/xen/core/evtchn.c                   |    4 ++--
 3 files changed, 9 insertions(+), 4 deletions(-)

--- sle11sp2-2011-05-04.orig/arch/x86/include/mach-xen/asm/irq_vectors.h	2011-02-15 17:33:45.000000000 +0100
+++ sle11sp2-2011-05-04/arch/x86/include/mach-xen/asm/irq_vectors.h	2011-05-05 16:04:58.000000000 +0200
@@ -58,9 +58,14 @@ static inline int invalid_vm86_irq(int i
  */
 #define PIRQ_BASE			0
 
-#define CPU_VECTOR_LIMIT		(  8 * NR_CPUS      )
 #define IO_APIC_VECTOR_LIMIT		( 32 * MAX_IO_APICS )
 
+#ifdef CONFIG_SPARSE_IRQ
+# define CPU_VECTOR_LIMIT		(64 * NR_CPUS)
+#else
+# define CPU_VECTOR_LIMIT		(32 * NR_CPUS)
+#endif
+
 #if defined(CONFIG_X86_IO_APIC)
 # ifdef CONFIG_SPARSE_IRQ
 #  define NR_PIRQS			(NR_VECTORS + IO_APIC_VECTOR_LIMIT)
--- sle11sp2-2011-05-04.orig/arch/x86/kernel/apic/io_apic-xen.c	2011-05-05 15:54:20.000000000 +0200
+++ sle11sp2-2011-05-04/arch/x86/kernel/apic/io_apic-xen.c	2011-05-05 16:00:03.000000000 +0200
@@ -3976,7 +3976,7 @@ int __init arch_probe_nr_irqs(void)
 	/*
 	 * for MSI and HT dyn irq
 	 */
-	nr += nr_irqs_gsi * 16;
+	nr += nr_irqs_gsi * 64;
 #endif
 	if (nr < nr_irqs)
 		nr_irqs = nr;
--- sle11sp2-2011-05-04.orig/drivers/xen/core/evtchn.c	2011-05-05 15:35:16.000000000 +0200
+++ sle11sp2-2011-05-04/drivers/xen/core/evtchn.c	2011-05-05 16:06:32.000000000 +0200
@@ -1205,12 +1205,12 @@ int __init arch_probe_nr_irqs(void)
 		if (nr_irqs_gsi < NR_IRQS_LEGACY)
 			nr_irqs_gsi = NR_IRQS_LEGACY;
 #ifdef CONFIG_PCI_MSI
-		nr += max(nr_irqs_gsi * 16, nr_cpu_ids * 8);
+		nr += max(nr_irqs_gsi * 16, nr_cpu_ids * 64);
 #endif
 	} else {
 		nr_irqs_gsi = NR_VECTORS;
 #ifdef CONFIG_PCI_MSI
-		nr += max(NR_IRQS_LEGACY * 16, nr_cpu_ids * 8);
+		nr += max(NR_IRQS_LEGACY * 16, nr_cpu_ids * 64);
 #endif
 	}
 
