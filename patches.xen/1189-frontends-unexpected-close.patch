From http://xenbits.xen.org/hg/linux-2.6.18-xen.hg/rev/e09f03f312e5
From: xen-devel@lists.xen.org
Patch-mainline: n/a
Subject: frontends: handle backend CLOSED without CLOSING

Backend drivers shouldn't transistion to CLOSED unless the frontend is
CLOSED.  If a backend does transition to CLOSED too soon then the
frontend may not see the CLOSING state and will not properly shutdown.

So, treat an unexpected backend CLOSED state the same as CLOSING.

Signed-off-by: David Vrabel <david.vrabel@citrix.com>
Acked-by: Konrad Rzeszutek Wilk <konrad.wilk@oracle.com>

Extended to scsifront and usbfront.

Signed-off-by: Jan Beulich <jbeulich@suse.com>
Committed-by: Jan Beulich <jbeulich@suse.com>

# HG changeset patch
# User Jan Beulich <jbeulich@suse.com>
# Date 1348651657 -7200
# Node ID 2491acc045e4b5a228dd133da9bb7cf443560a1d
# Parent  50245ed8527a266e614a233102b0994fc86f0151
blkfront: adjustment for c/s 1189:e09f03f312e5

Didn't handle the frontend block device being mounted.

Based on an upstream patch from David.

Reported-by: David Vrabel <david.vrabel@citrix.com>
Signed-off-by: Jan Beulich <jbeulich@suse.com>

--- sle11sp2.orig/drivers/xen/blkfront/blkfront.c	2012-04-05 09:04:18.000000000 +0200
+++ sle11sp2/drivers/xen/blkfront/blkfront.c	2012-10-02 14:26:16.000000000 +0200
@@ -278,13 +278,16 @@ static void backend_changed(struct xenbu
 	case XenbusStateReconfiguring:
 	case XenbusStateReconfigured:
 	case XenbusStateUnknown:
-	case XenbusStateClosed:
 		break;
 
 	case XenbusStateConnected:
 		connect(info);
 		break;
 
+	case XenbusStateClosed:
+		if (dev->state == XenbusStateClosed)
+			break;
+		/* Missed the backend's Closing state -- fallthrough */
 	case XenbusStateClosing:
 		bd = bdget(info->dev);
 		if (bd == NULL) {
@@ -521,9 +524,16 @@ int blkif_release(struct inode *inode, s
 		if (!dev) {
 			blkfront_closing(info);
 			kfree(info);
-		} else if (xenbus_read_driver_state(dev->otherend)
-			   == XenbusStateClosing && info->is_ready)
-			blkfront_closing(info);
+		} else
+			switch (xenbus_read_driver_state(dev->otherend)) {
+			case XenbusStateClosing:
+			case XenbusStateClosed:
+				if (info->is_ready)
+					blkfront_closing(info);
+				break;
+			default:
+				break;
+			}
 	}
 	return 0;
 }
--- sle11sp2.orig/drivers/xen/fbfront/xenfb.c	2012-10-02 14:24:49.000000000 +0200
+++ sle11sp2/drivers/xen/fbfront/xenfb.c	2012-10-02 14:26:16.000000000 +0200
@@ -806,7 +806,6 @@ static void xenfb_backend_changed(struct
 	case XenbusStateReconfiguring:
 	case XenbusStateReconfigured:
 	case XenbusStateUnknown:
-	case XenbusStateClosed:
 		break;
 
 	case XenbusStateInitWait:
@@ -844,6 +843,10 @@ static void xenfb_backend_changed(struct
 		}
 		break;
 
+	case XenbusStateClosed:
+		if (dev->state == XenbusStateClosed)
+			break;
+		/* Missed the backend's CLOSING state -- fallthrough */
 	case XenbusStateClosing:
 		// FIXME is this safe in any dev->state?
 		xenbus_frontend_closed(dev);
--- sle11sp2.orig/drivers/xen/fbfront/xenkbd.c	2012-10-02 14:24:49.000000000 +0200
+++ sle11sp2/drivers/xen/fbfront/xenkbd.c	2012-10-02 14:26:16.000000000 +0200
@@ -285,7 +285,6 @@ static void xenkbd_backend_changed(struc
 	case XenbusStateReconfiguring:
 	case XenbusStateReconfigured:
 	case XenbusStateUnknown:
-	case XenbusStateClosed:
 		break;
 
 	case XenbusStateInitWait:
@@ -323,6 +322,10 @@ static void xenkbd_backend_changed(struc
 
 		break;
 
+	case XenbusStateClosed:
+		if (dev->state == XenbusStateClosed)
+			break;
+		/* Missed the backend's CLOSING state -- fallthrough */
 	case XenbusStateClosing:
 		xenbus_frontend_closed(dev);
 		break;
--- sle11sp2.orig/drivers/xen/netfront/netfront.c	2012-01-03 00:00:00.000000000 +0100
+++ sle11sp2/drivers/xen/netfront/netfront.c	2012-10-02 14:26:16.000000000 +0200
@@ -544,7 +544,6 @@ static void backend_changed(struct xenbu
 	case XenbusStateReconfiguring:
 	case XenbusStateReconfigured:
 	case XenbusStateUnknown:
-	case XenbusStateClosed:
 		break;
 
 	case XenbusStateInitWait:
@@ -559,6 +558,10 @@ static void backend_changed(struct xenbu
 		send_fake_arp(netdev);
 		break;
 
+	case XenbusStateClosed:
+		if (dev->state == XenbusStateClosed)
+			break;
+		/* Missed the backend's CLOSING state -- fallthrough */
 	case XenbusStateClosing:
 		xenbus_frontend_closed(dev);
 		break;
--- sle11sp2.orig/drivers/xen/pcifront/xenbus.c	2012-10-02 14:24:49.000000000 +0200
+++ sle11sp2/drivers/xen/pcifront/xenbus.c	2012-10-02 14:26:16.000000000 +0200
@@ -405,13 +405,16 @@ static void __init_refok pcifront_backen
 	case XenbusStateInitialising:
 	case XenbusStateInitWait:
 	case XenbusStateInitialised:
-	case XenbusStateClosed:
 		break;
 
 	case XenbusStateConnected:
 		pcifront_try_connect(pdev);
 		break;
 
+	case XenbusStateClosed:
+		if (xdev->state == XenbusStateClosed)
+			break;
+		/* Missed the backend's CLOSING state -- fallthrough */
 	case XenbusStateClosing:
 		dev_warn(&xdev->dev, "backend going away!\n");
 		pcifront_try_disconnect(pdev);
--- sle11sp2.orig/drivers/xen/scsifront/xenbus.c	2012-10-02 14:24:49.000000000 +0200
+++ sle11sp2/drivers/xen/scsifront/xenbus.c	2012-10-02 14:26:16.000000000 +0200
@@ -363,9 +363,6 @@ static void scsifront_backend_changed(st
 	case XenbusStateUnknown:
 	case XenbusStateInitialising:
 	case XenbusStateInitWait:
-	case XenbusStateClosed:
-		break;
-
 	case XenbusStateInitialised:
 		break;
 
@@ -381,6 +378,10 @@ static void scsifront_backend_changed(st
 		xenbus_switch_state(dev, XenbusStateConnected);
 		break;
 
+	case XenbusStateClosed:
+		if (dev->state == XenbusStateClosed)
+			break;
+		/* Missed the backend's Closing state -- fallthrough */
 	case XenbusStateClosing:
 		scsifront_disconnect(info);
 		break;
--- sle11sp2.orig/drivers/xen/usbfront/xenbus.c	2012-10-02 14:24:49.000000000 +0200
+++ sle11sp2/drivers/xen/usbfront/xenbus.c	2012-10-02 14:26:16.000000000 +0200
@@ -341,7 +341,6 @@ static void backend_changed(struct xenbu
 	case XenbusStateReconfiguring:
 	case XenbusStateReconfigured:
 	case XenbusStateUnknown:
-	case XenbusStateClosed:
 		break;
 
 	case XenbusStateInitWait:
@@ -351,6 +350,10 @@ static void backend_changed(struct xenbu
 			xenbus_switch_state(dev, XenbusStateConnected);
 		break;
 
+	case XenbusStateClosed:
+		if (dev->state == XenbusStateClosed)
+			break;
+		/* Missed the backend's Closing state -- fallthrough */
 	case XenbusStateClosing:
 		usbfront_disconnect(dev);
 		break;
