From: Dave Hansen <dave@linux.vnet.ibm.com>
Date: Tue, 22 Jan 2013 13:24:31 -0800
Patch-mainline: v3.9-rc1
Subject: x86, mm: Pagetable level size/shift/mask helpers
Git-commit: 4cbeb51b860c57ba8b2ae50c4016ee7a41f5fbd5
References: fate#317533

I plan to use lookup_address() to walk the kernel pagetables
in a later patch.  It returns a "pte" and the level in the
pagetables where the "pte" was found.  The level is just an
enum and needs to be converted to a useful value in order to
do address calculations with it.  These helpers will be used
in at least two places.

This also gives the anonymous enum a real name so that no one
gets confused about what they should be passing in to these
helpers.

"PTE_SHIFT" was chosen for naming consistency with the other
pagetable levels (PGD/PUD/PMD_SHIFT).

Cc: H. Peter Anvin <hpa@zytor.com>
Signed-off-by: Dave Hansen <dave@linux.vnet.ibm.com>
Link: http://lkml.kernel.org/r/20130122212431.405D3A8C@kernel.stglabs.ibm.com
Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
Acked-by: <ohering@suse.de>
Automatically created from "patches.suse/x86-mm-Pagetable-level-size-shift-mask-helpers.patch" by xen-port-patches.py

--- sle11sp4.orig/arch/x86/include/mach-xen/asm/pgtable.h	2013-02-19 15:28:38.000000000 +0100
+++ sle11sp4/arch/x86/include/mach-xen/asm/pgtable.h	2014-12-10 15:56:15.000000000 +0100
@@ -393,6 +393,7 @@ pte_t *populate_extra_pte(unsigned long 
 
 #ifndef __ASSEMBLY__
 #include <linux/mm_types.h>
+#include <linux/log2.h>
 
 static inline int pte_none(pte_t pte)
 {
@@ -812,6 +813,20 @@ static inline void clone_pgd_range(pgd_t
        memcpy(dst, src, count * sizeof(pgd_t));
 }
 
+#define PTE_SHIFT ilog2(PTRS_PER_PTE)
+static inline int page_level_shift(enum pg_level level)
+{
+	return (PAGE_SHIFT - PTE_SHIFT) + level * PTE_SHIFT;
+}
+static inline unsigned long page_level_size(enum pg_level level)
+{
+	return 1UL << page_level_shift(level);
+}
+static inline unsigned long page_level_mask(enum pg_level level)
+{
+	return ~(page_level_size(level) - 1);
+}
+
 #define arbitrary_virt_to_mfn(va)					\
 ({									\
 	unsigned int __lvl;						\
--- sle11sp4.orig/arch/x86/include/mach-xen/asm/pgtable_types.h	2011-05-23 11:27:06.000000000 +0200
+++ sle11sp4/arch/x86/include/mach-xen/asm/pgtable_types.h	2014-12-10 15:56:15.000000000 +0100
@@ -363,7 +363,7 @@ extern void xen_pagetable_reserve(u64 st
 struct seq_file;
 extern void arch_report_meminfo(struct seq_file *m);
 
-enum {
+enum pg_level {
 	PG_LEVEL_NONE,
 	PG_LEVEL_4K,
 	PG_LEVEL_2M,
