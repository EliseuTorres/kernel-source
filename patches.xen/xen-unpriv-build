From: jbeulich@novell.com
Subject: no need to build certain bits when building non-privileged kernel
Patch-mainline: n/a

--- head-2009-10-15.orig/arch/x86/Kconfig	2009-10-15 12:08:38.000000000 +0200
+++ head-2009-10-15/arch/x86/Kconfig	2009-10-20 14:25:40.000000000 +0200
@@ -639,6 +639,7 @@ config HPET_EMULATE_RTC
 config DMI
 	default y
 	bool "Enable DMI scanning" if EMBEDDED
+	depends on !XEN_UNPRIVILEGED_GUEST
 	---help---
 	  Enabled scanning of DMI to identify machine quirks. Say Y
 	  here unless you have verified that your setup is not
@@ -2169,7 +2170,9 @@ source "net/Kconfig"
 
 source "drivers/Kconfig"
 
+if !XEN_UNPRIVILEGED_GUEST
 source "drivers/firmware/Kconfig"
+endif
 
 source "fs/Kconfig"
 
--- head-2009-10-15.orig/drivers/firmware/Kconfig	2009-10-20 10:40:18.000000000 +0200
+++ head-2009-10-15/drivers/firmware/Kconfig	2009-10-20 14:26:02.000000000 +0200
@@ -114,7 +114,7 @@ config DMIID
 
 config ISCSI_IBFT_FIND
 	bool "iSCSI Boot Firmware Table Attributes"
-	depends on X86 && !XEN_UNPRIVILEGED_GUEST
+	depends on X86
 	default n
 	help
 	  This option enables the kernel to find the region of memory
--- head-2009-10-15.orig/drivers/xen/core/Makefile	2009-10-06 15:42:27.000000000 +0200
+++ head-2009-10-15/drivers/xen/core/Makefile	2009-10-06 15:46:51.000000000 +0200
@@ -2,9 +2,10 @@
 # Makefile for the linux kernel.
 #
 
-obj-y := evtchn.o gnttab.o reboot.o machine_reboot.o firmware.o domctl.o
+obj-y := evtchn.o gnttab.o reboot.o machine_reboot.o domctl.o
 
-obj-$(CONFIG_PCI)		+= pci.o
+priv-$(CONFIG_PCI)		+= pci.o
+obj-$(CONFIG_XEN_PRIVILEGED_GUEST) += firmware.o $(priv-y)
 obj-$(CONFIG_PROC_FS)		+= xen_proc.o
 obj-$(CONFIG_SYS_HYPERVISOR)	+= hypervisor_sysfs.o
 obj-$(CONFIG_HOTPLUG_CPU)	+= cpu_hotplug.o
--- head-2009-10-15.orig/drivers/xen/privcmd/Makefile	2007-07-10 09:42:30.000000000 +0200
+++ head-2009-10-15/drivers/xen/privcmd/Makefile	2009-10-06 15:54:01.000000000 +0200
@@ -1,3 +1,2 @@
-
-obj-y	+= privcmd.o
-obj-$(CONFIG_COMPAT)	+= compat_privcmd.o
+priv-$(CONFIG_COMPAT) := compat_privcmd.o
+obj-y := privcmd.o $(priv-y)
--- head-2009-10-15.orig/drivers/xen/privcmd/privcmd.c	2009-10-15 12:00:21.000000000 +0200
+++ head-2009-10-15/drivers/xen/privcmd/privcmd.c	2009-10-06 16:01:44.000000000 +0200
@@ -33,6 +33,9 @@
 static struct proc_dir_entry *privcmd_intf;
 static struct proc_dir_entry *capabilities_intf;
 
+#ifndef CONFIG_XEN_PRIVILEGED_GUEST
+#define HAVE_ARCH_PRIVCMD_MMAP
+#endif
 #ifndef HAVE_ARCH_PRIVCMD_MMAP
 static int privcmd_enforce_singleshot_mapping(struct vm_area_struct *vma);
 #endif
@@ -65,6 +68,8 @@ static long privcmd_ioctl(struct file *f
 	}
 	break;
 
+#ifdef CONFIG_XEN_PRIVILEGED_GUEST
+
 	case IOCTL_PRIVCMD_MMAP: {
 #define MMAP_NR_PER_PAGE (int)((PAGE_SIZE-sizeof(struct list_head))/sizeof(privcmd_mmap_entry_t))
 		privcmd_mmap_t mmapcmd;
@@ -252,6 +257,8 @@ static long privcmd_ioctl(struct file *f
 	}
 	break;
 
+#endif /* CONFIG_XEN_PRIVILEGED_GUEST */
+
 	default:
 		ret = -EINVAL;
 		break;
@@ -292,7 +299,9 @@ static int privcmd_enforce_singleshot_ma
 
 static const struct file_operations privcmd_file_ops = {
 	.unlocked_ioctl = privcmd_ioctl,
+#ifdef CONFIG_XEN_PRIVILEGED_GUEST
 	.mmap = privcmd_mmap,
+#endif
 };
 
 static int capabilities_read(char *page, char **start, off_t off,
--- head-2009-10-15.orig/include/xen/firmware.h	2007-07-02 08:16:19.000000000 +0200
+++ head-2009-10-15/include/xen/firmware.h	2009-10-06 16:21:51.000000000 +0200
@@ -5,6 +5,10 @@
 void copy_edd(void);
 #endif
 
+#ifdef CONFIG_XEN_PRIVILEGED_GUEST
 void copy_edid(void);
+#else
+static inline void copy_edid(void) {}
+#endif
 
 #endif /* __XEN_FIRMWARE_H__ */
