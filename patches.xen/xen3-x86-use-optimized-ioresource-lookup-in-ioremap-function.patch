From 461d340b4698b15787748aedb9048a9982aa6332 Mon Sep 17 00:00:00 2001
From: Mike Travis <travis@sgi.com>
Date: Mon, 13 Oct 2014 15:54:05 -0700
Subject: [PATCH] x86: use optimized ioresource lookup in ioremap function

References: Boot time optimisations (bnc#895387)
Patch-mainline: v3.18

Use the optimized ioresource lookup, "region_is_ram", for the ioremap
function.  If the region is not found, it falls back to the
"page_is_ram" function.  If it is found and it is RAM, then the usual
warning message is issued, and the ioremap operation is aborted.
Otherwise, the ioremap operation continues.

Signed-off-by: Mike Travis <travis@sgi.com>
Acked-by: Alex Thorlton <athorlton@sgi.com>
Reviewed-by: Cliff Wickman <cpw@sgi.com>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: H. Peter Anvin <hpa@zytor.com>
Cc: Mark Salter <msalter@redhat.com>
Cc: Dave Young <dyoung@redhat.com>
Cc: Rik van Riel <riel@redhat.com>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Mel Gorman <mgorman@suse.de>
Cc: Ingo Molnar <mingo@elte.hu>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Mel Gorman <mgorman@suse.de>
Automatically created from "patches.suse/x86-use-optimized-ioresource-lookup-in-ioremap-function.patch" by xen-port-patches.py

--- sle11sp3.orig/arch/x86/mm/ioremap-xen.c	2011-08-22 11:31:41.000000000 +0200
+++ sle11sp3/arch/x86/mm/ioremap-xen.c	2014-10-31 13:48:09.000000000 +0100
@@ -235,6 +235,7 @@ static void __iomem *__ioremap_caller(re
 	int retval;
 	domid_t domid = DOMID_IO;
 	void __iomem *ret_addr;
+	int ram_region;
 
 	/* Don't allow wraparound or zero size */
 	last_addr = phys_addr + size - 1;
@@ -257,14 +258,27 @@ static void __iomem *__ioremap_caller(re
 	/*
 	 * Don't allow anybody to remap normal RAM that we're using..
 	 */
-	last_mfn = PFN_DOWN(last_addr);
-	for (mfn = PFN_DOWN(phys_addr); mfn <= last_mfn; mfn++) {
-		unsigned long pfn = mfn_to_local_pfn(mfn);
-
-		if (pfn_valid(pfn)) {
-			if (!PageReserved(pfn_to_page(pfn)))
-				return NULL;
-			domid = DOMID_SELF;
+	/* First check if whole region can be identified as RAM or not */
+	ram_region = is_initial_xendomain() ? region_is_ram(phys_addr, size)
+					    : -1;
+	if (ram_region > 0) {
+		WARN_ONCE(1, "ioremap on RAM at %#Lx - %#Lx\n",
+			  (unsigned long long)phys_addr,
+			  (unsigned long long)last_addr);
+		return NULL;
+	}
+
+	/* If could not be identified(-1), check page by page */
+	if (ram_region < 0) {
+		last_mfn = PFN_DOWN(last_addr);
+		for (mfn = PFN_DOWN(phys_addr); mfn <= last_mfn; mfn++) {
+			unsigned long pfn = mfn_to_local_pfn(mfn);
+
+			if (pfn_valid(pfn)) {
+				if (!PageReserved(pfn_to_page(pfn)))
+					return NULL;
+				domid = DOMID_SELF;
+			}
 		}
 	}
 	WARN_ON_ONCE(domid == DOMID_SELF);
