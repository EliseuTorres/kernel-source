From: jbeulich@novell.com
Subject: Properly handle long timeouts when passed to VCPUOP_set_singleshot_timer
Patch-mainline: n/a

Other than for HYPERVISOR_set_timer_op, zero here doesn't mean
"no timeout".

Also properly cancel the singleshot timer is start_hz_timer().

--- sle11sp1-2010-02-09.orig/arch/x86/kernel/time-xen.c	2010-02-11 16:27:27.000000000 +0100
+++ sle11sp1-2010-02-09/arch/x86/kernel/time-xen.c	2010-02-11 16:47:57.000000000 +0100
@@ -795,7 +795,10 @@ static void stop_hz_timer(void)
 		j = jiffies + 1;
 	}
 
-	singleshot.timeout_abs_ns = jiffies_to_st(j) + NS_PER_TICK/2;
+	singleshot.timeout_abs_ns = jiffies_to_st(j);
+	if (!singleshot.timeout_abs_ns)
+		return;
+	singleshot.timeout_abs_ns += NS_PER_TICK / 2;
 	singleshot.flags = 0;
 	rc = HYPERVISOR_vcpu_op(VCPUOP_set_singleshot_timer, cpu, &singleshot);
 #if CONFIG_XEN_COMPAT <= 0x030004
@@ -809,7 +812,17 @@ static void stop_hz_timer(void)
 
 static void start_hz_timer(void)
 {
-	cpumask_clear_cpu(smp_processor_id(), nohz_cpu_mask);
+	unsigned int cpu = smp_processor_id();
+	int rc = HYPERVISOR_vcpu_op(VCPUOP_stop_singleshot_timer, cpu, NULL);
+
+#if CONFIG_XEN_COMPAT <= 0x030004
+	if (rc) {
+		BUG_ON(rc != -ENOSYS);
+		rc = HYPERVISOR_set_timer_op(0);
+	}
+#endif
+	BUG_ON(rc);
+	cpumask_clear_cpu(cpu, nohz_cpu_mask);
 }
 
 void xen_safe_halt(void)
