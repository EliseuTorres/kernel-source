From: Yong Wang <yong.y.wang@linux.intel.com>
Date: Tue, 10 Nov 2009 09:38:24 +0800
Subject: x86: Under BIOS control, restore AP's APIC_LVTTHMR to the BSP value
Patch-mainline: v2.6.33-rc1

On platforms where the BIOS handles the thermal monitor interrupt,
APIC_LVTTHMR on each logical CPU is programmed to generate a SMI
and OS must not touch it.

Unfortunately AP bringup sequence using INIT-SIPI-SIPI clears all
the LVT entries except the mask bit. Essentially this results in
all LVT entries including the thermal monitoring interrupt set
to masked (clearing the bios programmed value for APIC_LVTTHMR).

And this leads to kernel take over the thermal monitoring
interrupt on AP's but not on BSP (leaving the bios programmed
value only on BSP).

As a result of this, we have seen system hangs when the thermal
monitoring interrupt is generated.

Fix this by reading the initial value of thermal LVT entry on
BSP and if bios has taken over the control, then program the
same value on all AP's and leave the thermal monitoring
interrupt control on all the logical cpu's to the bios.

Signed-off-by: Yong Wang <yong.y.wang@intel.com>
Reviewed-by: Suresh Siddha <suresh.b.siddha@intel.com>
Cc: Borislav Petkov <borislav.petkov@amd.com>
Cc: Arjan van de Ven <arjan@infradead.org>
LKML-Reference: <20091110013824.GA24940@ywang-moblin2.bj.intel.com>
Signed-off-by: Ingo Molnar <mingo@elte.hu>
Cc: stable@kernel.org
Acked-by: Jeff Mahoney <jeffm@suse.com>
Automatically created from "patches.suse/x86-under-bios-control-restore-ap-s-apic_lvtthmr-to-the-bsp-value" by xen-port-patches.py

--- sle11sp2-2011-07-15.orig/arch/x86/kernel/cpu/common-xen.c	2011-07-15 14:14:28.000000000 +0200
+++ sle11sp2-2011-07-15/arch/x86/kernel/cpu/common-xen.c	2011-07-15 14:16:03.000000000 +0200
@@ -915,10 +915,8 @@ static void __cpuinit identify_cpu(struc
 			boot_cpu_data.x86_capability[i] &= c->x86_capability[i];
 	}
 
-#ifdef CONFIG_X86_MCE
 	/* Init Machine Check Exception if available. */
 	mcheck_cpu_init(c);
-#endif
 
 	select_idle_routine(c);
 
--- sle11sp2-2011-07-15.orig/arch/x86/kernel/setup-xen.c	2011-07-15 14:15:25.000000000 +0200
+++ sle11sp2-2011-07-15/arch/x86/kernel/setup-xen.c	2011-07-15 14:15:59.000000000 +0200
@@ -109,6 +109,7 @@
 #ifdef CONFIG_X86_64
 #include <asm/numa_64.h>
 #endif
+#include <asm/mce.h>
 
 #ifdef CONFIG_XEN
 #include <asm/hypervisor.h>
@@ -1301,6 +1302,8 @@ void __init setup_arch(char **cmdline_p)
 #endif
 #endif
 	x86_init.oem.banner();
+
+	mcheck_init();
 }
 
 #ifdef CONFIG_X86_32
