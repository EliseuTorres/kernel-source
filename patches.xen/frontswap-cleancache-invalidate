From: Dan Magenheimer <dan.magenheimer@oracle.com>
Subject: [PATCH V10 6/6] mm: frontswap/cleancache: final flush->invalidate
Patch-mainline: slated for 3.2

This sixth patch of six in this frontswap series completes the renaming
from "flush" to "invalidate" across both tmem frontends (cleancache and
frontswap) and both tmem backends (Xen and zcache), as required by akpm.
This change is completely cosmetic.

[v10: no change]
[v9: akpm@linux-foundation.org: change "flush" to "invalidate", part 3]

Signed-off-by: Dan Magenheimer <dan.magenheimer@oracle.com>
Reviewed-by: Konrad Wilk <konrad.wilk@oracle.com>
Cc: Kamezawa Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
Cc: Jan Beulich <JBeulich@novell.com>
Cc: Seth Jennings <sjenning@linux.vnet.ibm.com>
Cc: Jeremy Fitzhardinge <jeremy@goop.org>
Cc: Hugh Dickins <hughd@google.com>
Cc: Johannes Weiner <hannes@cmpxchg.org>
Cc: Nitin Gupta <ngupta@vflare.org>
Cc: Matthew Wilcox <matthew@wil.cx>
Cc: Chris Mason <chris.mason@oracle.com>
Cc: Rik Riel <riel@redhat.com>
Cc: Andrew Morton <akpm@linux-foundation.org>

Acked-by: jbeulich@suse.com

--- sle11sp2-2011-11-14.orig/drivers/staging/zcache/zcache.c	2011-07-22 04:17:23.000000000 +0200
+++ sle11sp2-2011-11-14/drivers/staging/zcache/zcache.c	2011-11-14 12:28:59.000000000 +0100
@@ -1435,9 +1435,9 @@ static int zcache_cleancache_init_shared
 static struct cleancache_ops zcache_cleancache_ops = {
 	.put_page = zcache_cleancache_put_page,
 	.get_page = zcache_cleancache_get_page,
-	.flush_page = zcache_cleancache_flush_page,
-	.flush_inode = zcache_cleancache_flush_inode,
-	.flush_fs = zcache_cleancache_flush_fs,
+	.invalidate_page = zcache_cleancache_flush_page,
+	.invalidate_inode = zcache_cleancache_flush_inode,
+	.invalidate_fs = zcache_cleancache_flush_fs,
 	.init_shared_fs = zcache_cleancache_init_shared_fs,
 	.init_fs = zcache_cleancache_init_fs
 };
@@ -1541,8 +1541,8 @@ static void zcache_frontswap_init(unsign
 static struct frontswap_ops zcache_frontswap_ops = {
 	.put_page = zcache_frontswap_put_page,
 	.get_page = zcache_frontswap_get_page,
-	.flush_page = zcache_frontswap_flush_page,
-	.flush_area = zcache_frontswap_flush_area,
+	.invalidate_page = zcache_frontswap_flush_page,
+	.invalidate_area = zcache_frontswap_flush_area,
 	.init = zcache_frontswap_init
 };
 
--- sle11sp2-2011-11-14.orig/drivers/xen/tmem.c	2011-11-14 12:02:45.000000000 +0100
+++ sle11sp2-2011-11-14/drivers/xen/tmem.c	2011-11-14 12:28:52.000000000 +0100
@@ -234,9 +234,9 @@ __setup("nocleancache", no_cleancache);
 static struct cleancache_ops tmem_cleancache_ops = {
 	.put_page = tmem_cleancache_put_page,
 	.get_page = tmem_cleancache_get_page,
-	.flush_page = tmem_cleancache_flush_page,
-	.flush_inode = tmem_cleancache_flush_inode,
-	.flush_fs = tmem_cleancache_flush_fs,
+	.invalidate_page = tmem_cleancache_flush_page,
+	.invalidate_inode = tmem_cleancache_flush_inode,
+	.invalidate_fs = tmem_cleancache_flush_fs,
 	.init_shared_fs = tmem_cleancache_init_shared_fs,
 	.init_fs = tmem_cleancache_init_fs
 };
--- sle11sp2-2011-11-14.orig/include/linux/cleancache.h	2011-09-15 19:40:54.000000000 +0200
+++ sle11sp2-2011-11-14/include/linux/cleancache.h	2011-09-15 20:14:12.000000000 +0200
@@ -28,14 +28,9 @@ struct cleancache_ops {
 			pgoff_t, struct page *);
 	void (*put_page)(int, struct cleancache_filekey,
 			pgoff_t, struct page *);
-	/*
-	 * NOTE: per akpm, flush_page, flush_inode and flush_fs will be
-	 * renamed to invalidate_* in a later commit in which all
-	 * dependencies (i.e Xen, zcache) will be renamed simultaneously
-	 */
-	void (*flush_page)(int, struct cleancache_filekey, pgoff_t);
-	void (*flush_inode)(int, struct cleancache_filekey);
-	void (*flush_fs)(int);
+	void (*invalidate_page)(int, struct cleancache_filekey, pgoff_t);
+	void (*invalidate_inode)(int, struct cleancache_filekey);
+	void (*invalidate_fs)(int);
 };
 
 extern struct cleancache_ops
--- sle11sp2-2011-11-14.orig/include/linux/frontswap.h	2011-09-15 19:40:54.000000000 +0200
+++ sle11sp2-2011-11-14/include/linux/frontswap.h	2011-09-15 20:14:12.000000000 +0200
@@ -9,13 +9,8 @@ struct frontswap_ops {
 	void (*init)(unsigned);
 	int (*put_page)(unsigned, pgoff_t, struct page *);
 	int (*get_page)(unsigned, pgoff_t, struct page *);
-	/*
-	 * NOTE: per akpm, flush_page and flush_area will be renamed to
-	 * invalidate_page and invalidate_area in a later commit in which
-	 * all dependencies (i.e. Xen, zcache) will be renamed simultaneously
-	 */
-	void (*flush_page)(unsigned, pgoff_t);
-	void (*flush_area)(unsigned);
+	void (*invalidate_page)(unsigned, pgoff_t);
+	void (*invalidate_area)(unsigned);
 };
 
 extern int frontswap_enabled;
--- sle11sp2-2011-11-14.orig/mm/cleancache.c	2011-09-15 22:53:41.000000000 +0200
+++ sle11sp2-2011-11-14/mm/cleancache.c	2011-09-15 20:14:12.000000000 +0200
@@ -166,7 +166,8 @@ void __cleancache_invalidate_page(struct
 	if (pool_id >= 0) {
 		VM_BUG_ON(!PageLocked(page));
 		if (cleancache_get_key(mapping->host, &key) >= 0) {
-			(*cleancache_ops.flush_page)(pool_id, key, page->index);
+			(*cleancache_ops.invalidate_page)(pool_id,
+							  key, page->index);
 			cleancache_invalidates++;
 		}
 	}
@@ -184,7 +185,7 @@ void __cleancache_invalidate_inode(struc
 	struct cleancache_filekey key = { .u.key = { 0 } };
 
 	if (pool_id >= 0 && cleancache_get_key(mapping->host, &key) >= 0)
-		(*cleancache_ops.flush_inode)(pool_id, key);
+		(*cleancache_ops.invalidate_inode)(pool_id, key);
 }
 EXPORT_SYMBOL(__cleancache_invalidate_inode);
 
@@ -198,7 +199,7 @@ void __cleancache_invalidate_fs(struct s
 	if (sb->cleancache_poolid >= 0) {
 		int old_poolid = sb->cleancache_poolid;
 		sb->cleancache_poolid = -1;
-		(*cleancache_ops.flush_fs)(old_poolid);
+		(*cleancache_ops.invalidate_fs)(old_poolid);
 	}
 }
 EXPORT_SYMBOL(__cleancache_invalidate_fs);
--- sle11sp2-2011-11-14.orig/mm/frontswap.c	2011-09-15 22:50:27.000000000 +0200
+++ sle11sp2-2011-11-14/mm/frontswap.c	2011-09-15 20:14:12.000000000 +0200
@@ -147,7 +147,7 @@ void __frontswap_invalidate_page(unsigne
 
 	BUG_ON(sis == NULL);
 	if (frontswap_test(sis, offset)) {
-		(*frontswap_ops.flush_page)(type, offset);
+		(*frontswap_ops.invalidate_page)(type, offset);
 		atomic_dec(&sis->frontswap_pages);
 		frontswap_clear(sis, offset);
 		frontswap_invalidates++;
@@ -166,7 +166,7 @@ void __frontswap_invalidate_area(unsigne
 	BUG_ON(sis == NULL);
 	if (sis->frontswap_map == NULL)
 		return;
-	(*frontswap_ops.flush_area)(type);
+	(*frontswap_ops.invalidate_area)(type);
 	atomic_set(&sis->frontswap_pages, 0);
 	memset(sis->frontswap_map, 0, sis->max / sizeof(long));
 }
