From: jbeulich@suse.com
Subject: use vCPU time info registration to support vread_pvclock()
Patch-mainline: n/a

Could be merged into the 3.8 merge patch, but conflicts heavily with
the later xen-clockevents changes.

--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -374,6 +374,7 @@ config X86_64_XEN
 	bool "Enable Xen compatible kernel"
 	depends on X86_64
 	select XEN
+	select PARAVIRT_CLOCK
 	select ARCH_USE_CMPXCHG_LOCKREF if XEN_SPINLOCK_ACQUIRE_NESTING = ""
 #	select ARCH_USE_CMPXCHG_LOCKREF if (XEN_SPINLOCK_ACQUIRE_NESTING + 1) * NR_CPUS < 256
 	help
@@ -711,11 +712,11 @@ config PARAVIRT_TIME_ACCOUNTING
 
 	  If in doubt, say N here.
 
+endif #HYPERVISOR_GUEST
+
 config PARAVIRT_CLOCK
 	bool
 
-endif #HYPERVISOR_GUEST
-
 config NO_BOOTMEM
 	def_bool y
 
--- a/arch/x86/include/asm/pvclock.h
+++ b/arch/x86/include/asm/pvclock.h
@@ -83,7 +83,11 @@ unsigned __pvclock_read_cycles(const str
 	rdtsc_barrier();
 	offset = pvclock_get_nsec_offset(src);
 	ret = src->system_time + offset;
+#ifndef CONFIG_XEN
 	ret_flags = src->flags;
+#else
+	ret_flags = PVCLOCK_TSC_STABLE_BIT;
+#endif
 	rdtsc_barrier();
 
 	*cycles = ret;
--- /dev/null
+++ b/arch/x86/include/mach-xen/asm/pvclock-abi.h
@@ -0,0 +1,12 @@
+#ifndef _ASM_X86_PVCLOCK_ABI_H
+#define _ASM_X86_PVCLOCK_ABI_H
+#ifndef __ASSEMBLY__
+
+#include <xen/interface/xen.h>
+
+#define pvclock_vcpu_time_info vcpu_time_info
+struct pvclock_wall_clock; /* not used */
+
+#define PVCLOCK_TSC_STABLE_BIT	(1 << 0)
+#endif /* __ASSEMBLY__ */
+#endif /* _ASM_X86_PVCLOCK_ABI_H */
--- a/arch/x86/kernel/pvclock.c
+++ b/arch/x86/kernel/pvclock.c
@@ -24,6 +24,7 @@
 #include <asm/fixmap.h>
 #include <asm/pvclock.h>
 
+#ifndef CONFIG_XEN
 static u8 valid_flags __read_mostly = 0;
 
 void pvclock_set_flags(u8 flags)
@@ -127,6 +128,7 @@ void pvclock_read_wallclock(struct pvclo
 
 	set_normalized_timespec(ts, now.tv_sec, now.tv_nsec);
 }
+#endif /* !CONFIG_XEN */
 
 #ifdef CONFIG_X86_64
 /*
--- a/arch/x86/kernel/time-xen.c
+++ b/arch/x86/kernel/time-xen.c
@@ -31,6 +31,10 @@
 #include <xen/interface/vcpu.h>
 
 #ifdef CONFIG_X86_64
+#include <asm/pvclock.h>
+#include <asm/vgtod.h>
+
+struct pvclock_vsyscall_time_info *__read_mostly pvclock_vsyscall_time;
 DEFINE_VVAR(volatile unsigned long, jiffies) = INITIAL_JIFFIES;
 #endif
 
@@ -502,8 +506,42 @@ void setup_runstate_area(unsigned int cp
 	}
 }
 
+void setup_vsyscall_time_area(unsigned int cpu)
+{
+#ifdef CONFIG_X86_64
+	if (pvclock_vsyscall_time) {
+		struct vcpu_register_time_memory_area area = {
+			.addr.v = &pvclock_vsyscall_time[cpu].pvti
+		};
+
+		if (HYPERVISOR_vcpu_op(VCPUOP_register_vcpu_time_memory_area,
+				       cpu, &area)) {
+			clocksource_xen.archdata.vclock_mode = VCLOCK_NONE;
+			vsyscall_gtod_data.clock.vclock_mode = VCLOCK_NONE;
+		}
+	}
+#endif
+}
+
 static void __init _late_time_init(void)
 {
+#ifdef CONFIG_X86_64
+	unsigned int size = ALIGN(PVTI_SIZE * NR_CPUS, PAGE_SIZE);
+	struct pvclock_vsyscall_time_info *array
+		= alloc_pages_exact(size, GFP_KERNEL);
+	struct vcpu_register_time_memory_area area = {
+		.addr.v = &array->pvti
+	};
+
+	if (array && pvclock_init_vsyscall(array, size) == 0
+	    && HYPERVISOR_vcpu_op(VCPUOP_register_vcpu_time_memory_area,
+				  0, &area) == 0) {
+		pvclock_vsyscall_time = array;
+		clocksource_xen.archdata.vclock_mode = VCLOCK_PVCLOCK;
+		vsyscall_gtod_data.clock.vclock_mode = VCLOCK_PVCLOCK;
+	} else if (area.addr.v)
+		free_pages_exact(array, size);
+#endif
 	update_wallclock();
 	xen_clockevents_init();
 }
--- a/arch/x86/mm/pgtable-xen.c
+++ b/arch/x86/mm/pgtable-xen.c
@@ -972,6 +972,7 @@ void xen_set_fixmap(enum fixed_addresses
 
 	case VSYSCALL_LAST_PAGE ... VSYSCALL_FIRST_PAGE:
 	case VVAR_PAGE:
+	case PVCLOCK_FIXMAP_BEGIN ... PVCLOCK_FIXMAP_END:
 		pte = pfn_pte(phys >> PAGE_SHIFT, flags);
 		set_pte_vaddr_pud(level3_user_pgt, address, pte);
 		break;
--- a/arch/x86/vdso/vclock_gettime.c
+++ b/arch/x86/vdso/vclock_gettime.c
@@ -26,9 +26,7 @@
 
 #define gtod (&VVAR(vsyscall_gtod_data))
 
-#ifdef CONFIG_XEN
-#define VCLOCK_NONE 0
-#else
+#ifndef CONFIG_XEN
 notrace static cycle_t vread_tsc(void)
 {
 	cycle_t ret;
@@ -155,21 +153,29 @@ notrace static long vdso_fallback_gtod(s
 }
 
 
-#ifndef CONFIG_XEN
 notrace static inline u64 vgetsns(int *mode)
 {
 	long v;
 	cycles_t cycles;
-	if (gtod->clock.vclock_mode == VCLOCK_TSC)
+
+	switch (*mode) {
+#ifndef CONFIG_XEN
+	case VCLOCK_TSC:
 		cycles = vread_tsc();
-	else if (gtod->clock.vclock_mode == VCLOCK_HPET)
+		break;
+	case VCLOCK_HPET:
 		cycles = vread_hpet();
+		break;
+#endif
 #ifdef CONFIG_PARAVIRT_CLOCK
-	else if (gtod->clock.vclock_mode == VCLOCK_PVCLOCK)
+	case VCLOCK_PVCLOCK:
 		cycles = vread_pvclock(mode);
+		break;
 #endif
-	else
+	default:
+		*mode = VCLOCK_NONE;
 		return 0;
+	}
 	v = (cycles - gtod->clock.cycle_last) & gtod->clock.mask;
 	return v * gtod->clock.mult;
 }
@@ -214,7 +220,6 @@ notrace static int do_monotonic(struct t
 
 	return mode;
 }
-#endif /* CONFIG_XEN */
 
 notrace static int do_realtime_coarse(struct timespec *ts)
 {
@@ -244,14 +249,12 @@ notrace int __vdso_clock_gettime(clockid
 	int ret = VCLOCK_NONE;
 
 	switch (clock) {
-#ifndef CONFIG_XEN
 	case CLOCK_REALTIME:
 		ret = do_realtime(ts);
 		break;
 	case CLOCK_MONOTONIC:
 		ret = do_monotonic(ts);
 		break;
-#endif
 	case CLOCK_REALTIME_COARSE:
 		return do_realtime_coarse(ts);
 	case CLOCK_MONOTONIC_COARSE:
--- a/drivers/xen/core/machine_reboot.c
+++ b/drivers/xen/core/machine_reboot.c
@@ -100,6 +100,9 @@ static void post_suspend(int suspend_can
 			    && HYPERVISOR_vcpu_op(VCPUOP_up, i, NULL))
 				BUG();
 #endif
+
+			if (cpu_online(i))
+				setup_vsyscall_time_area(i);
 		}
 	}
 
--- a/drivers/xen/core/smpboot.c
+++ b/drivers/xen/core/smpboot.c
@@ -337,6 +337,8 @@ int __cpu_up(unsigned int cpu, struct ta
 	if (rc)
 		return rc;
 
+	setup_vsyscall_time_area(cpu);
+
 	rc = xen_smp_intr_init(cpu);
 	if (rc)
 		return rc;
--- a/include/xen/clock.h
+++ b/include/xen/clock.h
@@ -3,6 +3,9 @@
 
 void setup_runstate_area(unsigned int cpu);
 
+extern struct pvclock_vsyscall_time_info *pvclock_vsyscall_time;
+void setup_vsyscall_time_area(unsigned int cpu);
+
 unsigned long long xen_local_clock(void);
 void xen_check_wallclock_update(void);
 
