From: Jiri Slaby <jslaby@suse.cz>
Subject: Linux 3.0.18
Patch-mainline: 3.0.18

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
Automatically created from "patches.kernel.org/patch-3.0.17-18" by xen-port-patches.py

--- sle11sp2.orig/drivers/acpi/processor_core.c	2012-09-04 16:38:30.000000000 +0200
+++ sle11sp2/drivers/acpi/processor_core.c	2012-09-04 16:40:43.000000000 +0200
@@ -206,7 +206,7 @@ int acpi_get_cpuid(acpi_handle handle, i
 		 * This should be the case if SMP tables are not found.
 		 * Return -1 for other CPU's handle.
 		 */
-		if (nr_cpu_ids <= 1 && acpi_id == 0)
+		if (nr_cpu_ids <= 1 && acpi_id == 0 && !i)
 			return acpi_id;
 		else
 			return apic_id;
--- sle11sp2.orig/drivers/pci/msi-xen.c	2011-02-01 15:03:03.000000000 +0100
+++ sle11sp2/drivers/pci/msi-xen.c	2012-06-21 08:35:05.000000000 +0200
@@ -818,7 +818,23 @@ EXPORT_SYMBOL(pci_msi_enabled);
 
 void pci_msi_init_pci_dev(struct pci_dev *dev)
 {
+	int pos;
+
 #ifndef CONFIG_XEN
 	INIT_LIST_HEAD(&dev->msi_list);
 #endif
+	/* Disable the msi hardware to avoid screaming interrupts
+	 * during boot.  This is the power on reset default so
+	 * usually this should be a noop.
+	 * But on a Xen host don't do this for IOMMUs which the hypervisor
+	 * is in control of (and hence has already enabled on purpose).
+	 */
+	if (is_initial_xendomain()
+	    && (dev->class >> 8) == PCI_CLASS_SYSTEM_IOMMU
+	    && dev->vendor == PCI_VENDOR_ID_AMD)
+		return;
+	pos = pci_find_capability(dev, PCI_CAP_ID_MSI);
+	if (pos)
+		msi_set_enable(dev, pos, 0);
+	msix_set_enable(dev, 0);
 }
--- sle11sp2.orig/drivers/xen/blkfront/blkfront.c	2012-04-05 09:44:00.000000000 +0200
+++ sle11sp2/drivers/xen/blkfront/blkfront.c	2012-04-05 09:44:44.000000000 +0200
@@ -640,10 +640,15 @@ int blkif_ioctl(struct block_device *bd,
 				return scsi_cmd_ioctl(filep, info->rq,
 						      info->gd, command,
 						      (void __user *)argument);
-#else
+#elif LINUX_VERSION_CODE < KERNEL_VERSION(3,3,0) \
+   && (LINUX_VERSION_CODE >= KERNEL_VERSION(3,1,0) \
+       || LINUX_VERSION_CODE < KERNEL_VERSION(3,0,18))
 				return scsi_cmd_ioctl(info->rq, info->gd,
 						      mode, command,
 						      (void __user *)argument);
+#else
+				return scsi_cmd_blk_ioctl(bd, mode, command,
+							  (void __user *)argument);
 #endif
 			}
 		}
--- sle11sp2.orig/include/linux/pci_ids.h	2012-09-04 16:31:53.000000000 +0200
+++ sle11sp2/include/linux/pci_ids.h	2012-06-21 08:31:17.000000000 +0200
@@ -75,6 +75,7 @@
 #define PCI_CLASS_SYSTEM_RTC		0x0803
 #define PCI_CLASS_SYSTEM_PCI_HOTPLUG	0x0804
 #define PCI_CLASS_SYSTEM_SDHCI		0x0805
+#define PCI_CLASS_SYSTEM_IOMMU		0x0806
 #define PCI_CLASS_SYSTEM_OTHER		0x0880
 
 #define PCI_BASE_CLASS_INPUT		0x09
