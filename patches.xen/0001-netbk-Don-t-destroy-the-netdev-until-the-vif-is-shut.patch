From: Olaf Hering <olaf@aepfle.de>
Date: Thu, 10 Jul 2014 19:10:43 +0200
Patch-mainline: submitted
Subject: netbk: Don't destroy the netdev until the vif is shut down
References: bnc#881008 	

Without this patch, if a frontend cycles through states Closing
and Closed (which Windows frontends need to do) then the netdev
will be destroyed and requires re-invocation of hotplug scripts to
restore state before the frontend can move to Connected. Thus when
udev is not in use the backend gets stuck in InitWait.

With this patch, the netdev is left alone whilst the backend is
still online and is only de-registered and freed just prior to
destroying the vif (which is also nicely symmetrical with the
netdev allocation and registration being done during probe) so no
re-invocation of hotplug scripts is required.

Based on an upstream change from Paul Durrant <paul.durrant@citrix.com>

Signed-off-by: Olaf Hering <olaf@aepfle.de>
Acked-by: <ohering@suse.de>
---
 drivers/xen/netback/common.h    |  1 +
 drivers/xen/netback/interface.c | 16 +++++++++++-----
 drivers/xen/netback/xenbus.c    | 34 ++++++++++++++--------------------
 3 files changed, 26 insertions(+), 25 deletions(-)

diff --git a/drivers/xen/netback/common.h b/drivers/xen/netback/common.h
index a0c0d5d..98bdc8d 100644
--- a/drivers/xen/netback/common.h
+++ b/drivers/xen/netback/common.h
@@ -184,6 +184,7 @@ void netif_accel_init(void);
 #define NET_RX_RING_SIZE __CONST_RING_SIZE(netif_rx, PAGE_SIZE)
 
 void netif_disconnect(struct backend_info *be);
+void netif_free(struct backend_info *be);
 
 netif_t *netif_alloc(struct device *parent, domid_t domid, unsigned int handle);
 int netif_map(struct backend_info *be, grant_ref_t tx_ring_ref,
diff --git a/drivers/xen/netback/interface.c b/drivers/xen/netback/interface.c
index 144e7b4..bff78ee 100644
--- a/drivers/xen/netback/interface.c
+++ b/drivers/xen/netback/interface.c
@@ -319,6 +319,7 @@ int netif_map(struct backend_info *be, grant_ref_t tx_ring_ref,
 		dev_set_mtu(netif->dev, ETH_DATA_LEN);
 	netdev_update_features(netif->dev);
 	netback_carrier_on(netif);
+	netif_carrier_on(netif->dev);
 	if (netif_running(netif->dev))
 		__netif_up(netif);
 	rtnl_unlock();
@@ -345,21 +346,26 @@ void netif_disconnect(struct backend_info *be)
 		netif_put(netif);
 	}
 
-	atomic_dec(&netif->refcnt);
-	wait_event(netif->waiting_to_free, atomic_read(&netif->refcnt) == 0);
+	wait_event(netif->waiting_to_free, atomic_read(&netif->refcnt) == 1);
 
 	del_timer_sync(&netif->credit_timeout);
 	del_timer_sync(&netif->tx_queue_timeout);
 
-	if (netif->irq)
+	if (netif->irq) {
 		unbind_from_irqhandler(netif->irq, netif);
+		netif->irq = 0;
+	}
 	
-	unregister_netdev(netif->dev);
-
 	if (netif->tx.sring) {
 		xenbus_unmap_ring_vfree(be->dev, netif->tx_comms_area);
 		xenbus_unmap_ring_vfree(be->dev, netif->rx_comms_area);
 	}
+}
 
+void netif_free(struct backend_info *be)
+{
+	netif_t *netif = be->netif;
+
+	unregister_netdev(netif->dev);
 	free_netdev(netif->dev);
 }
diff --git a/drivers/xen/netback/xenbus.c b/drivers/xen/netback/xenbus.c
index 500b7a0..4246139 100644
--- a/drivers/xen/netback/xenbus.c
+++ b/drivers/xen/netback/xenbus.c
@@ -28,7 +28,6 @@ static int connect_rings(struct backend_info *);
 static void connect(struct backend_info *);
 static void backend_create_netif(struct backend_info *be);
 static void unregister_hotplug_status_watch(struct backend_info *be);
-static void netback_disconnect(struct device *, bool);
 
 static int netback_remove(struct xenbus_device *dev)
 {
@@ -36,29 +35,27 @@ static int netback_remove(struct xenbus_device *dev)
 
 	netback_remove_accelerators(be, dev);
 
-	netback_disconnect(&dev->dev, true);
+	xenbus_switch_state(dev, XenbusStateClosed);
+	unregister_hotplug_status_watch(be);
+	kobject_uevent(&dev->dev.kobj, KOBJ_OFFLINE);
+	down_write(&teardown_sem);
+	if (be->netif) {
+		xenbus_rm(XBT_NIL, be->dev->nodename, "hotplug-status");
+		netif_free(be);
+		be->netif = NULL;
+	}
+	dev_set_drvdata(&dev->dev, NULL);
+	up_write(&teardown_sem);
 	kfree(be);
 	return 0;
 }
 
-static void netback_disconnect(struct device *xbdev_dev, bool clear)
+static void netback_disconnect(struct device *xbdev_dev)
 {
 	struct backend_info *be = dev_get_drvdata(xbdev_dev);
 
-	unregister_hotplug_status_watch(be);
-	if (be->netif)
-		kobject_uevent(&xbdev_dev->kobj, KOBJ_OFFLINE);
-
-	xenbus_rm(XBT_NIL, be->dev->nodename, "hotplug-status");
-
-	down_write(&teardown_sem);
-	if (be->netif) {
+	if (be && be->netif)
 		netif_disconnect(be);
-		be->netif = NULL;
-	}
-	if (clear)
-		dev_set_drvdata(xbdev_dev, NULL);
-	up_write(&teardown_sem);
 }
 
 /**
@@ -240,15 +237,12 @@ static void frontend_changed(struct xenbus_device *dev,
 	case XenbusStateConnected:
 		if (dev->state == XenbusStateConnected)
 			break;
-
-		/* backend_create_netif() is idempotent */
-		backend_create_netif(be);
 		if (be->netif)
 			connect(be);
 		break;
 
 	case XenbusStateClosing:
-		netback_disconnect(&dev->dev, false);
+		netback_disconnect(&dev->dev);
 		xenbus_switch_state(dev, XenbusStateClosing);
 		break;
 
