From: Avi Kivity <avi@redhat.com>
Subject: [PATCH] x86: fpu and xsave changes
Patch-mainline: 2.6.35
References: FATE#311768
Git-commit: c9ad488289144ae5ef53b012e15895ef1f5e4bb6
Git-commit: 86603283326c9e95e5ad4e9fdddeec93cac5d9ad

Signed-off-by: Avi Kivity <avi@redhat.com>
Acked-by: Suresh Siddha <suresh.b.siddha@intel.com>
LKML-Reference: <1273135546-29690-2-git-send-email-avi@redhat.com>
Signed-off-by: H. Peter Anvin <hpa@zytor.com>
Acked-by: Bruce Rogers <brogers@suse.com>
---

Index: linux-2.6.32-SLE11-SP2/arch/x86/include/mach-xen/asm/processor.h
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/arch/x86/include/mach-xen/asm/processor.h
+++ linux-2.6.32-SLE11-SP2/arch/x86/include/mach-xen/asm/processor.h
@@ -396,6 +396,10 @@ union thread_xstate {
 	struct xsave_struct		xsave;
 };
 
+struct fpu {
+	union thread_xstate *state;
+};
+
 #ifdef CONFIG_X86_64
 #ifndef CONFIG_X86_NO_TSS
 DECLARE_PER_CPU(struct orig_ist, orig_ist);
@@ -472,7 +476,7 @@ struct thread_struct {
 	unsigned long		trap_no;
 	unsigned long		error_code;
 	/* floating point and extended processor state */
-	union thread_xstate	*xstate;
+	struct fpu		fpu;
 #ifdef CONFIG_X86_32
 	/* Virtual 86 mode info */
 	struct vm86_struct __user *vm86_info;
Index: linux-2.6.32-SLE11-SP2/arch/x86/kernel/process_64-xen.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/arch/x86/kernel/process_64-xen.c
+++ linux-2.6.32-SLE11-SP2/arch/x86/kernel/process_64-xen.c
@@ -418,7 +418,7 @@ __switch_to(struct task_struct *prev_p,
 
 	/* we're going to use this soon, after a few expensive things */
 	if (preload_fpu)
-		prefetch(next->xstate);
+		prefetch(next->fpu.state);
 
 	/*
 	 * This is basically '__unlazy_fpu', except that we queue a
Index: linux-2.6.32-SLE11-SP2/arch/x86/kernel/process_32-xen.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/arch/x86/kernel/process_32-xen.c
+++ linux-2.6.32-SLE11-SP2/arch/x86/kernel/process_32-xen.c
@@ -471,7 +471,7 @@ __switch_to(struct task_struct *prev_p,
 
 	/* we're going to use this soon, after a few expensive things */
 	if (preload_fpu)
-		prefetch(next->xstate);
+		prefetch(next->fpu.state);
 
 	/*
 	 * Now maybe handle debug registers
Index: linux-2.6.32-SLE11-SP2/arch/x86/kernel/process-xen.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/arch/x86/kernel/process-xen.c
+++ linux-2.6.32-SLE11-SP2/arch/x86/kernel/process-xen.c
@@ -27,28 +27,26 @@ unsigned long idle_nomwait;
 EXPORT_SYMBOL(idle_nomwait);
 
 struct kmem_cache *task_xstate_cachep;
+EXPORT_SYMBOL_GPL(task_xstate_cachep);
 
 int arch_dup_task_struct(struct task_struct *dst, struct task_struct *src)
 {
+	int ret;
+
 	*dst = *src;
-	if (src->thread.xstate) {
-		dst->thread.xstate = kmem_cache_alloc(task_xstate_cachep,
-						      GFP_KERNEL);
-		if (!dst->thread.xstate)
-			return -ENOMEM;
-		WARN_ON((unsigned long)dst->thread.xstate & 15);
-		memcpy(dst->thread.xstate, src->thread.xstate, xstate_size);
+	if (fpu_allocated(&src->thread.fpu)) {
+		memset(&dst->thread.fpu, 0, sizeof(dst->thread.fpu));
+		ret = fpu_alloc(&dst->thread.fpu);
+		if (ret)
+			return ret;
+		fpu_copy(&dst->thread.fpu, &src->thread.fpu);
 	}
 	return 0;
 }
 
 void free_thread_xstate(struct task_struct *tsk)
 {
-	if (tsk->thread.xstate) {
-		kmem_cache_free(task_xstate_cachep, tsk->thread.xstate);
-		tsk->thread.xstate = NULL;
-	}
-
+	fpu_free(&tsk->thread.fpu);
 	WARN(tsk->thread.ds_ctx, "leaking DS context\n");
 }
 
Index: linux-2.6.32-SLE11-SP2/arch/x86/kernel/cpu/common-xen.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/arch/x86/kernel/cpu/common-xen.c
+++ linux-2.6.32-SLE11-SP2/arch/x86/kernel/cpu/common-xen.c
@@ -1338,10 +1338,7 @@ void __cpuinit cpu_init(void)
 	/*
 	 * Force FPU initialization:
 	 */
-	if (cpu_has_xsave)
-		current_thread_info()->status = TS_XSAVE;
-	else
-		current_thread_info()->status = 0;
+	current_thread_info()->status = 0;
 	clear_used_math();
 	mxcsr_feature_mask_init();
 
