From: Petr Tesarik <ptesarik@suse.cz>
Subject: Return EOF on out-of-bounds read from /dev/mem
Patch-Mainline: no
References: FATE#310031

The off parameter (type loff_t) may specify an offset that cannot
be represented by a long. Currently, /dev/mem wraps around, which
may to cause applications to read/write incorrect regions of memory
by accident.

Follow the usual file semantics here and return 0 when reading or
-EFBIG when writing beyond the accessible range.

Signed-off-by: Petr Tesarik <ptesarik@suse.cz>
Automatically created from "patches.fixes/dev_mem-read-write-beyond-EOF.patch" by xen-port-patches.py

--- sle11sp2-2011-08-22.orig/drivers/xen/char/mem.c	2011-02-01 15:03:03.000000000 +0100
+++ sle11sp2-2011-08-22/drivers/xen/char/mem.c	2011-08-22 11:28:02.000000000 +0200
@@ -75,6 +75,9 @@ static ssize_t read_mem(struct file *fil
 	ssize_t read = 0, sz;
 	void __iomem *v;
 
+	if (p != *ppos)
+		return 0;
+
 	while (count > 0) {
 		unsigned long remaining;
 
@@ -121,6 +124,9 @@ static ssize_t write_mem(struct file *fi
 	ssize_t written = 0, sz;
 	void __iomem *v;
 
+	if (p != *ppos)
+		return -EFBIG;
+
 	while (count > 0) {
 		sz = size_inside_page(p, count);
 
