From: Jiri Slaby <jslaby@suse.cz>
Subject: Revert "net: Allow driver to limit number of GSO segments per skb"
Patch-mainline: never, kabi fix

This reverts commit 7f8742aecd30470b4ae8f9bb6bd0b9b6abb93c9f, upstream
commit 30b678d844af3305cda5953467005cebb5d7b687. It breaks kABI and we
solve that differently by
patches.drivers/sfc-prevent-extreme-TSO-parameters-from-stalling-TX-.patch

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 include/linux/netdevice.h | 2 --
 net/core/dev.c            | 4 ----
 2 files changed, 6 deletions(-)

diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index c037215..c6d6d48 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -1329,8 +1329,6 @@ struct net_device {
 	/* for setting kernel sock attribute on TCP connection setup */
 #define GSO_MAX_SIZE		65536
 	unsigned int		gso_max_size;
-#define GSO_MAX_SEGS		65535
-	u16			gso_max_segs;
 
 #ifdef CONFIG_DCB
 	/* Data Center Bridging netlink ops */
diff --git a/net/core/dev.c b/net/core/dev.c
index d8bc889..163b1f2 100644
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -2053,9 +2053,6 @@ u32 netif_skb_features(struct sk_buff *skb)
 	__be16 protocol = skb->protocol;
 	u32 features = skb->dev->features;
 
-	if (skb_shinfo(skb)->gso_segs > skb->dev->gso_max_segs)
-		features &= ~NETIF_F_GSO_MASK;
-
 	if (protocol == htons(ETH_P_8021Q)) {
 		struct vlan_ethhdr *veh = (struct vlan_ethhdr *)skb->data;
 		protocol = veh->h_vlan_encapsulated_proto;
@@ -5876,7 +5873,6 @@ struct net_device *alloc_netdev_mqs(int sizeof_priv, const char *name,
 	dev_net_set(dev, &init_net);
 
 	dev->gso_max_size = GSO_MAX_SIZE;
-	dev->gso_max_segs = GSO_MAX_SEGS;
 
 	INIT_LIST_HEAD(&dev->ethtool_ntuple_list.list);
 	dev->ethtool_ntuple_list.count = 0;
-- 
1.7.12.1

