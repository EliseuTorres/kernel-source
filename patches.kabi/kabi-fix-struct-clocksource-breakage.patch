From: Jiri Slaby <jslaby@suse.cz>
Date: Wed, 13 Jul 2011 21:33:30 +0200
Subject: kabi: fix struct clocksource breakage
Patch-mainline: never

This reverts effect of commit b63010f54cdcb456c3a29e242a0769e5b412d785
(b5199515c25cca622495eb9c6a8a1d275e775088 upstream).

The problem here is that external modules may define struct
clocksource in .bss so we cannot add any member to the structure, not
even to the end.

Instead we do a trick here. First, the newly added member is needed
only when CONFIG_CLOCKSOURCE_WATCHDOG is enabled. This is true only on
i386 and x86_64. Second, all configs on these platforms set CONFIG_SMP
as y. Hence on these platforms ____cacheline_aligned_in_smp means to
align to L1_CACHE_BYTES. That is (1 << CONFIG_X86_L1_CACHE_SHIFT). All
our x86 configs define the shift to 7 (i.e. 128 bytes). Except
vanilla, where we don't care anyway.

Now to the point. There is a member in the clocksource structure which
is aligned by ____cacheline_aligned_in_smp. It is cycle_last. All
members in sum before that member have much less than 128 bytes. So we
might use the hole before the member.

Also we shall not forget to mask the change by __GENKSYMS__ as
usually.

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 include/linux/clocksource.h |    6 +++++-
 1 file changed, 5 insertions(+), 1 deletion(-)

--- a/include/linux/clocksource.h
+++ b/include/linux/clocksource.h
@@ -180,6 +180,11 @@ struct clocksource {
 #define CLKSRC_FSYS_MMIO_SET(mmio, addr)      do { } while (0)
 #endif
 
+#ifndef __GENKSYMS__
+#ifdef CONFIG_CLOCKSOURCE_WATCHDOG
+	cycle_t cs_last;
+#endif
+#endif
 	/*
 	 * Second part is written at each timer interrupt
 	 * Keep it in a different cache line to dirty no
@@ -190,7 +195,6 @@ struct clocksource {
 #ifdef CONFIG_CLOCKSOURCE_WATCHDOG
 	/* Watchdog related data, used by the framework */
 	struct list_head wd_list;
-	cycle_t cs_last;
 	cycle_t wd_last;
 #endif
 };
