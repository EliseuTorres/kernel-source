From abcbe4027df630c75619ecf6c110c9d8d0f127e0 Mon Sep 17 00:00:00 2001
From: Jiri Slaby <jslaby@suse.cz>
Date: Tue, 28 Sep 2010 12:36:04 +0200
Subject: Revert "Input: add compat support for sysfs and /proc capabilities output"
Patch-mainline: never

This reverts commit e1155f2ae2c0562b4efe8b2b5165ad911be0d008.

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 drivers/input/input.c |   86 ++++++++----------------------------------------
 1 files changed, 15 insertions(+), 71 deletions(-)

diff --git a/drivers/input/input.c b/drivers/input/input.c
index c82ae82..2266ecb 100644
--- a/drivers/input/input.c
+++ b/drivers/input/input.c
@@ -24,7 +24,6 @@
 #include <linux/mutex.h>
 #include <linux/rcupdate.h>
 #include <linux/smp_lock.h>
-#include "input-compat.h"
 
 MODULE_AUTHOR("Vojtech Pavlik <vojtech@suse.cz>");
 MODULE_DESCRIPTION("Input core");
@@ -759,40 +758,6 @@ static int input_attach_handler(struct input_dev *dev, struct input_handler *han
 	return error;
 }
 
-#ifdef CONFIG_COMPAT
-
-static int input_bits_to_string(char *buf, int buf_size,
-				unsigned long bits, bool skip_empty)
-{
-	int len = 0;
-
-	if (INPUT_COMPAT_TEST) {
-		u32 dword = bits >> 32;
-		if (dword || !skip_empty)
-			len += snprintf(buf, buf_size, "%x ", dword);
-
-		dword = bits & 0xffffffffUL;
-		if (dword || !skip_empty || len)
-			len += snprintf(buf + len, max(buf_size - len, 0),
-					"%x", dword);
-	} else {
-		if (bits || !skip_empty)
-			len += snprintf(buf, buf_size, "%lx", bits);
-	}
-
-	return len;
-}
-
-#else /* !CONFIG_COMPAT */
-
-static int input_bits_to_string(char *buf, int buf_size,
-				unsigned long bits, bool skip_empty)
-{
-	return bits || !skip_empty ?
-		snprintf(buf, buf_size, "%lx", bits) : 0;
-}
-
-#endif
 
 #ifdef CONFIG_PROC_FS
 
@@ -861,25 +826,14 @@ static void input_seq_print_bitmap(struct seq_file *seq, const char *name,
 				   unsigned long *bitmap, int max)
 {
 	int i;
-	bool skip_empty = true;
-	char buf[18];
 
-	seq_printf(seq, "B: %s=", name);
-
-	for (i = BITS_TO_LONGS(max) - 1; i >= 0; i--) {
-		if (input_bits_to_string(buf, sizeof(buf),
-					 bitmap[i], skip_empty)) {
-			skip_empty = false;
-			seq_printf(seq, "%s%s", buf, i > 0 ? " " : "");
-		}
-	}
-
-	/*
-	 * If no output was produced print a single 0.
-	 */
-	if (skip_empty)
-		seq_puts(seq, "0");
+	for (i = BITS_TO_LONGS(max) - 1; i > 0; i--)
+		if (bitmap[i])
+			break;
 
+	seq_printf(seq, "B: %s=", name);
+	for (; i >= 0; i--)
+		seq_printf(seq, "%lx%s", bitmap[i], i > 0 ? " " : "");
 	seq_putc(seq, '\n');
 }
 
@@ -1168,23 +1122,14 @@ static int input_print_bitmap(char *buf, int buf_size, unsigned long *bitmap,
 {
 	int i;
 	int len = 0;
-	bool skip_empty = true;
-
-	for (i = BITS_TO_LONGS(max) - 1; i >= 0; i--) {
-		len += input_bits_to_string(buf + len, max(buf_size - len, 0),
-					    bitmap[i], skip_empty);
-		if (len) {
-			skip_empty = false;
-			if (i > 0)
-				len += snprintf(buf + len, max(buf_size - len, 0), " ");
-		}
-	}
 
-	/*
-	 * If no output was produced print a single 0.
-	 */
-	if (len == 0)
-		len = snprintf(buf, buf_size, "%d", 0);
+	for (i = BITS_TO_LONGS(max) - 1; i > 0; i--)
+		if (bitmap[i])
+			break;
+
+	for (; i >= 0; i--)
+		len += snprintf(buf + len, max(buf_size - len, 0),
+				"%lx%s", bitmap[i], i > 0 ? " " : "");
 
 	if (add_cr)
 		len += snprintf(buf + len, max(buf_size - len, 0), "\n");
@@ -1199,8 +1144,7 @@ static ssize_t input_dev_show_cap_##bm(struct device *dev,		\
 {									\
 	struct input_dev *input_dev = to_input_dev(dev);		\
 	int len = input_print_bitmap(buf, PAGE_SIZE,			\
-				     input_dev->bm##bit, ev##_MAX,	\
-				     true);				\
+				     input_dev->bm##bit, ev##_MAX, 1);	\
 	return min_t(int, len, PAGE_SIZE);				\
 }									\
 static DEVICE_ATTR(bm, S_IRUGO, input_dev_show_cap_##bm, NULL)
@@ -1264,7 +1208,7 @@ static int input_add_uevent_bm_var(struct kobj_uevent_env *env,
 
 	len = input_print_bitmap(&env->buf[env->buflen - 1],
 				 sizeof(env->buf) - env->buflen,
-				 bitmap, max, false);
+				 bitmap, max, 0);
 	if (len >= (sizeof(env->buf) - env->buflen))
 		return -ENOMEM;
 
-- 
1.7.2.2

