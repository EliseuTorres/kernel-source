From: Jiri Slaby <jslaby@suse.cz>
Subject: kABI: undo cred_to_ucred change
Patch-mainline: never, kabi fix

In 3.0.76, commit 73d2de1ad017f674ec21e57405e47028dbc884bf (net: fix
incorrect credentials passing), upstream commit
83f1b4ba917db5dc5a061a44b3403ddb6e783494, changed cred_to_ucred
prototype to accept one more parameter to fix an issue. This of course
changed its checksum. But since this is used in scm_send which might
be used anywhere, we have to leave the function as is and introduce a
new one (cred_to_ucred_eff) that accepts that parameter. We then just
call cred_to_ucred_eff from cred_to_ucred.

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 include/linux/socket.h |    4 +++-
 include/net/scm.h      |    2 +-
 net/core/sock.c        |   11 ++++++++---
 3 files changed, 12 insertions(+), 5 deletions(-)

--- a/include/linux/socket.h
+++ b/include/linux/socket.h
@@ -312,7 +312,9 @@ struct ucred {
 /* IPX options */
 #define IPX_TYPE	1
 
-extern void cred_to_ucred(struct pid *pid, const struct cred *cred, struct ucred *ucred,
+/* to preserve kabi, call the latter in your code */
+extern void cred_to_ucred(struct pid *pid, const struct cred *cred, struct ucred *ucred);
+extern void cred_to_ucred_eff(struct pid *pid, const struct cred *cred, struct ucred *ucred,
 			  bool use_effective);
 
 extern int memcpy_fromiovec(unsigned char *kdata, struct iovec *iov, int len);
--- a/include/net/scm.h
+++ b/include/net/scm.h
@@ -50,7 +50,7 @@ static __inline__ void scm_set_cred(stru
 {
 	scm->pid  = get_pid(pid);
 	scm->cred = get_cred(cred);
-	cred_to_ucred(pid, cred, &scm->creds, false);
+	cred_to_ucred_eff(pid, cred, &scm->creds, false);
 }
 
 static __inline__ void scm_destroy_cred(struct scm_cookie *scm)
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -750,8 +750,13 @@ set_rcvbuf:
 }
 EXPORT_SYMBOL(sock_setsockopt);
 
+void cred_to_ucred(struct pid *pid, const struct cred *cred, struct ucred *ucred)
+{
+	cred_to_ucred_eff(pid, cred, ucred, true);
+}
+EXPORT_SYMBOL(cred_to_ucred);
 
-void cred_to_ucred(struct pid *pid, const struct cred *cred,
+void cred_to_ucred_eff(struct pid *pid, const struct cred *cred,
 		   struct ucred *ucred, bool use_effective)
 {
 	ucred->pid = pid_vnr(pid);
@@ -768,7 +773,7 @@ void cred_to_ucred(struct pid *pid, cons
 		}
 	}
 }
-EXPORT_SYMBOL_GPL(cred_to_ucred);
+EXPORT_SYMBOL_GPL(cred_to_ucred_eff);
 
 int sock_getsockopt(struct socket *sock, int level, int optname,
 		    char __user *optval, int __user *optlen)
@@ -926,7 +931,7 @@ int sock_getsockopt(struct socket *sock,
 		struct ucred peercred;
 		if (len > sizeof(peercred))
 			len = sizeof(peercred);
-		cred_to_ucred(sk->sk_peer_pid, sk->sk_peer_cred,
+		cred_to_ucred_eff(sk->sk_peer_pid, sk->sk_peer_cred,
 			      &peercred, true);
 		if (copy_to_user(optval, &peercred, len))
 			return -EFAULT;
