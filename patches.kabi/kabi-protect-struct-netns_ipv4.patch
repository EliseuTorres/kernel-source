From: Jiri Slaby <jslaby@suse.cz>
Subject: kABI: protect struct netns_ipv4
Patch-mainline: never, kabi

In 3.12.38, commit 1a95b47aa41d11726cf0634034b80d28f0521832 (ipv4:
tcp: get rid of ugly unicast_sock), upstream commit
bdbbb8527b6f6a358dbcb70dac247034d665b8e4 added the tcp_sk pointer to
the struct netns_ipv4. It indeed changed the layout of that structure.
Since this structure is included in struct net, it changed too and
mostly everything in net/.

Since struct net is allocated internally by net_alloc or is defined as
global init_net, we can move tcp_sk from 'struct net'.ipv4.tcp_sk to
'struct net'.tcp_sk (to the end) and protect the member the usual way,
by #ifdef __GENKSYMS__.

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 include/net/net_namespace.h |    3 +++
 include/net/netns/ipv4.h    |    1 -
 net/ipv4/tcp_ipv4.c         |   14 +++++++-------
 3 files changed, 10 insertions(+), 8 deletions(-)

--- a/include/net/net_namespace.h
+++ b/include/net/net_namespace.h
@@ -121,6 +121,9 @@ struct net {
 #endif
 	struct sock		*diag_nlsk;
 	atomic_t		fnhe_genid;
+#ifndef __GENKSYMS__
+	struct sock  * __percpu	*tcp_sk;
+#endif
 };
 
 /*
--- a/include/net/netns/ipv4.h
+++ b/include/net/netns/ipv4.h
@@ -43,7 +43,6 @@ struct netns_ipv4 {
 	struct inet_peer_base	*peers;
 	struct tcpm_hash_bucket	*tcp_metrics_hash;
 	unsigned int		tcp_metrics_hash_log;
-	struct sock  * __percpu	*tcp_sk;
 	struct netns_frags	frags;
 #ifdef CONFIG_NETFILTER
 	struct xt_table		*iptable_filter;
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -689,7 +689,7 @@ static void tcp_v4_send_reset(struct soc
 
 	net = dev_net(skb_dst(skb)->dev);
 	arg.tos = ip_hdr(skb)->tos;
-	ip_send_unicast_reply(*this_cpu_ptr(net->ipv4.tcp_sk),
+	ip_send_unicast_reply(*this_cpu_ptr(net->tcp_sk),
 			      skb, ip_hdr(skb)->saddr,
 			      ip_hdr(skb)->daddr, &arg, arg.iov[0].iov_len);
 
@@ -773,7 +773,7 @@ static void tcp_v4_send_ack(struct sk_bu
 	if (oif)
 		arg.bound_dev_if = oif;
 	arg.tos = tos;
-	ip_send_unicast_reply(*this_cpu_ptr(net->ipv4.tcp_sk),
+	ip_send_unicast_reply(*this_cpu_ptr(net->tcp_sk),
 			      skb, ip_hdr(skb)->saddr,
 			      ip_hdr(skb)->daddr, &arg, arg.iov[0].iov_len);
 
@@ -2834,16 +2834,16 @@ static void __net_exit tcp_sk_exit(struc
 	int cpu;
 
 	for_each_possible_cpu(cpu)
-		inet_ctl_sock_destroy(*per_cpu_ptr(net->ipv4.tcp_sk, cpu));
-	free_percpu(net->ipv4.tcp_sk);
+		inet_ctl_sock_destroy(*per_cpu_ptr(net->tcp_sk, cpu));
+	free_percpu(net->tcp_sk);
 }
 
 static int __net_init tcp_sk_init(struct net *net)
 {
 	int res, cpu;
 
-	net->ipv4.tcp_sk = alloc_percpu(struct sock *);
-	if (!net->ipv4.tcp_sk)
+	net->tcp_sk = alloc_percpu(struct sock *);
+	if (!net->tcp_sk)
 		return -ENOMEM;
 
 	for_each_possible_cpu(cpu) {
@@ -2853,7 +2853,7 @@ static int __net_init tcp_sk_init(struct
 					   IPPROTO_TCP, net);
 		if (res)
 			goto fail;
-		*per_cpu_ptr(net->ipv4.tcp_sk, cpu) = sk;
+		*per_cpu_ptr(net->tcp_sk, cpu) = sk;
 	}
 	net->ipv4.sysctl_tcp_ecn = 2;
 	return 0;
