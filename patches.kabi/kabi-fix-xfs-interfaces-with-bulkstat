From: Jeff Mahoney <jeffm@suse.com>
Subject: KABI: Fix XFS interfaces with bulkstat
References: bnc#632317
Patch-mainline: Never

 This patch restores the interfaces for xfs_iget, xfs_bulkstat, and
 bulkstat_one_pf. The missing parameters are restored but are ignored
 internally and always passed zero values by internal code.

Signed-off-by: Jeff Mahoney <jeffm@suse.com>
---
 fs/xfs/dmapi/xfs_dm.c          |   14 +++++++++-----
 fs/xfs/linux-2.6/xfs_export.c  |    2 +-
 fs/xfs/linux-2.6/xfs_ioctl.c   |    2 +-
 fs/xfs/linux-2.6/xfs_ioctl32.c |    6 ++++--
 fs/xfs/quota/xfs_qm.c          |   10 ++++++----
 fs/xfs/quota/xfs_qm_syscalls.c |   13 +++++++------
 fs/xfs/xfs_iget.c              |    3 ++-
 fs/xfs/xfs_inode.h             |    2 +-
 fs/xfs/xfs_itable.c            |   12 ++++++++----
 fs/xfs/xfs_itable.h            |    5 +++++
 fs/xfs/xfs_log_recover.c       |    2 +-
 fs/xfs/xfs_mount.c             |    2 +-
 fs/xfs/xfs_rtalloc.c           |    4 ++--
 fs/xfs/xfs_trans_inode.c       |    2 +-
 fs/xfs/xfs_vnodeops.c          |    2 +-
 15 files changed, 50 insertions(+), 31 deletions(-)

--- a/fs/xfs/dmapi/xfs_dm.c
+++ b/fs/xfs/dmapi/xfs_dm.c
@@ -404,7 +404,7 @@ xfs_dm_bulkall_iget_one(
 	int		error;
 
 	error = xfs_iget(mp, NULL, ino,
-			 XFS_IGET_UNTRUSTED, XFS_ILOCK_SHARED, &ip);
+			 XFS_IGET_UNTRUSTED, XFS_ILOCK_SHARED, &ip, 0);
 	if (error)
 		return error;
 
@@ -449,7 +449,9 @@ xfs_dm_bulkall_one(
 	void		__user *buffer,	/* buffer to place output in */
 	int		ubsize,		/* size of buffer */
 	void		*private_data,	/* my private data */
+	xfs_daddr_t	bno,		/* not used */
 	int		*ubused,	/* amount of buffer we used */
+	void		*dip,		/* not used */
 	int		*res)		/* bulkstat result code */
 {
 	dm_xstat_t	*xbuf;
@@ -548,7 +550,7 @@ xfs_dm_bulkattr_iget_one(
 	int		error;
 
 	error = xfs_iget(mp, NULL, ino,
-			 XFS_IGET_UNTRUSTED, XFS_ILOCK_SHARED, &ip);
+			 XFS_IGET_UNTRUSTED, XFS_ILOCK_SHARED, &ip, 0);
 	if (error)
 		return error;
 
@@ -572,7 +574,9 @@ xfs_dm_bulkattr_one(
 	void		__user *buffer,	/* buffer to place output in */
 	int		ubsize,		/* size of buffer */
 	void		*private_data,	/* my private data */
+	xfs_daddr_t	bno,		/* not used */
 	int		*ubused,	/* amount of buffer we used */
+	void		*dip,		/* not used */
 	int		*res)		/* bulkstat result code */
 {
 	dm_stat_t	*sbuf;
@@ -1189,7 +1193,7 @@ xfs_dm_get_bulkall_rvp(
 	memcpy(&dmb.fsid, mp->m_fixedfsid, sizeof(dm_fsid_t));
 	error = xfs_bulkstat(mp, (xfs_ino_t *)&loc, &nelems,
 			     xfs_dm_bulkall_one, (void*)&dmb, statstruct_sz,
-			     bufp, &done);
+			     bufp, 0, &done);
 	if (error)
 		return(-error); /* Return negative error to DMAPI */
 
@@ -1285,7 +1289,7 @@ xfs_dm_get_bulkattr_rvp(
 	memcpy(&dmb.fsid, mp->m_fixedfsid, sizeof(dm_fsid_t));
 	error = xfs_bulkstat(mp, (xfs_ino_t *)&loc, &nelems,
 				xfs_dm_bulkattr_one, (void*)&dmb,
-				statstruct_sz, bufp, &done);
+				statstruct_sz, bufp, 0, &done);
 	if (error)
 		return(-error); /* Return negative error to DMAPI */
 
@@ -3008,7 +3012,7 @@ xfs_dm_fh_to_inode(
 	if (ino == 0)
 		return -ESTALE;
 
-	error = xfs_iget(mp, NULL, ino, 0, XFS_ILOCK_SHARED, &ip);
+	error = xfs_iget(mp, NULL, ino, 0, XFS_ILOCK_SHARED, &ip, 0);
 	if (error)
 		return -error;
 	if (!ip)
--- a/fs/xfs/linux-2.6/xfs_export.c
+++ b/fs/xfs/linux-2.6/xfs_export.c
@@ -132,7 +132,7 @@ xfs_nfs_get_inode(
 	 * send invalid file handles and we have to handle it gracefully..
 	 */
 	error = xfs_iget(mp, NULL, ino, XFS_IGET_UNTRUSTED,
-			 XFS_ILOCK_SHARED, &ip);
+			 XFS_ILOCK_SHARED, &ip, 0);
 	if (error) {
 		/*
 		 * EINVAL means the inode cluster doesn't exist anymore.
--- a/fs/xfs/linux-2.6/xfs_ioctl.c
+++ b/fs/xfs/linux-2.6/xfs_ioctl.c
@@ -675,7 +675,7 @@ xfs_ioc_bulkstat(
 	else	/* XFS_IOC_FSBULKSTAT */
 		error = xfs_bulkstat(mp, &inlast, &count, xfs_bulkstat_one,
 				     NULL, sizeof(xfs_bstat_t),
-				     bulkreq.ubuffer, &done);
+				     bulkreq.ubuffer, 0, &done);
 
 	if (error)
 		return -error;
--- a/fs/xfs/linux-2.6/xfs_ioctl32.c
+++ b/fs/xfs/linux-2.6/xfs_ioctl32.c
@@ -236,7 +236,9 @@ xfs_bulkstat_one_compat(
 	void		__user *buffer,	/* buffer to place output in */
 	int		ubsize,		/* size of buffer */
 	void		*private_data,	/* my private data */
+	xfs_daddr_t	bno,		/* not used */
 	int		*ubused,	/* bytes used by me */
+	void		*dip,		/* not used */
 	int		*stat)		/* BULKSTAT_RV_... */
 {
 	return xfs_bulkstat_one_int(mp, ino, buffer, ubsize,
@@ -295,11 +297,11 @@ xfs_compat_ioc_bulkstat(
 
 		error = xfs_bulkstat_one_compat(mp, inlast, bulkreq.ubuffer,
 					        sizeof(compat_xfs_bstat_t),
-						NULL, 0, &res);
+						NULL, 0, 0, NULL, &res);
 	} else if (cmd == XFS_IOC_FSBULKSTAT_32) {
 		error = xfs_bulkstat(mp, &inlast, &count,
 			xfs_bulkstat_one_compat, NULL,
-			sizeof(compat_xfs_bstat_t), bulkreq.ubuffer, &done);
+			sizeof(compat_xfs_bstat_t), bulkreq.ubuffer, 0, &done);
 	} else
 		error = XFS_ERROR(EINVAL);
 	if (error)
--- a/fs/xfs/quota/xfs_qm.c
+++ b/fs/xfs/quota/xfs_qm.c
@@ -1607,7 +1607,9 @@ xfs_qm_dqusage_adjust(
 	void		__user *buffer,	/* not used */
 	int		ubsize,		/* not used */
 	void		*private_data,	/* not used */
+	xfs_daddr_t	bno,		/* not used */
 	int		*ubused,	/* not used */
+	void		*dip,		/* not used */
 	int		*res)		/* result code value */
 {
 	xfs_inode_t	*ip;
@@ -1632,7 +1634,7 @@ xfs_qm_dqusage_adjust(
 	 * the case in all other instances. It's OK that we do this because
 	 * quotacheck is done only at mount time.
 	 */
-	if ((error = xfs_iget(mp, NULL, ino, 0, XFS_ILOCK_EXCL, &ip))) {
+	if ((error = xfs_iget(mp, NULL, ino, 0, XFS_ILOCK_EXCL, &ip, 0))) {
 		*res = BULKSTAT_RV_NOTHING;
 		return error;
 	}
@@ -1766,7 +1768,7 @@ xfs_qm_quotacheck(
 		 */
 		error = xfs_bulkstat(mp, &lastino, &count,
 				     xfs_qm_dqusage_adjust,
-				     NULL, structsz, NULL, &done);
+				     NULL, structsz, NULL, 0, &done);
 		if (error)
 			break;
 
@@ -1858,14 +1860,14 @@ xfs_qm_init_quotainos(
 		    mp->m_sb.sb_uquotino != NULLFSINO) {
 			ASSERT(mp->m_sb.sb_uquotino > 0);
 			if ((error = xfs_iget(mp, NULL, mp->m_sb.sb_uquotino,
-					     0, 0, &uip)))
+					     0, 0, &uip, 0)))
 				return XFS_ERROR(error);
 		}
 		if (XFS_IS_OQUOTA_ON(mp) &&
 		    mp->m_sb.sb_gquotino != NULLFSINO) {
 			ASSERT(mp->m_sb.sb_gquotino > 0);
 			if ((error = xfs_iget(mp, NULL, mp->m_sb.sb_gquotino,
-					     0, 0, &gip))) {
+					     0, 0, &gip, 0))) {
 				if (uip)
 					IRELE(uip);
 				return XFS_ERROR(error);
--- a/fs/xfs/quota/xfs_qm_syscalls.c
+++ b/fs/xfs/quota/xfs_qm_syscalls.c
@@ -266,7 +266,7 @@ xfs_qm_scall_trunc_qfiles(
 	}
 
 	if ((flags & XFS_DQ_USER) && mp->m_sb.sb_uquotino != NULLFSINO) {
-		error = xfs_iget(mp, NULL, mp->m_sb.sb_uquotino, 0, 0, &qip);
+		error = xfs_iget(mp, NULL, mp->m_sb.sb_uquotino, 0, 0, &qip, 0);
 		if (!error) {
 			error = xfs_truncate_file(mp, qip);
 			IRELE(qip);
@@ -275,7 +275,8 @@ xfs_qm_scall_trunc_qfiles(
 
 	if ((flags & (XFS_DQ_GROUP|XFS_DQ_PROJ)) &&
 	    mp->m_sb.sb_gquotino != NULLFSINO) {
-		error2 = xfs_iget(mp, NULL, mp->m_sb.sb_gquotino, 0, 0, &qip);
+		error2 = xfs_iget(mp, NULL, mp->m_sb.sb_gquotino, 0, 0, &qip,
+				  0);
 		if (!error2) {
 			error2 = xfs_truncate_file(mp, qip);
 			IRELE(qip);
@@ -420,12 +421,12 @@ xfs_qm_scall_getqstat(
 	}
 	if (!uip && mp->m_sb.sb_uquotino != NULLFSINO) {
 		if (xfs_iget(mp, NULL, mp->m_sb.sb_uquotino,
-					0, 0, &uip) == 0)
+					0, 0, &uip, 0) == 0)
 			tempuqip = B_TRUE;
 	}
 	if (!gip && mp->m_sb.sb_gquotino != NULLFSINO) {
 		if (xfs_iget(mp, NULL, mp->m_sb.sb_gquotino,
-					0, 0, &gip) == 0)
+					0, 0, &gip, 0) == 0)
 			tempgqip = B_TRUE;
 	}
 	if (uip) {
@@ -1137,7 +1138,7 @@ xfs_qm_internalqcheck_adjust(
 	ipreleased = B_FALSE;
  again:
 	lock_flags = XFS_ILOCK_SHARED;
-	if ((error = xfs_iget(mp, NULL, ino, 0, lock_flags, &ip))) {
+	if ((error = xfs_iget(mp, NULL, ino, 0, lock_flags, &ip, 0))) {
 		*res = BULKSTAT_RV_NOTHING;
 		return (error);
 	}
@@ -1212,7 +1213,7 @@ xfs_qm_internalqcheck(
 		 */
 		error = xfs_bulkstat(mp, &lastino, &count,
 				 xfs_qm_internalqcheck_adjust,
-				 NULL, 0, NULL, &done);
+				 NULL, 0, NULL, 0, &done);
 		if (error) {
 			cmn_err(CE_DEBUG, "Bulkstat returned error 0x%x", error);
 			break;
--- a/fs/xfs/xfs_iget.c
+++ b/fs/xfs/xfs_iget.c
@@ -401,7 +401,8 @@ xfs_iget(
 	xfs_ino_t	ino,
 	uint		flags,
 	uint		lock_flags,
-	xfs_inode_t	**ipp)
+	xfs_inode_t	**ipp,
+	xfs_daddr_t	bno) /* kABI: Unused */
 {
 	xfs_inode_t	*ip;
 	int		error;
--- a/fs/xfs/xfs_inode.h
+++ b/fs/xfs/xfs_inode.h
@@ -468,7 +468,7 @@ static inline void xfs_ifunlock(xfs_inod
  * xfs_iget.c prototypes.
  */
 int		xfs_iget(struct xfs_mount *, struct xfs_trans *, xfs_ino_t,
-			 uint, uint, xfs_inode_t **);
+			 uint, uint, xfs_inode_t **, xfs_daddr_t bno);
 void		xfs_iput(xfs_inode_t *, uint);
 void		xfs_iput_new(xfs_inode_t *, uint);
 void		xfs_ilock(xfs_inode_t *, uint);
--- a/fs/xfs/xfs_itable.c
+++ b/fs/xfs/xfs_itable.c
@@ -79,7 +79,7 @@ xfs_bulkstat_one_int(
 		return XFS_ERROR(ENOMEM);
 
 	error = xfs_iget(mp, NULL, ino,
-			 XFS_IGET_UNTRUSTED, XFS_ILOCK_SHARED, &ip);
+			 XFS_IGET_UNTRUSTED, XFS_ILOCK_SHARED, &ip, 0);
 	if (error) {
 		*stat = BULKSTAT_RV_NOTHING;
 		goto out_free;
@@ -178,7 +178,9 @@ xfs_bulkstat_one(
 	void		__user *buffer,	/* buffer to place output in */
 	int		ubsize,		/* size of buffer */
 	void		*private_data,	/* my private data */
+	xfs_daddr_t	bno,		/* not used */
 	int		*ubused,	/* bytes used by me */
+	void		*dip,		/* not used */
 	int		*stat)		/* BULKSTAT_RV_... */
 {
 	return xfs_bulkstat_one_int(mp, ino, buffer, ubsize,
@@ -199,6 +201,7 @@ xfs_bulkstat(
 	void			*private_data,/* private data for formatter */
 	size_t			statstruct_size, /* sizeof struct filling */
 	char			__user *ubuffer, /* buffer with inode stats */
+	int			flags, /* kABI: unused */
 	int			*done)	/* 1 if there are more stats to get */
 {
 	xfs_agblock_t		agbno=0;/* allocation group block number */
@@ -484,7 +487,8 @@ xfs_bulkstat(
 				 */
 				ubused = statstruct_size;
 				error = formatter(mp, ino, ubufp, ubleft, NULL,
-						  &ubused, &fmterror);
+						  0, &ubused, NULL,
+						  &fmterror);
 				if (fmterror == BULKSTAT_RV_NOTHING) {
 					if (error && error != ENOENT &&
 						error != EINVAL) {
@@ -577,7 +581,7 @@ xfs_bulkstat_single(
 
 	ino = (xfs_ino_t)*lastinop;
 	error = xfs_bulkstat_one(mp, ino, buffer, sizeof(xfs_bstat_t), NULL, 0,
-				 &res);
+				 0, NULL, &res);
 	if (error) {
 		/*
 		 * Special case way failed, do it the "long" way
@@ -586,7 +590,7 @@ xfs_bulkstat_single(
 		(*lastinop)--;
 		count = 1;
 		if (xfs_bulkstat(mp, lastinop, &count, xfs_bulkstat_one, NULL,
-				sizeof(xfs_bstat_t), buffer, done))
+				sizeof(xfs_bstat_t), buffer, 0, done))
 			return error;
 		if (count == 0 || (xfs_ino_t)*lastinop != ino)
 			return error == EFSCORRUPTED ?
--- a/fs/xfs/xfs_itable.h
+++ b/fs/xfs/xfs_itable.h
@@ -28,7 +28,9 @@ typedef int (*bulkstat_one_pf)(struct xf
 			       void		__user *buffer,
 			       int		ubsize,
 			       void		*private_data,
+			       xfs_daddr_t	bno, /* Kabi: Unused */
 			       int		*ubused,
+			       void		*dip, /* kABI: Unused */
 			       int		*stat);
 
 /*
@@ -50,6 +52,7 @@ xfs_bulkstat(
 	void		*private_data,	/* private data for formatter */
 	size_t		statstruct_size,/* sizeof struct that we're filling */
 	char		__user *ubuffer,/* buffer with inode stats */
+	int		flags,		/* kABI: unused */
 	int		*done);		/* 1 if there are more stats to get */
 
 int
@@ -82,7 +85,9 @@ xfs_bulkstat_one(
 	void			__user *buffer,
 	int			ubsize,
 	void			*private_data,
+	xfs_daddr_t		bno,
 	int			*ubused,
+	void			*dip,
 	int			*stat);
 
 int
--- a/fs/xfs/xfs_log_recover.c
+++ b/fs/xfs/xfs_log_recover.c
@@ -3209,7 +3209,7 @@ xlog_recover_process_one_iunlink(
 	int				error;
 
 	ino = XFS_AGINO_TO_INO(mp, agno, agino);
-	error = xfs_iget(mp, NULL, ino, 0, 0, &ip);
+	error = xfs_iget(mp, NULL, ino, 0, 0, &ip, 0);
 	if (error)
 		goto fail;
 
--- a/fs/xfs/xfs_mount.c
+++ b/fs/xfs/xfs_mount.c
@@ -1207,7 +1207,7 @@ xfs_mountfs(
 	 * Get and sanity-check the root inode.
 	 * Save the pointer to it in the mount structure.
 	 */
-	error = xfs_iget(mp, NULL, sbp->sb_rootino, 0, XFS_ILOCK_EXCL, &rip);
+	error = xfs_iget(mp, NULL, sbp->sb_rootino, 0, XFS_ILOCK_EXCL, &rip, 0);
 	if (error) {
 		cmn_err(CE_WARN, "XFS: failed to read root inode");
 		goto out_log_dealloc;
--- a/fs/xfs/xfs_rtalloc.c
+++ b/fs/xfs/xfs_rtalloc.c
@@ -2276,12 +2276,12 @@ xfs_rtmount_inodes(
 	sbp = &mp->m_sb;
 	if (sbp->sb_rbmino == NULLFSINO)
 		return 0;
-	error = xfs_iget(mp, NULL, sbp->sb_rbmino, 0, 0, &mp->m_rbmip);
+	error = xfs_iget(mp, NULL, sbp->sb_rbmino, 0, 0, &mp->m_rbmip, 0);
 	if (error)
 		return error;
 	ASSERT(mp->m_rbmip != NULL);
 	ASSERT(sbp->sb_rsumino != NULLFSINO);
-	error = xfs_iget(mp, NULL, sbp->sb_rsumino, 0, 0, &mp->m_rsumip);
+	error = xfs_iget(mp, NULL, sbp->sb_rsumino, 0, 0, &mp->m_rsumip, 0);
 	if (error) {
 		IRELE(mp->m_rbmip);
 		return error;
--- a/fs/xfs/xfs_trans_inode.c
+++ b/fs/xfs/xfs_trans_inode.c
@@ -62,7 +62,7 @@ xfs_trans_iget(
 {
 	int			error;
 
-	error = xfs_iget(mp, tp, ino, flags, lock_flags, ipp);
+	error = xfs_iget(mp, tp, ino, flags, lock_flags, ipp, 0);
 	if (!error && tp)
 		xfs_trans_ijoin(tp, *ipp, lock_flags);
 	return error;
--- a/fs/xfs/xfs_vnodeops.c
+++ b/fs/xfs/xfs_vnodeops.c
@@ -1366,7 +1366,7 @@ xfs_lookup(
 	if (error)
 		goto out;
 
-	error = xfs_iget(dp->i_mount, NULL, inum, 0, 0, ipp);
+	error = xfs_iget(dp->i_mount, NULL, inum, 0, 0, ipp, 0);
 	if (error)
 		goto out_free_name;
 
