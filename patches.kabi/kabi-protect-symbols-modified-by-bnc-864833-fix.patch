From: Michal Kubecek <mkubecek@suse.cz>
Date: Tue, 25 Feb 2014 16:48:09 +0100
Subject: kabi: protect symbols modified by bnc#864833 fix
Patch-mainline: Never, kABI fix
References: bnc#864833

These symbols need to be protected:

  struct rtable
  struct rt6_info
  inet_getpeer()

Changes in first two are only masked as the patch assumes
sizeof(long) == sizeof(void *) anyway. Function inet_getpeer()
is renamed to inet_getpeer_base() and a wrapper with the
original parameters is added.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 include/net/inetpeer.h |  9 ++++++---
 include/net/ip6_fib.h  |  4 ++++
 include/net/route.h    |  4 ++++
 net/ipv4/inetpeer.c    | 17 ++++++++++++++++-
 4 files changed, 30 insertions(+), 4 deletions(-)

diff --git a/include/net/inetpeer.h b/include/net/inetpeer.h
index a240bdd..609c44a 100644
--- a/include/net/inetpeer.h
+++ b/include/net/inetpeer.h
@@ -128,7 +128,10 @@ static inline bool inet_metrics_new(const struct inet_peer *p)
 }
 
 /* can be called with or without local BH being disabled */
-struct inet_peer *inet_getpeer(struct inet_peer_base *base,
+struct inet_peer *inet_getpeer_base(struct inet_peer_base *base,
+				    const struct inetpeer_addr *daddr,
+				    int create);
+struct inet_peer *inet_getpeer(struct net *net,
 			       const struct inetpeer_addr *daddr,
 			       int create);
 
@@ -140,7 +143,7 @@ static inline struct inet_peer *inet_getpeer_v4(struct inet_peer_base *base,
 
 	daddr.addr.a4 = v4daddr;
 	daddr.family = AF_INET;
-	return inet_getpeer(base, &daddr, create);
+	return inet_getpeer_base(base, &daddr, create);
 }
 
 static inline struct inet_peer *inet_getpeer_v6(struct inet_peer_base *base,
@@ -151,7 +154,7 @@ static inline struct inet_peer *inet_getpeer_v6(struct inet_peer_base *base,
 
 	ipv6_addr_copy((struct in6_addr *)daddr.addr.a6, v6daddr);
 	daddr.family = AF_INET6;
-	return inet_getpeer(base, &daddr, create);
+	return inet_getpeer_base(base, &daddr, create);
 }
 
 /* can be called from BH context or outside */
diff --git a/include/net/ip6_fib.h b/include/net/ip6_fib.h
index 9765334..66acfa4 100644
--- a/include/net/ip6_fib.h
+++ b/include/net/ip6_fib.h
@@ -111,7 +111,11 @@ struct rt6_info {
 	u32				rt6i_peer_genid;
 
 	struct inet6_dev		*rt6i_idev;
+#ifdef __GENKSYMS__
+	struct inet_peer		*rt6i_peer;
+#else
 	unsigned long			_rt6i_peer;
+#endif
 
 #ifdef CONFIG_XFRM
 	u32				rt6i_flow_cache_genid;
diff --git a/include/net/route.h b/include/net/route.h
index 6cb4444..6420d40 100644
--- a/include/net/route.h
+++ b/include/net/route.h
@@ -67,7 +67,11 @@ struct rtable {
 	/* Miscellaneous cached information */
 	__be32			rt_spec_dst; /* RFC1122 specific destination */
 	u32			rt_peer_genid;
+#ifdef __GENKSYMS__
+	struct inet_peer	*peer; /* long-living peer info */
+#else
 	unsigned long		_peer; /* long-living peer info */
+#endif
 	struct fib_info		*fi; /* for client ref to shared metrics */
 };
 
diff --git a/net/ipv4/inetpeer.c b/net/ipv4/inetpeer.c
index 36e3eaf..6212b25 100644
--- a/net/ipv4/inetpeer.c
+++ b/net/ipv4/inetpeer.c
@@ -451,6 +451,11 @@ static void unlink_from_pool(struct inet_peer *p, struct inet_peer_base *base,
 		inet_putpeer(p);
 }
 
+static inline struct inet_peer_base *family_to_base(struct net *net, int family)
+{
+	return family == AF_INET ? net->ipv4.peers : net->ipv6.peers;
+}
+
 /* May be called with local BH enabled. */
 static int cleanup_once(struct inet_peer_base *base,
 			unsigned long ttl,
@@ -492,7 +497,7 @@ static int cleanup_once(struct inet_peer_base *base,
 }
 
 /* Called with or without local BH being disabled. */
-struct inet_peer *inet_getpeer(struct inet_peer_base *base,
+struct inet_peer *inet_getpeer_base(struct inet_peer_base *base,
 			       const struct inetpeer_addr *daddr,
 			       int create)
 {
@@ -560,6 +565,16 @@ found:		/* The existing node has been found.
 
 	return p;
 }
+EXPORT_SYMBOL_GPL(inet_getpeer_base);
+
+/* old version to preserve kABI */
+struct inet_peer *inet_getpeer(struct net *net,
+			       const struct inetpeer_addr *daddr,
+			       int create)
+{
+	return inet_getpeer_base(family_to_base(net, daddr->family),
+				 daddr, create);
+}
 EXPORT_SYMBOL_GPL(inet_getpeer);
 
 /* Called with local BH disabled. */
-- 
1.8.1.4

