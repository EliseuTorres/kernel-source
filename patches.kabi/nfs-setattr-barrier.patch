From: NeilBrown <neilb@suse.de>
Subject: restore kabi after change to nfs_setattr_update_inode
Patch-mainline: never - kabi
References: bnc#920262

Restore kabi after
   patches.fixes/0001-NFS-Add-attrbutes-update-barriers-to-nfs_setattr_upd.patch

as that changed the exported symbol nfs_setattr_update_inode.

Any external user of that symbol will get the old behaviour which is
racy.

Signed-off-by: NeilBrown <neilb@suse.de>

---
 fs/nfs/inode.c         |   16 ++++++++++++----
 fs/nfs/nfs3proc.c      |    2 +-
 fs/nfs/nfs4proc.c      |    4 ++--
 fs/nfs/proc.c          |    2 +-
 include/linux/nfs_fs.h |    3 ++-
 5 files changed, 18 insertions(+), 9 deletions(-)

--- linux-3.12-SLE12.orig/fs/nfs/inode.c
+++ linux-3.12-SLE12/fs/nfs/inode.c
@@ -572,14 +572,16 @@ out:
  * Note: we do this in the *proc.c in order to ensure that
  *       it works for things like exclusive creates too.
  */
-void nfs_setattr_update_inode(struct inode *inode, struct iattr *attr,
+void nfs_setattr_update_inode2(struct inode *inode, struct iattr *attr,
 		struct nfs_fattr *fattr)
 {
 	/* Barrier: bump the attribute generation count. */
-	fattr->gencount = nfs_inc_attr_generation_counter();
+	if (fattr)
+		fattr->gencount = nfs_inc_attr_generation_counter();
 
 	spin_lock(&inode->i_lock);
-	NFS_I(inode)->attr_gencount = fattr->gencount;
+	if (fattr)
+		NFS_I(inode)->attr_gencount = fattr->gencount;
 	if ((attr->ia_valid & (ATTR_MODE|ATTR_UID|ATTR_GID)) != 0) {
 		if ((attr->ia_valid & ATTR_MODE) != 0) {
 			int mode = attr->ia_mode & S_IALLUGO;
@@ -596,9 +598,15 @@ void nfs_setattr_update_inode(struct ino
 		nfs_inc_stats(inode, NFSIOS_SETATTRTRUNC);
 		nfs_vmtruncate(inode, attr->ia_size);
 	}
-	nfs_update_inode(inode, fattr);
+	if (fattr)
+		nfs_update_inode(inode, fattr);
 	spin_unlock(&inode->i_lock);
 }
+EXPORT_SYMBOL_GPL(nfs_setattr_update_inode2);
+void nfs_setattr_update_inode(struct inode *inode, struct iattr *attr)
+{
+	nfs_setattr_update_inode2(inode, attr, NULL);
+}
 EXPORT_SYMBOL_GPL(nfs_setattr_update_inode);
 
 static void nfs_request_parent_use_readdirplus(struct dentry *dentry)
--- linux-3.12-SLE12.orig/fs/nfs/nfs3proc.c
+++ linux-3.12-SLE12/fs/nfs/nfs3proc.c
@@ -136,7 +136,7 @@ nfs3_proc_setattr(struct dentry *dentry,
 	nfs_fattr_init(fattr);
 	status = rpc_call_sync(NFS_CLIENT(inode), &msg, 0);
 	if (status == 0)
-		nfs_setattr_update_inode(inode, sattr, fattr);
+		nfs_setattr_update_inode2(inode, sattr, fattr);
 	dprintk("NFS reply setattr: %d\n", status);
 	return status;
 }
--- linux-3.12-SLE12.orig/fs/nfs/nfs4proc.c
+++ linux-3.12-SLE12/fs/nfs/nfs4proc.c
@@ -2283,7 +2283,7 @@ static int _nfs4_do_open(struct inode *d
 				opendata->o_res.f_attr, sattr,
 				state, label, olabel);
 		if (status == 0) {
-			nfs_setattr_update_inode(state->inode, sattr,
+			nfs_setattr_update_inode2(state->inode, sattr,
 					opendata->o_res.f_attr);
 			nfs_setsecurity(state->inode, opendata->o_res.f_attr, olabel);
 		}
@@ -3131,7 +3131,7 @@ nfs4_proc_setattr(struct dentry *dentry,
 
 	status = nfs4_do_setattr(inode, cred, fattr, sattr, state, NULL, label);
 	if (status == 0) {
-		nfs_setattr_update_inode(inode, sattr, fattr);
+		nfs_setattr_update_inode2(inode, sattr, fattr);
 		nfs_setsecurity(inode, fattr, label);
 	}
 	nfs4_label_free(label);
--- linux-3.12-SLE12.orig/fs/nfs/proc.c
+++ linux-3.12-SLE12/fs/nfs/proc.c
@@ -139,7 +139,7 @@ nfs_proc_setattr(struct dentry *dentry,
 	nfs_fattr_init(fattr);
 	status = rpc_call_sync(NFS_CLIENT(inode), &msg, 0);
 	if (status == 0)
-		nfs_setattr_update_inode(inode, sattr, fattr);
+		nfs_setattr_update_inode2(inode, sattr, fattr);
 	dprintk("NFS reply setattr: %d\n", status);
 	return status;
 }
--- linux-3.12-SLE12.orig/include/linux/nfs_fs.h
+++ linux-3.12-SLE12/include/linux/nfs_fs.h
@@ -357,7 +357,8 @@ extern int nfs_revalidate_inode_rcu(stru
 extern int __nfs_revalidate_inode(struct nfs_server *, struct inode *);
 extern int nfs_revalidate_mapping(struct inode *inode, struct address_space *mapping);
 extern int nfs_setattr(struct dentry *, struct iattr *);
-extern void nfs_setattr_update_inode(struct inode *inode, struct iattr *attr, struct nfs_fattr *);
+extern void nfs_setattr_update_inode2(struct inode *inode, struct iattr *attr, struct nfs_fattr *);
+extern void nfs_setattr_update_inode(struct inode *inode, struct iattr *attr);
 extern void nfs_setsecurity(struct inode *inode, struct nfs_fattr *fattr,
 				struct nfs4_label *label);
 extern struct nfs_open_context *get_nfs_open_context(struct nfs_open_context *ctx);
