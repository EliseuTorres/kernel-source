From: Michal Hocko <mhocko@suse.cz>
Patch-mainline: never - kabi workaround
References: bnc#878509, bnc#864464
Subject: pagecachelimit: reduce lru_lock contention for heavy parallel kabi fixup

Hide a new member in struct zone. This is safe for all architectures and kernel
flavors because __pad1__ gives us enough room.

Here is what pahole says:
$ for arch in *; do for flavor in $arch/vmlinux*; do echo $flavor; pahole -C zone $flavor | grep -B3 _pad1_; done; done      
i586/vmlinux-3.0.101-0.31-default.debug
 /* XXX 84 bytes hole, try to pack */

 /* --- cacheline 10 boundary (640 bytes) --- */
 struct zone_padding        _pad1_;               /*   640     0 */
i586/vmlinux-3.0.101-0.31-ec2.debug
 /* XXX 84 bytes hole, try to pack */

 /* --- cacheline 10 boundary (640 bytes) --- */
 struct zone_padding        _pad1_;               /*   640     0 */
i586/vmlinux-3.0.101-0.31-pae.debug
 /* XXX 72 bytes hole, try to pack */

 /* --- cacheline 10 boundary (640 bytes) --- */
 struct zone_padding        _pad1_;               /*   640     0 */
i586/vmlinux-3.0.101-0.31-trace.debug
 /* XXX 72 bytes hole, try to pack */

 /* --- cacheline 10 boundary (640 bytes) --- */
 struct zone_padding        _pad1_;               /*   640     0 */
i586/vmlinux-3.0.101-0.31-xen.debug
 /* XXX 84 bytes hole, try to pack */

 /* --- cacheline 10 boundary (640 bytes) --- */
 struct zone_padding        _pad1_;               /*   640     0 */
ia64/vmlinux-3.0.101-0.31-default.debug
 /* XXX 28 bytes hole, try to pack */

 /* --- cacheline 26 boundary (1664 bytes) --- */
 struct zone_padding        _pad1_;               /*  1664     0 */
ia64/vmlinux-3.0.101-0.31-trace.debug
 /* XXX 28 bytes hole, try to pack */

 /* --- cacheline 26 boundary (1664 bytes) --- */
 struct zone_padding        _pad1_;               /*  1664     0 */
ppc64/vmlinux-3.0.101-0.31-default.debug
 /* XXX 92 bytes hole, try to pack */

 /* --- cacheline 16 boundary (1024 bytes) --- */
 struct zone_padding        _pad1_;               /*  1024     0 */
ppc64/vmlinux-3.0.101-0.31-ppc64.debug
 /* XXX 92 bytes hole, try to pack */

 /* --- cacheline 16 boundary (1024 bytes) --- */
 struct zone_padding        _pad1_;               /*  1024     0 */
ppc64/vmlinux-3.0.101-0.31-trace.debug
 /* XXX 92 bytes hole, try to pack */

 /* --- cacheline 16 boundary (1024 bytes) --- */
 struct zone_padding        _pad1_;               /*  1024     0 */
s390x/vmlinux-3.0.101-0.31-default.debug
 /* XXX 116 bytes hole, try to pack */

 /* --- cacheline 16 boundary (1024 bytes) --- */
 struct zone_padding        _pad1_;               /*  1024     0 */
s390x/vmlinux-3.0.101-0.31-trace.debug
 /* XXX 116 bytes hole, try to pack */

 /* --- cacheline 16 boundary (1024 bytes) --- */
 struct zone_padding        _pad1_;               /*  1024     0 */
x86_64/vmlinux-3.0.101-0.31-default.debug
 /* XXX 36 bytes hole, try to pack */

 /* --- cacheline 18 boundary (1152 bytes) --- */
 struct zone_padding        _pad1_;               /*  1152     0 */
x86_64/vmlinux-3.0.101-0.31-ec2.debug
 /* XXX 60 bytes hole, try to pack */

 /* --- cacheline 18 boundary (1152 bytes) --- */
 struct zone_padding        _pad1_;               /*  1152     0 */
x86_64/vmlinux-3.0.101-0.31-trace.debug
 /* XXX 36 bytes hole, try to pack */

 /* --- cacheline 18 boundary (1152 bytes) --- */
 struct zone_padding        _pad1_;               /*  1152     0 */
x86_64/vmlinux-3.0.101-0.31-xen.debug
 /* XXX 60 bytes hole, try to pack */

 /* --- cacheline 18 boundary (1152 bytes) --- */
 struct zone_padding        _pad1_;               /*  1152     0 */

Signed-off-by: Michal Hocko <mhocko@suse.cz>
Acked-by: 

---
 include/linux/mmzone.h |    2 ++
 1 file changed, 2 insertions(+)

--- a/include/linux/mmzone.h
+++ b/include/linux/mmzone.h
@@ -349,6 +349,7 @@
 	unsigned int		compact_considered;
 	unsigned int		compact_defer_shift;
 #endif
+#ifndef __GENKSYMS__
 	/*
 	 * This atomic counter is set when there is pagecache limit
 	 * reclaim going on on this particular zone. Other potential
@@ -356,6 +357,7 @@
 	 * bouncing.
 	 */
 	atomic_t		pagecache_reclaim;
+#endif
 
 	ZONE_PADDING(_pad1_)
 
