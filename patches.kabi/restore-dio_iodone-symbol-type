From: Ben Myers <bpm@sgi.com>
Subject: Hide kABI change caused by a change of prototype of dio_iodone_t
References: bnc#622597
Patch-mainline: no

Contrive not to change dio_iodone_t to avoid an ABI issue by twiddling the
low order bit in a function pointer.  Jan Kara <jack@novell.com> gets
credit for the original idea and I have plagarized Alex Elder's
<aelder@sgi.com> original but have kept the patch separate from the others
for testing purposes. 

Signed-off-by: Ben Myers <bpm@sgi.com>
Acked-by: Jan Kara <jack@suse.cz>

Index: linux-2.6.32/fs/direct-io.c
===================================================================
--- linux-2.6.32.orig/fs/direct-io.c
+++ linux-2.6.32/fs/direct-io.c
@@ -245,8 +245,18 @@ static int dio_complete(struct dio *dio,
 		ret = transferred;
 
 	if (dio->end_io && dio->result) {
-		dio->end_io(dio->iocb, offset, transferred,
-			    dio->map_bh.b_private, ret, is_async);
+		if (dio_iodone_is_new(dio->end_io)) {
+			new_dio_iodone_t *end_io =
+				dio_iodone_to_new_dio_iodone(dio->end_io);
+
+			end_io(dio->iocb, offset, transferred,
+					dio->map_bh.b_private, ret, is_async);
+		} else {
+			dio->end_io(dio->iocb, offset, transferred,
+					dio->map_bh.b_private);
+			if (is_async)
+				aio_complete(dio->iocb, ret, 0);
+		}
 	} else if (is_async) {
 		aio_complete(dio->iocb, ret, 0);
 	}
Index: linux-2.6.32/fs/ext4/inode.c
===================================================================
--- linux-2.6.32.orig/fs/ext4/inode.c
+++ linux-2.6.32/fs/ext4/inode.c
@@ -3768,7 +3768,7 @@ static ssize_t ext4_ext_direct_IO(int rw
 					 inode->i_sb->s_bdev, iov,
 					 offset, nr_segs,
 					 ext4_get_block_dio_write,
-					 ext4_end_io_dio);
+					 new_dio_iodone_to_dio_iodone(ext4_end_io_dio));
 		if (iocb->private)
 			EXT4_I(inode)->cur_aio_dio = NULL;
 		/*
Index: linux-2.6.32/fs/ocfs2/aops.c
===================================================================
--- linux-2.6.32.orig/fs/ocfs2/aops.c
+++ linux-2.6.32/fs/ocfs2/aops.c
@@ -673,7 +673,7 @@ static ssize_t ocfs2_direct_IO(int rw,
 					    inode->i_sb->s_bdev, iov, offset,
 					    nr_segs,
 					    ocfs2_direct_IO_get_blocks,
-					    ocfs2_dio_end_io);
+					    new_dio_iodone_to_dio_iodone(ocfs2_dio_end_io));
 
 	mlog_exit(ret);
 	return ret;
Index: linux-2.6.32/fs/xfs/linux-2.6/xfs_aops.c
===================================================================
--- linux-2.6.32.orig/fs/xfs/linux-2.6/xfs_aops.c
+++ linux-2.6.32/fs/xfs/linux-2.6/xfs_aops.c
@@ -1553,13 +1553,13 @@ xfs_vm_direct_IO(
 		ret = blockdev_direct_IO_own_locking(rw, iocb, inode,
 			bdev, iov, offset, nr_segs,
 			xfs_get_blocks_direct,
-			xfs_end_io_direct);
+			new_dio_iodone_to_dio_iodone(xfs_end_io_direct));
 	} else {
 		iocb->private = xfs_alloc_ioend(inode, IOMAP_READ);
 		ret = blockdev_direct_IO_no_locking(rw, iocb, inode,
 			bdev, iov, offset, nr_segs,
 			xfs_get_blocks_direct,
-			xfs_end_io_direct);
+			new_dio_iodone_to_dio_iodone(xfs_end_io_direct));
 	}
 
 	if (unlikely(ret != -EIOCBQUEUED && iocb->private))
Index: linux-2.6.32/include/linux/fs.h
===================================================================
--- linux-2.6.32.orig/include/linux/fs.h
+++ linux-2.6.32/include/linux/fs.h
@@ -416,8 +416,20 @@ struct buffer_head;
 typedef int (get_block_t)(struct inode *inode, sector_t iblock,
 			struct buffer_head *bh_result, int create);
 typedef void (dio_iodone_t)(struct kiocb *iocb, loff_t offset,
-			ssize_t bytes, void *private, int ret,
-			bool is_async);
+			ssize_t bytes, void *private);
+
+typedef void (new_dio_iodone_t)(struct kiocb *iocb, loff_t offset,
+			ssize_t bytes, void *private,
+			int ret, bool is_async);
+
+/* Encode a new_dio_iodone_t function pointer as a dio_iodone_t */
+#define		new_dio_iodone_to_dio_iodone(f)	((dio_iodone_t *) ((unsigned long)(f) | 1))
+
+/* Extract an encoded new_dio_iodone_t from a dio_iodone_t value */
+#define		dio_iodone_to_new_dio_iodone(f)	((new_dio_iodone_t *) ((unsigned long)(f) ^ 1))
+
+/* Determine whether a dio_iodone_t contains an encoded new_dio_iodone_t */
+#define		dio_iodone_is_new(f)		((unsigned long)(f) & 1)
 
 /*
  * Attribute flags.  These should be or-ed together to figure out what
