From: David Sterba <dsterba@suse.cz>
Subject: kABI: fix update ulist_next signature change
Patch-mainline: never

The ulist_* functions are needlessly exported, but solely used by btrfs.

Signed-off-by: David Sterba <dsterba@suse.cz>
---
Index: linux-3.0-SLE11-SP2/fs/btrfs/backref.c
===================================================================
--- linux-3.0-SLE11-SP2.orig/fs/btrfs/backref.c
+++ linux-3.0-SLE11-SP2/fs/btrfs/backref.c
@@ -24,6 +24,9 @@
 #include "delayed-ref.h"
 #include "locking.h"
 
+/* KABI workaround */
+#define ulist_next __ulist_next
+
 /*
  * this structure records all encountered refs on the way up to the root
  */
@@ -1438,3 +1441,5 @@ void free_ipath(struct inode_fs_paths *i
 	kfree(ipath->fspath);
 	kfree(ipath);
 }
+
+#undef ulist_next
Index: linux-3.0-SLE11-SP2/fs/btrfs/ulist.c
===================================================================
--- linux-3.0-SLE11-SP2.orig/fs/btrfs/ulist.c
+++ linux-3.0-SLE11-SP2/fs/btrfs/ulist.c
@@ -201,7 +201,7 @@ EXPORT_SYMBOL(ulist_add);
  * It is allowed to call ulist_add during an enumeration. Newly added items
  * are guaranteed to show up in the running enumeration.
  */
-struct ulist_node *ulist_next(struct ulist *ulist, struct ulist_iterator *uiter)
+struct ulist_node *__ulist_next(struct ulist *ulist, struct ulist_iterator *uiter)
 {
 	if (ulist->nnodes == 0)
 		return NULL;
@@ -210,4 +210,10 @@ struct ulist_node *ulist_next(struct uli
 
 	return &ulist->nodes[uiter->i++];
 }
+
+struct ulist_node *ulist_next(struct ulist *ulist, struct ulist_node *uiter)
+{
+	/* KABI placeholder */
+	BUG();
+}
 EXPORT_SYMBOL(ulist_next);
Index: linux-3.0-SLE11-SP2/fs/btrfs/ulist.h
===================================================================
--- linux-3.0-SLE11-SP2.orig/fs/btrfs/ulist.h
+++ linux-3.0-SLE11-SP2/fs/btrfs/ulist.h
@@ -67,8 +67,11 @@ struct ulist *ulist_alloc(unsigned long
 void ulist_free(struct ulist *ulist);
 int ulist_add(struct ulist *ulist, u64 val, unsigned long aux,
 	      unsigned long gfp_mask);
-struct ulist_node *ulist_next(struct ulist *ulist,
+/* KABI-safe version */
+struct ulist_node *__ulist_next(struct ulist *ulist,
 			      struct ulist_iterator *uiter);
+struct ulist_node *ulist_next(struct ulist *ulist,
+			      struct ulist_node *uiter);
 
 #define ULIST_ITER_INIT(uiter) ((uiter)->i = 0)
 
