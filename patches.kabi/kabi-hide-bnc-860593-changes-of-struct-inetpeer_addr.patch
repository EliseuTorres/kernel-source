From: Michal Kubecek <mkubecek@suse.cz>
Date: Fri, 23 May 2014 17:44:57 +0200
Subject: kabi: hide bnc#860593 changes of struct inetpeer_addr_base
Patch-mainline: Never, kabi workaround
References: bnc#860593

These changes do not change layout as there are 12 unused bytes
after a4 (a4 has 4 bytes and a6 16 bytes) but the change must
be hidden from genksyms.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 include/net/inetpeer.h | 8 +++++++-
 net/ipv4/inetpeer.c    | 2 +-
 net/ipv4/route.c       | 8 ++++----
 3 files changed, 12 insertions(+), 6 deletions(-)

diff --git a/include/net/inetpeer.h b/include/net/inetpeer.h
index c5da2ad..30634f7 100644
--- a/include/net/inetpeer.h
+++ b/include/net/inetpeer.h
@@ -17,7 +17,14 @@
 
 struct inetpeer_addr_base {
 	union {
+#ifdef __GENKSYMS__
 		__be32			a4;
+#else
+		struct {
+			__be32		a4;
+			int		redirect_genid;
+		};
+#endif
 		__be32			a6[4];
 	};
 };
@@ -61,7 +68,6 @@ struct inet_peer {
 			__u32				tcp_ts_stamp;
 			u32				metrics[RTAX_MAX];
 			u32				rate_tokens;	/* rate limiting for ICMP */
-			int				redirect_genid;
 			unsigned long			rate_last;
 			unsigned long			pmtu_expires;
 			u32				pmtu_orig;
diff --git a/net/ipv4/inetpeer.c b/net/ipv4/inetpeer.c
index 85a528f..f528c4f 100644
--- a/net/ipv4/inetpeer.c
+++ b/net/ipv4/inetpeer.c
@@ -556,7 +556,7 @@ found:		/* The existing node has been found.
 		p->rate_last = 0;
 		p->pmtu_expires = 0;
 		p->pmtu_orig = 0;
-		p->redirect_genid = 0;
+		/* p->redirect_learned.redirect_genid is set with the union */
 		memset(&p->redirect_learned, 0, sizeof(p->redirect_learned));
 		p->base = base;
 		p->base_padding = NULL;
diff --git a/net/ipv4/route.c b/net/ipv4/route.c
index 68063d4..6564d0b 100644
--- a/net/ipv4/route.c
+++ b/net/ipv4/route.c
@@ -1467,9 +1467,9 @@ void ip_rt_redirect(__be32 old_gw, __be32 daddr, __be32 new_gw,
 					struct inet_peer *peer = rt_peer_ptr(rt);
 
 					if (peer->redirect_learned.a4 != new_gw ||
-					    peer->redirect_genid != redirect_genid) {
+					    peer->redirect_learned.redirect_genid != redirect_genid) {
 						peer->redirect_learned.a4 = new_gw;
-						peer->redirect_genid = redirect_genid;
+						peer->redirect_learned.redirect_genid = redirect_genid;
 						atomic_inc(&__rt_peer_genid);
 					}
 					check_peer_redir(&rt->dst, peer);
@@ -1778,7 +1778,7 @@ static struct dst_entry *ipv4_dst_check(struct dst_entry *dst, u32 cookie)
 			struct inet_peer *peer = rt_peer_ptr(rt);
 			check_peer_pmtu(dst, peer);
 
-			if (peer->redirect_genid != redirect_genid)
+			if (peer->redirect_learned.redirect_genid != redirect_genid)
 				peer->redirect_learned.a4 = 0;
 			if (peer->redirect_learned.a4 &&
 			    peer->redirect_learned.a4 != rt->rt_gateway) {
@@ -1938,7 +1938,7 @@ static void rt_init_metrics(struct rtable *rt, const struct flowi4 *fl4,
 		dst_init_metrics(&rt->dst, peer->metrics, false);
 
 		check_peer_pmtu(&rt->dst, peer);
-		if (peer->redirect_genid != redirect_genid)
+		if (peer->redirect_learned.redirect_genid != redirect_genid)
 			peer->redirect_learned.a4 = 0;
 		if (peer->redirect_learned.a4 &&
 		    peer->redirect_learned.a4 != rt->rt_gateway) {
-- 
1.8.4.5

