From f98d7113c9d6e026c8cb01c31c6a30db5c3a4c1f Mon Sep 17 00:00:00 2001
From: Jiri Slaby <jslaby@suse.cz>
Date: Tue, 28 Sep 2010 00:18:28 +0200
Subject: Revert "mm: make the mlock() stack guard page checks stricter"
Patch-mainline: never

This reverts commit b3ef5ce3d1bc48506a1ac5b046de0ccda7b02d07.

Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 mm/mlock.c |   21 +++++----------------
 1 files changed, 5 insertions(+), 16 deletions(-)

diff --git a/mm/mlock.c b/mm/mlock.c
index 380ea89..524d2a4 100644
--- a/mm/mlock.c
+++ b/mm/mlock.c
@@ -138,19 +138,6 @@ void munlock_vma_page(struct page *page)
 	}
 }
 
-/* Is the vma a continuation of the stack vma above it? */
-static inline int vma_stack_continue(struct vm_area_struct *vma, unsigned long addr)
-{
-	return vma && (vma->vm_end == addr) && (vma->vm_flags & VM_GROWSDOWN);
-}
-
-static inline int stack_guard_page(struct vm_area_struct *vma, unsigned long addr)
-{
-	return (vma->vm_flags & VM_GROWSDOWN) &&
-		(vma->vm_start == addr) &&
-		!vma_stack_continue(vma->vm_prev, addr);
-}
-
 /**
  * __mlock_vma_pages_range() -  mlock a range of pages in the vma.
  * @vma:   target vma
@@ -184,9 +171,11 @@ static long __mlock_vma_pages_range(struct vm_area_struct *vma,
 		gup_flags |= FOLL_WRITE;
 
 	/* We don't try to access the guard page of a stack vma */
-	if (stack_guard_page(vma, start)) {
-		addr += PAGE_SIZE;
-		nr_pages--;
+	if (vma->vm_flags & VM_GROWSDOWN) {
+		if (start == vma->vm_start) {
+			start += PAGE_SIZE;
+			nr_pages--;
+		}
 	}
 
 	while (nr_pages > 0) {
-- 
1.7.2.2

