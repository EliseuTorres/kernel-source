From: Nishanth Aravamudan <nacc@us.ibm.com>
Subject: avoid ppc-smt-idle-time-fix kABI breakage
Patch-mainline: never
References: bnc#678728

Signed-off-by: Nishanth Aravamudan <nacc@us.ibm.com>
Acked-by: Torsten Duwe <duwe@suse.de>

diff --git a/arch/powerpc/include/asm/paca.h b/arch/powerpc/include/asm/paca.h
index f194f33..743bb3c 100644
--- a/arch/powerpc/include/asm/paca.h
+++ b/arch/powerpc/include/asm/paca.h
@@ -35,9 +35,22 @@ extern unsigned int debug_smp_processor_id(void); /* from linux/smp.h */
 
 #define get_lppaca()	(get_paca()->lppaca_ptr)
 #define get_slb_shadow()	(get_paca()->slb_shadow_ptr)
+#define get_dtl_indirect_ptr()	((struct dtl_indirect_struct *)get_paca()->startpurr)
 
 struct task_struct;
 
+struct dtl_indirect_struct {
+	struct dtl_entry *dispatch_log;
+	struct dtl_entry *dispatch_log_end;
+	u64 user_time_scaled;           /* accumulated usermode SPURR ticks */
+	u64 starttime;                  /* TB value snapshot */
+	u64 starttime_user;             /* TB value on exit to usermode */
+	u64 utime_sspurr;               /* ->user_time when ->startspurr set */
+	u64 stolen_time;                /* TB ticks taken by hypervisor */
+	u64 dtl_ridx;                   /* read index in dispatch log */
+	struct dtl_entry *dtl_curr;     /* pointer corresponding to dtl_ridx */
+};
+
 /*
  * Defines the layout of the paca.
  *
@@ -81,8 +94,6 @@ struct paca_struct {
 #endif
 #ifdef CONFIG_PPC_STD_MMU_64
 	struct slb_shadow *slb_shadow_ptr;
-	struct dtl_entry *dispatch_log;
-	struct dtl_entry *dispatch_log_end;
 
 	/*
 	 * Now, starting in cacheline 2, the exception save areas
@@ -132,17 +143,12 @@ struct paca_struct {
 	/* Stuff for accurate time accounting */
 	u64 user_time;			/* accumulated usermode TB ticks */
 	u64 system_time;		/* accumulated system TB ticks */
-	u64 user_time_scaled;		/* accumulated usermode SPURR ticks */
-	u64 starttime;			/* TB value snapshot */
-	u64 starttime_user;		/* TB value on exit to usermode */
+	u64 startpurr;			/* Points to RMO memory area for DTL-based timekeeping */
 	u64 startspurr;			/* SPURR value snapshot */
-	u64 utime_sspurr;		/* ->user_time when ->startspurr set */
-	u64 stolen_time;		/* TB ticks taken by hypervisor */
-	u64 dtl_ridx;			/* read index in dispatch log */
-	struct dtl_entry *dtl_curr;	/* pointer corresponding to dtl_ridx */
 };
 
 extern struct paca_struct paca[];
+extern struct dtl_indirect_struct dtl_indirect[];
 extern void initialise_pacas(void);
 
 #endif /* __KERNEL__ */
diff --git a/arch/powerpc/include/asm/ppc_asm.h b/arch/powerpc/include/asm/ppc_asm.h
index 9821006..2a70268 100644
--- a/arch/powerpc/include/asm/ppc_asm.h
+++ b/arch/powerpc/include/asm/ppc_asm.h
@@ -32,8 +32,9 @@
 #define ACCOUNT_CPU_USER_ENTRY(ra, rb)					\
 	beq	2f;			/* if from kernel mode */	\
 	MFTB(ra);			/* get timebase */		\
-	ld	rb,PACA_STARTTIME_USER(r13);				\
-	std	ra,PACA_STARTTIME(r13);					\
+	ld	rb,DTLINDIRECTPTR(r13); /* get indirect DTL pointer */	\
+	std	ra,DTL_STARTTIME(rb);					\
+	ld	rb,DTL_STARTTIME_USER(rb);				\
 	subf	rb,rb,ra;		/* subtract start value */	\
 	ld	ra,PACA_USER_TIME(r13);					\
 	add	ra,ra,rb;		/* add on to user time */	\
@@ -42,8 +43,9 @@
 
 #define ACCOUNT_CPU_USER_EXIT(ra, rb)					\
 	MFTB(ra);			/* get timebase */		\
-	ld	rb,PACA_STARTTIME(r13);					\
-	std	ra,PACA_STARTTIME_USER(r13);				\
+	ld	rb,DTLINDIRECTPTR(r13); /*get indirect DTL pointer */	\
+	std	ra,DTL_STARTTIME_USER(rb);				\
+	ld	rb,DTL_STARTTIME(rb);					\
 	subf	rb,rb,ra;		/* subtract start value */	\
 	ld	ra,PACA_SYSTEM_TIME(r13);				\
 	add	ra,ra,rb;		/* add on to system time */	\
@@ -55,7 +57,8 @@ BEGIN_FW_FTR_SECTION;							\
 	beq	33f;							\
 	/* from user - see if there are any DTL entries to process */	\
 	ld	r10,PACALPPACAPTR(r13);	/* get ptr to VPA */		\
-	ld	r11,PACA_DTL_RIDX(r13);	/* get log read index */	\
+	ld	r11,DTLINDIRECTPTR(r13); /* get ptr to indirect DTL area */ \
+	ld	r11,DTL_DTL_RIDX(r11);	/* get log read index */	\
 	ld	r10,LPPACA_DTLIDX(r10);	/* get log write index */	\
 	cmpd	cr1,r11,r10;						\
 	beq+	cr1,33f;						\
diff --git a/arch/powerpc/kernel/asm-offsets.c b/arch/powerpc/kernel/asm-offsets.c
index 6112800..30e2e3f 100644
--- a/arch/powerpc/kernel/asm-offsets.c
+++ b/arch/powerpc/kernel/asm-offsets.c
@@ -170,6 +170,7 @@ int main(void)
 	DEFINE(PACA_EXMC, offsetof(struct paca_struct, exmc));
 	DEFINE(PACA_EXSLB, offsetof(struct paca_struct, exslb));
 	DEFINE(PACALPPACAPTR, offsetof(struct paca_struct, lppaca_ptr));
+	DEFINE(DTLINDIRECTPTR, offsetof(struct paca_struct, startpurr));
 	DEFINE(PACA_SLBSHADOWPTR, offsetof(struct paca_struct, slb_shadow_ptr));
 	DEFINE(SLBSHADOW_STACKVSID,
 	       offsetof(struct slb_shadow, save_area[SLB_NUM_BOLTED - 1].vsid));
@@ -181,13 +182,13 @@ int main(void)
 	DEFINE(LPPACADECRINT, offsetof(struct lppaca, int_dword.fields.decr_int));
 	DEFINE(SLBSHADOW_SAVEAREA, offsetof(struct slb_shadow, save_area));
 	DEFINE(LPPACA_DTLIDX, offsetof(struct lppaca, dtl_idx));
-	DEFINE(PACA_DTL_RIDX, offsetof(struct paca_struct, dtl_ridx));
+	DEFINE(DTL_DTL_RIDX, offsetof(struct dtl_indirect_struct, dtl_ridx));
 #endif /* CONFIG_PPC_STD_MMU_64 */
 	DEFINE(PACAEMERGSP, offsetof(struct paca_struct, emergency_sp));
 	DEFINE(PACAHWCPUID, offsetof(struct paca_struct, hw_cpu_id));
 	DEFINE(PACAKEXECSTATE, offsetof(struct paca_struct, kexec_state));
-	DEFINE(PACA_STARTTIME, offsetof(struct paca_struct, starttime));
-	DEFINE(PACA_STARTTIME_USER, offsetof(struct paca_struct, starttime_user));
+	DEFINE(DTL_STARTTIME, offsetof(struct dtl_indirect_struct, starttime));
+	DEFINE(DTL_STARTTIME_USER, offsetof(struct dtl_indirect_struct, starttime_user));
 	DEFINE(PACA_USER_TIME, offsetof(struct paca_struct, user_time));
 	DEFINE(PACA_SYSTEM_TIME, offsetof(struct paca_struct, system_time));
 	DEFINE(PACA_DATA_OFFSET, offsetof(struct paca_struct, data_offset));
diff --git a/arch/powerpc/kernel/entry_64.S b/arch/powerpc/kernel/entry_64.S
index f4973b0..3f68da9 100644
--- a/arch/powerpc/kernel/entry_64.S
+++ b/arch/powerpc/kernel/entry_64.S
@@ -102,7 +102,8 @@ BEGIN_FW_FTR_SECTION
 	beq	33f
 	/* if from user, see if there are any DTL entries to process */
 	ld	r10,PACALPPACAPTR(r13)	/* get ptr to VPA */
-	ld	r11,PACA_DTL_RIDX(r13)	/* get log read index */
+	ld	r11,DTLINDIRECTPTR(r13)	/* get ptr to indirect DTL area */
+	ld	r11,DTL_DTL_RIDX(r11)	/* get log read index */
 	ld	r10,LPPACA_DTLIDX(r10)	/* get log write index */
 	cmpd	cr1,r11,r10
 	beq+	cr1,33f
diff --git a/arch/powerpc/kernel/paca.c b/arch/powerpc/kernel/paca.c
index bf6598d..d3ffd08 100644
--- a/arch/powerpc/kernel/paca.c
+++ b/arch/powerpc/kernel/paca.c
@@ -73,6 +73,7 @@ struct slb_shadow slb_shadow[] __cacheline_aligned = {
  */
 struct paca_struct paca[NR_CPUS];
 EXPORT_SYMBOL(paca);
+struct dtl_indirect_struct dtl_indirect[NR_CPUS];
 
 void __init initialise_pacas(void)
 {
@@ -103,6 +104,7 @@ void __init initialise_pacas(void)
 #ifdef CONFIG_PPC_STD_MMU_64
 		new_paca->slb_shadow_ptr = &slb_shadow[cpu];
 #endif /* CONFIG_PPC_STD_MMU_64 */
+		new_paca->startpurr = (u64)&dtl_indirect[cpu];
 
 	}
 }
diff --git a/arch/powerpc/kernel/time.c b/arch/powerpc/kernel/time.c
index 145f8c9..3975a4a 100644
--- a/arch/powerpc/kernel/time.c
+++ b/arch/powerpc/kernel/time.c
@@ -232,9 +232,9 @@ static u64 read_spurr(u64 tb)
  */
 static u64 scan_dispatch_log(u64 stop_tb)
 {
-	u64 i = local_paca->dtl_ridx;
-	struct dtl_entry *dtl = local_paca->dtl_curr;
-	struct dtl_entry *dtl_end = local_paca->dispatch_log_end;
+	u64 i = get_dtl_indirect_ptr()->dtl_ridx;
+	struct dtl_entry *dtl = get_dtl_indirect_ptr()->dtl_curr;
+	struct dtl_entry *dtl_end = get_dtl_indirect_ptr()->dispatch_log_end;
 	struct lppaca *vpa = local_paca->lppaca_ptr;
 	u64 tb_delta;
 	u64 stolen = 0;
@@ -252,7 +252,7 @@ static u64 scan_dispatch_log(u64 stop_tb)
 		if (i + N_DISPATCH_LOG < vpa->dtl_idx) {
 			/* buffer has overflowed */
 			i = vpa->dtl_idx - N_DISPATCH_LOG;
-			dtl = local_paca->dispatch_log + (i % N_DISPATCH_LOG);
+			dtl = get_dtl_indirect_ptr()->dispatch_log + (i % N_DISPATCH_LOG);
 			continue;
 		}
 		if (dtb > stop_tb)
@@ -261,10 +261,10 @@ static u64 scan_dispatch_log(u64 stop_tb)
 		++i;
 		++dtl;
 		if (dtl == dtl_end)
-			dtl = local_paca->dispatch_log;
+			dtl = get_dtl_indirect_ptr()->dispatch_log;
 	}
-	local_paca->dtl_ridx = i;
-	local_paca->dtl_curr = dtl;
+	get_dtl_indirect_ptr()->dtl_ridx = i;
+	get_dtl_indirect_ptr()->dtl_curr = dtl;
 	return stolen;
 }
 
@@ -276,24 +276,24 @@ void accumulate_stolen_time(void)
 {
 	u64 sst, ust;
 
-	sst = scan_dispatch_log(get_paca()->starttime_user);
-	ust = scan_dispatch_log(get_paca()->starttime);
+	sst = scan_dispatch_log(get_dtl_indirect_ptr()->starttime_user);
+	ust = scan_dispatch_log(get_dtl_indirect_ptr()->starttime);
 	get_paca()->system_time -= sst;
 	get_paca()->user_time -= ust;
-	get_paca()->stolen_time += ust + sst;
+	get_dtl_indirect_ptr()->stolen_time += ust + sst;
 }
 
 static inline u64 calculate_stolen_time(u64 stop_tb)
 {
 	u64 stolen = 0;
 
-	if (get_paca()->dtl_ridx != get_paca()->lppaca_ptr->dtl_idx) {
+	if (get_dtl_indirect_ptr()->dtl_ridx != get_paca()->lppaca_ptr->dtl_idx) {
 		stolen = scan_dispatch_log(stop_tb);
 		get_paca()->system_time -= stolen;
 	}
 
-	stolen += get_paca()->stolen_time;
-	get_paca()->stolen_time = 0;
+	stolen += get_dtl_indirect_ptr()->stolen_time;
+	get_dtl_indirect_ptr()->stolen_time = 0;
 	return stolen;
 }
 
@@ -318,8 +318,8 @@ void account_system_vtime(struct task_struct *tsk)
 	local_irq_save(flags);
 	now = mftb();
 	nowscaled = read_spurr(now);
-	get_paca()->system_time += now - get_paca()->starttime;
-	get_paca()->starttime = now;
+	get_paca()->system_time += now - get_dtl_indirect_ptr()->starttime;
+	get_dtl_indirect_ptr()->starttime = now;
 	deltascaled = nowscaled - get_paca()->startspurr;
 	get_paca()->startspurr = nowscaled;
 
@@ -327,8 +327,8 @@ void account_system_vtime(struct task_struct *tsk)
 
 	delta = get_paca()->system_time;
 	get_paca()->system_time = 0;
-	udelta = get_paca()->user_time - get_paca()->utime_sspurr;
-	get_paca()->utime_sspurr = get_paca()->user_time;
+	udelta = get_paca()->user_time - get_dtl_indirect_ptr()->utime_sspurr;
+	get_dtl_indirect_ptr()->utime_sspurr = get_paca()->user_time;
 
 	/*
 	 * Because we don't read the SPURR on every kernel entry/exit,
@@ -350,7 +350,7 @@ void account_system_vtime(struct task_struct *tsk)
 			sys_scaled = deltascaled;
 		}
 	}
-	get_paca()->user_time_scaled += user_scaled;
+	get_dtl_indirect_ptr()->user_time_scaled += user_scaled;
 
 	if (in_irq() || idle_task(smp_processor_id()) != tsk) {
 		account_system_time(tsk, 0, delta, sys_scaled);
@@ -376,10 +376,10 @@ void account_process_tick(struct task_struct *tsk, int user_tick)
 	cputime_t utime, utimescaled;
 
 	utime = get_paca()->user_time;
-	utimescaled = get_paca()->user_time_scaled;
+	utimescaled = get_dtl_indirect_ptr()->user_time_scaled;
 	get_paca()->user_time = 0;
-	get_paca()->user_time_scaled = 0;
-	get_paca()->utime_sspurr = 0;
+	get_dtl_indirect_ptr()->user_time_scaled = 0;
+	get_dtl_indirect_ptr()->utime_sspurr = 0;
 	account_user_time(tsk, utime, utimescaled);
 }
 
diff --git a/arch/powerpc/platforms/pseries/lpar.c b/arch/powerpc/platforms/pseries/lpar.c
index 0de1a7d..c4cfd28 100644
--- a/arch/powerpc/platforms/pseries/lpar.c
+++ b/arch/powerpc/platforms/pseries/lpar.c
@@ -280,10 +280,10 @@ void vpa_init(int cpu)
 	 * Register dispatch trace log, if one has been allocated.
 	 */
 	pp = &paca[cpu];
-	dtl = pp->dispatch_log;
+	dtl = get_dtl_indirect_ptr()->dispatch_log;
 	if (dtl) {
-		pp->dtl_ridx = 0;
-		pp->dtl_curr = dtl;
+		get_dtl_indirect_ptr()->dtl_ridx = 0;
+		get_dtl_indirect_ptr()->dtl_curr = dtl;
 		lppaca[cpu].dtl_idx = 0;
 
 		/* hypervisor reads buffer length from this field */
diff --git a/arch/powerpc/platforms/pseries/setup.c b/arch/powerpc/platforms/pseries/setup.c
index 9abad41..4c1482f 100644
--- a/arch/powerpc/platforms/pseries/setup.c
+++ b/arch/powerpc/platforms/pseries/setup.c
@@ -286,6 +286,7 @@ static int alloc_dispatch_logs(void)
 	int cpu, ret;
 	struct paca_struct *pp;
 	struct dtl_entry *dtl;
+	struct dtl_indirect_struct *dtli;
 
 	if (!firmware_has_feature(FW_FEATURE_SPLPAR))
 		return 0;
@@ -301,16 +302,17 @@ static int alloc_dispatch_logs(void)
 			break;
 		}
 
-		pp->dtl_ridx = 0;
-		pp->dispatch_log = dtl;
-		pp->dispatch_log_end = dtl + N_DISPATCH_LOG;
-		pp->dtl_curr = dtl;
+		dtli = (struct dtl_indirect_struct *)pp->startpurr;
+		dtli->dtl_ridx = 0;
+		dtli->dispatch_log = dtl;
+		dtli->dispatch_log_end = dtl + N_DISPATCH_LOG;
+		dtli->dtl_curr = dtl;
 	}
 
 	/* Register the DTL for the current (boot) cpu */
-	dtl = get_paca()->dispatch_log;
-	get_paca()->dtl_ridx = 0;
-	get_paca()->dtl_curr = dtl;
+	dtl = get_dtl_indirect_ptr()->dispatch_log;
+	get_dtl_indirect_ptr()->dtl_ridx = 0;
+	get_dtl_indirect_ptr()->dtl_curr = dtl;
 	get_paca()->lppaca_ptr->dtl_idx = 0;
 
 	/* hypervisor reads buffer length from this field */
