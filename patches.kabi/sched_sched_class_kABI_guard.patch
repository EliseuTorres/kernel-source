Subject: sched: guard struct sched_class kABI changes
From: Mike Galbraith <mgalbraith@suse.de>
Date: Mon Aug 23 09:53:49 CEST 2010
Patch-mainline: never

sched: guard struct sched_class kABI changes

sched_class::foo() are used only by the scheduler, and changes to it
don't affect task_struct layout since sched_class is a pointer there,
so we can silence kABI checker with a little white lie.

Signed-off-by: Mike Galbraith <mgalbraith@suse.de>
Signed-off-by: Jiri Slaby <jslaby@suse.cz> [minimize the changes]
---
 include/linux/sched.h |   24 ++++++++++++++++++++++++
 1 file changed, 24 insertions(+)

--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1074,8 +1074,12 @@ struct sched_domain;
 struct sched_class {
 	const struct sched_class *next;
 
+#ifdef __GENKSYMS__
+	void (*enqueue_task) (struct rq *rq, struct task_struct *p, int wakeup);
+#else
 	void (*enqueue_task) (struct rq *rq, struct task_struct *p, int wakeup,
 			      bool head);
+#endif
 	void (*dequeue_task) (struct rq *rq, struct task_struct *p, int sleep);
 	void (*yield_task) (struct rq *rq);
 
@@ -1085,8 +1089,12 @@ struct sched_class {
 	void (*put_prev_task) (struct rq *rq, struct task_struct *p);
 
 #ifdef CONFIG_SMP
+#ifdef __GENKSYMS__
+	int  (*select_task_rq)(struct task_struct *p, int sd_flag, int flags);
+#else
 	int  (*select_task_rq)(struct rq *rq, struct task_struct *p,
 			       int sd_flag, int flags);
+#endif
 
 	unsigned long (*load_balance) (struct rq *this_rq, int this_cpu,
 			struct rq *busiest, unsigned long max_load_move,
@@ -1098,8 +1106,12 @@ struct sched_class {
 			      enum cpu_idle_type idle);
 	void (*pre_schedule) (struct rq *this_rq, struct task_struct *task);
 	void (*post_schedule) (struct rq *this_rq);
+#ifdef __GENKSYMS__
+	void (*task_wake_up) (struct rq *this_rq, struct task_struct *task);
+#else
 	void (*task_waking) (struct rq *this_rq, struct task_struct *task);
 	void (*task_woken) (struct rq *this_rq, struct task_struct *task);
+#endif
 
 	void (*set_cpus_allowed)(struct task_struct *p,
 				 const struct cpumask *newmask);
@@ -1110,7 +1122,11 @@ struct sched_class {
 
 	void (*set_curr_task) (struct rq *rq);
 	void (*task_tick) (struct rq *rq, struct task_struct *p, int queued);
+#ifdef __GENKSYMS__
+	void (*task_new) (struct rq *rq, struct task_struct *p);
+#else
 	void (*task_fork) (struct task_struct *p);
+#endif
 
 	void (*switched_from) (struct rq *this_rq, struct task_struct *task,
 			       int running);
@@ -1119,12 +1135,20 @@ struct sched_class {
 	void (*prio_changed) (struct rq *this_rq, struct task_struct *task,
 			     int oldprio, int running);
 
+#ifdef __GENKSYMS__
+	unsigned int (*get_rr_interval) (struct task_struct *task);
+#else
 	unsigned int (*get_rr_interval) (struct rq *rq,
 					 struct task_struct *task);
+#endif
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
+#ifdef __GENKSYMS__
+	void (*moved_group) (struct task_struct *p);
+#else
 	void (*task_move_group) (struct task_struct *p, int on_rq);
 #endif
+#endif
 };
 
 struct load_weight {
