From cafb19c8750c4b9501e9b634ab671e9ed899ac27 Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Tue, 18 Sep 2012 21:52:29 +0200
Subject: kABI: use net_generic to protect struct netns_ipv{4,6}
Patch-mainline: Never, kABI fix
References: bnc#779969

Upstream commit c8a627ed (inetpeer: add namespace support for
inetpeer) adds new field to struct netns_ipv4 and netns_ipv6.
Use net_generic() instead to keep kABI.

It also adds pointer to struct net as first argument of (exported)
inet_getpeer(). Rename the function to inet_getpeer_ns() and create
inet_getpeer() imitating old behaviour using new function.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 include/net/inetpeer.h   |   13 ++++++----
 include/net/netns/ipv4.h |    1 -
 include/net/netns/ipv6.h |    1 -
 net/ipv4/inetpeer.c      |   65 ++++++++++++++++++++++++++++++++--------------
 4 files changed, 53 insertions(+), 27 deletions(-)

diff --git a/include/net/inetpeer.h b/include/net/inetpeer.h
index d2dd781..9ec42b9 100644
--- a/include/net/inetpeer.h
+++ b/include/net/inetpeer.h
@@ -69,9 +69,12 @@ static inline bool inet_metrics_new(const struct inet_peer *p)
 }
 
 /* can be called with or without local BH being disabled */
-struct inet_peer *inet_getpeer(struct net *net,
-			       const struct inetpeer_addr *daddr,
-			       int create);
+struct inet_peer *inet_getpeer_ns(struct net *net,
+				  const struct inetpeer_addr *daddr,
+				  int create);
+
+/* not used in our code, left here to keep kABI */
+struct inet_peer *inet_getpeer(struct inetpeer_addr *daddr, int create);
 
 static inline struct inet_peer *inet_getpeer_v4(struct net *net,
 						__be32 v4daddr,
@@ -81,7 +84,7 @@ static inline struct inet_peer *inet_getpeer_v4(struct net *net,
 
 	daddr.addr.a4 = v4daddr;
 	daddr.family = AF_INET;
-	return inet_getpeer(net, &daddr, create);
+	return inet_getpeer_ns(net, &daddr, create);
 }
 
 static inline struct inet_peer *inet_getpeer_v6(struct net *net,
@@ -92,7 +95,7 @@ static inline struct inet_peer *inet_getpeer_v6(struct net *net,
 
 	ipv6_addr_copy((struct in6_addr *)daddr.addr.a6, v6daddr);
 	daddr.family = AF_INET6;
-	return inet_getpeer(net, &daddr, create);
+	return inet_getpeer_ns(net, &daddr, create);
 }
 
 /* can be called from BH context or outside */
diff --git a/include/net/netns/ipv4.h b/include/net/netns/ipv4.h
index e4e6495..b6922fc 100644
--- a/include/net/netns/ipv4.h
+++ b/include/net/netns/ipv4.h
@@ -30,7 +30,6 @@ struct netns_ipv4 {
 
 	struct sock		**icmp_sk;
 	struct sock		*tcp_sock;
-	struct inet_peer_base	*peers;
 	struct netns_frags	frags;
 #ifdef CONFIG_NETFILTER
 	struct xt_table		*iptable_filter;
diff --git a/include/net/netns/ipv6.h b/include/net/netns/ipv6.h
index de25376..81abfcb 100644
--- a/include/net/netns/ipv6.h
+++ b/include/net/netns/ipv6.h
@@ -31,7 +31,6 @@ struct netns_ipv6 {
 	struct netns_sysctl_ipv6 sysctl;
 	struct ipv6_devconf	*devconf_all;
 	struct ipv6_devconf	*devconf_dflt;
-	struct inet_peer_base	*peers;
 	struct netns_frags	frags;
 #ifdef CONFIG_NETFILTER
 	struct xt_table		*ip6table_filter;
diff --git a/net/ipv4/inetpeer.c b/net/ipv4/inetpeer.c
index 0b28d2e..8d14a0a 100644
--- a/net/ipv4/inetpeer.c
+++ b/net/ipv4/inetpeer.c
@@ -21,6 +21,10 @@
 #include <net/inetpeer.h>
 #include <net/secure_seq.h>
 
+#ifndef __GENKSYMS__
+#include <net/netns/generic.h>
+#endif
+
 /*
  *  Theory of operations.
  *  We keep one entry for each peer IP address.  The nodes contains long-living
@@ -86,6 +90,13 @@ struct inet_peer_base {
 	int		total;
 };
 
+struct netns_inetpeer {
+	struct inet_peer_base	*ipv4_peers;
+	struct inet_peer_base	*ipv6_peers;
+};
+
+static int inetpeer_net_id;
+
 #define PEER_MAXDEPTH 40 /* sufficient for about 2^27 nodes */
 
 /* Exported for sysctl_net_ipv4.  */
@@ -110,40 +121,46 @@ static DEFINE_TIMER(peer_periodic_timer, peer_check_expire, 0, 0);
 
 static int __net_init inetpeer_net_init(struct net *net)
 {
-	net->ipv4.peers = kzalloc(sizeof(struct inet_peer_base),
+	struct netns_inetpeer* nsp = net_generic(net, inetpeer_net_id);
+
+	nsp->ipv4_peers = kzalloc(sizeof(struct inet_peer_base),
 				  GFP_KERNEL);
-	if (net->ipv4.peers == NULL)
+	if (nsp->ipv4_peers == NULL)
 		return -ENOMEM;
 
-	net->ipv4.peers->root = peer_avl_empty_rcu;
-	seqlock_init(&net->ipv4.peers->lock);
+	nsp->ipv4_peers->root = peer_avl_empty_rcu;
+	seqlock_init(&nsp->ipv4_peers->lock);
 
-	net->ipv6.peers = kzalloc(sizeof(struct inet_peer_base),
+	nsp->ipv6_peers = kzalloc(sizeof(struct inet_peer_base),
 				  GFP_KERNEL);
-	if (net->ipv6.peers == NULL)
+	if (nsp->ipv6_peers == NULL)
 		goto out_ipv6;
 
-	net->ipv6.peers->root = peer_avl_empty_rcu;
-	seqlock_init(&net->ipv6.peers->lock);
+	nsp->ipv6_peers->root = peer_avl_empty_rcu;
+	seqlock_init(&nsp->ipv6_peers->lock);
 
 	return 0;
 out_ipv6:
-	kfree(net->ipv4.peers);
+	kfree(nsp->ipv4_peers);
 	return -ENOMEM;
 }
 
 static void __net_exit inetpeer_net_exit(struct net *net)
 {
-	kfree(net->ipv4.peers);
-	net->ipv4.peers = NULL;
+	struct netns_inetpeer* nsp = net_generic(net, inetpeer_net_id);
+
+	kfree(nsp->ipv4_peers);
+	nsp->ipv4_peers = NULL;
 
-	kfree(net->ipv6.peers);
-	net->ipv6.peers = NULL;
+	kfree(nsp->ipv6_peers);
+	nsp->ipv6_peers = NULL;
 }
 
 static struct pernet_operations inetpeer_ops = {
-	.init = inetpeer_net_init,
-	.exit = inetpeer_net_exit,
+	.init	= inetpeer_net_init,
+	.exit	= inetpeer_net_exit,
+	.id	= &inetpeer_net_id,
+	.size	= sizeof(struct netns_inetpeer),
 };
 
 /* Called from ip_output.c:ip_init  */
@@ -455,7 +472,9 @@ static void unlink_from_pool(struct inet_peer *p, struct inet_peer_base *base,
 static struct inet_peer_base *family_to_base(struct net *net,
 					     int family)
 {
-	return (family == AF_INET ? net->ipv4.peers : net->ipv6.peers);
+	struct netns_inetpeer* nsp = net_generic(net, inetpeer_net_id);
+
+	return (family == AF_INET ? nsp->ipv4_peers : nsp->ipv6_peers);
 }
 
 static struct inet_peer_base *peer_to_base(struct inet_peer *p)
@@ -501,9 +520,9 @@ static int cleanup_once(unsigned long ttl, struct inet_peer __rcu **stack[PEER_M
 }
 
 /* Called with or without local BH being disabled. */
-struct inet_peer *inet_getpeer(struct net *net,
-			       const struct inetpeer_addr *daddr,
-			       int create)
+struct inet_peer *inet_getpeer_ns(struct net *net,
+				  const struct inetpeer_addr *daddr,
+				  int create)
 {
 	struct inet_peer __rcu **stack[PEER_MAXDEPTH], ***stackptr;
 	struct inet_peer_base *base = family_to_base(net, daddr->family);
@@ -571,12 +590,18 @@ found:		/* The existing node has been found.
 
 	return p;
 }
+EXPORT_SYMBOL_GPL(inet_getpeer_ns);
+
+struct inet_peer *inet_getpeer(struct inetpeer_addr *daddr, int create)
+{
+	return inet_getpeer_ns(&init_net, daddr, create);
+}
+EXPORT_SYMBOL_GPL(inet_getpeer);
 
 static int compute_total(void)
 {
 	return v4_peers.total + v6_peers.total;
 }
-EXPORT_SYMBOL_GPL(inet_getpeer);
 
 /* Called with local BH disabled. */
 static void peer_check_expire(unsigned long dummy)
-- 
1.7.10.4

