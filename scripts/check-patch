#! /bin/sh

#############################################################################
# Copyright (c) 2008,2009 Novell, Inc.
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, contact Novell, Inc.
#
# To contact Novell about this file by physical or electronic mail,
# you may find current contact information at www.novell.com
#############################################################################

# Make sure we have a properly formatted patch header

set -e

usage()
{
    echo "Usage:"
    echo "  $0 [--relaxed] file.."
    echo "  $0 --stdin [--relaxed] [name]"
}

moan()
{
    echo "$*" >&2
    bad=1
}

check_patch()
{
    local filename=$1 content=$2
    local header="$(sed '/^--- /,$ d' "$content")"
    local required_headers="Subject From"

    if ! $relaxed; then
        required_headers="$required_headers Patch-mainline"
    fi
    for tag in $required_headers; do
        if ! echo "$header" | grep -iq "^$tag:.*[[:alnum:]]"; then
            moan "$filename: No $tag header"
        fi
    done

    # Allow patches without a suse signoff in private clones
    suse_domains_re='(suse\.(de|com|cz)|novell\.com)'
    if ! git var GIT_COMMITTER_IDENT | grep -Eiq "@$suse_domains_re>"; then
        return
    fi
    if ! echo "$header" | \
        grep -Eiqe "^(From|Signed-off-by|Acked-by|Reviewed-by):.*@(suse\.(de|com|cz)|novell\.com)\>"; then
        moan "$filename: An email address with @suse.de," \
             "@suse.com, @suse.cz, or @novell.com in the From," \
             "Signed-off-by, Acked-by, or Reviewed-by headers is required"
    fi

    if grep -HEn '^(---|\+\+\+) .*//' --label "$filename" <"$content" >&2; then
        moan "Please avoid double-slashes in filenames, it breaks series2git"
    fi
}


options=$(getopt -o h --long help,stdin,relaxed -- "$@")
if test $? -ne 0; then
    usage >&2
    exit 1
fi
eval set -- "$options"
stdin=false
relaxed=false
while :; do
    case "$1" in
    --stdin)
        stdin=true
        shift
        ;;
    --relaxed)
        relaxed=true
        shift
        ;;
    -h|--help)
        usage
        exit 0
        ;;
    --)
        shift
        break;
    esac
done

# We might be called via a symlink in .git/hooks
for f in scripts/check-patchfmt ../scripts/check-patchfmt ${0%/*}/check-patchfmt
do
	if test -x "$f"; then
		check2=$f
		break
	fi
done
if test -z "$check2"; then
	echo "Warning: could not find scripts/check-patchfmt" >&2
	check2=:
fi

bad=0
if $stdin; then
    case $# in
    0)
        filename="<stdin>"
        ;;
    1)
        filename=$1
        ;;
    *)
        echo "--stdin only works with a single filename" >&2
        usage >&2
        exit 1
    esac
    content=$(mktemp /tmp/check-patch.XXXXXXXXXX)
    trap "rm -f $content" EXIT
    cat >"$content"
    check_patch "$filename" "$content"
    if ! $check2 --stdin "$filename" <"$content" && ! $relaxed; then
	    bad=2
    fi
else
    if test $# -eq 0; then
        echo "No patches given" >&2
        usage >&2
        exit 1
    fi
    for filename in "$@"; do
        check_patch "$filename" "$filename"
	if ! $check2 "$filename" && ! $relaxed; then
		bad=2
	fi
    done
fi

if test $bad -eq 1; then
    echo "For more information, see the Patch Headers chapter in the README file." >&2
fi

exit $bad
