#! /bin/sh

#############################################################################
# Copyright (c) 2004-2006,2008-2010 Novell, Inc.
# All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, contact Novell, Inc.
#
# To contact Novell about this file by physical or electronic mail,
# you may find current contact information at www.novell.com
#############################################################################

# git commit wrapper, generates unified commit messages from patch headers

. ${0%/*}/wd-functions.sh

if ! $using_git; then
    echo "ERROR: not in a git working directory."
    exit 1
fi

scripts/check-cvs-add || exit 1

trap 'rm -rf "$tmpdir"' EXIT
tmpdir=$(mktemp -d /tmp/${0##*/}.XXXXXX)

log_entry() {
    local entry=$1

    echo "$entry" | fmt --width 65 | sed -e '1s/^/- /' -e '2,$s/^/  /'
}

patch_meta() {
    local patch=$1

    subject=$(formail -c -x Subject < "$patch" \
             | sed -e 's, *\[[#/ A-Za-z0-9-]*\],,')
    subject=${subject## }
    subject=${subject%.}

    set -- $(formail -c -x References -x Reference < "$patch")
    references="$*"
    case "$references" in
    None | none)
        references=
    esac
}

patch_log_entry() {
    local patch=$1 subject references old_subj old_ref old_patch="$tmpdir/old"

    git show "HEAD:$patch" >"$old_patch" 2>/dev/null
    patch_meta "$old_patch"
    old_subj="$subject"
    old_ref="$references"

    patch_meta "$patch"

    if test -z "$subject"; then
        # should not happen
        log_entry "$patch: ${references:+($references).}"
    elif test "$subject" != "$old_subj"; then
	log_entry "$subject${references:+ ($references)}."
    elif test "$references" != "$old_ref"; then
        # a new bugzilla reference suggest a non-trivial change
        log_entry "Update $patch${references:+ ($references)}."
    else
        log_entry "Refresh $patch."
    fi
}

do_commit()
{
    local message edit=--edit

    if test -z "${added[*]}${modified[*]}${deleted[*]}"; then
        echo "No modified files" >&2
        exit 1
    fi
    if test "$1" = "--no-edit"; then
        edit=
    fi
    message=$tmpdir/message
    echo >"$message"
    for file in "${added[@]}" "${modified[@]}"; do
        case "$file" in
        config/*)
            if [ -z "$configs_updated" ]; then
                log_entry "Update config files." >>"$message"
                configs_updated=1
            fi
            ;;
        patches.*)
            patch_log_entry "$file" >>"$message"
            ;;
        kabi/*/symvers-* | kabi/*/symtypes-* | kabi/*/symsets-* )
            if [ -z "$symvers_updated" ]; then
                log_entry "Update kabi files." >>"$message"
                symvers_updated=1
            fi
            ;;
        series.conf)
            # don't log changes in there
            ;;
        *)
            log_entry "$file: " >>"$message"
            ;;
        esac
    done
    for file in "${deleted[@]}"; do
        log_entry "Delete $file." >>"$message"
    done

    # If there is only one entry, remove the "-" bullet to make the git log
    # prettier. If there are multiple entries, we give up, because
    # scripts/gitlog2changes wouldn't know where to insert the bullets again
    if test $(grep -c '^- ' "$message") = 1; then
        sed -i 's/^[- ] //' "$message"
    fi

    if test -n "$edit" -a -e "$tmpdir/notice"; then
        cat "$_" >>"$message"
    fi
    git commit "$@" -F $message $edit
}

# Check if series.conf contains only patch additions and print the
# added patches in order of appearance.
check_series_diff()
{
    awk '
        /^\+\+\+ / {
            body = 1
            next
        }
        !body || # ignore the patch header
        /^[@ ]/ || # ignore line numbers and context
        /^[-+][[:blank:]]*(#.*)?$/ { # ignore whitespace and comments
            next
        }
        # added unguarded patches are OK
        /^\+[[:blank:]]*patches\.[^[:blank:]]*\// {
            print $2
            next
        }
        # anything else is a problem
        #{ print >"/dev/stderr" }
        { exit 1 }
    '
}

# Check if only new patches are being added and nothing more
only_patches()
{
    local file

    if test "${modified[*]}" != "series.conf"; then
        return 1
    fi
    if test -n "${deleted[*]}"; then
        return 1
    fi
    for file in "${added[@]}"; do
        case "$file" in
        patches.*/*)
            ;;
        *)
            return 1
        esac
    done
    git diff HEAD -- series.conf | check_series_diff >/dev/null || return
    return 0
}

# Delete patches in $@ from series.conf.
filter_series()
{
    local re

    if test $# -eq 0; then
        cat series.conf
        return
    fi
    # escape BRE special characters and colon (used as delimiter)
    set -- "${@//\\/\\\\}"
    set -- "${@//./\\.}"
    set -- "${@//\*/\\*}"
    set -- "${@//\[/\\[}"
    set -- "${@//\]/\\]}"
    set -- "${@//^/\\^}"
    set -- "${@//\$/\\\$}"
    set -- "${@//:/\\:}"
    re=$(printf '\\|%s' "$@")
    re="${re:2}"
    sed '\:^[[:space:]]*\('"$re"'\)[[:space:]]*\(#.*\)\?$: d' series.conf
}

# Commit patches one by one for better bisectability
commit_single_patches()
{
    local saved_index=$(git write-tree) patch series
    local added modified=() deleted=() no_edit

    # reset the index
    git read-tree HEAD
    set -- $(git diff HEAD -- series.conf | check_series_diff)
    if test $# -gt 1; then
        # Fix the author date so that scripts/gitlog2changes can group
        # the commits into a single rpm changelog entry
        export GIT_AUTHOR_DATE=$(date -R)
        for patch in "$@"; do
            patch_log_entry "$patch"
        done
        read -p 'Commit with these changelog messages? [Yn] '
        case "$REPLY" in
        "" | [Yy] | [Yy][Ee][Ss])
            no_edit=--no-edit
        esac
    fi
    while test $# -gt 0; do
        patch=$1
        shift
        # add a series.conf with a single new patch to the index
        series=$(filter_series "$@" | git hash-object -w --stdin)
        git read-tree $(git ls-tree HEAD | \
            sed -r "s/(.*)\\<[0-9a-f]{40}\\>(.*\\<series\.conf)$/\1$series\2/" \
            | git mktree)
        git add "$patch"
        added=("$patch")
        if test $# -gt 0; then
            cat >"$tmpdir/notice" <<EOF

# Patches are being committed one by one for better bisectability.
# There are $# more patches to commit.
EOF
        else
            rm -f "$tmpdir/notice"
        fi
        if ! do_commit $no_edit; then
            # restore the index so that the user does not need to git add
            # the patches again
            git read-tree "$saved_index"
            return 1
        fi
    done

}

added=($(git diff --name-only --diff-filter=A HEAD))
modified=($(git diff --name-only --diff-filter=MT HEAD))
deleted=($(git diff --name-only --diff-filter=D HEAD))

if only_patches; then
    commit_single_patches || exit
else
    # FIXME: -a should not be the default
    do_commit -a || exit
fi

branch=$(get_branch_name)
case "$branch" in
master | preload | slert* | SL*_BRANCH | openSUSE-??.? | \
SLE?? | SLE??-SP? | SLE??-SP?-RT)
    echo "after testing your changes, run"
    echo "    git push origin $branch"
esac

# vim: et:sts=4:sw=4
