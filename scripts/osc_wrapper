#!/bin/bash
#
# Building kernels with osc made easy

die()
{
	echo "$@" >&2
	exit 1
}

usage()
{
	die \
"Usage: $0 [build] <specfile>
       $0 upload project [directory]"
}

osc()
{
	echo "osc" $API "$@"
	command osc $API "$@"
}

_osc()
{
	command osc $API "$@"
}

try_spec()
{
	local spec=$1

	if test -e "$spec"; then
		echo "$spec"
		return 0
	elif test -e "kernel-source$VARIANT/$spec"; then
		echo "$_"
		return 0
	else
		return 1
	fi
}

find_spec()
{
	local spec

	case $(uname -m) in
	i?86)
		if try_spec kernel-pae.spec; then
			return 0
		fi
	esac
	if try_spec kernel-default.spec; then
		return 0
	fi
	if test -n "$VARIANT" && try_spec "kernel$VARIANT.spec"; then
		return 0
	fi
	if test -n "$VANILLA_ONLY"; then
		if try_spec kernel-vanilla.spec; then
			return 0
		fi
	fi
	echo "Unable to find a specfile to build" >&2
	return 1
}

check_dir_commit()
{
	local dir=$1 git_commit dir_commit

	git_commit=$(git rev-parse HEAD)
	dir_commit=$(sed -n 's/GIT Revision: //p' "$dir"/*source-timestamp)
	if test "$git_commit" != "$dir_commit"; then
		echo "$dir (${dir_commit:0:7}) does not match your current HEAD (${git_commit:0:7})" >&2
		echo "Maybe you forgot to run scripts/tar-up.sh?" >&2
	fi
}

get_branch()
{
	local res version sp

	# First, try the local branch name
	res=$(sed -ne 's|^ref: refs/heads/||p' "$topdir/.git/HEAD" 2>/dev/null)
	if test -n "$res"; then
		if project_exists "$kotd_namespace:$res"; then
			echo "$res"
			return
		fi
		echo "Warning: $kotd_namespace:$res not found at $WEBCLIENT, trying harder" >&2
		res=
	else
		echo "Warning: Could not determine your git branch" >&2
	fi
	# For SLE branches, try IBS_PROJECT
	case "$IBS_PROJECT" in
	SUSE:SLE-*)
		# SUSE:SLE-10-SP4:Update -> 10-SP4:Update
		version=${IBS_PROJECT#SUSE:SLE-}
		# 10-SP4:Update -> 4:Update
		sp=${version#*-SP}
		if test "$sp" != "$version"; then
			# 4:Update -> 4
			sp=${sp%%:*}
		else
			sp=
		fi
		# 10-SP4:Update -> 10
		# 12:GA -> 12
		version=${version%%[-:]*}
		if test "$version" -ge 11; then
			res="SLE$version"
		else
			res="SLES$version"
		fi
		if test -n "$sp"; then
			res="$res-SP$sp"
		fi
		if project_exists "$kotd_namespace:$res"; then
			echo "$res"
			return
		fi
		echo "Branch $kotd_namespace:$res not found at $WEBCLIENT" >&2
		exit 1
	esac
	case "$OBS_PROJECT" in
	openSUSE:Factory*)
		if $internal; then
			res=master
		else
			res=HEAD
		fi
		;;
	openSUSE:*)
		version=${OBS_PROJECT#openSUSE:}
		version=${version%%:*}
		res="openSUSE-$version"
		;;
	esac
	if test -n "$res"; then
		if project_exists "$kotd_namespace:$res"; then
			echo "$res"
			return
		fi
		echo "Branch $kotd_namespace:$res not found at $WEBCLIENT" >&2
	else
		echo "Could not determine the official name of this branch" >&2
	fi
	exit 1
}


setup_api()
{
	local wanted=$1 internal=false kotd_namespace branch

	if test "$wanted" = "--ibs"; then
		internal=true
	elif test -z "$wanted"; then
		if test -z "$OBS_PROJECT"; then
			echo "Using the IBS"
			internal=true
		fi
	fi
	if $internal; then
		API="-A https://api.suse.de"
		WEBCLIENT="https://build.suse.de"
		ARCHS="i586 x86_64 ia64 ppc ppc64 ppc64le s390 s390x"
		kotd_namespace="Devel:Kernel"
	else
		API="-A https://api.opensuse.org"
		WEBCLIENT="https://build.opensuse.org"
		ARCHS="i586 x86_64"
		kotd_namespace="Kernel"
	fi
	branch=$(get_branch) || exit
	PROJECT="$kotd_namespace:$branch"
}

create_package()
{
	local project=$1 package=$2

	local meta="<package project=\"$project\" name=\"$package\"><title>$package</title><description/></package>"
	echo "Creating package $package in project $project"
	echo "$meta" | _osc meta pkg -F - "$project" "$package" || exit
}

create_project()
{
	local project=$1

	local archs=$(printf '<arch>%s</arch>' $ARCHS)
	local repository="<repository name=\"standard\"><path repository=\"standard\" project=\"$PROJECT\"/>$archs</repository>"
	local title="<title>Kernel Builds for $(sed -n 's/^GIT Branch: //p' *source-timestamp)</title>"
	local meta="<project name=\"$project\">$title<description/>$repository</project>"
	echo "Creating project $project"
	echo "$meta" | _osc meta prj -F - "$project" || exit
}

package_exists()
{
	local project=$1 package=$2

	_osc meta pkg "$project" "$package" &>/dev/null
}

project_exists()
{
	local project=$1

	_osc meta prj "$project" &>/dev/null
}


#### build ####

do_build()
{
	local osc_args=() debuginfo=false checks=false kabi=true api

	while test $# -gt 0; do
		case "$1" in
		--enable-debug* | --debug*)
			debuginfo=true
			shift
			;;
		--disable-debug*)
			debuginfo=false
			shift
			;;
		--do-checks)
			checks=true
			shift
			;;
		--no-checks | --nochecks)
			checks=false
			shift
			;;
		--ibs | --obs)
			api=$1
			shift
			;;
		--ignore-kabi)
			kabi=false
			shift
			;;
		*.spec)
			if test $# -eq 1; then
				spec=$1
			else
				osc_args=("${osc_args[@]}" "$1")
			fi
			shift
			;;
		*)
			osc_args=("${osc_args[@]}" "$1")
			shift
			;;
		esac
	done
	if test -z "$spec"; then
		spec=$(find_spec) || usage
	fi
	check_dir_commit "$(dirname "$spec")"
	if $debuginfo; then
		osc_args=("${osc_args[@]}" --debuginfo)
	else
		osc_args=("${osc_args[@]}" --disable-debuginfo)
	fi
	if ! $checks; then
		osc_args=("${osc_args[@]}" --no-checks 
		--extra-pkgs=-brp-check-suse --extra-pkgs=-post-build-checks)
	fi
	if $kabi; then
		osc_args=("${osc_args[@]}" --define 'ignore_kabi_badness 0')
	fi

	arch=$(uname -m | sed 's/^i.86$/i586/')
	setup_api $api

	rm -rf "$(dirname "$spec")/.osc"
	osc build --local-package --alternative-project="$PROJECT" \
		"${osc_args[@]}" standard "$spec"
}

### upload ###

do_upload()
{
	case $1 in
	--ibs | --obs)
		setup_api $1
		shift
		;;
	*)
		setup_api
		;;
	esac
	case $# in
	1)
		home_project=$1
		spec=$(try_spec kernel-source$VARIANT.spec)
		if test -z "$spec"; then
			die "Can't find kernel-source$VARIANT directory"
		fi
		dir=$(dirname "$spec")
		;;
	2)
		home_project=$1
		dir=$2
		;;
	*)
		usage
	esac
	check_dir_commit "$dir"
	source_package="kernel-source$VARIANT"

	if test "$dir" != "."; then
		echo cd "$dir"
		cd "$dir"
	fi
	rm -rf .osc
	if ! project_exists "$home_project"; then
		create_project "$home_project"
	fi
	if ! package_exists "$home_project" "$source_package"; then
		create_package "$home_project" "$source_package"
	fi
	osc init "$home_project" "$source_package" || exit
	osc addremove || exit
	local skip_validation=
	if osc ci --skip-validation --help >/dev/null 2>&1; then
		skip_validation=--skip-validation
	fi
	osc ci $skip_validation -m "imported commit $(sed -n 's/^GIT Revision: //p' *source-timestamp)"
	for spec in *.spec; do
		pkg=${spec%.spec}
		case "$pkg" in
		"$source_package" | kernel-obs-*)
			continue
		esac
		osc linkpac -f -C copy "$home_project" "$source_package" \
		                    "$home_project" "$pkg" || exit
	done

	echo "Done. You can watch the build progress at"
	echo "  $WEBCLIENT/project/monitor?project=${home_project//:/%3A}"
}

command=
spec=
if ! osc help >/dev/null; then
	echo "Cannot run osc" >&2
	exit 1
fi
topdir=$(dirname "$0")/..

case "$1" in
build | upload)
	command=$1
	shift
	;;
-* | "" | *.spec)
	# "build" is the default
	command=build
	;;
*)
	usage
esac

source "$topdir/rpm/config.sh"
do_$command "$@"
