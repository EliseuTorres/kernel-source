#!/bin/sh
#
# Building kernels with osc made easy
#
# TODO: Add command to build kernels remotely, doing all the _link magic
# automatically

command=
spec=

die()
{
	echo "$@" >&2
	exit 1
}

usage()
{
	die "Usage: $0 [build] <specfile>"
}

if test $# -gt 2; then
	usage
fi

case "$1" in
build)
	command=$1
	shift
	;;
"" | *.spec)
	command=build
	;;
*)
	usage
esac

try_spec()
{
	local spec=$1

	if test -e "$spec"; then
		echo "$spec"
		return 0
	elif test -e "kernel-source/$spec"; then
		echo "kernel-source/$spec"
		return 0
	else
		return 1
	fi
}

find_spec()
{
	local spec

	case $(uname -m) in
	i?86)
		if try_spec kernel-pae.spec; then
			return 0
		fi
	esac
	if try_spec kernel-default.spec; then
		return 0
	fi
	echo "Unable to find a specfile to build" >&2
	return 1
}

if test -n "$1"; then
	spec=$1
else
	spec=$(find_spec) || usage
fi


project=
repo=standard
arch=$(uname -m | sed 's/^i.86$/i586/')
api=
source "$(dirname "$0")/config.sh"
if test -n "$OBS_PROJECT"; then
	project=$OBS_PROJECT
	if test -n "$OBS_REPOSITORY"; then
		repo="$OBS_REPOSITORY"
	fi
fi
if test -z "$project" -a -n "$IBS_PROJECT"; then
	api="-A https://api.suse.de"
	project=$IBS_PROJECT
	if test -n "$IBS_REPOSITORY"; then
		repo="$IBS_REPOSITORY"
	fi
fi
if test -z "$project"; then
	die "Neither OBS_PROJECT nor IBS_PROJECT set in config.sh"
fi

set -x
osc $api build --local-package --alternative-project="$project" "$repo" "$spec"
