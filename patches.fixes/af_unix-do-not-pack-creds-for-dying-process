From: Goldwyn Rodrigues <rgoldwyn@suse.com>
Subject: Do not pack credentials for dying processes
Patch-mainline: no, done differently 16e5726269611b71c930054ffe9b858c1cea88eb
References: bnc#779577, bnc#803056

When stopping an lxc container with NFS mounts, the kernel crashes because
nsproxy is set to NULL, and unix_stream_sendmsg requires credentials to
send a packet. Do not pack credentials when the process is dying.

Signed-off-by: Goldwyn Rodrigues <rgoldwyn@suse.com>

--- 
---
 include/net/scm.h  |    6 ++++--
 net/core/scm.c     |    4 ++--
 net/unix/af_unix.c |    3 ++-
 3 files changed, 8 insertions(+), 5 deletions(-)

--- a/include/net/scm.h
+++ b/include/net/scm.h
@@ -49,7 +49,7 @@ static __inline__ void scm_set_cred(stru
 				    struct pid *pid, const struct cred *cred)
 {
 	scm->pid  = get_pid(pid);
-	scm->cred = get_cred(cred);
+	scm->cred = cred ? get_cred(cred) : NULL;
 	cred_to_ucred(pid, cred, &scm->creds, false);
 }
 
@@ -73,7 +73,9 @@ static __inline__ void scm_destroy(struc
 static __inline__ int scm_send(struct socket *sock, struct msghdr *msg,
 			       struct scm_cookie *scm)
 {
-	scm_set_cred(scm, task_tgid(current), current_cred());
+	memset(scm, 0, sizeof(*scm));
+	if (likely(current->nsproxy))
+		scm_set_cred(scm, task_tgid(current), current_cred());
 	scm->fp = NULL;
 	unix_get_peersec_dgram(sock, scm);
 	if (msg->msg_controllen <= 0)
--- a/net/core/scm.c
+++ b/net/core/scm.c
@@ -173,7 +173,7 @@ int __scm_send(struct socket *sock, stru
 			if (err)
 				goto error;
 
-			if (pid_vnr(p->pid) != p->creds.pid) {
+			if (!p->pid || pid_vnr(p->pid) != p->creds.pid) {
 				struct pid *pid;
 				err = -ESRCH;
 				pid = find_get_pid(p->creds.pid);
@@ -183,7 +183,7 @@ int __scm_send(struct socket *sock, stru
 				p->pid = pid;
 			}
 
-			if ((p->cred->euid != p->creds.uid) ||
+			if (!p->cred || (p->cred->euid != p->creds.uid) ||
 				(p->cred->egid != p->creds.gid)) {
 				struct cred *cred;
 				err = -ENOMEM;
--- a/net/unix/af_unix.c
+++ b/net/unix/af_unix.c
@@ -1385,7 +1385,8 @@ static int unix_scm_to_skb(struct scm_co
 {
 	int err = 0;
 	UNIXCB(skb).pid  = get_pid(scm->pid);
-	UNIXCB(skb).cred = get_cred(scm->cred);
+	if (scm->cred)
+		UNIXCB(skb).cred = get_cred(scm->cred);
 	UNIXCB(skb).fp = NULL;
 	if (scm->fp && send_fds)
 		err = unix_attach_fds(scm, skb);
