From: Jeff Layton <jlayton@redhat.com>
Date: Wed, 3 Apr 2013 10:27:36 -0400
Subject: cifs: on send failure, readjust server sequence number downward
Git-commit: ad313cb86dfba27f8f2306da304974ef17c91c56
Patch-mainline: 3.10
References: bnc#827966

If sending a call to the server fails for some reason (for instance, the
sending thread caught a signal), then we must readjust the sequence
number downward again or the next send will have it too high.

Signed-off-by: Jeff Layton <jlayton@redhat.com>
Signed-off-by: Steve French <sfrench@us.ibm.com>
Signed-off-by: Steve French <smfrench@gmail.com>
Acked-by: Miklos Szeredi <mszeredi@suse.cz>
---
 fs/cifs/transport.c |   16 ++++++++++++++++
 1 file changed, 16 insertions(+)

--- a/fs/cifs/transport.c
+++ b/fs/cifs/transport.c
@@ -389,6 +389,9 @@ cifs_call_async(struct TCP_Server_Info *
 	atomic_dec(&server->inSend);
 	mid->when_sent = jiffies;
 #endif
+
+	if (rc < 0)
+		server->sequence_number -= 2;
 	mutex_unlock(&server->srv_mutex);
 	if (rc)
 		goto out_err;
@@ -497,6 +500,9 @@ send_nt_cancel(struct TCP_Server_Info *s
 	 */
 	--server->sequence_number;
 	rc = smb_send(server, in_buf, be32_to_cpu(in_buf->smb_buf_length));
+	if (rc < 0)
+		server->sequence_number--;
+
 	mutex_unlock(&server->srv_mutex);
 
 	cFYI(1, "issued NT_CANCEL for mid %u, rc = %d",
@@ -591,6 +597,8 @@ SendReceive2(const unsigned int xid, str
 	midQ->when_sent = jiffies;
 #endif
 
+	if (rc < 0)
+		ses->server->sequence_number -= 2;
 	mutex_unlock(&ses->server->srv_mutex);
 
 	if (rc < 0) {
@@ -718,6 +726,10 @@ SendReceive(const unsigned int xid, stru
 	atomic_dec(&ses->server->inSend);
 	midQ->when_sent = jiffies;
 #endif
+
+	if (rc < 0)
+		ses->server->sequence_number -= 2;
+
 	mutex_unlock(&ses->server->srv_mutex);
 
 	if (rc < 0)
@@ -858,6 +870,10 @@ SendReceiveBlockingLock(const unsigned i
 	atomic_dec(&ses->server->inSend);
 	midQ->when_sent = jiffies;
 #endif
+
+	if (rc < 0)
+		ses->server->sequence_number -= 2;
+
 	mutex_unlock(&ses->server->srv_mutex);
 
 	if (rc < 0) {
