From: Trond Myklebust <Trond.Myklebust@netapp.com>
Date: Thu, 28 Mar 2013 14:01:33 -0400
Subject: [PATCH] NFSv4: Fix another reboot recovery race
Git-commit: 91876b13b8b3cbff5cca8476d4b4eebe5f6038cc
Patch-mainline: v3.10
References: bnc#916982

If the open_context for the file is not yet fully initialised,
then open recovery cannot succeed, and since nfs4_state_find_open_context
returns an ENOENT, we end up treating the file as being irrecoverable.

What we really want to do, is just defer the recovery until later.

[neilb: removing the nfs4_wait_clnt_recover() call also fixes a
   deadlock, as that can wait for the state manager which is waiting
   for a seqid lock that we hold]


Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
Acked-by: NeilBrown <neilb@suse.de>

---
 fs/nfs/nfs4proc.c  |    8 +++-----
 fs/nfs/nfs4state.c |    2 ++
 2 files changed, 5 insertions(+), 5 deletions(-)

--- linux-3.0-SLE11-SP3.orig/fs/nfs/nfs4proc.c
+++ linux-3.0-SLE11-SP3/fs/nfs/nfs4proc.c
@@ -1295,7 +1295,7 @@ static int nfs4_open_reclaim(struct nfs4
 
 	ctx = nfs4_state_find_open_context(state);
 	if (IS_ERR(ctx))
-		return PTR_ERR(ctx);
+		return -EAGAIN;
 	ret = nfs4_do_open_reclaim(ctx, state);
 	put_nfs_open_context(ctx);
 	return ret;
@@ -1769,7 +1769,7 @@ static int nfs4_open_expired(struct nfs4
 
 	ctx = nfs4_state_find_open_context(state);
 	if (IS_ERR(ctx))
-		return PTR_ERR(ctx);
+		return -EAGAIN;
 	ret = nfs4_do_open_expired(ctx, state);
 	put_nfs_open_context(ctx);
 	return ret;
@@ -1819,10 +1819,8 @@ static int _nfs4_open_and_get_state(stru
 	if (ret != 0)
 		goto out;
 
-	if (read_seqcount_retry(&sp->so_reclaim_seqcount, seq)) {
+	if (read_seqcount_retry(&sp->so_reclaim_seqcount, seq))
 		nfs4_schedule_stateid_recovery(server, state);
-		nfs4_wait_clnt_recover(server->nfs_client);
-	}
 	*res = state;
 out:
 	return ret;
--- linux-3.0-SLE11-SP3.orig/fs/nfs/nfs4state.c
+++ linux-3.0-SLE11-SP3/fs/nfs/nfs4state.c
@@ -1284,6 +1284,8 @@ restart:
 				 * proceed.
 				 */
 				break;
+			case -EAGAIN:
+				ssleep(1);
 			case -NFS4ERR_ADMIN_REVOKED:
 			case -NFS4ERR_STALE_STATEID:
 			case -NFS4ERR_BAD_STATEID:
