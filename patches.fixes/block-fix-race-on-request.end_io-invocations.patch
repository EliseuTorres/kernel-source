From: Bart Van Assche <bvanassche@acm.org>
Date: Thu, 7 Jun 2012 18:41:14 +0000
Subject: block: Fix race on request.end_io invocations
Patch-Mainline: submitted to linux-scsi
References: bnc#738284

Some request.end_io implementations can be called safely without
the queue lock held while several other implementations assume
that the queue lock is held. So let's play it safe and make sure
that the queue lock is held around all end_io invocations. Found
this through source code review.

Note: blk_finish_request() already invokes request.end_io with
the queue lock held.

Signed-off-by: Bart Van Assche <bvanassche@acm.org>
Cc: Jens Axboe <axboe@kernel.dk>
Acked-by: Tejun Heo <tj@kernel.org>
Signed-off-by: Hannes Reinecke <hare@suse.de>
---
 block/blk-exec.c |    7 ++++---
 1 files changed, 4 insertions(+), 3 deletions(-)

diff --git a/block/blk-exec.c b/block/blk-exec.c
index fb2cbd5..284bf56 100644
--- a/block/blk-exec.c
+++ b/block/blk-exec.c
@@ -53,16 +53,17 @@ void blk_execute_rq_nowait(struct request_queue *q, struct gendisk *bd_disk,
 	WARN_ON(irqs_disabled());
 	spin_lock_irq(q->queue_lock);
 
+	rq->rq_disk = bd_disk;
+	rq->end_io = done;
+
 	if (unlikely(blk_queue_dead(q))) {
-		spin_unlock_irq(q->queue_lock);
 		rq->errors = -ENXIO;
 		if (rq->end_io)
 			rq->end_io(rq, rq->errors);
+		spin_unlock_irq(q->queue_lock);
 		return;
 	}
 
-	rq->rq_disk = bd_disk;
-	rq->end_io = done;
 	__elv_add_request(q, rq, where);
 	__blk_run_queue(q);
 	/* the queue is stopped so it won't be run */
-- 
1.7.4.2

