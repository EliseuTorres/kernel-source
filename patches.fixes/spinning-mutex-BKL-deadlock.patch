From: Tony Breeds <tonyb@au1.ibm.com>
Subject: Fix deadlock when acquiring mutex while holding BKL
References: bnc#590705
Patch-mainline: No (probably 2.6.34)

Some places in kernel (esp. Reiserfs) take mutex while holding BKL. Because
other paths take BKL while holding mutex, an AB-BA deadlock is possible when
we spin on mutex forever and thus never get to schedule() which drops BKL.
So do not spin on mutex if we are holding BKL.

Signed-off-by: Jan Kara <jack@suse.cz>

diff --git a/kernel/sched.c b/kernel/sched.c
index 4915d9a..1bd6e71 100644
--- a/kernel/sched.c
+++ b/kernel/sched.c
@@ -5579,6 +5579,11 @@ int mutex_spin_on_owner(struct mutex *lock, struct thread_info *owner)
 	if (!sched_feat(OWNER_SPIN))
 		return 0;
 
+	/* Don't spin if we hold the BKL, as "owner" may be in lock_kernel()
+	 * waiting for us */
+	if (current->lock_depth >= 0)
+		return 0;
+
 #ifdef CONFIG_DEBUG_PAGEALLOC
 	/*
 	 * Need to access the cpu field knowing that
