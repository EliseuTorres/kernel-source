From: Dave Chinner <dchinner@redhat.com>
Date: Fri, 5 Oct 2012 11:06:58 +1000
Subject: [PATCH] xfs: introduce XFS_BMAPI_STACK_SWITCH
Git-commit: 2455881c0b52f87be539c4c7deab1afff4d8a560
Patch-mainline: v3.8-rc1
References: bnc#815356

Certain allocation paths through xfs_bmapi_write() are in situations
where we have limited stack available. These are almost always in
the buffered IO writeback path when convertion delayed allocation
extents to real extents.

The current stack switch occurs for userdata allocations, which
means we also do stack switches for preallocation, direct IO and
unwritten extent conversion, even those these call chains have never
been implicated in a stack overrun.

Hence, let's target just the single stack overun offended for stack
switches. To do that, introduce a XFS_BMAPI_STACK_SWITCH flag that
the caller can pass xfs_bmapi_write() to indicate it should switch
stacks if it needs to do allocation.

Signed-off-by: Dave Chinner <dchinner@redhat.com>
Reviewed-by: Mark Tinguely <tinguely@sgi.com>
Signed-off-by: Ben Myers <bpm@sgi.com>
Acked-by: Jan Kara <jack@suse.cz>

---
 fs/xfs/xfs_alloc.c | 2 +-
 fs/xfs/xfs_alloc.h | 1 +
 fs/xfs/xfs_bmap.c  | 4 ++++
 fs/xfs/xfs_bmap.h  | 5 ++++-
 fs/xfs/xfs_iomap.c | 4 +++-
 5 files changed, 13 insertions(+), 3 deletions(-)

Index: linux-3.0-SLE11-SP3-xfs_stack_alloc/fs/xfs/xfs_alloc.c
===================================================================
--- linux-3.0-SLE11-SP3-xfs_stack_alloc.orig/fs/xfs/xfs_alloc.c
+++ linux-3.0-SLE11-SP3-xfs_stack_alloc/fs/xfs/xfs_alloc.c
@@ -2453,7 +2453,7 @@ xfs_alloc_vextent(
 {
 	DECLARE_COMPLETION_ONSTACK(done);
 
-	if (!args->userdata)
+	if (!args->stack_switch)
 		return __xfs_alloc_vextent(args);
 
 
Index: linux-3.0-SLE11-SP3-xfs_stack_alloc/fs/xfs/xfs_alloc.h
===================================================================
--- linux-3.0-SLE11-SP3-xfs_stack_alloc.orig/fs/xfs/xfs_alloc.h
+++ linux-3.0-SLE11-SP3-xfs_stack_alloc/fs/xfs/xfs_alloc.h
@@ -124,6 +124,7 @@ typedef struct xfs_alloc_arg {
 	struct completion *done;
 	struct work_struct work;
 	int		result;
+	char		stack_switch;
 } xfs_alloc_arg_t;
 
 /*
Index: linux-3.0-SLE11-SP3-xfs_stack_alloc/fs/xfs/xfs_bmap.c
===================================================================
--- linux-3.0-SLE11-SP3-xfs_stack_alloc.orig/fs/xfs/xfs_bmap.c
+++ linux-3.0-SLE11-SP3-xfs_stack_alloc/fs/xfs/xfs_bmap.c
@@ -2567,6 +2567,7 @@ xfs_bmap_btalloc(
 	args.tp = ap->tp;
 	args.mp = mp;
 	args.fsbno = ap->rval;
+	args.stack_switch = ap->stack_switch;
 
 	/* Trim the allocation back to the maximum an AG can fit. */
 	args.maxlen = MIN(ap->alen, XFS_ALLOC_AG_MAX_USABLE(mp));
@@ -4604,6 +4605,10 @@ xfs_bmapi(
 						goto error0;
 				} else
 					bma.aeof = 0;
+
+				if (flags & XFS_BMAPI_STACK_SWITCH)
+					bma.stack_switch = 1;
+
 				/*
 				 * Call allocator.
 				 */
Index: linux-3.0-SLE11-SP3-xfs_stack_alloc/fs/xfs/xfs_bmap.h
===================================================================
--- linux-3.0-SLE11-SP3-xfs_stack_alloc.orig/fs/xfs/xfs_bmap.h
+++ linux-3.0-SLE11-SP3-xfs_stack_alloc/fs/xfs/xfs_bmap.h
@@ -79,6 +79,7 @@ typedef	struct xfs_bmap_free
  * from written to unwritten, otherwise convert from unwritten to written.
  */
 #define XFS_BMAPI_CONVERT	0x200
+#define XFS_BMAPI_STACK_SWITCH	0x400
 
 #define XFS_BMAPI_FLAGS \
 	{ XFS_BMAPI_WRITE,	"WRITE" }, \
@@ -89,7 +90,8 @@ typedef	struct xfs_bmap_free
 	{ XFS_BMAPI_PREALLOC,	"PREALLOC" }, \
 	{ XFS_BMAPI_IGSTATE,	"IGSTATE" }, \
 	{ XFS_BMAPI_CONTIG,	"CONTIG" }, \
-	{ XFS_BMAPI_CONVERT,	"CONVERT" }
+	{ XFS_BMAPI_CONVERT,	"CONVERT" }, \
+	{ XFS_BMAPI_STACK_SWITCH, "STACK_SWITCH" }
 
 
 static inline int xfs_bmapi_aflag(int w)
@@ -130,6 +132,7 @@ typedef struct xfs_bmalloca {
 	char			low;	/* low on space, using seq'l ags */
 	char			aeof;	/* allocated space at eof */
 	char			conv;	/* overwriting unwritten extents */
+	char			stack_switch;
 } xfs_bmalloca_t;
 
 /*
Index: linux-3.0-SLE11-SP3-xfs_stack_alloc/fs/xfs/xfs_iomap.c
===================================================================
--- linux-3.0-SLE11-SP3-xfs_stack_alloc.orig/fs/xfs/xfs_iomap.c
+++ linux-3.0-SLE11-SP3-xfs_stack_alloc/fs/xfs/xfs_iomap.c
@@ -584,8 +584,8 @@ xfs_iomap_write_allocate(
 			 * pointer that the caller gave to us.
 			 */
 			error = xfs_bmapi(tp, ip, map_start_fsb, count_fsb,
-					XFS_BMAPI_WRITE, &first_block, 1,
-					imap, &nimaps, &free_list);
+				XFS_BMAPI_WRITE | XFS_BMAPI_STACK_SWITCH,
+				&first_block, 1, imap, &nimaps, &free_list);
 			if (error)
 				goto trans_cancel;
 
