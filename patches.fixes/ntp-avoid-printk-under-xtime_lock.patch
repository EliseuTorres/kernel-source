From: Jiri Bohac <jbohac@suse.cz>
Subject: ntp: avoid printk under xtime_lock
References: bnc#767684
Patch-mainline: not yet

Calling printk with xtime_lock held can lead to deadlocks.
This happens when console_sem is contended:

printk() -> vprintk() -> release_console_sem() ->
up(&console_sem) -> __up() -> wake_up_process() ->
try_to_wake_up() -> activate_task() -> enqueue_task_fair() ->
hrtick_update() -> hrtick_start_fair()  -> hrtick_start() ->
hrtimer_restart() -> hrtimer_start_expires() ->
hrtimer_start_range_ns() -> __hrtimer_start_range_ns() 

This does:
        tim = ktime_add_safe(tim, new_base->get_time());
This does ktime_get() or ktime_get_real() or
ktime_get_boottime(), all of them will spin on the xtime_lock.

Signed-off-by: Jiri Bohac <jbohac@suse.cz>

diff --git a/include/linux/time.h b/include/linux/time.h
--- a/include/linux/time.h
+++ b/include/linux/time.h
@@ -311,4 +311,13 @@ struct itimerval {
  */
 #define TIMER_ABSTIME			0x01
 
+extern char *leap_second_message;
+static inline void check_leap_second_message(void)
+{
+	if (unlikely(leap_second_message)) {
+		printk(leap_second_message);
+		leap_second_message = NULL;
+	}
+}
+
 #endif
diff --git a/kernel/time/ntp.c b/kernel/time/ntp.c
index f1eb182..7d02704 100644
--- a/kernel/time/ntp.c
+++ b/kernel/time/ntp.c
@@ -18,6 +18,8 @@
 
 #include "tick-internal.h"
 
+char *leap_second_message = NULL;
+
 /*
  * NTP timekeeping variables:
  */
@@ -379,7 +381,7 @@ int second_overflow(unsigned long secs)
 			leap = -1;
 			time_state = TIME_OOP;
 			time_tai++;
-			printk(KERN_NOTICE
+			leap_second_message = (KERN_NOTICE
 				"Clock: inserting leap second 23:59:60 UTC\n");
 		}
 		break;
@@ -388,7 +390,7 @@ int second_overflow(unsigned long secs)
 			leap = 1;
 			time_tai--;
 			time_state = TIME_WAIT;
-			printk(KERN_NOTICE
+			leap_second_message = (KERN_NOTICE
 				"Clock: deleting leap second 23:59:59 UTC\n");
 		}
 		break;
diff --git a/kernel/time/tick-common.c b/kernel/time/tick-common.c
index 119528d..86f9567 100644
--- a/kernel/time/tick-common.c
+++ b/kernel/time/tick-common.c
@@ -18,6 +18,7 @@
 #include <linux/percpu.h>
 #include <linux/profile.h>
 #include <linux/sched.h>
+#include <linux/time.h>
 
 #include <asm/irq_regs.h>
 
@@ -70,6 +71,7 @@ static void tick_periodic(int cpu)
 
 		do_timer(1);
 		write_sequnlock(&xtime_lock);
+		check_leap_second_message();
 	}
 
 	update_process_times(user_mode(get_irq_regs()));
diff --git a/kernel/time/tick-sched.c b/kernel/time/tick-sched.c
index e1d9a9d..add99be 100644
--- a/kernel/time/tick-sched.c
+++ b/kernel/time/tick-sched.c
@@ -20,6 +20,7 @@
 #include <linux/profile.h>
 #include <linux/sched.h>
 #include <linux/module.h>
+#include <linux/time.h>
 
 #include <asm/irq_regs.h>
 
@@ -80,6 +81,7 @@ static void tick_do_update_jiffies64(ktime_t now)
 		tick_next_period = ktime_add(last_jiffies_update, tick_period);
 	}
 	write_sequnlock(&xtime_lock);
+	check_leap_second_message();
 }
 
 /*
diff --git a/kernel/time/timekeeping.c b/kernel/time/timekeeping.c
index 3456e84..5590927 100644
--- a/kernel/time/timekeeping.c
+++ b/kernel/time/timekeeping.c
@@ -1193,4 +1193,5 @@ void xtime_update(unsigned long ticks)
 	write_seqlock(&xtime_lock);
 	do_timer(ticks);
 	write_sequnlock(&xtime_lock);
+	check_leap_second_message();
 }
