From: Anton Blanchard <anton@samba.org>
Subject: perf: Fix inconsistency between IP and callchain sampling
Patch-mainline: torvalds/linux-2.6.git 339ce1a4dc2ca26444c4f65c31b71a5056f3bb0b
References: FATE#311866, bnc#687789

    perf: Fix inconsistency between IP and callchain sampling

    When running perf across all cpus with backtracing (-a -g), sometimes we
    get samples without associated backtraces:

        23.44%         init  [kernel]                     [k] restore
        11.46%         init                       eeba0c  [k] 0x00000000eeba0c
         6.77%      swapper  [kernel]                     [k] .perf_ctx_adjust_freq
         5.73%         init  [kernel]                     [k] .__trace_hcall_entry
         4.69%         perf  libc-2.9.so                  [.] 0x0000000006bb8c
                           |
                           |--11.11%-- 0xfffa941bbbc

    It turns out the backtrace code has a check for the idle task and the IP
    sampling does not. This creates problems when profiling an interrupt
    heavy workload (in my case 10Gbit ethernet) since we get no backtraces
    for interrupts received while idle (ie most of the workload).

    Right now x86 and sh check that current is not NULL, which should never
    happen so remove that too.

    Idle task's exclusion must be performed from the core code, on top
    of perf_event_attr:exclude_idle.

Signed-off-by: Anton Blanchard <anton@samba.org>
Cc: Peter Zijlstra <a.p.zijlstra@chello.nl>
Cc: Paul Mackerras <paulus@samba.org>
Cc: Ingo Molnar <mingo@elte.hu>
Cc: Benjamin Herrenschmidt <benh@kernel.crashing.org>
Cc: Paul Mundt <lethal@linux-sh.org>
LKML-Reference: <20100118054707.GT12666@kryten>
Signed-off-by: Frederic Weisbecker <fweisbec@gmail.com>
Acked-by: Torsten Duwe <duwe@suse.de>

diff -Naur 2.6.32.35.orig/arch/powerpc/kernel/perf_callchain.c 2.6.32.35/arch/powerpc/kernel/perf_callchain.c
--- 2.6.32.35.orig/arch/powerpc/kernel/perf_callchain.c	2011-03-26 02:52:55.000000000 -0500
+++ 2.6.32.35/arch/powerpc/kernel/perf_callchain.c	2011-03-26 03:56:53.000000000 -0500
@@ -505,9 +505,6 @@
 
 	entry->nr = 0;
 
-	if (current->pid == 0)		/* idle task? */
-		return entry;
-
 	if (!user_mode(regs)) {
 		perf_callchain_kernel(regs, entry);
 		if (current->mm)
diff -Naur 2.6.32.35.orig/arch/x86/kernel/cpu/perf_event.c 2.6.32.35/arch/x86/kernel/cpu/perf_event.c
--- 2.6.32.35.orig/arch/x86/kernel/cpu/perf_event.c	2011-03-26 02:52:41.000000000 -0500
+++ 2.6.32.35/arch/x86/kernel/cpu/perf_event.c	2011-03-26 03:56:54.000000000 -0500
@@ -2371,9 +2371,6 @@
 
 	is_user = user_mode(regs);
 
-	if (!current || current->pid == 0)
-		return;
-
 	if (is_user && current->state != TASK_RUNNING)
 		return;
 
