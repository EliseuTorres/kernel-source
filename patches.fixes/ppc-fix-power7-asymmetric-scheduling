From: Vaidyanathan Srinivasan <svaidy@linux.vnet.ibm.com>
Subject: sched: Fix asymmetric scheduling for POWER7
Git-commit: 2042abe7977222ef606306faa2dce8fd51e98e65
Patch-mainline: v3.13-rc1
References: bnc#852591 
    
    Asymmetric scheduling within a core is a scheduler loadbalancing
    feature that is triggered when SD_ASYM_PACKING flag is set.  The goal
    for the load balancer is to move tasks to lower order idle SMT threads
    within a core on a POWER7 system.
    
    In nohz_kick_needed(), we intend to check if our sched domain (core)
    is completely busy or we have idle cpu.
    
    The following check for SD_ASYM_PACKING:
    
        (cpumask_first_and(nohz.idle_cpus_mask, sched_domain_span(sd)) < cpu)
    
    already covers the case of checking if the domain has an idle cpu,
    because cpumask_first_and() will not yield any set bits if this domain
    has no idle cpu.
    
    Hence, nr_busy check against group weight can be removed.
    
    Reported-by: Michael Neuling <michael.neuling@au1.ibm.com>
Signed-off-by: Vaidyanathan Srinivasan <svaidy@linux.vnet.ibm.com>
Signed-off-by: Preeti U Murthy <preeti@linux.vnet.ibm.com>
    Tested-by: Michael Neuling <mikey@neuling.org>
Signed-off-by: Peter Zijlstra <peterz@infradead.org>
    Cc: vincent.guittot@linaro.org
    Cc: bitbucket@online.de
    Cc: benh@kernel.crashing.org
    Cc: anton@samba.org
    Cc: Morten.Rasmussen@arm.com
    Cc: pjt@google.com
    Link: http://lkml.kernel.org/r/20131030031242.23426.13019.stgit@preeti.in.ibm.com
Signed-off-by: Ingo Molnar <mingo@kernel.org>
Acked-by: Torsten Duwe <duwe@suse.de>

 kernel/sched/fair.c |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 41c02b6..074551a 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -6800,7 +6800,7 @@ static inline int nohz_kick_needed(struct rq *rq, int cpu)
 		if (sd->flags & SD_SHARE_PKG_RESOURCES && nr_busy > 1)
 			goto need_kick_unlock;
 
-		if (sd->flags & SD_ASYM_PACKING && nr_busy != sg->group_weight
+		if (sd->flags & SD_ASYM_PACKING
 		    && (cpumask_first_and(nohz.idle_cpus_mask,
 					  sched_domain_span(sd)) < cpu))
 			goto need_kick_unlock;
