From: Michal Hocko <mhocko@suse.cz>
Subject: printk: Do not use printk_cpu from finish_printk
Patch-mainline: no
References: bnc#831949

finish_printk is called for both regular and nmi ringbuffers but printk_cpu is
updated only for the first one. This means that NMI context might access out of
date or even reseted value which confuses cpu_clock and its access to per-cpu
sched_clock_data and either blow up accessing an invalid memory or corrupting a
target memory.

Using printk_cpu blindly even doesn't make any sense so use the lock cpu
instead.

Here is a spectacular crash we have seen during bnc#831949 resting:
PID: 0      TASK: ffff8a9bedeae540  CPU: 57  COMMAND: "kworker/0:1"
 #0 [ffff8dc01f9c78a0] machine_kexec at ffffffff810267be
 #1 [ffff8dc01f9c78f0] crash_kexec at ffffffff810a403a
 #2 [ffff8dc01f9c79c0] oops_end at ffffffff814487a8
 #3 [ffff8dc01f9c79e0] __bad_area_nosemaphore at ffffffff81032575
 #4 [ffff8dc01f9c7aa0] do_page_fault at ffffffff8144ad06
 #5 [ffff8dc01f9c7ba0] page_fault at ffffffff81447965
    [exception RIP: sched_clock_cpu+112]
    RIP: ffffffff81082440  RSP: ffff8dc01f9c7c58  RFLAGS: 00010046
    RAX: 00000488529e9648  RBX: 0000000f00011c8e  RCX: 00000488529e9648
    RDX: 00000488529e9648  RSI: 00000488529e9648  RDI: ffff8dc01f9d1c90
    RBP: ffff8dc01f9d1c80   R8: 0000000f00011c9e   R9: 0000000000000000
    R10: 0000000000000001  R11: 0000000000000000  R12: ffffffff81059f60
    R13: 0000000000000000  R14: ffffffff81dcfee0  R15: ffffffff81dcfee0
    ORIG_RAX: ffffffffffffffff  CS: 0010  SS: 0018
 #6 [ffff8dc01f9c7c70] cpu_clock at ffffffff81082527
 #7 [ffff8dc01f9c7c80] finish_printk at ffffffff8105ad21
 #8 [ffff8dc01f9c7d20] vprintk at ffffffff8105af68
 #9 [ffff8dc01f9c7dc0] print_modules at ffffffff81094eeb
#10 [ffff8dc01f9c7e00] show_registers at ffffffff810045c7
#11 [ffff8dc01f9c7e80] show_regs at ffffffff8100a859
#12 [ffff8dc01f9c7e90] arch_trigger_all_cpu_backtrace_handler at
ffffffff81448e4a
#13 [ffff8dc01f9c7eb0] notifier_call_chain at ffffffff8144aec7
#14 [ffff8dc01f9c7ee0] __atomic_notifier_call_chain at ffffffff8144af0d
#15 [ffff8dc01f9c7ef0] notify_die at ffffffff8144af5d
#16 [ffff8dc01f9c7f20] default_do_nmi at ffffffff8144840b
#17 [ffff8dc01f9c7f40] do_nmi at ffffffff814485c8
#18 [ffff8dc01f9c7f50] nmi at ffffffff81447c20
    [exception RIP: mwait_idle+423]
    RIP: ffffffff8100b177  RSP: ffff8a9bedeb1f18  RFLAGS: 00000246
    RAX: 0000000000000000  RBX: ffff8a9bedeb0010  RCX: 0000000000000000
    RDX: 0000000000000000  RSI: ffff8a9bedeb1fd8  RDI: ffffffff81d2a108
    RBP: 0000000000000039   R8: 0000000000000000   R9: 0000000000000000
    R10: 0000000000000000  R11: ffffffff81020060  R12: 0000000000000000
    R13: 0000000000000000  R14: 0000000000000000  R15: 0000000000000000
    ORIG_RAX: ffffffffffffffff  CS: 0010  SS: 0018
--- <NMI exception stack> ---
#19 [ffff8a9bedeb1f18] mwait_idle at ffffffff8100b177
#20 [ffff8a9bedeb1f30] cpu_idle at ffffffff81002106PID: 0      TASK: ffff8a9bedeae540  CPU: 57  COMMAND: "kworker/0:1"

Signed-off-by: Michal Hocko <mhocko@suse.cz>

---
 kernel/printk.c |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

--- a/kernel/printk.c
+++ b/kernel/printk.c
@@ -990,7 +990,7 @@ static int finish_printk(char *msg, int
 				unsigned long long t;
 				unsigned long nanosec_rem;
 
-				t = cpu_clock(printk_cpu);
+				t = cpu_clock(smp_processor_id());
 				nanosec_rem = do_div(t, 1000000000);
 				tlen = sprintf(tbuf, "[%5lu.%06lu] ",
 						(unsigned long) t,
