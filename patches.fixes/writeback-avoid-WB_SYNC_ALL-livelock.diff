From: Jan Kara <jack@suse.cz>
Subject: writeback: avoid livelocking WB_SYNC_ALL writeback
Patch-mainline: yes
Git-commit-id: b9543dac5bbc4aef0a598965b6b34f6259ab9a9b
References: bnc#649000

When wb_writeback() is called in WB_SYNC_ALL mode, work->nr_to_write is
usually set to LONG_MAX.  The logic in wb_writeback() then calls
__writeback_inodes_sb() with nr_to_write == MAX_WRITEBACK_PAGES and we
easily end up with non-positive nr_to_write after the function returns, if
the inode has more than MAX_WRITEBACK_PAGES dirty pages at the moment.

When nr_to_write is <= 0 wb_writeback() decides we need another round of
writeback but this is wrong in some cases!  For example when a single
large file is continuously dirtied, we would never finish syncing it
because each pass would be able to write MAX_WRITEBACK_PAGES and inode
dirty timestamp never gets updated (as inode is never completely clean).
Thus __writeback_inodes_sb() would write the redirtied inode again and
again.

Fix the issue by setting nr_to_write to LONG_MAX in WB_SYNC_ALL mode.  We
do not need nr_to_write in WB_SYNC_ALL mode anyway since
write_cache_pages() writes the whole inode regardless of nr_to_write.

This makes wb_writeback() call __writeback_inodes_sb() only once on
WB_SYNC_ALL.

Signed-off-by: Jan Kara <jack@suse.cz>
Signed-off-by: Wu Fengguang <fengguang.wu@intel.com>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff -rupX /crypted/home/jack/.kerndiffexclude linux-2.6.32-writeback-SLE11-SP1-4-avoid_WB_SYNC_NONE_livelock/fs/fs-writeback.c linux-2.6.32-writeback-SLE11-SP1-5-avoid_WB_SYNC_ALL_livelock/fs/fs-writeback.c
--- linux-2.6.32-writeback-SLE11-SP1-4-avoid_WB_SYNC_NONE_livelock/fs/fs-writeback.c	2011-03-03 17:15:09.489652533 +0100
+++ linux-2.6.32-writeback-SLE11-SP1-5-avoid_WB_SYNC_ALL_livelock/fs/fs-writeback.c	2011-03-03 17:27:19.362653959 +0100
@@ -790,6 +790,7 @@ static long wb_writeback(struct bdi_writ
 	};
 	unsigned long oldest_jif;
 	long wrote = 0;
+	long write_chunk;
 	struct inode *inode;
 	unsigned long start_jif = jiffies;	/* Livelock avoidance */
 
@@ -803,6 +804,17 @@ static long wb_writeback(struct bdi_writ
 		wbc.range_end = LLONG_MAX;
 	}
 
+	/*
+	 * For WB_SYNC_ALL mode, write_cache_pages() writes the whole inode
+	 * regardless of wbc.nr_to_write and subsequent logic in wb_writeback()
+	 * will requeue inode for another round if wbc.nr_to_write <= 0 which
+	 * isn't needed in WB_SYNC_ALL mode.
+	 */
+	if (wbc.sync_mode == WB_SYNC_NONE)
+		write_chunk = MAX_WRITEBACK_PAGES;
+	else
+		write_chunk = LONG_MAX;
+
 	for (;;) {
 		/*
 		 * Stop writeback when nr_pages has been consumed
@@ -829,11 +841,11 @@ static long wb_writeback(struct bdi_writ
 
 		wbc.more_io = 0;
 		wbc.encountered_congestion = 0;
-		wbc.nr_to_write = MAX_WRITEBACK_PAGES;
+		wbc.nr_to_write = write_chunk;
 		wbc.pages_skipped = 0;
 		writeback_inodes_wb(wb, &wbc, args->locked, start_jif);
-		args->nr_pages -= MAX_WRITEBACK_PAGES - wbc.nr_to_write;
-		wrote += MAX_WRITEBACK_PAGES - wbc.nr_to_write;
+		args->nr_pages -= write_chunk - wbc.nr_to_write;
+		wrote += write_chunk - wbc.nr_to_write;
 
 		/*
 		 * If we consumed everything, see if we have more
@@ -848,7 +860,7 @@ static long wb_writeback(struct bdi_writ
 		/*
 		 * Did we write something? Try for more
 		 */
-		if (wbc.nr_to_write < MAX_WRITEBACK_PAGES)
+		if (wbc.nr_to_write < write_chunk)
 			continue;
 		/*
 		 * Nothing written. Wait for some inode to
