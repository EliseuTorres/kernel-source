From: Jan Kara <jack@suse.cz>
Subject: reiserfs: Lock buffers unconditionally in reiserfs_write_full_page()
References: bnc#716023
Patch-mainline: No (forgot to submit originally, submitted now)

Reiserfs in ordered data mode (which is default) writes file data during
transaction commit. This interacts with writeback and results in interleaved IO
of journal thread and flusher thread and thus increased amount of seeking. In
this case it is more advantageous to block on lock_buffer() in
reiserfs_write_full_page() to reduce contention between the flusher thread and
journal thread.

This effectively returns the code to the state before
1b430beee5e388605dfb092b214ef0320f752cf6 when the test:
  if (wbc->sync_mode != WB_SYNC_NONE || !wbc->nonblocking)
evaluated to true (and thus we used lock_buffer()) for all serious writeback.

This patch restores tiobench write throughput with 2 threads from ~55 MB/s back
to ~85 MB/s.

Signed-off-by: Jan Kara <jack@suse.cz>

diff -rupX /crypted/home/jack/.kerndiffexclude linux-2.6.32-SLE11-SP1/fs/reiserfs/inode.c linux-2.6.32-SLE11-SP1-1-reiserfs/fs/reiserfs/inode.c
--- linux-2.6.32-SLE11-SP1/fs/reiserfs/inode.c	2011-12-21 20:31:48.350564273 +0100
+++ linux-2.6.32-SLE11-SP1-1-reiserfs/fs/reiserfs/inode.c	2011-12-23 13:32:37.780514695 +0100
@@ -2418,14 +2418,7 @@ static int reiserfs_write_full_page(stru
 		/* from this point on, we know the buffer is mapped to a
 		 * real block and not a direct item
 		 */
-		if (wbc->sync_mode != WB_SYNC_NONE) {
-			lock_buffer(bh);
-		} else {
-			if (!trylock_buffer(bh)) {
-				redirty_page_for_writepage(wbc, page);
-				continue;
-			}
-		}
+		lock_buffer(bh);
 		if (test_clear_buffer_dirty(bh)) {
 			mark_buffer_async_write(bh);
 		} else {
