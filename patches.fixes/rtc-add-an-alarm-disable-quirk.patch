From f6ef446e3a36ae5db37bb29b4d1f3c3ae93445d7 Mon Sep 17 00:00:00 2001
From: Borislav Petkov <bp@suse.de>
Date: Thu, 18 Jul 2013 17:47:38 +0200
Subject: RTC: Add an alarm disable quirk
References: bnc#805740
Patch-mainline: unknown
Patch mainline: under discussion

41c7f7424259f ("rtc: Disable the alarm in the hardware (v2)") added the
functionality to disable the RTC wake alarm when shutting down the box.

However, there are at least two b0rked BIOSes we know about:

https://bugzilla.novell.com/show_bug.cgi?id=812592
https://bugzilla.novell.com/show_bug.cgi?id=805740

where, when wakeup alarm is enabled in the BIOS, the machine reboots
automatically right after shutdown, regardless of what wakeup time is
programmed.

Bisecting the issue lead to this patch so disable its functionality with
a DMI quirk only for those boxes.

Signed-off-by: Borislav Petkov <bp@suse.de>
Cc: Thomas Gleixner <tglx@linutronix.de>
Cc: John Stultz <john.stultz@linaro.org>
Cc: Rabin Vincent <rabin.vincent@stericsson.com>

---
 drivers/rtc/class.c     | 28 ++++++++++++++++++++++++++++
 drivers/rtc/interface.c |  8 ++++++++
 include/linux/rtc.h     |  1 +
 3 files changed, 37 insertions(+)

diff --git a/drivers/rtc/class.c b/drivers/rtc/class.c
index 4194e59e14cd..1a646d00d640 100644
--- a/drivers/rtc/class.c
+++ b/drivers/rtc/class.c
@@ -17,6 +17,9 @@
 #include <linux/idr.h>
 #include <linux/slab.h>
 #include <linux/workqueue.h>
+#ifndef __GENKSYMS__
+#include <linux/dmi.h>
+#endif
 
 #include "rtc-core.h"
 
@@ -25,6 +28,28 @@ static DEFINE_IDR(rtc_idr);
 static DEFINE_MUTEX(idr_lock);
 struct class *rtc_class;
 
+static int __init clear_disable_alarm(const struct dmi_system_id *id)
+{
+	rtc_disable_alarm = false;
+
+	pr_err("%s: Clear alarm disable\n", __func__);
+
+	return 0;
+}
+
+static const struct dmi_system_id rtc_quirks[] __initconst = {
+	/* https://bugzilla.novell.com/show_bug.cgi?id=805740 */
+	{
+		.callback = clear_disable_alarm,
+		.ident    = "IBM Truman",
+		.matches  = {
+			DMI_MATCH(DMI_SYS_VENDOR, "TOSHIBA"),
+			DMI_MATCH(DMI_PRODUCT_NAME, "4852570"),
+		},
+	},
+	{}
+};
+
 static void rtc_device_release(struct device *dev)
 {
 	struct rtc_device *rtc = to_rtc_device(dev);
@@ -238,6 +263,9 @@ static int __init rtc_init(void)
 	rtc_class->resume = rtc_resume;
 	rtc_dev_init();
 	rtc_sysfs_init(rtc_class);
+
+	dmi_check_system(rtc_quirks);
+
 	return 0;
 }
 
diff --git a/drivers/rtc/interface.c b/drivers/rtc/interface.c
index 636a2ec21810..e7869805417f 100644
--- a/drivers/rtc/interface.c
+++ b/drivers/rtc/interface.c
@@ -16,6 +16,11 @@
 #include <linux/log2.h>
 #include <linux/workqueue.h>
 
+/*
+ * Do not disable RTC alarm on shutdown - workaround for b0rked BIOSes.
+ */
+bool rtc_disable_alarm = true;
+
 static int rtc_timer_enqueue(struct rtc_device *rtc, struct rtc_timer *timer);
 static void rtc_timer_remove(struct rtc_device *rtc, struct rtc_timer *timer);
 
@@ -767,6 +772,9 @@ static void rtc_alarm_disable(struct rtc_device *rtc)
 	if (!rtc->ops || !rtc->ops->alarm_irq_enable)
 		return;
 
+	if (!rtc_disable_alarm)
+		return;
+
 	rtc->ops->alarm_irq_enable(rtc->dev.parent, false);
 }
 
diff --git a/include/linux/rtc.h b/include/linux/rtc.h
index 93f4d035076b..32303500596b 100644
--- a/include/linux/rtc.h
+++ b/include/linux/rtc.h
@@ -266,6 +266,7 @@ int rtc_timer_start(struct rtc_device *rtc, struct rtc_timer* timer,
 			ktime_t expires, ktime_t period);
 int rtc_timer_cancel(struct rtc_device *rtc, struct rtc_timer* timer);
 void rtc_timer_do_work(struct work_struct *work);
+extern bool rtc_disable_alarm;
 
 static inline bool is_leap_year(unsigned int year)
 {
-- 
1.8.3


