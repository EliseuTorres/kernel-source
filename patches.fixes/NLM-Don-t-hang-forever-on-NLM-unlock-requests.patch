From 0b760113a3a155269a3fba93a409c640031dd68f Mon Sep 17 00:00:00 2001
From: Trond Myklebust <Trond.Myklebust@netapp.com>
Date: Tue, 31 May 2011 15:15:34 -0400
Subject: [PATCH] NLM: Don't hang forever on NLM unlock requests
Patch-mainline: 0b760113a3a155269a3fba93a409c640031dd68f
References: bnc#702013 CVE-2011-2491

If the NLM daemon is killed on the NFS server, we can currently end up
hanging forever on an 'unlock' request, instead of aborting. Basically,
if the rpcbind request fails, or the server keeps returning garbage, we
really want to quit instead of retrying.

Tested-by: Vasily Averin <vvs@sw.ru>
Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
Cc: stable@kernel.org
Acked-by: Michal Hocko <mhocko@suse.cz>

---
 fs/lockd/clntproc.c          |    8 +++++++-
 include/linux/sunrpc/sched.h |    1 +
 net/sunrpc/clnt.c            |    3 +++
 net/sunrpc/sched.c           |    1 +
 4 files changed, 12 insertions(+), 1 deletion(-)
Index: linux-2.6.32-SLE11-SP1/fs/lockd/clntproc.c
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/fs/lockd/clntproc.c
+++ linux-2.6.32-SLE11-SP1/fs/lockd/clntproc.c
@@ -709,7 +709,13 @@ static void nlmclnt_unlock_callback(stru
 
 	if (task->tk_status < 0) {
 		dprintk("lockd: unlock failed (err = %d)\n", -task->tk_status);
-		goto retry_rebind;
+		switch (task->tk_status) {
+		case -EACCES:
+		case -EIO:
+			goto die;
+		default:
+			goto retry_rebind;
+		}
 	}
 	if (status == NLM_LCK_DENIED_GRACE_PERIOD) {
 		rpc_delay(task, NLMCLNT_GRACE_WAIT);
Index: linux-2.6.32-SLE11-SP1/include/linux/sunrpc/sched.h
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/include/linux/sunrpc/sched.h
+++ linux-2.6.32-SLE11-SP1/include/linux/sunrpc/sched.h
@@ -55,6 +55,7 @@ struct rpc_task {
 	struct rpc_message	tk_msg;		/* RPC call info */
 	__u8			tk_garb_retry;
 	__u8			tk_cred_retry;
+	__u8			tk_rebind_retry;
 
 	/*
 	 * callback	to be executed after waking up
Index: linux-2.6.32-SLE11-SP1/net/sunrpc/clnt.c
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/net/sunrpc/clnt.c
+++ linux-2.6.32-SLE11-SP1/net/sunrpc/clnt.c
@@ -1052,6 +1052,9 @@ call_bind_status(struct rpc_task *task)
 			status = -EOPNOTSUPP;
 			break;
 		}
+		if (task->tk_rebind_retry == 0)
+			break;
+		task->tk_rebind_retry--;
 		rpc_delay(task, 3*HZ);
 		goto retry_timeout;
 	case -ETIMEDOUT:
Index: linux-2.6.32-SLE11-SP1/net/sunrpc/sched.c
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/net/sunrpc/sched.c
+++ linux-2.6.32-SLE11-SP1/net/sunrpc/sched.c
@@ -789,6 +789,7 @@ static void rpc_init_task(struct rpc_tas
 	/* Initialize retry counters */
 	task->tk_garb_retry = 2;
 	task->tk_cred_retry = 2;
+	task->tk_rebind_retry = 2;
 
 	task->tk_priority = task_setup_data->priority - RPC_PRIORITY_LOW;
 	task->tk_owner = current->tgid;
