From: Jan Kara <jack@suse.cz>
Subject: writeback: stop background/kupdate works from livelocking other works
Patch-mainline: yes
Gid-commit-id: aa373cf550994623efb5d49a4d8775bafd10bbc1
References: bnc#649000

Background writeback is easily livelockable in a loop in wb_writeback() by
a process continuously re-dirtying pages (or continuously appending to a
file).  This is in fact intended as the target of background writeback is
to write dirty pages it can find as long as we are over
dirty_background_threshold.

But the above behavior gets inconvenient at times because no other work
queued in the flusher thread's queue gets processed.  In particular, since
e.g.  sync(1) relies on flusher thread to do all the IO for it, sync(1)
can hang forever waiting for flusher thread to do the work.

Generally, when a flusher thread has some work queued, someone submitted
the work to achieve a goal more specific than what background writeback
does.  Moreover by working on the specific work, we also reduce amount of
dirty pages which is exactly the target of background writeout.  So it
makes sense to give specific work a priority over a generic page cleaning.

Thus we interrupt background writeback if there is some other work to do.
We return to the background writeback after completing all the queued
work.

This may delay the writeback of expired inodes for a while, however the
expired inodes will eventually be flushed to disk as long as the other
works won't livelock.

[fengguang.wu@intel.com: update comment]
Signed-off-by: Jan Kara <jack@suse.cz>
Signed-off-by: Wu Fengguang <fengguang.wu@intel.com>
Cc: Johannes Weiner <hannes@cmpxchg.org>
Cc: Dave Chinner <david@fromorbit.com>
Cc: Christoph Hellwig <hch@lst.de>
Cc: Jan Engelhardt <jengelh@medozas.de>
Cc: Jens Axboe <axboe@kernel.dk>

Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
---
 fs/fs-writeback.c |   10 ++++++++++
 1 files changed, 10 insertions(+), 0 deletions(-)

Index: linux-2.6.32-writeback-SLE11-SP1/fs/fs-writeback.c
===================================================================
--- linux-2.6.32-writeback-SLE11-SP1.orig/fs/fs-writeback.c
+++ linux-2.6.32-writeback-SLE11-SP1/fs/fs-writeback.c
@@ -761,6 +761,24 @@ static inline bool over_bground_thresh(v
 		global_page_state(NR_UNSTABLE_NFS) >= background_thresh);
 }
 
+/* Is there unprocessed work in the list? */
+static int wb_work_pending(struct backing_dev_info *bdi,
+			   struct bdi_writeback *wb)
+{
+	struct bdi_work *work;
+	int ret = 0;
+
+	rcu_read_lock();
+	list_for_each_entry_rcu(work, &bdi->work_list, list) {
+		if (test_bit(wb->nr, &work->seen)) {
+			ret = 1;
+			break;
+		}
+	}
+	rcu_read_unlock();
+	return ret;
+}
+
 /*
  * Explicit flushing or periodic writeback of "old" data.
  *
@@ -809,6 +827,16 @@ static long wb_writeback(struct bdi_writ
 			break;
 
 		/*
+		 * Background writeout and kupdate-style writeback may
+		 * run forever. Stop them if there is other work to do
+		 * so that e.g. sync can proceed. They'll be restarted
+		 * after the other works are all done.
+		 */
+		if ((args->for_background || args->for_kupdate) &&
+		    wb_work_pending(wb->bdi, wb))
+			break;
+
+		/*
 		 * For background writeout, stop when we are below the
 		 * background dirty threshold
 		 */
