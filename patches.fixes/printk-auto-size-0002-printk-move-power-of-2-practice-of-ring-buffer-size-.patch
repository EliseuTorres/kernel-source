From: "Luis R. Rodriguez" <mcgrof@suse.com>
Date: Thu, 26 Jun 2014 10:42:48 +1000
Subject: [PATCH 2/4] printk: move power of 2 practice of ring buffer size to a
 helper
Patch-mainline: v3.17-rc1
Git-commit: c0a318a361e7652b8c4f7b91d3a31c771cf34e4f
References: bnc#835888

In practice the power of 2 practice of the size of the kernel ring buffer
remains purely historical but not a requirement, specially now that we
have LOG_ALIGN and use it for both static and dynamic allocations.  It
could have helped with implicit alignment back in the days given the even
the dynamically sized ring buffer was guaranteed to be aligned so long as
CONFIG_LOG_BUF_SHIFT was set to produce a __LOG_BUF_LEN which is
architecture aligned, since log_buf_len=n would be allowed only if it was
> __LOG_BUF_LEN and we always ended up rounding the log_buf_len=n to the
next power of 2 with roundup_pow_of_two(), any multiple of 2 then should
be also architecture aligned.  These assumptions of course relied heavily
on CONFIG_LOG_BUF_SHIFT producing an aligned value but users can always
change this.

We now have precise alignment requirements set for the log buffer size for
both static and dynamic allocations, but lets upkeep the old practice of
using powers of 2 for its size to help with easy expected scalable values
and the allocators for dynamic allocations.  We'll reuse this later so
move this into a helper.

Signed-off-by: Luis R. Rodriguez <mcgrof@suse.com>
Cc: Andrew Lunn <andrew@lunn.ch>
Cc: Stephen Warren <swarren@wwwdotorg.org>
Cc: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Cc: Michal Hocko <mhocko@suse.cz>
Cc: Petr Mladek <pmladek@suse.cz>
Cc: Joe Perches <joe@perches.com>
Cc: Arun KS <arunks.linux@gmail.com>
Cc: Kees Cook <keescook@chromium.org>
Cc: Davidlohr Bueso <davidlohr@hp.com>
Cc: Chris Metcalf <cmetcalf@tilera.com>
Cc: Jan Kara <jack@suse.cz>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
---
 kernel/printk/printk.c | 14 ++++++++++----
 1 file changed, 10 insertions(+), 4 deletions(-)

diff --git a/kernel/printk/printk.c b/kernel/printk/printk.c
index 8b0aa6cd0c9e..0b58bec576e2 100644
--- a/kernel/printk/printk.c
+++ b/kernel/printk/printk.c
@@ -785,15 +785,21 @@ void log_buf_kexec_setup(void)
 /* requested log_buf_len from kernel cmdline */
 static unsigned long __initdata new_log_buf_len;
 
-/* save requested log_buf_len since it's too early to process it */
-static int __init log_buf_len_setup(char *str)
+/* we practice scaling the ring buffer by powers of 2 */
+static void __init log_buf_len_update(unsigned size)
 {
-	unsigned size = memparse(str, &str);
-
 	if (size)
 		size = roundup_pow_of_two(size);
 	if (size > log_buf_len)
 		new_log_buf_len = size;
+}
+
+/* save requested log_buf_len since it's too early to process it */
+static int __init log_buf_len_setup(char *str)
+{
+	unsigned size = memparse(str, &str);
+
+	log_buf_len_update(size);
 
 	return 0;
 }
-- 
1.8.4

