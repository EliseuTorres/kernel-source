From: NeilBrown <neilb@suse.de>
Subject: md: add proper write-congestion reporting to RAID1.
Patch-mainline: 3.2
References: bnc#663678

RAID1 handles write requests by queuing them for handling by
a separate thread.  This is because when a write-intent-bitmap is
active we might need to update the bitmap first, so it is good to
queue a lot of writes, then do one big bitmap update for them all.

However writeback request devices to appear to be congested after a
while so it can make some guesstimate of throughput.  The infinite
queue defeats that (note that RAID5 has already has a finite queue so
it doesn't suffer from this problem).

So impose a limit on the number of pending write requests.  By default
it is 1024 which seems to be generally suitable.  Make it configurable
via module option just in case someone finds a regression.

Signed-off-by: NeilBrown <neilb@suse.de>
Acked-by: NeilBrown <neilb@suse.de>

---
 drivers/md/raid1.c |   19 +++++++++++++++++++
 drivers/md/raid1.h |    1 +
 2 files changed, 20 insertions(+)

--- linux-2.6.32-SLE11-SP1.orig/drivers/md/raid1.c
+++ linux-2.6.32-SLE11-SP1/drivers/md/raid1.c
@@ -570,6 +570,7 @@ static void raid1_unplug(struct request_
 	md_wakeup_thread(mddev->thread);
 }
 
+static int nr_requests = 1024;
 static int raid1_congested(void *data, int bits)
 {
 	mddev_t *mddev = data;
@@ -579,6 +580,10 @@ static int raid1_congested(void *data, i
 	if (mddev_congested(mddev, bits))
 		return 1;
 
+	if ((bits & (1 << BDI_async_congested)) &&
+	    conf->pending_count >= nr_requests)
+		return 1;
+
 	rcu_read_lock();
 	for (i = 0; i < mddev->raid_disks; i++) {
 		mdk_rdev_t *rdev = rcu_dereference(conf->mirrors[i].rdev);
@@ -613,7 +618,9 @@ static int flush_pending_writes(conf_t *
 		struct bio *bio;
 		bio = bio_list_get(&conf->pending_bio_list);
 		blk_remove_plug(conf->mddev->queue);
+		conf->pending_count = 0;
 		spin_unlock_irq(&conf->device_lock);
+		wake_up(&conf->wait_barrier);
 		/* flush any pending bitmap writes to
 		 * disk before proceeding w/ I/O */
 		bitmap_unplug(conf->mddev->bitmap);
@@ -783,6 +790,7 @@ static int make_request(struct request_q
 	struct bitmap *bitmap;
 	unsigned long flags;
 	struct bio_list bl;
+	int bl_count;
 	struct page **behind_pages = NULL;
 	const int rw = bio_data_dir(bio);
 	const bool do_sync = bio_rw_flagged(bio, BIO_RW_SYNCIO);
@@ -873,6 +881,11 @@ static int make_request(struct request_q
 	/*
 	 * WRITE:
 	 */
+	if (conf->pending_count >= nr_requests) {
+		md_wakeup_thread(mddev->thread);
+		wait_event(conf->wait_barrier,
+			   conf->pending_count < nr_requests);
+	}
 	/* first select target devices under spinlock and
 	 * inc refcount on their rdev.  Record them by setting
 	 * bios[x] to bio
@@ -949,6 +962,7 @@ static int make_request(struct request_q
 		set_bit(R1BIO_Barrier, &r1_bio->state);
 
 	bio_list_init(&bl);
+	bl_count = 0;
 	for (i = 0; i < disks; i++) {
 		struct bio *mbio;
 		if (!r1_bio->bios[i])
@@ -984,6 +998,7 @@ static int make_request(struct request_q
 		atomic_inc(&r1_bio->remaining);
 
 		bio_list_add(&bl, mbio);
+		bl_count++;
 	}
 	kfree(behind_pages); /* the behind pages are attached to the bios now */
 
@@ -991,6 +1006,7 @@ static int make_request(struct request_q
 				test_bit(R1BIO_BehindIO, &r1_bio->state));
 	spin_lock_irqsave(&conf->device_lock, flags);
 	bio_list_merge(&conf->pending_bio_list, &bl);
+	conf->pending_count += bl_count;
 	bio_list_init(&bl);
 
 	blk_plug_device(mddev->queue);
@@ -2035,6 +2051,7 @@ static int run(mddev_t *mddev)
 	init_waitqueue_head(&conf->wait_barrier);
 
 	bio_list_init(&conf->pending_bio_list);
+	conf->pending_count = 0;
 	bio_list_init(&conf->flushing_bio_list);
 
 
@@ -2330,3 +2347,5 @@ MODULE_LICENSE("GPL");
 MODULE_ALIAS("md-personality-3"); /* RAID1 */
 MODULE_ALIAS("md-raid1");
 MODULE_ALIAS("md-level-1");
+
+module_param(nr_requests, int, S_IRUGO|S_IWUSR);
--- linux-2.6.32-SLE11-SP1.orig/drivers/md/raid1.h
+++ linux-2.6.32-SLE11-SP1/drivers/md/raid1.h
@@ -35,6 +35,7 @@ struct r1_private_data_s {
 	struct list_head	retry_list;
 	/* queue pending writes and submit them on unplug */
 	struct bio_list		pending_bio_list;
+	int			pending_count;
 	/* queue of writes that have been unplugged */
 	struct bio_list		flushing_bio_list;
 
