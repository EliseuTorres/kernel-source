From 5a9e86054ad9e4dc6cf223bea53110420bf41e55 Mon Sep 17 00:00:00 2001
From: Jack Morgenstein <jackm@dev.mellanox.co.il>
Date: Tue, 30 Sep 2014 12:03:47 +0300
Subject: net/mlx4_core: Don't disable SRIOV if there are active VFs
Git-commit: bbb07af4cdfd0c154db4c636927bd262f71c6401
Patch-mainline: v3.18-rc1
References: bsc#927355


When unloading the host driver while there are VFs active on VMs,
the PF driver disabled sriov anyway, causing kernel crashes.

We now leave SRIOV enabled, to avoid that.

When the driver is reloaded, __mlx4_init_one is invoked on the PF.
It now checks to see if SRIOV is already enabled on the PF -- and
if so does not enable sriov again.

Signed-off-by: Tal Alon <talal@mellanox.com>
Signed-off-by: Jack Morgenstein <jackm@dev.mellanox.co.il>
Signed-off-by: Or Gerlitz <ogerlitz@mellanox.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Acked-by: Joerg Roedel <jroedel@suse.de>
(cherry picked from commit bbb07af4cdfd0c154db4c636927bd262f71c6401)
---
 drivers/net/ethernet/mellanox/mlx4/main.c | 26 +++++++++++++++++++-------
 1 file changed, 19 insertions(+), 7 deletions(-)

--- a/drivers/net/ethernet/mellanox/mlx4/main.c
+++ b/drivers/net/ethernet/mellanox/mlx4/main.c
@@ -2086,6 +2086,7 @@
 	struct mlx4_dev *dev;
 	int err;
 	int port;
+	int existing_vfs = 0;
 
 	pr_info(DRV_NAME ": Initializing %s\n", pci_name(pdev));
 
@@ -2201,7 +2202,15 @@
 
 		if (num_vfs) {
 			mlx4_warn(dev, "Enabling SR-IOV with %d VFs\n", num_vfs);
-			err = pci_enable_sriov(pdev, num_vfs);
+			existing_vfs = pci_num_vf(pdev);
+			if (existing_vfs) {
+				err = 0;
+				if (existing_vfs != num_vfs)
+					mlx4_err(dev, "SR-IOV was already enabled, but with num_vfs (%d) different than requested (%d)\n",
+						 existing_vfs, num_vfs);
+			} else {
+				err = pci_enable_sriov(pdev, num_vfs);
+			}
 			if (err) {
 				mlx4_err(dev, "Failed to enable SR-IOV, continuing without SR-IOV (err = %d).\n",
 					 err);
@@ -2367,7 +2376,7 @@
 	mlx4_cmd_cleanup(dev);
 
 err_sriov:
-	if (dev->flags & MLX4_FLAG_SRIOV)
+	if (dev->flags & MLX4_FLAG_SRIOV && !existing_vfs)
 		pci_disable_sriov(pdev);
 
 err_rel_own:
@@ -2398,13 +2407,16 @@
 	struct mlx4_dev  *dev  = pci_get_drvdata(pdev);
 	struct mlx4_priv *priv = mlx4_priv(dev);
 	int p;
+	int active_vfs = 0;
 
 	if (dev) {
-		/* in SRIOV it is not allowed to unload the pf's
-		 * driver while there are alive vf's */
+		/* Disabling SR-IOV is not allowed while there are active vf's */
 		if (mlx4_is_master(dev)) {
-			if (mlx4_how_many_lives_vf(dev))
-				printk(KERN_ERR "Removing PF when there are assigned VF's !!!\n");
+			active_vfs = mlx4_how_many_lives_vf(dev);
+			if (active_vfs) {
+				pr_warn("Removing PF when there are active VF's !!\n");
+				pr_warn("Will not disable SR-IOV.\n");
+			}
 		}
 		mlx4_stop_sense(dev);
 		mlx4_unregister_device(dev);
@@ -2448,7 +2460,7 @@
 
 		if (dev->flags & MLX4_FLAG_MSI_X)
 			pci_disable_msix(pdev);
-		if (dev->flags & MLX4_FLAG_SRIOV) {
+		if (dev->flags & MLX4_FLAG_SRIOV && !active_vfs) {
 			mlx4_warn(dev, "Disabling SR-IOV\n");
 			pci_disable_sriov(pdev);
 		}
