From e159332b9af4b04d882dbcfe1bb0117f0a6d4b58 Mon Sep 17 00:00:00 2001
From: Jan Kara <jack@suse.cz>
Date: Fri, 19 Dec 2014 12:03:53 +0100
Subject: [PATCH 1/4] udf: Verify i_size when loading inode
Git-commit: e159332b9af4b04d882dbcfe1bb0117f0a6d4b58
Patch-mainline: v3.19-rc3
References: bsc#933904 CVE-2014-9728 CVE-2014-9729

Verify that inode size is sane when loading inode with data stored in
ICB. Otherwise we may get confused later when working with the inode and
inode size is too big.

Cc: stable@vger.kernel.org
Reported-by: Carl Henrik Lunde <chlunde@ping.uio.no>
Signed-off-by: Jan Kara <jack@suse.cz>

---
 fs/udf/inode.c | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

Index: linux-3.0-SLE11-SP3/fs/udf/inode.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/fs/udf/inode.c
+++ linux-3.0-SLE11-SP3/fs/udf/inode.c
@@ -1396,6 +1396,24 @@ static void udf_fill_inode(struct inode
 							iinfo->i_lenEAttr;
 	}
 
+	/* Sanity checks for files in ICB so that we don't get confused later */
+	if (iinfo->i_alloc_type == ICBTAG_FLAG_AD_IN_ICB) {
+		/*
+		 * For file in ICB data is stored in allocation descriptor
+		 * so sizes should match
+		 */
+		if (iinfo->i_lenAlloc != inode->i_size) {
+			make_bad_inode(inode);
+			return;
+		}
+		/* File in ICB has to fit in there... */
+		if (inode->i_size > inode->i_sb->s_blocksize -
+					udf_file_entry_alloc_offset(inode)) {
+			make_bad_inode(inode);
+			return;
+		}
+	}
+
 	switch (fe->icbTag.fileType) {
 	case ICBTAG_FILE_TYPE_DIRECTORY:
 		inode->i_op = &udf_dir_inode_operations;
