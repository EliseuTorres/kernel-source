From: Al Viro <viro@zeniv.linux.org.uk>
Date: Sat Sep 14 17:32:12 2013 -0400
Subject: autofs4: close the races around autofs4_notify_daemon()
Git-commit: 606035e76e79b14bf7a7c219140c045a952cc76e
Patch-mainline: v3.12
References: bnc#851314

Don't drop ->wq_mutex before calling autofs4_notify_daemon() only to regain
it there.  Besides being pointless, that opens a race window where
autofs4_wait_release() could've come and freed wq->name.name.  And do the
debugging printk in the "reused an existing wq" case before dropping
->wq_mutex - the same reason...

Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
Acked-by: Ian Kent <raven@themaw.net>
Acked-by: Miklos Szeredi <mszeredi@suse.cz>
---
 fs/autofs4/waitq.c |   13 +++----------
 1 file changed, 3 insertions(+), 10 deletions(-)

--- a/fs/autofs4/waitq.c
+++ b/fs/autofs4/waitq.c
@@ -111,13 +111,7 @@ static void autofs4_notify_daemon(struct
 
 	pkt.hdr.proto_version = sbi->version;
 	pkt.hdr.type = type;
-	mutex_lock(&sbi->wq_mutex);
 
-	/* Check if we have become catatonic */
-	if (sbi->catatonic) {
-		mutex_unlock(&sbi->wq_mutex);
-		return;
-	}
 	switch (type) {
 	/* Kernel protocol v4 missing and expire packets */
 	case autofs_ptype_missing:
@@ -441,7 +435,6 @@ int autofs4_wait(struct autofs_sb_info *
 		wq->tgid = tgid;
 		wq->status = -EINTR; /* Status return if interrupted */
 		wq->wait_ctr = 2;
-		mutex_unlock(&sbi->wq_mutex);
 
 		if (sbi->version < 5) {
 			if (notify == NFY_MOUNT)
@@ -463,15 +456,15 @@ int autofs4_wait(struct autofs_sb_info *
 			(unsigned long) wq->wait_queue_token, wq->name.len,
 			wq->name.name, notify);
 
-		/* autofs4_notify_daemon() may block */
+		/* autofs4_notify_daemon() may block; it will unlock ->wq_mutex */
 		autofs4_notify_daemon(sbi, wq, type);
 	} else {
 		wq->wait_ctr++;
-		mutex_unlock(&sbi->wq_mutex);
-		kfree(qstr.name);
 		DPRINTK("existing wait id = 0x%08lx, name = %.*s, nfy=%d",
 			(unsigned long) wq->wait_queue_token, wq->name.len,
 			wq->name.name, notify);
+		mutex_unlock(&sbi->wq_mutex);
+		kfree(qstr.name);
 	}
 
 	/*
