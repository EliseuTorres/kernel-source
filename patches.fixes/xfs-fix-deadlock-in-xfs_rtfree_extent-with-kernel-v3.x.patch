Subject: xfs: fix deadlock in xfs_rtfree_extent with kernel v3.x
Date: Thu, 23 Feb 2012 00:41:39 -0000
From: Kamal Dasu <kdasu.kdev@gmail.com>
Git-commit: 5575acc7807595687288b3bbac15103f2a5462e1
Patch-mainline: 3.4
References: bnc#829622

To fix the deadlock caused by recursively calling xfs_rtfree_extent

 - removed xfs_ilock() and xfs_trans_ijoin() from xfs_rtfree_extent(),
   instead added asserts that the inode is locked and has an inode_item
   attached to it.
 - in xfs_bunmapi() when dealing with an inode with the rt flag
   call xfs_ilock() and xfs_trans_ijoin() so that the
   reference count is bumped on the inode and attached it to the
   transaction before calling into xfs_bmap_del_extent, similar to
   what we do in xfs_bmap_rtalloc.

Signed-off-by: Kamal Dasu <kdasu.kdev@gmail.com>
Reviewed-by: Ben Myers <bpm@sgi.com>
Signed-off-by: Robert Milasan <rmilasan@suse.com>
---

Index: linux-3.0/fs/xfs/xfs_bmap.c
===================================================================
--- linux-3.0.orig/fs/xfs/xfs_bmap.c
+++ linux-3.0/fs/xfs/xfs_bmap.c
@@ -5033,6 +5033,15 @@ xfs_bunmapi(
 	} else
 		cur = NULL;
 	extno = 0;
+
+	if (isrt) {
+		/*
+		 * Synchronize by locking the bitmap inode.
+		 */
+		xfs_ilock(mp->m_rbmip, XFS_ILOCK_EXCL);
+		xfs_trans_ijoin_ref(tp, mp->m_rbmip, XFS_ILOCK_EXCL);
+	}
+
 	while (bno != (xfs_fileoff_t)-1 && bno >= start && lastx >= 0 &&
 	       (nexts == 0 || extno < nexts)) {
 		/*
Index: linux-3.0/fs/xfs/xfs_rtalloc.c
===================================================================
--- linux-3.0.orig/fs/xfs/xfs_rtalloc.c
+++ linux-3.0/fs/xfs/xfs_rtalloc.c
@@ -183,6 +183,7 @@ error_cancel:
 		oblocks = map.br_startoff + map.br_blockcount;
 	}
 	return 0;
+
 error:
 	return error;
 }
@@ -2149,11 +2150,9 @@ xfs_rtfree_extent(
 	xfs_buf_t	*sumbp;		/* summary file block buffer */
 
 	mp = tp->t_mountp;
-	/*
-	 * Synchronize by locking the bitmap inode.
-	 */
-	xfs_ilock(mp->m_rbmip, XFS_ILOCK_EXCL);
-	xfs_trans_ijoin_ref(tp, mp->m_rbmip, XFS_ILOCK_EXCL);
+
+	ASSERT(mp->m_rbmip->i_itemp != NULL);
+	ASSERT(xfs_isilocked(mp->m_rbmip, XFS_ILOCK_EXCL));
 
 #if defined(__KERNEL__) && defined(DEBUG)
 	/*
