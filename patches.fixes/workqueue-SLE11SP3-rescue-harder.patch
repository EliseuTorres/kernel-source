From: NeilBrown <neilb@suse.de>
Subject: workqueue: Make rescuer thread process more works
References: bnc#900279
Patch-mainline: No, will discuss

Currently workqueue rescuer thread processes at most max_active works from a
workqueue before it goes back to sleep for 100 ms. Especially for workqueues
with low max_active this leads to rescuer being very slow and when queued
work is blocking reclaim it leads to machine taking very long time (minutes
or more) to recover from a situation when new workers cannot be created.

Fix the problem by going through worklist until either new worker is created
or all no new works can be found.

Signed-off-by: Jan Kara <jack@suse.cz>
Signed-off-by: NeilBrown <neilb@suse.de>
---
 kernel/workqueue.c |    4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

--- linux-3.0-SLE11-SP3.orig/kernel/workqueue.c
+++ linux-3.0-SLE11-SP3/kernel/workqueue.c
@@ -2083,7 +2083,6 @@ repeat:
 		struct work_struct *work, *n;
 
 		__set_current_state(TASK_RUNNING);
-		mayday_clear_cpu(cpu, wq->mayday_mask);
 
 		/* migrate to the target cpu if possible */
 		rescuer->gcwq = gcwq;
@@ -2098,6 +2097,9 @@ repeat:
 			if (get_work_cwq(work) == cwq)
 				move_linked_works(work, scheduled, &n);
 
+		/* No need for processing more work? */
+		if (list_empty(scheduled) || !need_to_create_worker(gcwq))
+			mayday_clear_cpu(cpu, wq->mayday_mask);
 		process_scheduled_works(rescuer);
 
 		/*
