From: Michal Hocko <mhocko@suse.cz>
Subject: Handle file type for mem_cgroup_charge_statistics correctly
Patch-mainline: No
References: bnc#697913

This is just a fix up for patches.fixes/mm-memcg-modify-accounting-for-THP-fix.patch 
which introduced a new paramter for mem_cgroup_charge_statistics 
which tells whether the page is file or anonymous. All callers
haven't been updated properly.

Signed-off-by: Michal Hocko <mhocko@suse.cz>

---
 memcontrol.c |   12 ++++++++----
 1 file changed, 8 insertions(+), 4 deletions(-)

Index: linux-2.6.32-thp/mm/memcontrol.c
===================================================================
--- linux-2.6.32-thp.orig/mm/memcontrol.c
+++ linux-2.6.32-thp/mm/memcontrol.c
@@ -1554,6 +1554,7 @@ static void ____mem_cgroup_commit_charge
 					 struct page_cgroup *pc,
 					 enum charge_type ctype)
 {
+	bool file = false;
 	pc->mem_cgroup = mem;
 	/*
 	 * We access a page_cgroup asynchronously without lock_page_cgroup().
@@ -1568,6 +1569,7 @@ static void ____mem_cgroup_commit_charge
 	case MEM_CGROUP_CHARGE_TYPE_SHMEM:
 		SetPageCgroupCache(pc);
 		SetPageCgroupUsed(pc);
+		file = true;
 		break;
 	case MEM_CGROUP_CHARGE_TYPE_MAPPED:
 		ClearPageCgroupCache(pc);
@@ -1577,7 +1579,7 @@ static void ____mem_cgroup_commit_charge
 		break;
 	}
 
-	mem_cgroup_charge_statistics(mem, pc, true);
+	mem_cgroup_charge_statistics(mem, pc, file, 1);
 }
 
 static void __mem_cgroup_commit_charge(struct mem_cgroup *mem,
@@ -1630,6 +1632,7 @@ static void __mem_cgroup_move_account(st
 	int cpu;
 	struct mem_cgroup_stat *stat;
 	struct mem_cgroup_stat_cpu *cpustat;
+	bool file = PageCgroupCache(pc);
 
 	VM_BUG_ON(from == to);
 	VM_BUG_ON(PageLRU(pc->page));
@@ -1639,7 +1642,7 @@ static void __mem_cgroup_move_account(st
 
 	if (!mem_cgroup_is_root(from))
 		res_counter_uncharge(&from->res, PAGE_SIZE);
-	mem_cgroup_charge_statistics(from, pc, false, -1);
+	mem_cgroup_charge_statistics(from, pc, file, -1);
 
 	page = pc->page;
 	if (page_mapped(page) && !PageAnon(page)) {
@@ -1663,7 +1666,7 @@ static void __mem_cgroup_move_account(st
 
 	css_get(&to->css);
 	pc->mem_cgroup = to;
-	mem_cgroup_charge_statistics(to, pc, true, 1);
+	mem_cgroup_charge_statistics(to, pc, file, 1);
 	/*
 	 * We charges against "to" which may not have any tasks. Then, "to"
 	 * can be under rmdir(). But in current implementation, caller of
@@ -2010,6 +2013,7 @@ __mem_cgroup_uncharge_common(struct page
 	struct mem_cgroup *mem = NULL;
 	struct mem_cgroup_per_zone *mz;
 	int page_size = PAGE_SIZE;
+	bool file = !PageAnon(page);
 
 	if (mem_cgroup_disabled())
 		return NULL;
@@ -2057,7 +2061,7 @@ __mem_cgroup_uncharge_common(struct page
 	if (ctype == MEM_CGROUP_CHARGE_TYPE_SWAPOUT)
 		mem_cgroup_swap_statistics(mem, true);
 	for (i = 0; i < count; i++)
-		mem_cgroup_charge_statistics(mem, pc, false, -1);
+		mem_cgroup_charge_statistics(mem, pc, file, -1);
 
 	ClearPageCgroupUsed(pc);
 	/*
