From: Tom Herbert <therbert@google.com>
Date: Tue, 1 Jul 2014 21:32:27 -0700
Subject: net: Call skb_get_hash in get_xps_queue and __skb_tx_hash
Patch-mainline: v3.17-rc1
Git-commit: 0e001614e849b68cff94cda8db8b550569d3dba6
References: bsc#938963 FATE#319084

Call standard function to get a packet hash instead of taking this from
skb->sk->sk_hash or only using skb->protocol.

Signed-off-by: Tom Herbert <therbert@google.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Acked-by: Benjamin Poirier <bpoirier@suse.com>
---
 include/linux/netdevice.h |    2 +-
 include/linux/skbuff.h    |    2 +-
 net/core/flow_dissector.c |   29 +++++------------------------
 3 files changed, 7 insertions(+), 26 deletions(-)

--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -2383,7 +2383,7 @@ static inline int netif_set_xps_queue(st
  * as a distribution range limit for the returned value.
  */
 static inline u16 skb_tx_hash(const struct net_device *dev,
-			      const struct sk_buff *skb)
+			      struct sk_buff *skb)
 {
 	return __skb_tx_hash(dev, skb, dev->real_num_tx_queues);
 }
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -2804,7 +2804,7 @@ static inline bool skb_rx_queue_recorded
 }
 
 extern u16 __skb_tx_hash(const struct net_device *dev,
-			 const struct sk_buff *skb,
+			 struct sk_buff *skb,
 			 unsigned int num_tx_queues);
 
 #ifdef CONFIG_XFRM
--- a/net/core/flow_dissector.c
+++ b/net/core/flow_dissector.c
@@ -209,12 +209,6 @@ static __always_inline u32 __flow_hash_3
 	return jhash_3words(a, b, c, hashrnd);
 }
 
-static __always_inline u32 __flow_hash_1word(u32 a)
-{
-	__flow_hash_secret_init();
-	return jhash_1word(a, hashrnd);
-}
-
 static inline u32 __flow_hash_from_keys(struct flow_keys *keys)
 {
 	u32 hash;
@@ -266,7 +260,7 @@ EXPORT_SYMBOL(__skb_get_rxhash);
  * Returns a Tx hash based on the given packet descriptor a Tx queues' number
  * to be used as a distribution range.
  */
-u16 __skb_tx_hash(const struct net_device *dev, const struct sk_buff *skb,
+u16 __skb_tx_hash(const struct net_device *dev, struct sk_buff *skb,
 		  unsigned int num_tx_queues)
 {
 	u32 hash;
@@ -286,13 +280,7 @@ u16 __skb_tx_hash(const struct net_devic
 		qcount = dev->tc_to_txq[tc].count;
 	}
 
-	if (skb->sk && skb->sk->sk_hash)
-		hash = skb->sk->sk_hash;
-	else
-		hash = (__force u16) skb->protocol;
-	hash = __flow_hash_1word(hash);
-
-	return (u16) (((u64) hash * qcount) >> 32) + qoffset;
+	return (u16) (((u64)skb_get_rxhash(skb) * qcount) >> 32) + qoffset;
 }
 EXPORT_SYMBOL(__skb_tx_hash);
 
@@ -375,17 +363,10 @@ static inline int get_xps_queue(struct n
 		if (map) {
 			if (map->len == 1)
 				queue_index = map->queues[0];
-			else {
-				u32 hash;
-				if (skb->sk && skb->sk->sk_hash)
-					hash = skb->sk->sk_hash;
-				else
-					hash = (__force u16) skb->protocol ^
-					    skb->rxhash;
-				hash = __flow_hash_1word(hash);
+			else
 				queue_index = map->queues[
-				    ((u64)hash * map->len) >> 32];
-			}
+				    ((u64)skb_get_rxhash(skb) * map->len) >> 32];
+
 			if (unlikely(queue_index >= dev->real_num_tx_queues))
 				queue_index = -1;
 		}
