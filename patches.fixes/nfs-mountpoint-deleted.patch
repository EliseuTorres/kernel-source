From: NeilBrown <neilb@suse.de>
Subject: NFS: avoid mountpoint being " (deleted)" in /proc/mounts.
Patch-mainline: not relevant
References: bnc#888591, bnc#891485

A recent patch invalidated NFS dentries in some circumstances in order
to force a "readdirplus", which is a lot more efficient.

These circumstances included a case where the dentry was the root
of a mount.
This causes the entry in '/proc/mounts' to contain the string "(deleted)".

This particularly affects NFS mounted via autofs.

This is fixed by adding a test for LOOKUP_JUMPED which mean were
weren't looking up the dentry by name, so invalidating the name
to encourage readdirplus is pointless

Further ... invalidating the dentry isn't really required, only flushing
the cache of the parent directory.  Invalidating the dentry can sometimes
cause serious problems so this patch removed the invalidation and
only flushes the directory cache.

Signed-off-by: NeilBrown <neilb@suse.de>
---
 fs/nfs/dir.c |    3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

--- linux-3.0-SLE11-SP3.orig/fs/nfs/dir.c
+++ linux-3.0-SLE11-SP3/fs/nfs/dir.c
@@ -1184,6 +1184,7 @@ static int nfs_lookup_revalidate(struct
 	    nfs_check_verifier(dir, dentry, nd && (nd->flags & LOOKUP_RCU))) {
 
 		if (nfs_server_capable(dir, NFS_CAP_READDIRPLUS)
+		    && !(nd && (nd->flags & LOOKUP_JUMPED))
 		    && ((NFS_I(inode)->cache_validity & NFS_INO_INVALID_ATTR)
 			|| nfs_attribute_cache_expired(inode))
 		    && !test_and_set_bit(NFS_INO_DID_FLUSH, &NFS_I(dir)->flags)
@@ -1191,7 +1192,7 @@ static int nfs_lookup_revalidate(struct
 			if (nd && (nd->flags & LOOKUP_RCU))
 				return -ECHILD;
 			nfs_advise_use_readdirplus(dir);
-			goto out_zap_parent;
+			nfs_zap_caches(dir);
 		}
 
 		if (nfs_lookup_verify_inode(inode, nd)) {
