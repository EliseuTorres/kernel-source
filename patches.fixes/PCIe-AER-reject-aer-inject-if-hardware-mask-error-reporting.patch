From: Youquan, Song <youquan.song@intel.com>
Subject: PCIe AER: reject aer inject if hardware mask error reporting
Patch-Mainline: Not in 2.6.33 (yet), but in -mm
References: bnc#566621

On Boxboro-EX, when run aer-inject user space tool, it injects some of error
information,but the error information is not correctly dispalyed in dmesg.

Correcteable/Uncorrectable Error Mask Register are used by PCIe AER driver
which will controls the reporting of idividual errors to PCIe RC via PCIe error
messages.

If hardware masks special error reporting to RC, the aer_inject driver should
not inject aer error.


Signed-off-by: Youquan, Song <youquan.song@intel.com>
Acked-by: Ying, Huang <ying.huang@intel.com>
Acked-by: Andi Kleen <ak@linux.intel.com>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Cc: Andrew Patterson <andrew.patterson@hp.com>
Cc: Jesse Barnes <jbarnes@virtuousgeek.org>

Signed-off-by: Thomas Renninger <trenn@suse.de>

---
 drivers/pci/pcie/aer/aer_inject.c |   20 +++++++++++++++++++-
 1 file changed, 19 insertions(+), 1 deletion(-)

Index: linux-2.6.32-master/drivers/pci/pcie/aer/aer_inject.c
===================================================================
--- linux-2.6.32-master.orig/drivers/pci/pcie/aer/aer_inject.c
+++ linux-2.6.32-master/drivers/pci/pcie/aer/aer_inject.c
@@ -302,7 +302,7 @@ static int aer_inject(struct aer_error_i
 	unsigned long flags;
 	unsigned int devfn = PCI_DEVFN(einj->dev, einj->fn);
 	int pos_cap_err, rp_pos_cap_err;
-	u32 sever;
+	u32 sever, mask;
 	int ret = 0;
 
 	dev = pci_get_bus_and_slot(einj->bus, devfn);
@@ -354,6 +354,24 @@ static int aer_inject(struct aer_error_i
 	err->header_log2 = einj->header_log2;
 	err->header_log3 = einj->header_log3;
 
+	pci_read_config_dword(dev, pos_cap_err + PCI_ERR_COR_MASK, &mask);
+	if (einj->cor_status && !(einj->cor_status & ~mask)) {
+		ret = -EINVAL;
+		printk(KERN_WARNING "The correctable error(s) is masked "
+				"by device\n");
+		spin_unlock_irqrestore(&inject_lock, flags);
+		goto out_put;
+	}
+
+	pci_read_config_dword(dev, pos_cap_err + PCI_ERR_UNCOR_MASK, &mask);
+	if (einj->uncor_status && !(einj->uncor_status & ~mask)) {
+		ret = -EINVAL;
+		printk(KERN_WARNING "The uncorrectable error(s) is masked "
+				"by device\n");
+		spin_unlock_irqrestore(&inject_lock, flags);
+		goto out_put;
+	}
+
 	rperr = __find_aer_error_by_dev(rpdev);
 	if (!rperr) {
 		rperr = rperr_alloc;
