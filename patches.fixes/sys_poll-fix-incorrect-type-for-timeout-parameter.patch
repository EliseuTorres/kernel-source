From: Linus Torvalds <torvalds@linux-foundation.org>
Date: Tue, 21 Feb 2012 17:24:20 -0800
Subject: [PATCH] sys_poll: fix incorrect type for 'timeout' parameter
Git-commit: faf309009e2e18d30c032b7d9479f29b91677c37 Mon Sep 17 00:00:00 2001
Patch-mainline: 3.3
References: bnc#754428

The 'poll()' system call timeout parameter is supposed to be 'int', not
'long'.

Now, the reason this matters is that right now 32-bit compat mode is
broken on at least x86-64, because the 32-bit code just calls
'sys_poll()' directly on x86-64, and the 32-bit argument will have been
zero-extended, turning a signed 'int' into a large unsigned 'long'
value.

We could just introduce a 'compat_sys_poll()' function for this, and
that may eventually be what we have to do, but since the actual standard
poll() semantics is *supposed* to be 'int', and since at least on x86-64
glibc sign-extends the argument before invocing the system call (so
nobody can actually use a 64-bit timeout value in user space _anyway_,
even in 64-bit binaries), the simpler solution would seem to be to just
fix the definition of the system call to match what it should have been
from the very start.

If it turns out that somebody somehow circumvents the user-level libc
64-bit sign extension and actually uses a large unsigned 64-bit timeout
despite that not being how poll() is supposed to work, we will need to
do the compat_sys_poll() approach.

Reported-by: Thomas Meyer <thomas@m3y3r.de>
Acked-by: Eric Dumazet <eric.dumazet@gmail.com>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Acked-by: Miklos Szeredi <mszeredi@suse.cz>
---
 arch/s390/kernel/compat_wrapper.S |    2 +-
 fs/select.c                       |    2 +-
 include/linux/syscalls.h          |    2 +-
 3 files changed, 3 insertions(+), 3 deletions(-)

Index: linux-3.0-SLE11-SP2/arch/s390/kernel/compat_wrapper.S
===================================================================
--- linux-3.0-SLE11-SP2.orig/arch/s390/kernel/compat_wrapper.S	2012-05-10 12:50:47.000000000 +0200
+++ linux-3.0-SLE11-SP2/arch/s390/kernel/compat_wrapper.S	2012-05-10 12:51:35.000000000 +0200
@@ -783,7 +783,7 @@
 sys32_poll_wrapper:
 	llgtr	%r2,%r2			# struct pollfd *
 	llgfr	%r3,%r3			# unsigned int
-	lgfr	%r4,%r4			# long
+	lgfr	%r4,%r4			# int
 	jg	sys_poll		# branch to system call
 
 	.globl	compat_sys_nfsservctl_wrapper
Index: linux-3.0-SLE11-SP2/fs/select.c
===================================================================
--- linux-3.0-SLE11-SP2.orig/fs/select.c	2012-05-10 12:50:47.000000000 +0200
+++ linux-3.0-SLE11-SP2/fs/select.c	2012-05-10 12:51:35.000000000 +0200
@@ -912,7 +912,7 @@ static long do_restart_poll(struct resta
 }
 
 SYSCALL_DEFINE3(poll, struct pollfd __user *, ufds, unsigned int, nfds,
-		long, timeout_msecs)
+		int, timeout_msecs)
 {
 	struct timespec end_time, *to = NULL;
 	int ret;
Index: linux-3.0-SLE11-SP2/include/linux/syscalls.h
===================================================================
--- linux-3.0-SLE11-SP2.orig/include/linux/syscalls.h	2012-05-10 12:50:47.000000000 +0200
+++ linux-3.0-SLE11-SP2/include/linux/syscalls.h	2012-05-10 12:51:35.000000000 +0200
@@ -624,7 +624,7 @@ asmlinkage long sys_socketpair(int, int,
 asmlinkage long sys_socketcall(int call, unsigned long __user *args);
 asmlinkage long sys_listen(int, int);
 asmlinkage long sys_poll(struct pollfd __user *ufds, unsigned int nfds,
-				long timeout);
+				int timeout);
 asmlinkage long sys_select(int n, fd_set __user *inp, fd_set __user *outp,
 			fd_set __user *exp, struct timeval __user *tvp);
 asmlinkage long sys_old_select(struct sel_arg_struct __user *arg);
