From: Jan Kara <jack@suse.cz>
Subject: writeback: Include all dirty inodes in background writeback
Patch-mainline: 3.3
References: bnc#716023
Git-commit: 1bc36b6426ae49139e9f56491db76b95921454d7

Current livelock avoidance code makes background work to include only inodes
that were dirtied before background writeback has started. However background
writeback can be running for a long time and thus excluding newly dirtied
inodes can eventually exclude significant portion of dirty inodes making
background writeback inefficient. Since background writeback avoids livelocking
the flusher thread by yielding to any other work, there is no real reason why
background work should not include all dirty inodes so change the logic in
wb_writeback().

Signed-off-by: Jan Kara <jack@suse.cz>

diff -rupX /crypted/home/jack/.kerndiffexclude linux-3.0-SLE11-SP2/fs/fs-writeback.c linux-3.0-SLE11-SP2-1-background_include_all/fs/fs-writeback.c
--- linux-3.0-SLE11-SP2/fs/fs-writeback.c	2011-12-22 17:59:45.511180767 +0100
+++ linux-3.0-SLE11-SP2-1-background_include_all/fs/fs-writeback.c	2011-12-23 14:28:58.513277142 +0100
@@ -730,6 +730,15 @@ static long wb_writeback(struct bdi_writ
 		if (work->for_background && !over_bground_thresh())
 			break;
 
+		/*
+		 * We reset start time stamp for background writeback.
+		 * Livelock avoidance is done by background work yielding to
+		 * other works and we don't want to leave out some inodes when
+		 * background work is running for a long time.
+		 */
+		if (work->for_background)
+			wbc.wb_start = jiffies;
+
 		wbc.more_io = 0;
 		wbc.nr_to_write = write_chunk;
 		wbc.pages_skipped = 0;
