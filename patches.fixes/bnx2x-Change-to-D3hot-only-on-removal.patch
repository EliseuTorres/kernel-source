From: Yuval Mintz <yuvalmin@broadcom.com>
Date: Mon, 27 May 2013 04:08:31 +0000
Subject: bnx2x: Change to D3hot only on removal
Patch-mainline: v3.11-rc1
Git-commit: 3fb43eb20aec3f5ceed5813a035f200dafb51257
References: bnc#838448

This changes the PCI power management scheme of the bnx2x driver to be similar
to those of most network drivers - the driver will now changes the power state
into D3hot whenever the driver will be removed, instead of whenever an
interface is unloaded.

This change enables the driver to access its eeprom via ethtool callbacks
even when interfaces are unloaded (such access requires the function to be
in D0active).

Signed-off-by: Yuval Mintz <yuvalmin@broadcom.com>
Signed-off-by: Ariel Elior <ariele@broadcom.com>
Signed-off-by: Eilon Greenstein <eilong@broadcom.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Acked-by: Benjamin Poirier <bpoirier@suse.de>
---
 drivers/net/bnx2x/bnx2x_ethtool.c |   26 +++++++++++++++++++++-----
 drivers/net/bnx2x/bnx2x_main.c    |    3 ---
 2 files changed, 21 insertions(+), 8 deletions(-)
--- a/drivers/net/bnx2x/bnx2x_ethtool.c
+++ b/drivers/net/bnx2x/bnx2x_ethtool.c
@@ -1059,13 +1059,29 @@ static int bnx2x_nvram_read(struct bnx2x
 	return rc;
 }
 
+static bool bnx2x_is_nvm_accessible(struct bnx2x *bp)
+{
+	int rc = 1;
+	u16 pm = 0;
+	struct net_device *dev = pci_get_drvdata(bp->pdev);
+
+	if (bp->pm_cap)
+		rc = pci_read_config_word(bp->pdev,
+					  bp->pm_cap + PCI_PM_CTRL, &pm);
+
+	if ((rc && !netif_running(dev)) || (!rc && ((pm & PCI_D0) != PCI_D0)))
+		return false;
+
+	return true;
+}
+
 static int bnx2x_get_eeprom(struct net_device *dev,
 			    struct ethtool_eeprom *eeprom, u8 *eebuf)
 {
 	struct bnx2x *bp = netdev_priv(dev);
 	int rc;
 
-	if (!netif_running(dev))
+	if (!bnx2x_is_nvm_accessible(bp))
 		return -EAGAIN;
 
 	DP(BNX2X_MSG_NVM, "ethtool_eeprom: cmd %d\n"
@@ -1236,7 +1252,7 @@ static int bnx2x_set_eeprom(struct net_d
 	int port = BP_PORT(bp);
 	int rc = 0;
 	u32 ext_phy_config;
-	if (!netif_running(dev))
+	if (!bnx2x_is_nvm_accessible(bp))
 		return -EAGAIN;
 
 	DP(BNX2X_MSG_NVM, "ethtool_eeprom: cmd %d\n"
@@ -1574,7 +1590,7 @@ static int bnx2x_test_registers(struct b
 		{ BNX2X_CHIP_MASK_ALL, 0xffffffff, 0, 0x00000000 }
 	};
 
-	if (!netif_running(bp->dev))
+	if (!bnx2x_is_nvm_accessible(bp))
 		return rc;
 
 	if (CHIP_IS_E1(bp))
@@ -1674,7 +1690,7 @@ static int bnx2x_test_memory(struct bnx2
 		{ NULL, 0xffffffff, {0, 0, 0, 0} }
 	};
 
-	if (!netif_running(bp->dev))
+	if (!bnx2x_is_nvm_accessible(bp))
 		return rc;
 
 	if (CHIP_IS_E1(bp))
@@ -2251,7 +2267,7 @@ static int bnx2x_set_phys_id(struct net_
 {
 	struct bnx2x *bp = netdev_priv(dev);
 
-	if (!netif_running(dev))
+	if (!bnx2x_is_nvm_accessible(bp))
 		return -EAGAIN;
 
 	if (!bp->port.pmf)
--- a/drivers/net/bnx2x/bnx2x_main.c
+++ b/drivers/net/bnx2x/bnx2x_main.c
@@ -10265,9 +10265,6 @@ int bnx2x_close(struct net_device *dev)
 	/* Unload the driver, release IRQs */
 	bnx2x_nic_unload(bp, UNLOAD_CLOSE);
 
-	/* Power off */
-	bnx2x_set_power_state(bp, PCI_D3hot);
-
 	return 0;
 }
 
