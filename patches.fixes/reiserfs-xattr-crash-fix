From: Jeff Mahoney <jeffm@suse.com>
Subject: reiserfs: Force inode evictions before umount to avoid crash
References: bnc#610598 bnc#680073 bnc#684112 bnc#686921
Patch-mainline: Submitted to reiserfs-devel Apr 6 2011

 This patch fixes a crash in reiserfs_delete_xattrs during umount.

 When shrink_dcache_for_umount clears the dcache from
 generic_shutdown_super, delayed evictions are forced to disk. If an
 evicted inode has extended attributes associated with it, it will
 need to walk the xattr tree to locate and remove them.

 But since shrink_dcache_for_umount will BUG if it encounters active
 dentries, the xattr tree must be released before it's called or it will
 crash during every umount.

 This patch forces the evictions to occur before generic_shutdown_super
 by calling shrink_dcache_sb first. The additional evictions caused
 by the removal of each associated xattr file and dir will be automatically
 handled as they're added to the LRU list.

 Unnecessary EXPORT_SYMBOL_GPL(shrink_dcache_for_umount_subtree) to 
 preserve kABI because of deletion of patches.fixes/reiserfs-xattr-crash-fix

Signed-off-by: Jeff Mahoney <jeffm@suse.com>
Acked-by: Jeff Mahoney <jeffm@suse.com>
---
 fs/dcache.c            |    3 ++-
 include/linux/dcache.h |    1 +
 2 files changed, 3 insertions(+), 1 deletion(-)

--- a/fs/dcache.c
+++ b/fs/dcache.c
@@ -895,7 +895,7 @@ EXPORT_SYMBOL(shrink_dcache_sb);
  * - see the comments on shrink_dcache_for_umount() for a description of the
  *   locking
  */
-static void shrink_dcache_for_umount_subtree(struct dentry *dentry)
+void shrink_dcache_for_umount_subtree(struct dentry *dentry)
 {
 	struct dentry *parent;
 	unsigned detached = 0;
@@ -988,6 +988,7 @@ static void shrink_dcache_for_umount_sub
 				    struct dentry, d_u.d_child);
 	}
 }
+EXPORT_SYMBOL_GPL(shrink_dcache_for_umount_subtree);
 
 /*
  * destroy the dentries attached to a superblock on unmounting
--- a/include/linux/dcache.h
+++ b/include/linux/dcache.h
@@ -248,6 +248,7 @@ extern struct dentry * d_obtain_alias(st
 extern void shrink_dcache_sb(struct super_block *);
 extern void shrink_dcache_parent(struct dentry *);
 extern void shrink_dcache_for_umount(struct super_block *);
+extern void shrink_dcache_for_umount_subtree(struct dentry *);
 extern int d_invalidate(struct dentry *);
 
 /* only used at mount-time */
