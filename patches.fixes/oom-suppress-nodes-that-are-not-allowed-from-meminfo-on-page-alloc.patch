From cbf978bfb12d7deca97d7333f65eda0381a072de Mon Sep 17 00:00:00 2001
From: David Rientjes <rientjes@google.com>
Date: Tue, 22 Mar 2011 16:30:48 -0700
Subject: [PATCH] oom: suppress nodes that are not allowed from meminfo on page alloc failure
Patch-mainline: cbf978bfb12d7deca97d7333f65eda0381a072de
References: bnc#705433

Displaying extremely verbose meminfo for all nodes on the system is
overkill for page allocation failures when the context restricts that
allocation to only a subset of nodes.  We don't particularly care about
the state of all nodes when some are not allowed in the current context,
they can have an abundance of memory but we can't allocate from that part
of memory.

This patch suppresses disallowed nodes from the meminfo dump on a page
allocation failure if the context requires it.

Signed-off-by: David Rientjes <rientjes@google.com>
Cc: Mel Gorman <mel@csn.ul.ie>
Cc: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
Cc: KOSAKI Motohiro <kosaki.motohiro@jp.fujitsu.com>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Acked-by: Michal Hocko <mhocko@suse.cz>

---
 mm/page_alloc.c |   19 ++++++++++++++++---
 1 files changed, 16 insertions(+), 3 deletions(-)

Index: linux-2.6.32-bnc705433/mm/page_alloc.c
===================================================================
--- linux-2.6.32-bnc705433.orig/mm/page_alloc.c
+++ linux-2.6.32-bnc705433/mm/page_alloc.c
@@ -2136,18 +2136,31 @@ rebalance:
 
 nopage:
 	if (!(gfp_mask & __GFP_NOWARN) && printk_ratelimit()) {
+		unsigned int filter = SHOW_MEM_FILTER_NODES;
 		if (!wait) {
 			printk(KERN_INFO "The following is only an harmless informational message.\n");
 			printk(KERN_INFO "Unless you get a _continuous_flood_ of these messages it means\n");
 			printk(KERN_INFO "everything is working fine. Allocations from irqs cannot be\n");
 			printk(KERN_INFO "perfectly reliable and the kernel is designed to handle that.\n");
 		}
-		printk(KERN_INFO "%s: page allocation failure."
-			" order:%d, mode:0x%x\n",
+
+		/*
+		 * This documents exceptions given to allocations in certain
+		 * contexts that are allowed to allocate outside current's set
+		 * of allowed nodes.
+		 */
+		if (!(gfp_mask & __GFP_NOMEMALLOC))
+			if (test_thread_flag(TIF_MEMDIE) ||
+			    (p->flags & (PF_MEMALLOC | PF_EXITING)))
+				filter &= ~SHOW_MEM_FILTER_NODES;
+		if (in_interrupt() || !wait)
+			filter &= ~SHOW_MEM_FILTER_NODES;
+
+		pr_warning("%s: page allocation failure. order:%d, mode:0x%x\n",
 			p->comm, order, gfp_mask);
 		dump_stack();
 		if (!should_suppress_show_mem())
-			show_mem();
+			__show_mem(filter);
 	}
 	return page;
 got_pg:
