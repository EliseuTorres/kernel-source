Git-commit: 7ad4d4a68a1a19f21c7b39cb3f51bf17fba6e3d0
From: NeilBrown <neilb@suse.de>
Date: Thu, 11 Oct 2012 13:44:30 +1100
Subject: [PATCH] md/raid1: Don't release reference to device while handling read error.
References: bnc#809122, bnc#814719
Patch-mainline: v3.7

When we get a read error, we arrange for raid1d to handle it.
Currently we release the reference on the device.  This can result
in
   conf->mirrors[read_disk].rdev
being NULL in fix_read_error, if the device happens to get removed
before the read error is handled.

So instead keep the reference until the read error has been fully
handled.


Reported-by: hank <pyu@redhat.com>
Signed-off-by: NeilBrown <neilb@suse.de>
Signed-off-by: Hannes Reinecke <hare@suse.de>
Acked-by: NeilBrown <neilb@suse.de>

---
 drivers/md/raid1.c |    9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

--- linux-3.0-SLE11-SP2.orig/drivers/md/raid1.c
+++ linux-3.0-SLE11-SP2/drivers/md/raid1.c
@@ -287,9 +287,10 @@ static void raid1_end_read_request(struc
 		spin_unlock_irqrestore(&conf->device_lock, flags);
 	}
 
-	if (uptodate)
+	if (uptodate) {
 		raid_end_bio_io(r1_bio);
-	else {
+		rdev_dec_pending(conf->mirrors[mirror].rdev, conf->mddev);
+	} else {
 		/*
 		 * oops, read error:
 		 */
@@ -299,9 +300,8 @@ static void raid1_end_read_request(struc
 			       mdname(conf->mddev),
 			       bdevname(conf->mirrors[mirror].rdev->bdev,b), (unsigned long long)r1_bio->sector);
 		reschedule_retry(r1_bio);
+		/* don't drop the reference on read_disk yet */
 	}
-
-	rdev_dec_pending(conf->mirrors[mirror].rdev, conf->mddev);
 }
 
 static void r1_bio_write_done(r1bio_t *r1_bio)
@@ -1710,6 +1710,7 @@ static void raid1d(mddev_t *mddev)
 			} else
 				md_error(mddev,
 					 conf->mirrors[r1_bio->read_disk].rdev);
+			rdev_dec_pending(conf->mirrors[r1_bio->read_disk].rdev, conf->mddev);
 
 			bio = r1_bio->bios[r1_bio->read_disk];
 			r1_bio->bios[r1_bio->read_disk] =
