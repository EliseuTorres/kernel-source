From: Tejun Heo <tj@kernel.org>
Date: Tue, 23 Aug 2011 20:01:04 +0200
Subject: block: add GENHD_FL_NO_PART_SCAN
Git-commit: d27769ec3df1a8de9ca450d2dcd72d1ab259ba32
References: bnc#778477
Patch-Mainline: v3.2

There are cases where suppressing partition scan is useful - e.g. for
lo devices and pseudo SATA devices which advertise to be a disk but
get upset on partition scan (some port multiplier control devices show
such behavior).

This patch adds GENHD_FL_NO_PART_SCAN which suppresses partition scan
regardless of the number of possible partitions.  disk_partitionable()
is renamed to disk_part_scan_enabled() as suppressing partition scan
doesn't imply the device can't be partitioned using
BLKPG_ADD/DEL_PARTITION calls from userland.  show_partition() now
directly tests disk_max_parts() to maintain backward-compatibility.

-v2: Updated to make it clear that only partition scan is suppressed
     not partitioning itself as suggested by Kay Sievers.

Backported to SLES11 SP3.

Signed-off-by: Tejun Heo <tj@kernel.org>
Cc: Kay Sievers <kay.sievers@vrfy.org>
Signed-off-by: Jens Axboe <jaxboe@fusionio.com>
Signed-off-by: Hannes Reinecke <hare@suse.de>
Acked-by: Hannes Reinecke <hare@suse.de>
---
 block/genhd.c         |   12 ++++++------
 block/ioctl.c         |    2 +-
 fs/block_dev.c        |    2 +-
 fs/partitions/check.c |    2 +-
 include/linux/genhd.h |    7 ++++---
 5 files changed, 13 insertions(+), 12 deletions(-)

diff --git a/block/genhd.c b/block/genhd.c
index bb9a404..ca5c964 100644
--- a/block/genhd.c
+++ b/block/genhd.c
@@ -546,7 +546,7 @@ void register_disk(struct gendisk *disk)
 	disk->slave_dir = kobject_create_and_add("slaves", &ddev->kobj);
 
 	/* No minors to use for partitions */
-	if (!disk_partitionable(disk))
+	if (!disk_part_scan_enabled(disk))
 		goto exit;
 
 	/* No such device (e.g., media were just removed) */
@@ -612,7 +612,7 @@ void add_disk(struct gendisk *disk)
 	disk->flags |= GENHD_FL_UP;
 
 	if (no_partition_scan)
-		disk->flags |= GENHD_FL_NO_PARTITION_SCAN;
+		disk->flags |= GENHD_FL_NO_PART_SCAN;
 
 	retval = blk_alloc_devt(&disk->part0, &devt);
 	if (retval) {
@@ -876,7 +876,7 @@ static int show_partition(struct seq_file *seqf, void *v)
 	char buf[BDEVNAME_SIZE];
 
 	/* Don't show non-partitionable removeable devices or empty devices */
-	if (!get_capacity(sgp) || (!disk_partitionable(sgp) &&
+	if (!get_capacity(sgp) || (!disk_max_parts(sgp) &&
 				   (sgp->flags & GENHD_FL_REMOVABLE)))
 		return 0;
 	if (sgp->flags & GENHD_FL_SUPPRESS_PARTITION_INFO)
@@ -950,7 +950,7 @@ static ssize_t disk_range_show(struct device *dev,
 	struct gendisk *disk = dev_to_disk(dev);
 
 	return sprintf(buf, "%d\n",
-		       (disk->flags & GENHD_FL_NO_PARTITION_SCAN ? 0 : disk->minors));
+		       (disk_part_scan_enabled(disk) ? disk->minors : 0));
 }
 
 static ssize_t disk_range_store(struct device *dev,
@@ -962,9 +962,9 @@ static ssize_t disk_range_store(struct device *dev,
 
 	if (count > 0 && sscanf(buf, "%d", &i) > 0) {
 		if (i == 0)
-			disk->flags |= GENHD_FL_NO_PARTITION_SCAN;
+			disk->flags |= GENHD_FL_NO_PART_SCAN;
 		else if (i <= disk->minors)
-			disk->flags &= ~GENHD_FL_NO_PARTITION_SCAN;
+			disk->flags &= ~GENHD_FL_NO_PART_SCAN;
 		else
 			count = -EINVAL;
 	}
diff --git a/block/ioctl.c b/block/ioctl.c
index 1124cd2..5c74efc 100644
--- a/block/ioctl.c
+++ b/block/ioctl.c
@@ -101,7 +101,7 @@ static int blkdev_reread_part(struct block_device *bdev)
 	struct gendisk *disk = bdev->bd_disk;
 	int res;
 
-	if (!disk_partitionable(disk) || bdev != bdev->bd_contains)
+	if (!disk_part_scan_enabled(disk) || bdev != bdev->bd_contains)
 		return -EINVAL;
 	if (!capable(CAP_SYS_ADMIN))
 		return -EACCES;
diff --git a/fs/block_dev.c b/fs/block_dev.c
index a57d2dd..b8df279 100644
--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@ -980,7 +980,7 @@ static void flush_disk(struct block_device *bdev, bool kill_dirty)
 
 	if (!bdev->bd_disk)
 		return;
-	if (disk_partitionable(bdev->bd_disk))
+	if (disk_part_scan_enabled(bdev->bd_disk))
 		bdev->bd_invalidated = 1;
 }
 
diff --git a/fs/partitions/check.c b/fs/partitions/check.c
index dfdb770..966ed13 100644
--- a/fs/partitions/check.c
+++ b/fs/partitions/check.c
@@ -578,7 +578,7 @@ rescan:
 		disk->fops->revalidate_disk(disk);
 	check_disk_size_change(disk, bdev);
 	bdev->bd_invalidated = 0;
-	if (disk->flags & GENHD_FL_NO_PARTITION_SCAN)
+	if (!disk_part_scan_enabled(disk))
 		return 0;
 	if (!get_capacity(disk) || !(state = check_partition(disk, bdev)))
 		return 0;
diff --git a/include/linux/genhd.h b/include/linux/genhd.h
index acc92dc..b9a8c19 100644
--- a/include/linux/genhd.h
+++ b/include/linux/genhd.h
@@ -134,7 +134,7 @@ struct hd_struct {
 #define GENHD_FL_EXT_DEVT			64 /* allow extended devt */
 #define GENHD_FL_NATIVE_CAPACITY		128
 #define GENHD_FL_BLOCK_EVENTS_ON_EXCL_WRITE	256
-#define GENHD_FL_NO_PARTITION_SCAN		512
+#define GENHD_FL_NO_PART_SCAN			512
 
 enum {
 	DISK_EVENT_MEDIA_CHANGE			= 1 << 0, /* media changed */
@@ -235,9 +235,10 @@ static inline int disk_max_parts(struct gendisk *disk)
 	return disk->minors;
 }
 
-static inline bool disk_partitionable(struct gendisk *disk)
+static inline bool disk_part_scan_enabled(struct gendisk *disk)
 {
-	return disk_max_parts(disk) > 1;
+	return disk_max_parts(disk) > 1 &&
+		!(disk->flags & GENHD_FL_NO_PART_SCAN);
 }
 
 static inline dev_t disk_devt(struct gendisk *disk)
-- 
1.7.10.4

