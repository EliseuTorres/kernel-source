From: "Martin K. Petersen" <martin.petersen@oracle.com>
Date: Thu, 9 May 2013 23:11:37 -0400
Subject: scsi: Allow error handling timeout to be specified
Git-commit: 0816c9251a7180383bb7811e1a1545f7b78e5374
References: bnc#798050
Patch-Mainline: v3.12

Introduce eh_timeout which can be used for error handling purposes. This
was previously hardcoded to 10 seconds in the SCSI error handling
code. However, for some fast-fail scenarios it is necessary to be able
to tune this as it can take several iterations (bus device, target, bus,
controller) before we give up.

Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
Acked-by: Hannes Reinecke <hare@suse.de>
---
 drivers/scsi/scsi_error.c  |  7 ++-----
 drivers/scsi/scsi_scan.c   |  2 ++
 drivers/scsi/scsi_sysfs.c  | 27 +++++++++++++++++++++++++++
 include/scsi/scsi.h        |  1 +
 include/scsi/scsi_device.h |  1 +
 5 files changed, 33 insertions(+), 5 deletions(-)

diff -aurp orig/drivers/scsi/scsi_error.c current/drivers/scsi/scsi_error.c
--- orig/drivers/scsi/scsi_error.c	2013-07-30 13:56:29.000000000 -0700
+++ current/drivers/scsi/scsi_error.c	2013-07-30 14:02:07.000000000 -0700
@@ -46,9 +46,6 @@
 
 static void scsi_eh_done(struct scsi_cmnd *scmd);
 
-#define SENSE_TIMEOUT		(10*HZ)
-#define TEST_UNIT_READY_TIMEOUT	(30*HZ)
-
 /*
  * These should *probably* be handled by the host itself.
  * Since it is allowed to sleep, it probably should.
@@ -958,7 +955,7 @@ static int scsi_send_eh_cmnd(struct scsi
  */
 static int scsi_request_sense(struct scsi_cmnd *scmd)
 {
-	return scsi_send_eh_cmnd(scmd, NULL, 0, SENSE_TIMEOUT, ~0);
+	return scsi_send_eh_cmnd(scmd, NULL, 0, scmd->device->eh_timeout, ~0);
 }
 
 /**
@@ -1059,7 +1056,7 @@ static int scsi_eh_tur(struct scsi_cmnd
 	int retry_cnt = 1, rtn;
 
 retry_tur:
-	rtn = scsi_send_eh_cmnd(scmd, tur_command, 6, TEST_UNIT_READY_TIMEOUT, 0);
+	rtn = scsi_send_eh_cmnd(scmd, tur_command, 6, scmd->device->eh_timeout, 0);
 
 	SCSI_LOG_ERROR_RECOVERY(3, printk("%s: scmd %p rtn %x\n",
 		__func__, scmd, rtn));
diff -aurp orig/drivers/scsi/scsi_scan.c current/drivers/scsi/scsi_scan.c
--- orig/drivers/scsi/scsi_scan.c	2013-07-30 13:56:23.000000000 -0700
+++ current/drivers/scsi/scsi_scan.c	2013-07-30 14:02:07.000000000 -0700
@@ -933,6 +933,8 @@ static int scsi_add_lun(struct scsi_devi
 	if (*bflags & BLIST_RETRY_HWERROR)
 		sdev->retry_hwerror = 1;
 
+	sdev->eh_timeout = SCSI_DEFAULT_EH_TIMEOUT;
+
 	transport_configure_device(&sdev->sdev_gendev);
 
 	if (sdev->host->hostt->slave_configure) {
diff -aurp orig/drivers/scsi/scsi_sysfs.c current/drivers/scsi/scsi_sysfs.c
--- orig/drivers/scsi/scsi_sysfs.c	2013-07-30 13:56:35.000000000 -0700
+++ current/drivers/scsi/scsi_sysfs.c	2013-07-30 14:02:07.000000000 -0700
@@ -562,6 +562,32 @@ sdev_store_timeout (struct device *dev,
 static DEVICE_ATTR(timeout, S_IRUGO | S_IWUSR, sdev_show_timeout, sdev_store_timeout);
 
 static ssize_t
+sdev_show_eh_timeout (struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct scsi_device *sdev;
+	sdev = to_scsi_device(dev);
+	return snprintf(buf, 20, "%u\n", sdev->eh_timeout / HZ);
+}
+
+static ssize_t
+sdev_store_eh_timeout (struct device *dev, struct device_attribute *attr,
+		    const char *buf, size_t count)
+{
+	struct scsi_device *sdev;
+	unsigned int eh_timeout;
+
+	if (!capable(CAP_SYS_ADMIN))
+		return -EACCES;
+
+	sdev = to_scsi_device(dev);
+	sscanf(buf, "%d\n", &eh_timeout);
+	sdev->eh_timeout = eh_timeout * HZ;
+
+	return count;
+}
+static DEVICE_ATTR(eh_timeout, S_IRUGO | S_IWUSR, sdev_show_eh_timeout, sdev_store_eh_timeout);
+
+static ssize_t
 store_rescan_field (struct device *dev, struct device_attribute *attr,
 		    const char *buf, size_t count)
 {
@@ -725,6 +751,7 @@ static struct attribute *scsi_sdev_attrs
 	&dev_attr_delete.attr,
 	&dev_attr_state.attr,
 	&dev_attr_timeout.attr,
+	&dev_attr_eh_timeout.attr,
 	&dev_attr_iocounterbits.attr,
 	&dev_attr_iorequest_cnt.attr,
 	&dev_attr_iodone_cnt.attr,
diff -aurp orig/include/scsi/scsi.h current/include/scsi/scsi.h
--- orig/include/scsi/scsi.h	2013-07-30 14:00:44.000000000 -0700
+++ current/include/scsi/scsi.h	2013-07-30 14:02:07.000000000 -0700
@@ -502,6 +502,7 @@ static inline int scsi_is_wlun(unsigned
 /*
  * default timeouts
 */
+#define SCSI_DEFAULT_EH_TIMEOUT		(30 * HZ)
 #define FORMAT_UNIT_TIMEOUT		(2 * 60 * 60 * HZ)
 #define START_STOP_TIMEOUT		(60 * HZ)
 #define MOVE_MEDIUM_TIMEOUT		(5 * 60 * HZ)
diff -aurp orig/include/scsi/scsi_device.h current/include/scsi/scsi_device.h
--- orig/include/scsi/scsi_device.h	2013-07-30 14:00:44.000000000 -0700
+++ current/include/scsi/scsi_device.h	2013-07-30 14:02:07.000000000 -0700
@@ -112,6 +112,7 @@ struct scsi_device {
 				 * scsi_devinfo.[hc]. For now used only to
 				 * pass settings from slave_alloc to scsi
 				 * core. */
+	unsigned int eh_timeout; /* Error handling timeout */
 	unsigned writeable:1;
 	unsigned removable:1;
 	unsigned changed:1;	/* Data invalid due to media change */
