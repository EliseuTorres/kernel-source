From: Jiri Bohac <jbohac@suse.cz>
Subject: keep tick_do_timer_cpu on CPU0 with nohz off
References: bnc#727639
Patch-mainline: not yet

The first CPU switching to highres takes the broadcast responsibility and also
sets tick_do_timer_cpu to itself.

This behaviour has been introduced by 7300711e
(clockevents: broadcast fixup possible waiters).

I don't see a good reason assign tick_do_timer_cpu to the CPU
doing the one-shot timer broadcasts. The timer interrupt will be
generated on any other CPU as well, be it through the broadcast
IPI or a per-CPU clockevent device. Any online CPU can do that
job. 

Signed-off-by: Jiri Bohac <jbohac@suse.cz>

---
 kernel/time/tick-broadcast.c |    3 ---
 1 file changed, 3 deletions(-)

--- a/kernel/time/tick-broadcast.c
+++ b/kernel/time/tick-broadcast.c
@@ -534,9 +534,6 @@ void tick_broadcast_setup_oneshot(struct
 		bc->event_handler = tick_handle_oneshot_broadcast;
 		clockevents_set_mode(bc, CLOCK_EVT_MODE_ONESHOT);
 
-		/* Take the do_timer update */
-		tick_do_timer_cpu = cpu;
-
 		/*
 		 * We must be careful here. There might be other CPUs
 		 * waiting for periodic broadcast. We need to set the
