From: Herbert Xu <herbert@gondor.apana.org.au>
Subject: ipsec: Fix bogus bundle flowi
Patch-mainline: 2.6.34
Git-commit: 87c1e12b5eeb7b30b4b41291bef8e0b41fc3dde9
Acked-by: Jiri Bohac <jbohac@suse.cz>
References: bnc#680845
    
When I merged the bundle creation code, I introduced a bogus
flowi value in the bundle.  Instead of getting from the caller,
it was instead set to the flow in the route object, which is
totally different.

The end result is that the bundles we created never match, and
we instead end up with an ever growing bundle list.

Thanks to Jamal for find this problem.

Reported-by: Jamal Hadi Salim <hadi@cyberus.ca>
Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
Acked-by: Steffen Klassert <steffen.klassert@secunet.com>
Acked-by: Jamal Hadi Salim <hadi@cyberus.ca>
Signed-off-by: David S. Miller <davem@davemloft.net>


Note the KABI change workaround. Should be safe because:
- noone is going to add complete ipsec support for a new protocol family
- an extra argument passed to a function will not hurt anyway


---
 include/net/xfrm.h      |    4 +++-
 net/ipv4/xfrm4_policy.c |    5 +++--
 net/ipv6/xfrm6_policy.c |    3 ++-
 net/xfrm/xfrm_policy.c  |    7 ++++---
 4 files changed, 12 insertions(+), 7 deletions(-)

Index: linux-2.6.32-SLE11-SP2/include/net/xfrm.h
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/include/net/xfrm.h
+++ linux-2.6.32-SLE11-SP2/include/net/xfrm.h
@@ -273,7 +273,9 @@ struct xfrm_policy_afinfo {
 					     struct dst_entry *dst,
 					     int nfheader_len);
 	int			(*fill_dst)(struct xfrm_dst *xdst,
-					    struct net_device *dev);
+					    struct net_device *dev
+					    , struct flowi *fl
+					);
 };
 
 extern int xfrm_policy_register_afinfo(struct xfrm_policy_afinfo *afinfo);
Index: linux-2.6.32-SLE11-SP2/net/ipv4/xfrm4_policy.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/net/ipv4/xfrm4_policy.c
+++ linux-2.6.32-SLE11-SP2/net/ipv4/xfrm4_policy.c
@@ -92,11 +92,12 @@ static int xfrm4_init_path(struct xfrm_d
 	return 0;
 }
 
-static int xfrm4_fill_dst(struct xfrm_dst *xdst, struct net_device *dev)
+static int xfrm4_fill_dst(struct xfrm_dst *xdst, struct net_device *dev,
+			  struct flowi *fl)
 {
 	struct rtable *rt = (struct rtable *)xdst->route;
 
-	xdst->u.rt.fl = rt->fl;
+	xdst->u.rt.fl = *fl;
 
 	xdst->u.dst.dev = dev;
 	dev_hold(dev);
Index: linux-2.6.32-SLE11-SP2/net/ipv6/xfrm6_policy.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/net/ipv6/xfrm6_policy.c
+++ linux-2.6.32-SLE11-SP2/net/ipv6/xfrm6_policy.c
@@ -117,7 +117,8 @@ static int xfrm6_init_path(struct xfrm_d
 	return 0;
 }
 
-static int xfrm6_fill_dst(struct xfrm_dst *xdst, struct net_device *dev)
+static int xfrm6_fill_dst(struct xfrm_dst *xdst, struct net_device *dev,
+			  struct flowi *fl)
 {
 	struct rt6_info *rt = (struct rt6_info*)xdst->route;
 
Index: linux-2.6.32-SLE11-SP2/net/xfrm/xfrm_policy.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/net/xfrm/xfrm_policy.c
+++ linux-2.6.32-SLE11-SP2/net/xfrm/xfrm_policy.c
@@ -1341,7 +1341,8 @@ static inline int xfrm_init_path(struct
 	return err;
 }
 
-static inline int xfrm_fill_dst(struct xfrm_dst *xdst, struct net_device *dev)
+static inline int xfrm_fill_dst(struct xfrm_dst *xdst, struct net_device *dev,
+				struct flowi *fl)
 {
 	struct xfrm_policy_afinfo *afinfo =
 		xfrm_policy_get_afinfo(xdst->u.dst.ops->family);
@@ -1350,7 +1351,7 @@ static inline int xfrm_fill_dst(struct x
 	if (!afinfo)
 		return -EINVAL;
 
-	err = afinfo->fill_dst(xdst, dev);
+	err = afinfo->fill_dst(xdst, dev, fl);
 
 	xfrm_policy_put_afinfo(afinfo);
 
@@ -1454,7 +1455,7 @@ static struct dst_entry *xfrm_bundle_cre
 	for (dst_prev = dst0; dst_prev != dst; dst_prev = dst_prev->child) {
 		struct xfrm_dst *xdst = (struct xfrm_dst *)dst_prev;
 
-		err = xfrm_fill_dst(xdst, dev);
+		err = xfrm_fill_dst(xdst, dev, fl);
 		if (err)
 			goto free_dst;
 
