From: Mel Gorman <mgorman@suse.de>
Date: Tue, 17 Apr 2012 11:29:45 +0100
Subject: [PATCH] mm: vmscan: Do not force kswapd to scan small targets
References: Improve preservation of page-age information
Patch-mainline: Never, partially upstream as a part of commit ad2b8e60

Commit [246e87a9: memcg: fix get_scan_count() for small targets] was
meant to fix a problem whereby small scan targets on memcg were ignored
causing priority to raise too sharply. It forced scanning to take place
if the target was small, memcg or kswapd.

From the time it was introduced it cause excessive reclaim by kswapd
with workloads being pushed to swap that previously would have stayed
resident. This was accidentally fixed by commit [ad2b8e60: mm: memcg:
remove optimization of keeping the root_mem_cgroup LRU lists empty] but
that patchset is not suitable for backporting.

The original patch came with no information on what workloads it benefits
but the cost of it is obvious in that it forces scanning to take place
on lists that would otherwise have been ignored such as small anonymous
inactive lists. This patch partially reverts 246e87a9 so that small
lists are not force scanned which means that IO-intensive workloads with
small amounts of anonymous memory will not be swapped.

Signed-off-by: Mel Gorman <mgorman@suse.de>
---
 mm/vmscan.c |    3 ---
 1 file changed, 3 deletions(-)

--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -1863,9 +1863,6 @@ static void get_scan_count(struct zone *
 	 * latencies, so it's better to scan a minimum amount there as
 	 * well.
 	 */
-	if (scanning_global_lru(sc) && current_is_kswapd() &&
-	    zone->all_unreclaimable)
-		force_scan = true;
 	if (!scanning_global_lru(sc))
 		force_scan = true;
 
