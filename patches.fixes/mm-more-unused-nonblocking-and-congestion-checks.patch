From: Wu Fengguang <fengguang.wu@intel.com>
Subject: writeback: remove nonblocking/encountered_congestion references
Git-commit: 1b430beee5e388605dfb092b214ef0320f752cf6
References: bnc#699354
Patch-mainline: 2.6.37-rc1

This removes more dead code that was somehow missed by commit 0d99519efef
(writeback: remove unused nonblocking and congestion checks).  There are
no behavior change except for the removal of two entries from one of the
ext4 tracing interface.

The nonblocking checks in ->writepages are no longer used because the
flusher now prefer to block on get_request_wait() than to skip inodes on
IO congestion.  The latter will lead to more seeky IO.

The nonblocking checks in ->writepage are no longer used because it's
redundant with the WB_SYNC_NONE check.

We no long set ->nonblocking in VM page out and page migration, because
a) it's effectively redundant with WB_SYNC_NONE in current code
b) it's old semantic of "Don't get stuck on request queues" is mis-behavior:
   that would skip some dirty inodes on congestion and page out others, which
   is unfair in terms of LRU age.

Inspired by Christoph Hellwig. Thanks!

Signed-off-by: Wu Fengguang <fengguang.wu@intel.com>
Cc: Theodore Ts'o <tytso@mit.edu>
Cc: David Howells <dhowells@redhat.com>
Cc: Sage Weil <sage@newdream.net>
Cc: Steve French <sfrench@samba.org>
Cc: Chris Mason <chris.mason@oracle.com>
Cc: Jens Axboe <axboe@kernel.dk>
Cc: Christoph Hellwig <hch@infradead.org>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Acked-by: Jan Kara <jack@suse.cz>
---
 fs/afs/write.c                   |   19 +------------------
 fs/buffer.c                      |    2 +-
 fs/ceph/addr.c                   |    9 ---------
 fs/cifs/file.c                   |   10 ----------
 fs/gfs2/meta_io.c                |    2 +-
 fs/nfs/write.c                   |    4 +---
 fs/reiserfs/inode.c              |    2 +-
 fs/xfs/linux-2.6/xfs_aops.c      |    3 +--
 include/trace/events/ext4.h      |    8 +++++---
 include/trace/events/writeback.h |    2 --
 mm/migrate.c                     |    1 -
 mm/vmscan.c                      |    1 -
 12 files changed, 11 insertions(+), 52 deletions(-)

Index: linux-2.6.32-SLE11-SP2/fs/afs/write.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/afs/write.c
+++ linux-2.6.32-SLE11-SP2/fs/afs/write.c
@@ -438,7 +438,6 @@ no_more:
  */
 int afs_writepage(struct page *page, struct writeback_control *wbc)
 {
-	struct backing_dev_info *bdi = page->mapping->backing_dev_info;
 	struct afs_writeback *wb;
 	int ret;
 
@@ -455,8 +454,6 @@ int afs_writepage(struct page *page, str
 	}
 
 	wbc->nr_to_write -= ret;
-	if (wbc->nonblocking && bdi_write_congested(bdi))
-		wbc->encountered_congestion = 1;
 
 	_leave(" = 0");
 	return 0;
@@ -469,7 +466,6 @@ static int afs_writepages_region(struct
 				 struct writeback_control *wbc,
 				 pgoff_t index, pgoff_t end, pgoff_t *_next)
 {
-	struct backing_dev_info *bdi = mapping->backing_dev_info;
 	struct afs_writeback *wb;
 	struct page *page;
 	int ret, n;
@@ -529,11 +525,6 @@ static int afs_writepages_region(struct
 
 		wbc->nr_to_write -= ret;
 
-		if (wbc->nonblocking && bdi_write_congested(bdi)) {
-			wbc->encountered_congestion = 1;
-			break;
-		}
-
 		cond_resched();
 	} while (index < end && wbc->nr_to_write > 0);
 
@@ -548,24 +539,16 @@ static int afs_writepages_region(struct
 int afs_writepages(struct address_space *mapping,
 		   struct writeback_control *wbc)
 {
-	struct backing_dev_info *bdi = mapping->backing_dev_info;
 	pgoff_t start, end, next;
 	int ret;
 
 	_enter("");
 
-	if (wbc->nonblocking && bdi_write_congested(bdi)) {
-		wbc->encountered_congestion = 1;
-		_leave(" = 0 [congest]");
-		return 0;
-	}
-
 	if (wbc->range_cyclic) {
 		start = mapping->writeback_index;
 		end = -1;
 		ret = afs_writepages_region(mapping, wbc, start, end, &next);
-		if (start > 0 && wbc->nr_to_write > 0 && ret == 0 &&
-		    !(wbc->nonblocking && wbc->encountered_congestion))
+		if (start > 0 && wbc->nr_to_write > 0 && ret == 0)
 			ret = afs_writepages_region(mapping, wbc, 0, start,
 						    &next);
 		mapping->writeback_index = next;
Index: linux-2.6.32-SLE11-SP2/fs/buffer.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/buffer.c
+++ linux-2.6.32-SLE11-SP2/fs/buffer.c
@@ -1716,7 +1716,7 @@ static int __block_write_full_page(struc
 		 * and kswapd activity, but those code paths have their own
 		 * higher-level throttling.
 		 */
-		if (wbc->sync_mode != WB_SYNC_NONE || !wbc->nonblocking) {
+		if (wbc->sync_mode != WB_SYNC_NONE) {
 			lock_buffer(bh);
 		} else if (!trylock_buffer(bh)) {
 			redirty_page_for_writepage(wbc, page);
Index: linux-2.6.32-SLE11-SP2/fs/cifs/file.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/cifs/file.c
+++ linux-2.6.32-SLE11-SP2/fs/cifs/file.c
@@ -1191,7 +1191,6 @@ static int cifs_partialpagewrite(struct
 static int cifs_writepages(struct address_space *mapping,
 			   struct writeback_control *wbc)
 {
-	struct backing_dev_info *bdi = mapping->backing_dev_info;
 	unsigned int bytes_to_write;
 	unsigned int bytes_written;
 	struct cifs_sb_info *cifs_sb;
@@ -1214,15 +1213,6 @@ static int cifs_writepages(struct addres
 	int scanned = 0;
 	int xid;
 
-	/*
-	 * BB: Is this meaningful for a non-block-device file system?
-	 * If it is, we should test it again after we do I/O
-	 */
-	if (wbc->nonblocking && bdi_write_congested(bdi)) {
-		wbc->encountered_congestion = 1;
-		return 0;
-	}
-
 	cifs_sb = CIFS_SB(mapping->host->i_sb);
 
 	/*
Index: linux-2.6.32-SLE11-SP2/fs/gfs2/meta_io.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/gfs2/meta_io.c
+++ linux-2.6.32-SLE11-SP2/fs/gfs2/meta_io.c
@@ -56,7 +56,7 @@ static int gfs2_aspace_writepage(struct
 		 * activity, but those code paths have their own higher-level
 		 * throttling.
 		 */
-		if (wbc->sync_mode != WB_SYNC_NONE || !wbc->nonblocking) {
+		if (wbc->sync_mode != WB_SYNC_NONE) {
 			lock_buffer(bh);
 		} else if (!trylock_buffer(bh)) {
 			redirty_page_for_writepage(wbc, page);
Index: linux-2.6.32-SLE11-SP2/fs/reiserfs/inode.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/reiserfs/inode.c
+++ linux-2.6.32-SLE11-SP2/fs/reiserfs/inode.c
@@ -2423,7 +2423,7 @@ static int reiserfs_write_full_page(stru
 		/* from this point on, we know the buffer is mapped to a
 		 * real block and not a direct item
 		 */
-		if (wbc->sync_mode != WB_SYNC_NONE || !wbc->nonblocking) {
+		if (wbc->sync_mode != WB_SYNC_NONE) {
 			lock_buffer(bh);
 		} else {
 			if (!trylock_buffer(bh)) {
Index: linux-2.6.32-SLE11-SP2/fs/xfs/linux-2.6/xfs_aops.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/xfs/linux-2.6/xfs_aops.c
+++ linux-2.6.32-SLE11-SP2/fs/xfs/linux-2.6/xfs_aops.c
@@ -982,7 +982,7 @@ xfs_page_state_convert(
 	int			all_bh = unmapped;
 
 	if (startio) {
-		if (wbc->sync_mode == WB_SYNC_NONE && wbc->nonblocking)
+		if (wbc->sync_mode == WB_SYNC_NONE)
 			trylock |= BMAPI_TRYLOCK;
 	}
 
Index: linux-2.6.32-SLE11-SP2/mm/migrate.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/mm/migrate.c
+++ linux-2.6.32-SLE11-SP2/mm/migrate.c
@@ -445,7 +445,6 @@ static int writeout(struct address_space
 		.nr_to_write = 1,
 		.range_start = 0,
 		.range_end = LLONG_MAX,
-		.nonblocking = 1,
 		.for_reclaim = 1
 	};
 	int rc;
Index: linux-2.6.32-SLE11-SP2/mm/vmscan.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/mm/vmscan.c
+++ linux-2.6.32-SLE11-SP2/mm/vmscan.c
@@ -432,7 +432,6 @@ static pageout_t pageout(struct page *pa
 			.nr_to_write = SWAP_CLUSTER_MAX,
 			.range_start = 0,
 			.range_end = LLONG_MAX,
-			.nonblocking = 1,
 			.for_reclaim = 1,
 		};
 
Index: linux-2.6.32-SLE11-SP2/fs/gfs2/aops.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/gfs2/aops.c
+++ linux-2.6.32-SLE11-SP2/fs/gfs2/aops.c
@@ -313,11 +313,6 @@ static int gfs2_write_jdata_pagevec(stru
 
 		if (ret || (--(wbc->nr_to_write) <= 0))
 			ret = 1;
-		if (wbc->nonblocking && bdi_write_congested(bdi)) {
-			wbc->encountered_congestion = 1;
-			ret = 1;
-		}
-
 	}
 	gfs2_trans_end(sdp);
 	return ret;
@@ -348,11 +343,6 @@ static int gfs2_write_cache_jdata(struct
 	int scanned = 0;
 	int range_whole = 0;
 
-	if (wbc->nonblocking && bdi_write_congested(bdi)) {
-		wbc->encountered_congestion = 1;
-		return 0;
-	}
-
 	pagevec_init(&pvec, 0);
 	if (wbc->range_cyclic) {
 		index = mapping->writeback_index; /* Start from prev offset */
