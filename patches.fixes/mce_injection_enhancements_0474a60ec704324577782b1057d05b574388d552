From: Andi Kleen <andi@firstfloor.org>
Subject: HWPOISON: Use new shake_page in memory_failure
References: Requested by Intel for better MCE/MCA testing
Patch-Mainline: yes (2.6.33)
Git-commit: 0474a60ec704324577782b1057d05b574388d552

Signed-off-by: Thomas Renninger <trenn@suse.de>

shake_page handles more types of page caches than
the much simpler lru_add_drain_all:

- slab (quite inefficiently for now)
- any other caches with a shrinker callback
- per cpu page allocator pages
- per CPU LRU

Use this call to try to turn pages into free or LRU pages.
Then handle the case of the page becoming free after drain everything.

Signed-off-by: Andi Kleen <ak@linux.intel.com>

---
 mm/memory-failure.c |    9 ++++++++-
 1 file changed, 8 insertions(+), 1 deletion(-)

Index: linux-2.6.32-SLE11-SP1/mm/memory-failure.c
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/mm/memory-failure.c
+++ linux-2.6.32-SLE11-SP1/mm/memory-failure.c
@@ -931,9 +931,16 @@ int __memory_failure(unsigned long pfn, 
 	 * walked by the page reclaim code, however that's not a big loss.
 	 */
 	if (!PageLRU(p))
-		lru_add_drain_all();
+		shake_page(p, 0);
 	lru_flag = p->flags & (1UL << PG_lru);
 	if (isolate_lru_page(p)) {
+		/*
+		 * shake_page could have turned it free.
+		 */
+		if (is_free_buddy_page(p)) {
+			action_result(pfn, "free buddy, 2nd try", DELAYED);
+			return 0;
+		}
 		action_result(pfn, "non LRU", IGNORED);
 		put_page(p);
 		return -EBUSY;

