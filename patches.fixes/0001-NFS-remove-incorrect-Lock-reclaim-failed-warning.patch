From: NeilBrown <neilb@suse.de>
Date: Mon, 12 Aug 2013 16:52:47 +1000
Subject: [PATCH] NFS: remove incorrect "Lock reclaim failed!" warning.
Git-commit: 6686390bab6a0e049fa7040631aee08b35a55293
Patch-mainline: v3.12
References: bnc#903331

After reclaiming state that was lost, the NFS client tries to reclaim
any locks, and then checks that each one has NFS_LOCK_INITIALIZED set
(which means that the server has confirmed the lock).
However if the client holds a delegation, nfs_reclaim_locks() simply aborts
(or more accurately it called nfs_lock_reclaim() and that returns without
doing anything).

This is because when a delegation is held, the server doesn't need to
know about locks.

So if a delegation is held, NFS_LOCK_INITIALIZED is not expected, and
its absence is certainly not an error.

So don't print the warnings if NFS_DELGATED_STATE is set.

Signed-off-by: NeilBrown <neilb@suse.de>
Signed-off-by: Trond Myklebust <Trond.Myklebust@netapp.com>
Acked-by: NeilBrown <neilb@suse.de>

---
 fs/nfs/nfs4state.c |   10 ++++++----
 1 file changed, 6 insertions(+), 4 deletions(-)

--- linux-3.0-SLE11-SP3.orig/fs/nfs/nfs4state.c
+++ linux-3.0-SLE11-SP3/fs/nfs/nfs4state.c
@@ -1245,10 +1245,12 @@ restart:
 		if (status >= 0) {
 			status = nfs4_reclaim_locks(state, ops);
 			if (status >= 0) {
-				list_for_each_entry(lock, &state->lock_states, ls_locks) {
-					if (!(lock->ls_flags & NFS_LOCK_INITIALIZED))
-						printk("%s: Lock reclaim failed!\n",
-							__func__);
+				if (test_bit(NFS_DELEGATED_STATE, &state->flags) != 0) {
+					list_for_each_entry(lock, &state->lock_states, ls_locks) {
+						if (!(lock->ls_flags & NFS_LOCK_INITIALIZED))
+							printk("%s: Lock reclaim failed!\n",
+							       __func__);
+					}
 				}
 				nfs4_put_open_state(state);
 				spin_lock(&sp->so_lock);
