Subject: sched: add SD_SHARE_PKG_RESOURCES domain flags proc handler
From: Mike Galbraith <efault@gmx.de>
Date: Tue Jun 12 06:14:01 CEST 2012
Patch-mainline: not yet, submitted
References: References: Scheduler enhancements for I7 (bnc#754690)

Let the user turn select_idle_sibling() on/off again.

518cd62 - sched: Only queue remote wakeups when crossing cache boundaries
introduced sd_llc and used it in select_idle_sibling() to avoid pointer
chasing, which had the unfortunate side-effect of removing the user's
ability to turn select_idle_sibling() on/off via domain flags.  Add a
simple proc handler to restore that capability.

Signed-off-by: Mike Galbraith <efault@gmx.de>
Acked-by: Mike Galbraith <mgalbraith@suse.de>

---
 kernel/sched.c |   28 +++++++++++++++++++++++++++-
 1 file changed, 27 insertions(+), 1 deletion(-)

--- a/kernel/sched.c
+++ b/kernel/sched.c
@@ -6463,6 +6463,32 @@ static struct ctl_table sd_ctl_root[] =
 	{}
 };
 
+int domain_flags_handler(struct ctl_table *table, int write,
+		void __user *buffer, size_t *lenp,
+		loff_t *ppos)
+{
+	int ret, cpu;
+	struct sched_domain *sd;
+	static DEFINE_MUTEX(mutex);
+
+	mutex_lock(&mutex);
+	ret = proc_dointvec_minmax(table, write, buffer, lenp, ppos);
+
+	if (!ret && write) {
+		get_online_cpus();
+		rcu_read_lock();
+		for_each_cpu(cpu, cpu_online_mask) {
+			sd = highest_flag_domain(cpu, SD_SHARE_PKG_RESOURCES);
+			rcu_assign_pointer(per_cpu(sd_llc, cpu), sd);
+		}
+		rcu_read_unlock();
+		put_online_cpus();
+	}
+	mutex_unlock(&mutex);
+
+	return ret;
+}
+
 static struct ctl_table *sd_alloc_ctl_entry(int n)
 {
 	struct ctl_table *entry =
@@ -6534,7 +6560,7 @@ sd_alloc_ctl_domain_table(struct sched_d
 		&sd->cache_nice_tries,
 		sizeof(int), 0644, proc_dointvec_minmax);
 	set_table_entry(&table[10], "flags", &sd->flags,
-		sizeof(int), 0644, proc_dointvec_minmax);
+		sizeof(int), 0644, domain_flags_handler);
 	set_table_entry(&table[11], "name", sd->name,
 		CORENAME_MAX_SIZE, 0444, proc_dostring);
 	/* &table[12] is terminator */
