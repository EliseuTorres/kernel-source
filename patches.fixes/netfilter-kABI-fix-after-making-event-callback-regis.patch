From: Hans Schillstrom <hans.schillstrom@ericsson.com>
Date: Thu, 26 Apr 2012 14:33:31 +0200
Subject: netfilter: kABI fix after making event callback registration per-netns
Patch-mainline: never - kABI fix
References: bnc#758540

Use net_generic() to avoid kABI breakage caused by modification
of struct netns_ct.

Signed-off-by: Hans Schillstrom <hans.schillstrom@ericsson.com>
Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 include/net/netfilter/nf_conntrack_ecache.h |   12 ++++++++--
 include/net/netns/conntrack.h               |    9 ++++++-
 net/netfilter/nf_conntrack_ecache.c         |   23 +++++++++++++--------
 net/netfilter/nf_conntrack_standalone.c     |   28 +++++++++++++++++++++++++++
 4 files changed, 58 insertions(+), 14 deletions(-)

diff --git a/include/net/netfilter/nf_conntrack_ecache.h b/include/net/netfilter/nf_conntrack_ecache.h
index a88fb69..3b0d064 100644
--- a/include/net/netfilter/nf_conntrack_ecache.h
+++ b/include/net/netfilter/nf_conntrack_ecache.h
@@ -56,6 +56,9 @@ nf_ct_ecache_ext_add(struct nf_conn *ct, u16 ctmask, u16 expmask, gfp_t gfp)
 };
 
 #ifdef CONFIG_NF_CONNTRACK_EVENTS
+
+extern struct netns_ct_exp *get_netns_ct_exp(struct net *net);
+
 /* This structure is passed to event handler */
 struct nf_ct_event {
 	struct nf_conn *ct;
@@ -76,9 +79,10 @@ static inline void
 nf_conntrack_event_cache(enum ip_conntrack_events event, struct nf_conn *ct)
 {
 	struct net *net = nf_ct_net(ct);
+	struct netns_ct_exp *net_ct = get_netns_ct_exp(net);
 	struct nf_conntrack_ecache *e;
 
-	if (net->ct.nf_conntrack_event_cb == NULL)
+	if (net_ct->nf_conntrack_event_cb == NULL)
 		return;
 
 	e = nf_ct_ecache_find(ct);
@@ -96,11 +100,12 @@ nf_conntrack_eventmask_report(unsigned int eventmask,
 {
 	int ret = 0;
 	struct net *net = nf_ct_net(ct);
+	struct netns_ct_exp *net_ct = get_netns_ct_exp(net);
 	struct nf_ct_event_notifier *notify;
 	struct nf_conntrack_ecache *e;
 
 	rcu_read_lock();
-	notify = rcu_dereference(net->ct.nf_conntrack_event_cb);
+	notify = rcu_dereference(net_ct->nf_conntrack_event_cb);
 	if (notify == NULL)
 		goto out_unlock;
 
@@ -175,11 +180,12 @@ nf_ct_expect_event_report(enum ip_conntrack_expect_events event,
 			  int report)
 {
 	struct net *net = nf_ct_exp_net(exp);
+	struct netns_ct_exp *net_ct = get_netns_ct_exp(net);
 	struct nf_exp_event_notifier *notify;
 	struct nf_conntrack_ecache *e;
 
 	rcu_read_lock();
-	notify = rcu_dereference(net->ct.nf_expect_event_cb);
+	notify = rcu_dereference(net_ct->nf_expect_event_cb);
 	if (notify == NULL)
 		goto out_unlock;
 
diff --git a/include/net/netns/conntrack.h b/include/net/netns/conntrack.h
index f3d7fc5..41c9e3d 100644
--- a/include/net/netns/conntrack.h
+++ b/include/net/netns/conntrack.h
@@ -18,8 +18,6 @@ struct netns_ct {
 	struct hlist_nulls_head	unconfirmed;
 	struct hlist_nulls_head	dying;
 	struct ip_conntrack_stat __percpu *stat;
-	struct nf_ct_event_notifier __rcu *nf_conntrack_event_cb;
-	struct nf_exp_event_notifier __rcu *nf_expect_event_cb;
 	int			sysctl_events;
 	unsigned int		sysctl_events_retry_timeout;
 	int			sysctl_acct;
@@ -34,4 +32,11 @@ struct netns_ct {
 #endif
 	char			*slabname;
 };
+
+#ifdef CONFIG_NF_CONNTRACK_EVENTS
+struct netns_ct_exp {
+	struct nf_ct_event_notifier __rcu *nf_conntrack_event_cb;
+	struct nf_exp_event_notifier __rcu *nf_expect_event_cb;
+};
+#endif
 #endif
diff --git a/net/netfilter/nf_conntrack_ecache.c b/net/netfilter/nf_conntrack_ecache.c
index c65447d..535aceb 100644
--- a/net/netfilter/nf_conntrack_ecache.c
+++ b/net/netfilter/nf_conntrack_ecache.c
@@ -31,12 +31,13 @@ static DEFINE_MUTEX(nf_ct_ecache_mutex);
 void nf_ct_deliver_cached_events(struct nf_conn *ct)
 {
 	struct net *net = nf_ct_net(ct);
+	struct netns_ct_exp *net_ct = get_netns_ct_exp(net);
 	unsigned long events;
 	struct nf_ct_event_notifier *notify;
 	struct nf_conntrack_ecache *e;
 
 	rcu_read_lock();
-	notify = rcu_dereference(net->ct.nf_conntrack_event_cb);
+	notify = rcu_dereference(net_ct->nf_conntrack_event_cb);
 	if (notify == NULL)
 		goto out_unlock;
 
@@ -82,15 +83,16 @@ int nf_conntrack_register_notifier(struct net *net,
 {
 	int ret = 0;
 	struct nf_ct_event_notifier *notify;
+	struct netns_ct_exp *net_ct = get_netns_ct_exp(net);
 
 	mutex_lock(&nf_ct_ecache_mutex);
-	notify = rcu_dereference_protected(net->ct.nf_conntrack_event_cb,
+	notify = rcu_dereference_protected(net_ct->nf_conntrack_event_cb,
 					   lockdep_is_held(&nf_ct_ecache_mutex));
 	if (notify != NULL) {
 		ret = -EBUSY;
 		goto out_unlock;
 	}
-	rcu_assign_pointer(net->ct.nf_conntrack_event_cb, new);
+	rcu_assign_pointer(net_ct->nf_conntrack_event_cb, new);
 	mutex_unlock(&nf_ct_ecache_mutex);
 	return ret;
 
@@ -104,12 +106,13 @@ void nf_conntrack_unregister_notifier(struct net *net,
 				      struct nf_ct_event_notifier *new)
 {
 	struct nf_ct_event_notifier *notify;
+	struct netns_ct_exp *net_ct = get_netns_ct_exp(net);
 
 	mutex_lock(&nf_ct_ecache_mutex);
-	notify = rcu_dereference_protected(net->ct.nf_conntrack_event_cb,
+	notify = rcu_dereference_protected(net_ct->nf_conntrack_event_cb,
 					   lockdep_is_held(&nf_ct_ecache_mutex));
 	BUG_ON(notify != new);
-	RCU_INIT_POINTER(net->ct.nf_conntrack_event_cb, NULL);
+	RCU_INIT_POINTER(net_ct->nf_conntrack_event_cb, NULL);
 	mutex_unlock(&nf_ct_ecache_mutex);
 }
 EXPORT_SYMBOL_GPL(nf_conntrack_unregister_notifier);
@@ -119,15 +122,16 @@ int nf_ct_expect_register_notifier(struct net *net,
 {
 	int ret = 0;
 	struct nf_exp_event_notifier *notify;
+	struct netns_ct_exp *net_ct = get_netns_ct_exp(net);
 
 	mutex_lock(&nf_ct_ecache_mutex);
-	notify = rcu_dereference_protected(net->ct.nf_expect_event_cb,
+	notify = rcu_dereference_protected(net_ct->nf_expect_event_cb,
 					   lockdep_is_held(&nf_ct_ecache_mutex));
 	if (notify != NULL) {
 		ret = -EBUSY;
 		goto out_unlock;
 	}
-	rcu_assign_pointer(net->ct.nf_expect_event_cb, new);
+	rcu_assign_pointer(net_ct->nf_expect_event_cb, new);
 	mutex_unlock(&nf_ct_ecache_mutex);
 	return ret;
 
@@ -141,12 +145,13 @@ void nf_ct_expect_unregister_notifier(struct net *net,
 				      struct nf_exp_event_notifier *new)
 {
 	struct nf_exp_event_notifier *notify;
+	struct netns_ct_exp *net_ct = get_netns_ct_exp(net);
 
 	mutex_lock(&nf_ct_ecache_mutex);
-	notify = rcu_dereference_protected(net->ct.nf_expect_event_cb,
+	notify = rcu_dereference_protected(net_ct->nf_expect_event_cb,
 					   lockdep_is_held(&nf_ct_ecache_mutex));
 	BUG_ON(notify != new);
-	RCU_INIT_POINTER(net->ct.nf_expect_event_cb, NULL);
+	RCU_INIT_POINTER(net_ct->nf_expect_event_cb, NULL);
 	mutex_unlock(&nf_ct_ecache_mutex);
 }
 EXPORT_SYMBOL_GPL(nf_ct_expect_unregister_notifier);
diff --git a/net/netfilter/nf_conntrack_standalone.c b/net/netfilter/nf_conntrack_standalone.c
index 05e9feb..8bac70a 100644
--- a/net/netfilter/nf_conntrack_standalone.c
+++ b/net/netfilter/nf_conntrack_standalone.c
@@ -34,6 +34,10 @@
 
 MODULE_LICENSE("GPL");
 
+#ifdef CONFIG_NF_CONNTRACK_EVENTS
+static int ctnl_net_id __read_mostly;
+#endif
+
 #ifdef CONFIG_PROC_FS
 int
 print_tuple(struct seq_file *s, const struct nf_conntrack_tuple *tuple,
@@ -569,14 +573,38 @@ static struct pernet_operations nf_conntrack_net_ops = {
 	.exit = nf_conntrack_net_exit,
 };
 
+#ifdef CONFIG_NF_CONNTRACK_EVENTS
+static struct pernet_operations ctnl_fix_ops = {
+	.init = NULL,
+	.exit = NULL,
+	.id   = &ctnl_net_id,
+	.size = sizeof(struct netns_ct_exp),
+};
+
+/* for net_generic(); including it on top would change print_tuple checksum */
+#include <net/netns/generic.h>
+
+struct netns_ct_exp *get_netns_ct_exp(struct net *net)
+{
+  return net_generic(net, ctnl_net_id);
+}
+EXPORT_SYMBOL(get_netns_ct_exp);
+#endif
+
 static int __init nf_conntrack_standalone_init(void)
 {
+#ifdef CONFIG_NF_CONNTRACK_EVENTS
+	register_pernet_subsys(&ctnl_fix_ops);
+#endif
 	return register_pernet_subsys(&nf_conntrack_net_ops);
 }
 
 static void __exit nf_conntrack_standalone_fini(void)
 {
 	unregister_pernet_subsys(&nf_conntrack_net_ops);
+#ifdef CONFIG_NF_CONNTRACK_EVENTS
+	unregister_pernet_subsys(&ctnl_fix_ops);
+#endif
 }
 
 module_init(nf_conntrack_standalone_init);
-- 
1.7.7

