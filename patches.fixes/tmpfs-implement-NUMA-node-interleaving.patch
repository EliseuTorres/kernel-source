From: Nathan Zimmer <nzimmer@sgi.com>
Date: Thu, 7 Jun 2012 08:48:31 +1000
Subject: [PATCH 1/2] tmpfs: implement NUMA node interleaving
Patch-mainline: not yet, in -mm tree
References: bnc#764209

When tmpfs has the memory policy interleaved it always starts allocating
at each file at node 0.  When there are many small files the lower nodes
fill up disproportionately.

This patch attempts to spread out node usage by starting files at nodes
other then 0.  I disturbed the addr parameter since alloc_pages_vma will
only use it when the policy is MPOL_INTERLEAVE.  Random was picked over
using another variable which would require some sort of contention
management.

[akmp@linux-foundation.org: add comment]
Signed-off-by: Nathan T Zimmer <nzimmer@sgi.com>
Cc: Christoph Lameter <cl@linux.com>
Cc: Nick Piggin <npiggin@gmail.com>
Cc: Hugh Dickins <hughd@google.com>
Cc: Lee Schermerhorn <lee.schermerhorn@hp.com>
Acked-by: Rik van Riel <riel@redhat.com>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Acked-by: Michal Hocko <mhocko@suse.cz>

---
 include/linux/shmem_fs.h |    1 +
 mm/shmem.c               |    3 ++-
 2 files changed, 3 insertions(+), 1 deletion(-)

Index: linux-3.0-SLE11-SP2/mm/shmem.c
===================================================================
--- linux-3.0-SLE11-SP2.orig/mm/shmem.c
+++ linux-3.0-SLE11-SP2/mm/shmem.c
@@ -87,6 +87,7 @@ struct shmem_inode_info {
 	struct list_head	swaplist;	/* chain of maybes on swap */
 	struct list_head	xattr_list;	/* list of shmem_xattr */
 	struct inode		vfs_inode;
+ 	unsigned long           node_offset;	/* bias for interleaved nodes */
 };
 
 struct shmem_sb_info {
@@ -1238,9 +1239,12 @@ static struct page *shmem_alloc_page(gfp
 	pvma.vm_policy = mpol_shared_policy_lookup(&info->policy, idx);
 
 	/*
-	 * alloc_page_vma() will drop the shared policy reference
+	 * alloc_page_vma() will drop the shared policy reference.
+	 *
+	 * To avoid allocating all tmpfs pages on node 0, we fake up a virtual
+	 * address based on this file's predetermined preferred node.
 	 */
-	return alloc_page_vma(gfp, &pvma, 0);
+	return alloc_page_vma(gfp, &pvma, info->node_offset << PAGE_SHIFT);
 }
 #else /* !CONFIG_NUMA */
 #ifdef CONFIG_TMPFS
@@ -1624,6 +1628,7 @@ static struct inode *shmem_get_inode(str
 			inode->i_fop = &shmem_file_operations;
 			mpol_shared_policy_init(&info->policy,
 						 shmem_get_sbmpol(sbinfo));
+			info->node_offset = node_random(&node_online_map);
 			break;
 		case S_IFDIR:
 			inc_nlink(inode);
