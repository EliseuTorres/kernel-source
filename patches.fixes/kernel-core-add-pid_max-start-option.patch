From: Hedi Berriche <hedi@sgi.com>
Subject: init: Increase pid_max based on num_possible_cpus v4
References: bnc#598253, FATE#306952
Patch-mainline: not yet

On a system with a substantial number of processors, the early
default pid_max of 32k will not be enough.  A system with 1664 CPU's,
there are 25163 processes started before the login prompt.  It's
estimated that with 2048 CPU's we will pass the 32k limit.
With 4096, we'll reach that limit very early during the boot cycle,
and processes would stall waiting for an available pid.

This patch increases the early maximum number of pids available, and
increases the minimum number of pids that can be set during runtime.

Version 4: Fix subject line

Version 3: Automatically increase pid_max based on number of cpus
instead of adding a cmdline option for the operator to set it.

Signed-off-by: Hedi Berriche <hedi@sgi.com>
Signed-off-by: Mike Travis <travis@sgi.com>
Signed-off-by: Robin Holt <holt@sgi.com>
Signed-off-by: Rafael J. Wysocki <rjw@suse.de>
---
 include/linux/threads.h |    9 +++++++++
 kernel/pid.c            |    7 +++++++
 2 files changed, 16 insertions(+)

Index: linux-2.6.32-SLE11-SP1/include/linux/threads.h
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/include/linux/threads.h
+++ linux-2.6.32-SLE11-SP1/include/linux/threads.h
@@ -33,4 +33,13 @@
 #define PID_MAX_LIMIT (CONFIG_BASE_SMALL ? PAGE_SIZE * 8 : \
 	(sizeof(long) > 4 ? 4 * 1024 * 1024 : PID_MAX_DEFAULT))
 
+/*
+ * Define a minimum number of pids per cpu.  Heuristically based
+ * on original pid max of 32k for 32 cpus.  Also, increase the
+ * minimum settable value for pid_max on the running system based
+ * on similar defaults.  See kernel/pid.c:pidmap_init() for details.
+ */
+#define PIDS_PER_CPU_DEFAULT	1024
+#define PIDS_PER_CPU_MIN	8
+
 #endif
Index: linux-2.6.32-SLE11-SP1/kernel/pid.c
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/kernel/pid.c
+++ linux-2.6.32-SLE11-SP1/kernel/pid.c
@@ -511,6 +511,13 @@ void __init pidhash_init(void)
 
 void __init pidmap_init(void)
 {
+	/* bump default and minimum pid_max based on number of cpus */
+	pid_max = min(pid_max_max, max(pid_max,
+				PIDS_PER_CPU_DEFAULT * num_possible_cpus()));
+	pid_max_min = max(pid_max_min,
+				PIDS_PER_CPU_MIN * num_possible_cpus());
+	pr_info("pid_max: default: %u minimum: %u\n", pid_max, pid_max_min);
+
 	init_pid_ns.pidmap[0].page = kzalloc(PAGE_SIZE, GFP_KERNEL);
 	/* Reserve PID 0. We never call free_pidmap(0) */
 	set_bit(0, init_pid_ns.pidmap[0].page);
