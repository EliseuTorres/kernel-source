From: NeilBrown <neilb@suse.de>
Subject: Don't lose sockets when nfsd shutdown races with connection timeout
Patch-mainline: 3.9
References: bnc#871854

This patch is similar to upstream
commit cc630d9f476445927fca599f81182c7f06f79058
but much simpler on older code.

If a connection is auto-closed by svc_age_temp_xprts() just as the
nfs server is being shutdown, that connection my be left on sp_sockets,
but not on sv_tempsocks any more.  So it doesn't get shutdown properly
and a subsequence network callback (e.g. state_change) can cause an oops.

So move any such sockets onto sv_tempsocks so they get closed properly

Acked-by: NeilBrown <neilb@suse.de>
Signed-off-by: Neil Brown <neilb@suse.de>

---
 net/sunrpc/svc_xprt.c |    2 ++
 1 file changed, 2 insertions(+)

--- linux-3.0.orig/net/sunrpc/svc_xprt.c
+++ linux-3.0/net/sunrpc/svc_xprt.c
@@ -943,6 +943,8 @@ void svc_close_all(struct svc_serv *serv
 		while (!list_empty(&pool->sp_sockets)) {
 			xprt = list_first_entry(&pool->sp_sockets, struct svc_xprt, xpt_ready);
 			list_del_init(&xprt->xpt_ready);
+			if (test_and_clear_bit(XPT_DETACHED, &xprt->xpt_flags))
+				list_add(&xprt->xpt_list, &serv->sv_tempsocks);
 		}
 		spin_unlock_bh(&pool->sp_lock);
 	}
