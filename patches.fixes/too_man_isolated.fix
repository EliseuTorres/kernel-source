From: NeilBrown <neilb@suse.de>
Subject: Avoid deadlock in GFP_IO/GFP_FS allocation
Patch-mainline: no
References: bnc#632870

It is important that a GFP_IO or GFP_FS allocation does not wait for
IO or FS activity (respectively) and so in particular they must not
wait for GFP_KERNEL allocations to complete.

However too_many_isolated tries to limit the number of processes in
the direct reclaim path so doing so might cause a process doing GFP_IO
or GFP_FS to wait while a process doing GFP_KERNEL proceeds.  This is
an incorrect dependancy and can lead to deadlocks.

So allow GFP_FS and GFP_IO processes a lot more leniency so they only
compete with each other and not with GFP_KERNEL.

Acked-by: NeilBrown <neilb@suse.de>
Signed-off-by: Neil Brown <neilb@suse.de>

---
 mm/vmscan.c |    4 +++-
 1 file changed, 3 insertions(+), 1 deletion(-)

--- linux-2.6.32-SLE11-SP1.orig/mm/vmscan.c
+++ linux-2.6.32-SLE11-SP1/mm/vmscan.c
@@ -1066,6 +1066,7 @@ static int too_many_isolated(struct zone
 		struct scan_control *sc)
 {
 	unsigned long inactive, isolated;
+	int ratio;
 
 	if (current_is_kswapd())
 		return 0;
@@ -1081,7 +1082,8 @@ static int too_many_isolated(struct zone
 		isolated = zone_page_state(zone, NR_ISOLATED_ANON);
 	}
 
-	return isolated > inactive;
+	ratio = sc->gfp_mask & (__GFP_IO | __GFP_FS) ? 1 : 8;
+	return isolated > inactive * ratio;
 }
 
 /*
