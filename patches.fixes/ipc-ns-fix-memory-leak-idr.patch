From: "Serge E. Hallyn" <serue@us.ibm.com>
Subject: ipc: ns fix memory leak
References: bnc#518767
Patch-upstream: should be 2.6.33
Subject: ipc: ns fix memory leak idr

We have apparently had a memory leak since
7ca7e564e049d8b350ec9d958ff25eaa24226352 "ipc: store ipcs into IDRs" in
2007.  The idr of which 3 exist for each ipc namespace is never freed.

This patch simply frees them when the ipcns is freed.  I don't believe any
idr_remove() are done from rcu (and could therefore be delayed until after
this idr_destroy()), so the patch should be safe.  Some quick testing
showed no harm, and the memory leak fixed.

Caught by kmemleak.

Signed-off-by: Serge E. Hallyn <serue@us.ibm.com>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>

This doesn't relate directly to the bnc but is first part of IPC series
which includes scalability patches.

Acked-by: Nick Piggin <npiggin@suse.de>
---


diff -puN ipc/msg.c~ipc-ns-fix-memory-leak-idr ipc/msg.c
--- a/ipc/msg.c~ipc-ns-fix-memory-leak-idr
+++ a/ipc/msg.c
@@ -125,6 +125,7 @@ void msg_init_ns(struct ipc_namespace *n
 void msg_exit_ns(struct ipc_namespace *ns)
 {
 	free_ipcs(ns, &msg_ids(ns), freeque);
+	idr_destroy(&ns->ids[IPC_MSG_IDS].ipcs_idr);
 }
 #endif
 
diff -puN ipc/sem.c~ipc-ns-fix-memory-leak-idr ipc/sem.c
--- a/ipc/sem.c~ipc-ns-fix-memory-leak-idr
+++ a/ipc/sem.c
@@ -129,6 +129,7 @@ void sem_init_ns(struct ipc_namespace *n
 void sem_exit_ns(struct ipc_namespace *ns)
 {
 	free_ipcs(ns, &sem_ids(ns), freeary);
+	idr_destroy(&ns->ids[IPC_SEM_IDS].ipcs_idr);
 }
 #endif
 
diff -puN ipc/shm.c~ipc-ns-fix-memory-leak-idr ipc/shm.c
--- a/ipc/shm.c~ipc-ns-fix-memory-leak-idr
+++ a/ipc/shm.c
@@ -101,6 +101,7 @@ static void do_shm_rmid(struct ipc_names
 void shm_exit_ns(struct ipc_namespace *ns)
 {
 	free_ipcs(ns, &shm_ids(ns), do_shm_rmid);
+	idr_destroy(&ns->ids[IPC_SHM_IDS].ipcs_idr);
 }
 #endif
 
_
