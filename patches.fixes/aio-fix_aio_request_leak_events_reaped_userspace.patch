From: Benjamin LaHaise <bcrl@kvack.org>
Date: Tue Jun 24 13:12:55 2014 -0400
Subject: aio: fix aio request leak when events are reaped by userspace
Git-commit: f8567a3845ac05bb28f3c1b478ef752762bd39ef
Patch-mainline: v3.16-rc3
References: bnc#884324, CVE-2014-0206

The aio cleanups and optimizations by kmo that were merged into the 3.10
tree added a regression for userspace event reaping.  Specifically, the
reference counts are not decremented if the event is reaped in userspace,
leading to the application being unable to submit further aio requests.
This patch applies to 3.12+.  A separate backport is required for 3.10/3.11.
This issue was uncovered as part of CVE-2014-0206.
    
Note: Modified this patch for porting to 3.11 kernel.

Signed-off-by: Benjamin LaHaise <bcrl@kvack.org>
Cc: stable@vger.kernel.org
Cc: Kent Overstreet <kmo@daterainc.com>
Cc: Mateusz Guzik <mguzik@redhat.com>
Cc: Petr Matousek <pmatouse@redhat.com>
Signed-off-by: Shirish Pargaonkar <spargaonkar@suse.com>
---
diff --git a/fs/aio.c b/fs/aio.c
index 4a3232f..9d1b315 100644
--- a/fs/aio.c
+++ b/fs/aio.c
@@ -323,7 +323,6 @@ static void free_ioctx(struct kioctx *ctx)
 
 		avail = (head <= ctx->tail ? ctx->tail : ctx->nr_events) - head;
 
-		atomic_sub(avail, &ctx->reqs_active);
 		head += avail;
 		head %= ctx->nr_events;
 	}
@@ -698,6 +697,7 @@ void aio_complete(struct kiocb *iocb, long res, long res2)
 put_rq:
 	/* everything turned out well, dispose of the aiocb. */
 	aio_put_req(iocb);
+	atomic_dec(&ctx->reqs_active);
 
 	/*
 	 * We have to order our ring_info tail store above and test
@@ -790,7 +790,6 @@ static long aio_read_events_ring(struct kioctx *ctx,
 
 	pr_debug("%li  h%u t%u\n", ret, head, ctx->tail);
 
-	atomic_sub(ret, &ctx->reqs_active);
 out:
 	mutex_unlock(&ctx->ring_lock);
 
