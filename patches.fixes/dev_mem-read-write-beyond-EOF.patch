From: Petr Tesarik <ptesarik@suse.cz>
Subject: Return EOF on out-of-bounds read from /dev/mem
Patch-Mainline: no
References: FATE#310031

The off parameter (type loff_t) may specify an offset that cannot
be represented by a long. Currently, /dev/mem wraps around, which
may to cause applications to read/write incorrect regions of memory
by accident.

Follow the usual file semantics here and return 0 when reading or
-EFBIG when writing beyond the accessible range.

Signed-off-by: Petr Tesarik <ptesarik@suse.cz>
---
 drivers/char/mem.c |    6 ++++++
 1 file changed, 6 insertions(+)

--- a/drivers/char/mem.c
+++ b/drivers/char/mem.c
@@ -134,6 +134,9 @@ static ssize_t read_mem(struct file * fi
 	ssize_t read, sz;
 	char *ptr;
 
+	if (p != *ppos)
+		return 0;
+
 	if (!valid_phys_addr_range(p, count))
 		return -EFAULT;
 	read = 0;
@@ -202,6 +205,9 @@ static ssize_t write_mem(struct file * f
 	unsigned long copied;
 	void *ptr;
 
+	if (p != *ppos)
+		return -EFBIG;
+
 	if (!valid_phys_addr_range(p, count))
 		return -EFAULT;
 
