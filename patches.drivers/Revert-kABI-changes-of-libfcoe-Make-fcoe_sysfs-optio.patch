From: Ales Novak <alnovak@suse.cz>
Date: Thu, 3 Oct 2013 14:56:55 +0200
Subject: Revert kABI changes of 'libfcoe: Make fcoe_sysfs optional'
References: bnc#837206
Patch-Mainline: n/a

Reverts a kABI change made by 'libfcoe: Make fcoe_sysfs optional' patch.
Since the only information we need to pass now is if the fcoe_ctlr_device
struct is laid before the fcoe_cltr, we don't need new member of fcoe_cltr
and code this information into one bit of unused 'user_mfs' member.

Signed-off-by: Ales Novak <alnovak@suse.cz>
Acked-by: Hannes Reinecke <hare@suse.de>
---
 drivers/scsi/bnx2fc/bnx2fc_fcoe.c |  2 +-
 drivers/scsi/fcoe/fcoe.c          |  2 +-
 include/scsi/libfcoe.h            | 15 ++++++++++-----
 3 files changed, 12 insertions(+), 7 deletions(-)

diff --git a/drivers/scsi/bnx2fc/bnx2fc_fcoe.c b/drivers/scsi/bnx2fc/bnx2fc_fcoe.c
index 2278755..973f1ed 100644
--- a/drivers/scsi/bnx2fc/bnx2fc_fcoe.c
+++ b/drivers/scsi/bnx2fc/bnx2fc_fcoe.c
@@ -1419,7 +1419,7 @@ struct bnx2fc_interface *bnx2fc_interface_create(struct bnx2fc_hba *hba,
 		return NULL;
 	}
 	ctlr = fcoe_ctlr_device_priv(ctlr_dev);
-	ctlr->cdev = ctlr_dev;
+	ctlr->user_mfs |= FCOE_CTLR_LIES_AFTER_DEV;
 	interface = fcoe_ctlr_priv(ctlr);
 	dev_hold(netdev);
 	kref_init(&interface->kref);
diff --git a/drivers/scsi/fcoe/fcoe.c b/drivers/scsi/fcoe/fcoe.c
index a71692c..0f8929d 100644
--- a/drivers/scsi/fcoe/fcoe.c
+++ b/drivers/scsi/fcoe/fcoe.c
@@ -406,7 +406,7 @@ static struct fcoe_interface *fcoe_interface_create(struct net_device *netdev,
 	}
 
 	ctlr = fcoe_ctlr_device_priv(ctlr_dev);
-	ctlr->cdev = ctlr_dev;
+	ctlr->user_mfs |= FCOE_CTLR_LIES_AFTER_DEV;
 	fcoe = fcoe_ctlr_priv(ctlr);
 
 	dev_hold(netdev);
diff --git a/include/scsi/libfcoe.h b/include/scsi/libfcoe.h
index ad5fbb0..d8037f1 100644
--- a/include/scsi/libfcoe.h
+++ b/include/scsi/libfcoe.h
@@ -90,7 +90,6 @@ enum fip_state {
  * @lp:		   &fc_lport: libfc local port.
  * @sel_fcf:	   currently selected FCF, or NULL.
  * @fcfs:	   list of discovered FCFs.
- * @cdev:          (Optional) pointer to sysfs fcoe_ctlr_device.
  * @fcf_count:	   number of discovered FCF entries.
  * @sol_time:	   time when a multicast solicitation was last sent.
  * @sel_time:	   time after which to select an FCF.
@@ -103,7 +102,8 @@ enum fip_state {
  * @flogi_req:	   clone of FLOGI request sent
  * @rnd_state:	   state for pseudo-random number generator.
  * @port_id:	   proposed or selected local-port ID.
- * @user_mfs:	   configured maximum FC frame size, including FC header.
+ * @user_mfs:	   configured maximum FC frame size, including FC header. Highest bit means
+ *                 this structure is allocated in line with the fcoe_ctlr_device.
  * @flogi_oxid:    exchange ID of most recent fabric login.
  * @flogi_req_send: send of FLOGI requested
  * @flogi_count:   number of FLOGI attempts in AUTO mode.
@@ -128,7 +128,6 @@ struct fcoe_ctlr {
 	struct fc_lport *lp;
 	struct fcoe_fcf *sel_fcf;
 	struct list_head fcfs;
-	struct fcoe_ctlr_device *cdev;
 	u16 fcf_count;
 	unsigned long sol_time;
 	unsigned long sel_time;
@@ -171,10 +170,16 @@ static inline void *fcoe_ctlr_priv(const struct fcoe_ctlr *ctlr)
 }
 
 /*
+ * Flag for user_mfs to say that fcoe_ctlr is allocated in line with the
+ * fcoe_ctlr_device.
+ */
+#define FCOE_CTLR_LIES_AFTER_DEV (1 << 15)
+/*
  * This assumes that the fcoe_ctlr (x) is allocated with the fcoe_ctlr_device.
  */
-#define fcoe_ctlr_to_ctlr_dev(x)					\
-	(x)->cdev
+#define fcoe_ctlr_to_ctlr_dev(x)\
+		((x->user_mfs & FCOE_CTLR_LIES_AFTER_DEV)?\
+		(struct fcoe_ctlr_device *)(((struct fcoe_ctlr_device *)(x)) - 1):NULL)
 
 /**
  * struct fcoe_fcf - Fibre-Channel Forwarder
-- 
1.7.12.4

