From: Dan Williams <dan.j.williams@intel.com>
Date: Sun, 8 May 2011 22:15:10 -0700
Subject: [PATCH 182/273] isci: uplevel state machine
Git-commit: 3bff9d54ecba84e538da822349a9a6fd6e534539
References: FATE#311808,bnc#709528
Patch-Mainline: 3.0

unify core/sci_base_state.h and core/sci_base_state_machine.[ch] into
state_machine.[ch]

Reported-by: Christoph Hellwig <hch@lst.de>
Signed-off-by: Dan Williams <dan.j.williams@intel.com>
Signed-off-by: Hannes Reinecke <hare@suse.de>
---
 drivers/scsi/isci/Makefile                        |    2 +-
 drivers/scsi/isci/core/sci_base_state.h           |   84 ----------
 drivers/scsi/isci/core/sci_base_state_machine.c   |  182 ---------------------
 drivers/scsi/isci/core/sci_base_state_machine.h   |  141 ----------------
 drivers/scsi/isci/core/scic_sds_phy.c             |    3 +-
 drivers/scsi/isci/core/scic_sds_phy.h             |    2 +-
 drivers/scsi/isci/core/scic_sds_port.h            |    2 +-
 drivers/scsi/isci/core/scic_sds_request.h         |    2 +-
 drivers/scsi/isci/core/scic_sds_smp_request.c     |    2 +-
 drivers/scsi/isci/core/scic_sds_ssp_request.c     |    2 +-
 drivers/scsi/isci/core/scic_sds_stp_pio_request.h |    1 -
 drivers/scsi/isci/core/scic_sds_stp_request.c     |    3 +-
 drivers/scsi/isci/host.h                          |    2 +-
 drivers/scsi/isci/remote_node_context.c           |    2 +-
 drivers/scsi/isci/remote_node_context.h           |    3 +-
 drivers/scsi/isci/state_machine.c                 |  171 +++++++++++++++++++
 drivers/scsi/isci/state_machine.h                 |  155 ++++++++++++++++++
 17 files changed, 337 insertions(+), 422 deletions(-)
 delete mode 100644 drivers/scsi/isci/core/sci_base_state.h
 delete mode 100644 drivers/scsi/isci/core/sci_base_state_machine.c
 delete mode 100644 drivers/scsi/isci/core/sci_base_state_machine.h
 create mode 100644 drivers/scsi/isci/state_machine.c
 create mode 100644 drivers/scsi/isci/state_machine.h

diff --git a/drivers/scsi/isci/Makefile b/drivers/scsi/isci/Makefile
index 0153b0f..cfc640f 100644
--- a/drivers/scsi/isci/Makefile
+++ b/drivers/scsi/isci/Makefile
@@ -3,6 +3,7 @@ obj-$(CONFIG_SCSI_ISCI) += isci.o
 isci-objs := init.o phy.o request.o sata.o \
 	     remote_device.o port.o timers.o \
 	     host.o task.o probe_roms.o \
+	     state_machine.o \
 	     remote_node_context.o \
 	     remote_node_table.o \
 	     unsolicited_frame_control.o \
@@ -13,5 +14,4 @@ isci-objs := init.o phy.o request.o sata.o \
 	     core/scic_sds_phy.o \
 	     core/scic_sds_ssp_request.o \
 	     core/scic_sds_smp_request.o \
-	     core/sci_base_state_machine.o \
 	     core/sci_util.o
diff --git a/drivers/scsi/isci/core/sci_base_state.h b/drivers/scsi/isci/core/sci_base_state.h
deleted file mode 100644
index d64efac..0000000
--- a/drivers/scsi/isci/core/sci_base_state.h
+++ /dev/null
@@ -1,84 +0,0 @@
-/*
- * This file is provided under a dual BSD/GPLv2 license.  When using or
- * redistributing this file, you may do so under either license.
- *
- * GPL LICENSE SUMMARY
- *
- * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of version 2 of the GNU General Public License as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but
- * WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
- * The full GNU General Public License is included in this distribution
- * in the file called LICENSE.GPL.
- *
- * BSD LICENSE
- *
- * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- *   * Redistributions of source code must retain the above copyright
- *     notice, this list of conditions and the following disclaimer.
- *   * Redistributions in binary form must reproduce the above copyright
- *     notice, this list of conditions and the following disclaimer in
- *     the documentation and/or other materials provided with the
- *     distribution.
- *   * Neither the name of Intel Corporation nor the names of its
- *     contributors may be used to endorse or promote products derived
- *     from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef _SCI_BASE_STATE_H_
-#define _SCI_BASE_STATE_H_
-
-typedef void (*sci_base_state_handler_t)(void);
-
-typedef void (*sci_state_transition_t)(void *base_object);
-
-/**
- * struct sci_base_state - The base state object abstracts the fields common to
- *    all state objects defined in SCI.
- *
- *
- */
-struct sci_base_state {
-	/**
-	 * This field is a function pointer that defines the method to be
-	 * invoked when the state is entered.
-	 */
-	sci_state_transition_t enter_state;
-
-	/**
-	 * This field is a function pointer that defines the method to be
-	 * invoked when the state is exited.
-	 */
-	sci_state_transition_t exit_state;
-
-};
-
-#endif /* _SCI_BASE_STATE_H_ */
diff --git a/drivers/scsi/isci/core/sci_base_state_machine.c b/drivers/scsi/isci/core/sci_base_state_machine.c
deleted file mode 100644
index a704709..0000000
--- a/drivers/scsi/isci/core/sci_base_state_machine.c
+++ /dev/null
@@ -1,182 +0,0 @@
-/*
- * This file is provided under a dual BSD/GPLv2 license.  When using or
- * redistributing this file, you may do so under either license.
- *
- * GPL LICENSE SUMMARY
- *
- * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of version 2 of the GNU General Public License as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but
- * WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
- * The full GNU General Public License is included in this distribution
- * in the file called LICENSE.GPL.
- *
- * BSD LICENSE
- *
- * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- *   * Redistributions of source code must retain the above copyright
- *     notice, this list of conditions and the following disclaimer.
- *   * Redistributions in binary form must reproduce the above copyright
- *     notice, this list of conditions and the following disclaimer in
- *     the documentation and/or other materials provided with the
- *     distribution.
- *   * Neither the name of Intel Corporation nor the names of its
- *     contributors may be used to endorse or promote products derived
- *     from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-/**
- * This file contains all of the functionality common to all state machine
- *    object implementations.
- *
- *
- */
-
-#include "sci_base_state_machine.h"
-
-static void sci_state_machine_exit_state(struct sci_base_state_machine *sm)
-{
-	u32 state = sm->current_state_id;
-	sci_state_transition_t exit = sm->state_table[state].exit_state;
-
-	if (exit)
-		exit(sm->state_machine_owner);
-}
-
-static void sci_state_machine_enter_state(struct sci_base_state_machine *sm)
-{
-	u32 state = sm->current_state_id;
-	sci_state_transition_t enter = sm->state_table[state].enter_state;
-
-	if (enter)
-		enter(sm->state_machine_owner);
-}
-
-/*
- * ******************************************************************************
- * * P R O T E C T E D    M E T H O D S
- * ****************************************************************************** */
-
-/**
- * This method will set the initial state and state table for the state
- *    machine. The caller should follow this request with the initialize
- *    request to cause the state machine to start.
- * @sm: This parameter provides the state machine object to be
- *    constructed.
- * @state_machine_owner: This parameter indicates the object that is owns the
- *    state machine being constructed.
- * @state_table: This parameter specifies the table of state objects that is
- *    managed by this state machine.
- * @initial_state: This parameter specifies the value of the initial state for
- *    this state machine.
- *
- */
-void sci_base_state_machine_construct(struct sci_base_state_machine *sm,
-				      void *owner,
-				      const struct sci_base_state *state_table,
-				      u32 initial_state)
-{
-	sm->state_machine_owner = owner;
-	sm->initial_state_id    = initial_state;
-	sm->previous_state_id   = initial_state;
-	sm->current_state_id    = initial_state;
-	sm->state_table         = state_table;
-}
-
-/**
- * This method will cause the state machine to enter the initial state.
- * @sm: This parameter specifies the state machine that is to
- *    be started.
- *
- * sci_base_state_machine_construct() for how to set the initial state none
- */
-void sci_base_state_machine_start(struct sci_base_state_machine *sm)
-{
-	sm->current_state_id = sm->initial_state_id;
-#if defined(SCI_BASE_ENABLE_SUBJECT_NOTIFICATION)
-	sci_base_subject_notify(&sm->parent);
-#endif
-	sci_state_machine_enter_state(sm);
-}
-
-/**
- * This method will cause the state machine to exit it's current state only.
- * @sm: This parameter specifies the state machine that is to
- *    be stopped.
- *
- */
-void sci_base_state_machine_stop(
-	struct sci_base_state_machine *sm)
-{
-	sci_state_machine_exit_state(sm);
-#if defined(SCI_BASE_ENABLE_SUBJECT_NOTIFICATION)
-	sci_base_subject_notify(&sm->parent);
-#endif
-}
-
-/**
- * This method performs an update to the current state of the state machine.
- * @sm: This parameter specifies the state machine for which
- *    the caller wishes to perform a state change.
- * @next_state: This parameter specifies the new state for the state machine.
- *
- */
-void sci_base_state_machine_change_state(
-	struct sci_base_state_machine *sm,
-	u32 next_state)
-{
-	sci_state_machine_exit_state(sm);
-
-	sm->previous_state_id = sm->current_state_id;
-	sm->current_state_id = next_state;
-
-#if defined(SCI_BASE_ENABLE_SUBJECT_NOTIFICATION)
-	/* Notify of the state change prior to entering the state. */
-	sci_base_subject_notify(&sm->parent);
-#endif
-
-	sci_state_machine_enter_state(sm);
-}
-
-/**
- * This method simply returns the current state of the state machine to the
- *    caller.
- * @sm: This parameter specifies the state machine for which to
- *    retrieve the current state.
- *
- * This method returns a u32 value indicating the current state for the
- * supplied state machine.
- */
-u32 sci_base_state_machine_get_state(struct sci_base_state_machine *sm)
-{
-	return sm->current_state_id;
-}
-
diff --git a/drivers/scsi/isci/core/sci_base_state_machine.h b/drivers/scsi/isci/core/sci_base_state_machine.h
deleted file mode 100644
index c0cf33b..0000000
--- a/drivers/scsi/isci/core/sci_base_state_machine.h
+++ /dev/null
@@ -1,141 +0,0 @@
-/*
- * This file is provided under a dual BSD/GPLv2 license.  When using or
- * redistributing this file, you may do so under either license.
- *
- * GPL LICENSE SUMMARY
- *
- * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of version 2 of the GNU General Public License as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but
- * WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
- * The full GNU General Public License is included in this distribution
- * in the file called LICENSE.GPL.
- *
- * BSD LICENSE
- *
- * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- *   * Redistributions of source code must retain the above copyright
- *     notice, this list of conditions and the following disclaimer.
- *   * Redistributions in binary form must reproduce the above copyright
- *     notice, this list of conditions and the following disclaimer in
- *     the documentation and/or other materials provided with the
- *     distribution.
- *   * Neither the name of Intel Corporation nor the names of its
- *     contributors may be used to endorse or promote products derived
- *     from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#ifndef _SCI_BASE_STATE_MACHINE_H_
-#define _SCI_BASE_STATE_MACHINE_H_
-
-#include <linux/string.h>
-
-/**
- * This file contains all structures, constants, or method declarations common
- *    to all state machines defined in SCI.
- *
- *
- */
-
-
-#include "sci_base_state.h"
-
-
-/**
- * SET_STATE_HANDLER() -
- *
- * This macro simply provides simplified retrieval of an objects state handler.
- */
-#define SET_STATE_HANDLER(object, table, state)	\
-	(object)->state_handlers = &(table)[(state)]
-
-/**
- * struct sci_base_state_machine - This structure defines the fields common to
- *    all state machines.
- *
- *
- */
-struct sci_base_state_machine {
-	/**
-	 * This field points to the start of the state machine's state table.
-	 */
-	const struct sci_base_state *state_table;
-
-	/**
-	 * This field points to the object to which this state machine is
-	 * associated.  It serves as a cookie to be provided to the state
-	 * enter/exit methods.
-	 */
-	void *state_machine_owner;
-
-	/**
-	 * This field simply indicates the state value for the state machine's
-	 * initial state.
-	 */
-	u32 initial_state_id;
-
-	/**
-	 * This field indicates the current state of the state machine.
-	 */
-	u32 current_state_id;
-
-	/**
-	 * This field indicates the previous state of the state machine.
-	 */
-	u32 previous_state_id;
-
-};
-
-/*
- * ******************************************************************************
- * * P R O T E C T E D    M E T H O D S
- * ****************************************************************************** */
-
-void sci_base_state_machine_construct(
-	struct sci_base_state_machine *this_state_machine,
-	void *state_machine_owner,
-	const struct sci_base_state *state_table,
-	u32 initial_state);
-
-void sci_base_state_machine_start(
-	struct sci_base_state_machine *this_state_machine);
-
-void sci_base_state_machine_stop(
-	struct sci_base_state_machine *this_state_machine);
-
-void sci_base_state_machine_change_state(
-	struct sci_base_state_machine *this_state_machine,
-	u32 next_state);
-
-u32 sci_base_state_machine_get_state(
-	struct sci_base_state_machine *this_state_machine);
-
-#endif /* _SCI_BASE_STATE_MACHINE_H_ */
diff --git a/drivers/scsi/isci/core/scic_sds_phy.c b/drivers/scsi/isci/core/scic_sds_phy.c
index c82ccb9..6b49d94 100644
--- a/drivers/scsi/isci/core/scic_sds_phy.c
+++ b/drivers/scsi/isci/core/scic_sds_phy.c
@@ -56,8 +56,7 @@
 #include <scsi/sas.h>
 #include "sas.h"
 #include "host.h"
-#include "sci_base_state.h"
-#include "sci_base_state_machine.h"
+#include "state_machine.h"
 #include "scic_phy.h"
 #include "scic_sds_phy.h"
 #include "scic_sds_port.h"
diff --git a/drivers/scsi/isci/core/scic_sds_phy.h b/drivers/scsi/isci/core/scic_sds_phy.h
index 472718d..0d7bab3 100644
--- a/drivers/scsi/isci/core/scic_sds_phy.h
+++ b/drivers/scsi/isci/core/scic_sds_phy.h
@@ -59,7 +59,7 @@
 #include "sas.h"
 #include "scic_phy.h"
 #include "registers.h"
-#include "sci_base_state_machine.h"
+#include "state_machine.h"
 #include <scsi/libsas.h>
 
 struct scic_sds_port;
diff --git a/drivers/scsi/isci/core/scic_sds_port.h b/drivers/scsi/isci/core/scic_sds_port.h
index 4b28c5a..a351525 100644
--- a/drivers/scsi/isci/core/scic_sds_port.h
+++ b/drivers/scsi/isci/core/scic_sds_port.h
@@ -60,7 +60,7 @@
 #include "isci.h"
 #include "sas.h"
 #include "registers.h"
-#include "sci_base_state_machine.h"
+#include "state_machine.h"
 
 struct scic_sds_controller;
 struct scic_sds_phy;
diff --git a/drivers/scsi/isci/core/scic_sds_request.h b/drivers/scsi/isci/core/scic_sds_request.h
index 5ce7ff2..a8d74a1 100644
--- a/drivers/scsi/isci/core/scic_sds_request.h
+++ b/drivers/scsi/isci/core/scic_sds_request.h
@@ -58,7 +58,7 @@
 
 #include "isci.h"
 #include "scic_io_request.h"
-#include "sci_base_state_machine.h"
+#include "state_machine.h"
 #include "scu_task_context.h"
 #include "scic_sds_stp_request.h"
 #include "sas.h"
diff --git a/drivers/scsi/isci/core/scic_sds_smp_request.c b/drivers/scsi/isci/core/scic_sds_smp_request.c
index 7f33894..6a2b65b 100644
--- a/drivers/scsi/isci/core/scic_sds_smp_request.c
+++ b/drivers/scsi/isci/core/scic_sds_smp_request.c
@@ -54,7 +54,7 @@
  */
 
 #include <scsi/sas.h>
-#include "sci_base_state_machine.h"
+#include "state_machine.h"
 #include "remote_device.h"
 #include "scic_sds_request.h"
 #include "scic_sds_smp_request.h"
diff --git a/drivers/scsi/isci/core/scic_sds_ssp_request.c b/drivers/scsi/isci/core/scic_sds_ssp_request.c
index 137f6dd..3fdf68b 100644
--- a/drivers/scsi/isci/core/scic_sds_ssp_request.c
+++ b/drivers/scsi/isci/core/scic_sds_ssp_request.c
@@ -54,7 +54,7 @@
  */
 
 #include "host.h"
-#include "sci_base_state_machine.h"
+#include "state_machine.h"
 #include "scic_sds_request.h"
 #include "scu_completion_codes.h"
 #include "scu_task_context.h"
diff --git a/drivers/scsi/isci/core/scic_sds_stp_pio_request.h b/drivers/scsi/isci/core/scic_sds_stp_pio_request.h
index d0ae590..e015a11 100644
--- a/drivers/scsi/isci/core/scic_sds_stp_pio_request.h
+++ b/drivers/scsi/isci/core/scic_sds_stp_pio_request.h
@@ -56,7 +56,6 @@
 #ifndef _SCIC_SDS_SATA_PIO_REQUEST_H_
 #define _SCIC_SDS_SATA_PIO_REQUEST_H_
 
-#include "sci_base_state.h"
 #include "scic_sds_request.h"
 #include "scu_task_context.h"
 
diff --git a/drivers/scsi/isci/core/scic_sds_stp_request.c b/drivers/scsi/isci/core/scic_sds_stp_request.c
index 9a787e2..308f486 100644
--- a/drivers/scsi/isci/core/scic_sds_stp_request.c
+++ b/drivers/scsi/isci/core/scic_sds_stp_request.c
@@ -55,8 +55,7 @@
 
 #include <scsi/sas.h>
 #include "sas.h"
-#include "sci_base_state.h"
-#include "sci_base_state_machine.h"
+#include "state_machine.h"
 #include "scic_io_request.h"
 #include "remote_device.h"
 #include "scic_sds_request.h"
diff --git a/drivers/scsi/isci/host.h b/drivers/scsi/isci/host.h
index 64edac8..9c5d121 100644
--- a/drivers/scsi/isci/host.h
+++ b/drivers/scsi/isci/host.h
@@ -59,7 +59,7 @@
 #include "remote_device.h"
 #include "phy.h"
 #include "pool.h"
-#include "sci_base_state_machine.h"
+#include "state_machine.h"
 #include "remote_node_table.h"
 #include "registers.h"
 #include "scu_unsolicited_frame.h"
diff --git a/drivers/scsi/isci/remote_node_context.c b/drivers/scsi/isci/remote_node_context.c
index af47593..5891f3d 100644
--- a/drivers/scsi/isci/remote_node_context.c
+++ b/drivers/scsi/isci/remote_node_context.c
@@ -54,7 +54,7 @@
  */
 
 #include "host.h"
-#include "sci_base_state_machine.h"
+#include "state_machine.h"
 #include "scic_sds_port.h"
 #include "remote_device.h"
 #include "remote_node_context.h"
diff --git a/drivers/scsi/isci/remote_node_context.h b/drivers/scsi/isci/remote_node_context.h
index 540a49a..a763468 100644
--- a/drivers/scsi/isci/remote_node_context.h
+++ b/drivers/scsi/isci/remote_node_context.h
@@ -64,8 +64,7 @@
  *
  */
 
-#include "sci_base_state.h"
-#include "sci_base_state_machine.h"
+#include "state_machine.h"
 
 /**
  *
diff --git a/drivers/scsi/isci/state_machine.c b/drivers/scsi/isci/state_machine.c
new file mode 100644
index 0000000..6057782
--- /dev/null
+++ b/drivers/scsi/isci/state_machine.c
@@ -0,0 +1,171 @@
+/*
+ * This file is provided under a dual BSD/GPLv2 license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * GPL LICENSE SUMMARY
+ *
+ * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ * The full GNU General Public License is included in this distribution
+ * in the file called LICENSE.GPL.
+ *
+ * BSD LICENSE
+ *
+ * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in
+ *     the documentation and/or other materials provided with the
+ *     distribution.
+ *   * Neither the name of Intel Corporation nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/**
+ * This file contains all of the functionality common to all state machine
+ *    object implementations.
+ *
+ *
+ */
+
+#include "state_machine.h"
+
+static void sci_state_machine_exit_state(struct sci_base_state_machine *sm)
+{
+	u32 state = sm->current_state_id;
+	sci_state_transition_t exit = sm->state_table[state].exit_state;
+
+	if (exit)
+		exit(sm->state_machine_owner);
+}
+
+static void sci_state_machine_enter_state(struct sci_base_state_machine *sm)
+{
+	u32 state = sm->current_state_id;
+	sci_state_transition_t enter = sm->state_table[state].enter_state;
+
+	if (enter)
+		enter(sm->state_machine_owner);
+}
+
+/*
+ * ******************************************************************************
+ * * P R O T E C T E D    M E T H O D S
+ * ****************************************************************************** */
+
+/**
+ * This method will set the initial state and state table for the state
+ *    machine. The caller should follow this request with the initialize
+ *    request to cause the state machine to start.
+ * @sm: This parameter provides the state machine object to be
+ *    constructed.
+ * @state_machine_owner: This parameter indicates the object that is owns the
+ *    state machine being constructed.
+ * @state_table: This parameter specifies the table of state objects that is
+ *    managed by this state machine.
+ * @initial_state: This parameter specifies the value of the initial state for
+ *    this state machine.
+ *
+ */
+void sci_base_state_machine_construct(struct sci_base_state_machine *sm,
+				      void *owner,
+				      const struct sci_base_state *state_table,
+				      u32 initial_state)
+{
+	sm->state_machine_owner = owner;
+	sm->initial_state_id    = initial_state;
+	sm->previous_state_id   = initial_state;
+	sm->current_state_id    = initial_state;
+	sm->state_table         = state_table;
+}
+
+/**
+ * This method will cause the state machine to enter the initial state.
+ * @sm: This parameter specifies the state machine that is to
+ *    be started.
+ *
+ * sci_base_state_machine_construct() for how to set the initial state none
+ */
+void sci_base_state_machine_start(struct sci_base_state_machine *sm)
+{
+	sm->current_state_id = sm->initial_state_id;
+	sci_state_machine_enter_state(sm);
+}
+
+/**
+ * This method will cause the state machine to exit it's current state only.
+ * @sm: This parameter specifies the state machine that is to
+ *    be stopped.
+ *
+ */
+void sci_base_state_machine_stop(
+	struct sci_base_state_machine *sm)
+{
+	sci_state_machine_exit_state(sm);
+}
+
+/**
+ * This method performs an update to the current state of the state machine.
+ * @sm: This parameter specifies the state machine for which
+ *    the caller wishes to perform a state change.
+ * @next_state: This parameter specifies the new state for the state machine.
+ *
+ */
+void sci_base_state_machine_change_state(
+	struct sci_base_state_machine *sm,
+	u32 next_state)
+{
+	sci_state_machine_exit_state(sm);
+
+	sm->previous_state_id = sm->current_state_id;
+	sm->current_state_id = next_state;
+
+	sci_state_machine_enter_state(sm);
+}
+
+/**
+ * This method simply returns the current state of the state machine to the
+ *    caller.
+ * @sm: This parameter specifies the state machine for which to
+ *    retrieve the current state.
+ *
+ * This method returns a u32 value indicating the current state for the
+ * supplied state machine.
+ */
+u32 sci_base_state_machine_get_state(struct sci_base_state_machine *sm)
+{
+	return sm->current_state_id;
+}
+
diff --git a/drivers/scsi/isci/state_machine.h b/drivers/scsi/isci/state_machine.h
new file mode 100644
index 0000000..c29eb42
--- /dev/null
+++ b/drivers/scsi/isci/state_machine.h
@@ -0,0 +1,155 @@
+/*
+ * This file is provided under a dual BSD/GPLv2 license.  When using or
+ * redistributing this file, you may do so under either license.
+ *
+ * GPL LICENSE SUMMARY
+ *
+ * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of version 2 of the GNU General Public License as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful, but
+ * WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ * The full GNU General Public License is included in this distribution
+ * in the file called LICENSE.GPL.
+ *
+ * BSD LICENSE
+ *
+ * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ *   * Redistributions of source code must retain the above copyright
+ *     notice, this list of conditions and the following disclaimer.
+ *   * Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in
+ *     the documentation and/or other materials provided with the
+ *     distribution.
+ *   * Neither the name of Intel Corporation nor the names of its
+ *     contributors may be used to endorse or promote products derived
+ *     from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef _SCI_BASE_STATE_MACHINE_H_
+#define _SCI_BASE_STATE_MACHINE_H_
+
+#include <linux/types.h>
+
+typedef void (*sci_base_state_handler_t)(void);
+
+typedef void (*sci_state_transition_t)(void *base_object);
+
+/**
+ * struct sci_base_state - The base state object abstracts the fields common to
+ *    all state objects defined in SCI.
+ *
+ *
+ */
+struct sci_base_state {
+	/**
+	 * This field is a function pointer that defines the method to be
+	 * invoked when the state is entered.
+	 */
+	sci_state_transition_t enter_state;
+
+	/**
+	 * This field is a function pointer that defines the method to be
+	 * invoked when the state is exited.
+	 */
+	sci_state_transition_t exit_state;
+
+};
+
+/**
+ * SET_STATE_HANDLER() -
+ *
+ * This macro simply provides simplified retrieval of an objects state handler.
+ */
+#define SET_STATE_HANDLER(object, table, state)	\
+	(object)->state_handlers = &(table)[(state)]
+
+/**
+ * struct sci_base_state_machine - This structure defines the fields common to
+ *    all state machines.
+ *
+ *
+ */
+struct sci_base_state_machine {
+	/**
+	 * This field points to the start of the state machine's state table.
+	 */
+	const struct sci_base_state *state_table;
+
+	/**
+	 * This field points to the object to which this state machine is
+	 * associated.  It serves as a cookie to be provided to the state
+	 * enter/exit methods.
+	 */
+	void *state_machine_owner;
+
+	/**
+	 * This field simply indicates the state value for the state machine's
+	 * initial state.
+	 */
+	u32 initial_state_id;
+
+	/**
+	 * This field indicates the current state of the state machine.
+	 */
+	u32 current_state_id;
+
+	/**
+	 * This field indicates the previous state of the state machine.
+	 */
+	u32 previous_state_id;
+
+};
+
+/*
+ * ******************************************************************************
+ * * P R O T E C T E D    M E T H O D S
+ * ****************************************************************************** */
+
+void sci_base_state_machine_construct(
+	struct sci_base_state_machine *this_state_machine,
+	void *state_machine_owner,
+	const struct sci_base_state *state_table,
+	u32 initial_state);
+
+void sci_base_state_machine_start(
+	struct sci_base_state_machine *this_state_machine);
+
+void sci_base_state_machine_stop(
+	struct sci_base_state_machine *this_state_machine);
+
+void sci_base_state_machine_change_state(
+	struct sci_base_state_machine *this_state_machine,
+	u32 next_state);
+
+u32 sci_base_state_machine_get_state(
+	struct sci_base_state_machine *this_state_machine);
+
+#endif /* _SCI_BASE_STATE_MACHINE_H_ */
-- 
1.6.0.2

