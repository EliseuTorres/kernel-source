From fd468c74bd4d6949736810a80d6ca05eb20fba84 Mon Sep 17 00:00:00 2001
From: Ben Hutchings <bhutchings@solarflare.com>
Date: Thu, 14 Nov 2013 01:19:29 +0000
Subject: [PATCH v5 005/164] net_tstamp: Add SIOCGHWTSTAMP ioctl to match SIOCSHWTSTAMP

Git-commit: fd468c74bd4d6949736810a80d6ca05eb20fba84
Patch-mainline: v3.14-rc1
Reference: fate#317388, bsc#909491
Target: sle11-sp4

SIOCSHWTSTAMP returns the real configuration to the application
using it, but there is currently no way for any other
application to find out the configuration non-destructively.
Add a new ioctl for this, making it unprivileged.

Joey Lee:
Refreshed for SLE11.

Signed-off-by: Ben Hutchings <bhutchings@solarflare.com>
Acked-by: Lee, Chun-Yi <jlee@suse.com>
---
 Documentation/networking/timestamping.txt |    9 +++++++--
 include/linux/net_tstamp.h                |   14 +++++++-------
 include/linux/sockios.h                   |    3 ++-
 net/core/dev.c                            |    2 ++
 net/socket.c                              |    1 +
 5 files changed, 19 insertions(+), 10 deletions(-)

Index: linux-3.0-SLE11-SP4/Documentation/networking/timestamping.txt
===================================================================
--- linux-3.0-SLE11-SP4.orig/Documentation/networking/timestamping.txt
+++ linux-3.0-SLE11-SP4/Documentation/networking/timestamping.txt
@@ -85,7 +85,7 @@ Filled in if SOF_TIMESTAMPING_SYS_HARDWA
 by the network device and will be empty without that support.
 
 
-SIOCSHWTSTAMP:
+SIOCSHWTSTAMP, SIOCGHWTSTAMP:
 
 Hardware time stamping must also be initialized for each device driver
 that is expected to do hardware time stamping. The parameter is defined in
@@ -115,6 +115,10 @@ Only a processes with admin rights may c
 space is responsible to ensure that multiple processes don't interfere
 with each other and that the settings are reset.
 
+Any process can read the actual configuration by passing this
+structure to ioctl(SIOCGHWTSTAMP) in the same way.  However, this has
+not been implemented in all drivers.
+
 /* possible values for hwtstamp_config->tx_type */
 enum {
 	/*
@@ -157,7 +161,8 @@ DEVICE IMPLEMENTATION
 
 A driver which supports hardware time stamping must support the
 SIOCSHWTSTAMP ioctl and update the supplied struct hwtstamp_config with
-the actual values as described in the section on SIOCSHWTSTAMP.
+the actual values as described in the section on SIOCSHWTSTAMP.  It
+should also support SIOCGHWTSTAMP.
 
 Time stamps for received packets must be stored in the skb. To get a pointer
 to the shared time stamp structure of the skb call skb_hwtstamps(). Then
Index: linux-3.0-SLE11-SP4/net/socket.c
===================================================================
--- linux-3.0-SLE11-SP4.orig/net/socket.c
+++ linux-3.0-SLE11-SP4/net/socket.c
@@ -3146,6 +3146,7 @@ static int compat_sock_ioctl_trans(struc
 	case SIOCBONDSLAVEINFOQUERY:
 	case SIOCBONDINFOQUERY:
 	case SIOCSHWTSTAMP:
+	case SIOCGHWTSTAMP:
 		return compat_ifr_data_ioctl(net, cmd, argp);
 
 	case FIOSETOWN:
Index: linux-3.0-SLE11-SP4/include/linux/net_tstamp.h
===================================================================
--- linux-3.0-SLE11-SP4.orig/include/linux/net_tstamp.h
+++ linux-3.0-SLE11-SP4/include/linux/net_tstamp.h
@@ -26,17 +26,17 @@ enum {
 };
 
 /**
- * struct hwtstamp_config - %SIOCSHWTSTAMP parameter
+ * struct hwtstamp_config - %SIOCGHWTSTAMP and %SIOCSHWTSTAMP parameter
  *
- * @flags:	no flags defined right now, must be zero
+ * @flags:	no flags defined right now, must be zero for %SIOCSHWTSTAMP
  * @tx_type:	one of HWTSTAMP_TX_*
  * @rx_filter:	one of HWTSTAMP_FILTER_*
  *
- * %SIOCSHWTSTAMP expects a &struct ifreq with a ifr_data pointer to
- * this structure.  If the driver or hardware does not support the
- * requested @rx_filter value, the driver may use a more general
- * filter mode.  In this case @rx_filter will indicate the actual mode
- * on return.
+ * %SIOCGHWTSTAMP and %SIOCSHWTSTAMP expect a &struct ifreq with a
+ * ifr_data pointer to this structure.  For %SIOCSHWTSTAMP, if the
+ * driver or hardware does not support the requested @rx_filter value,
+ * the driver may use a more general filter mode.  In this case
+ * @rx_filter will indicate the actual mode on return.
  */
 struct hwtstamp_config {
 	int flags;
Index: linux-3.0-SLE11-SP4/net/core/dev.c
===================================================================
--- linux-3.0-SLE11-SP4.orig/net/core/dev.c
+++ linux-3.0-SLE11-SP4/net/core/dev.c
@@ -5158,6 +5158,7 @@ static int dev_ifsioc(struct net *net, s
 		    cmd == SIOCBRADDIF ||
 		    cmd == SIOCBRDELIF ||
 		    cmd == SIOCSHWTSTAMP ||
+		    cmd == SIOCGHWTSTAMP ||
 		    cmd == SIOCWANDEV) {
 			err = -EOPNOTSUPP;
 			if (ops->ndo_do_ioctl) {
@@ -5338,6 +5339,7 @@ int dev_ioctl(struct net *net, unsigned
 	 */
 	default:
 		if (cmd == SIOCWANDEV ||
+		    cmd == SIOCGHWTSTAMP ||
 		    (cmd >= SIOCDEVPRIVATE &&
 		     cmd <= SIOCDEVPRIVATE + 15)) {
 			dev_load(net, ifr.ifr_name);
Index: linux-3.0-SLE11-SP4/include/linux/sockios.h
===================================================================
--- linux-3.0-SLE11-SP4.orig/include/linux/sockios.h
+++ linux-3.0-SLE11-SP4/include/linux/sockios.h
@@ -125,7 +125,8 @@
 #define SIOCBRDELIF	0x89a3		/* remove interface from bridge */
 
 /* hardware time stamping: parameters in linux/net_tstamp.h */
-#define SIOCSHWTSTAMP   0x89b0
+#define SIOCSHWTSTAMP	0x89b0		/* set and get config		*/
+#define SIOCGHWTSTAMP	0x89b1		/* get config			*/
 
 /* Device private ioctl calls */
 
