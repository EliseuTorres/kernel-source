From mcarlson@broadcom.com  Thu Jun 23 22:01:22 2011
From: Matt Carlson <mcarlson@broadcom.com>
Date: Wed, 22 Jun 2011 18:56:59 -0700
Subject: [PATCH 142/194] tg3: implement ethtool set_phys_id
Git-commit: 81b8709c25e8c8f56224a24d860de7b77a772e83
Patch-mainline: v3.0-rc1
References: bnc#697783, FATE#311457

Implement control of LED via set_phys_id.
Note: since PHY is powered off if device is down, this board
only allows blinking if device is up.

Signed-off-by: Stephen Hemminger <shemminger@vyatta.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Acked-by: Jeff Mahoney <jeffm@suse.com>
---
 drivers/net/tg3.c        |   47 +++++++++++++++++++++++++----------------------
 drivers/net/tg3_compat.h |   25 +++++++++++++++++++++++++
 2 files changed, 50 insertions(+), 22 deletions(-)

--- a/drivers/net/tg3.c
+++ b/drivers/net/tg3.c
@@ -10424,35 +10424,38 @@ static void tg3_get_strings(struct net_d
 	}
 }
 
-static int tg3_phys_id(struct net_device *dev, u32 data)
+static int tg3_set_phys_id(struct net_device *dev,
+			    enum ethtool_phys_id_state state)
 {
 	struct tg3 *tp = netdev_priv(dev);
-	int i;
 
 	if (!netif_running(tp->dev))
 		return -EAGAIN;
 
-	if (data == 0)
-		data = UINT_MAX / 2;
-
-	for (i = 0; i < (data * 2); i++) {
-		if ((i % 2) == 0)
-			tw32(MAC_LED_CTRL, LED_CTRL_LNKLED_OVERRIDE |
-					   LED_CTRL_1000MBPS_ON |
-					   LED_CTRL_100MBPS_ON |
-					   LED_CTRL_10MBPS_ON |
-					   LED_CTRL_TRAFFIC_OVERRIDE |
-					   LED_CTRL_TRAFFIC_BLINK |
-					   LED_CTRL_TRAFFIC_LED);
-
-		else
-			tw32(MAC_LED_CTRL, LED_CTRL_LNKLED_OVERRIDE |
-					   LED_CTRL_TRAFFIC_OVERRIDE);
-
-		if (msleep_interruptible(500))
-			break;
+	switch (state) {
+	case ETHTOOL_ID_ACTIVE:
+		return -EINVAL;
+
+	case ETHTOOL_ID_ON:
+		tw32(MAC_LED_CTRL, LED_CTRL_LNKLED_OVERRIDE |
+		     LED_CTRL_1000MBPS_ON |
+		     LED_CTRL_100MBPS_ON |
+		     LED_CTRL_10MBPS_ON |
+		     LED_CTRL_TRAFFIC_OVERRIDE |
+		     LED_CTRL_TRAFFIC_BLINK |
+		     LED_CTRL_TRAFFIC_LED);
+		break;
+
+	case ETHTOOL_ID_OFF:
+		tw32(MAC_LED_CTRL, LED_CTRL_LNKLED_OVERRIDE |
+		     LED_CTRL_TRAFFIC_OVERRIDE);
+		break;
+
+	case ETHTOOL_ID_INACTIVE:
+		tw32(MAC_LED_CTRL, tp->led_ctrl);
+		break;
 	}
-	tw32(MAC_LED_CTRL, tp->led_ctrl);
+
 	return 0;
 }
 
--- a/drivers/net/tg3_compat.h
+++ b/drivers/net/tg3_compat.h
@@ -85,6 +85,31 @@ static inline int netif_set_real_num_rx_
 	return 0;
 }
 
+static int tg3_set_phys_id(struct net_device *dev,
+			    enum ethtool_phys_id_state state);
+static int tg3_phys_id(struct net_device *dev, u32 data)
+{
+	int i;
+
+	if (!netif_running(dev))
+		return -EAGAIN;
+
+	if (data == 0)
+		data = UINT_MAX / 2;
+
+	for (i = 0; i < (data * 2); i++) {
+		if ((i % 2) == 0)
+			tg3_set_phys_id(dev, ETHTOOL_ID_ON);
+		else
+			tg3_set_phys_id(dev, ETHTOOL_ID_OFF);
+
+		if (msleep_interruptible(500))
+			break;
+	}
+	tg3_set_phys_id(dev, ETHTOOL_ID_INACTIVE);
+	return 0;
+}
+
 #ifndef PHY_ID_BCM50610
 #define PHY_ID_BCM50610		0xbc050d60
 #endif
