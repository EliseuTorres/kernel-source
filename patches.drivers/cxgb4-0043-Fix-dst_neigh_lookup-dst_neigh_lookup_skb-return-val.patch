From: Zhouyi Zhou <zhouzhouyi@gmail.com>
Date: Thu, 14 Mar 2013 17:21:50 +0000
Subject: [PATCH 043/223] Fix dst_neigh_lookup/dst_neigh_lookup_skb return
 value handling bug
Patch-mainline: v3.9-rc4
Git-commit: aaa0c23cb90141309f5076ba5e3bfbd39544b985 (partial)
References: bsc#909577 FATE#317550

When neighbour table is full, dst_neigh_lookup/dst_neigh_lookup_skb will return
-ENOBUFS which is absolutely non zero, while all the code in kernel which use
above functions assume failure only on zero return which will cause panic. (for
example: : https://bugzilla.kernel.org/show_bug.cgi?id=54731).

This patch corrects above error with smallest changes to kernel source code and
also correct two return value check missing bugs in drivers/infiniband/hw/cxgb4/cm.c

Tested on my x86_64 SMP machine

Reported-by: Zhouyi Zhou <zhouzhouyi@gmail.com>
Tested-by: Zhouyi Zhou <zhouzhouyi@gmail.com>
Signed-off-by: Zhouyi Zhou <zhouzhouyi@gmail.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Acked-by: David Chang <dchang@suse.com>
Signed-off-by: John Jolly <jjolly@suse.de>
---
 drivers/infiniband/hw/cxgb4/cm.c |   12 ++++++++++++
 1 file changed, 12 insertions(+)

--- a/drivers/infiniband/hw/cxgb4/cm.c
+++ b/drivers/infiniband/hw/cxgb4/cm.c
@@ -1597,6 +1597,12 @@ static int c4iw_reconnect(struct c4iw_ep
 	ep->dst = &rt->dst;
 
 	neigh = dst_get_neighbour(ep->dst);
+	if (!neigh) {
+		pr_err("%s - cannot alloc neigh.\n", __func__);
+		err = -ENOMEM;
+		goto fail4;
+	}
+
 	/* get a l2t entry */
 	if (neigh->dev->flags & IFF_LOOPBACK) {
 		PDBG("%s LOOPBACK\n", __func__);
@@ -3080,6 +3086,12 @@ static int rx_pkt(struct c4iw_dev *dev,
 	dst = &rt->dst;
 	neigh = dst_get_neighbour(dst);
 
+	if (!neigh) {
+		pr_err("%s - failed to allocate neigh!\n",
+		       __func__);
+		goto free_dst;
+	}
+
 	if (neigh->dev->flags & IFF_LOOPBACK) {
 		pdev = ip_dev_find(&init_net, iph->daddr);
 		e = cxgb4_l2t_get(dev->rdev.lldi.l2t, neigh,
