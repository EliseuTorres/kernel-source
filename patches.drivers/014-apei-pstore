From: Chen Gong <gong.chen@linux.intel.com>
Subject: pstore: fix one type of return value in pstore
References: fate#311705
Patch-Mainline: v3.0-rc1
Git-commit: 8d38d74b648513dd8ed8bd2b67d899208ef4e09e


Signed-off-by: Thomas Renninger <trenn@suse.de>

the return type of function _read_ in pstore is size_t,
but in the callback function of _read_, the logic doesn't
consider it too much, which means if negative value (assuming
error here) is returned, it will be converted to positive because
of type casting. ssize_t is enough for this function.

Signed-off-by: Chen Gong <gong.chen@linux.intel.com>
Signed-off-by: Tony Luck <tony.luck@intel.com>

---
 drivers/acpi/apei/erst.c |    4 ++--
 fs/pstore/platform.c     |    4 ++--
 include/linux/pstore.h   |    2 +-
 3 files changed, 5 insertions(+), 5 deletions(-)

Index: linux-2.6.32-SLE11-SP2/drivers/acpi/apei/erst.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/drivers/acpi/apei/erst.c
+++ linux-2.6.32-SLE11-SP2/drivers/acpi/apei/erst.c
@@ -929,7 +929,7 @@ static int erst_check_table(struct acpi_
 	return 0;
 }
 
-static size_t erst_reader(u64 *id, enum pstore_type_id *type,
+static ssize_t erst_reader(u64 *id, enum pstore_type_id *type,
 		       struct timespec *time);
 static u64 erst_writer(enum pstore_type_id type, size_t size);
 
@@ -957,7 +957,7 @@ struct cper_pstore_record {
 	char data[];
 } __packed;
 
-static size_t erst_reader(u64 *id, enum pstore_type_id *type,
+static ssize_t erst_reader(u64 *id, enum pstore_type_id *type,
 		       struct timespec *time)
 {
 	int rc;
Index: linux-2.6.32-SLE11-SP2/fs/pstore/platform.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/pstore/platform.c
+++ linux-2.6.32-SLE11-SP2/fs/pstore/platform.c
@@ -151,7 +151,7 @@ EXPORT_SYMBOL_GPL(pstore_register);
 void pstore_get_records(void)
 {
 	struct pstore_info *psi = psinfo;
-	size_t			size;
+	ssize_t			size;
 	u64			id;
 	enum pstore_type_id	type;
 	struct timespec		time;
@@ -162,7 +162,7 @@ void pstore_get_records(void)
 
 	mutex_lock(&psinfo->buf_mutex);
 	while ((size = psi->read(&id, &type, &time)) > 0) {
-		if (pstore_mkfile(type, psi->name, id, psi->buf, size,
+		if (pstore_mkfile(type, psi->name, id, psi->buf, (size_t)size,
 				  time, psi->erase))
 			failed++;
 	}
Index: linux-2.6.32-SLE11-SP2/include/linux/pstore.h
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/include/linux/pstore.h
+++ linux-2.6.32-SLE11-SP2/include/linux/pstore.h
@@ -35,7 +35,7 @@ struct pstore_info {
 	struct mutex	buf_mutex;	/* serialize access to 'buf' */
 	char		*buf;
 	size_t		bufsize;
-	size_t		(*read)(u64 *id, enum pstore_type_id *type,
+	ssize_t		(*read)(u64 *id, enum pstore_type_id *type,
 			struct timespec *time);
 	u64		(*write)(enum pstore_type_id type, size_t size);
 	int		(*erase)(u64 id);
