From: Thomas Renninger <trenn@suse.de>
Subject: Disable all APEI parts with one boot param
References: bnc#697859
Patch-Mainline: no

In SLE11 SP2 APEI functionality was added.

But some OEMs do only partly implement support and needs
it disabled.

Also these features are not well tested on productive HW
yet and it's likely to run into BIOS/platform specific issues.

Another point is that we miss APEI AER functionality.
Once APEI handshake with BIOS happened, all errors might get
forwarded through APEI and (native) AER errors might not be
processed anymore.

Signed-off-by: Thomas Renninger <trenn@suse.de>

---
 drivers/acpi/apei/erst.c |    7 +-----
 drivers/acpi/apei/ghes.c |    4 ---
 drivers/acpi/apei/hest.c |    4 ---
 drivers/acpi/blacklist.c |   54 +++++++++++++++++++++++++++++++++++++++++++++++
 drivers/acpi/hed.c       |    1 
 5 files changed, 59 insertions(+), 11 deletions(-)

Index: linux-3.0-SLE11-SP2-3.0/drivers/acpi/blacklist.c
===================================================================
--- linux-3.0-SLE11-SP2-3.0.orig/drivers/acpi/blacklist.c
+++ linux-3.0-SLE11-SP2-3.0/drivers/acpi/blacklist.c
@@ -32,7 +32,9 @@
 #include <linux/init.h>
 #include <linux/acpi.h>
 #include <acpi/acpi_bus.h>
+#include <acpi/apei.h>
 #include <linux/dmi.h>
+#include <asm/processor.h>
 
 #include "internal.h"
 
@@ -109,12 +111,64 @@ static inline int blacklist_by_year(void
 }
 #endif
 
+#ifdef CONFIG_ACPI_APEI
+static int __initdata apei_disable = -1;
+
+static void __init acpi_apei_disable(void)
+{
+		apei_disable = 1;
+		hest_disable = 1;
+		erst_disable = 1;
+#ifdef CONFIG_ACPI_APEI_GHES
+		ghes_disable = 1;
+#endif
+}
+
+static void __init acpi_apei_enable(void)
+{
+		apei_disable = 0;
+		hest_disable = 0;
+		erst_disable = 0;
+#ifdef CONFIG_ACPI_APEI_GHES
+		ghes_disable = 0;
+#endif
+}
+
+static int __init setup_apei_disable(char *str)
+{
+	acpi_apei_disable();
+	printk(KERN_INFO "APEI disabled by boot param\n");
+	return 0;
+}
+__setup("apei_disable", setup_apei_disable);
+
+static int __init setup_apei_enable(char *str)
+{
+	acpi_apei_enable();
+	printk(KERN_INFO "APEI enabled by boot param\n");
+	return 0;
+}
+__setup("apei_enable", setup_apei_enable);
+
+static void __init acpi_apei_blacklist(void)
+{
+	/* Already overwritten by boot param */
+	if (apei_disable != -1)
+		return;
+
+	acpi_apei_disable();
+}
+#else /* !CONFIG_ACPI_APEI */
+#define acpi_apei_blacklist() ((void)0)
+#endif
+
 int __init acpi_blacklisted(void)
 {
 	int i = 0;
 	int blacklisted = 0;
 	struct acpi_table_header table_header;
 
+	acpi_apei_blacklist();
 	while (acpi_blacklist[i].oem_id[0] != '\0') {
 		if (acpi_get_table_header(acpi_blacklist[i].table, 0, &table_header)) {
 			i++;
Index: linux-3.0-SLE11-SP2-3.0/drivers/acpi/apei/hest.c
===================================================================
--- linux-3.0-SLE11-SP2-3.0.orig/drivers/acpi/apei/hest.c
+++ linux-3.0-SLE11-SP2-3.0/drivers/acpi/apei/hest.c
@@ -211,10 +211,8 @@ void __init acpi_hest_init(void)
 	int rc = -ENODEV;
 	unsigned int ghes_count = 0;
 
-	if (hest_disable) {
-		pr_info(HEST_PFX "Table parsing disabled.\n");
+	if (hest_disable)
 		return;
-	}
 
 	if (acpi_disabled)
 		goto err;
Index: linux-3.0-SLE11-SP2-3.0/drivers/acpi/hed.c
===================================================================
--- linux-3.0-SLE11-SP2-3.0.orig/drivers/acpi/hed.c
+++ linux-3.0-SLE11-SP2-3.0/drivers/acpi/hed.c
@@ -28,6 +28,7 @@
 #include <acpi/acpi_bus.h>
 #include <acpi/acpi_drivers.h>
 #include <acpi/hed.h>
+#include <acpi/apei.h>
 
 static struct acpi_device_id acpi_hed_ids[] = {
 	{"PNP0C33", 0},
Index: linux-3.0-SLE11-SP2-3.0/drivers/acpi/apei/erst.c
===================================================================
--- linux-3.0-SLE11-SP2-3.0.orig/drivers/acpi/apei/erst.c
+++ linux-3.0-SLE11-SP2-3.0/drivers/acpi/apei/erst.c
@@ -1102,11 +1102,8 @@ static int __init erst_init(void)
 	if (acpi_disabled)
 		goto err;
 
-	if (erst_disable) {
-		pr_info(ERST_PFX
-	"Error Record Serialization Table (ERST) support is disabled.\n");
-		goto err;
-	}
+	if (erst_disable)
+		return 0;
 
 	status = acpi_get_table(ACPI_SIG_ERST, 0,
 				(struct acpi_table_header **)&erst_tab);
Index: linux-3.0-SLE11-SP2-3.0/drivers/acpi/apei/ghes.c
===================================================================
--- linux-3.0-SLE11-SP2-3.0.orig/drivers/acpi/apei/ghes.c
+++ linux-3.0-SLE11-SP2-3.0/drivers/acpi/apei/ghes.c
@@ -1003,10 +1003,8 @@ static int __init ghes_init(void)
 	if (acpi_disabled)
 		return -ENODEV;
 
-	if (hest_disable) {
-		pr_info(GHES_PFX "HEST is not enabled!\n");
+	if (hest_disable)
 		return -EINVAL;
-	}
 
 	if (ghes_disable) {
 		pr_info(GHES_PFX "GHES is not enabled!\n");
