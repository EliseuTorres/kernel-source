From f03b0ebd8e7132bd9adb41348070813feb280300 Mon Sep 17 00:00:00 2001
From: Dhananjay Phadke <dhananjay@netxen.com>
Date: Tue, 13 Oct 2009 05:31:44 +0000
Subject: [PATCH] netxen: separate register and memory access lock
Patch-mainline: 2.6.33
References: bnc#560003, fate#307134

Since register and onboard memory access has separate
window registers, they need not be kept under same lock.

Also, memory is always accessed from process context
(mostly for firmware init and diagnostic tools).

Signed-off-by: Dhananjay Phadke <dhananjay@netxen.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Signed-off-by: Brandon Philips <bphilips@suse.de>

---
 drivers/net/netxen/netxen_nic.h         |    5 +-
 drivers/net/netxen/netxen_nic_ethtool.c |    2 -
 drivers/net/netxen/netxen_nic_hw.c      |   63 +++++++++++++++-----------------
 drivers/net/netxen/netxen_nic_init.c    |    6 +--
 drivers/net/netxen/netxen_nic_main.c    |    4 +-
 5 files changed, 38 insertions(+), 42 deletions(-)

--- a/drivers/net/netxen/netxen_nic.h
+++ b/drivers/net/netxen/netxen_nic.h
@@ -551,6 +551,9 @@ struct netxen_hardware_context {
 	u32 ocm_win;
 	u32 crb_win;
 
+	rwlock_t crb_lock;
+	spinlock_t mem_lock;
+
 	u8 cut_through;
 	u8 revision_id;
 	u8 pci_func;
@@ -1115,8 +1118,6 @@ struct netxen_adapter {
 	struct pci_dev *pdev;
 	struct list_head mac_list;
 
-	rwlock_t adapter_lock;
-
 	spinlock_t tx_clean_lock;
 
 	u16 num_txd;
--- a/drivers/net/netxen/netxen_nic_ethtool.c
+++ b/drivers/net/netxen/netxen_nic_ethtool.c
@@ -85,11 +85,9 @@ netxen_nic_get_drvinfo(struct net_device
 
 	strncpy(drvinfo->driver, netxen_nic_driver_name, 32);
 	strncpy(drvinfo->version, NETXEN_NIC_LINUX_VERSIONID, 32);
-	read_lock(&adapter->adapter_lock);
 	fw_major = NXRD32(adapter, NETXEN_FW_VERSION_MAJOR);
 	fw_minor = NXRD32(adapter, NETXEN_FW_VERSION_MINOR);
 	fw_build = NXRD32(adapter, NETXEN_FW_VERSION_SUB);
-	read_unlock(&adapter->adapter_lock);
 	sprintf(drvinfo->fw_version, "%d.%d.%d", fw_major, fw_minor, fw_build);
 
 	strncpy(drvinfo->bus_info, pci_name(adapter->pdev), 32);
--- a/drivers/net/netxen/netxen_nic_hw.c
+++ b/drivers/net/netxen/netxen_nic_hw.c
@@ -41,6 +41,11 @@
 #define CRB_HI(off)	((crb_hub_agt[CRB_BLK(off)] << 20) | ((off) & 0xf0000))
 #define CRB_INDIRECT_2M	(0x1e0000UL)
 
+static void netxen_nic_io_write_128M(struct netxen_adapter *adapter,
+		void __iomem *addr, u32 data);
+static u32 netxen_nic_io_read_128M(struct netxen_adapter *adapter,
+		void __iomem *addr);
+
 #ifndef readq
 static inline u64 readq(void __iomem *addr)
 {
@@ -1191,17 +1196,15 @@ netxen_nic_hw_write_wx_128M(struct netxe
 	BUG_ON(!addr);
 
 	if (ADDR_IN_WINDOW1(off)) {	/* Window 1 */
-		read_lock(&adapter->adapter_lock);
-		writel(data, addr);
-		read_unlock(&adapter->adapter_lock);
+		netxen_nic_io_write_128M(adapter, addr, data);
 	} else {		/* Window 0 */
-		write_lock_irqsave(&adapter->adapter_lock, flags);
+		write_lock_irqsave(&adapter->ahw.crb_lock, flags);
 		addr = pci_base_offset(adapter, off);
 		netxen_nic_pci_set_crbwindow_128M(adapter, 0);
 		writel(data, addr);
 		netxen_nic_pci_set_crbwindow_128M(adapter,
 				NETXEN_WINDOW_ONE);
-		write_unlock_irqrestore(&adapter->adapter_lock, flags);
+		write_unlock_irqrestore(&adapter->ahw.crb_lock, flags);
 	}
 
 	return 0;
@@ -1222,16 +1225,14 @@ netxen_nic_hw_read_wx_128M(struct netxen
 	BUG_ON(!addr);
 
 	if (ADDR_IN_WINDOW1(off)) {	/* Window 1 */
-		read_lock(&adapter->adapter_lock);
-		data = readl(addr);
-		read_unlock(&adapter->adapter_lock);
+		data = netxen_nic_io_read_128M(adapter, addr);
 	} else {		/* Window 0 */
-		write_lock_irqsave(&adapter->adapter_lock, flags);
+		write_lock_irqsave(&adapter->ahw.crb_lock, flags);
 		netxen_nic_pci_set_crbwindow_128M(adapter, 0);
 		data = readl(addr);
 		netxen_nic_pci_set_crbwindow_128M(adapter,
 				NETXEN_WINDOW_ONE);
-		write_unlock_irqrestore(&adapter->adapter_lock, flags);
+		write_unlock_irqrestore(&adapter->ahw.crb_lock, flags);
 	}
 
 	return data;
@@ -1253,12 +1254,12 @@ netxen_nic_hw_write_wx_2M(struct netxen_
 	}
 
 	if (rv == 1) {
-		write_lock_irqsave(&adapter->adapter_lock, flags);
+		write_lock_irqsave(&adapter->ahw.crb_lock, flags);
 		crb_win_lock(adapter);
 		netxen_nic_pci_set_crbwindow_2M(adapter, &off);
 		writel(data, (void __iomem *)off);
 		crb_win_unlock(adapter);
-		write_unlock_irqrestore(&adapter->adapter_lock, flags);
+		write_unlock_irqrestore(&adapter->ahw.crb_lock, flags);
 	} else
 		writel(data, (void __iomem *)off);
 
@@ -1283,12 +1284,12 @@ netxen_nic_hw_read_wx_2M(struct netxen_a
 	}
 
 	if (rv == 1) {
-		write_lock_irqsave(&adapter->adapter_lock, flags);
+		write_lock_irqsave(&adapter->ahw.crb_lock, flags);
 		crb_win_lock(adapter);
 		netxen_nic_pci_set_crbwindow_2M(adapter, &off);
 		data = readl((void __iomem *)off);
 		crb_win_unlock(adapter);
-		write_unlock_irqrestore(&adapter->adapter_lock, flags);
+		write_unlock_irqrestore(&adapter->ahw.crb_lock, flags);
 	} else
 		data = readl((void __iomem *)off);
 
@@ -1299,9 +1300,9 @@ netxen_nic_hw_read_wx_2M(struct netxen_a
 static void netxen_nic_io_write_128M(struct netxen_adapter *adapter,
 		void __iomem *addr, u32 data)
 {
-	read_lock(&adapter->adapter_lock);
+	read_lock(&adapter->ahw.crb_lock);
 	writel(data, addr);
-	read_unlock(&adapter->adapter_lock);
+	read_unlock(&adapter->ahw.crb_lock);
 }
 
 static u32 netxen_nic_io_read_128M(struct netxen_adapter *adapter,
@@ -1309,9 +1310,9 @@ static u32 netxen_nic_io_read_128M(struc
 {
 	u32 val;
 
-	read_lock(&adapter->adapter_lock);
+	read_lock(&adapter->ahw.crb_lock);
 	val = readl(addr);
-	read_unlock(&adapter->adapter_lock);
+	read_unlock(&adapter->ahw.crb_lock);
 
 	return val;
 }
@@ -1393,11 +1394,10 @@ netxen_nic_pci_mem_access_direct(struct
 {
 	void __iomem *addr, *mem_ptr = NULL;
 	resource_size_t mem_base;
-	unsigned long flags;
 	int ret = -EIO;
 	u32 start;
 
-	write_lock_irqsave(&adapter->adapter_lock, flags);
+	spin_lock(&adapter->ahw.mem_lock);
 
 	ret = adapter->pci_set_window(adapter, off, &start);
 	if (ret != 0)
@@ -1424,7 +1424,8 @@ noremap:
 		writeq(*data, addr);
 
 unlock:
-	write_unlock_irqrestore(&adapter->adapter_lock, flags);
+	spin_unlock(&adapter->ahw.mem_lock);
+
 	if (mem_ptr)
 		iounmap(mem_ptr);
 	return ret;
@@ -1436,7 +1437,6 @@ static int
 netxen_nic_pci_mem_write_128M(struct netxen_adapter *adapter,
 		u64 off, u64 data)
 {
-	unsigned long   flags;
 	int j, ret;
 	u32 temp, off_lo, off_hi, addr_hi, data_hi, data_lo;
 	void __iomem *mem_crb;
@@ -1480,7 +1480,7 @@ netxen_nic_pci_mem_write_128M(struct net
 	return -EIO;
 
 correct:
-	write_lock_irqsave(&adapter->adapter_lock, flags);
+	spin_lock(&adapter->ahw.mem_lock);
 	netxen_nic_pci_set_crbwindow_128M(adapter, 0);
 
 	writel(off_lo, (mem_crb + MIU_TEST_AGT_ADDR_LO));
@@ -1506,7 +1506,7 @@ correct:
 		ret = 0;
 
 	netxen_nic_pci_set_crbwindow_128M(adapter, NETXEN_WINDOW_ONE);
-	write_unlock_irqrestore(&adapter->adapter_lock, flags);
+	spin_unlock(&adapter->ahw.mem_lock);
 	return ret;
 }
 
@@ -1514,7 +1514,6 @@ static int
 netxen_nic_pci_mem_read_128M(struct netxen_adapter *adapter,
 		u64 off, u64 *data)
 {
-	unsigned long   flags;
 	int j, ret;
 	u32 temp, off_lo, off_hi, addr_hi, data_hi, data_lo;
 	u64 val;
@@ -1559,7 +1558,7 @@ netxen_nic_pci_mem_read_128M(struct netx
 	return -EIO;
 
 correct:
-	write_lock_irqsave(&adapter->adapter_lock, flags);
+	spin_lock(&adapter->ahw.mem_lock);
 	netxen_nic_pci_set_crbwindow_128M(adapter, 0);
 
 	writel(off_lo, (mem_crb + MIU_TEST_AGT_ADDR_LO));
@@ -1588,7 +1587,7 @@ correct:
 	}
 
 	netxen_nic_pci_set_crbwindow_128M(adapter, NETXEN_WINDOW_ONE);
-	write_unlock_irqrestore(&adapter->adapter_lock, flags);
+	spin_unlock(&adapter->ahw.mem_lock);
 
 	return ret;
 }
@@ -1597,7 +1596,6 @@ static int
 netxen_nic_pci_mem_write_2M(struct netxen_adapter *adapter,
 		u64 off, u64 data)
 {
-	unsigned long   flags;
 	int j, ret;
 	u32 temp, off8;
 	void __iomem *mem_crb;
@@ -1628,7 +1626,7 @@ netxen_nic_pci_mem_write_2M(struct netxe
 correct:
 	off8 = off & MIU_TEST_AGT_ADDR_MASK;
 
-	write_lock_irqsave(&adapter->adapter_lock, flags);
+	spin_lock(&adapter->ahw.mem_lock);
 
 	writel(off8, (mem_crb + MIU_TEST_AGT_ADDR_LO));
 	writel(0, (mem_crb + MIU_TEST_AGT_ADDR_HI));
@@ -1652,7 +1650,7 @@ correct:
 	} else
 		ret = 0;
 
-	write_unlock_irqrestore(&adapter->adapter_lock, flags);
+	spin_unlock(&adapter->ahw.mem_lock);
 
 	return ret;
 }
@@ -1661,7 +1659,6 @@ static int
 netxen_nic_pci_mem_read_2M(struct netxen_adapter *adapter,
 		u64 off, u64 *data)
 {
-	unsigned long   flags;
 	int j, ret;
 	u32 temp, off8;
 	u64 val;
@@ -1695,7 +1692,7 @@ netxen_nic_pci_mem_read_2M(struct netxen
 correct:
 	off8 = off & MIU_TEST_AGT_ADDR_MASK;
 
-	write_lock_irqsave(&adapter->adapter_lock, flags);
+	spin_lock(&adapter->ahw.mem_lock);
 
 	writel(off8, (mem_crb + MIU_TEST_AGT_ADDR_LO));
 	writel(0, (mem_crb + MIU_TEST_AGT_ADDR_HI));
@@ -1721,7 +1718,7 @@ correct:
 		ret = 0;
 	}
 
-	write_unlock_irqrestore(&adapter->adapter_lock, flags);
+	spin_unlock(&adapter->ahw.mem_lock);
 
 	return ret;
 }
--- a/drivers/net/netxen/netxen_nic_init.c
+++ b/drivers/net/netxen/netxen_nic_init.c
@@ -1511,10 +1511,8 @@ netxen_post_rx_buffers(struct netxen_ada
 					      (rds_ring->num_desc - 1)));
 			netxen_set_msg_ctxid(msg, adapter->portnum);
 			netxen_set_msg_opcode(msg, NETXEN_RCV_PRODUCER(ringid));
-			read_lock(&adapter->adapter_lock);
-			writel(msg, DB_NORMALIZE(adapter,
-					    NETXEN_RCV_PRODUCER_OFFSET));
-			read_unlock(&adapter->adapter_lock);
+			NXWRIO(adapter, DB_NORMALIZE(adapter,
+					NETXEN_RCV_PRODUCER_OFFSET), msg);
 		}
 	}
 }
--- a/drivers/net/netxen/netxen_nic_main.c
+++ b/drivers/net/netxen/netxen_nic_main.c
@@ -1243,7 +1243,9 @@ netxen_nic_probe(struct pci_dev *pdev, c
 	revision_id = pdev->revision;
 	adapter->ahw.revision_id = revision_id;
 
-	rwlock_init(&adapter->adapter_lock);
+	rwlock_init(&adapter->ahw.crb_lock);
+	spin_lock_init(&adapter->ahw.mem_lock);
+
 	spin_lock_init(&adapter->tx_clean_lock);
 	INIT_LIST_HEAD(&adapter->mac_list);
 
