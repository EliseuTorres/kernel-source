From mcarlson@broadcom.com  Thu Jun 23 22:01:21 2011
From: Matt Carlson <mcarlson@broadcom.com>
Date: Wed, 22 Jun 2011 18:56:54 -0700
Subject: [PATCH 042/194] tg3: 64 bit stats on all arches
Git-commit: 511d22247be767bbf275ee7a5a388c4f009aa0c1
Patch-mainline: v2.6.36-rc1
References: bnc#697783, FATE#311457

Now core network is able to handle 64 bit netdevice stats on 32 bit
arches, we can provide them for tg3, since hardware maintains 64 bit
counters.

Signed-off-by: Eric Dumazet <eric.dumazet@gmail.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Acked-by: Jeff Mahoney <jeffm@suse.com>
---
 drivers/net/tg3.c        |   37 ++++++++++++++++---------------------
 drivers/net/tg3.h        |    4 ++--
 drivers/net/tg3_compat.h |    2 ++
 3 files changed, 20 insertions(+), 23 deletions(-)

diff --git a/drivers/net/tg3.c b/drivers/net/tg3.c
index c3a5870..937918b 100644
--- a/drivers/net/tg3.c
+++ b/drivers/net/tg3.c
@@ -9111,7 +9111,8 @@ err_out1:
 	return err;
 }
 
-static struct net_device_stats *tg3_get_stats(struct net_device *);
+static struct rtnl_link_stats64 *tg3_get_stats64(struct net_device *,
+						 struct rtnl_link_stats64 *);
 static struct tg3_ethtool_stats *tg3_get_estats(struct tg3 *);
 
 static int tg3_close(struct net_device *dev)
@@ -9145,8 +9146,8 @@ static int tg3_close(struct net_device *dev)
 
 	tg3_ints_fini(tp);
 
-	memcpy(&tp->net_stats_prev, tg3_get_stats(tp->dev),
-	       sizeof(tp->net_stats_prev));
+	tg3_get_stats64(tp->dev, &tp->net_stats_prev);
+
 	memcpy(&tp->estats_prev, tg3_get_estats(tp),
 	       sizeof(tp->estats_prev));
 
@@ -9159,24 +9160,12 @@ static int tg3_close(struct net_device *dev)
 	return 0;
 }
 
-static inline unsigned long get_stat64(tg3_stat64_t *val)
-{
-	unsigned long ret;
-
-#if (BITS_PER_LONG == 32)
-	ret = val->low;
-#else
-	ret = ((u64)val->high << 32) | ((u64)val->low);
-#endif
-	return ret;
-}
-
-static inline u64 get_estat64(tg3_stat64_t *val)
+static inline u64 get_stat64(tg3_stat64_t *val)
 {
        return ((u64)val->high << 32) | ((u64)val->low);
 }
 
-static unsigned long calc_crc_errors(struct tg3 *tp)
+static u64 calc_crc_errors(struct tg3 *tp)
 {
 	struct tg3_hw_stats *hw_stats = tp->hw_stats;
 
@@ -9204,7 +9193,7 @@ static unsigned long calc_crc_errors(struct tg3 *tp)
 
 #define ESTAT_ADD(member) \
 	estats->member =	old_estats->member + \
-				get_estat64(&hw_stats->member)
+				get_stat64(&hw_stats->member)
 
 static struct tg3_ethtool_stats *tg3_get_estats(struct tg3 *tp)
 {
@@ -9294,11 +9283,11 @@ static struct tg3_ethtool_stats *tg3_get_estats(struct tg3 *tp)
 	return estats;
 }
 
-static struct net_device_stats *tg3_get_stats(struct net_device *dev)
+static struct rtnl_link_stats64 *tg3_get_stats64(struct net_device *dev,
+						 struct rtnl_link_stats64 *stats)
 {
 	struct tg3 *tp = netdev_priv(dev);
-	struct net_device_stats *stats = &tp->net_stats;
-	struct net_device_stats *old_stats = &tp->net_stats_prev;
+	struct rtnl_link_stats64 *old_stats = &tp->net_stats_prev;
 	struct tg3_hw_stats *hw_stats = tp->hw_stats;
 
 	if (!hw_stats)
@@ -9354,6 +9343,12 @@ static struct net_device_stats *tg3_get_stats(struct net_device *dev)
 	return stats;
 }
 
+static struct rtnl_link_stats64 *tg3_get_stats(struct net_device *dev)
+{
+	struct tg3 *tp = netdev_priv(dev);
+	return tg3_get_stats64(dev, &tp->net_stats);
+}
+
 static inline u32 calc_crc(unsigned char *buf, int len)
 {
 	u32 reg;
diff --git a/drivers/net/tg3.h b/drivers/net/tg3.h
index f727bb7..263bb1a 100644
--- a/drivers/net/tg3.h
+++ b/drivers/net/tg3.h
@@ -2779,8 +2779,8 @@ struct tg3 {
 
 
 	/* begin "everything else" cacheline(s) section */
-	struct net_device_stats		net_stats;
-	struct net_device_stats		net_stats_prev;
+	struct rtnl_link_stats64	net_stats;
+	struct rtnl_link_stats64	net_stats_prev;
 	struct tg3_ethtool_stats	estats;
 	struct tg3_ethtool_stats	estats_prev;
 
diff --git a/drivers/net/tg3_compat.h b/drivers/net/tg3_compat.h
index ff5d991..695f391 100644
--- a/drivers/net/tg3_compat.h
+++ b/drivers/net/tg3_compat.h
@@ -66,6 +66,8 @@ do {								\
     for (oldmclist = dev->mc_list; oldmclist && memcpy(foo.dmi_addr, oldmclist->dmi_addr, 6); oldmclist = oldmclist->next)
 #endif
 
+#define rtnl_link_stats64	net_device_stats
+
 #ifndef PHY_ID_BCM50610
 #define PHY_ID_BCM50610		0xbc050d60
 #endif
-- 
1.7.3.4

