From: Kalesh AP <kalesh.purayil@emulex.com>
Date: Mon, 23 Feb 2015 04:20:15 -0500
Subject: [PATCH 124/145] be2net: refactor adapter resource cleanup sequence
 into be_cleanup()
Patch-mainline: v4.1-rc1
Git-commit: 87ac1a5296291d557080fb544f445be3bce6c51f
References: bsc#921784 FATE#318561

Most of the resource cleanup sequences performed in be_suspend(),
be_eeh_err_detected() and be_err_detection_task() are same. Moved the
common code to a new routine be_cleanup() to avoid code duplication.

Signed-off-by: Kalesh AP <kalesh.purayil@emulex.com>
Signed-off-by: Sathya Perla <sathya.perla@emulex.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Acked-by: David Chang <dchang@suse.com>
---
 drivers/net/ethernet/emulex/benet/be_main.c |   40 +++++++++++-----------------
 1 file changed, 16 insertions(+), 24 deletions(-)

--- a/drivers/net/ethernet/emulex/benet/be_main.c
+++ b/drivers/net/ethernet/emulex/benet/be_main.c
@@ -4842,6 +4842,19 @@ static int be_func_init(struct be_adapte
 	return 0;
 }
 
+static void be_cleanup(struct be_adapter *adapter)
+{
+	struct net_device *netdev = adapter->netdev;
+
+	rtnl_lock();
+	netif_device_detach(netdev);
+	if (netif_running(netdev))
+		be_close(netdev);
+	rtnl_unlock();
+
+	be_clear(adapter);
+}
+
 static int be_resume(struct be_adapter *adapter)
 {
 	struct net_device *netdev = adapter->netdev;
@@ -4891,19 +4904,12 @@ static void be_err_detection_task(struct
 	struct be_adapter *adapter =
 				container_of(work, struct be_adapter,
 					     be_err_detection_work.work);
-	struct net_device *netdev = adapter->netdev;
 	int status = 0;
 
 	be_detect_error(adapter);
 
 	if (adapter->hw_error) {
-		rtnl_lock();
-		netif_device_detach(netdev);
-		if (netif_running(netdev))
-			be_close(netdev);
-		rtnl_unlock();
-
-		be_clear(adapter);
+		be_cleanup(adapter);
 
 		/* As of now error recovery support is in Lancer only */
 		if (lancer_chip(adapter))
@@ -5315,7 +5321,6 @@ do_none:
 static int be_suspend(struct pci_dev *pdev, pm_message_t state)
 {
 	struct be_adapter *adapter = pci_get_drvdata(pdev);
-	struct net_device *netdev =  adapter->netdev;
 
 	if (adapter->wol_en)
 		be_setup_wol(adapter, true);
@@ -5323,13 +5328,7 @@ static int be_suspend(struct pci_dev *pd
 	be_intr_set(adapter, false);
 	be_cancel_err_detection(adapter);
 
-	netif_device_detach(netdev);
-	if (netif_running(netdev)) {
-		rtnl_lock();
-		be_close(netdev);
-		rtnl_unlock();
-	}
-	be_clear(adapter);
+	be_cleanup(adapter);
 
 	pci_save_state(pdev);
 	pci_disable_device(pdev);
@@ -5386,7 +5385,6 @@ static pci_ers_result_t be_eeh_err_detec
 					    pci_channel_state_t state)
 {
 	struct be_adapter *adapter = pci_get_drvdata(pdev);
-	struct net_device *netdev =  adapter->netdev;
 
 	dev_err(&adapter->pdev->dev, "EEH error detected\n");
 
@@ -5395,13 +5393,7 @@ static pci_ers_result_t be_eeh_err_detec
 
 		be_cancel_err_detection(adapter);
 
-		rtnl_lock();
-		netif_device_detach(netdev);
-		if (netif_running(netdev))
-			be_close(netdev);
-		rtnl_unlock();
-
-		be_clear(adapter);
+		be_cleanup(adapter);
 	}
 
 	if (state == pci_channel_io_perm_failure)
