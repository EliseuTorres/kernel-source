From: Ron Mercer <ron.mercer@qlogic.com>
Subject: [net-next PATCH 2/3] qlge: Add check for eeh failure when closing device.
References: bnc#575956

Fix crash where resources are freed twice on an eeh recovery failure.
If eeh recovery fails we set a flag to indicate to close() that
resources have been freed.

Signed-off-by: Ron Mercer <ron.mercer@qlogic.com>
Signed-off-by: Brandon Philips <bphilips@suse.de>

---
 drivers/net/qlge/qlge.h      |    1 +
 drivers/net/qlge/qlge_main.c |   14 ++++++++++++++
 2 files changed, 15 insertions(+)

Index: linux-2.6.32-SLE11-SP1/drivers/net/qlge/qlge.h
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/drivers/net/qlge/qlge.h
+++ linux-2.6.32-SLE11-SP1/drivers/net/qlge/qlge.h
@@ -1994,6 +1994,7 @@ enum {
 	QL_SELFTEST = 9,
 	QL_LB_LINK_UP = 10,
 	QL_FRC_COREDUMP = 11,
+	QL_EEH_FATAL = 12,
 };
 
 /* link_status bit definitions */
Index: linux-2.6.32-SLE11-SP1/drivers/net/qlge/qlge_main.c
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/drivers/net/qlge/qlge_main.c
+++ linux-2.6.32-SLE11-SP1/drivers/net/qlge/qlge_main.c
@@ -3929,6 +3929,16 @@ static int qlge_close(struct net_device
 {
 	struct ql_adapter *qdev = netdev_priv(ndev);
 
+	/* If we hit pci_channel_io_perm_failure
+	 * failure condition, then we already
+	 * brought the adapter down.
+	 */
+	if (test_bit(QL_EEH_FATAL, &qdev->flags)) {
+		QPRINTK(qdev, DRV, ERR, "EEH fatal did unload.\n");
+		clear_bit(QL_EEH_FATAL, &qdev->flags);
+		return 0;
+	}
+
 	/*
 	 * Wait for device to recover from a reset.
 	 * (Rarely happens, but possible.)
@@ -4699,6 +4709,7 @@ static pci_ers_result_t qlge_io_error_de
 					       enum pci_channel_state state)
 {
 	struct net_device *ndev = pci_get_drvdata(pdev);
+	struct ql_adapter *qdev = netdev_priv(ndev);
 
 	switch (state) {
 	case pci_channel_io_normal:
@@ -4712,6 +4723,8 @@ static pci_ers_result_t qlge_io_error_de
 	case pci_channel_io_perm_failure:
 		dev_err(&pdev->dev,
 			"%s: pci_channel_io_perm_failure.\n", __func__);
+		ql_eeh_close(ndev);
+		set_bit(QL_EEH_FATAL, &qdev->flags);
 		return PCI_ERS_RESULT_DISCONNECT;
 	}
 
@@ -4742,6 +4755,7 @@ static pci_ers_result_t qlge_io_slot_res
 
 	if (ql_adapter_reset(qdev)) {
 		QPRINTK(qdev, DRV, ERR, "reset FAILED!\n");
+		set_bit(QL_EEH_FATAL, &qdev->flags);
 		return PCI_ERS_RESULT_DISCONNECT;
 	}
 
