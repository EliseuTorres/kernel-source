From b41666305b332abf95513ab078b99f718b312d34 Mon Sep 17 00:00:00 2001
From: Dmitry Kravkov <dmitry@broadcom.com>
Date: Sun, 17 Jul 2011 16:40:18 +0300
Subject: [PATCH 3/4] bnx2x - fix VLAN stripping configuration
References: bnc#698050
Patch-mainline: never, backport only


Signed-off-by: Dmitry Kravkov <dmitry@broadcom.com>
Signed-off-by: Eilon Greenstein <eilong@broadcom.com>
Acked-by: Jeff Mahoney <jeffm@suse.com>
---
 drivers/net/bnx2x/bnx2x_cmn.c  |  100 +++++++++++++++++++++++++++++++++++-----
 drivers/net/bnx2x/bnx2x_main.c |    4 +-
 2 files changed, 90 insertions(+), 14 deletions(-)

diff --git a/drivers/net/bnx2x/bnx2x_cmn.c b/drivers/net/bnx2x/bnx2x_cmn.c
index d7d36ba..18ecaaa 100644
--- a/drivers/net/bnx2x/bnx2x_cmn.c
+++ b/drivers/net/bnx2x/bnx2x_cmn.c
@@ -367,6 +367,13 @@ static inline u16 bnx2x_set_lro_mss(struct bnx2x *bp, u16 parsing_flags,
 	else /* IPv4 */
 		hdrs_len += sizeof(struct iphdr);
 
+#ifdef BCM_VLAN
+	/* There is VLAN on data, take into an account */
+	if ((bp->vlgrp == NULL) && (parsing_flags & PARSING_FLAGS_VLAN))
+#else
+	if (parsing_flags & PARSING_FLAGS_VLAN)
+#endif
+		hdrs_len += VLAN_HLEN;
 
 	/* Check if there was a TCP timestamp, if there is it's will
 	 * always be 12 bytes length: nop nop kind length echo val.
@@ -3180,18 +3187,6 @@ void bnx2x_tx_timeout(struct net_device *dev)
 	schedule_delayed_work(&bp->reset_task, 0);
 }
 
-#ifdef BCM_VLAN
-/* called with rtnl_lock */
-void bnx2x_vlan_rx_register(struct net_device *dev,
-				   struct vlan_group *vlgrp)
-{
-	struct bnx2x *bp = netdev_priv(dev);
-
-	bp->vlgrp = vlgrp;
-}
-
-#endif
-
 int bnx2x_suspend(struct pci_dev *pdev, pm_message_t state)
 {
 	struct net_device *dev = pci_get_drvdata(pdev);
@@ -3261,6 +3256,87 @@ int bnx2x_resume(struct pci_dev *pdev)
 	return rc;
 }
 
+#ifdef BCM_VLAN /* ! BNX2X_UPSTREAM */
+static inline int bnx2x_set_vlan_stripping(struct bnx2x *bp, bool set)
+{
+	struct bnx2x_queue_state_params q_params = {0};
+	struct bnx2x_queue_update_params *update_params =
+		&q_params.params.update;
+	int i, rc;
+
+	/* We want to wait for completion in this context */
+	__set_bit(RAMROD_COMP_WAIT, &q_params.ramrod_flags);
+
+	/* Set the command */
+	q_params.cmd = BNX2X_Q_CMD_UPDATE;
+
+	/* Enable VLAN stripping if requested */
+	if (set)
+		__set_bit(BNX2X_Q_UPDATE_IN_VLAN_REM,
+			&update_params->update_flags);
+
+	/* Indicate that VLAN stripping configuration has changed */
+	__set_bit(BNX2X_Q_UPDATE_IN_VLAN_REM_CHNG,
+		  &update_params->update_flags);
+
+	for_each_rx_queue(bp, i) {
+		struct bnx2x_fastpath *fp = &bp->fp[i];
+
+		/* Set the appropriate Queue object */
+		q_params.q_obj = &fp->q_obj;
+
+		/* Update the Queue state */
+		rc = bnx2x_queue_state_change(bp, &q_params);
+		if (rc) {
+			BNX2X_ERR("Failed to configure VLAN stripping "
+				  "for Queue %d\n", i);
+			return rc;
+		}
+	}
+
+	return 0;
+}
+
+void bnx2x_vlan_rx_register(struct net_device *dev, struct vlan_group *vlgrp)
+{
+	struct bnx2x *bp = netdev_priv(dev);
+	int rc;
+
+	/* Configure VLAN stripping if NIC is up.
+	 * Otherwise just set the bp->vlgrp and stripping will be
+	 * configured in bnx2x_nic_load().
+	 */
+	if (bp->state == BNX2X_STATE_OPEN) {
+		if (vlgrp != NULL) {
+			rc = bnx2x_set_vlan_stripping(bp, true);
+
+			/* If we failed to configure VLAN stripping we don't
+			 * want to use HW accelerated flow in bnx2x_rx_int().
+			 * Thus we will leave bp->vlgrp to be equal to NULL to
+			 * disable it.
+			 */
+			if (rc) {
+				netdev_err(dev, "Failed to set HW "
+						"VLAN stripping\n");
+				bnx2x_set_vlan_stripping(bp, false);
+			} else
+				bp->vlgrp = vlgrp;
+		} else {
+			rc = bnx2x_set_vlan_stripping(bp, false);
+
+			if (rc)
+				netdev_err(dev, "Failed to clear HW "
+						"VLAN stripping\n");
+
+			bp->vlgrp = NULL;
+		}
+	} else
+		bp->vlgrp = vlgrp;
+
+/* called with rtnl_lock */
+
+}
+#endif /* BCM_VLAN */
 
 void bnx2x_set_ctx_validation(struct bnx2x *bp, struct eth_context *cxt,
 			      u32 cid)
diff --git a/drivers/net/bnx2x/bnx2x_main.c b/drivers/net/bnx2x/bnx2x_main.c
index 390c2ae..9c8953e 100644
--- a/drivers/net/bnx2x/bnx2x_main.c
+++ b/drivers/net/bnx2x/bnx2x_main.c
@@ -2660,8 +2660,8 @@ static inline unsigned long bnx2x_get_q_flags(struct bnx2x *bp,
 		__set_bit(BNX2X_Q_FLG_MCAST, &flags);
 	}
 
-	/* Always set HW VLAN stripping */
-	__set_bit(BNX2X_Q_FLG_VLAN, &flags);
+	if (bp->vlgrp)
+		__set_bit(BNX2X_Q_FLG_VLAN, &flags);
 
 	return flags;
 }
-- 
1.7.2.2


