From bhutchings@solarflare.com  Tue Jul  5 17:41:12 2011
From: Ben Hutchings <bhutchings@solarflare.com>
Date: Wed, 30 Jun 2010 02:44:32 +0000
Subject: ethtool: Change ethtool_op_set_flags to validate flags
Patch-mainline: v2.6.36-rc1
Git-commit: 1437ce3983bcbc0447a0dedcd644c14fe833d266
References: FATE#311470, bnc#694966

ethtool_op_set_flags() does not check for unsupported flags, and has
no way of doing so.  This means it is not suitable for use as a
default implementation of ethtool_ops::set_flags.

Add a 'supported' parameter specifying the flags that the driver and
hardware support, validate the requested flags against this, and
change all current callers to pass this parameter.

Change some other trivial implementations of ethtool_ops::set_flags to
call ethtool_op_set_flags().

Signed-off-by: Ben Hutchings <bhutchings@solarflare.com>
Reviewed-by: Stanislaw Gruszka <sgruszka@redhat.com>
Acked-by: Jeff Garzik <jgarzik@redhat.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Acked-by: Jeff Mahoney <jeffm@suse.com>
---

diff --git a/drivers/net/cxgb4/cxgb4_main.c b/drivers/net/cxgb4/cxgb4_main.c
index 6528167..55a720e 100644
--- a/drivers/net/cxgb4/cxgb4_main.c
+++ b/drivers/net/cxgb4/cxgb4_main.c
@@ -1799,14 +1799,7 @@ static int set_tso(struct net_device *dev, u32 value)
 
 static int set_flags(struct net_device *dev, u32 flags)
 {
-	if (flags & ~ETH_FLAG_RXHASH)
-		return -EOPNOTSUPP;
-
-	if (flags & ETH_FLAG_RXHASH)
-		dev->features |= NETIF_F_RXHASH;
-	else
-		dev->features &= ~NETIF_F_RXHASH;
-	return 0;
+	return ethtool_op_set_flags(dev, flags, ETH_FLAG_RXHASH);
 }
 
 static struct ethtool_ops cxgb_ethtool_ops = {
#diff --git a/include/linux/ethtool.h b/include/linux/ethtool.h
#index 2c8af09..084ddb3 100644
#--- a/include/linux/ethtool.h
#+++ b/include/linux/ethtool.h
#@@ -457,7 +457,7 @@ int ethtool_op_set_tso(struct net_device *dev, u32 data);
# u32 ethtool_op_get_ufo(struct net_device *dev);
# int ethtool_op_set_ufo(struct net_device *dev, u32 data);
# u32 ethtool_op_get_flags(struct net_device *dev);
#-int ethtool_op_set_flags(struct net_device *dev, u32 data);
#+int ethtool_op_set_flags(struct net_device *dev, u32 data, u32 supported);
# void ethtool_ntuple_flush(struct net_device *dev);
# 
# /**
#diff --git a/net/core/ethtool.c b/net/core/ethtool.c
#index a0f4964..5d42fae 100644
#--- a/net/core/ethtool.c
#+++ b/net/core/ethtool.c
#@@ -144,31 +144,13 @@ u32 ethtool_op_get_flags(struct net_device *dev)
# }
# EXPORT_SYMBOL(ethtool_op_get_flags);
# 
#-int ethtool_op_set_flags(struct net_device *dev, u32 data)
#+int ethtool_op_set_flags(struct net_device *dev, u32 data, u32 supported)
# {
#-	const struct ethtool_ops *ops = dev->ethtool_ops;
#-	unsigned long features = dev->features;
#-
#-	if (data & ETH_FLAG_LRO)
#-		features |= NETIF_F_LRO;
#-	else
#-		features &= ~NETIF_F_LRO;
#-
#-	if (data & ETH_FLAG_NTUPLE) {
#-		if (!ops->set_rx_ntuple)
#-			return -EOPNOTSUPP;
#-		features |= NETIF_F_NTUPLE;
#-	} else {
#-		/* safe to clear regardless */
#-		features &= ~NETIF_F_NTUPLE;
#-	}
#-
#-	if (data & ETH_FLAG_RXHASH)
#-		features |= NETIF_F_RXHASH;
#-	else
#-		features &= ~NETIF_F_RXHASH;
#+	if (data & ~supported)
#+		return -EINVAL;
# 
#-	dev->features = features;
#+	dev->features = ((dev->features & ~flags_dup_features) |
#+			 (data & flags_dup_features));
# 	return 0;
# }
# EXPORT_SYMBOL(ethtool_op_set_flags);
#
