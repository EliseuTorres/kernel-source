From somnath.kotur@emulex.com  Thu Jun 23 15:40:26 2011
From: Somnath Kotur <somnath.kotur@emulex.com>
Date: Wed, 4 May 2011 22:40:46 +0000
Subject: [PATCH] be2net: Fixed bugs related to PVID.
Git-commit: 6709d9521df05c105343473ab8b147e2ef1e13d8
Patch-mainline: v2.6.39
References: FATE#311448, bnc#697255

Fixed bug to make sure 'pvid' retrieval will work on big endian hosts.
Fixed incorrect comparison between the Rx Completion's 16-bit VLAN TCI
and the PVID. Now comparing only the relevant 12 bits corresponding to
the VID.
Renamed 'vid' field under Rx Completion to 'vlan_tag' to reflect
accurate description.

Signed-off-by: Somnath Kotur <somnath.kotur@emulex.com>
Signed-off-by: David S. Miller <davem@davemloft.net>

Acked-by: Jeff Mahoney <jeffm@suse.com>
---
 drivers/net/benet/be.h      |    2 +-
 drivers/net/benet/be_cmds.c |    2 +-
 drivers/net/benet/be_main.c |   21 ++++++++++++---------
 3 files changed, 14 insertions(+), 11 deletions(-)
--- a/drivers/net/benet/be.h
+++ b/drivers/net/benet/be.h
@@ -212,7 +212,7 @@ struct be_rx_stats {
 
 struct be_rx_compl_info {
 	u32 rss_hash;
-	u16 vid;
+	u16 vlan_tag;
 	u16 pkt_size;
 	u16 rxq_idx;
 	u16 mac_id;
--- a/drivers/net/benet/be_cmds.c
+++ b/drivers/net/benet/be_cmds.c
@@ -133,7 +133,7 @@ static void be_async_grp5_pvid_state_pro
 		struct be_async_event_grp5_pvid_state *evt)
 {
 	if (evt->enabled)
-		adapter->pvid = evt->tag;
+		adapter->pvid = le16_to_cpu(evt->tag);
 	else
 		adapter->pvid = 0;
 }
--- a/drivers/net/benet/be_main.c
+++ b/drivers/net/benet/be_main.c
@@ -930,7 +930,8 @@ static void be_rx_compl_process(struct b
 			kfree_skb(skb);
 			return;
 		}
-		vlan_hwaccel_receive_skb(skb, adapter->vlan_grp, rxcp->vid);
+		vlan_hwaccel_receive_skb(skb, adapter->vlan_grp,
+					rxcp->vlan_tag);
 	} else {
 		netif_receive_skb(skb);
 	}
@@ -988,7 +989,8 @@ static void be_rx_compl_process_gro(stru
 	if (likely(!rxcp->vlanf))
 		napi_gro_frags(&eq_obj->napi);
 	else
-		vlan_gro_frags(&eq_obj->napi, adapter->vlan_grp, rxcp->vid);
+		vlan_gro_frags(&eq_obj->napi, adapter->vlan_grp,
+				rxcp->vlan_tag);
 }
 
 static void be_parse_rx_compl_v1(struct be_adapter *adapter,
@@ -1016,8 +1018,8 @@ static void be_parse_rx_compl_v1(struct
 	if (rxcp->vlanf) {
 		rxcp->vtm = AMAP_GET_BITS(struct amap_eth_rx_compl_v1, vtm,
 				compl);
-		rxcp->vid = AMAP_GET_BITS(struct amap_eth_rx_compl_v1, vlan_tag,
-				compl);
+		rxcp->vlan_tag = AMAP_GET_BITS(struct amap_eth_rx_compl_v1,
+					vlan_tag, compl);
 	}
 }
 
@@ -1046,8 +1048,8 @@ static void be_parse_rx_compl_v0(struct
 	if (rxcp->vlanf) {
 		rxcp->vtm = AMAP_GET_BITS(struct amap_eth_rx_compl_v0, vtm,
 				compl);
-		rxcp->vid = AMAP_GET_BITS(struct amap_eth_rx_compl_v0, vlan_tag,
-				compl);
+		rxcp->vlan_tag = AMAP_GET_BITS(struct amap_eth_rx_compl_v0,
+					vlan_tag, compl);
 	}
 }
 
@@ -1077,10 +1079,11 @@ static struct be_rx_compl_info *be_rx_co
 			rxcp->vlanf = 0;
 
 		if (!lancer_chip(adapter))
-			rxcp->vid = swab16(rxcp->vid);
+			rxcp->vlan_tag = swab16(rxcp->vlan_tag);
 
-		if ((adapter->pvid == rxcp->vid) &&
-			!adapter->vlan_tag[rxcp->vid])
+		if (((adapter->pvid & VLAN_VID_MASK) ==
+			(rxcp->vlan_tag & VLAN_VID_MASK)) &&
+			!adapter->vlan_tag[rxcp->vlan_tag])
 			rxcp->vlanf = 0;
 	}
 
