From fa75ad754bdb9feecad37c27589e954fd2dc98d8 Mon Sep 17 00:00:00 2001
From: Sarah Sharp <sarah.a.sharp@linux.intel.com>
Date: Mon, 21 May 2012 08:44:33 -0700
Subject: [PATCH] xhci: Fix DIV_ROUND_UP compile error.
Git-commit: c88db160a30cccb81303212b256680f2e37e35ae
Patch-mainline: v3.5-rc1~149^2^2

Fengguang reports that the xHCI driver isn't linked properly on his
machine:

ERROR: "__udivdi3" [drivers/usb/host/xhci-hcd.ko] undefined!
ERROR: "handle_edge_irq" [drivers/gpio/gpio-pch.ko] undefined!
ERROR: "irq_to_desc" [drivers/gpio/gpio-pch.ko] undefined!

The driver compiles fine on my 64-bit box (gcc version 4.6.1).
Fengguang thinks it's because the xHCI driver was using DIV_ROUND_UP()
instead of DIV_ROUND_UP_ULL() with arguments that were unsigned long
long variables.

Signed-off-by: Sarah Sharp <sarah.a.sharp@linux.intel.com>
Reported-by: Wu Fengguang <wfg@linux.intel.com>
Signed-off-by: Michal Marek <mmarek@suse.cz>

---
 drivers/usb/host/xhci.c |    6 +++---
 1 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/drivers/usb/host/xhci.c b/drivers/usb/host/xhci.c
index 7f3753a..bea8779 100644
--- a/drivers/usb/host/xhci.c
+++ b/drivers/usb/host/xhci.c
@@ -4063,7 +4063,7 @@ static u16 xhci_calculate_intel_u1_timeout(struct usb_device *udev,
 		/* Otherwise the calculation is the same as isoc eps */
 	case USB_ENDPOINT_XFER_ISOC:
 		timeout_ns = xhci_service_interval_to_ns(desc);
-		timeout_ns = DIV_ROUND_UP(timeout_ns * 105, 100);
+		timeout_ns = DIV_ROUND_UP_ULL(timeout_ns * 105, 100);
 		if (timeout_ns < udev->u1_params.sel * 2)
 			timeout_ns = udev->u1_params.sel * 2;
 		break;
@@ -4072,7 +4072,7 @@ static u16 xhci_calculate_intel_u1_timeout(struct usb_device *udev,
 	}
 
 	/* The U1 timeout is encoded in 1us intervals. */
-	timeout_ns = DIV_ROUND_UP(timeout_ns, 1000);
+	timeout_ns = DIV_ROUND_UP_ULL(timeout_ns, 1000);
 	/* Don't return a timeout of zero, because that's USB3_LPM_DISABLED. */
 	if (timeout_ns == USB3_LPM_DISABLED)
 		timeout_ns++;
@@ -4111,7 +4111,7 @@ static u16 xhci_calculate_intel_u2_timeout(struct usb_device *udev,
 		timeout_ns = u2_del_ns;
 
 	/* The U2 timeout is encoded in 256us intervals */
-	timeout_ns = DIV_ROUND_UP(timeout_ns, 256 * 1000);
+	timeout_ns = DIV_ROUND_UP_ULL(timeout_ns, 256 * 1000);
 	/* If the necessary timeout value is bigger than what we can set in the
 	 * USB 3.0 hub, we have to disable hub-initiated U2.
 	 */
-- 
1.7.3.1

