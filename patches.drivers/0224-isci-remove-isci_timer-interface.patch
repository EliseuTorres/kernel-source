From: Edmund Nadolski <edmund.nadolski@intel.com>
Date: Thu, 19 May 2011 12:00:22 +0000
Subject: [PATCH 224/273] isci: remove isci_timer interface
Git-commit: 8db02da52895285e99d7eb2fa825fd393e61d9c5
References: FATE#311808,bnc#709528
Patch-Mainline: 3.0

Delete code which is no longer used.

Signed-off-by: Edmund Nadolski <edmund.nadolski@intel.com>
Signed-off-by: Dan Williams <dan.j.williams@intel.com>
Signed-off-by: Hannes Reinecke <hare@suse.de>
---
 drivers/scsi/isci/Makefile      |    2 +-
 drivers/scsi/isci/host.c        |   13 --
 drivers/scsi/isci/host.h        |    1 -
 drivers/scsi/isci/phy.c         |    1 -
 drivers/scsi/isci/port.c        |    1 -
 drivers/scsi/isci/port_config.c |    1 -
 drivers/scsi/isci/task.c        |    1 -
 drivers/scsi/isci/timers.c      |  245 ---------------------------------------
 drivers/scsi/isci/timers.h      |   88 --------------
 9 files changed, 1 insertions(+), 352 deletions(-)
 delete mode 100644 drivers/scsi/isci/timers.c
 delete mode 100644 drivers/scsi/isci/timers.h

diff --git a/drivers/scsi/isci/Makefile b/drivers/scsi/isci/Makefile
index 86b0c88..ad58fe3 100644
--- a/drivers/scsi/isci/Makefile
+++ b/drivers/scsi/isci/Makefile
@@ -1,6 +1,6 @@
 obj-$(CONFIG_SCSI_ISCI) += isci.o
 isci-objs := init.o phy.o request.o sata.o \
-	     remote_device.o port.o timers.o \
+	     remote_device.o port.o \
 	     host.o task.o probe_roms.o \
 	     state_machine.o \
 	     remote_node_context.o \
diff --git a/drivers/scsi/isci/host.c b/drivers/scsi/isci/host.c
index e79f35d..8801955 100644
--- a/drivers/scsi/isci/host.c
+++ b/drivers/scsi/isci/host.c
@@ -67,7 +67,6 @@
 #include "scu_remote_node_context.h"
 #include "scu_task_context.h"
 #include "scu_unsolicited_frame.h"
-#include "timers.h"
 
 #define SCU_CONTEXT_RAM_INIT_STALL_TIME      200
 
@@ -111,14 +110,6 @@
 	)
 
 
-#define SCIC_SDS_CONTROLLER_MIN_TIMER_COUNT  3
-#define SCIC_SDS_CONTROLLER_MAX_TIMER_COUNT  3
-
-/**
- *
- *
- * The number of milliseconds to wait for a phy to start.
- */
 #define SCIC_SDS_CONTROLLER_PHY_START_TIMEOUT      100
 
 /**
@@ -1379,8 +1370,6 @@ void isci_host_deinit(struct isci_host *ihost)
 	del_timer_sync(&ihost->sci.timer.timer);
 
 	del_timer_sync(&ihost->sci.phy_timer.timer);
-
-	isci_timer_list_destroy(ihost);
 }
 
 static void __iomem *scu_base(struct isci_host *isci_host)
@@ -2517,8 +2506,6 @@ int isci_host_init(struct isci_host *isci_host)
 	union scic_user_parameters scic_user_params;
 	struct isci_pci_info *pci_info = to_pci_info(isci_host->pdev);
 
-	isci_timer_list_construct(isci_host);
-
 	spin_lock_init(&isci_host->state_lock);
 	spin_lock_init(&isci_host->scic_lock);
 	spin_lock_init(&isci_host->queue_lock);
diff --git a/drivers/scsi/isci/host.h b/drivers/scsi/isci/host.h
index 9fd47b4..4ce39e1 100644
--- a/drivers/scsi/isci/host.h
+++ b/drivers/scsi/isci/host.h
@@ -325,7 +325,6 @@ struct isci_host {
 	union scic_oem_parameters oem_parameters;
 
 	int id; /* unique within a given pci device */
-	struct list_head timers;
 	void *core_ctrl_memory;
 	struct dma_pool *dma_pool;
 	struct isci_phy phys[SCI_MAX_PHYS];
diff --git a/drivers/scsi/isci/phy.c b/drivers/scsi/isci/phy.c
index b663bbd..fc196e3 100644
--- a/drivers/scsi/isci/phy.c
+++ b/drivers/scsi/isci/phy.c
@@ -57,7 +57,6 @@
 #include "host.h"
 #include "phy.h"
 #include "scu_event_codes.h"
-#include "timers.h"
 #include "probe_roms.h"
 
 /* Maximum arbitration wait time in micro-seconds */
diff --git a/drivers/scsi/isci/port.c b/drivers/scsi/isci/port.c
index 3da9048..8d88ca2 100644
--- a/drivers/scsi/isci/port.c
+++ b/drivers/scsi/isci/port.c
@@ -56,7 +56,6 @@
 #include "isci.h"
 #include "port.h"
 #include "request.h"
-#include "timers.h"
 
 #define SCIC_SDS_PORT_HARD_RESET_TIMEOUT  (1000)
 #define SCU_DUMMY_INDEX    (0xFFFF)
diff --git a/drivers/scsi/isci/port_config.c b/drivers/scsi/isci/port_config.c
index 1cde7b9..38401f6 100644
--- a/drivers/scsi/isci/port_config.c
+++ b/drivers/scsi/isci/port_config.c
@@ -54,7 +54,6 @@
  */
 
 #include "host.h"
-#include "timers.h"
 
 #define SCIC_SDS_MPC_RECONFIGURATION_TIMEOUT    (10)
 #define SCIC_SDS_APC_RECONFIGURATION_TIMEOUT    (10)
diff --git a/drivers/scsi/isci/task.c b/drivers/scsi/isci/task.c
index 60b687b..93c7556 100644
--- a/drivers/scsi/isci/task.c
+++ b/drivers/scsi/isci/task.c
@@ -62,7 +62,6 @@
 #include "request.h"
 #include "sata.h"
 #include "task.h"
-#include "timers.h"
 
 /**
 * isci_task_refuse() - complete the request to the upper layer driver in
diff --git a/drivers/scsi/isci/timers.c b/drivers/scsi/isci/timers.c
deleted file mode 100644
index 007700e..0000000
--- a/drivers/scsi/isci/timers.c
+++ /dev/null
@@ -1,245 +0,0 @@
-/*
- * This file is provided under a dual BSD/GPLv2 license.  When using or
- * redistributing this file, you may do so under either license.
- *
- * GPL LICENSE SUMMARY
- *
- * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of version 2 of the GNU General Public License as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but
- * WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
- * The full GNU General Public License is included in this distribution
- * in the file called LICENSE.GPL.
- *
- * BSD LICENSE
- *
- * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- *   * Redistributions of source code must retain the above copyright
- *     notice, this list of conditions and the following disclaimer.
- *   * Redistributions in binary form must reproduce the above copyright
- *     notice, this list of conditions and the following disclaimer in
- *     the documentation and/or other materials provided with the
- *     distribution.
- *   * Neither the name of Intel Corporation nor the names of its
- *     contributors may be used to endorse or promote products derived
- *     from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#include "isci.h"
-#include "timers.h"
-#include "host.h"
-
-/**
- * isci_timer_list_construct() - This method contrucst the SCI Timer List
- *    object used by the SCI Module class. The construction process involves
- *    creating isci_timer objects and adding them to the SCI Timer List
- *    object's list member. The number of isci_timer objects is determined by
- *    the timer_list_size parameter.
- * @ihost: container of the timer list
- *
- * This method returns an error code indicating sucess or failure. The user
- * should check for possible memory allocation error return otherwise, a zero
- * indicates success.
- */
-int isci_timer_list_construct(struct isci_host *ihost)
-{
-	struct isci_timer *itimer;
-	int i, err = 0;
-
-	INIT_LIST_HEAD(&ihost->timers);
-	for (i = 0; i < SCI_MAX_TIMER_COUNT; i++) {
-		itimer = devm_kzalloc(&ihost->pdev->dev, sizeof(*itimer), GFP_KERNEL);
-
-		if (!itimer) {
-			err = -ENOMEM;
-			break;
-		}
-		init_timer(&itimer->timer);
-		itimer->used = 0;
-		itimer->stopped = 1;
-		list_add(&itimer->node, &ihost->timers);
-	}
-
-	return err;
-}
-
-/**
- * isci_timer_list_destroy() - This method destroys the SCI Timer List object
- *    used by the SCI Module class. The destruction  process involves freeing
- *    memory allocated for isci_timer objects on the SCI Timer List object's
- *    timers list_head member. If any isci_timer objects are mark as "in use",
- *    they are not freed and the function returns an error code of -EBUSY.
- * @ihost: container of the list to be destroyed
- */
-void isci_timer_list_destroy(struct isci_host *ihost)
-{
-	struct isci_timer *timer;
-	LIST_HEAD(list);
-
-	spin_lock_irq(&ihost->scic_lock);
-	list_splice_init(&ihost->timers, &list);
-	spin_unlock_irq(&ihost->scic_lock);
-
-	list_for_each_entry(timer, &list, node)
-		del_timer_sync(&timer->timer);
-}
-
-/**
- * This method pulls an isci_timer object off of the list for the SCI Timer
- *    List object specified, marks the isci_timer as "in use" and initializes
- *    it with user callback function and cookie data. The timer is not start at
- *    this time, just reserved for the user.
- * @isci_timer_list: This parameter points to the SCI Timer List from which the
- *    timer is reserved.
- * @cookie: This parameter specifies a piece of information that the user must
- *    retain.  This cookie is to be supplied by the user anytime a timeout
- *    occurs for the created timer.
- * @timer_callback: This parameter specifies the callback method to be invoked
- *    whenever the timer expires.
- *
- * This method returns a pointer to an isci_timer object reserved from the SCI
- * Timer List.  The pointer will be utilized for all further interactions
- * relating to this timer.
- */
-
-static void timer_function(unsigned long data)
-{
-
-	struct isci_timer *timer = (struct isci_timer *)data;
-	struct isci_host *isci_host = timer->isci_host;
-	unsigned long flags;
-
-	dev_dbg(&isci_host->pdev->dev,
-		"%s: isci_timer = %p\n", __func__, timer);
-
-	if (isci_stopped == isci_host_get_state(isci_host)) {
-		timer->stopped = 1;
-		return;
-	}
-
-	spin_lock_irqsave(&isci_host->scic_lock, flags);
-
-	if (!timer->stopped) {
-		timer->stopped = 1;
-		timer->timer_callback(timer->cb_param);
-	}
-
-	spin_unlock_irqrestore(&isci_host->scic_lock, flags);
-}
-
-
-struct isci_timer *isci_timer_create(struct isci_host *ihost, void *cb_param,
-				     void (*timer_callback)(void *))
-{
-	struct timer_list *timer;
-	struct isci_timer *isci_timer;
-	struct list_head *list = &ihost->timers;
-
-	WARN_ONCE(!spin_is_locked(&ihost->scic_lock),
-		  "%s: unlocked!\n", __func__);
-
-	if (WARN_ONCE(list_empty(list), "%s: timer pool empty\n", __func__))
-		return NULL;
-
-	isci_timer = list_entry(list->next, struct isci_timer, node);
-
-	isci_timer->used = 1;
-	isci_timer->stopped = 1;
-	/* FIXME: what!? we recycle the timer, rather than take it off
-	 * the free list?
-	 */
-	list_move_tail(&isci_timer->node, list);
-
-	timer = &isci_timer->timer;
-	timer->data = (unsigned long)isci_timer;
-	timer->function = timer_function;
-	isci_timer->cb_param = cb_param;
-	isci_timer->timer_callback = timer_callback;
-	isci_timer->isci_host = ihost;
-
-	dev_dbg(&ihost->pdev->dev,
-		"%s: isci_timer = %p\n", __func__, isci_timer);
-
-	return isci_timer;
-}
-
-/* isci_del_timer() - This method frees the isci_timer, marking it "free to
- *    use", then places its back at the head of the timers list for the SCI
- *    Timer List object specified.
- */
-void isci_del_timer(struct isci_host *ihost, struct isci_timer *isci_timer)
-{
-	struct list_head *list = &ihost->timers;
-
-	WARN_ONCE(!spin_is_locked(&ihost->scic_lock),
-		  "%s unlocked!\n", __func__);
-
-	dev_dbg(&isci_timer->isci_host->pdev->dev,
-		"%s: isci_timer = %p\n", __func__, isci_timer);
-
-	isci_timer->used = 0;
-	list_move(&isci_timer->node, list);
-	del_timer(&isci_timer->timer);
-	isci_timer->stopped = 1;
-}
-
-/**
- * isci_timer_start() - This method starts the specified isci_timer, with the
- *    specified timeout value.
- * @isci_timer: This parameter specifies the timer to be started.
- * @timeout: This parameter specifies the timeout, in milliseconds, after which
- *    the associated callback function will be called.
- *
- */
-void isci_timer_start(struct isci_timer *isci_timer, unsigned long tmo)
-{
-	struct timer_list *timer = &isci_timer->timer;
-
-	dev_dbg(&isci_timer->isci_host->pdev->dev,
-		"%s: isci_timer = %p\n", __func__, isci_timer);
-
-	isci_timer->stopped = 0;
-	mod_timer(timer, jiffies + msecs_to_jiffies(tmo));
-}
-
-/**
- * isci_timer_stop() - This method stops the supplied isci_timer.
- * @isci_timer: This parameter specifies the isci_timer to be stopped.
- *
- */
-void isci_timer_stop(struct isci_timer *isci_timer)
-{
-	dev_dbg(&isci_timer->isci_host->pdev->dev,
-		"%s: isci_timer = %p\n", __func__, isci_timer);
-
-	isci_timer->stopped = 1;
-	del_timer(&isci_timer->timer);
-}
diff --git a/drivers/scsi/isci/timers.h b/drivers/scsi/isci/timers.h
deleted file mode 100644
index 8d8a892..0000000
--- a/drivers/scsi/isci/timers.h
+++ /dev/null
@@ -1,88 +0,0 @@
-/*
- * This file is provided under a dual BSD/GPLv2 license.  When using or
- * redistributing this file, you may do so under either license.
- *
- * GPL LICENSE SUMMARY
- *
- * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of version 2 of the GNU General Public License as
- * published by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but
- * WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
- * General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
- * The full GNU General Public License is included in this distribution
- * in the file called LICENSE.GPL.
- *
- * BSD LICENSE
- *
- * Copyright(c) 2008 - 2011 Intel Corporation. All rights reserved.
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- *   * Redistributions of source code must retain the above copyright
- *     notice, this list of conditions and the following disclaimer.
- *   * Redistributions in binary form must reproduce the above copyright
- *     notice, this list of conditions and the following disclaimer in
- *     the documentation and/or other materials provided with the
- *     distribution.
- *   * Neither the name of Intel Corporation nor the names of its
- *     contributors may be used to endorse or promote products derived
- *     from this software without specific prior written permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-
-#if !defined(_SCI_TIMER_H_)
-#define _SCI_TIMER_H_
-
-#include <linux/timer.h>
-#include <linux/types.h>
-
-#define SCI_MAX_TIMER_COUNT 25
-
-/**
- * struct isci_timer - This class represents the timer object used by SCIC. It
- *    wraps the Linux timer_list object, and (TODO) should be removed in favor
- *    of a delayed-workqueue style interface with simpler locking
- *
- */
-struct isci_timer {
-	int used;
-	int stopped;
-	void *cb_param;
-	void (*timer_callback)(void *);
-	struct list_head node;
-	struct timer_list timer;
-	struct isci_host *isci_host;
-};
-
-int isci_timer_list_construct(struct isci_host *ihost);
-void isci_timer_list_destroy(struct isci_host *ihost);
-struct isci_timer *isci_timer_create(struct isci_host *ihost, void *cb_param,
-				     void (*timer_callback)(void *));
-void isci_del_timer(struct isci_host *ihost, struct isci_timer *itimer);
-void isci_timer_start(struct isci_timer *isci_timer, unsigned long timeout);
-void isci_timer_stop(struct isci_timer *isci_timer);
-
-#endif /* !defined (_SCI_TIMER_H_) */
-- 
1.6.0.2

