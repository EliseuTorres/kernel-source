Subject: crypto: nx - saves chaining value from co-processor
From: Fionnuala Gunter <fin@linux.vnet.ibm.com>
Git-commit: cc76daf793287b2c51b0b66153072b23cdb51c1c
Patch-mainline: v3.10-5871-gcc76daf
References: fate#317629

This patch fixes a bug that is triggered when cts(cbc(aes)) is used with
nx-crypto driver on input larger than 32 bytes.

The chaining value from co-processor was not being saved. This value is
needed because it is used as the IV by cts(cbc(aes)).

Signed-off-by: Fionnuala Gunter <fin@linux.vnet.ibm.com>
Reviewed-by: Marcelo Cerri <mhcerri@linux.vnet.ibm.com>
Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
Acked-by: Dinar Valeev <dvaleev@suse.com>

Index: linux-3.0-SLE11-SP4/drivers/crypto/nx/nx-aes-cbc.c
===================================================================
--- linux-3.0-SLE11-SP4.orig/drivers/crypto/nx/nx-aes-cbc.c
+++ linux-3.0-SLE11-SP4/drivers/crypto/nx/nx-aes-cbc.c
@@ -95,6 +95,7 @@ static int cbc_aes_nx_crypt(struct blkci
 	if (rc)
 		goto out;
 
+	memcpy(desc->info, csbcpb->cpb.aes_cbc.cv, AES_BLOCK_SIZE);
 	atomic_inc(&(nx_ctx->stats->aes_ops));
 	atomic64_add(csbcpb->csb.processed_byte_count,
 		     &(nx_ctx->stats->aes_bytes));
