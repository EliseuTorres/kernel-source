From: Viresh Kumar <viresh.kumar@st.com>
Subject: watchdog: Add watchdog_active() routine
References: fate#311770
Patch-Mainline: v3.5-rc1
Git-commit: 257f8c4aae392654d4ab846030b9f4518f16ed32

Modified mainline patch:
Do not use new inline func in via_wdt.c, do it the old,
but same way (for better patching reasons).

Signed-off-by: Thomas Renninger <trenn@suse.de>

Some watchdog may need to check if watchdog is ACTIVE or not, for example in
their suspend/resume hooks.

This patch adds this routine and changes the core drivers to use it.

Signed-off-by: Viresh Kumar <viresh.kumar@st.com>
Signed-off-by: Wim Van Sebroeck <wim@iguana.be>

---
 drivers/watchdog/watchdog_dev.c |    6 +++---
 include/linux/watchdog.h        |    6 ++++++
 2 files changed, 9 insertions(+), 3 deletions(-)

Index: linux-3.0-SLE11-SP3/drivers/watchdog/watchdog_dev.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/drivers/watchdog/watchdog_dev.c
+++ linux-3.0-SLE11-SP3/drivers/watchdog/watchdog_dev.c
@@ -59,7 +59,7 @@ static struct watchdog_device *wdd;
 
 static int watchdog_ping(struct watchdog_device *wddev)
 {
-	if (test_bit(WDOG_ACTIVE, &wddev->status)) {
+	if (watchdog_active(wddev)) {
 		if (wddev->ops->ping)
 			return wddev->ops->ping(wddev);  /* ping the watchdog */
 		else
@@ -81,7 +81,7 @@ static int watchdog_start(struct watchdo
 {
 	int err;
 
-	if (!test_bit(WDOG_ACTIVE, &wddev->status)) {
+	if (!watchdog_active(wddev)) {
 		err = wddev->ops->start(wddev);
 		if (err < 0)
 			return err;
@@ -111,7 +111,7 @@ static int watchdog_stop(struct watchdog
 		return err;
 	}
 
-	if (test_bit(WDOG_ACTIVE, &wddev->status)) {
+	if (watchdog_active(wddev)) {
 		err = wddev->ops->stop(wddev);
 		if (err < 0)
 			return err;
Index: linux-3.0-SLE11-SP3/include/linux/watchdog.h
===================================================================
--- linux-3.0-SLE11-SP3.orig/include/linux/watchdog.h
+++ linux-3.0-SLE11-SP3/include/linux/watchdog.h
@@ -128,6 +128,12 @@ struct watchdog_device {
 #define WATCHDOG_NOWAYOUT_INIT_STATUS	0
 #endif
 
+/* Use the following function to check wether or not the watchdog is active */
+static inline bool watchdog_active(struct watchdog_device *wdd)
+{
+	return test_bit(WDOG_ACTIVE, &wdd->status);
+}
+
 /* Use the following function to set the nowayout feature */
 static inline void watchdog_set_nowayout(struct watchdog_device *wdd, int nowayout)
 {
