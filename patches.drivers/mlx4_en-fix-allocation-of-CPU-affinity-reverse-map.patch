From: Kleber Sacilotto de Souza <klebers@linux.vnet.ibm.com>
Subject: mlx4_en: fix allocation of CPU affinity reverse-map
Patch-mainline: v3.9-rc1
Git-commit: 3770699675dd1b8fc1e86ff369eb3cce44e10082
References: bnc#810655, LTC#90417

The mlx4_en driver allocates the number of objects for the CPU affinity
reverse-map based on the number of rx rings of the device. However,
mlx4_assign_eq() calls irq_cpu_rmap_add() as many times as IRQ's are
assigned to EQ's, which can be as large as mlx4_dev->caps.comp_pool. If
caps.comp_pool is larger than rx_ring_num we will eventually hit the
BUG_ON() in cpu_rmap_add().

Fix this problem by allocating space for the maximum number of CPU
affinity reverse-map objects we might want to add.

Signed-off-by: Kleber Sacilotto de Souza <klebers@linux.vnet.ibm.com>
Acked-by: Amir Vadai <amirv@mellanox.com>
Signed-off-by: David S. Miller <davem@davemloft.net>
Acked-by: John Jolly <jjolly@suse.de>
---
 drivers/net/ethernet/mellanox/mlx4/en_netdev.c |    2 +-
 1 files changed, 1 insertions(+), 1 deletions(-)


diff -up linux-3.0-mlx4-1/drivers/net/ethernet/mellanox/mlx4/en_netdev.c linux-3.0-mlx4-2/drivers/net/ethernet/mellanox/mlx4/en_netdev.c
--- linux-3.0-mlx4-1/drivers/net/ethernet/mellanox/mlx4/en_netdev.c	2013-03-20 15:41:53.000000000 -0400
+++ linux-3.0-mlx4-2/drivers/net/ethernet/mellanox/mlx4/en_netdev.c	2013-03-20 15:43:03.000000000 -0400
@@ -1436,7 +1436,7 @@ int mlx4_en_alloc_resources(struct mlx4_
 	}
 
 #ifdef CONFIG_RFS_ACCEL
-	priv->dev->rx_cpu_rmap = alloc_irq_cpu_rmap(priv->rx_ring_num);
+	priv->dev->rx_cpu_rmap = alloc_irq_cpu_rmap(priv->mdev->dev->caps.comp_pool);
 	if (!priv->dev->rx_cpu_rmap)
 		goto err;
 
