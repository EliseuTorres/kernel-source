From 620e2b28b7840f54da243ab3c771bcce5324bd80 Mon Sep 17 00:00:00 2001
From: Takashi Iwai <tiwai@suse.de>
Date: Fri, 17 Jun 2011 17:19:19 +0200
Subject: [PATCH] ALSA: hda - Unify input-volume creations in patch_via.c
Git-commit: 620e2b28b7840f54da243ab3c771bcce5324bd80
Patch-mainline: 3.1-rc2
References: FATE#314310

Now storing the analog-mixer widget in spec, we can simplify the rest
parts.

Signed-off-by: Takashi Iwai <tiwai@suse.de>

---
 sound/pci/hda/patch_via.c |  132 +++++++++++++---------------------------------
 1 file changed, 40 insertions(+), 92 deletions(-)

--- a/sound/pci/hda/patch_via.c
+++ b/sound/pci/hda/patch_via.c
@@ -131,6 +131,7 @@ struct via_spec {
 	unsigned int num_adc_nids;
 	hda_nid_t adc_nids[3];
 	hda_nid_t mux_nids[3];
+	hda_nid_t aa_mix_nid;
 	hda_nid_t dig_in_nid;
 	hda_nid_t dig_in_pin;
 
@@ -887,20 +888,17 @@ static void notify_aa_path_ctls(struct h
 static void mute_aa_path(struct hda_codec *codec, int mute)
 {
 	struct via_spec *spec = codec->spec;
-	hda_nid_t  nid_mixer;
 	int start_idx;
 	int end_idx;
 	int i;
 	/* get nid of MW0 and start & end index */
 	switch (spec->codec_type) {
 	case VT1708:
-		nid_mixer = 0x17;
 		start_idx = 2;
 		end_idx = 4;
 		break;
 	case VT1709_10CH:
 	case VT1709_6CH:
-		nid_mixer = 0x18;
 		start_idx = 2;
 		end_idx = 4;
 		break;
@@ -908,12 +906,10 @@ static void mute_aa_path(struct hda_code
 	case VT1708B_4CH:
 	case VT1708S:
 	case VT1716S:
-		nid_mixer = 0x16;
 		start_idx = 2;
 		end_idx = 4;
 		break;
 	case VT1718S:
-		nid_mixer = 0x21;
 		start_idx = 1;
 		end_idx = 3;
 		break;
@@ -923,7 +919,7 @@ static void mute_aa_path(struct hda_code
 	/* check AA path's mute status */
 	for (i = start_idx; i <= end_idx; i++) {
 		int val = mute ? HDA_AMP_MUTE : HDA_AMP_UNMUTE;
-		snd_hda_codec_amp_stereo(codec, nid_mixer, HDA_INPUT, i,
+		snd_hda_codec_amp_stereo(codec, spec->aa_mix_nid, HDA_INPUT, i,
 					 HDA_AMP_MUTE, val);
 	}
 }
@@ -1089,7 +1085,6 @@ static const struct snd_kcontrol_new vt1
 static int is_aa_path_mute(struct hda_codec *codec)
 {
 	int mute = 1;
-	hda_nid_t  nid_mixer;
 	int start_idx;
 	int end_idx;
 	int i;
@@ -1100,24 +1095,20 @@ static int is_aa_path_mute(struct hda_co
 	case VT1708B_4CH:
 	case VT1708S:
 	case VT1716S:
-		nid_mixer = 0x16;
 		start_idx = 2;
 		end_idx = 4;
 		break;
 	case VT1702:
-		nid_mixer = 0x1a;
 		start_idx = 1;
 		end_idx = 3;
 		break;
 	case VT1718S:
-		nid_mixer = 0x21;
 		start_idx = 1;
 		end_idx = 3;
 		break;
 	case VT2002P:
 	case VT1812:
 	case VT1802:
-		nid_mixer = 0x21;
 		start_idx = 0;
 		end_idx = 2;
 		break;
@@ -1127,15 +1118,15 @@ static int is_aa_path_mute(struct hda_co
 	/* check AA path's mute status */
 	for (i = start_idx; i <= end_idx; i++) {
 		unsigned int con_list = snd_hda_codec_read(
-			codec, nid_mixer, 0, AC_VERB_GET_CONNECT_LIST, i/4*4);
+			codec, spec->aa_mix_nid, 0, AC_VERB_GET_CONNECT_LIST, i/4*4);
 		int shift = 8 * (i % 4);
 		hda_nid_t nid_pin = (con_list & (0xff << shift)) >> shift;
 		unsigned int defconf = snd_hda_codec_get_pincfg(codec, nid_pin);
 		if (get_defcfg_connect(defconf) == AC_JACK_PORT_COMPLEX) {
 			/* check mute status while the pin is connected */
-			int mute_l = snd_hda_codec_amp_read(codec, nid_mixer, 0,
+			int mute_l = snd_hda_codec_amp_read(codec, spec->aa_mix_nid, 0,
 							    HDA_INPUT, i) >> 7;
-			int mute_r = snd_hda_codec_amp_read(codec, nid_mixer, 1,
+			int mute_r = snd_hda_codec_amp_read(codec, spec->aa_mix_nid, 1,
 							    HDA_INPUT, i) >> 7;
 			if (!mute_l || !mute_r) {
 				mute = 0;
@@ -2049,9 +2040,8 @@ static int via_fill_adcs(struct hda_code
 static int get_mux_nids(struct hda_codec *codec);
 
 /* create playback/capture controls for input pins */
-static int vt_auto_create_analog_input_ctls(struct hda_codec *codec,
-					    const struct auto_pin_cfg *cfg,
-					    hda_nid_t mix_nid)
+static int via_auto_create_analog_input_ctls(struct hda_codec *codec,
+					     const struct auto_pin_cfg *cfg)
 {
 	struct via_spec *spec = codec->spec;
 	struct hda_input_mux *imux = &spec->private_imux[0];
@@ -2075,7 +2065,7 @@ static int vt_auto_create_analog_input_c
 
 	/* for internal loopback recording select */
 	for (idx = 0; idx < num_idxs; idx++) {
-		if (pin_idxs[idx] == mix_nid) {
+		if (pin_idxs[idx] == spec->aa_mix_nid) {
 			snd_hda_add_imux_item(imux, "Stereo Mixer", idx, NULL);
 			break;
 		}
@@ -2094,10 +2084,11 @@ static int vt_auto_create_analog_input_c
 		else
 			type_idx = 0;
 		label = hda_get_autocfg_input_label(codec, cfg, i);
-		idx2 = get_connection_index(codec, mix_nid, pin_idxs[idx]);
+		idx2 = get_connection_index(codec, spec->aa_mix_nid,
+					    pin_idxs[idx]);
 		if (idx2 >= 0)
 			err = via_new_analog_input(spec, label, type_idx,
-						   idx2, mix_nid);
+						   idx2, spec->aa_mix_nid);
 		if (err < 0)
 			return err;
 		snd_hda_add_imux_item(imux, label, idx, NULL);
@@ -2105,13 +2096,6 @@ static int vt_auto_create_analog_input_c
 	return 0;
 }
 
-/* create playback/capture controls for input pins */
-static int vt1708_auto_create_analog_input_ctls(struct hda_codec *codec,
-						const struct auto_pin_cfg *cfg)
-{
-	return vt_auto_create_analog_input_ctls(codec, cfg, 0x17);
-}
-
 #ifdef CONFIG_SND_HDA_POWER_SAVE
 static const struct hda_amp_list vt1708_loopbacks[] = {
 	{ 0x17, HDA_INPUT, 1 },
@@ -2205,7 +2189,7 @@ static int vt1708_parse_auto_config(stru
 	err = vt1708_auto_create_hp_ctls(spec, spec->autocfg.hp_pins[0]);
 	if (err < 0)
 		return err;
-	err = vt1708_auto_create_analog_input_ctls(codec, &spec->autocfg);
+	err = via_auto_create_analog_input_ctls(codec, &spec->autocfg);
 	if (err < 0)
 		return err;
 	/* add jack detect on/off control */
@@ -2306,6 +2290,8 @@ static int patch_vt1708(struct hda_codec
 	if (spec == NULL)
 		return -ENOMEM;
 
+	spec->aa_mix_nid = 0x17;
+
 	/* automatic parse from the BIOS config */
 	err = vt1708_parse_auto_config(codec);
 	if (err < 0) {
@@ -2667,13 +2653,6 @@ static int vt1709_auto_create_hp_ctls(st
 	return 0;
 }
 
-/* create playback/capture controls for input pins */
-static int vt1709_auto_create_analog_input_ctls(struct hda_codec *codec,
-						const struct auto_pin_cfg *cfg)
-{
-	return vt_auto_create_analog_input_ctls(codec, cfg, 0x18);
-}
-
 static int vt1709_parse_auto_config(struct hda_codec *codec)
 {
 	struct via_spec *spec = codec->spec;
@@ -2694,7 +2673,7 @@ static int vt1709_parse_auto_config(stru
 	err = vt1709_auto_create_hp_ctls(spec, spec->autocfg.hp_pins[0]);
 	if (err < 0)
 		return err;
-	err = vt1709_auto_create_analog_input_ctls(codec, &spec->autocfg);
+	err = via_auto_create_analog_input_ctls(codec, &spec->autocfg);
 	if (err < 0)
 		return err;
 
@@ -2738,6 +2717,8 @@ static int patch_vt1709_10ch(struct hda_
 	if (spec == NULL)
 		return -ENOMEM;
 
+	spec->aa_mix_nid = 0x18;
+
 	err = vt1709_parse_auto_config(codec);
 	if (err < 0) {
 		via_free(codec);
@@ -2824,6 +2805,8 @@ static int patch_vt1709_6ch(struct hda_c
 	if (spec == NULL)
 		return -ENOMEM;
 
+	spec->aa_mix_nid = 0x18;
+
 	err = vt1709_parse_auto_config(codec);
 	if (err < 0) {
 		via_free(codec);
@@ -3185,13 +3168,6 @@ static int vt1708B_auto_create_hp_ctls(s
 	return 0;
 }
 
-/* create playback/capture controls for input pins */
-static int vt1708B_auto_create_analog_input_ctls(struct hda_codec *codec,
-						const struct auto_pin_cfg *cfg)
-{
-	return vt_auto_create_analog_input_ctls(codec, cfg, 0x16);
-}
-
 static int vt1708B_parse_auto_config(struct hda_codec *codec)
 {
 	struct via_spec *spec = codec->spec;
@@ -3212,7 +3188,7 @@ static int vt1708B_parse_auto_config(str
 	err = vt1708B_auto_create_hp_ctls(spec, spec->autocfg.hp_pins[0]);
 	if (err < 0)
 		return err;
-	err = vt1708B_auto_create_analog_input_ctls(codec, &spec->autocfg);
+	err = via_auto_create_analog_input_ctls(codec, &spec->autocfg);
 	if (err < 0)
 		return err;
 
@@ -3339,6 +3315,8 @@ static int patch_vt1708B_8ch(struct hda_
 	if (spec == NULL)
 		return -ENOMEM;
 
+	spec->aa_mix_nid = 0x16;
+
 	/* automatic parse from the BIOS config */
 	err = vt1708B_parse_auto_config(codec);
 	if (err < 0) {
@@ -3737,13 +3715,6 @@ static int vt1708S_auto_create_hp_ctls(s
 	return 0;
 }
 
-/* create playback/capture controls for input pins */
-static int vt1708S_auto_create_analog_input_ctls(struct hda_codec *codec,
-						const struct auto_pin_cfg *cfg)
-{
-	return vt_auto_create_analog_input_ctls(codec, cfg, 0x16);
-}
-
 /* fill out digital output widgets; one for master and one for slave outputs */
 static void fill_dig_outs(struct hda_codec *codec)
 {
@@ -3789,7 +3760,7 @@ static int vt1708S_parse_auto_config(str
 	err = vt1708S_auto_create_hp_ctls(spec, spec->autocfg.hp_pins[0]);
 	if (err < 0)
 		return err;
-	err = vt1708S_auto_create_analog_input_ctls(codec, &spec->autocfg);
+	err = via_auto_create_analog_input_ctls(codec, &spec->autocfg);
 	if (err < 0)
 		return err;
 
@@ -3839,6 +3810,8 @@ static int patch_vt1708S(struct hda_code
 	if (spec == NULL)
 		return -ENOMEM;
 
+	spec->aa_mix_nid = 0x16;
+
 	/* automatic parse from the BIOS config */
 	err = vt1708S_parse_auto_config(codec);
 	if (err < 0) {
@@ -4090,13 +4063,6 @@ static int vt1702_auto_create_hp_ctls(st
 	return 0;
 }
 
-/* create playback/capture controls for input pins */
-static int vt1702_auto_create_analog_input_ctls(struct hda_codec *codec,
-						const struct auto_pin_cfg *cfg)
-{
-	return vt_auto_create_analog_input_ctls(codec, cfg, 0x1a);
-}
-
 static int vt1702_parse_auto_config(struct hda_codec *codec)
 {
 	struct via_spec *spec = codec->spec;
@@ -4123,7 +4089,7 @@ static int vt1702_parse_auto_config(stru
 				  (0x17 << AC_AMPCAP_NUM_STEPS_SHIFT) |
 				  (0x5 << AC_AMPCAP_STEP_SIZE_SHIFT) |
 				  (1 << AC_AMPCAP_MUTE_SHIFT));
-	err = vt1702_auto_create_analog_input_ctls(codec, &spec->autocfg);
+	err = via_auto_create_analog_input_ctls(codec, &spec->autocfg);
 	if (err < 0)
 		return err;
 
@@ -4193,6 +4159,8 @@ static int patch_vt1702(struct hda_codec
 	if (spec == NULL)
 		return -ENOMEM;
 
+	spec->aa_mix_nid = 0x1a;
+
 	/* automatic parse from the BIOS config */
 	err = vt1702_parse_auto_config(codec);
 	if (err < 0) {
@@ -4511,13 +4479,6 @@ static int vt1718S_auto_create_hp_ctls(s
 	return 0;
 }
 
-/* create playback/capture controls for input pins */
-static int vt1718S_auto_create_analog_input_ctls(struct hda_codec *codec,
-						const struct auto_pin_cfg *cfg)
-{
-	return vt_auto_create_analog_input_ctls(codec, cfg, 0x21);
-}
-
 static int vt1718S_parse_auto_config(struct hda_codec *codec)
 {
 	struct via_spec *spec = codec->spec;
@@ -4539,7 +4500,7 @@ static int vt1718S_parse_auto_config(str
 	err = vt1718S_auto_create_hp_ctls(spec, spec->autocfg.hp_pins[0]);
 	if (err < 0)
 		return err;
-	err = vt1718S_auto_create_analog_input_ctls(codec, &spec->autocfg);
+	err = via_auto_create_analog_input_ctls(codec, &spec->autocfg);
 	if (err < 0)
 		return err;
 
@@ -4649,6 +4610,8 @@ static int patch_vt1718S(struct hda_code
 	if (spec == NULL)
 		return -ENOMEM;
 
+	spec->aa_mix_nid = 0x21;
+
 	/* automatic parse from the BIOS config */
 	err = vt1718S_parse_auto_config(codec);
 	if (err < 0) {
@@ -5025,13 +4988,6 @@ static int vt1716S_auto_create_hp_ctls(s
 	return 0;
 }
 
-/* create playback/capture controls for input pins */
-static int vt1716S_auto_create_analog_input_ctls(struct hda_codec *codec,
-						const struct auto_pin_cfg *cfg)
-{
-	return vt_auto_create_analog_input_ctls(codec, cfg, 0x16);
-}
-
 static int vt1716S_parse_auto_config(struct hda_codec *codec)
 {
 	struct via_spec *spec = codec->spec;
@@ -5052,7 +5008,7 @@ static int vt1716S_parse_auto_config(str
 	err = vt1716S_auto_create_hp_ctls(spec, spec->autocfg.hp_pins[0]);
 	if (err < 0)
 		return err;
-	err = vt1716S_auto_create_analog_input_ctls(codec, &spec->autocfg);
+	err = via_auto_create_analog_input_ctls(codec, &spec->autocfg);
 	if (err < 0)
 		return err;
 
@@ -5186,6 +5142,8 @@ static int patch_vt1716S(struct hda_code
 	if (spec == NULL)
 		return -ENOMEM;
 
+	spec->aa_mix_nid = 0x16;
+
 	/* automatic parse from the BIOS config */
 	err = vt1716S_parse_auto_config(codec);
 	if (err < 0) {
@@ -5491,13 +5449,6 @@ static int vt2002P_auto_create_hp_ctls(s
 	return 0;
 }
 
-/* create playback/capture controls for input pins */
-static int vt2002P_auto_create_analog_input_ctls(struct hda_codec *codec,
-						const struct auto_pin_cfg *cfg)
-{
-	return vt_auto_create_analog_input_ctls(codec, cfg, 0x21);
-}
-
 static int vt2002P_parse_auto_config(struct hda_codec *codec)
 {
 	struct via_spec *spec = codec->spec;
@@ -5521,7 +5472,7 @@ static int vt2002P_parse_auto_config(str
 	err = vt2002P_auto_create_hp_ctls(spec, spec->autocfg.hp_pins[0]);
 	if (err < 0)
 		return err;
-	err = vt2002P_auto_create_analog_input_ctls(codec, &spec->autocfg);
+	err = via_auto_create_analog_input_ctls(codec, &spec->autocfg);
 	if (err < 0)
 		return err;
 
@@ -5671,6 +5622,8 @@ static int patch_vt2002P(struct hda_code
 	if (spec == NULL)
 		return -ENOMEM;
 
+	spec->aa_mix_nid = 0x21;
+
 	/* automatic parse from the BIOS config */
 	err = vt2002P_parse_auto_config(codec);
 	if (err < 0) {
@@ -5912,13 +5865,6 @@ static int vt1812_auto_create_hp_ctls(st
 	return 0;
 }
 
-/* create playback/capture controls for input pins */
-static int vt1812_auto_create_analog_input_ctls(struct hda_codec *codec,
-						const struct auto_pin_cfg *cfg)
-{
-	return vt_auto_create_analog_input_ctls(codec, cfg, 0x21);
-}
-
 static int vt1812_parse_auto_config(struct hda_codec *codec)
 {
 	struct via_spec *spec = codec->spec;
@@ -5942,7 +5888,7 @@ static int vt1812_parse_auto_config(stru
 	err = vt1812_auto_create_hp_ctls(spec, spec->autocfg.hp_pins[0]);
 	if (err < 0)
 		return err;
-	err = vt1812_auto_create_analog_input_ctls(codec, &spec->autocfg);
+	err = via_auto_create_analog_input_ctls(codec, &spec->autocfg);
 	if (err < 0)
 		return err;
 
@@ -6073,6 +6019,8 @@ static int patch_vt1812(struct hda_codec
 	if (spec == NULL)
 		return -ENOMEM;
 
+	spec->aa_mix_nid = 0x21;
+
 	/* automatic parse from the BIOS config */
 	err = vt1812_parse_auto_config(codec);
 	if (err < 0) {
