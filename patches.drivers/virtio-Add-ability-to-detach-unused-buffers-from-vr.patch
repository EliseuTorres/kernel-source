From: Shirley Ma <mashirle@us.ibm.com>
Subject: [PATCH] virtio: Add ability to detach unused buffers from vrings
Patch-mainline: 2.6.34
References: FATE#311632
Git-commit: f9bfbebf34eab707b065116cdc9699d25ba4252a

(Backport provided by IBM)

There's currently no way for a virtio driver to ask for unused
buffers, so it has to keep a list itself to reclaim them at shutdown.
This is redundant, since virtio_ring stores that information.  So
add a new hook to do this.

Signed-off-by: Shirley Ma <xma@us.ibm.com>
Signed-off-by: Amit Shah <amit.shah@redhat.com>
Signed-off-by: Rusty Russell <rusty@rustcorp.com.au>
Signed-off-by: David So. Miller <davem@davemloft.net>
Acked-by: Bruce Rogers <brogers@suse.com>
---
 drivers/virtio/virtio_ring.c |   25 +++++++++++++++++++++++++
 include/linux/virtio.h       |    4 ++++
 2 files changed, 29 insertions(+), 0 deletions(-)

Index: linux-2.6.32-SLE11-SP2/drivers/virtio/virtio_ring.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/drivers/virtio/virtio_ring.c
+++ linux-2.6.32-SLE11-SP2/drivers/virtio/virtio_ring.c
@@ -334,6 +334,31 @@ static bool vring_enable_cb(struct virtq
 	return true;
 }
 
+void *vring_detach_unused_buf(struct virtqueue *_vq)
+{
+	struct vring_virtqueue *vq = to_vvq(_vq);
+	unsigned int i;
+	void *buf;
+
+	START_USE(vq);
+
+	for (i = 0; i < vq->vring.num; i++) {
+		if (!vq->data[i])
+			continue;
+		/* detach_buf clears data, so grab it now. */
+		buf = vq->data[i];
+		detach_buf(vq, i);
+		vq->vring.avail->idx--;
+		END_USE(vq);
+		return buf;
+	}
+	/* That should have freed everything. */
+	BUG_ON(vq->num_free != vq->vring.num);
+
+	END_USE(vq);
+	return NULL;
+}
+
 irqreturn_t vring_interrupt(int irq, void *_vq)
 {
 	struct vring_virtqueue *vq = to_vvq(_vq);
Index: linux-2.6.32-SLE11-SP2/include/linux/virtio.h
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/include/linux/virtio.h
+++ linux-2.6.32-SLE11-SP2/include/linux/virtio.h
@@ -51,6 +51,9 @@ struct virtqueue {
  *	This re-enables callbacks; it returns "false" if there are pending
  *	buffers in the queue, to detect a possible race between the driver
  *	checking for more work, and enabling callbacks.
+ * @detach_unused_buf: detach first unused buffer
+ * 	vq: the struct virtqueue we're talking about.
+ *	Returns NULL or the "data" token handed to add_buf
  *
  * Locking rules are straightforward: the driver is responsible for
  * locking.  No two operations may be invoked simultaneously, with the exception
@@ -71,6 +74,7 @@ struct virtqueue_ops {
 
 	void (*disable_cb)(struct virtqueue *vq);
 	bool (*enable_cb)(struct virtqueue *vq);
+	void *(*detach_unused_buf)(struct virtqueue *vq);
 };
 
 /**
