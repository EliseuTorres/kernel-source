From: Eric Moore <eric.moore@lsi.com>
Subject: mpt2sas: array overrun when loading driver
References: bnc#608478
Patch-Mainline: Not yet

There will be an array overrun (memory corruption with possible oops) when
loading the mpt2sas driver if there is a direct attached SEP device.

The reason for the memory overrun is the driver calculates the number of phys
on the sas host from a configuration page called "SAS IOUNIT PAGE 0".  Please
look at mpt2sas_config_get_number_hba_phys.   This configuration page doesn't
take into account for direct attached SEP devices.  The direct attached SEP
devices are reported in manufacturing page 8.

From _scsih_sas_topology_change_event, we recieve firmware event to report
topology changes.  There is event data for each device being added or removed,
or phy status changes.  When we receive an event for the phy larger than the
expected phy count, this causes the memory corruption.  From this routine, we
call mpt2sas_transport_update_links, which will update the negotiation speed
for the respective phy.  The overrun occurs when accessing the mpt2sas_phy
object for the direct attached SEP device.  The driver only allocated memory
for X phys, and the direct attached SEP is on phy X+1.

The fix is in  _scsih_sas_topology_change_event. What we will do is skip
processing the event_data if the phy number is larger than the expected max
phy.

Signed-off-by: Eric Moore <eric.moore@lsi.com>
Acked-by: Hannes Reinecke <hare@suse.de>

diff -uparN a/drivers/scsi/mpt2sas/mpt2sas_base.h b/drivers/scsi/mpt2sas/mpt2sas_base.h
--- a/drivers/scsi/mpt2sas/mpt2sas_base.h	2010-05-24 15:05:19.000000000 -0600
+++ b/drivers/scsi/mpt2sas/mpt2sas_base.h	2010-05-24 15:14:33.000000000 -0600
@@ -69,11 +69,11 @@
 #define MPT2SAS_DRIVER_NAME		"mpt2sas"
 #define MPT2SAS_AUTHOR	"LSI Corporation <DL-MPTFusionLinux@lsi.com>"
 #define MPT2SAS_DESCRIPTION	"LSI MPT Fusion SAS 2.0 Device Driver"
-#define MPT2SAS_DRIVER_VERSION		"04.100.01.03"
+#define MPT2SAS_DRIVER_VERSION		"04.100.01.04"
 #define MPT2SAS_MAJOR_VERSION		04
 #define MPT2SAS_MINOR_VERSION		100
 #define MPT2SAS_BUILD_VERSION		01
-#define MPT2SAS_RELEASE_VERSION		03
+#define MPT2SAS_RELEASE_VERSION		04
 
 /*
  * Set MPT2SAS_SG_DEPTH value based on user input.
diff -uparN a/drivers/scsi/mpt2sas/mpt2sas_scsih.c b/drivers/scsi/mpt2sas/mpt2sas_scsih.c
--- a/drivers/scsi/mpt2sas/mpt2sas_scsih.c	2010-05-24 15:05:19.000000000 -0600
+++ b/drivers/scsi/mpt2sas/mpt2sas_scsih.c	2010-05-24 15:17:02.000000000 -0600
@@ -4239,7 +4239,7 @@ _scsih_sas_topology_change_event(struct 
 	int i;
 	u16 parent_handle, handle;
 	u16 reason_code;
-	u8 phy_number;
+	u8 phy_number, max_phys;
 	struct _sas_node *sas_expander;
 	struct _sas_device *sas_device;
 	u64 sas_address;
@@ -4277,11 +4277,13 @@ _scsih_sas_topology_change_event(struct 
 	sas_expander = mpt2sas_scsih_expander_find_by_handle(ioc,
 	    parent_handle);
 	spin_unlock_irqrestore(&ioc->sas_node_lock, flags);
-	if (sas_expander)
+	if (sas_expander) {
 		sas_address = sas_expander->sas_address;
-	else if (parent_handle < ioc->sas_hba.num_phys)
+		max_phys = sas_expander->num_phys;
+	} else if (parent_handle < ioc->sas_hba.num_phys) {
 		sas_address = ioc->sas_hba.sas_address;
-	else
+		max_phys = ioc->sas_hba.num_phys;
+	} else
 		return;
 
 	/* handle siblings events */
@@ -4294,6 +4296,8 @@ _scsih_sas_topology_change_event(struct 
 		if (ioc->shost_recovery)
 			return;
 		phy_number = event_data->StartPhyNum + i;
+		if (phy_number >= max_phys)
+			continue;
 		reason_code = event_data->PHY[i].PhyStatus &
 		    MPI2_EVENT_SAS_TOPO_RC_MASK;
 		if ((event_data->PHY[i].PhyStatus &
