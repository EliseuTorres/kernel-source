From: Ravi Anand <ravi.anand@qlogic.com>
Subject: Additional bug fixes required for the qla4xxx driver
References: bnc#585296
Patch-Mainline: submitted to linux-scsi

Here's the change list of the fixes that were rolled in as part of this patch :

Vikas Chaudhary (6):
      qla4xxx: set driver ddb state correctly in process_ddb_changed
      qla4xxx: block io from mid-layer while recover adapter
      qla4xxx: correct return status in function qla4xxx_fw_ready
      qla4xxx: unblock iscsi session after setting ddb state online.
      qla4xxx: update debug statement
      qla4xxx: v5.01.00.00.11.01-k13

Signed-off-by: Vikas Chaudhary <vikas.chaudhary@qlogic.com>
Acked-by: Hannes Reinecke <hare@suse.de>

diff --git a/drivers/scsi/qla4xxx/ql4_init.c b/drivers/scsi/qla4xxx/ql4_init.c
index 9b09f0a..17994d4 100644
--- a/drivers/scsi/qla4xxx/ql4_init.c
+++ b/drivers/scsi/qla4xxx/ql4_init.c
@@ -392,6 +392,7 @@ static int qla4xxx_fw_ready(struct scsi_qla_host *ha)
 		DEBUG2(printk("scsi%ld: %s: FW initialized, but "
 			      "auto-discovery still in process\n",
 			       ha->host_no, __func__));
+		ready = 1;
 	}
 
 	return ready;
@@ -963,8 +964,13 @@ int qla4xxx_reinitialize_ddb_list(struct scsi_qla_host *ha)
 			DEBUG2(printk ("scsi%ld: %s: ddb index [%d] marked "
 				       "ONLINE\n", ha->host_no, __func__,
 				       ddb_entry->fw_ddb_index));
-		} else if (atomic_read(&ddb_entry->state) == DDB_STATE_ONLINE)
+			iscsi_unblock_session(ddb_entry->sess);
+		} else if (atomic_read(&ddb_entry->state) == DDB_STATE_ONLINE) {
+			DEBUG2(printk("scsi:%ld: %s: Firmware ddb state is not "
+					"active marking device missing\n",
+					ha->host_no, __func__));
 			qla4xxx_mark_device_missing(ha, ddb_entry);
+		}
 	}
 	return status;
 }
@@ -1310,6 +1316,7 @@ int qla4xxx_initialize_adapter(struct scsi_qla_host *ha,
 	int status = QLA_ERROR;
 	int8_t ip_address[IP_ADDR_LEN] = {0} ;
 
+	DEBUG2(dev_info(&ha->pdev->dev, "%s: adapter OFFLINE\n", __func__));
 	clear_bit(AF_ONLINE, &ha->flags);
 	ha->eeprom_cmd_data = 0;
 
@@ -1374,6 +1381,8 @@ int qla4xxx_initialize_adapter(struct scsi_qla_host *ha,
 exit_init_online:
 	set_bit(AF_ONLINE, &ha->flags);
 exit_init_hba:
+	DEBUG2(printk("scsi%ld: initialize adapter: %s\n", ha->host_no,
+			status == QLA_ERROR ? "FAILED" : "SUCCEDED"));
 	return status;
 }
 
@@ -1465,8 +1474,11 @@ int qla4xxx_process_ddb_changed(struct scsi_qla_host *ha, uint32_t fw_ddb_index,
 		      "index [%d]\n", ha->host_no, __func__,
 		      ddb_entry->fw_ddb_device_state, state, fw_ddb_index));
 	if (old_fw_ddb_device_state == state &&
-	    state == DDB_DS_SESSION_ACTIVE) {
-		/* Do nothing, state not changed. */
+			state == DDB_DS_SESSION_ACTIVE) {
+		if (atomic_read(&ddb_entry->state) != DDB_STATE_ONLINE) {
+			atomic_set(&ddb_entry->state, DDB_STATE_ONLINE);
+			iscsi_unblock_session(ddb_entry->sess);
+		}
 		return QLA_SUCCESS;
 	}
 
diff --git a/drivers/scsi/qla4xxx/ql4_isr.c b/drivers/scsi/qla4xxx/ql4_isr.c
index 5ae3659..2a79290 100644
--- a/drivers/scsi/qla4xxx/ql4_isr.c
+++ b/drivers/scsi/qla4xxx/ql4_isr.c
@@ -294,6 +294,10 @@ static void qla4xxx_status_entry(struct scsi_qla_host *ha,
 
 	case SCS_DEVICE_LOGGED_OUT:
 	case SCS_DEVICE_UNAVAILABLE:
+		DEBUG2(printk(KERN_INFO "scsi%ld:%d:%d:%d: SCS_DEVICE "
+			      "state: 0x%x\n", ha->host_no,
+			      cmd->device->channel, cmd->device->id,
+			      cmd->device->lun, sts_entry->completionStatus));
 		/*
 		 * Mark device missing so that we won't continue to
 		 * send I/O to this device.  We should get a ddb
@@ -762,6 +766,7 @@ irqreturn_t qla4xxx_intr_handler(int irq, void *dev_id)
 
 			break;
 		} else if (intr_status & CSR_SCSI_RESET_INTR) {
+			scsi_block_requests(ha->host);
 			clear_bit(AF_ONLINE, &ha->flags);
 			__qla4xxx_disable_intrs(ha);
 
diff --git a/drivers/scsi/qla4xxx/ql4_mbx.c b/drivers/scsi/qla4xxx/ql4_mbx.c
index 0b7554f..dfccddb 100644
--- a/drivers/scsi/qla4xxx/ql4_mbx.c
+++ b/drivers/scsi/qla4xxx/ql4_mbx.c
@@ -340,7 +340,7 @@ qla4xxx_update_local_ifcb(struct scsi_qla_host *ha,
 		return (QLA_ERROR);
 	}
 
-	DEBUG2(qla4xxx_dump_buffer(init_fw_cb, sizeof(struct addr_ctrl_blk)));
+	DEBUG3(qla4xxx_dump_buffer(init_fw_cb, sizeof(struct addr_ctrl_blk)));
 
 	/* Save some info in adapter structure. */
 	ha->acb_version = init_fw_cb->acb_version;
diff --git a/drivers/scsi/qla4xxx/ql4_os.c b/drivers/scsi/qla4xxx/ql4_os.c
index 4d72a88..f7202f9 100644
--- a/drivers/scsi/qla4xxx/ql4_os.c
+++ b/drivers/scsi/qla4xxx/ql4_os.c
@@ -380,9 +380,8 @@ void qla4xxx_mark_device_missing(struct scsi_qla_host *ha,
 				 struct ddb_entry *ddb_entry)
 {
 	atomic_set(&ddb_entry->state, DDB_STATE_MISSING);
-	DEBUG3(printk("scsi%d:%d:%d: index [%d] marked MISSING\n",
-		      ha->host_no, ddb_entry->bus, ddb_entry->target,
-		      ddb_entry->fw_ddb_index));
+	DEBUG2(printk("scsi%ld: index [%d] marked MISSING\n",
+		      ha->host_no, ddb_entry->fw_ddb_index));
 	iscsi_block_session(ddb_entry->sess);
 	iscsi_conn_error_event(ddb_entry->conn, ISCSI_ERR_CONN_FAILED);
 }
@@ -983,10 +982,9 @@ static int qla4xxx_recover_adapter(struct scsi_qla_host *ha,
 	int status;
 
 	/* Stall incoming I/O until we are done */
+	scsi_block_requests(ha->host);
 	clear_bit(AF_ONLINE, &ha->flags);
-
-	DEBUG2(printk("scsi%ld: %s calling qla4xxx_cmd_wait\n", ha->host_no,
-		      __func__));
+	DEBUG2(dev_info(&ha->pdev->dev, "%s: adapter OFFLINE\n", __func__));
 
 	/* Wait for outstanding commands to complete.
 	 * Stalls the driver for max 30 secs
@@ -1016,9 +1014,6 @@ static int qla4xxx_recover_adapter(struct scsi_qla_host *ha,
 	/* Re-initialize firmware. If successful, function returns
 	 * with ISP interrupts enabled */
 	if (status == QLA_SUCCESS) {
-		DEBUG2(printk("scsi%ld: %s - Initializing adapter..\n",
-			      ha->host_no, __func__));
-
 		/* If successful, AF_ONLINE flag set in
 		 * qla4xxx_initialize_adapter */
 		status = qla4xxx_initialize_adapter(ha, renew_ddb_list);
@@ -1070,10 +1065,13 @@ static int qla4xxx_recover_adapter(struct scsi_qla_host *ha,
 
 	ha->adapter_error_count++;
 
-	if (status == QLA_SUCCESS)
+	if (status == QLA_SUCCESS) {
 		qla4xxx_enable_intrs(ha);
+		scsi_unblock_requests(ha->host);
+	}
 
-	DEBUG2(printk("scsi%ld: recover adapter .. DONE\n", ha->host_no));
+	DEBUG2(printk("scsi%ld: recover adapter: %s\n", ha->host_no,
+			status == QLA_ERROR ? "FAILED" : "SUCCEDED"));
 	return status;
 }
 
@@ -1261,8 +1259,10 @@ static void qla4xxx_do_dpc(struct work_struct *work)
 						PRESERVE_DDB_LIST);
 			}
 			clear_bit(DPC_RESET_HA_INTR, &ha->dpc_flags);
-			if (status == QLA_SUCCESS)
+			if (status == QLA_SUCCESS) {
 				qla4xxx_enable_intrs(ha);
+				scsi_unblock_requests(ha->host);
+			}
 		}
 	}
 
diff --git a/drivers/scsi/qla4xxx/ql4_version.h b/drivers/scsi/qla4xxx/ql4_version.h
index cdef579..263daab 100644
--- a/drivers/scsi/qla4xxx/ql4_version.h
+++ b/drivers/scsi/qla4xxx/ql4_version.h
@@ -5,5 +5,5 @@
  * See LICENSE.qla4xxx for copyright and licensing details.
  */
 
-#define QLA4XXX_DRIVER_VERSION	"5.01.00.00.11.01-k12"
+#define QLA4XXX_DRIVER_VERSION	"5.01.00.00.11.01-k13"
 
