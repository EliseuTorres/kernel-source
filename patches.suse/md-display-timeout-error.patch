From: Hannes Reinecke <hare@suse.com>
Date: Thu, 12 Jul 2012 08:36:52 +0200
Subject: md: display timeout errors in /etc/mdstat etc
Patch-mainline: no
References: bnc#763402

Track whether a device failed due to a timeout or some other reason.
If due to a timeout, set a flag so that it can be reported.

Acked-by: NeilBrown <neilb@suse.de>
Signed-off-by: Neil Brown <neilb@suse.de>

---
 drivers/md/md.c                |   44 ++++++++++++++++++++++++++++++++---------
 drivers/md/md.h                |    3 ++
 drivers/md/raid10.c            |   34 +++++++++++++++++++++++++++----
 drivers/md/raid10.h            |    1 
 include/uapi/linux/raid/md_p.h |    1 
 5 files changed, 69 insertions(+), 14 deletions(-)

--- linux-3.12-SLE12.orig/drivers/md/md.c
+++ linux-3.12-SLE12/drivers/md/md.c
@@ -767,8 +767,10 @@ static void super_written(struct bio *bi
 		       error, test_bit(BIO_UPTODATE, &bio->bi_flags));
 		WARN_ON(test_bit(BIO_UPTODATE, &bio->bi_flags));
 		md_error(mddev, rdev);
-		if (!test_bit(Faulty, &rdev->flags)
-		    && (bio->bi_rw & REQ_FAILFAST_DEV)) {
+		if (test_bit(Faulty, &rdev->flags)) {
+			if (error == -ETIMEDOUT)
+				set_bit(Timeout, &rdev->flags);
+		} else if (bio->bi_rw & REQ_FAILFAST_DEV) {
 			set_bit(MD_NEED_REWRITE, &mddev->flags);
 			set_bit(LastDev, &rdev->flags);
 		}
@@ -1137,6 +1139,7 @@ static int super_90_validate(struct mdde
 
 	rdev->raid_disk = -1;
 	clear_bit(Faulty, &rdev->flags);
+	clear_bit(Timeout, &rdev->flags);
 	clear_bit(In_sync, &rdev->flags);
 	clear_bit(WriteMostly, &rdev->flags);
 
@@ -1628,6 +1631,7 @@ static int super_1_validate(struct mddev
 
 	rdev->raid_disk = -1;
 	clear_bit(Faulty, &rdev->flags);
+	clear_bit(Timeout, &rdev->flags);
 	clear_bit(In_sync, &rdev->flags);
 	clear_bit(WriteMostly, &rdev->flags);
 
@@ -1702,7 +1706,7 @@ static int super_1_validate(struct mddev
 		++ev1;
 		if (rdev->desc_nr >= 0 &&
 		    rdev->desc_nr < le32_to_cpu(sb->max_dev) &&
-		    le16_to_cpu(sb->dev_roles[rdev->desc_nr]) < 0xfffe)
+		    le16_to_cpu(sb->dev_roles[rdev->desc_nr]) < 0xfffd)
 			if (ev1 < mddev->events)
 				return -EINVAL;
 	} else if (mddev->bitmap) {
@@ -1730,6 +1734,10 @@ static int super_1_validate(struct mddev
 		case 0xfffe: /* faulty */
 			set_bit(Faulty, &rdev->flags);
 			break;
+		case 0xfffd: /* faulty, timeout */
+			set_bit(Faulty, &rdev->flags);
+			set_bit(Timeout, &rdev->flags);
+			break;
 		default:
 			if ((le32_to_cpu(sb->feature_map) &
 			     MD_FEATURE_RECOVERY_OFFSET))
@@ -1880,9 +1888,12 @@ retry:
 	
 	rdev_for_each(rdev2, mddev) {
 		i = rdev2->desc_nr;
-		if (test_bit(Faulty, &rdev2->flags))
-			sb->dev_roles[i] = cpu_to_le16(0xfffe);
-		else if (test_bit(In_sync, &rdev2->flags))
+		if (test_bit(Faulty, &rdev2->flags)) {
+			if (test_bit(Timeout, &rdev2->flags))
+				sb->dev_roles[i] = cpu_to_le16(0xfffd);
+			else
+				sb->dev_roles[i] = cpu_to_le16(0xfffe);
+		} else if (test_bit(In_sync, &rdev2->flags))
 			sb->dev_roles[i] = cpu_to_le16(rdev2->raid_disk);
 		else if (rdev2->raid_disk >= 0)
 			sb->dev_roles[i] = cpu_to_le16(rdev2->raid_disk);
@@ -2637,6 +2648,10 @@ state_show(struct md_rdev *rdev, char *p
 		len+= sprintf(page+len, "%sfaulty",sep);
 		sep = ",";
 	}
+	if (test_bit(Timeout, &rdev->flags)) {
+		len+= sprintf(page+len, "%stimeout",sep);
+		sep = ",";
+	}
 	if (test_bit(In_sync, &rdev->flags)) {
 		len += sprintf(page+len, "%sin_sync",sep);
 		sep = ",";
@@ -2698,6 +2713,11 @@ state_store(struct md_rdev *rdev, const
 			err = 0;
 		else
 			err = -EBUSY;
+	} else if (cmd_match(buf, "timeout") && rdev->mddev->pers) {
+		md_error(rdev->mddev, rdev);
+		if (test_bit(Faulty, &rdev->flags))
+			set_bit(Timeout, &rdev->flags);
+		err = 0;
 	} else if (cmd_match(buf, "remove")) {
 		if (rdev->raid_disk >= 0)
 			err = -EBUSY;
@@ -2891,6 +2911,7 @@ slot_store(struct md_rdev *rdev, const c
 		rdev->raid_disk = slot;
 		/* assume it is working */
 		clear_bit(Faulty, &rdev->flags);
+		clear_bit(Timeout, &rdev->flags);
 		clear_bit(WriteMostly, &rdev->flags);
 		set_bit(In_sync, &rdev->flags);
 		sysfs_notify_dirent_safe(rdev->sysfs_state);
@@ -5727,9 +5748,11 @@ static int get_disk_info(struct mddev *
 		info.minor = MINOR(rdev->bdev->bd_dev);
 		info.raid_disk = rdev->raid_disk;
 		info.state = 0;
-		if (test_bit(Faulty, &rdev->flags))
+		if (test_bit(Faulty, &rdev->flags)) {
 			info.state |= (1<<MD_DISK_FAULTY);
-		else if (test_bit(In_sync, &rdev->flags)) {
+			if (test_bit(Timeout, &rdev->flags))
+				info.state |= (1<<MD_DISK_TIMEOUT);
+		} else if (test_bit(In_sync, &rdev->flags)) {
 			info.state |= (1<<MD_DISK_ACTIVE);
 			info.state |= (1<<MD_DISK_SYNC);
 		}
@@ -7126,7 +7149,10 @@ static int md_seq_show(struct seq_file *
 			if (test_bit(WriteMostly, &rdev->flags))
 				seq_printf(seq, "(W)");
 			if (test_bit(Faulty, &rdev->flags)) {
-				seq_printf(seq, "(F)");
+				if (test_bit(Timeout, &rdev->flags))
+					seq_printf(seq, "(T)");
+				else
+					seq_printf(seq, "(F)");
 				continue;
 			}
 			if (rdev->raid_disk < 0)
--- linux-3.12-SLE12.orig/drivers/md/md.h
+++ linux-3.12-SLE12/drivers/md/md.h
@@ -177,6 +177,9 @@ enum flag_bits {
 				 * it didn't fail, so don't use FailFast
 				 * any more for metadata
 				 */
+	Timeout,		/* Device fault due to timeout.
+				 * 'Faulty' is required to be set.
+				 */
 };
 
 #define BB_LEN_MASK	(0x00000000000001FFULL)
--- linux-3.12-SLE12.orig/drivers/md/raid10.c
+++ linux-3.12-SLE12/drivers/md/raid10.c
@@ -370,6 +370,7 @@ static void raid10_end_read_request(stru
 	slot = r10_bio->read_slot;
 	dev = r10_bio->devs[slot].devnum;
 	rdev = r10_bio->devs[slot].rdev;
+	r10_bio->devs[slot].error = error;
 	/*
 	 * this branch is our 'one mirror IO has finished' event handler:
 	 */
@@ -459,6 +460,7 @@ static void raid10_end_write_request(str
 		repl = 0;
 		rdev = conf->mirrors[dev].rdev;
 	}
+	r10_bio->devs[slot].error = error;
 	/*
 	 * this branch is our 'one mirror IO has finished' event handler:
 	 */
@@ -484,6 +486,8 @@ static void raid10_end_write_request(str
 					 */
 					set_bit(R10BIO_WriteError, &r10_bio->state);
 				else {
+					if (error == -ETIMEDOUT)
+						set_bit(Timeout, &rdev->flags);
 					r10_bio->devs[slot].bio = NULL;
 					to_put = bio;
 					dec_rdev = 1;
@@ -2150,6 +2154,9 @@ static void sync_request_write(struct md
 		} else if (test_bit(FailFast, &rdev->flags)) {
 			/* Just give up on this device */
 			md_error(rdev->mddev, rdev);
+			if (test_bit(Faulty, &rdev->flags) &&
+			    r10_bio->devs[i].error == -ETIMEDOUT)
+				set_bit(Timeout, &rdev->flags);
 			continue;
 		}
 		/* Ok, we need to write this bio, either to correct an
@@ -2424,6 +2431,7 @@ static void fix_read_error(struct r10con
 	struct md_rdev*rdev;
 	int max_read_errors = atomic_read(&mddev->max_corr_read_errors);
 	int d = r10_bio->devs[r10_bio->read_slot].devnum;
+	int read_error = r10_bio->devs[r10_bio->read_slot].error;
 
 	/* still own a reference to this rdev, so it cannot
 	 * have been cleared recently.
@@ -2449,7 +2457,10 @@ static void fix_read_error(struct r10con
 		printk(KERN_NOTICE
 		       "md/raid10:%s: %s: Failing raid device\n",
 		       mdname(mddev), b);
-		md_error(mddev, conf->mirrors[d].rdev);
+		md_error(mddev, rdev);
+		if (test_bit(Faulty, &rdev->flags) &&
+		    read_error == -ETIMEDOUT)
+			set_bit(Timeout, &rdev->flags);
 		r10_bio->devs[r10_bio->read_slot].bio = IO_BLOCKED;
 		return;
 	}
@@ -2699,9 +2710,12 @@ static void handle_read_error(struct mdd
 		freeze_array(conf, 1);
 		fix_read_error(conf, mddev, r10_bio);
 		unfreeze_array(conf);
-	} else
+	} else {
 		md_error(mddev, rdev);
-
+		if (test_bit(Faulty, &rdev->flags) &&
+		    r10_bio->devs[slot].error == -ETIMEDOUT)
+			set_bit(Timeout, &rdev->flags);
+	}
 	rdev_dec_pending(rdev, mddev);
 
 read_more:
@@ -2799,8 +2813,12 @@ static void handle_write_completed(struc
 				if (!rdev_set_badblocks(
 					    rdev,
 					    r10_bio->devs[m].addr,
-					    r10_bio->sectors, 0))
+					    r10_bio->sectors, 0)) {
 					md_error(conf->mddev, rdev);
+					if (test_bit(Faulty, &rdev->flags) &&
+					    r10_bio->devs[m].error == -ETIMEDOUT)
+						set_bit(Timeout, &rdev->flags);
+				}
 			}
 			rdev = conf->mirrors[dev].replacement;
 			if (r10_bio->devs[m].repl_bio == NULL)
@@ -2815,8 +2833,12 @@ static void handle_write_completed(struc
 				if (!rdev_set_badblocks(
 					    rdev,
 					    r10_bio->devs[m].addr,
-					    r10_bio->sectors, 0))
+					    r10_bio->sectors, 0)) {
 					md_error(conf->mddev, rdev);
+					if (test_bit(Faulty, &rdev->flags) &&
+					    r10_bio->devs[m].error == -ETIMEDOUT)
+						set_bit(Timeout, &rdev->flags);
+				}
 			}
 		}
 		put_buf(r10_bio);
@@ -4728,6 +4750,8 @@ static void end_reshape_write(struct bio
 	if (!uptodate) {
 		/* FIXME should record badblock */
 		md_error(mddev, rdev);
+		if (test_bit(Faulty, &rdev->flags) && error == -ETIMEDOUT)
+			set_bit(Timeout, &rdev->flags);
 	}
 
 	rdev_dec_pending(rdev, mddev);
--- linux-3.12-SLE12.orig/drivers/md/raid10.h
+++ linux-3.12-SLE12/drivers/md/raid10.h
@@ -125,6 +125,7 @@ struct r10bio {
 		};
 		sector_t	addr;
 		int		devnum;
+		int		error;
 	} devs[0];
 };
 
--- linux-3.12-SLE12.orig/include/uapi/linux/raid/md_p.h
+++ linux-3.12-SLE12/include/uapi/linux/raid/md_p.h
@@ -86,6 +86,7 @@
 				    * devices available - and don't try to
 				    * correct read errors.
 				    */
+#define	MD_DISK_TIMEOUT		11 /* disk is faulty due to timeout */
 
 typedef struct mdp_device_descriptor_s {
 	__u32 number;		/* 0 Device number in the entire set	      */
