From: Erik Hugne <erik.hugne@ericsson.com>
Subject: [PATCH 3/3] tipc: move datapath message rejection to workqueue
References: bsc#907063
Patch-mainline: not yet
Acked-by: Jiri Bohac <jbohac@suse.cz>

TIPC message rejection logic needs to take the node spinlock
when delivering a rejected message to a link, but this is not
permitted after the introduction of the node receive queue lock
as the node lock must always be acquired before the rq lock.
To resolve this, we move the receive-path triggered message
rejection out to a workqueue.

Signed-off-by: Erik Hugne <erik.hugne@ericsson.com>
---
 net/tipc/port.c | 35 ++++++++++++++++++++++++++++++++---
 1 file changed, 32 insertions(+), 3 deletions(-)

diff --git a/net/tipc/port.c b/net/tipc/port.c
index 5ab1d7b..9242801 100644
--- a/net/tipc/port.c
+++ b/net/tipc/port.c
@@ -39,6 +39,7 @@
 #include "port.h"
 #include "name_table.h"
 #include "name_distr.h"
+#include <linux/ratelimit.h>
 
 /* Connection management: */
 #define PROBING_INTERVAL 3600000	/* [ms] => 1 h */
@@ -397,6 +398,35 @@ static struct sk_buff *port_build_proto_msg(struct tipc_port *p_ptr,
 	return buf;
 }
 
+struct reject_work {
+	struct work_struct ws;
+	struct sk_buff *buf;
+	u32 err;
+};
+
+static void do_reject(struct work_struct *ws)
+{
+	struct reject_work *w = container_of(ws, struct reject_work, ws);
+	tipc_reject_msg(w->buf, w->err);
+	kfree(w);
+}
+
+static int defer_reject(struct sk_buff *buf, u32 err)
+{
+	struct reject_work *w = kzalloc(sizeof(struct reject_work), GFP_ATOMIC);
+
+	if (!w) {
+		pr_err_ratelimited("Message reject failed\n");
+		kfree_skb(buf);
+		return -ENOMEM;
+	}
+	INIT_WORK(&w->ws, do_reject);
+	w->buf = buf;
+	w->err = err;
+	schedule_work(&w->ws);
+	return 0;
+}
+
 int tipc_reject_msg(struct sk_buff *buf, u32 err)
 {
 	struct tipc_msg *msg = buf_msg(buf);
@@ -853,7 +883,7 @@ err:
 		buf = next;
 		continue;
 reject:
-		tipc_reject_msg(buf, TIPC_ERR_NO_PORT);
+		defer_reject(buf, TIPC_ERR_NO_PORT);
 		buf = next;
 	}
 }
@@ -1185,8 +1215,7 @@ int tipc_port_recv_msg(struct sk_buff *buf)
 	} else {
 		err = TIPC_ERR_NO_PORT;
 	}
-
-	return tipc_reject_msg(buf, err);
+	return defer_reject(buf, err);
 }
 
 /*
-- 
2.1.3

