From: Michal Hocko <mhocko@suse.cz>
Subject: Do not export shmem internal data structures
Patch-mainline: no
References: bnc#731999 FATE#313009

struct shmem_inode_info and shmem_sb_info are internal shmem data
structures and they shouldn't be touched by any external code.
Let's move them from include/linux/shmem_fs.h to mm/shmem.c to make
this requirement obvious.
ipc/shm.c as the only user of SHMEM_I can be easily converted to
use a helper function which provides data it needs.

Signed-off-by: Michal Hocko <mhocko@suse.cz>

Index: linux-3.0-SLE11-SP2/include/linux/shmem_fs.h
===================================================================
--- linux-3.0-SLE11-SP2.orig/include/linux/shmem_fs.h
+++ linux-3.0-SLE11-SP2/include/linux/shmem_fs.h
@@ -6,46 +6,6 @@
 #include <linux/pagemap.h>
 #include <linux/percpu_counter.h>
 
-/* inode in-kernel data */
-
-#define SHMEM_NR_DIRECT 16
-
-#define SHMEM_SYMLINK_INLINE_LEN (SHMEM_NR_DIRECT * sizeof(swp_entry_t))
-
-struct shmem_inode_info {
-	spinlock_t		lock;
-	unsigned long		flags;
-	unsigned long		alloced;	/* data pages alloced to file */
-	unsigned long		swapped;	/* subtotal assigned to swap */
-	unsigned long		next_index;	/* highest alloced index + 1 */
-	struct shared_policy	policy;		/* NUMA memory alloc policy */
-	struct page		*i_indirect;	/* top indirect blocks page */
-	union {
-		swp_entry_t	i_direct[SHMEM_NR_DIRECT]; /* first blocks */
-		char		inline_symlink[SHMEM_SYMLINK_INLINE_LEN];
-	};
-	struct list_head	swaplist;	/* chain of maybes on swap */
-	struct list_head	xattr_list;	/* list of shmem_xattr */
-	struct inode		vfs_inode;
-};
-
-struct shmem_sb_info {
-	unsigned long max_blocks;   /* How many blocks are allowed */
-	struct percpu_counter used_blocks;  /* How many are allocated */
-	unsigned long max_inodes;   /* How many inodes are allowed */
-	unsigned long free_inodes;  /* How many are left for allocation */
-	spinlock_t stat_lock;	    /* Serialize shmem_sb_info changes */
-	uid_t uid;		    /* Mount uid for root directory */
-	gid_t gid;		    /* Mount gid for root directory */
-	mode_t mode;		    /* Mount mode for root directory */
-	struct mempolicy *mpol;     /* default memory policy for mappings */
-};
-
-static inline struct shmem_inode_info *SHMEM_I(struct inode *inode)
-{
-	return container_of(inode, struct shmem_inode_info, vfs_inode);
-}
-
 /*
  * Functions in mm/shmem.c called directly from elsewhere:
  */
@@ -69,4 +29,7 @@ static inline struct page *shmem_read_ma
 					mapping_gfp_mask(mapping));
 }
 
+extern void shmem_get_rss_swap(struct inode *inode, unsigned long *rss,
+		unsigned long *swap);
+
 #endif
Index: linux-3.0-SLE11-SP2/ipc/shm.c
===================================================================
--- linux-3.0-SLE11-SP2.orig/ipc/shm.c
+++ linux-3.0-SLE11-SP2/ipc/shm.c
@@ -565,11 +565,10 @@ static void shm_add_rss_swap(struct shmi
 		*rss_add += pages_per_huge_page(h) * mapping->nrpages;
 	} else {
 #ifdef CONFIG_SHMEM
-		struct shmem_inode_info *info = SHMEM_I(inode);
-		spin_lock(&info->lock);
-		*rss_add += inode->i_mapping->nrpages;
-		*swp_add += info->swapped;
-		spin_unlock(&info->lock);
+		unsigned long rss, swap;
+		shmem_get_rss_swap(inode, &rss, &swap);
+		*rss_add += rss;
+		*swp_add += swap;
 #else
 		*rss_add += inode->i_mapping->nrpages;
 #endif
Index: linux-3.0-SLE11-SP2/mm/shmem.c
===================================================================
--- linux-3.0-SLE11-SP2.orig/mm/shmem.c
+++ linux-3.0-SLE11-SP2/mm/shmem.c
@@ -66,6 +66,56 @@ static struct vfsmount *shm_mnt;
 #include <asm/div64.h>
 #include <asm/pgtable.h>
 
+/* inode in-kernel data */
+
+#define SHMEM_NR_DIRECT 16
+
+#define SHMEM_SYMLINK_INLINE_LEN (SHMEM_NR_DIRECT * sizeof(swp_entry_t))
+
+struct shmem_inode_info {
+	spinlock_t		lock;
+	unsigned long		flags;
+	unsigned long		alloced;	/* data pages alloced to file */
+	unsigned long		swapped;	/* subtotal assigned to swap */
+	unsigned long		next_index;	/* highest alloced index + 1 */
+	struct shared_policy	policy;		/* NUMA memory alloc policy */
+	struct page		*i_indirect;	/* top indirect blocks page */
+	union {
+		swp_entry_t	i_direct[SHMEM_NR_DIRECT]; /* first blocks */
+		char		inline_symlink[SHMEM_SYMLINK_INLINE_LEN];
+	};
+	struct list_head	swaplist;	/* chain of maybes on swap */
+	struct list_head	xattr_list;	/* list of shmem_xattr */
+	struct inode		vfs_inode;
+};
+
+struct shmem_sb_info {
+	unsigned long max_blocks;   /* How many blocks are allowed */
+	struct percpu_counter used_blocks;  /* How many are allocated */
+	unsigned long max_inodes;   /* How many inodes are allowed */
+	unsigned long free_inodes;  /* How many are left for allocation */
+	spinlock_t stat_lock;	    /* Serialize shmem_sb_info changes */
+	uid_t uid;		    /* Mount uid for root directory */
+	gid_t gid;		    /* Mount gid for root directory */
+	mode_t mode;		    /* Mount mode for root directory */
+	struct mempolicy *mpol;     /* default memory policy for mappings */
+};
+
+static inline struct shmem_inode_info *SHMEM_I(struct inode *inode)
+{
+	return container_of(inode, struct shmem_inode_info, vfs_inode);
+}
+
+void shmem_get_rss_swap(struct inode *inode, unsigned long *rss,
+		unsigned long *swap)
+{
+	struct shmem_inode_info *info = SHMEM_I(inode);
+	spin_lock(&info->lock);
+	*rss = inode->i_mapping->nrpages;
+	*swap = info->swapped;
+	spin_unlock(&info->lock);
+}
+
 /*
  * The maximum size of a shmem/tmpfs file is limited by the maximum size of
  * its triple-indirect swap vector - see illustration at shmem_swp_entry().
