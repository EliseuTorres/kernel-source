Git-commit: 2597119206405b9dbaee491e7c2389b7570b3227
From: Joe Thornber <ejt@redhat.com>
Date: Fri, 27 Jul 2012 15:08:09 +0100
Subject: [PATCH] dm thin metadata: wrap superblock locking
Patch-mainline: v3.6-rc1
Reference: FATE#313903

Introduce wrappers to handle write locking the superblock
appropriately.

Signed-off-by: Joe Thornber <ejt@redhat.com>
Signed-off-by: Mike Snitzer <snitzer@redhat.com>
Signed-off-by: Alasdair G Kergon <agk@redhat.com>
Acked-by: NeilBrown <nfbrown@suse.com>

---
 drivers/md/dm-thin-metadata.c |   41 ++++++++++++++++++++---------------------
 1 file changed, 20 insertions(+), 21 deletions(-)

--- linux-3.0-SLE11-SP3.orig/drivers/md/dm-thin-metadata.c
+++ linux-3.0-SLE11-SP3/drivers/md/dm-thin-metadata.c
@@ -343,6 +343,20 @@ static int subtree_equal(void *context,
 
 /*----------------------------------------------------------------*/
 
+static int superblock_lock_zero(struct dm_pool_metadata *pmd,
+				struct dm_block **sblock)
+{
+	return dm_bm_write_lock_zero(pmd->bm, THIN_SUPERBLOCK_LOCATION,
+				     &sb_validator, sblock);
+}
+
+static int superblock_lock(struct dm_pool_metadata *pmd,
+			   struct dm_block **sblock)
+{
+	return dm_bm_write_lock(pmd->bm, THIN_SUPERBLOCK_LOCATION,
+				&sb_validator, sblock);
+}
+
 static int superblock_all_zeroes(struct dm_block_manager *bm, int *result)
 {
 	int r;
@@ -430,22 +444,11 @@ static int init_pmd(struct dm_pool_metad
 			r = PTR_ERR(data_sm);
 			goto bad;
 		}
-
-		/*
-		 * We cycle the superblock to let the validator do its stuff.
-		 */
-		r = dm_bm_write_lock_zero(bm, THIN_SUPERBLOCK_LOCATION, &sb_validator, &sblock);
-		if (r < 0) {
-			DMERR("couldn't lock superblock");
-			goto bad;
-		}
-
-		dm_bm_unlock(sblock);
-
 	} else {
 		struct thin_disk_superblock *disk_super;
 
-		r = dm_bm_read_lock(bm, THIN_SUPERBLOCK_LOCATION, &sb_validator, &sblock);
+		r = dm_bm_read_lock(bm, THIN_SUPERBLOCK_LOCATION,
+				    &sb_validator, &sblock);
 		if (r < 0) {
 			DMERR("couldn't read superblock");
 			return r;
@@ -628,8 +631,7 @@ static int __commit_transaction(struct d
 	if (r < 0)
 		return r;
 
-	r = dm_bm_write_lock(pmd->bm, THIN_SUPERBLOCK_LOCATION,
-			     &sb_validator, &sblock);
+	r = superblock_lock(pmd, &sblock);
 	if (r)
 		return r;
 
@@ -709,8 +711,7 @@ struct dm_pool_metadata *dm_pool_metadat
 	/*
 	 * Create.
 	 */
-	r = dm_bm_write_lock(pmd->bm, THIN_SUPERBLOCK_LOCATION,
-			     &sb_validator, &sblock);
+	r = superblock_lock_zero(pmd, &sblock);
 	if (r)
 		goto bad;
 
@@ -1126,8 +1127,7 @@ static int __reserve_metadata_snap(struc
 	/*
 	 * Write the held root into the superblock.
 	 */
-	r = dm_bm_write_lock(pmd->bm, THIN_SUPERBLOCK_LOCATION,
-			     &sb_validator, &sblock);
+	r = superblock_lock(pmd, &sblock);
 	if (r) {
 		dm_tm_dec(pmd->tm, held_root);
 		return r;
@@ -1157,8 +1157,7 @@ static int __release_metadata_snap(struc
 	struct dm_block *sblock, *copy;
 	dm_block_t held_root;
 
-	r = dm_bm_write_lock(pmd->bm, THIN_SUPERBLOCK_LOCATION,
-			     &sb_validator, &sblock);
+	r = superblock_lock(pmd, &sblock);
 	if (r)
 		return r;
 
