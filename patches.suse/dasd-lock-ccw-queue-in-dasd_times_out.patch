From: Hannes Reinecke <hare@suse.de>
Date: Mon, 14 Jan 2013 14:18:36 +0100
Subject: dasd: lock ccw queue in dasd_times_out()
Patch-Mainline: n/a
References: FATE#311379

When we're checking or modifying the cqr we need to take
the ccw lock, as the cqr might be in-flight at this time.

Signed-off-by: Hannes Reinecke <hare@suse.de>
---
 drivers/s390/block/dasd.c |    8 +++++---
 1 files changed, 5 insertions(+), 3 deletions(-)

diff --git a/drivers/s390/block/dasd.c b/drivers/s390/block/dasd.c
index e38ae25..3e3821f 100644
--- a/drivers/s390/block/dasd.c
+++ b/drivers/s390/block/dasd.c
@@ -2303,12 +2303,13 @@ enum blk_eh_timer_return dasd_times_out(struct request *req)
 	spin_lock(get_ccwdev_lock(device->cdev));
 	cqr->retries = -1;
 	cqr->intrc = -ETIMEDOUT;
-	spin_unlock(get_ccwdev_lock(device->cdev));
 	if (cqr->status >= DASD_CQR_QUEUED) {
+		spin_unlock(get_ccwdev_lock(device->cdev));
 		rc = dasd_cancel_req(cqr);
 	} else if (cqr->status == DASD_CQR_FILLED ||
 		   cqr->status == DASD_CQR_NEED_ERP) {
 		cqr->status = DASD_CQR_TERMINATED;
+		spin_unlock(get_ccwdev_lock(device->cdev));
 	} else if (cqr->status == DASD_CQR_IN_ERP) {
 		struct dasd_ccw_req *searchcqr, *nextcqr, *tmpcqr;
 
@@ -2320,12 +2321,12 @@ enum blk_eh_timer_return dasd_times_out(struct request *req)
 			if (tmpcqr != cqr)
 				continue;
 			/* searchcqr is an ERP request for cqr */
-			spin_lock(get_ccwdev_lock(device->cdev));
 			searchcqr->retries = -1;
 			searchcqr->intrc = -ETIMEDOUT;
-			spin_unlock(get_ccwdev_lock(device->cdev));
 			if (searchcqr->status >= DASD_CQR_QUEUED) {
+				spin_unlock(get_ccwdev_lock(device->cdev));
 				rc = dasd_cancel_req(searchcqr);
+				spin_lock(get_ccwdev_lock(device->cdev));
 			} else if ((searchcqr->status == DASD_CQR_FILLED) ||
 				   (searchcqr->status == DASD_CQR_NEED_ERP)) {
 				searchcqr->status = DASD_CQR_TERMINATED;
@@ -2339,6 +2340,7 @@ enum blk_eh_timer_return dasd_times_out(struct request *req)
 			}
 			break;
 		}
+		spin_unlock(get_ccwdev_lock(device->cdev));
 	}
 	dasd_schedule_block_bh(block);
 	spin_unlock(&block->queue_lock);
-- 
1.7.4.2

