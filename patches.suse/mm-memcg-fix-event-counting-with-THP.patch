From: Mel Gorman <mgorman@suse.de>
Date: Mon, 23 May 2011 16:10:38 +0100
Subject: [PATCH] memcg: fix event counting breakage from recent THP update reimplementation
References: THP + memcg (fate #311931)
Git-commit: 3751d60430fe4c26460a5ca8ad8672d32f93bcb1
Patch-mainline: v2.6.38-rc4

Changes in e401f1761 ("memcg: modify accounting function for
supporting THP better") adds nr_pages to support multiple page size
in memory_cgroup_charge_statistics.

But counting the number of event nees abs(nr_pages) for increasing
counters.  This patch fixes event counting.

Signed-off-by: KAMEZAWA Hiroyuki <kamezawa.hiroyu@jp.fujitsu.com>
Reviewed-by: Johannes Weiner <hannes@cmpxchg.org>
Cc: Daisuke Nishimura <nishimura@mxp.nes.nec.co.jp>
Cc: Balbir Singh <balbir@in.ibm.com>
Cc: Minchan Kim <minchan.kim@gmail.com>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Mel Gorman <mgorman@suse.de>
---
 mm/memcontrol.c |    4 +++-
 1 files changed, 3 insertions(+), 1 deletions(-)

Index: linux-2.6.32-memcgthp/mm/memcontrol.c
===================================================================
--- linux-2.6.32-memcgthp.orig/mm/memcontrol.c
+++ linux-2.6.32-memcgthp/mm/memcontrol.c
@@ -516,9 +516,11 @@ static void mem_cgroup_charge_statistics
 	if (nr_pages > 0)
 		__mem_cgroup_stat_add_safe(cpustat,
 				MEM_CGROUP_STAT_PGPGIN_COUNT, 1);
-	else
+	else {
 		__mem_cgroup_stat_add_safe(cpustat,
 				MEM_CGROUP_STAT_PGPGOUT_COUNT, 1);
+		nr_pages = -nr_pages;
+	}
 	__mem_cgroup_stat_add_safe(cpustat, MEM_CGROUP_STAT_EVENTS, nr_pages);
 	put_cpu();
 }
@@ -1788,8 +1790,10 @@ static int mem_cgroup_charge_common(stru
 	int ret;
 	int page_size = PAGE_SIZE;
 
-	if (PageTransHuge(page))
+	if (PageTransHuge(page)) {
 		page_size <<= compound_order(page);
+		VM_BUG_ON(!PageTransHuge(page));
+	}
 
 	pc = lookup_page_cgroup(page);
 	/* can happen at boot */
@@ -2059,8 +2063,10 @@ __mem_cgroup_uncharge_common(struct page
 	if (PageSwapCache(page))
 		return NULL;
 
-	if (PageTransHuge(page))
+	if (PageTransHuge(page)) {
 		page_size <<= compound_order(page);
+		VM_BUG_ON(!PageTransHuge(page));
+	}
 
 	count = page_size >> PAGE_SHIFT;
 	/*

