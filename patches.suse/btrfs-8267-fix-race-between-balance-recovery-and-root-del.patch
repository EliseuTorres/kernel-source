From: Wang Shilong <wangsl.fnst@cn.fujitsu.com>
Date: Thu, 26 Jun 2014 11:08:16 +0800
Patch-mainline: 3.16
Git-commit: 5f3164813b90f7dbcb5c3ab9006906222ce471b7
Subject: [PATCH] Btrfs: fix race between balance recovery and root deletion

Balance recovery is called when RW mounting or remounting from
RO to RW, it is called to finish roots merging.

When doing balance recovery, relocation root's corresponding
fs root(whose root refs is 0) might be destroyed by cleaner
thread, this will make btrfs fail to mount.

Fix this problem by holding @cleaner_mutex when doing balance
recovery.

Signed-off-by: Wang Shilong <wangsl.fnst@cn.fujitsu.com>
Signed-off-by: Chris Mason <clm@fb.com>
Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/disk-io.c |    2 ++
 fs/btrfs/super.c   |    2 ++
 2 files changed, 4 insertions(+)

--- a/fs/btrfs/disk-io.c
+++ b/fs/btrfs/disk-io.c
@@ -2795,7 +2795,9 @@ retry_root_backup:
 		if (ret)
 			goto fail_trans_kthread;
 
+		mutex_lock(&fs_info->cleaner_mutex);
 		ret = btrfs_recover_relocation(tree_root);
+		mutex_unlock(&fs_info->cleaner_mutex);
 		if (ret < 0) {
 			printk(KERN_WARNING
 			       "btrfs: failed to recover relocation\n");
--- a/fs/btrfs/super.c
+++ b/fs/btrfs/super.c
@@ -1366,7 +1366,9 @@ static int btrfs_remount(struct super_bl
 			goto restore;
 
 		/* recover relocation */
+		mutex_lock(&fs_info->cleaner_mutex);
 		ret = btrfs_recover_relocation(root);
+		mutex_unlock(&fs_info->cleaner_mutex);
 		if (ret)
 			goto restore;
 
