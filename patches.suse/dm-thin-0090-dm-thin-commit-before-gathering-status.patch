Git-commit: 1f4e0ff07980820977f45d6a5dbc81d3bb9ce4d3
From: Alasdair G Kergon <agk@redhat.com>
Date: Fri, 27 Jul 2012 15:08:16 +0100
Subject: [PATCH] dm thin: commit before gathering status
Patch-mainline: v3.6-rc1
Reference: FATE#313903

Commit outstanding metadata before returning the status for a dm thin
pool so that the numbers reported are as up-to-date as possible.

The commit is not performed if the device is suspended or if
the DM_NOFLUSH_FLAG is supplied by userspace and passed to the target
through a new 'status_flags' parameter in the target's dm_status_fn.

The userspace dmsetup tool will support the --noflush flag with the
'dmsetup status' and 'dmsetup wait' commands from version 1.02.76
onwards.

[changed to dm-verity.c excluded and refresh needed for dm-flakey.c
 - neilb]

Tested-by: Mike Snitzer <snitzer@redhat.com>
Signed-off-by: Alasdair G Kergon <agk@redhat.com>
Acked-by: NeilBrown <nfbrown@suse.com>

---
 drivers/md/dm-crypt.c         |    2 +-
 drivers/md/dm-delay.c         |    2 +-
 drivers/md/dm-flakey.c        |    2 +-
 drivers/md/dm-ioctl.c         |    5 ++++-
 drivers/md/dm-linear.c        |    2 +-
 drivers/md/dm-mpath.c         |    2 +-
 drivers/md/dm-raid.c          |    2 +-
 drivers/md/dm-raid1.c         |    2 +-
 drivers/md/dm-snap.c          |    6 +++---
 drivers/md/dm-stripe.c        |    4 ++--
 drivers/md/dm-thin.c          |    9 +++++++--
 drivers/md/dm.h               |    5 +++++
 include/linux/device-mapper.h |    2 +-
 include/linux/dm-ioctl.h      |    8 +++++---
 14 files changed, 34 insertions(+), 19 deletions(-)

--- linux-3.0-SLE11-SP3.orig/drivers/md/dm-crypt.c
+++ linux-3.0-SLE11-SP3/drivers/md/dm-crypt.c
@@ -1703,7 +1703,7 @@ static int crypt_map(struct dm_target *t
 }
 
 static int crypt_status(struct dm_target *ti, status_type_t type,
-			char *result, unsigned int maxlen)
+			unsigned status_flags, char *result, unsigned maxlen)
 {
 	struct crypt_config *cc = ti->private;
 	unsigned int sz = 0;
--- linux-3.0-SLE11-SP3.orig/drivers/md/dm-delay.c
+++ linux-3.0-SLE11-SP3/drivers/md/dm-delay.c
@@ -294,7 +294,7 @@ static int delay_map(struct dm_target *t
 }
 
 static int delay_status(struct dm_target *ti, status_type_t type,
-			char *result, unsigned maxlen)
+			unsigned status_flags, char *result, unsigned maxlen)
 {
 	struct delay_c *dc = ti->private;
 	int sz = 0;
--- linux-3.0-SLE11-SP3.orig/drivers/md/dm-flakey.c
+++ linux-3.0-SLE11-SP3/drivers/md/dm-flakey.c
@@ -128,7 +128,7 @@ static int flakey_map(struct dm_target *
 }
 
 static int flakey_status(struct dm_target *ti, status_type_t type,
-			 char *result, unsigned int maxlen)
+			 unsigned status_flags, char *result, unsigned maxlen)
 {
 	struct flakey_c *fc = ti->private;
 
--- linux-3.0-SLE11-SP3.orig/drivers/md/dm-ioctl.c
+++ linux-3.0-SLE11-SP3/drivers/md/dm-ioctl.c
@@ -1040,6 +1040,7 @@ static void retrieve_status(struct dm_ta
 	char *outbuf, *outptr;
 	status_type_t type;
 	size_t remaining, len, used = 0;
+	unsigned status_flags = 0;
 
 	outptr = outbuf = get_result_buffer(param, param_size, &len);
 
@@ -1076,7 +1077,9 @@ static void retrieve_status(struct dm_ta
 
 		/* Get the status/table string from the target driver */
 		if (ti->type->status) {
-			if (ti->type->status(ti, type, outptr, remaining)) {
+			if (param->flags & DM_NOFLUSH_FLAG)
+				status_flags |= DM_STATUS_NOFLUSH_FLAG;
+			if (ti->type->status(ti, type, status_flags, outptr, remaining)) {
 				param->flags |= DM_BUFFER_FULL_FLAG;
 				break;
 			}
--- linux-3.0-SLE11-SP3.orig/drivers/md/dm-linear.c
+++ linux-3.0-SLE11-SP3/drivers/md/dm-linear.c
@@ -95,7 +95,7 @@ static int linear_map(struct dm_target *
 }
 
 static int linear_status(struct dm_target *ti, status_type_t type,
-			 char *result, unsigned int maxlen)
+			 unsigned status_flags, char *result, unsigned maxlen)
 {
 	struct linear_c *lc = (struct linear_c *) ti->private;
 
--- linux-3.0-SLE11-SP3.orig/drivers/md/dm-mpath.c
+++ linux-3.0-SLE11-SP3/drivers/md/dm-mpath.c
@@ -1386,7 +1386,7 @@ static void multipath_resume(struct dm_t
  *      num_paths num_selector_args [path_dev [selector_args]* ]+ ]+
  */
 static int multipath_status(struct dm_target *ti, status_type_t type,
-			    char *result, unsigned int maxlen)
+			    unsigned status_flags, char *result, unsigned maxlen)
 {
 	int sz = 0;
 	unsigned long flags;
--- linux-3.0-SLE11-SP3.orig/drivers/md/dm-raid.c
+++ linux-3.0-SLE11-SP3/drivers/md/dm-raid.c
@@ -513,7 +513,7 @@ static int raid_map(struct dm_target *ti
 }
 
 static int raid_status(struct dm_target *ti, status_type_t type,
-		       char *result, unsigned maxlen)
+		       unsigned status_flags, char *result, unsigned maxlen)
 {
 	struct raid_set *rs = ti->private;
 	unsigned raid_param_cnt = 1; /* at least 1 for chunksize */
--- linux-3.0-SLE11-SP3.orig/drivers/md/dm-raid1.c
+++ linux-3.0-SLE11-SP3/drivers/md/dm-raid1.c
@@ -1362,7 +1362,7 @@ static char device_status_char(struct mi
 
 
 static int mirror_status(struct dm_target *ti, status_type_t type,
-			 char *result, unsigned int maxlen)
+			 unsigned status_flags, char *result, unsigned maxlen)
 {
 	unsigned int m, sz = 0;
 	struct mirror_set *ms = (struct mirror_set *) ti->private;
--- linux-3.0-SLE11-SP3.orig/drivers/md/dm-snap.c
+++ linux-3.0-SLE11-SP3/drivers/md/dm-snap.c
@@ -1807,7 +1807,7 @@ static void snapshot_merge_resume(struct
 }
 
 static int snapshot_status(struct dm_target *ti, status_type_t type,
-			   char *result, unsigned int maxlen)
+			   unsigned status_flags, char *result, unsigned maxlen)
 {
 	unsigned sz = 0;
 	struct dm_snapshot *snap = ti->private;
@@ -2109,8 +2109,8 @@ static void origin_resume(struct dm_targ
 	ti->max_io_len = get_origin_minimum_chunksize(dev->bdev);
 }
 
-static int origin_status(struct dm_target *ti, status_type_t type, char *result,
-			 unsigned int maxlen)
+static int origin_status(struct dm_target *ti, status_type_t type,
+			 unsigned status_flags, char *result, unsigned maxlen)
 {
 	struct dm_dev *dev = ti->private;
 
--- linux-3.0-SLE11-SP3.orig/drivers/md/dm-stripe.c
+++ linux-3.0-SLE11-SP3/drivers/md/dm-stripe.c
@@ -304,8 +304,8 @@ static int stripe_map(struct dm_target *
  *
  */
 
-static int stripe_status(struct dm_target *ti,
-			 status_type_t type, char *result, unsigned int maxlen)
+static int stripe_status(struct dm_target *ti, status_type_t type,
+			 unsigned status_flags, char *result, unsigned maxlen)
 {
 	struct stripe_c *sc = (struct stripe_c *) ti->private;
 	char buffer[sc->stripes + 1];
--- linux-3.0-SLE11-SP3.orig/drivers/md/dm-thin.c
+++ linux-3.0-SLE11-SP3/drivers/md/dm-thin.c
@@ -5,6 +5,7 @@
  */
 
 #include "dm-thin-metadata.h"
+#include "dm.h"
 
 #include <linux/device-mapper.h>
 #include <linux/dm-io.h>
@@ -2619,7 +2620,7 @@ static void emit_flags(struct pool_featu
  *    <used data sectors>/<total data sectors> <held metadata root>
  */
 static int pool_status(struct dm_target *ti, status_type_t type,
-		       char *result, unsigned maxlen)
+		       unsigned status_flags, char *result, unsigned maxlen)
 {
 	int r;
 	unsigned sz = 0;
@@ -2641,6 +2642,10 @@ static int pool_status(struct dm_target
 			break;
 		}
 
+		/* Commit to ensure statistics aren't out-of-date */
+		if (!(status_flags & DM_STATUS_NOFLUSH_FLAG) && !dm_suspended(ti))
+			(void) commit_or_fallback(pool);
+
 		r = dm_pool_get_metadata_transaction_id(pool->pmd,
 							&transaction_id);
 		if (r)
@@ -2968,7 +2973,7 @@ static void thin_postsuspend(struct dm_t
  * <nr mapped sectors> <highest mapped sector>
  */
 static int thin_status(struct dm_target *ti, status_type_t type,
-		       char *result, unsigned maxlen)
+		       unsigned status_flags, char *result, unsigned maxlen)
 {
 	int r;
 	ssize_t sz = 0;
--- linux-3.0-SLE11-SP3.orig/drivers/md/dm.h
+++ linux-3.0-SLE11-SP3/drivers/md/dm.h
@@ -23,6 +23,11 @@
 #define DM_SUSPEND_NOFLUSH_FLAG		(1 << 1)
 
 /*
+ * Status feature flags
+ */
+#define DM_STATUS_NOFLUSH_FLAG		(1 << 0)
+
+/*
  * Type of table and mapped_device's mempool
  */
 #define DM_TYPE_NONE		0
--- linux-3.0-SLE11-SP3.orig/include/linux/device-mapper.h
+++ linux-3.0-SLE11-SP3/include/linux/device-mapper.h
@@ -72,7 +72,7 @@ typedef int (*dm_preresume_fn) (struct d
 typedef void (*dm_resume_fn) (struct dm_target *ti);
 
 typedef int (*dm_status_fn) (struct dm_target *ti, status_type_t status_type,
-			     char *result, unsigned int maxlen);
+			     unsigned status_flags, char *result, unsigned maxlen);
 
 typedef int (*dm_message_fn) (struct dm_target *ti, unsigned argc, char **argv);
 
--- linux-3.0-SLE11-SP3.orig/include/linux/dm-ioctl.h
+++ linux-3.0-SLE11-SP3/include/linux/dm-ioctl.h
@@ -267,9 +267,9 @@ enum {
 #define DM_DEV_SET_GEOMETRY	_IOWR(DM_IOCTL, DM_DEV_SET_GEOMETRY_CMD, struct dm_ioctl)
 
 #define DM_VERSION_MAJOR	4
-#define DM_VERSION_MINOR	22
-#define DM_VERSION_PATCHLEVEL	1
-#define DM_VERSION_EXTRA	"-ioctl (2012-06-01)"
+#define DM_VERSION_MINOR	23
+#define DM_VERSION_PATCHLEVEL	0
+#define DM_VERSION_EXTRA	"-ioctl (2012-07-25)"
 
 /* Status bits */
 #define DM_READONLY_FLAG	(1 << 0) /* In/Out */
@@ -307,6 +307,8 @@ enum {
 
 /*
  * Set this to suspend without flushing queued ios.
+ * Also disables flushing uncommitted changes in the thin target before
+ * generating statistics for DM_TABLE_STATUS and DM_DEV_WAIT.
  */
 #define DM_NOFLUSH_FLAG		(1 << 11) /* In */
 
