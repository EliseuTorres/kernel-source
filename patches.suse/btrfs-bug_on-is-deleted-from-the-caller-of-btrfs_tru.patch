From: Tsutomu Itoh <t-itoh@jp.fujitsu.com>
Date: Thu, 19 May 2011 05:19:08 +0000
Patch-mainline: yes
References: FATE#306586
Subject: [PATCH] Btrfs: BUG_ON is deleted from the caller of
 btrfs_truncate_item & btrfs_extend_item

Currently, btrfs_truncate_item and btrfs_extend_item returns only 0.
So, the check by BUG_ON in the caller is unnecessary.

Signed-off-by: Tsutomu Itoh <t-itoh@jp.fujitsu.com>
Signed-off-by: Chris Mason <chris.mason@oracle.com>
Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/ctree.c       |    8 ++------
 fs/btrfs/dir-item.c    |    1 -
 fs/btrfs/extent-tree.c |    3 ---
 fs/btrfs/file-item.c   |    3 ---
 fs/btrfs/inode-item.c  |    2 --
 fs/btrfs/inode.c       |    1 -
 fs/btrfs/tree-log.c    |    1 -
 7 files changed, 2 insertions(+), 17 deletions(-)

Index: linux-2.6.32-SLE11-SP2/fs/btrfs/ctree.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/btrfs/ctree.c
+++ linux-2.6.32-SLE11-SP2/fs/btrfs/ctree.c
@@ -3224,7 +3224,6 @@ int btrfs_truncate_item(struct btrfs_tra
 			struct btrfs_path *path,
 			u32 new_size, int from_end)
 {
-	int ret = 0;
 	int slot;
 	struct extent_buffer *leaf;
 	struct btrfs_item *item;
@@ -3322,12 +3321,11 @@ int btrfs_truncate_item(struct btrfs_tra
 	btrfs_set_item_size(leaf, item, new_size);
 	btrfs_mark_buffer_dirty(leaf);
 
-	ret = 0;
 	if (btrfs_leaf_free_space(root, leaf) < 0) {
 		btrfs_print_leaf(root, leaf);
 		BUG();
 	}
-	return ret;
+	return 0;
 }
 
 /*
@@ -3337,7 +3335,6 @@ int btrfs_extend_item(struct btrfs_trans
 		      struct btrfs_root *root, struct btrfs_path *path,
 		      u32 data_size)
 {
-	int ret = 0;
 	int slot;
 	struct extent_buffer *leaf;
 	struct btrfs_item *item;
@@ -3402,12 +3399,11 @@ int btrfs_extend_item(struct btrfs_trans
 	btrfs_set_item_size(leaf, item, old_size + data_size);
 	btrfs_mark_buffer_dirty(leaf);
 
-	ret = 0;
 	if (btrfs_leaf_free_space(root, leaf) < 0) {
 		btrfs_print_leaf(root, leaf);
 		BUG();
 	}
-	return ret;
+	return 0;
 }
 
 /*
Index: linux-2.6.32-SLE11-SP2/fs/btrfs/dir-item.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/btrfs/dir-item.c
+++ linux-2.6.32-SLE11-SP2/fs/btrfs/dir-item.c
@@ -50,7 +50,6 @@ static struct btrfs_dir_item *insert_wit
 		if (di)
 			return ERR_PTR(-EEXIST);
 		ret = btrfs_extend_item(trans, root, path, data_size);
-		WARN_ON(ret > 0);
 	}
 	if (ret < 0)
 		return ERR_PTR(ret);
Index: linux-2.6.32-SLE11-SP2/fs/btrfs/extent-tree.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/btrfs/extent-tree.c
+++ linux-2.6.32-SLE11-SP2/fs/btrfs/extent-tree.c
@@ -954,7 +954,6 @@ static int convert_extent_item_v0(struct
 	BUG_ON(ret);
 
 	ret = btrfs_extend_item(trans, root, path, new_size);
-	BUG_ON(ret);
 
 	leaf = path->nodes[0];
 	item = btrfs_item_ptr(leaf, path->slots[0], struct btrfs_extent_item);
@@ -1562,7 +1561,6 @@ int setup_inline_extent_backref(struct b
 	size = btrfs_extent_inline_ref_size(type);
 
 	ret = btrfs_extend_item(trans, root, path, size);
-	BUG_ON(ret);
 
 	ei = btrfs_item_ptr(leaf, path->slots[0], struct btrfs_extent_item);
 	refs = btrfs_extent_refs(leaf, ei);
@@ -1691,7 +1689,6 @@ int update_inline_extent_backref(struct
 					      end - ptr - size);
 		item_size -= size;
 		ret = btrfs_truncate_item(trans, root, path, item_size, 1);
-		BUG_ON(ret);
 	}
 	btrfs_mark_buffer_dirty(leaf);
 	return 0;
Index: linux-2.6.32-SLE11-SP2/fs/btrfs/file-item.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/btrfs/file-item.c
+++ linux-2.6.32-SLE11-SP2/fs/btrfs/file-item.c
@@ -501,7 +501,6 @@ static noinline int truncate_one_csum(st
 		u32 new_size = (bytenr - key->offset) >> blocksize_bits;
 		new_size *= csum_size;
 		ret = btrfs_truncate_item(trans, root, path, new_size, 1);
-		BUG_ON(ret);
 	} else if (key->offset >= bytenr && csum_end > end_byte &&
 		   end_byte > key->offset) {
 		/*
@@ -514,7 +513,6 @@ static noinline int truncate_one_csum(st
 		new_size *= csum_size;
 
 		ret = btrfs_truncate_item(trans, root, path, new_size, 0);
-		BUG_ON(ret);
 
 		key->offset = end_byte;
 		ret = btrfs_set_item_key_safe(trans, root, path, key);
@@ -769,7 +767,6 @@ again:
 			goto insert;
 
 		ret = btrfs_extend_item(trans, root, path, diff);
-		BUG_ON(ret);
 		goto csum;
 	}
 
Index: linux-2.6.32-SLE11-SP2/fs/btrfs/inode-item.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/btrfs/inode-item.c
+++ linux-2.6.32-SLE11-SP2/fs/btrfs/inode-item.c
@@ -130,7 +130,6 @@ int btrfs_del_inode_ref(struct btrfs_tra
 			      item_size - (ptr + sub_item_len - item_start));
 	ret = btrfs_truncate_item(trans, root, path,
 				  item_size - sub_item_len, 1);
-	BUG_ON(ret);
 out:
 	btrfs_free_path(path);
 	return ret;
@@ -167,7 +166,6 @@ int btrfs_insert_inode_ref(struct btrfs_
 
 		old_size = btrfs_item_size_nr(path->nodes[0], path->slots[0]);
 		ret = btrfs_extend_item(trans, root, path, ins_len);
-		BUG_ON(ret);
 		ref = btrfs_item_ptr(path->nodes[0], path->slots[0],
 				     struct btrfs_inode_ref);
 		ref = (struct btrfs_inode_ref *)((unsigned long)ref + old_size);
Index: linux-2.6.32-SLE11-SP2/fs/btrfs/inode.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/btrfs/inode.c
+++ linux-2.6.32-SLE11-SP2/fs/btrfs/inode.c
@@ -3281,7 +3281,6 @@ search_again:
 				    btrfs_file_extent_calc_inline_size(size);
 				ret = btrfs_truncate_item(trans, root, path,
 							  size, 1);
-				BUG_ON(ret);
 			} else if (root->ref_cows) {
 				inode_sub_bytes(inode, item_end + 1 -
 						found_key.offset);
Index: linux-2.6.32-SLE11-SP2/fs/btrfs/tree-log.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/btrfs/tree-log.c
+++ linux-2.6.32-SLE11-SP2/fs/btrfs/tree-log.c
@@ -381,7 +381,6 @@ insert:
 		} else if (found_size < item_size) {
 			ret = btrfs_extend_item(trans, root, path,
 						item_size - found_size);
-			BUG_ON(ret);
 		}
 	} else if (ret) {
 		return ret;
