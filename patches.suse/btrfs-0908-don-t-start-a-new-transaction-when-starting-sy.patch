From: Miao Xie <miaox@cn.fujitsu.com>
Date: Mon, 26 Nov 2012 08:41:29 +0000
Patch-mainline: 3.8
Git-commit: ff7c1d33551862c86f7737fe88edc3e499d291e6
References: FATE#312888
Subject: [PATCH] Btrfs: don't start a new transaction when starting sync

If there is no running transaction in the fs, we needn't start a new one when
we want to start sync.

Signed-off-by: Miao Xie <miaox@cn.fujitsu.com>
Signed-off-by: Chris Mason <chris.mason@fusionio.com>
Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/ioctl.c       |   14 ++++++++++----
 fs/btrfs/transaction.c |   13 +++++++++++++
 2 files changed, 23 insertions(+), 4 deletions(-)

--- a/fs/btrfs/ioctl.c
+++ b/fs/btrfs/ioctl.c
@@ -3075,16 +3075,22 @@ static noinline long btrfs_ioctl_start_s
 	u64 transid;
 	int ret;
 
-	trans = btrfs_start_transaction(root, 0);
-	if (IS_ERR(trans))
-		return PTR_ERR(trans);
+	trans = btrfs_attach_transaction(root);
+	if (IS_ERR(trans)) {
+		if (PTR_ERR(trans) != -ENOENT)
+			return PTR_ERR(trans);
+
+		/* No running transaction, don't bother */
+		transid = root->fs_info->last_trans_committed;
+		goto out;
+	}
 	transid = trans->transid;
 	ret = btrfs_commit_transaction_async(trans, root, 0);
 	if (ret) {
 		btrfs_end_transaction(trans, root);
 		return ret;
 	}
-
+out:
 	if (argp)
 		if (copy_to_user(argp, &transid, sizeof(transid)))
 			return -EFAULT;
--- a/fs/btrfs/transaction.c
+++ b/fs/btrfs/transaction.c
@@ -1304,6 +1304,13 @@ static void do_async_commit(struct work_
 	struct btrfs_async_commit *ac =
 		container_of(work, struct btrfs_async_commit, work.work);
 
+	/*
+	if (ac->newtrans->type < TRANS_JOIN_NOLOCK)
+		rwsem_acquire_read(
+		     &ac->root->fs_info->sb->s_writers.lock_map[SB_FREEZE_FS-1],
+		     0, 1, _THIS_IP_);
+	*/
+
 	current->journal_info = ac->newtrans;
 
 	btrfs_commit_transaction(ac->newtrans, ac->root);
@@ -1335,6 +1342,12 @@ int btrfs_commit_transaction_async(struc
 	atomic_inc(&cur_trans->use_count);
 
 	btrfs_end_transaction(trans, root);
+	/*
+	if (trans->type < TRANS_JOIN_NOLOCK)
+		rwsem_release(
+			&root->fs_info->sb->s_writers.lock_map[SB_FREEZE_FS-1],
+			1, _THIS_IP_);
+	*/
 	schedule_delayed_work(&ac->work, 0);
 
 	/* wait for transaction to start and unblock */
