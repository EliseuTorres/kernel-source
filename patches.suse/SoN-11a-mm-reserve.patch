From: Mel Gorman <mgorman@suse.de>
Date: Mon, 21 Mar 2011 14:14:34 +0000
Subject: [PATCH] mm: Add mem_reserve_kmem_cache_add helper
Patch-mainline: Not yet
References: bnc#678466

The nfs_page slab cache needs to be adjusted by a relative amount. Add
the necessary helper.

Signed-off-by: Mel Gorman <mgorman@suse.de>
Acked-by: Suresh Jayaraman <sjayaraman@suse.de>
---
 include/linux/reserve.h |    3 +++
 mm/reserve.c            |   32 ++++++++++++++++++++++++++++++++
 2 files changed, 35 insertions(+), 0 deletions(-)

Index: linux-2.6.32-SLE11-SP1/include/linux/reserve.h
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/include/linux/reserve.h
+++ linux-2.6.32-SLE11-SP1/include/linux/reserve.h
@@ -50,6 +50,9 @@ struct kmem_cache;
 int mem_reserve_kmem_cache_set(struct mem_reserve *res,
 			       struct kmem_cache *s,
 			       int objects);
+int mem_reserve_kmem_cache_add(struct mem_reserve *res,
+			       struct kmem_cache *s,
+			       int objects);
 int mem_reserve_kmem_cache_charge(struct mem_reserve *res,
 				  struct kmem_cache *s, long objs);
 
Index: linux-2.6.32-SLE11-SP1/mm/reserve.c
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/mm/reserve.c
+++ linux-2.6.32-SLE11-SP1/mm/reserve.c
@@ -442,6 +442,38 @@ int mem_reserve_kmem_cache_set(struct me
 EXPORT_SYMBOL_GPL(mem_reserve_kmem_cache_set);
 
 /**
+ * mem_reserve_kmem_cache_add() - change the size in a relative way
+ * @res - reserve to set
+ * @s - kmem_cache to reserve from
+ * @objects - number of objects to adjust the reserve by
+ *
+ * Similar to mem_reserve_kmem_cache_set, expect that the argument is relative
+ * instead of absolute
+ *
+ * Returns -ENOMEM on failure.
+ */
+int mem_reserve_kmem_cache_add(struct mem_reserve *res, struct kmem_cache *s,
+			       int objects)
+{
+	int ret;
+	long pages, bytes;
+
+	mutex_lock(&mem_reserve_mutex);
+	if (objects >= 0)
+		pages = kmem_alloc_estimate(s, GFP_ATOMIC, objects);
+	else {
+		pages = kmem_alloc_estimate(s, GFP_ATOMIC, -objects);
+		pages = -pages;
+	}
+	bytes = objects * kmem_cache_size(s);
+	ret = __mem_reserve_add(res, pages, bytes);
+	mutex_unlock(&mem_reserve_mutex);
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(mem_reserve_kmem_cache_add);
+
+/**
  * mem_reserve_kmem_cache_charge() - charge (or uncharge) usage of objs
  * @res - reserve to charge
  * @objs - objects to charge for
