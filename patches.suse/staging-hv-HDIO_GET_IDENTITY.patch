Subject: hv: return correct data for HDIO_GET_IDENTITY ioctl
From: <ohering@suse.de>
References: bnc#709332
Patch-mainline: never

---
 drivers/staging/hv/blkvsc_drv.c |   27 +++++++++++++++++----------
 1 file changed, 17 insertions(+), 10 deletions(-)

--- a/drivers/staging/hv/blkvsc_drv.c
+++ b/drivers/staging/hv/blkvsc_drv.c
@@ -26,6 +26,7 @@
 #include <linux/major.h>
 #include <linux/delay.h>
 #include <linux/hdreg.h>
+#include <linux/ata.h>
 #include <linux/slab.h>
 #include <scsi/scsi.h>
 #include <scsi/scsi_cmnd.h>
@@ -97,8 +98,7 @@ struct block_device_context {
 	enum blkvsc_device_type	device_type;
 	struct list_head pending_list;
 
-	unsigned char device_id[64];
-	unsigned int device_id_len;
+	u16 id[ATA_ID_WORDS];
 	int num_outstanding_reqs;
 	int shutting_down;
 	unsigned int sector_size;
@@ -261,8 +261,7 @@ static int blkvsc_ioctl(struct block_dev
 
 	switch (cmd) {
 	case HDIO_GET_IDENTITY:
-		if (copy_to_user((void __user *)arg, blkdev->device_id,
-				 blkdev->device_id_len))
+		if (copy_to_user((void __user *)arg, blkdev->id, sizeof(blkdev->id)))
 			ret = -EFAULT;
 		break;
 	default:
@@ -309,8 +308,9 @@ static int blkvsc_do_operation(struct bl
 	struct scsi_sense_hdr sense_hdr;
 	struct vmscsi_request *vm_srb;
 	unsigned long flags;
+	u8 ch, *guid;
 
-	int ret = 0;
+	int i, ret = 0;
 
 	blkvsc_req = kmem_cache_zalloc(blkdev->request_pool, GFP_KERNEL);
 	if (!blkvsc_req)
@@ -387,11 +387,18 @@ static int blkvsc_do_operation(struct bl
 		 else
 			blkdev->device_type = UNKNOWN_DEV_TYPE;
 
-		blkdev->device_id_len = buf[7];
-		if (blkdev->device_id_len > 64)
-			blkdev->device_id_len = 64;
-
-		memcpy(blkdev->device_id, &buf[8], blkdev->device_id_len);
+		/*
+		 * At byte offset 8 is where the identification string starts and this is:
+		 * "MSFT   ": an 8 byte string that starts with MSFT.
+		 * This is followed by 16 byte guid. Totally the length is 24 bytes.
+		 */
+		memcpy(&blkdev->id[ATA_ID_PROD], &buf[8], 8);
+		guid =(u8 *)&blkdev->id[ATA_ID_PROD] + 8;
+		for (i = 0; i < 16; i++) {
+			ch = buf[8 + 8 + i];
+			*guid++ = hex_asc_hi(ch);
+			*guid++ = hex_asc_lo(ch);
+		}
 		break;
 
 	case DO_CAPACITY:
