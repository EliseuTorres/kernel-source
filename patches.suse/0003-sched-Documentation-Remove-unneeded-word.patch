From 9149c4060735641cc8c95bfb84c5256065472778 Mon Sep 17 00:00:00 2001
From: Sharon Dvir <sharon.dvir1@mail.huji.ac.il>
Date: Mon, 9 Feb 2015 22:32:50 -0800
Subject: [PATCH 3/4] sched/Documentation: Remove unneeded word
Git-commit: 139b6fd26d85a65c4e0d2795b87b94f9505e5943
Patch-mainline: v3.20-rc1
References: mutex scalability

The second 'mutex' shouldn't be there, it can't be about the mutex,
as the mutex can't be freed, but unlocked, the memory where the
mutex resides however, can be freed.

Signed-off-by: Sharon Dvir <sharon.dvir1@mail.huji.ac.il>
Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
Cc: Linus Torvalds <torvalds@linux-foundation.org>
Link: http://lkml.kernel.org/r/1422827252-31363-1-git-send-email-sharon.dvir1@mail.huji.ac.il
Signed-off-by: Ingo Molnar <mingo@kernel.org>
Signed-off-by: Davidlohr Bueso <dbueso@suse.de>

---
 kernel/locking/mutex.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/kernel/locking/mutex.c b/kernel/locking/mutex.c
index a8efd35..6cf1603 100644
--- a/kernel/locking/mutex.c
+++ b/kernel/locking/mutex.c
@@ -89,7 +89,7 @@ __mutex_lock_slowpath(atomic_t *lock_count);
  * The mutex must later on be released by the same task that
  * acquired it. Recursive locking is not allowed. The task
  * may not exit without first unlocking the mutex. Also, kernel
- * memory where the mutex resides mutex must not be freed with
+ * memory where the mutex resides must not be freed with
  * the mutex still locked. The mutex must first be initialized
  * (or statically defined) before it can be locked. memset()-ing
  * the mutex to 0 is not allowed.
-- 
2.1.4

