From: Jeff Mahoney <jeffm@suse.com>
Subject: btrfs: convert_extent_bit error push-up
Patch-mainline: Submitted 24 Oct 2011

 convert_extent_bit can fail with -ENOMEM but nothing actually catches the
 errors.

 This patch catches the error with BUG_ON in the caller.

Signed-off-by: Jeff Mahoney <jeffm@suse.com>
---
 fs/btrfs/extent_io.h   |    5 +++--
 fs/btrfs/transaction.c |    5 +++--
 2 files changed, 6 insertions(+), 4 deletions(-)

--- a/fs/btrfs/extent_io.h
+++ b/fs/btrfs/extent_io.h
@@ -221,8 +221,9 @@ int __must_check set_extent_dirty(struct
 				  u64 end, gfp_t mask);
 int __must_check clear_extent_dirty(struct extent_io_tree *tree, u64 start,
 				    u64 end, gfp_t mask);
-int convert_extent_bit(struct extent_io_tree *tree, u64 start, u64 end,
-		       int bits, int clear_bits, gfp_t mask);
+int __must_check convert_extent_bit(struct extent_io_tree *tree, u64 start,
+				    u64 end, int bits, int clear_bits,
+				    gfp_t mask);
 int set_extent_delalloc(struct extent_io_tree *tree, u64 start, u64 end,
 			struct extent_state **cached_state, gfp_t mask);
 int find_first_extent_bit(struct extent_io_tree *tree, u64 start,
--- a/fs/btrfs/transaction.c
+++ b/fs/btrfs/transaction.c
@@ -580,8 +580,9 @@ int btrfs_write_marked_extents(struct bt
 
 	while (!find_first_extent_bit(dirty_pages, start, &start, &end,
 				      mark)) {
-		convert_extent_bit(dirty_pages, start, end, EXTENT_NEED_WAIT, mark,
-				   GFP_NOFS);
+		err = convert_extent_bit(dirty_pages, start, end,
+					 EXTENT_NEED_WAIT, mark, GFP_NOFS);
+		BUG_ON(err < 0);
 		err = filemap_fdatawrite_range(mapping, start, end);
 		if (err)
 			werr = err;

