From: Miao Xie <miaoxie1984@gmail.com>
Date: Sun, 29 Apr 2012 23:25:13 +0800
Patch-mainline: pending
References: FATE#306586
Subject: [PATCH] vfs: re-implement writeback_inodes_sb(_nr)_if_idle() and
 rename them

[ full patch: http://www.spinics.net/lists/linux-fsdevel/msg54844.html
  the code has been trimmed to only what btrfs at sp2 requires to avoid
  deadlocks with umount and autodefrag;
  kabi safe, btrfs part only ]

writeback_inodes_sb(_nr)_if_idle() is re-implemented by replacing down_read()
with down_read_trylock() because
- If ->s_umount is write locked, then the sb is not idle. That is
  writeback_inodes_sb(_nr)_if_idle() needn't wait for the lock.
- writeback_inodes_sb(_nr)_if_idle() grabs s_umount lock when it want to start
  writeback, it may bring us deadlock problem when doing umount.
  (Ex. Btrfs has such a problem, see the following URL
       http://marc.info/?l=linux-btrfs&m=133540923510561&w=2)

The name of these two functions is cumbersome, so rename them to
try_to_writeback_inodes_sb(_nr).

This idea came from Christoph Hellwig.
Some code is from the patch of Kamal Mostafa.

Signed-off-by: Miao Xie <miaox@cn.fujitsu.com>
Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/extent-tree.c |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

--- a/fs/btrfs/extent-tree.c
+++ b/fs/btrfs/extent-tree.c
@@ -3746,7 +3746,7 @@ static void shrink_delalloc(struct btrfs
 
 		max_reclaim = min(delalloc_bytes, to_reclaim);
 		nr_pages = max_reclaim >> PAGE_CACHE_SHIFT;
-		writeback_inodes_sb_nr_if_idle(root->fs_info->sb, nr_pages);
+		try_to_writeback_inodes_sb_nr(root->fs_info->sb, nr_pages);
 
 		/*
 		 * We need to wait for the async pages to actually start before
