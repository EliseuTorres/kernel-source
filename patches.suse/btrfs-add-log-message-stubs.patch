From: David Sterba <dsterba@suse.cz>
Date: Tue, 19 Mar 2013 22:41:23 +0000
Patch-mainline: no
References: FATE#312888
Subject: btrfs: add log message stubs

Based on

[PATCH] Btrfs: Include the device in most error printk()s
commit: c2cf52eb71aeb902682e0c1fa29e4e9e4a7f4ffc

and add only the logger stubs so the following patches compile.

Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/ctree.h       |   16 ++++++++++++++++
 fs/btrfs/extent-tree.c |    5 ++++-
 fs/btrfs/inode.c       |   11 ++++++-----
 3 files changed, 26 insertions(+), 6 deletions(-)

--- a/fs/btrfs/ctree.h
+++ b/fs/btrfs/ctree.h
@@ -3590,6 +3590,22 @@ ssize_t btrfs_listxattr(struct dentry *d
 int btrfs_parse_options(struct btrfs_root *root, char *options);
 int btrfs_sync_fs(struct super_block *sb, int wait);
 void btrfs_printk(struct btrfs_fs_info *fs_info, const char *fmt, ...);
+#define btrfs_emerg(fs_info, fmt, args...) \
+	printk(KERN_EMERG "btrfs: " fmt "\n", ##args)
+#define btrfs_alert(fs_info, fmt, args...) \
+	printk(KERN_ALERT "btrfs: " fmt "\n", ##args)
+#define btrfs_crit(fs_info, fmt, args...) \
+	printk(KERN_CRIT "btrfs: " fmt "\n", ##args)
+#define btrfs_err(fs_info, fmt, args...) \
+	printk(KERN_ERR "btrfs: " fmt "\n", ##args)
+#define btrfs_warn(fs_info, fmt, args...) \
+	printk(KERN_WARNING "btrfs: " fmt "\n", ##args)
+#define btrfs_notice(fs_info, fmt, args...) \
+	printk(KERN_NOTICE "btrfs: " fmt "\n", ##args)
+#define btrfs_info(fs_info, fmt, args...) \
+	printk(KERN_INFO "btrfs: " fmt "\n", ##args)
+#define btrfs_debug(fs_info, fmt, args...) \
+	printk(KERN_DEBUG "btrfs: " fmt "\n", ##args)
 void __btrfs_std_error(struct btrfs_fs_info *fs_info, const char *function,
 		     unsigned int line, int errno, const char *fmt, ...);
 
--- a/fs/btrfs/extent-tree.c
+++ b/fs/btrfs/extent-tree.c
@@ -6875,7 +6875,10 @@ static noinline int do_walk_down(struct
 		return ret;
 	}
 
-	BUG_ON(wc->refs[level - 1] == 0);
+	if (unlikely(wc->refs[level - 1] == 0)) {
+		btrfs_err(root->fs_info, "Missing references.");
+		BUG();
+	}
 	*lookup_info = 0;
 
 	if (wc->stage == DROP_REFERENCE) {
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -3170,8 +3170,8 @@ int btrfs_orphan_cleanup(struct btrfs_ro
 				ret = PTR_ERR(trans);
 				goto out;
 			}
-			printk(KERN_ERR "auto deleting %Lu\n",
-			       found_key.objectid);
+			btrfs_debug(root->fs_info, "auto deleting %Lu",
+				found_key.objectid);
 			ret = btrfs_del_orphan_item(trans, root,
 						    found_key.objectid);
 			BUG_ON(ret); /* -ENOMEM or corruption (JDM: Recheck) */
@@ -3235,13 +3235,14 @@ int btrfs_orphan_cleanup(struct btrfs_ro
 	}
 
 	if (nr_unlink)
-		printk(KERN_INFO "btrfs: unlinked %d orphans\n", nr_unlink);
+		btrfs_info(root->fs_info, "unlinked %d orphans", nr_unlink);
 	if (nr_truncate)
-		printk(KERN_INFO "btrfs: truncated %d orphans\n", nr_truncate);
+		btrfs_info(root->fs_info, "truncated %d orphans", nr_truncate);
 
 out:
 	if (ret)
-		printk(KERN_CRIT "btrfs: could not do orphan cleanup %d\n", ret);
+		btrfs_crit(root->fs_info,
+			"could not do orphan cleanup %d", ret);
 	btrfs_free_path(path);
 	return ret;
 }
