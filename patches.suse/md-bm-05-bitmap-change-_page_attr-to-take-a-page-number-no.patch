From: NeilBrown <neilb@suse.de>
Date: Thu, 12 Apr 2012 16:27:08 +1000
Subject: [PATCH 05/23] md/bitmap: change *_page_attr() to take a page number, not a page.3.5
Patch-mainline: 3.5
References: fate#311379

Most often we have the page number, not the page.  And that is what
the  *_page_attr() functions really want.  So change the arguments to
take that number.

Signed-off-by: NeilBrown <neilb@suse.de>
Acked-by: NeilBrown <neilb@suse.de>

---
 drivers/md/bitmap.c |   57 ++++++++++++++++++++++++----------------------------
 1 file changed, 27 insertions(+), 30 deletions(-)

--- linux-3.0-SLE11-SP2-BTMU.orig/drivers/md/bitmap.c
+++ linux-3.0-SLE11-SP2-BTMU/drivers/md/bitmap.c
@@ -869,22 +869,22 @@ enum bitmap_page_attr {
 	BITMAP_PAGE_NEEDWRITE = 2, /* there are cleared bits that need to be synced */
 };
 
-static inline void set_page_attr(struct bitmap *bitmap, struct page *page,
-				enum bitmap_page_attr attr)
+static inline void set_page_attr(struct bitmap *bitmap, int pnum,
+				 enum bitmap_page_attr attr)
 {
-	__set_bit((page->index<<2) + attr, bitmap->filemap_attr);
+	__set_bit((pnum<<2) + attr, bitmap->filemap_attr);
 }
 
-static inline void clear_page_attr(struct bitmap *bitmap, struct page *page,
-				enum bitmap_page_attr attr)
+static inline void clear_page_attr(struct bitmap *bitmap, int pnum,
+				   enum bitmap_page_attr attr)
 {
-	__clear_bit((page->index<<2) + attr, bitmap->filemap_attr);
+	__clear_bit((pnum<<2) + attr, bitmap->filemap_attr);
 }
 
-static inline unsigned long test_page_attr(struct bitmap *bitmap, struct page *page,
+static inline unsigned long test_page_attr(struct bitmap *bitmap, int pnum,
 					   enum bitmap_page_attr attr)
 {
-	return test_bit((page->index<<2) + attr, bitmap->filemap_attr);
+	return test_bit((pnum<<2) + attr, bitmap->filemap_attr);
 }
 
 /*
@@ -915,7 +915,7 @@ static void bitmap_file_set_bit(struct b
 	kunmap_atomic(kaddr, KM_USER0);
 	PRINTK("set file bit %lu page %lu\n", bit, page->index);
 	/* record page number so it gets flushed to disk when unplug occurs */
-	set_page_attr(bitmap, page, BITMAP_PAGE_DIRTY);
+	set_page_attr(bitmap, page->index, BITMAP_PAGE_DIRTY);
 }
 
 static void bitmap_file_clear_bit(struct bitmap *bitmap, sector_t block)
@@ -935,8 +935,8 @@ static void bitmap_file_clear_bit(struct
 	else
 		__clear_bit_le(bit, paddr);
 	kunmap_atomic(paddr, KM_USER0);
-	if (!test_page_attr(bitmap, page, BITMAP_PAGE_NEEDWRITE)) {
-		set_page_attr(bitmap, page, BITMAP_PAGE_PENDING);
+	if (!test_page_attr(bitmap, page->index, BITMAP_PAGE_NEEDWRITE)) {
+		set_page_attr(bitmap, page->index, BITMAP_PAGE_PENDING);
 		bitmap->allclean = 0;
 	}
 }
@@ -948,7 +948,6 @@ void bitmap_unplug(struct bitmap *bitmap
 {
 	unsigned long i, flags;
 	int dirty, need_write;
-	struct page *page;
 	int wait = 0;
 
 	if (!bitmap || !bitmap->filemap)
@@ -962,19 +961,18 @@ void bitmap_unplug(struct bitmap *bitmap
 			spin_unlock_irqrestore(&bitmap->lock, flags);
 			return;
 		}
-		page = bitmap->filemap[i];
-		dirty = test_page_attr(bitmap, page, BITMAP_PAGE_DIRTY);
-		need_write = test_page_attr(bitmap, page, BITMAP_PAGE_NEEDWRITE);
-		clear_page_attr(bitmap, page, BITMAP_PAGE_DIRTY);
-		clear_page_attr(bitmap, page, BITMAP_PAGE_NEEDWRITE);
+		dirty = test_page_attr(bitmap, i, BITMAP_PAGE_DIRTY);
+		need_write = test_page_attr(bitmap, i, BITMAP_PAGE_NEEDWRITE);
+		clear_page_attr(bitmap, i, BITMAP_PAGE_DIRTY);
+		clear_page_attr(bitmap, i, BITMAP_PAGE_NEEDWRITE);
 		if (dirty || need_write)
-			clear_page_attr(bitmap, page, BITMAP_PAGE_PENDING);
+			clear_page_attr(bitmap, i, BITMAP_PAGE_PENDING);
 		if (dirty)
 			wait = 1;
 		spin_unlock_irqrestore(&bitmap->lock, flags);
 
 		if (dirty || need_write)
-			write_page(bitmap, page, 0);
+			write_page(bitmap, bitmap->filemap[i], 0);
 	}
 	if (wait) { /* if any writes were performed, we need to wait on them */
 		if (bitmap->file)
@@ -1143,7 +1141,7 @@ static int bitmap_init_from_disk(struct
 					       (sector_t)i << bitmap->chunkshift,
 					       needed);
 			bit_cnt++;
-			set_page_attr(bitmap, page, BITMAP_PAGE_PENDING);
+			set_page_attr(bitmap, page->index, BITMAP_PAGE_PENDING);
 		}
 		offset = 0;
 	}
@@ -1175,7 +1173,7 @@ void bitmap_write_all(struct bitmap *bit
 
 	spin_lock_irq(&bitmap->lock);
 	for (i = 0; i < bitmap->file_pages; i++)
-		set_page_attr(bitmap, bitmap->filemap[i],
+		set_page_attr(bitmap, i,
 			      BITMAP_PAGE_NEEDWRITE);
 	spin_unlock_irq(&bitmap->lock);
 }
@@ -1241,11 +1239,11 @@ void bitmap_daemon_work(mddev_t *mddev)
 	 */
 	spin_lock_irqsave(&bitmap->lock, flags);
 	for (j = 0; j < bitmap->file_pages; j++)
-		if (test_page_attr(bitmap, bitmap->filemap[j],
+		if (test_page_attr(bitmap, j,
 				   BITMAP_PAGE_PENDING)) {
-			set_page_attr(bitmap, bitmap->filemap[j],
+			set_page_attr(bitmap, j,
 				      BITMAP_PAGE_NEEDWRITE);
-			clear_page_attr(bitmap, bitmap->filemap[j],
+			clear_page_attr(bitmap, j,
 					BITMAP_PAGE_PENDING);
 		}
 
@@ -1260,7 +1258,7 @@ void bitmap_daemon_work(mddev_t *mddev)
 			sb->events_cleared =
 				cpu_to_le64(bitmap->events_cleared);
 			kunmap_atomic(sb, KM_USER0);
-			set_page_attr(bitmap, bitmap->sb_page,
+			set_page_attr(bitmap, 0,
 				      BITMAP_PAGE_NEEDWRITE);
 		}
 	}
@@ -1309,18 +1307,17 @@ void bitmap_daemon_work(mddev_t *mddev)
 	 * We mustn't write any other blocks before the superblock.
 	 */
 	for (j = 0; j < bitmap->file_pages; j++) {
-		struct page *page = bitmap->filemap[j];
 
-		if (test_page_attr(bitmap, page,
+		if (test_page_attr(bitmap, j,
 				    BITMAP_PAGE_DIRTY))
 			/* bitmap_unplug will handle the rest */
 			break;
-		if (test_page_attr(bitmap, page,
+		if (test_page_attr(bitmap, j,
 				   BITMAP_PAGE_NEEDWRITE)) {
-			clear_page_attr(bitmap, page,
+			clear_page_attr(bitmap, j,
 					BITMAP_PAGE_NEEDWRITE);
 			spin_unlock_irqrestore(&bitmap->lock, flags);
-			write_page(bitmap, page, 0);
+			write_page(bitmap, bitmap->filemap[j], 0);
 			spin_lock_irqsave(&bitmap->lock, flags);
 			if (!bitmap->filemap)
 				break;
