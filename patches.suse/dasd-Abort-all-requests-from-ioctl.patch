From: Hannes Reinecke <hare@suse.de>
Date: Thu, 10 Jan 2013 14:37:24 +0100
Subject: dasd: Abort all requests from ioctl
Git-commit: 5ea34a01423a27d4526f3551e8542f2f991bd4a0
Patch-Mainline: v3.12
References: FATE#311379

When the 'timeout' ioctl is being called we should abort
all requests, not just the first one.
Reason is that we might be calling it for a device is should
be forced to timeout, or there might be other requests
outstanding which have not yet timed out.

Signed-off-by: Hannes Reinecke <hare@suse.de>
---
 drivers/s390/block/dasd_ioctl.c |   23 +++++++++--------------
 1 files changed, 9 insertions(+), 14 deletions(-)

diff --git a/drivers/s390/block/dasd_ioctl.c b/drivers/s390/block/dasd_ioctl.c
index 92b8a55..48973fc 100644
--- a/drivers/s390/block/dasd_ioctl.c
+++ b/drivers/s390/block/dasd_ioctl.c
@@ -148,7 +148,6 @@ static int dasd_ioctl_timeout(struct dasd_block *block)
 	unsigned long flags;
 	struct dasd_device *base;
 	struct dasd_ccw_req *cqr, *n;
-	struct request *req;
 
 	base = block->base;
 	if (!capable (CAP_SYS_ADMIN))
@@ -161,26 +160,22 @@ static int dasd_ioctl_timeout(struct dasd_block *block)
 
 	spin_lock_irqsave(&block->request_queue_lock, flags);
 	/*
-	 * We need to abort the first noretry requests as
-	 * there might be requests on the ccw_queue.
-	 * blk_abort_request() will take care of aborting
-	 * all other noretry requests.
+	 * We need to abort all noretry requests.
+	 * As dasd_times_out() already checks for
+	 * eligible requests we can just call
+	 * blk_abort_request() for every queued request.
 	 */
 	spin_lock(&block->queue_lock);
 	list_for_each_entry_safe(cqr, n, &block->ccw_queue, blocklist) {
 		if (cqr->callback_data &&
 		    cqr->callback_data != (void *)1 &&
-		    cqr->callback_data != (void *)2 )
-			req = cqr->callback_data;
-		else
-			req = NULL;
-		if (req && blk_noretry_request(req))
-			break;
-		req = NULL;
+		    cqr->callback_data != (void *)2 ) {
+			spin_unlock(&block->queue_lock);
+			blk_abort_request(cqr->callback_data);
+			spin_lock(&block->queue_lock);
+		}
 	}
 	spin_unlock(&block->queue_lock);
-	if (req)
-		blk_abort_request(req);
 	spin_unlock_irqrestore(&block->request_queue_lock, flags);
 
 	dasd_schedule_block_bh(block);
-- 
1.7.4.2

