From: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
Subject: [PATCH 101/111]     fs/9p: Don't set dentry->d_op in create routines
Git-commit: b8b80cf37c7f0e32729262f805bc0fa81c3e9d12
Patch-Mainline: 2.6.38
References: FATE#311639

    We do set dentry->d_op in lookup even in case of EOENT entries.
    That implies we should have dentry->d_op already set when
    create/mkdir/mknod/link/symlink routines are called

	upstream commit b8b80cf37c7f0e32729262f805bc0fa81c3e9d12

    Signed-off-by: Aneesh Kumar K.V <aneesh.kumar@linux.vnet.ibm.com>
    Signed-off-by: Eric Van Hensbergen <ericvh@gmail.com>
Signed-off-by: Harsh Prateek Bora <harsh@linux.vnet.ibm.com>
Acked-by: Bruce Rogers <brogers@suse.com>
---
 fs/9p/vfs_inode.c      |    5 -----
 fs/9p/vfs_inode_dotl.c |   10 ----------
 2 files changed, 0 insertions(+), 15 deletions(-)

diff --git a/fs/9p/vfs_inode.c b/fs/9p/vfs_inode.c
index 6288eb0..78533fb 100644
--- a/fs/9p/vfs_inode.c
+++ b/fs/9p/vfs_inode.c
@@ -528,11 +528,6 @@ v9fs_create(struct v9fs_session_info *v9ses, struct inode *dir,
 		goto error;
 	}
 
-	if (v9ses->cache)
-		dentry->d_op = &v9fs_cached_dentry_operations;
-	else
-		dentry->d_op = &v9fs_dentry_operations;
-
 	d_instantiate(dentry, inode);
 	err = v9fs_fid_add(dentry, fid);
 	if (err < 0)
diff --git a/fs/9p/vfs_inode_dotl.c b/fs/9p/vfs_inode_dotl.c
index df19720..655ad3f 100644
--- a/fs/9p/vfs_inode_dotl.c
+++ b/fs/9p/vfs_inode_dotl.c
@@ -210,10 +210,6 @@ v9fs_vfs_create_dotl(struct inode *dir, struct dentry *dentry, int mode,
 		P9_DPRINTK(P9_DEBUG_VFS, "inode creation failed %d\n", err);
 		goto error;
 	}
-	if (v9ses->cache)
-		dentry->d_op = &v9fs_cached_dentry_operations;
-	else
-		dentry->d_op = &v9fs_dentry_operations;
 
 	d_instantiate(dentry, inode);
 	err = v9fs_fid_add(dentry, fid);
@@ -298,7 +294,6 @@ static int v9fs_vfs_mkdir_dotl(struct inode *dir, struct dentry *dentry,
                                 err);
                         goto error;
                 }
-                dentry->d_op = &v9fs_cached_dentry_operations;
                 d_instantiate(dentry, inode);
                 err = v9fs_fid_add(dentry, fid);
                 if (err < 0)
@@ -525,7 +520,6 @@ v9fs_vfs_symlink_dotl(struct inode *dir, struct dentry *dentry,
                                         err);
                         goto error;
                 }
-                dentry->d_op = &v9fs_cached_dentry_operations;
                 d_instantiate(dentry, inode);
                 err = v9fs_fid_add(dentry, fid);
                 if (err < 0)
@@ -538,7 +532,6 @@ v9fs_vfs_symlink_dotl(struct inode *dir, struct dentry *dentry,
                         err = PTR_ERR(inode);
                         goto error;
                 }
-                dentry->d_op = &v9fs_dentry_operations;
                 d_instantiate(dentry, inode);
         }
 
@@ -612,7 +605,6 @@ v9fs_vfs_link_dotl(struct dentry *old_dentry, struct inode *dir,
                 atomic_inc(&old_dentry->d_inode->i_count);
         }
 
-        dentry->d_op = old_dentry->d_op;
         d_instantiate(dentry, old_dentry->d_inode);
 
         return err;
@@ -681,7 +673,6 @@ v9fs_vfs_mknod_dotl(struct inode *dir, struct dentry *dentry, int mode,
                                 err);
                         goto error;
                 }
-                dentry->d_op = &v9fs_cached_dentry_operations;
                 d_instantiate(dentry, inode);
                 err = v9fs_fid_add(dentry, fid);
                 if (err < 0)
@@ -697,7 +688,6 @@ v9fs_vfs_mknod_dotl(struct inode *dir, struct dentry *dentry, int mode,
                         err = PTR_ERR(inode);
                         goto error;
                 }
-                dentry->d_op = &v9fs_dentry_operations;
                 d_instantiate(dentry, inode);
         }
 
-- 
1.7.1.1

