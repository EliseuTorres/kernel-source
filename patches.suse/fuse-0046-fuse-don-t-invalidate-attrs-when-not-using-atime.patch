From: Andrew Gallagher <andrewjcg@fb.com>
Date: Tue, 5 Nov 2013 03:55:43 -0800
Subject: fuse: don't invalidate attrs when not using atime
Git-commit: 451418fc928b5ec1ee96a9afac807b6312811a2a
Patch-mainline: v3.14-rc1
References: FATE#317677

Various read operations (e.g. readlink, readdir) invalidate the cached
attrs for atime changes.  This patch adds a new function
'fuse_invalidate_atime', which checks for a read-only super block and
avoids the attr invalidation in that case.

Signed-off-by: Andrew Gallagher <andrewjcg@fb.com>
Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
---
 fs/fuse/dir.c    |   14 ++++++++++++--
 fs/fuse/file.c   |    4 ++--
 fs/fuse/fuse_i.h |    2 ++
 3 files changed, 16 insertions(+), 4 deletions(-)

--- a/fs/fuse/dir.c
+++ b/fs/fuse/dir.c
@@ -89,6 +89,16 @@ void fuse_invalidate_attr(struct inode *
 	get_fuse_inode(inode)->i_time = 0;
 }
 
+/**
+ * Mark the attributes as stale due to an atime change.  Avoid the invalidate if
+ * atime is not used.
+ */
+void fuse_invalidate_atime(struct inode *inode)
+{
+	if (!IS_RDONLY(inode))
+		fuse_invalidate_attr(inode);
+}
+
 /*
  * Just mark the entry as stale, so that a next attempt to look it up
  * will result in a new lookup call to userspace
@@ -1126,7 +1136,7 @@ static int fuse_readdir(struct file *fil
 				    filldir);
 
 	__free_page(page);
-	fuse_invalidate_attr(inode); /* atime changed */
+	fuse_invalidate_atime(inode);
 	return err;
 }
 
@@ -1159,7 +1169,7 @@ static char *read_link(struct dentry *de
 		link[req->out.args[0].size] = '\0';
  out:
 	fuse_put_request(fc, req);
-	fuse_invalidate_attr(inode); /* atime changed */
+	fuse_invalidate_atime(inode);
 	return link;
 }
 
--- a/fs/fuse/file.c
+++ b/fs/fuse/file.c
@@ -679,7 +679,7 @@ static int fuse_readpage(struct file *fi
 		SetPageUptodate(page);
 	}
 
-	fuse_invalidate_attr(inode); /* atime changed */
+	fuse_invalidate_atime(inode);
  out:
 	unlock_page(page);
 	return err;
@@ -708,7 +708,7 @@ static void fuse_readpages_end(struct fu
 			fuse_read_update_size(inode, pos,
 					      req->misc.read.attr_ver);
 		}
-		fuse_invalidate_attr(inode); /* atime changed */
+		fuse_invalidate_atime(inode);
 	}
 
 	for (i = 0; i < req->num_pages; i++) {
--- a/fs/fuse/fuse_i.h
+++ b/fs/fuse/fuse_i.h
@@ -764,6 +764,8 @@ void fuse_invalidate_attr(struct inode *
 
 void fuse_invalidate_entry_cache(struct dentry *entry);
 
+void fuse_invalidate_atime(struct inode *inode);
+
 /**
  * Acquire reference to fuse_conn
  */
