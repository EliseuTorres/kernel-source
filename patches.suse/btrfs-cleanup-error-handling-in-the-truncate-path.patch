From: Josef Bacik <josef@redhat.com>
Date: Mon, 31 Jan 2011 16:03:11 -0500
Patch-mainline: yes
References: FATE#306586
Subject: [PATCH] Btrfs: cleanup error handling in the truncate path

Now that we can handle having errors in the truncate path lets make sure we
return errors instead of doing BUG_ON() and such.  Thanks,

Signed-off-by: Josef Bacik <josef@redhat.com>
Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/inode.c |   18 ++++++++++++++----
 1 file changed, 14 insertions(+), 4 deletions(-)

--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -2370,6 +2370,11 @@ void btrfs_orphan_cleanup(struct btrfs_r
 
 		/* if we have links, this was a truncate, lets do that */
 		if (inode->i_nlink) {
+			if (!S_ISREG(inode->i_mode)) {
+				WARN_ON(1);
+				iput(inode);
+				continue;
+			}
 			nr_truncate++;
 			btrfs_truncate(inode);
 		} else {
@@ -3645,7 +3650,10 @@ static int btrfs_setattr_size(struct ino
 	btrfs_set_trans_block_group(trans, inode);
 
 	ret = btrfs_orphan_add(trans, inode);
-	BUG_ON(ret);
+	if (ret) {
+		btrfs_end_transaction(trans, root);
+		return ret;
+	}
 
 	nr = trans->blocks_used;
 	btrfs_end_transaction(trans, root);
@@ -3668,7 +3676,10 @@ static int btrfs_setattr_size(struct ino
 		BUG_ON(!trans->block_rsv);
 
 		ret = btrfs_update_inode(trans, root, inode);
-		BUG_ON(ret);
+		if (ret) {
+			btrfs_end_transaction(trans, root);
+			return ret;
+		}
 		if (inode->i_nlink > 0) {
 			ret = btrfs_orphan_del(trans, inode);
 			BUG_ON(ret);
@@ -6497,8 +6508,7 @@ static void btrfs_truncate(struct inode
 	}
 
 	ret = btrfs_truncate_page(inode->i_mapping, inode->i_size);
-	if (ret)
-		return;
+	BUG_ON(ret);
 
 	btrfs_wait_ordered_range(inode, inode->i_size & (~mask), (u64)-1);
 	btrfs_ordered_update_i_size(inode, inode->i_size, NULL);
