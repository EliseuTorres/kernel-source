From: Josef Bacik <jbacik@fusionio.com>
Date: Mon, 13 Aug 2012 15:43:26 -0400
Patch-mainline: 3.7
Git-commit: 7c735313bd1277c2eb28421934d4c7a0fa7339f7
References: FATE#312888
Subject: [PATCH] Btrfs: update last trans if we don't update the
 inode

There is a completely impossible situation to hit where you can preallocate
a file, fsync it, write into the preallocated region, have the transaction
commit twice and then fsync and then immediately lose power and lose all of
the contents of the write.  This patch fixes this just so I feel better
about the situation and because it is lightweight, we just update the
last_trans when we finish an ordered IO and we don't update the inode
itself.  This way we are completely safe and I feel better.  Thanks,

Signed-off-by: Josef Bacik <jbacik@fusionio.com>
Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/inode.c |    2 ++
 1 file changed, 2 insertions(+)

--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -1948,6 +1948,8 @@ static int btrfs_finish_ordered_io(struc
 			btrfs_abort_transaction(trans, root, ret);
 			goto out_unlock;
 		}
+	} else {
+		btrfs_set_inode_last_trans(trans, inode);
 	}
 	ret = 0;
 out_unlock:
