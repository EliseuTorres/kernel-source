Git-commit: 332627db00a982b395f5b141d50298866bfec98c
From: Joe Thornber <ejt@redhat.com>
Date: Fri, 27 Jul 2012 15:08:10 +0100
Subject: [PATCH] dm thin metadata: move bm creation code into
 create_persistent_data_objects
Patch-mainline: v3.6-rc1
Reference: FATE#313903

Move block manager creation and the check for unformatted metadata into
__create_persistent_data_objects().

Signed-off-by: Joe Thornber <ejt@redhat.com>
Signed-off-by: Mike Snitzer <snitzer@redhat.com>
Signed-off-by: Alasdair G Kergon <agk@redhat.com>
Acked-by: NeilBrown <nfbrown@suse.com>

---
 drivers/md/dm-thin-metadata.c |   56 ++++++++++++++++++++++++------------------
 1 file changed, 32 insertions(+), 24 deletions(-)

--- linux-3.0-SLE11-SP3.orig/drivers/md/dm-thin-metadata.c
+++ linux-3.0-SLE11-SP3/drivers/md/dm-thin-metadata.c
@@ -357,7 +357,7 @@ static int superblock_lock(struct dm_poo
 				&sb_validator, sblock);
 }
 
-static int superblock_all_zeroes(struct dm_block_manager *bm, int *result)
+static int __superblock_all_zeroes(struct dm_block_manager *bm, int *result)
 {
 	int r;
 	unsigned i;
@@ -422,9 +422,9 @@ static void __setup_btree_details(struct
 	pmd->details_info.value_type.equal = NULL;
 }
 
-static int __create_persistent_data_objects(struct dm_pool_metadata *pmd,
-					    struct dm_block_manager *bm,
-					    dm_block_t nr_blocks, int create)
+static int __open_or_format_metadata(struct dm_pool_metadata *pmd,
+				     struct dm_block_manager *bm,
+				     dm_block_t nr_blocks, int create)
 {
 	int r;
 	struct dm_space_map *sm, *data_sm;
@@ -509,6 +509,32 @@ bad:
 	return r;
 }
 
+static int __create_persistent_data_objects(struct dm_pool_metadata *pmd,
+					    dm_block_t nr_blocks, int *create)
+{
+	int r;
+
+	pmd->bm = dm_block_manager_create(pmd->bdev, THIN_METADATA_BLOCK_SIZE,
+					  THIN_METADATA_CACHE_SIZE,
+					  THIN_MAX_CONCURRENT_LOCKS);
+	if (IS_ERR(pmd->bm)) {
+		DMERR("could not create block manager");
+		return PTR_ERR(pmd->bm);
+	}
+
+	r = __superblock_all_zeroes(pmd->bm, create);
+	if (r) {
+		dm_block_manager_destroy(pmd->bm);
+		return r;
+	}
+
+	r = __open_or_format_metadata(pmd, pmd->bm, nr_blocks, *create);
+	if (r)
+		dm_block_manager_destroy(pmd->bm);
+
+	return r;
+}
+
 static int __begin_transaction(struct dm_pool_metadata *pmd)
 {
 	int r;
@@ -666,7 +692,6 @@ struct dm_pool_metadata *dm_pool_metadat
 	struct thin_disk_superblock *disk_super;
 	struct dm_pool_metadata *pmd;
 	sector_t bdev_size = i_size_read(bdev->bd_inode) >> SECTOR_SHIFT;
-	struct dm_block_manager *bm;
 	int create;
 	struct dm_block *sblock;
 
@@ -676,30 +701,13 @@ struct dm_pool_metadata *dm_pool_metadat
 		return ERR_PTR(-ENOMEM);
 	}
 
-	bm = dm_block_manager_create(bdev, THIN_METADATA_BLOCK_SIZE,
-				     THIN_METADATA_CACHE_SIZE,
-				     THIN_MAX_CONCURRENT_LOCKS);
-	if (IS_ERR(bm)) {
-		r = PTR_ERR(bm);
-		DMERR("could not create block manager");
-		kfree(pmd);
-		return ERR_PTR(r);
-	}
-
-	r = superblock_all_zeroes(bm, &create);
-	if (r) {
-		dm_block_manager_destroy(bm);
-		kfree(pmd);
-		return ERR_PTR(r);
-	}
+	pmd->bdev = bdev;
 
-	r = __create_persistent_data_objects(pmd, bm, 0, create);
+	r = __create_persistent_data_objects(pmd, 0, &create);
 	if (r) {
-		dm_block_manager_destroy(bm);
 		kfree(pmd);
 		return ERR_PTR(r);
 	}
-	pmd->bdev = bdev;
 
 	if (!create) {
 		r = __begin_transaction(pmd);
