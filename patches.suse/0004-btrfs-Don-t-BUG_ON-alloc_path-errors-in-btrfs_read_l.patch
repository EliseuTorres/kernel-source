From 1748f843a0190ef4332d03a64263f383af72682b Mon Sep 17 00:00:00 2001
From: Mark Fasheh <mfasheh@suse.com>
Date: Tue, 12 Jul 2011 11:25:31 -0700
Subject: [PATCH 4/7] btrfs: Don't BUG_ON alloc_path errors in btrfs_read_locked_inode
Patch-mainline: v3.0.0

btrfs_iget() also needed an update so that errors from btrfs_locked_inode()
are caught and bubbled back up.

Signed-off-by: Mark Fasheh <mfasheh@suse.com>
---
 fs/btrfs/inode.c |   22 +++++++++++++++++-----
 1 files changed, 17 insertions(+), 5 deletions(-)

Index: linux-2.6.32-btrfs-error-handling/fs/btrfs/inode.c
===================================================================
--- linux-2.6.32-btrfs-error-handling.orig/fs/btrfs/inode.c
+++ linux-2.6.32-btrfs-error-handling/fs/btrfs/inode.c
@@ -2508,7 +2508,9 @@ static void btrfs_read_locked_inode(stru
 	int ret;
 
 	path = btrfs_alloc_path();
-	BUG_ON(!path);
+	if (!path)
+		goto make_bad;
+
 	path->leave_spinning = 1;
 	memcpy(&location, &BTRFS_I(inode)->location, sizeof(location));
 
@@ -3951,6 +3953,7 @@ struct inode *btrfs_iget(struct super_bl
 			 struct btrfs_root *root, int *new)
 {
 	struct inode *inode;
+	int bad_inode = 0;
 
 	inode = btrfs_iget_locked(s, location->objectid, root);
 	if (!inode)
@@ -3960,10 +3963,19 @@ struct inode *btrfs_iget(struct super_bl
 		BTRFS_I(inode)->root = root;
 		memcpy(&BTRFS_I(inode)->location, location, sizeof(*location));
 		btrfs_read_locked_inode(inode);
-		inode_tree_add(inode);
-		unlock_new_inode(inode);
-		if (new)
-			*new = 1;
+		if (!is_bad_inode(inode)) {
+			inode_tree_add(inode);
+			unlock_new_inode(inode);
+			if (new)
+				*new = 1;
+		} else {
+			bad_inode = 1;
+		}
+	}
+
+	if (bad_inode) {
+		iput(inode);
+		inode = ERR_PTR(-ESTALE);
 	}
 
 	return inode;
