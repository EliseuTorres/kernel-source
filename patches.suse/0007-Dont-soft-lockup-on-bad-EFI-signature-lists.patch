From 81adc779dba0f45f10b5ff307bd55832305f1112 Mon Sep 17 00:00:00 2001
From: Josh Boyer <jwboyer@redhat.com>
Date: Wed, 12 Dec 2012 11:48:49 -0500
Subject: [PATCH 20/20] Don't soft lockup on bad EFI signature lists
Git-commit: Not yet
Patch-mainline: Not yet, from Fedora 18 kernel
References: fate#314574
Target: SLE-11 SP3

If a signature list is read from an UEFI variable and that contains bogus
data, we can go into an infinite loop in efi_parse_signature_list.  Notably,
if one of the entries in the list has a signature_size that is larger than
the actual signature size, it will fail the elsize < esize test.  Simply
continuing in the loop without modifying the data or size variables just
leads to the same list entry being parsed repeatedly.

Since the data is bogus, but we can't tell which value is actually
incorrect, we need to stop parsing the list.  Just return -EBADMSG instead.

Signed-off-by: Josh Boyer <jwboyer@redhat.com>
Acked-by: Lee, Chun-Yi <jlee@suse.com>
---
 crypto/asymmetric_keys/efi_parser.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/crypto/asymmetric_keys/efi_parser.c b/crypto/asymmetric_keys/efi_parser.c
index 59b859a..a0b8a3a 100644
--- a/crypto/asymmetric_keys/efi_parser.c
+++ b/crypto/asymmetric_keys/efi_parser.c
@@ -61,7 +61,7 @@ int __init parse_efi_signature_list(const void *data, size_t size, struct key *k
 		    elsize < esize ||
 		    elsize % esize != 0) {
 			pr_devel("- bad size combo @%x\n", offs);
-			continue;
+			return -EBADMSG;
 		}
 
 		if (efi_guidcmp(list.signature_type, efi_cert_x509_guid) != 0) {
-- 
1.8.0.1

