From: Mel Gorman <mgorman@suse.de>
Date: Mon, 21 Mar 2011 12:46:28 +0000
Subject: [PATCH] nfs: Create a memory reserve for nfs_page_cache
Patch-mainline: Not yet
References: bnc#678466

When swap pages are being written back to NFS, it is still necessary
to create a request to handle the write. These are allocated from the
nfs_page slab cache but no reservation exists. A debugging patch showed
that without the excessive route cache reserves the nfs_page allocations
are pushing zones below the emergency reserves and putting the machine at
risk of deadlock. This patch creates an NFS page request cache whose size
is related to the size of the NFS-backed swap files.

Signed-off-by: Mel Gorman <mgorman@suse.de>
---
 fs/nfs/file.c     |   14 ++++++++++++++
 fs/nfs/pagelist.c |   17 +++++++++++++----
 mm/reserve.c      |    1 +
 3 files changed, 28 insertions(+), 4 deletions(-)

Index: linux-2.6.32-SLE11-SP1/fs/nfs/file.c
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/fs/nfs/file.c
+++ linux-2.6.32-SLE11-SP1/fs/nfs/file.c
@@ -526,13 +526,27 @@ static int nfs_launder_page(struct page
 }
 
 #ifdef CONFIG_NFS_SWAP
+extern struct kmem_cache *nfs_page_cachep;
+extern struct mem_reserve nfs_page_reserve;
+
 static int nfs_swapon(struct file *file)
 {
+	int ret;
+
+	/* Reserve nfs_page_cache for the maximum swapfile size */
+	ret = mem_reserve_kmem_cache_add(&nfs_page_reserve, nfs_page_cachep,
+		i_size_read(file->f_mapping->host) >> PAGE_SHIFT);
+	if (ret)
+		return ret;
+
 	return xs_swapper(NFS_CLIENT(file->f_mapping->host)->cl_xprt, 1);
 }
 
 static int nfs_swapoff(struct file *file)
 {
+	mem_reserve_kmem_cache_add(&nfs_page_reserve, nfs_page_cachep,
+		-(i_size_read(file->f_mapping->host) >> PAGE_SHIFT));
+
 	return xs_swapper(NFS_CLIENT(file->f_mapping->host)->cl_xprt, 0);
 }
 #endif
Index: linux-2.6.32-SLE11-SP1/fs/nfs/pagelist.c
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/fs/nfs/pagelist.c
+++ linux-2.6.32-SLE11-SP1/fs/nfs/pagelist.c
@@ -21,13 +21,14 @@
 
 #include "internal.h"
 
-static struct kmem_cache *nfs_page_cachep;
+struct kmem_cache *nfs_page_cachep;
+struct mem_reserve nfs_page_reserve;
 
 static inline struct nfs_page *
-nfs_page_alloc(void)
+nfs_page_alloc(gfp_t gfp_mask)
 {
 	struct nfs_page	*p;
-	p = kmem_cache_alloc(nfs_page_cachep, GFP_NOIO);
+	p = kmem_cache_alloc(nfs_page_cachep, gfp_mask);
 	if (p) {
 		memset(p, 0, sizeof(*p));
 		INIT_LIST_HEAD(&p->wb_list);
@@ -59,10 +60,13 @@ nfs_create_request(struct nfs_open_conte
 		   unsigned int offset, unsigned int count)
 {
 	struct nfs_page		*req;
+	gfp_t gfp_mask = GFP_NOIO;
+	if (IS_SWAPFILE(inode))
+		gfp_mask |= __GFP_MEMALLOC;
 
 	for (;;) {
 		/* try to allocate the request struct */
-		req = nfs_page_alloc();
+		req = nfs_page_alloc(gfp_mask);
 		if (req != NULL)
 			break;
 
@@ -433,6 +437,11 @@ int __init nfs_init_nfspagecache(void)
 	if (nfs_page_cachep == NULL)
 		return -ENOMEM;
 
+#ifdef CONFIG_NFS_SWAP
+	mem_reserve_init(&nfs_page_reserve, "NFS page request cache",
+						&mem_reserve_root);
+#endif
+
 	return 0;
 }
 
