From: David Sterba <dsterba@suse.cz>
Date: Fri, 16 Mar 2012 18:18:58 +0100
Patch-mainline: pending
References: FATE#306586 bnc#748632
Subject: [PATCH] btrfs: handle errors from read_tree_block

Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/disk-io.c    |   34 +++++++++++++++++++++++-----------
 fs/btrfs/print-tree.c |    4 ++++
 fs/btrfs/relocation.c |    1 +
 3 files changed, 28 insertions(+), 11 deletions(-)

--- a/fs/btrfs/disk-io.c
+++ b/fs/btrfs/disk-io.c
@@ -1374,10 +1374,8 @@ struct btrfs_root *btrfs_read_fs_root_no
 	if (location->offset == (u64)-1) {
 		ret = find_and_setup_root(tree_root, fs_info,
 					  location->objectid, root);
-		if (ret) {
-			kfree(root);
-			return ERR_PTR(ret);
-		}
+		if (ret)
+			goto error;
 		goto out;
 	}
 
@@ -1387,9 +1385,10 @@ struct btrfs_root *btrfs_read_fs_root_no
 
 	path = btrfs_alloc_path();
 	if (!path) {
-		kfree(root);
-		return ERR_PTR(-ENOMEM);
+		ret = -ENOMEM;
+		goto error;
 	}
+
 	ret = btrfs_search_slot(NULL, tree_root, location, path, 0, 0);
 	if (ret == 0) {
 		l = path->nodes[0];
@@ -1400,18 +1399,20 @@ struct btrfs_root *btrfs_read_fs_root_no
 	}
 	btrfs_free_path(path);
 	if (ret) {
-		kfree(root);
 		if (ret > 0)
 			ret = -ENOENT;
-		return ERR_PTR(ret);
+		goto error;
 	}
 
 	generation = btrfs_root_generation(&root->root_item);
 	blocksize = btrfs_level_size(root, btrfs_root_level(&root->root_item));
 	root->node = read_tree_block(root, btrfs_root_bytenr(&root->root_item),
 				     blocksize, generation);
+	if (!root->node || !btrfs_buffer_uptodate(root->node, generation, 0)) {
+		ret = -EIO;
+		goto error;
+	}
 	root->commit_root = btrfs_root_node(root);
-	BUG_ON(!root->node); /* -ENOMEM */
 out:
 	if (location->objectid != BTRFS_TREE_LOG_OBJECTID) {
 		root->ref_cows = 1;
@@ -1419,6 +1420,10 @@ out:
 	}
 
 	return root;
+
+error:
+	kfree(root);
+	return ERR_PTR(ret);
 }
 
 struct btrfs_root *btrfs_read_fs_root_no_name(struct btrfs_fs_info *fs_info,
@@ -2347,8 +2352,8 @@ int open_ctree(struct super_block *sb,
 	chunk_root->node = read_tree_block(chunk_root,
 					   btrfs_super_chunk_root(disk_super),
 					   blocksize, generation);
-	BUG_ON(!chunk_root->node); /* -ENOMEM */
-	if (!test_bit(EXTENT_BUFFER_UPTODATE, &chunk_root->node->bflags)) {
+	if (!chunk_root->node ||
+	    !test_bit(EXTENT_BUFFER_UPTODATE, &chunk_root->node->bflags)) {
 		printk(KERN_WARNING "btrfs: failed to read chunk root on %s\n",
 		       sb->s_id);
 		goto fail_tree_roots;
@@ -2474,6 +2479,13 @@ retry_root_backup:
 		log_tree_root->node = read_tree_block(tree_root, bytenr,
 						      blocksize,
 						      generation + 1);
+		if (!log_tree_root->node ||
+		    !test_bit(EXTENT_BUFFER_UPTODATE, &log_tree_root->node->bflags)) {
+			printk(KERN_WARNING "btrfs: failed to read log tree root on %s\n",
+			       sb->s_id);
+			kfree(log_tree_root);
+			goto fail_trans_kthread;
+		}
 		/* returns with log_tree_root freed on success */
 		ret = btrfs_recover_log_trees(log_tree_root);
 		if (ret) {
--- a/fs/btrfs/print-tree.c
+++ b/fs/btrfs/print-tree.c
@@ -330,6 +330,10 @@ void btrfs_print_tree(struct btrfs_root
 					btrfs_node_blockptr(c, i),
 					btrfs_level_size(root, level - 1),
 					btrfs_node_ptr_generation(c, i));
+		if (!next) {
+			printk(KERN_INFO "\tno tree block found!\n");
+			continue;
+		}
 		if (btrfs_is_leaf(next) &&
 		   level != 1)
 			BUG();
--- a/fs/btrfs/relocation.c
+++ b/fs/btrfs/relocation.c
@@ -1912,6 +1912,7 @@ int walk_down_reloc_tree(struct btrfs_ro
 		bytenr = btrfs_node_blockptr(eb, path->slots[i]);
 		blocksize = btrfs_level_size(root, i - 1);
 		eb = read_tree_block(root, bytenr, blocksize, ptr_gen);
+		BUG_ON(!eb);
 		BUG_ON(btrfs_header_level(eb) != i - 1);
 		path->nodes[i - 1] = eb;
 		path->slots[i - 1] = 0;
