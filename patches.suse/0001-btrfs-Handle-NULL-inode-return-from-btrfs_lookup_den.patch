From 104db34933950e5c6af3435b521787f85278706b Mon Sep 17 00:00:00 2001
From: Mark Fasheh <mfasheh@suse.com>
Date: Tue, 26 Jul 2011 15:06:41 -0700
Subject: [PATCH 1/1] btrfs: Handle NULL inode return from btrfs_lookup_dentry()
Patch-mainline: v3.0.0

Right now in create_snapshot(), we'll BUG() if btrfs_lookup_dentry() returns
a NULL inode (negative dentry). Getting a negative dentry here probably
isn't ever expected to happen however two things lead me to believe that we
should trap this anyway:

- I don't see any possiblity of serious fs corruption from handling the
  error.  I do wonder thoug if we could have an "orphaned" snapshot?  Even
  if we did that doesn't strike me as needing to crash the machine.

- It's very trivial to pass an -ENOENT back to userspace as we're pretty
  high up the call path at this point.

Signed-off-by: Mark Fasheh <mfasheh@suse.com>
---
 fs/btrfs/ioctl.c |    8 +++++---
 1 files changed, 5 insertions(+), 3 deletions(-)

Index: linux-2.6.32-btrfs-error-handling/fs/btrfs/ioctl.c
===================================================================
--- linux-2.6.32-btrfs-error-handling.orig/fs/btrfs/ioctl.c
+++ linux-2.6.32-btrfs-error-handling/fs/btrfs/ioctl.c
@@ -460,16 +460,17 @@ static int create_snapshot(struct btrfs_
 	if (ret)
 		goto fail;
 
+	ret = 0;
 	parent = dget_parent(dentry);
 	inode = btrfs_lookup_dentry(parent->d_inode, dentry);
 	dput(parent);
 	if (IS_ERR(inode)) {
 		ret = PTR_ERR(inode);
 		goto fail;
-	}
-	BUG_ON(!inode);
+	} else if (inode == NULL)
+		ret = -ENOENT;
+
 	d_instantiate(dentry, inode);
-	ret = 0;
 fail:
 	kfree(pending_snapshot);
 	return ret;
