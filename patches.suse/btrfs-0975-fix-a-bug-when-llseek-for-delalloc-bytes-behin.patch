From: Liu Bo <bo.li.liu@oracle.com>
Date: Mon, 7 Jan 2013 10:10:12 +0000
Patch-mainline: 3.8
Git-commit: f9e4fb53938de5db01950c9dfe479703b2f5c964
References: FATE#312888
Subject: [PATCH] Btrfs: fix a bug when llseek for delalloc bytes
 behind prealloc extents

xfstests case 285 complains.

It it because btrfs did not try to find unwritten delalloc
bytes(only dirty pages, not yet writeback) behind prealloc
extents, it ends up finding nothing while we're with SEEK_DATA.

Signed-off-by: Liu Bo <bo.li.liu@oracle.com>
Signed-off-by: Josef Bacik <jbacik@fusionio.com>
Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/file.c  |    9 ++++++---
 fs/btrfs/inode.c |   11 ++++++++---
 2 files changed, 14 insertions(+), 6 deletions(-)

--- a/fs/btrfs/file.c
+++ b/fs/btrfs/file.c
@@ -2351,9 +2351,12 @@ static int find_desired_extent(struct in
 					}
 				}
 
-				*offset = start;
-				free_extent_map(em);
-				break;
+				if (!test_bit(EXTENT_FLAG_PREALLOC,
+					      &em->flags)) {
+					*offset = start;
+					free_extent_map(em);
+					break;
+				}
 			}
 		}
 
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -5636,10 +5636,13 @@ struct extent_map *btrfs_get_extent_fiem
 		return em;
 	if (em) {
 		/*
-		 * if our em maps to a hole, there might
-		 * actually be delalloc bytes behind it
+		 * if our em maps to
+		 * -  a hole or
+		 * -  a pre-alloc extent,
+		 * there might actually be delalloc bytes behind it.
 		 */
-		if (em->block_start != EXTENT_MAP_HOLE)
+		if (em->block_start != EXTENT_MAP_HOLE &&
+		    !test_bit(EXTENT_FLAG_PREALLOC, &em->flags))
 			return em;
 		else
 			hole_em = em;
@@ -5721,6 +5724,8 @@ struct extent_map *btrfs_get_extent_fiem
 			 */
 			em->block_start = hole_em->block_start;
 			em->block_len = hole_len;
+			if (test_bit(EXTENT_FLAG_PREALLOC, &hole_em->flags))
+				set_bit(EXTENT_FLAG_PREALLOC, &em->flags);
 		} else {
 			em->start = range_start;
 			em->len = found;
