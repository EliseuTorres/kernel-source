Git-commit: 983c7db347db8ce2d8453fd1d89b7a4bb6920d56
From: Milan Broz <mbroz@redhat.com>
Date: Sun, 25 Sep 2011 23:26:21 +0100
Subject: [PATCH] dm crypt: always disable discard_zeroes_data
Patch-mainline: v3.1-rc10
Reference: FATE#313903

If optional discard support in dm-crypt is enabled, discards requests
bypass the crypt queue and blocks of the underlying device are discarded.
For the read path, discarded blocks are handled the same as normal
ciphertext blocks, thus decrypted.

So if the underlying device announces discarded regions return zeroes,
dm-crypt must disable this flag because after decryption there is just
random noise instead of zeroes.

Signed-off-by: Milan Broz <mbroz@redhat.com>
Signed-off-by: Alasdair G Kergon <agk@redhat.com>
Acked-by: NeilBrown <nfbrown@suse.com>

---
 drivers/md/dm-crypt.c         |    2 ++
 drivers/md/dm-table.c         |   19 +++++++++++++++++++
 include/linux/device-mapper.h |    5 +++++
 3 files changed, 26 insertions(+)

--- linux-3.0-SLE11-SP3.orig/drivers/md/dm-crypt.c
+++ linux-3.0-SLE11-SP3/drivers/md/dm-crypt.c
@@ -1670,6 +1670,8 @@ static int crypt_ctr(struct dm_target *t
 	}
 
 	ti->num_flush_requests = 1;
+	ti->discard_zeroes_data_unsupported = 1;
+
 	return 0;
 
 bad:
--- linux-3.0-SLE11-SP3.orig/drivers/md/dm-table.c
+++ linux-3.0-SLE11-SP3/drivers/md/dm-table.c
@@ -1301,6 +1301,22 @@ static bool dm_table_supports_flush(stru
 	return 0;
 }
 
+static bool dm_table_discard_zeroes_data(struct dm_table *t)
+{
+	struct dm_target *ti;
+	unsigned i = 0;
+
+	/* Ensure that all targets supports discard_zeroes_data. */
+	while (i < dm_table_get_num_targets(t)) {
+		ti = dm_table_get_target(t, i++);
+
+		if (ti->discard_zeroes_data_unsupported)
+			return 0;
+	}
+
+	return 1;
+}
+
 void dm_table_set_restrictions(struct dm_table *t, struct request_queue *q,
 			       struct queue_limits *limits)
 {
@@ -1323,6 +1339,9 @@ void dm_table_set_restrictions(struct dm
 	}
 	blk_queue_flush(q, flush);
 
+	if (!dm_table_discard_zeroes_data(t))
+		q->limits.discard_zeroes_data = 0;
+
 	dm_table_set_integrity(t);
 
 	/*
--- linux-3.0-SLE11-SP3.orig/include/linux/device-mapper.h
+++ linux-3.0-SLE11-SP3/include/linux/device-mapper.h
@@ -197,6 +197,11 @@ struct dm_target {
 	 * whether or not its underlying devices have support.
 	 */
 	unsigned discards_supported:1;
+
+	/*
+	 * Set if this target does not return zeroes on discarded blocks.
+	 */
+	unsigned discard_zeroes_data_unsupported:1;
 };
 
 /* Each target can link one of these into the table */
