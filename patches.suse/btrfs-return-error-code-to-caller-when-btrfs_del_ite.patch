From: Tsutomu Itoh <t-itoh@jp.fujitsu.com>
Date: Thu, 19 May 2011 04:37:44 +0000
Patch-mainline: yes
References: FATE#306586
Subject: [PATCH] Btrfs: return error code to caller when
 btrfs_del_item fails

The error code is returned instead of calling BUG_ON when
btrfs_del_item returns the error.

Signed-off-by: Tsutomu Itoh <t-itoh@jp.fujitsu.com>
Signed-off-by: Chris Mason <chris.mason@oracle.com>
Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/file-item.c |   10 ++++++----
 fs/btrfs/root-tree.c |    6 +++++-
 fs/btrfs/tree-log.c  |   10 +++++++---
 fs/btrfs/volumes.c   |    4 +---
 4 files changed, 19 insertions(+), 11 deletions(-)

Index: linux-2.6.32-SLE11-SP2/fs/btrfs/file-item.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/btrfs/file-item.c
+++ linux-2.6.32-SLE11-SP2/fs/btrfs/file-item.c
@@ -557,10 +557,10 @@ int btrfs_del_csums(struct btrfs_trans_h
 		ret = btrfs_search_slot(trans, root, &key, path, -1, 1);
 		if (ret > 0) {
 			if (path->slots[0] == 0)
-				goto out;
+				break;
 			path->slots[0]--;
 		} else if (ret < 0) {
-			goto out;
+			break;
 		}
 
 		leaf = path->nodes[0];
@@ -585,7 +585,8 @@ int btrfs_del_csums(struct btrfs_trans_h
 		/* delete the entire item, it is inside our range */
 		if (key.offset >= bytenr && csum_end <= end_byte) {
 			ret = btrfs_del_item(trans, root, path);
-			BUG_ON(ret);
+			if (ret)
+				goto out;
 			if (key.offset == bytenr)
 				break;
 		} else if (key.offset < bytenr && csum_end > end_byte) {
@@ -639,9 +640,10 @@ int btrfs_del_csums(struct btrfs_trans_h
 		}
 		btrfs_release_path(path);
 	}
+	ret = 0;
 out:
 	btrfs_free_path(path);
-	return 0;
+	return ret;
 }
 
 int btrfs_csum_file_blocks(struct btrfs_trans_handle *trans,
Index: linux-2.6.32-SLE11-SP2/fs/btrfs/root-tree.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/btrfs/root-tree.c
+++ linux-2.6.32-SLE11-SP2/fs/btrfs/root-tree.c
@@ -338,7 +338,10 @@ again:
 		*sequence = btrfs_root_ref_sequence(leaf, ref);
 
 		ret = btrfs_del_item(trans, tree_root, path);
-		BUG_ON(ret);
+		if (ret) {
+			err = ret;
+			goto out;
+		}
 	} else
 		err = -ENOENT;
 
@@ -350,6 +353,7 @@ again:
 		goto again;
 	}
 
+out:
 	btrfs_free_path(path);
 	return err;
 }
Index: linux-2.6.32-SLE11-SP2/fs/btrfs/tree-log.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/btrfs/tree-log.c
+++ linux-2.6.32-SLE11-SP2/fs/btrfs/tree-log.c
@@ -1050,7 +1050,8 @@ static noinline int fixup_inode_link_cou
 			break;
 
 		ret = btrfs_del_item(trans, root, path);
-		BUG_ON(ret);
+		if (ret)
+			goto out;
 
 		btrfs_release_path(path);
 		inode = read_one_inode(root, key.offset);
@@ -1068,8 +1069,10 @@ static noinline int fixup_inode_link_cou
 		 */
 		key.offset = (u64)-1;
 	}
+	ret = 0;
+out:
 	btrfs_release_path(path);
-	return 0;
+	return ret;
 }
 
 
@@ -2588,7 +2591,8 @@ static int drop_objectid_items(struct bt
 			break;
 
 		ret = btrfs_del_item(trans, log, path);
-		BUG_ON(ret);
+		if (ret)
+			break;
 		btrfs_release_path(path);
 	}
 	btrfs_release_path(path);
Index: linux-2.6.32-SLE11-SP2/fs/btrfs/volumes.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/fs/btrfs/volumes.c
+++ linux-2.6.32-SLE11-SP2/fs/btrfs/volumes.c
@@ -981,7 +981,6 @@ static int btrfs_free_dev_extent(struct
 	if (device->bytes_used > 0)
 		device->bytes_used -= btrfs_dev_extent_length(leaf, extent);
 	ret = btrfs_del_item(trans, root, path);
-	BUG_ON(ret);
 
 out:
 	btrfs_free_path(path);
@@ -1784,10 +1783,9 @@ static int btrfs_free_chunk(struct btrfs
 	BUG_ON(ret);
 
 	ret = btrfs_del_item(trans, root, path);
-	BUG_ON(ret);
 
 	btrfs_free_path(path);
-	return 0;
+	return ret;
 }
 
 static int btrfs_del_sys_chunk(struct btrfs_root *root, u64 chunk_objectid, u64
