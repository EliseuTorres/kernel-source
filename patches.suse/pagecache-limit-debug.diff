From: Kurt Garloff <garloff@suse.de>
Subject: Debugging for pagecache limit patch (DISABLED)
References: FATE 309111
Patch-mainline: Never

This patch is meant for debugging only and is thus not 
applied in the official kernels.

Signed-off-by: Kurt Garloff <garloff@suse.de>


Index: linux-2.6.32-SLE11-SP1/mm/vmscan.c
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/mm/vmscan.c
+++ linux-2.6.32-SLE11-SP1/mm/vmscan.c
@@ -2447,12 +2447,14 @@ static void __shrink_page_cache(gfp_t ma
 		.isolate_pages = isolate_pages_global,
 	};
 	struct reclaim_state *old_rs = current->reclaim_state;
 	long nr_pages;
+	long new_bal, old_bal;
+	static long repeat = 0;
 
 	/* How many pages are we over the limit?
 	 * But don't enforce limit if there's plenty of free mem */
-	nr_pages = pagecache_over_limit();
+	old_bal = nr_pages = pagecache_over_limit();
 
 	/* Don't need to go there in one step; as the freed
 	 * pages are counted FREE_TO_PAGECACHE_RATIO times, this
 	 * is still more than minimally needed. */
@@ -2496,8 +2498,14 @@ static void __shrink_page_cache(gfp_t ma
 		}
 	}
 
 out:
+	new_bal = pagecache_over_limit();
+	if (new_bal || ret < nr_pages)
+		printk(KERN_WARNING "shrink_page_cache(%08x): no %li, target %li, done %li, pass %i, over %li->%li\n",
+			mask, repeat, nr_pages, ret, pass, old_bal, new_bal);
+	repeat++;
+
 	current->reclaim_state = old_rs;
 }
 
 void shrink_page_cache(gfp_t mask, struct page *page)
