From: Kurt Garloff <garloff@suse.de>
Subject: Disregard mapped pages when looking at pagecache size limit
Reference: FATE309111
Patch-mainline: Never

We only want to limit unmapped page cache, but not the pages that
are mapped, such as running binaries or SHMEM.

Also, as we don't limit the mapped part of the page cache any more,
we don't need to go over the limit as much when there's free memory.

Signed-off-by: Kurt Garloff <garloff@suse.de>

Index: linux-2.6.32-SLE11-SP1/mm/page_alloc.c
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/mm/page_alloc.c
+++ linux-2.6.32-SLE11-SP1/mm/page_alloc.c
@@ -5095,9 +5095,11 @@ out:
  * If high is set we'll apply a 1.125x higher baseline
  */
 unsigned long pagecache_over_limit(int synch)
 {
-	unsigned long pgcache_pages = global_page_state(NR_FILE_PAGES);
+	/* We only want to limit unmapped page cache pages */
+	unsigned long pgcache_pages = global_page_state(NR_FILE_PAGES)
+				    - global_page_state(NR_FILE_MAPPED);
 	unsigned long free_pages = global_page_state(NR_FREE_PAGES);
 	unsigned long limit;
 
 	limit = vm_pagecache_limit_mb * ((1024*1024UL)/PAGE_SIZE) +
Index: linux-2.6.32-SLE11-SP1/include/linux/swap.h
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/include/linux/swap.h
+++ linux-2.6.32-SLE11-SP1/include/linux/swap.h
@@ -246,9 +246,9 @@ extern unsigned long mem_cgroup_shrink_n
 						int nid);
 extern int __isolate_lru_page(struct page *page, int mode, int file);
 extern unsigned long shrink_all_memory(unsigned long nr_pages);
 extern int vm_swappiness;
-#define FREE_TO_PAGECACHE_RATIO 16
+#define FREE_TO_PAGECACHE_RATIO 8
 extern unsigned long pagecache_over_limit(int synch);
 extern void shrink_page_cache(gfp_t mask, struct page *page);
 extern unsigned int vm_pagecache_limit_mb;
 extern int remove_mapping(struct address_space *mapping, struct page *page);
Index: linux-2.6.32-SLE11-SP1/Documentation/vm/pagecache-limit
===================================================================
--- linux-2.6.32-SLE11-SP1.orig/Documentation/vm/pagecache-limit
+++ linux-2.6.32-SLE11-SP1/Documentation/vm/pagecache-limit
@@ -3,16 +3,17 @@ Functionality:
 The patch introduces a new tunable in the proc filesystem:
 
 /proc/sys/vm/pagecache_limit_mb
 
-This tunable sets a limit to the pagecache in megabytes.
-If non-zero, it should not be set below 4 (4MB), or the system might behave erratically. In real-life, much larger limits (a few hundred MB to some GBs) will be useful.
+This tunable sets a limit to the unmapped pages in the pagecache in megabytes.
+If non-zero, it should not be set below 4 (4MB), or the system might behave erratically. In real-life, much larger limits (a few hundred MBs) will be useful.
 
 Examples:
-echo 1024 >/proc/sys/vm/pagecache_limit_mb
+echo 512 >/proc/sys/vm/pagecache_limit_mb
 
-This sets a baseline limits for the page cache (not the buffer cache!) of 1GiB.
-NOTE: The real limit depends on the amount of free memory. Every existing free page allows the page cache to grow 16x the amount of free memory above the set baseline. As soon as the free memory is needed, we free up page cache.
+This sets a baseline limits for the page cache (not the buffer cache!) of 0.5GiB.
+As we only consider pagecache pages that are unmapped, currently mapped pages (files that are mmap'ed such as e.g. binaries and libraries as well as SysV shared memory) are not limited by this.
+NOTE: The real limit depends on the amount of free memory. Every existing free page allows the page cache to grow 8x the amount of free memory above the set baseline. As soon as the free memory is needed, we free up page cache.
 
 This feature only works if CONFIG_HIBERNATION is configured in, as the
 needed helpers only exist then.
 
