From a06f449cee6152ce8f0a051593fceb82d26e4f16 Mon Sep 17 00:00:00 2001
From: Josh Boyer <jwboyer@redhat.com>
Date: Fri, 26 Oct 2012 12:29:49 -0400
Subject: [PATCH] EFI: Add in-kernel variable to determine if Secure Boot is
 enabled
Git-commit: Not yet
Patch-mainline: Not yet, from Fedora 18 kernel
References: fate#314574, bnc#884333
Target: SLE-11 SP3

There are a few cases where in-kernel functions may need to know if
Secure Boot is enabled.  The added capability check cannot be used as the
kernel can't drop it's own capabilites, so we add a global variable
similar to efi_enabled so they can determine if Secure Boot is enabled.

Signed-off-by: Josh Boyer <jwboyer@redhat.com>
Acked-by: Lee, Chun-Yi <jlee@suse.com>
---
 arch/x86/kernel/setup.c     |    6 +++++-
 arch/x86/platform/efi/efi.c |    2 ++
 include/linux/efi.h         |    3 +++
 3 files changed, 10 insertions(+), 1 deletion(-)

Index: linux-3.0-SLE11-SP3/arch/x86/kernel/setup.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/arch/x86/kernel/setup.c
+++ linux-3.0-SLE11-SP3/arch/x86/kernel/setup.c
@@ -1055,6 +1055,9 @@ void __init setup_arch(char **cmdline_p)
 	if (boot_params.secure_boot) {
 		pr_info("Secure boot enabled\n");
 		enforce_signed_modules();
+#ifdef CONFIG_EFI
+		secure_boot_enabled = 1;
+#endif
 	}
 
 	/*
Index: linux-3.0-SLE11-SP3/arch/x86/platform/efi/efi.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/arch/x86/platform/efi/efi.c
+++ linux-3.0-SLE11-SP3/arch/x86/platform/efi/efi.c
@@ -51,6 +51,8 @@
 int efi_enabled;
 EXPORT_SYMBOL(efi_enabled);
 
+int secure_boot_enabled;
+
 struct efi efi;
 EXPORT_SYMBOL(efi);
 
Index: linux-3.0-SLE11-SP3/include/linux/efi.h
===================================================================
--- linux-3.0-SLE11-SP3.orig/include/linux/efi.h
+++ linux-3.0-SLE11-SP3/include/linux/efi.h
@@ -511,11 +511,14 @@ extern int __init efi_setup_pcdp_console
 #ifdef CONFIG_EFI
 # ifdef CONFIG_X86
    extern int efi_enabled;
+   extern int secure_boot_enabled;
 # else
 #  define efi_enabled 1
+#  define secure_boot_enabled 0
 # endif
 #else
 # define efi_enabled 0
+# define secure_boot_enabled 0
 #endif
 
 /*
