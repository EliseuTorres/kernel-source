Subject: sched: Remove unused parameters from sched_fork() and wake_up_new_task()
From: Samir Bellabes <sam@synack.fr>
Date: Wed May 11 18:18:05 2011 +0200
Git-commit: 3e51e3edfd81bfd9853ad7de91167e4ce33d0fe7
References:

sched_fork() and wake_up_new_task() are defined with a parameter
'unsigned long clone_flags', which is unused.

This patch removes the parameters.

Signed-off-by: Samir Bellabes <sam@synack.fr>
Acked-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/1305130685-1047-1-git-send-email-sam@synack.fr
Signed-off-by: Ingo Molnar <mingo@elte.hu>
Acked-by: Mike Galbraith <mgalbraith@suse.de>

---
 include/linux/sched.h |    5 ++---
 kernel/fork.c         |    4 ++--
 kernel/sched.c        |    4 ++--
 3 files changed, 6 insertions(+), 7 deletions(-)

Index: linux-2.6.32-SLE11-SP2-sched/include/linux/sched.h
===================================================================
--- linux-2.6.32-SLE11-SP2-sched.orig/include/linux/sched.h
+++ linux-2.6.32-SLE11-SP2-sched/include/linux/sched.h
@@ -2017,14 +2017,13 @@ extern void do_timer(unsigned long ticks
 
 extern int wake_up_state(struct task_struct *tsk, unsigned int state);
 extern int wake_up_process(struct task_struct *tsk);
-extern void wake_up_new_task(struct task_struct *tsk,
-				unsigned long clone_flags);
+extern void wake_up_new_task(struct task_struct *tsk);
 #ifdef CONFIG_SMP
  extern void kick_process(struct task_struct *tsk);
 #else
  static inline void kick_process(struct task_struct *tsk) { }
 #endif
-extern void sched_fork(struct task_struct *p, int clone_flags);
+extern void sched_fork(struct task_struct *p);
 extern void sched_dead(struct task_struct *p);
 
 extern void proc_caches_init(void);
Index: linux-2.6.32-SLE11-SP2-sched/kernel/fork.c
===================================================================
--- linux-2.6.32-SLE11-SP2-sched.orig/kernel/fork.c
+++ linux-2.6.32-SLE11-SP2-sched/kernel/fork.c
@@ -1130,7 +1130,7 @@ static struct task_struct *copy_process(
 	p->bts = NULL;
 
 	/* Perform scheduler related setup. Assign this task to a CPU. */
-	sched_fork(p, clone_flags);
+	sched_fork(p);
 
 	retval = perf_event_init_task(p);
 	if (retval)
@@ -1450,7 +1450,7 @@ long do_fork(unsigned long clone_flags,
 			set_tsk_thread_flag(p, TIF_SIGPENDING);
 			__set_task_state(p, TASK_STOPPED);
 		} else {
-			wake_up_new_task(p, clone_flags);
+			wake_up_new_task(p);
 		}
 
 		tracehook_report_clone_complete(trace, regs,
Index: linux-2.6.32-SLE11-SP2-sched/kernel/sched.c
===================================================================
--- linux-2.6.32-SLE11-SP2-sched.orig/kernel/sched.c
+++ linux-2.6.32-SLE11-SP2-sched/kernel/sched.c
@@ -2659,7 +2659,7 @@ static void __sched_fork(struct task_str
 /*
  * fork()/clone()-time setup:
  */
-void sched_fork(struct task_struct *p, int clone_flags)
+void sched_fork(struct task_struct *p)
 {
 	int cpu = get_cpu();
 
@@ -2729,7 +2729,7 @@ void sched_fork(struct task_struct *p, i
  * that must be done for every newly created context, then puts the task
  * on the runqueue and wakes it.
  */
-void wake_up_new_task(struct task_struct *p, unsigned long clone_flags)
+void wake_up_new_task(struct task_struct *p)
 {
 	unsigned long flags;
 	struct rq *rq;
