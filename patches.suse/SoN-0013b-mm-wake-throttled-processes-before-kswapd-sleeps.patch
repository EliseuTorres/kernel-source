From: Mel Gorman <mgorman@suse.de>
Date: Thu, 22 Sep 2011 21:05:44 +0100
Subject: [PATCH] mm: kswapd: Wake any throttled processes before kswapd sleeps
References: Swap over NFS (fate#304949, bnc#717939)
Patch-mainline: Not yet, merging efforts ongoing

If PFMEMALLOC reserves are getting consumed, it's possible for processes
to get throttled. It is assumed that kswapd is awake and will wake the
processes when the zone is balanced. However, there is a potential race

Events A		Events B
PFMEMALLOC reserve hit
process throttles
context switch
			kswapd wakes
process c exits
loads of memory free
			kswapd checks balance, everything fine
			kswapd sleeps

In this case, kswapd never balanced the node and missed the wakeup. This
patch checks if throttled processes should be woken just before kswapd
goes fully to sleep.

Signed-off-by: Mel Gorman <mgorman@suse.de>
---
 mm/vmscan.c |   13 +++++++++++++
 1 files changed, 13 insertions(+), 0 deletions(-)

diff --git a/mm/vmscan.c b/mm/vmscan.c
index 0db8440..f706d29 100644
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -2751,6 +2751,19 @@ static void kswapd_try_to_sleep(pg_data_t *pgdat, int order, int classzone_idx)
 		trace_mm_vmscan_kswapd_sleep(pgdat->node_id);
 
 		/*
+		 * There is a potential race between when kswapd checks it
+		 * watermarks and a process gets throttled. There is also
+		 * a potential race if processes get throttled, kswapd wakes,
+		 * a large process exits therby balancing the zones that causes
+		 * kswapd to miss a wakeup. If kswapd is going to sleep, no
+		 * process should be sleeping on pfmemalloc_wait so wake them
+		 * now if necessary. If necessary, processes will wake kswapd
+		 * and get throttled again
+		 */
+		if (waitqueue_active(&pgdat->pfmemalloc_wait))
+			wake_up(&pgdat->pfmemalloc_wait);
+
+		/*
 		 * vmstat counters are not perfectly accurate and the estimated
 		 * value for counters such as NR_FREE_PAGES can deviate from the
 		 * true value by nr_online_cpus * threshold. To avoid the zone
