From: Maxim Patlasov <MPatlasov@parallels.com>
Date: Mon, 28 Apr 2014 14:19:24 +0200
Subject: fuse: allow ctime flushing to userspace
Git-commit: ab9e13f7c771b511d8f71666e83cb27bcc635b98
Patch-mainline: v3.15-rc5
References: FATE#317677

The patch extends fuse_setattr_in, and extends the flush procedure
(fuse_flush_times()) called on ->write_inode() to send the ctime as well as
mtime.

Signed-off-by: Maxim Patlasov <MPatlasov@parallels.com>
Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
---
 fs/fuse/dir.c        |    9 +++++++--
 fs/fuse/file.c       |    2 +-
 fs/fuse/fuse_i.h     |    2 +-
 include/linux/fuse.h |    5 +++--
 4 files changed, 12 insertions(+), 6 deletions(-)

--- a/fs/fuse/dir.c
+++ b/fs/fuse/dir.c
@@ -1328,7 +1328,7 @@ static void fuse_setattr_fill(struct fus
 /*
  * Flush inode->i_mtime to the server
  */
-int fuse_flush_mtime(struct inode *inode, struct fuse_file *ff)
+int fuse_flush_times(struct inode *inode, struct fuse_file *ff)
 {
 	struct fuse_conn *fc = get_fuse_conn(inode);
 	struct fuse_req *req;
@@ -1343,9 +1343,14 @@ int fuse_flush_mtime(struct inode *inode
 	memset(&inarg, 0, sizeof(inarg));
 	memset(&outarg, 0, sizeof(outarg));
 
-	inarg.valid |= FATTR_MTIME;
+	inarg.valid = FATTR_MTIME;
 	inarg.mtime = inode->i_mtime.tv_sec;
 	inarg.mtimensec = inode->i_mtime.tv_nsec;
+	if (fc->minor >= 23) {
+		inarg.valid |= FATTR_CTIME;
+		inarg.ctime = inode->i_ctime.tv_sec;
+		inarg.ctimensec = inode->i_ctime.tv_nsec;
+	}
 	if (ff) {
 		inarg.valid |= FATTR_FH;
 		inarg.fh = ff->fh;
--- a/fs/fuse/file.c
+++ b/fs/fuse/file.c
@@ -1659,7 +1659,7 @@ int fuse_write_inode(struct inode *inode
 	int err;
 
 	ff = __fuse_write_file_get(fc, fi);
-	err = fuse_flush_mtime(inode, ff);
+	err = fuse_flush_times(inode, ff);
 	if (ff)
 		fuse_file_put(ff, 0);
 
--- a/fs/fuse/fuse_i.h
+++ b/fs/fuse/fuse_i.h
@@ -854,7 +854,7 @@ int fuse_dev_release(struct inode *inode
 
 bool fuse_write_update_size(struct inode *inode, loff_t pos);
 
-int fuse_flush_mtime(struct inode *inode, struct fuse_file *ff);
+int fuse_flush_times(struct inode *inode, struct fuse_file *ff);
 int fuse_write_inode(struct inode *inode, struct writeback_control *wbc);
 
 int fuse_do_setattr(struct inode *inode, struct iattr *attr,
--- a/include/linux/fuse.h
+++ b/include/linux/fuse.h
@@ -138,6 +138,7 @@ struct fuse_file_lock {
 #define FATTR_ATIME_NOW	(1 << 7)
 #define FATTR_MTIME_NOW	(1 << 8)
 #define FATTR_LOCKOWNER	(1 << 9)
+#define FATTR_CTIME	(1 << 10)
 
 /**
  * Flags returned by the OPEN request
@@ -358,10 +359,10 @@ struct fuse_setattr_in {
 	__u64	lock_owner;
 	__u64	atime;
 	__u64	mtime;
-	__u64	unused2;
+	__u64	ctime;
 	__u32	atimensec;
 	__u32	mtimensec;
-	__u32	unused3;
+	__u32	ctimensec;
 	__u32	mode;
 	__u32	unused4;
 	__u32	uid;
