From: Miao Xie <miaoxie1984@gmail.com>
Date: Sun, 29 Apr 2012 23:25:13 +0800
Patch-mainline: pending
References: FATE#306586
Subject: [PATCH] vfs: re-implement writeback_inodes_sb(_nr)_if_idle() and
 rename them

[ full patch: http://www.spinics.net/lists/linux-fsdevel/msg54844.html
  the code has been trimmed to only what btrfs at sp2 requires to avoid
  deadlocks with umount and autodefrag;
  kabi safe and only vfs generic part ]

writeback_inodes_sb(_nr)_if_idle() is re-implemented by replacing down_read()
with down_read_trylock() because
- If ->s_umount is write locked, then the sb is not idle. That is
  writeback_inodes_sb(_nr)_if_idle() needn't wait for the lock.
- writeback_inodes_sb(_nr)_if_idle() grabs s_umount lock when it want to start
  writeback, it may bring us deadlock problem when doing umount.
  (Ex. Btrfs has such a problem, see the following URL
       http://marc.info/?l=linux-btrfs&m=133540923510561&w=2)

The name of these two functions is cumbersome, so rename them to
try_to_writeback_inodes_sb(_nr).

This idea came from Christoph Hellwig.
Some code is from the patch of Kamal Mostafa.

Signed-off-by: Miao Xie <miaox@cn.fujitsu.com>
Acked-by: Jan Kara <jack@suse.cz>
Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/fs-writeback.c         |   25 ++++++++++++++++++++++++-
 include/linux/writeback.h |    1 +
 3 files changed, 26 insertions(+), 2 deletions(-)

diff --git a/fs/fs-writeback.c b/fs/fs-writeback.c
index 4c6ea7f..f6627bc 100644
--- a/fs/fs-writeback.c
+++ b/fs/fs-writeback.c
@@ -1242,6 +1242,29 @@ void writeback_inodes_sb(struct super_block *sb)
 EXPORT_SYMBOL(writeback_inodes_sb);
 
 /**
+ * try_to_writeback_inodes_sb_nr - try to start writeback if none underway
+ * @sb: the superblock
+ * @nr: the number of pages to write
+ *
+ * Invoke writeback_inodes_sb_nr if no writeback is currently underway.
+ * Returns 1 if writeback was started, 0 if not.
+ */
+int try_to_writeback_inodes_sb_nr(struct super_block *sb,
+				  unsigned long nr)
+{
+	if (writeback_in_progress(sb->s_bdi))
+		return 1;
+
+	if (!down_read_trylock(&sb->s_umount))
+		return 0;
+
+	writeback_inodes_sb_nr(sb, nr);
+	up_read(&sb->s_umount);
+	return 1;
+}
+EXPORT_SYMBOL(try_to_writeback_inodes_sb_nr);
+
+/**
  * writeback_inodes_sb_if_idle	-	start writeback if none underway
  * @sb: the superblock
  *
--- a/include/linux/writeback.h
+++ b/include/linux/writeback.h
@@ -60,6 +60,7 @@ void writeback_inodes_sb(struct super_block *);
 void writeback_inodes_sb_nr(struct super_block *, unsigned long nr);
 int writeback_inodes_sb_if_idle(struct super_block *);
 int writeback_inodes_sb_nr_if_idle(struct super_block *, unsigned long nr);
+int try_to_writeback_inodes_sb_nr(struct super_block *, unsigned long nr);
 void sync_inodes_sb(struct super_block *);
 void writeback_inodes_wb(struct bdi_writeback *wb,
 		struct writeback_control *wbc);
-- 
1.7.6.233.gd79bc

