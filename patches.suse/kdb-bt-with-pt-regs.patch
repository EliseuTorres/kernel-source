From: Martin Hicks <mort@sgi.com>
Subject: KDB: fix backtrace failure
Patch-mainline: never
References: bnc#611094

The system appeared hung during boot. I dropped into kdb & found a hung task.
The "bta" or "btp" commands would not show a correct backtrace. However, if I
"cpu" to the cpu that the task is running on & do a "bt", the backtrace is
correct.

Signed-off-by: Martin Hicks <mort@sgi.com>
Signed-off-by: Jiri Slaby <jslaby@suse.cz>
---
 kdb/kdb_bt.c |   22 +++++++++++++---------
 1 file changed, 13 insertions(+), 9 deletions(-)

--- a/kdb/kdb_bt.c
+++ b/kdb/kdb_bt.c
@@ -16,7 +16,10 @@
 #include <linux/kdbprivate.h>
 #include <linux/nmi.h>
 #include <asm/system.h>
-
+#include <linux/unwind.h>
+#ifdef CONFIG_X86
+#include "../arch/x86/kernel/dumpstack.h"
+#endif
 
 /*
  * kdb_bt
@@ -64,15 +67,12 @@ static int kdb_show_stack(struct task_st
 	kdb_trap_printk++;
 	kdba_set_current_task(p);
 	if (addr) {
-		show_stack((struct task_struct *)p, addr);
+		show_stack_log_lvl((struct task_struct *)p, kdb_current_regs,
+				addr, 0, "");
 	} else if (kdb_current_regs) {
-#ifdef CONFIG_X86
-		show_stack(p, &kdb_current_regs->sp);
-#else
-		show_stack(p, NULL);
-#endif
+		show_stack_log_lvl(p, kdb_current_regs, &kdb_current_regs->sp, 0, "");
 	} else {
-		show_stack(p, NULL);
+		show_stack_log_lvl(p, kdb_current_regs, NULL, 0, "");
 	}
 	console_loglevel = old_lvl;
 	kdb_trap_printk--;
@@ -96,7 +96,9 @@ kdb_bt1(struct task_struct *p, unsigned
 	diag = kdb_show_stack(p, NULL, argcount);
 	if (btaprompt) {
 		kdb_getstr(buffer, sizeof(buffer), "Enter <q> to end, <cr> to continue:");
-		if (buffer[0] == 'q') {
+		if (buffer[0] == 'q' || buffer[0] == 'Q') {
+			KDB_FLAG_SET(CMD_INTERRUPT);
+			KDB_STATE_CLEAR(PAGER);
 			kdb_printf("\n");
 			return 1;
 		}
@@ -183,6 +185,8 @@ kdb_bt(int argc, const char **argv)
 		kdb_printf("btc: cpu status: ");
 		kdb_parse("cpu\n");
 		for (cpu = 0, krp = kdb_running_process; cpu < NR_CPUS; ++cpu, ++krp) {
+			if (KDB_FLAG(CMD_INTERRUPT))
+				break;
 			if (!cpu_online(cpu) || !krp->seqno)
 				continue;
 			sprintf(buf, "btt 0x%p\n", krp->p);
