From: Christoph Hellwig <hch@lst.de>
Date: Wed, 10 Sep 2014 08:23:30 -0700
Subject: [PATCH] pnfs: add flag to force read-modify-write in ->write_begin
Git-commit: 612aa983a041056c3368aacfdc9febd406d245a8
Patch-mainline: v3.18
References: bnc#898675

Like all block based filesystems, the pNFS block layout driver can't read
or write at a byte granularity and thus has to perform read-modify-write
cycles on writes smaller than this granularity.

Add a flag so that the core NFS code always reads a whole page when
starting a smaller write, so that we can do it in the place where the VFS
expects it instead of doing in very deadlock prone way in the writeback
handler.

Note that in theory we could do less than page size reads here for disks
that have a smaller sector size which are served by a server with a smaller
pnfs block size.  But so far that doesn't seem like a worthwhile
optimization.

Signed-off-by: Christoph Hellwig <hch@lst.de>
Signed-off-by: Trond Myklebust <trond.myklebust@primarydata.com>
Acked-by: NeilBrown <neilb@suse.de>

---
 fs/nfs/file.c |    7 +++++++
 fs/nfs/pnfs.h |   15 +++++++++++++++
 2 files changed, 22 insertions(+)

--- linux-3.12-SLE12.orig/fs/nfs/file.c
+++ linux-3.12-SLE12/fs/nfs/file.c
@@ -36,6 +36,7 @@
 #include "internal.h"
 #include "iostat.h"
 #include "fscache.h"
+#include "pnfs.h"
 
 #include "nfstrace.h"
 
@@ -345,6 +346,12 @@ static int nfs_want_read_modify_write(st
 	unsigned int offset = pos & (PAGE_CACHE_SIZE - 1);
 	unsigned int end = offset + len;
 
+	if (pnfs_ld_read_whole_page(file->f_mapping->host)) {
+		if (!PageUptodate(page))
+			return 1;
+		return 0;
+	}
+
 	if ((file->f_mode & FMODE_READ) &&	/* open for read? */
 	    !PageUptodate(page) &&		/* Uptodate? */
 	    !PagePrivate(page) &&		/* i/o request already? */
--- linux-3.12-SLE12.orig/fs/nfs/pnfs.h
+++ linux-3.12-SLE12/fs/nfs/pnfs.h
@@ -70,6 +70,7 @@ enum layoutdriver_policy_flags {
 	/* Should the pNFS client commit and return the layout upon a setattr */
 	PNFS_LAYOUTRET_ON_SETATTR	= 1 << 0,
 	PNFS_LAYOUTRET_ON_ERROR		= 1 << 1,
+	PNFS_READ_WHOLE_PAGE		= 1 << 2,
 };
 
 struct nfs4_deviceid_node;
@@ -361,6 +362,14 @@ pnfs_ld_layoutret_on_setattr(struct inod
 }
 
 static inline bool
+pnfs_ld_read_whole_page(struct inode *inode)
+{
+	if (!pnfs_enabled_sb(NFS_SERVER(inode)))
+		return false;
+	return NFS_SERVER(inode)->pnfs_curr_ld->flags & PNFS_READ_WHOLE_PAGE;
+}
+
+static inline bool
 pnfs_layoutcommit_outstanding(struct inode *inode)
 {
 	struct nfs_inode *nfsi = NFS_I(inode);
@@ -430,6 +439,12 @@ pnfs_ld_layoutret_on_setattr(struct inod
 {
 	return false;
 }
+
+static inline bool
+pnfs_ld_read_whole_page(struct inode *inode)
+{
+	return false;
+}
 
 static inline bool
 pnfs_roc(struct inode *ino)
