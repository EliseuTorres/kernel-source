From: Paul Mackerras <paulus@samba.org>
Subject: powerpc, hw_breakpoint: Cooperate better with other single-steppers
Date: Wed Jun 23 15:46:55 2010 +1000
Git-commit: 76b0f1337690d223811c852ad3a5078eb89276c5
Patch-mainline: v2.6.36-rc1
References: FATE#311653, BNC#702123
Signed-off-by: Tony Jones <tonyj@suse.de>

    powerpc, hw_breakpoint: Cooperate better with other single-steppers
    
    The code we had to clear the MSR_SE bit was not doing anything because
    the caller (ultimately single_step_exception() in traps.c) had already
    cleared.  Instead of trying to leave MSR_SE set if the TIF_SINGLESTEP
    flag is set (which indicates that the process is being single-stepped
    by ptrace), we instead return NOTIFY_DONE in that case, which means
    the caller will generate a SIGTRAP for the process.
    
    Signed-off-by: Paul Mackerras <paulus@samba.org>

diff --git a/arch/powerpc/kernel/hw_breakpoint.c b/arch/powerpc/kernel/hw_breakpoint.c
index 241e097..5a1d55d 100644
--- a/arch/powerpc/kernel/hw_breakpoint.c
+++ b/arch/powerpc/kernel/hw_breakpoint.c
@@ -304,15 +304,16 @@ int __kprobes single_step_dabr_instruction(struct die_args *args)
 	if (!bp_info->extraneous_interrupt)
 		perf_bp_event(bp, regs);
 
+	set_dabr(bp_info->address | bp_info->type | DABR_TRANSLATION);
+	current->thread.last_hit_ubp = NULL;
+
 	/*
-	 * Do not disable MSR_SE if the process was already in
-	 * single-stepping mode.
+	 * If the process was being single-stepped by ptrace, let the
+	 * other single-step actions occur (e.g. generate SIGTRAP).
 	 */
-	if (!test_thread_flag(TIF_SINGLESTEP))
-		regs->msr &= ~MSR_SE;
+	if (test_thread_flag(TIF_SINGLESTEP))
+		return NOTIFY_DONE;
 
-	set_dabr(bp_info->address | bp_info->type | DABR_TRANSLATION);
-	current->thread.last_hit_ubp = NULL;
 	return NOTIFY_STOP;
 }
 
