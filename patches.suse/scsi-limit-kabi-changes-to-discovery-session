From: Lee Duncan <lduncan@suse.com>
Date: Mon Jun  8 13:36:36 PDT 2015
Subject: SCSI: limit kabi changes to discovery session
References: bsc#920907
Patch-mainline: Never

Limit recent changes to the SCSI subsystem that add
kabi changes, when those changes are not complete.

These patches were added, and the first two were
just context for the third:

    patches.drivers/scsi_transport_iscsi-exporting-new-attrs-for-iscsi-session-and-connection-in-sysfs
    patches.drivers/libiscsi-exporting-new-attrs-for-iscsi-session-and-connection-in-sysfs
    patches.drivers/ib-iser-add-discovery-support

But the first two introduce some sysfs attributes that would
have no actual data value, returning an empty "0". So, since
these added attributes have no value as well as break the kabi,
they are ifdefed out here, using "#ifdef UNUSED_AND_BREAKS_KABI".

The few changes that are actually needed but still
break the kabi are ifdefed out for kabi checks by
adding "#ifndef __GENKSYMS__". If needed, new fields
added are moved to the end of their containing
structures.

Signed-off-by: Lee Duncan <lduncan@suse.com>
--- 
 drivers/scsi/libiscsi.c             |   10 ++++++++++
 drivers/scsi/scsi_transport_iscsi.c |   19 ++++++++++++++++++-
 include/scsi/iscsi_if.h             |    7 ++++++-
 include/scsi/libiscsi.h             |   11 ++++++++++-
 4 files changed, 44 insertions(+), 3 deletions(-)

--- a/drivers/scsi/libiscsi.c
+++ b/drivers/scsi/libiscsi.c
@@ -2812,8 +2812,10 @@ void iscsi_session_teardown(struct iscsi
 	kfree(session->boot_nic);
 	kfree(session->boot_target);
 	kfree(session->ifacename);
+#ifdef UNUSED_SYSFS_ATTRS
 	kfree(session->portal_type);
 	kfree(session->discovery_parent_type);
+#endif
 
 	iscsi_destroy_session(cls_session);
 	iscsi_host_dec_session_cnt(shost);
@@ -3260,11 +3262,13 @@ int iscsi_set_param(struct iscsi_cls_con
 		return iscsi_switch_str_param(&session->boot_nic, buf);
 	case ISCSI_PARAM_BOOT_TARGET:
 		return iscsi_switch_str_param(&session->boot_target, buf);
+#ifdef UNUSED_SYSFS_ATTRS
 	case ISCSI_PARAM_PORTAL_TYPE:
 		return iscsi_switch_str_param(&session->portal_type, buf);
 	case ISCSI_PARAM_DISCOVERY_PARENT_TYPE:
 		return iscsi_switch_str_param(&session->discovery_parent_type,
 					      buf);
+#endif
 	case ISCSI_PARAM_DISCOVERY_SESS:
 		sscanf(buf, "%d", &val);
 		session->discovery_sess = !!val;
@@ -3355,12 +3359,15 @@ int iscsi_session_get_param(struct iscsi
 		break;
 	case ISCSI_PARAM_BOOT_TARGET:
 		len = sprintf(buf, "%s\n", session->boot_target);
+#ifdef UNUSED_SYSFS_ATTRS
 	case ISCSI_PARAM_AUTO_SND_TGT_DISABLE:
 		len = sprintf(buf, "%u\n", session->auto_snd_tgt_disable);
 		break;
+#endif
 	case ISCSI_PARAM_DISCOVERY_SESS:
 		len = sprintf(buf, "%u\n", session->discovery_sess);
 		break;
+#ifdef UNUSED_SYSFS_ATTRS
 	case ISCSI_PARAM_PORTAL_TYPE:
 		len = sprintf(buf, "%s\n", session->portal_type);
 		break;
@@ -3401,6 +3408,7 @@ int iscsi_session_get_param(struct iscsi
 		else
 			len = sprintf(buf, "\n");
 		break;
+#endif
 	default:
 		return -ENOSYS;
 	}
@@ -3490,6 +3498,7 @@ int iscsi_conn_get_param(struct iscsi_cl
 	case ISCSI_PARAM_PERSISTENT_ADDRESS:
 		len = sprintf(buf, "%s\n", conn->persistent_address);
 		break;
+#ifdef UNUSED_SYSFS_ATTRS
 	case ISCSI_PARAM_STATSN:
 		len = sprintf(buf, "%u\n", conn->statsn);
 		break;
@@ -3535,6 +3544,7 @@ int iscsi_conn_get_param(struct iscsi_cl
 	case ISCSI_PARAM_TCP_RECV_WSF:
 		len = sprintf(buf, "%u\n", conn->tcp_recv_wsf);
 		break;
+#endif
 	default:
 		return -ENOSYS;
 	}
--- a/drivers/scsi/scsi_transport_iscsi.c
+++ b/drivers/scsi/scsi_transport_iscsi.c
@@ -3356,6 +3356,7 @@ iscsi_conn_attr(exp_statsn, ISCSI_PARAM_
 iscsi_conn_attr(persistent_address, ISCSI_PARAM_PERSISTENT_ADDRESS);
 iscsi_conn_attr(ping_tmo, ISCSI_PARAM_PING_TMO);
 iscsi_conn_attr(recv_tmo, ISCSI_PARAM_RECV_TMO);
+#ifdef UNUSED_SYSFS_ATTRS
 iscsi_conn_attr(local_port, ISCSI_PARAM_LOCAL_PORT);
 iscsi_conn_attr(statsn, ISCSI_PARAM_STATSN);
 iscsi_conn_attr(keepalive_tmo, ISCSI_PARAM_KEEPALIVE_TMO);
@@ -3372,7 +3373,7 @@ iscsi_conn_attr(ipv6_flow_label, ISCSI_P
 iscsi_conn_attr(is_fw_assigned_ipv6, ISCSI_PARAM_IS_FW_ASSIGNED_IPV6);
 iscsi_conn_attr(tcp_xmit_wsf, ISCSI_PARAM_TCP_XMIT_WSF);
 iscsi_conn_attr(tcp_recv_wsf, ISCSI_PARAM_TCP_RECV_WSF);
-
+#endif
 
 #define iscsi_conn_ep_attr_show(param)					\
 static ssize_t show_conn_ep_param_##param(struct device *dev,		\
@@ -3425,6 +3426,7 @@ static struct attribute *iscsi_conn_attr
 	&dev_attr_conn_persistent_port.attr,
 	&dev_attr_conn_ping_tmo.attr,
 	&dev_attr_conn_recv_tmo.attr,
+#ifdef UNUSED_SYSFS_ATTRS
 	&dev_attr_conn_local_port.attr,
 	&dev_attr_conn_statsn.attr,
 	&dev_attr_conn_keepalive_tmo.attr,
@@ -3441,6 +3443,7 @@ static struct attribute *iscsi_conn_attr
 	&dev_attr_conn_is_fw_assigned_ipv6.attr,
 	&dev_attr_conn_tcp_xmit_wsf.attr,
 	&dev_attr_conn_tcp_recv_wsf.attr,
+#endif
 	NULL,
 };
 
@@ -3478,6 +3481,7 @@ static mode_t iscsi_conn_attr_is_visible
 		param = ISCSI_PARAM_PING_TMO;
 	else if (attr == &dev_attr_conn_recv_tmo.attr)
 		param = ISCSI_PARAM_RECV_TMO;
+#ifdef UNUSED_SYSFS_ATTRS
 	else if (attr == &dev_attr_conn_local_port.attr)
 		param = ISCSI_PARAM_LOCAL_PORT;
 	else if (attr == &dev_attr_conn_statsn.attr)
@@ -3510,6 +3514,7 @@ static mode_t iscsi_conn_attr_is_visible
 		param = ISCSI_PARAM_TCP_XMIT_WSF;
 	else if (attr == &dev_attr_conn_tcp_recv_wsf.attr)
 		param = ISCSI_PARAM_TCP_RECV_WSF;
+#endif
 	else {
 		WARN_ONCE(1, "Invalid conn attr");
 		return 0;
@@ -3570,8 +3575,11 @@ iscsi_session_attr(targetalias, ISCSI_PA
 iscsi_session_attr(boot_root, ISCSI_PARAM_BOOT_ROOT, 0);
 iscsi_session_attr(boot_nic, ISCSI_PARAM_BOOT_NIC, 0);
 iscsi_session_attr(boot_target, ISCSI_PARAM_BOOT_TARGET, 0);
+#ifdef UNUSED_SYSFS_ATTRS
 iscsi_session_attr(auto_snd_tgt_disable, ISCSI_PARAM_AUTO_SND_TGT_DISABLE, 0);
+#endif
 iscsi_session_attr(discovery_session, ISCSI_PARAM_DISCOVERY_SESS, 0);
+#ifdef UNUSED_SYSFS_ATTRS
 iscsi_session_attr(portal_type, ISCSI_PARAM_PORTAL_TYPE, 0);
 iscsi_session_attr(chap_auth, ISCSI_PARAM_CHAP_AUTH_EN, 0);
 iscsi_session_attr(discovery_logout, ISCSI_PARAM_DISCOVERY_LOGOUT_EN, 0);
@@ -3585,6 +3593,7 @@ iscsi_session_attr(tsid, ISCSI_PARAM_TSI
 iscsi_session_attr(def_taskmgmt_tmo, ISCSI_PARAM_DEF_TASKMGMT_TMO, 0);
 iscsi_session_attr(discovery_parent_idx, ISCSI_PARAM_DISCOVERY_PARENT_IDX, 0);
 iscsi_session_attr(discovery_parent_type, ISCSI_PARAM_DISCOVERY_PARENT_TYPE, 0);
+#endif
 
 static ssize_t
 show_priv_session_state(struct device *dev, struct device_attribute *attr,
@@ -3689,8 +3698,11 @@ static struct attribute *iscsi_session_a
 	&dev_attr_sess_chap_out_idx.attr,
 	&dev_attr_sess_chap_in_idx.attr,
 	&dev_attr_priv_sess_target_id.attr,
+#ifdef UNUSED_SYSFS_ATTRS
 	&dev_attr_sess_auto_snd_tgt_disable.attr,
+#endif
 	&dev_attr_sess_discovery_session.attr,
+#ifdef UNUSED_SYSFS_ATTRS
 	&dev_attr_sess_portal_type.attr,
 	&dev_attr_sess_chap_auth.attr,
 	&dev_attr_sess_discovery_logout.attr,
@@ -3703,6 +3715,7 @@ static struct attribute *iscsi_session_a
 	&dev_attr_sess_def_taskmgmt_tmo.attr,
 	&dev_attr_sess_discovery_parent_idx.attr,
 	&dev_attr_sess_discovery_parent_type.attr,
+#endif
 	NULL,
 };
 
@@ -3766,10 +3779,13 @@ static mode_t iscsi_session_attr_is_visi
 		param = ISCSI_PARAM_BOOT_NIC;
 	else if (attr == &dev_attr_sess_boot_target.attr)
 		param = ISCSI_PARAM_BOOT_TARGET;
+#ifdef UNUSED_SYSFS_ATTRS
 	else if (attr == &dev_attr_sess_auto_snd_tgt_disable.attr)
 		param = ISCSI_PARAM_AUTO_SND_TGT_DISABLE;
+#endif
 	else if (attr == &dev_attr_sess_discovery_session.attr)
 		param = ISCSI_PARAM_DISCOVERY_SESS;
+#ifdef UNUSED_SYSFS_ATTRS
 	else if (attr == &dev_attr_sess_portal_type.attr)
 		param = ISCSI_PARAM_PORTAL_TYPE;
 	else if (attr == &dev_attr_sess_chap_auth.attr)
@@ -3794,6 +3810,7 @@ static mode_t iscsi_session_attr_is_visi
 		param = ISCSI_PARAM_DISCOVERY_PARENT_IDX;
 	else if (attr == &dev_attr_sess_discovery_parent_type.attr)
 		param = ISCSI_PARAM_DISCOVERY_PARENT_TYPE;
+#endif
 	else if (attr == &dev_attr_priv_sess_recovery_tmo.attr)
 		return S_IRUGO | S_IWUSR;
 	else if (attr == &dev_attr_priv_sess_state.attr)
--- a/include/scsi/iscsi_if.h
+++ b/include/scsi/iscsi_if.h
@@ -493,9 +493,13 @@ enum iscsi_param {
 	ISCSI_PARAM_BOOT_ROOT,
 	ISCSI_PARAM_BOOT_NIC,
 	ISCSI_PARAM_BOOT_TARGET,
-
+#ifdef UNUSED_SYSFS_ATTRS
 	ISCSI_PARAM_AUTO_SND_TGT_DISABLE,
+#endif
+#ifndef __GENKSYMS__
 	ISCSI_PARAM_DISCOVERY_SESS,
+#endif
+#ifdef UNUSED_SYSFS_ATTRS
 	ISCSI_PARAM_PORTAL_TYPE,
 	ISCSI_PARAM_CHAP_AUTH_EN,
 	ISCSI_PARAM_DISCOVERY_LOGOUT_EN,
@@ -526,6 +530,7 @@ enum iscsi_param {
 
 	ISCSI_PARAM_DISCOVERY_PARENT_IDX,
 	ISCSI_PARAM_DISCOVERY_PARENT_TYPE,
+#endif
 	/* must always be last */
 	ISCSI_PARAM_MAX,
 };
--- a/include/scsi/libiscsi.h
+++ b/include/scsi/libiscsi.h
@@ -175,7 +175,9 @@ struct iscsi_conn {
 
 	/* iSCSI connection-wide sequencing */
 	uint32_t		exp_statsn;
+#ifdef UNUSED_SYSFS_ATTRS
 	uint32_t		statsn;
+#endif
 
 	/* control data */
 	int			id;		/* CID */
@@ -216,6 +218,7 @@ struct iscsi_conn {
 	int			persistent_port;
 	char			*persistent_address;
 
+#ifdef UNUSED_SYSFS_ATTRS
 	unsigned		max_segment_size;
 	unsigned		tcp_xmit_wsf;
 	unsigned		tcp_recv_wsf;
@@ -231,6 +234,7 @@ struct iscsi_conn {
 	uint8_t			ipv6_traffic_class;
 	uint8_t			ipv6_flow_label;
 	uint8_t			is_fw_assigned_ipv6;
+#endif
 
 	/* MIB-statistics */
 	uint64_t		txdata_octets;
@@ -309,6 +313,7 @@ struct iscsi_session {
 	char			*boot_root;
 	char			*boot_nic;
 	char			*boot_target;
+#ifdef UNUSED_SYSFS_ATTRS
 	char			*portal_type;
 	char			*discovery_parent_type;
 	uint16_t		discovery_parent_idx;
@@ -321,7 +326,7 @@ struct iscsi_session {
 	uint8_t			bidi_chap_en;
 	uint8_t			discovery_auth_optional;
 	uint8_t			isid[ISID_SIZE];
-
+#endif
 	/* control data */
 	struct iscsi_transport	*tt;
 	struct Scsi_Host	*host;
@@ -340,6 +345,10 @@ struct iscsi_session {
 	struct iscsi_task	**cmds;		/* Original Cmds arr */
 	struct iscsi_pool	cmdpool;	/* PDU's pool */
 	void			*dd_data;	/* LLD private data */
+#ifndef __GENKSYMS__
+	/* move this here to preserve kabi */
+	uint8_t			discovery_sess;
+#endif
 };
 
 enum {
