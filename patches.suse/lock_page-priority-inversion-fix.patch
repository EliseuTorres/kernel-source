From: Dimitri Sivanich <sivanich@sgi.com>
Date: Wed, 31 Aug 2011 12:14:12 +0100
Subject: [PATCH] mm: filemap: Avoid priority inversion between high priority thread and IO completion
Patch-mainline: no
References: bnc#699916

With the adaptive spinning in __lock_page(), it is possible for a
realtime task to be starved of access to the page lock as it races with
non-RT tasks for access to the page leading to a priority inversion
issue. This patch fixes the problem by allowing RT-tasks to sleep
on the page bit lock giving it preferencial access when the page
is unlocked.

Signed-off-by: Dimitri Sivanich <sivanich@sgi.com>
Signed-off-by: Mel Gorman <mgorman@suse.de>
---
 mm/filemap.c |   11 +++++++----
 1 files changed, 7 insertions(+), 4 deletions(-)

diff --git a/mm/filemap.c b/mm/filemap.c
index 8565ef8..f519ccb 100644
--- a/mm/filemap.c
+++ b/mm/filemap.c
@@ -666,10 +666,13 @@ void __lock_page(struct page *page)
 	DEFINE_WAIT_BIT(wait, &page->flags, PG_locked);
 
 	do {
-		while(PageUptodate(page) && !need_resched()) {
-			cpu_relax();
-			if (!PageLocked(page) && trylock_page(page))
-				goto done;
+		if (!rt_task(current)) {
+			while (PageUptodate(page) && !PageWriteback(page) &&
+					!need_resched()) {
+				cpu_relax();
+				if (!PageLocked(page) && trylock_page(page))
+					goto done;
+			}
 		}
 
 		prepare_to_wait(wq, &wait.wait, TASK_UNINTERRUPTIBLE);
