From foo@baz Thu Aug 11 12:44:21 PDT 2011
Date: Thu, 11 Aug 2011 12:44:21 -0700
To: Greg KH <gregkh@suse.de>
From: Greg Kroah-Hartman <gregkh@suse.de>
Subject: KDB: fix uhci build issues

With the update of the UHCI code, portions of the kdb code now fails to
build properly.  This patch resolves those issues.

Signed-off-by: Greg Kroah-Hartman <gregkh@suse.de>
---
 drivers/usb/host/uhci-hcd.c |   20 +++++++++++++++++---
 drivers/usb/host/uhci-q.c   |   21 +++++++++++----------
 include/linux/kdbprivate.h  |    1 +
 3 files changed, 29 insertions(+), 13 deletions(-)

--- a/drivers/usb/host/uhci-hcd.c
+++ b/drivers/usb/host/uhci-hcd.c
@@ -513,7 +513,7 @@ static int uhci_kdb_poll_char(struct urb
 	if (!urb) /* can happen if no keyboard attached */
 		return -1;
 
-	return uhci_check_kdb_uhci_qh(kdb_uhci_keyboard_get_qh(urb));
+	return uhci_check_kdb_uhci_qh(kdb_uhci_keyboard_get_uhci(urb), kdb_uhci_keyboard_get_qh(urb));
 }
 
 /* Only 1 UHCI Keyboard supported */
@@ -638,13 +638,15 @@ static int kdb_uhci_keyboard_check_uhci_
 }
 
 /* Set UHCI QH using URB pointer */
-static int kdb_uhci_keyboard_set_qh(struct urb *urb, struct uhci_qh *qh)
+static int kdb_uhci_keyboard_set_qh(struct urb *urb, struct uhci_hcd *uhci, struct uhci_qh *qh)
 {
 	int i;
 
 	i = kdb_uhci_keyboard_urb(urb);
-	if (i != -1)
+	if (i != -1) {
 		kdb_usb_kbds[i].qh = qh;
+		kdb_usb_kbds[i].uhci = uhci;
+	}
 
 	return 0;
 }
@@ -660,6 +662,18 @@ static struct uhci_qh *kdb_uhci_keyboard
 
 	return NULL;
 }
+
+/* Get UHCI HCD using URB pointer */
+static struct uhci_hcd *kdb_uhci_keyboard_get_uhci(struct urb *urb)
+{
+	int i;
+
+	i = kdb_uhci_keyboard_urb(urb);
+	if (i != -1)
+		return kdb_usb_kbds[i].uhci;
+
+	return NULL;
+}
 
 /* Set UHCI hid_event using URB pointer */
 static int kdb_uhci_keyboard_set_hid_event(struct urb *urb, int hid_event)
--- a/drivers/usb/host/uhci-q.c
+++ b/drivers/usb/host/uhci-q.c
@@ -28,8 +28,9 @@
 #ifdef CONFIG_KDB_USB
 /* KDB HID QH, managed by KDB code */
 static int kdb_uhci_keyboard_check_uhci_qh(struct uhci_qh *qh);
-static int kdb_uhci_keyboard_set_qh(struct urb *urb, struct uhci_qh *qh);
+static int kdb_uhci_keyboard_set_qh(struct urb *urb, struct uhci_hcd *uhci, struct uhci_qh *qh);
 static struct uhci_qh *kdb_uhci_keyboard_get_qh(struct urb *urb);
+static struct uhci_hcd *kdb_uhci_keyboard_get_uhci(struct urb *urb);
 static int kdb_uhci_keyboard_set_hid_event(struct urb *urb, int hid_event);
 static int kdb_uhci_keyboard_get_hid_event(struct urb *urb);
 static int kdb_uhci_keyboard_set_hid_event_qh(struct uhci_qh *qh, int hid_event);
@@ -318,8 +319,8 @@ static struct uhci_qh *kdb_uhci_alloc_qh
 	memset(qh, 0, sizeof(*qh));
 	qh->dma_handle = dma_handle;
 
-	qh->element = UHCI_PTR_TERM;
-	qh->link = UHCI_PTR_TERM;
+	qh->element = UHCI_PTR_TERM(uhci);
+	qh->link = UHCI_PTR_TERM(uhci);
 
 	INIT_LIST_HEAD(&qh->queue);
 	INIT_LIST_HEAD(&qh->node);
@@ -1493,11 +1494,11 @@ static int uhci_urb_enqueue(struct usb_h
 	 */
 	if (kdb_uhci_keyboard_urb(urb) != -1){
 		/* KDB urb will be enqued only once */
-		kdb_uhci_keyboard_set_qh(urb, NULL);
+		kdb_uhci_keyboard_set_qh(urb, uhci, NULL);
 		qh = kdb_uhci_alloc_qh(uhci, urb->dev, urb->ep);
 		if (!qh)
 			goto err_no_qh;
-		kdb_uhci_keyboard_set_qh(urb, qh);
+		kdb_uhci_keyboard_set_qh(urb, uhci, qh);
 	} else
 #endif
 
@@ -1885,7 +1886,7 @@ rescan:
 /*
  * Activate KDB UHCI QH, called by KDB poll code.
  */
-static void kdb_activate_uhci_qh(struct uhci_qh *qh)
+static void kdb_activate_uhci_qh(struct uhci_hcd *uhci, struct uhci_qh *qh)
 {
 	struct urb_priv *urbp;
 	struct uhci_td *td;
@@ -1915,7 +1916,7 @@ static void kdb_activate_uhci_qh(struct
 	}
 	/* Activate KDB UHCI Keyboard HID QH */
 	td = list_entry(urbp->td_list.next, struct uhci_td, list);
-	qh->element = LINK_TO_TD(td);
+	qh->element = LINK_TO_TD(uhci, td);
 	barrier();
 }
 
@@ -1929,14 +1930,14 @@ kdb_uhci_urb_complete (struct urb *urb)
 		return;
 
 	/* Activate KDB TD */
-	kdb_activate_uhci_qh(kdb_uhci_keyboard_get_qh(urb));
+	kdb_activate_uhci_qh(kdb_uhci_keyboard_get_uhci(urb), kdb_uhci_keyboard_get_qh(urb));
 	kdb_uhci_keyboard_set_hid_event(urb, 0);
 }
 
 /*
  * Check if state of KDB URB changed (key was pressed/released).
  */
-static int uhci_check_kdb_uhci_qh(struct uhci_qh *qh)
+static int uhci_check_kdb_uhci_qh(struct uhci_hcd *uhci, struct uhci_qh *qh)
 {
 	struct urb_priv *urbp = NULL;
 	struct uhci_td *td;
@@ -1944,7 +1945,7 @@ static int uhci_check_kdb_uhci_qh(struct
 
 	urbp = list_entry(qh->queue.next, struct urb_priv, node);
 	td = list_entry(urbp->td_list.next, struct uhci_td, list);
-	status = td_status(td);
+	status = td_status(uhci, td);
 	if (!(status & TD_CTRL_ACTIVE)){
 		/* We're okay, the queue has advanced */
 		kdb_uhci_keyboard_set_hid_event_qh(qh, 1);
--- a/include/linux/kdbprivate.h
+++ b/include/linux/kdbprivate.h
@@ -496,6 +496,7 @@ struct kdb_usb_kbd_info {
 	int	poll_ret;	/* return val from poll_func */
 	int	caps_lock;	/* state of the caps lock for this keyboard */
 	struct uhci_qh *qh;
+	struct uhci_hcd *uhci;
 	int kdb_hid_event;
 	struct urb *hid_urb;    /* pointer to the HID URB */
 	/* USB Host Controller specific callbacks */
