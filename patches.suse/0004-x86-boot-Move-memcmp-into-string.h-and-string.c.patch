From fb4cac573ef6dce8d7543b68306566561c2e5725 Mon Sep 17 00:00:00 2001
From: Vivek Goyal <vgoyal@redhat.com>
Date: Tue, 18 Mar 2014 15:26:39 -0400
Subject: [PATCH 004/027] x86, boot: Move memcmp() into string.h and string.c

Git-commit: fb4cac573ef6dce8d7543b68306566561c2e5725
Patch-mainline: v3.15-rc1
Reference: fate#315018
Target: sle12-sp1

Try to treat memcmp() in same way as memcpy() and memset(). Provide a
declaration in boot/string.h and by default user gets a memcmp() which
maps to builtin function.

Move optimized definition of memcmp() in boot/string.c. Now a user can
do #undef memcmp and link against string.c to use optimzied memcmp().

It also simplifies boot/compressed/string.c where we had to redefine
memcmp(). That extra definition is gone now.

Signed-off-by: Vivek Goyal <vgoyal@redhat.com>
Link: http://lkml.kernel.org/r/1395170800-11059-5-git-send-email-vgoyal@redhat.com
Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
Acked-by: Lee, Chun-Yi <jlee@suse.com>

---
 arch/x86/boot/boot.h              |    8 --------
 arch/x86/boot/compressed/string.c |   11 -----------
 arch/x86/boot/string.c            |   14 ++++++++++++++
 arch/x86/boot/string.h            |    2 ++
 4 files changed, 16 insertions(+), 19 deletions(-)

--- a/arch/x86/boot/boot.h
+++ b/arch/x86/boot/boot.h
@@ -178,14 +178,6 @@ static inline void wrgs32(u32 v, addr_t
 }
 
 /* Note: these only return true/false, not a signed return value! */
-static inline int memcmp(const void *s1, const void *s2, size_t len)
-{
-	u8 diff;
-	asm("repe; cmpsb; setnz %0"
-	    : "=qm" (diff), "+D" (s1), "+S" (s2), "+c" (len));
-	return diff;
-}
-
 static inline int memcmp_fs(const void *s1, addr_t s2, size_t len)
 {
 	u8 diff;
--- a/arch/x86/boot/compressed/string.c
+++ b/arch/x86/boot/compressed/string.c
@@ -1,15 +1,4 @@
 #include "misc.h"
-
-/* Avoid intereference from any defines in string_32.h */
-#undef memcmp
-int memcmp(const void *s1, const void *s2, size_t len)
-{
-	u8 diff;
-	asm("repe; cmpsb; setnz %0"
-	    : "=qm" (diff), "+D" (s1), "+S" (s2), "+c" (len));
-	return diff;
-}
-
 #include "../string.c"
 
 /* misc.h might pull in string_32.h which has a macro for memcpy. undef that */
--- a/arch/x86/boot/string.c
+++ b/arch/x86/boot/string.c
@@ -14,6 +14,20 @@
 
 #include "boot.h"
 
+/*
+ * This file gets included in compressed/string.c which might pull in
+ * string_32.h and which in turn maps memcmp to __builtin_memcmp(). Undo
+ * that first.
+ */
+#undef memcmp
+int memcmp(const void *s1, const void *s2, size_t len)
+{
+	u8 diff;
+	asm("repe; cmpsb; setnz %0"
+	    : "=qm" (diff), "+D" (s1), "+S" (s2), "+c" (len));
+	return diff;
+}
+
 int strcmp(const char *str1, const char *str2)
 {
 	const unsigned char *s1 = (const unsigned char *)str1;
--- a/arch/x86/boot/string.h
+++ b/arch/x86/boot/string.h
@@ -8,6 +8,7 @@
 
 void *memcpy(void *dst, const void *src, size_t len);
 void *memset(void *dst, int c, size_t len);
+int memcmp(const void *s1, const void *s2, size_t len);
 
 /*
  * Access builtin version by default. If one needs to use optimized version,
@@ -15,5 +16,6 @@ void *memset(void *dst, int c, size_t le
  */
 #define memcpy(d,s,l) __builtin_memcpy(d,s,l)
 #define memset(d,c,l) __builtin_memset(d,c,l)
+#define memcmp	__builtin_memcmp
 
 #endif /* BOOT_STRING_H */
