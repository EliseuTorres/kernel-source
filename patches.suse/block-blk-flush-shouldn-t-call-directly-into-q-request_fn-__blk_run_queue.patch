From: Tejun Heo <tj@kernel.org>
Date: Wed, 2 Mar 2011 08:48:06 -0500
Subject: block: blk-flush shouldn't call directly into q->request_fn() __blk_run_queue()
References: FATE#312039
Patch-mainline: v2.6.38-rc8
Git-commit: 255bb490c8c27eed484d538efe6ef6a7473bd3f6

blk-flush decomposes a flush into sequence of multiple requests.  On
completion of a request, the next one is queued; however, block layer
must not implicitly call into q->request_fn() directly from completion
path.  This makes the queue behave unexpectedly when seen from the
drivers and violates the assumption that q->request_fn() is called
with process context + queue_lock.

This patch makes blk-flush the following two changes to make sure
q->request_fn() is not called directly from request completion path.

- blk_flush_complete_seq_end_io() now asks __blk_run_queue() to always
  use kblockd instead of calling directly into q->request_fn().

- queue_next_fseq() uses ELEVATOR_INSERT_REQUEUE instead of
  ELEVATOR_INSERT_FRONT so that elv_insert() doesn't try to unplug the
  request queue directly.

Reported by Jan in the following threads.

 http://thread.gmane.org/gmane.linux.ide/48778
 http://thread.gmane.org/gmane.linux.ide/48786

stable: applicable to v2.6.37.

Signed-off-by: Tejun Heo <tj@kernel.org>
Reported-by: Jan Beulich <JBeulich@novell.com>
Cc: "David S. Miller" <davem@davemloft.net>
Cc: stable@kernel.org
Signed-off-by: Jens Axboe <jaxboe@fusionio.com>
Acked-by: Suresh Jayaraman <sjayaraman@suse.de>
---
 block/blk-flush.c |   11 ++++++++---
 1 file changed, 8 insertions(+), 3 deletions(-)

Index: linux-2.6.32-SLE11-SP2/block/blk-flush.c
===================================================================
--- linux-2.6.32-SLE11-SP2.orig/block/blk-flush.c
+++ linux-2.6.32-SLE11-SP2/block/blk-flush.c
@@ -211,9 +211,14 @@ static void flush_end_io(struct request
 		queued |= blk_flush_complete_seq(rq, seq, error);
 	}
 
-	/* after populating an empty queue, kick it to avoid stall */
+ 	/*
+ 	 * Moving a request silently to empty queue_head may stall the
+	 * queue.  Kick the queue in those cases.  This function is called
+	 * from request completion path and calling directly into
+	 * request_fn may confuse the driver.  Always use kblockd.
+	 */
 	if (queued && was_empty)
-		__blk_run_queue(q, false);
+		__blk_run_queue(q, true);
 }
 
 /**
@@ -256,7 +261,7 @@ static bool blk_kick_flush(struct reques
 	q->flush_rq.end_io = flush_end_io;
 
 	q->flush_pending_idx ^= 1;
-	elv_insert(q, &q->flush_rq, ELEVATOR_INSERT_FRONT);
+	elv_insert(q, &q->flush_rq, ELEVATOR_INSERT_REQUEUE);
 	return true;
 }
 
