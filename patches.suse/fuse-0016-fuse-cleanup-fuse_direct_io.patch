From: Miklos Szeredi <mszeredi@suse.cz>
Date: Sat, 10 Nov 2012 16:55:56 +0100
Subject: fuse: cleanup fuse_direct_io()
Git-commit: fb05f41f5f96f7423c53da4d87913fb44fd0565d
Patch-mainline: v3.9-rc1
References: FATE#317677

Fix the following sparse warnings:

fs/fuse/file.c:1216:43: warning: cast removes address space of expression
fs/fuse/file.c:1216:43: warning: incorrect type in initializer (different address spaces)
fs/fuse/file.c:1216:43:    expected void [noderef] <asn:1>*iov_base
fs/fuse/file.c:1216:43:    got void *<noident>
fs/fuse/file.c:1241:43: warning: cast removes address space of expression
fs/fuse/file.c:1241:43: warning: incorrect type in initializer (different address spaces)
fs/fuse/file.c:1241:43:    expected void [noderef] <asn:1>*iov_base
fs/fuse/file.c:1241:43:    got void *<noident>
fs/fuse/file.c:1267:43: warning: cast removes address space of expression
fs/fuse/file.c:1267:43: warning: incorrect type in initializer (different address spaces)
fs/fuse/file.c:1267:43:    expected void [noderef] <asn:1>*iov_base
fs/fuse/file.c:1267:43:    got void *<noident>

Signed-off-by: Miklos Szeredi <mszeredi@suse.cz>
---
 fs/fuse/cuse.c   |    7 +++++--
 fs/fuse/file.c   |   23 ++++++++---------------
 fs/fuse/fuse_i.h |    5 +++--
 3 files changed, 16 insertions(+), 19 deletions(-)

--- a/fs/fuse/cuse.c
+++ b/fs/fuse/cuse.c
@@ -91,19 +91,22 @@ static ssize_t cuse_read(struct file *fi
 			 loff_t *ppos)
 {
 	loff_t pos = 0;
+	struct iovec iov = { .iov_base = buf, .iov_len = count };
 
-	return fuse_direct_io(file, buf, count, &pos, 0);
+	return fuse_direct_io(file, &iov, 1, count, &pos, 0);
 }
 
 static ssize_t cuse_write(struct file *file, const char __user *buf,
 			  size_t count, loff_t *ppos)
 {
 	loff_t pos = 0;
+	struct iovec iov = { .iov_base = (void __user *)buf, .iov_len = count };
+
 	/*
 	 * No locking or generic_write_checks(), the server is
 	 * responsible for locking and sanity checks.
 	 */
-	return fuse_direct_io(file, buf, count, &pos, 1);
+	return fuse_direct_io(file, &iov, 1, count, &pos, 1);
 }
 
 static int cuse_open(struct inode *inode, struct file *file)
--- a/fs/fuse/file.c
+++ b/fs/fuse/file.c
@@ -1136,9 +1136,9 @@ static inline int fuse_iter_npages(const
 	return min(npages, FUSE_MAX_PAGES_PER_REQ);
 }
 
-static ssize_t __fuse_direct_io(struct file *file, const struct iovec *iov,
-				unsigned long nr_segs, size_t count,
-				loff_t *ppos, int write)
+ssize_t fuse_direct_io(struct file *file, const struct iovec *iov,
+		       unsigned long nr_segs, size_t count, loff_t *ppos,
+		       int write)
 {
 	struct fuse_file *ff = file->private_data;
 	struct fuse_conn *fc = ff->fc;
@@ -1197,13 +1197,6 @@ static ssize_t __fuse_direct_io(struct f
 
 	return res;
 }
-
-ssize_t fuse_direct_io(struct file *file, const char __user *buf,
-		       size_t count, loff_t *ppos, int write)
-{
-	struct iovec iov = { .iov_base = (void *)buf, .iov_len = count };
-	return __fuse_direct_io(file, &iov, 1, count, ppos, write);
-}
 EXPORT_SYMBOL_GPL(fuse_direct_io);
 
 static ssize_t __fuse_direct_read(struct file *file, const struct iovec *iov,
@@ -1215,8 +1208,8 @@ static ssize_t __fuse_direct_read(struct
 	if (is_bad_inode(inode))
 		return -EIO;
 
-	res = __fuse_direct_io(file, iov, nr_segs, iov_length(iov, nr_segs),
-			       ppos, 0);
+	res = fuse_direct_io(file, iov, nr_segs, iov_length(iov, nr_segs),
+			     ppos, 0);
 
 	fuse_invalidate_attr(inode);
 
@@ -1226,7 +1219,7 @@ static ssize_t __fuse_direct_read(struct
 static ssize_t fuse_direct_read(struct file *file, char __user *buf,
 				     size_t count, loff_t *ppos)
 {
-	struct iovec iov = { .iov_base = (void *)buf, .iov_len = count };
+	struct iovec iov = { .iov_base = buf, .iov_len = count };
 	return __fuse_direct_read(file, &iov, 1, ppos);
 }
 
@@ -1239,7 +1232,7 @@ static ssize_t __fuse_direct_write(struc
 
 	res = generic_write_checks(file, ppos, &count, 0);
 	if (!res) {
-		res = __fuse_direct_io(file, iov, nr_segs, count, ppos, 1);
+		res = fuse_direct_io(file, iov, nr_segs, count, ppos, 1);
 		if (res > 0)
 			fuse_write_update_size(inode, *ppos);
 	}
@@ -1252,7 +1245,7 @@ static ssize_t __fuse_direct_write(struc
 static ssize_t fuse_direct_write(struct file *file, const char __user *buf,
 				 size_t count, loff_t *ppos)
 {
-	struct iovec iov = { .iov_base = (void *)buf, .iov_len = count };
+	struct iovec iov = { .iov_base = (void __user *)buf, .iov_len = count };
 	struct inode *inode = file->f_path.dentry->d_inode;
 	ssize_t res;
 
--- a/fs/fuse/fuse_i.h
+++ b/fs/fuse/fuse_i.h
@@ -787,8 +787,9 @@ int fuse_reverse_inval_entry(struct supe
 
 int fuse_do_open(struct fuse_conn *fc, u64 nodeid, struct file *file,
 		 bool isdir);
-ssize_t fuse_direct_io(struct file *file, const char __user *buf,
-		       size_t count, loff_t *ppos, int write);
+ssize_t fuse_direct_io(struct file *file, const struct iovec *iov,
+		       unsigned long nr_segs, size_t count, loff_t *ppos,
+		       int write);
 long fuse_do_ioctl(struct file *file, unsigned int cmd, unsigned long arg,
 		   unsigned int flags);
 unsigned fuse_file_poll(struct file *file, poll_table *wait);
