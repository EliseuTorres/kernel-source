From: David Sterba <dsterba@suse.cz>
Date: Fri, 18 Jan 2013 00:28:40 +0100
Patch-mainline: never
References: fate#314697
Subject: [PATCH] btrfs: add allow_unsupported module parameter

Disallow access to filesystem with unsupported features by default but
leave a chance to access the filesystem via module parameter override
(taints kernel).

Current:
- mount: inode_cache - deny mount
- mount: autodefrag - deny mount
- ioctl: fallocate and hole punch - return
- ioctl: send and receive - completely disallow

Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/ctree.h |  6 ++++++
 fs/btrfs/file.c  |  7 ++++++-
 fs/btrfs/ioctl.c | 13 ++++++++++++-
 fs/btrfs/super.c | 21 +++++++++++++++++++++
 4 files changed, 45 insertions(+), 2 deletions(-)

diff --git a/fs/btrfs/ctree.h b/fs/btrfs/ctree.h
index a849dae..c00344e 100644
--- a/fs/btrfs/ctree.h
+++ b/fs/btrfs/ctree.h
@@ -3587,4 +3587,10 @@ static inline int is_fstree(u64 rootid)
 		return 1;
 	return 0;
 }
+
+/*
+ * Module parameter
+ */
+extern int allow_unsupported;
+
 #endif
diff --git a/fs/btrfs/file.c b/fs/btrfs/file.c
index 2a8125a..adde50f 100644
--- a/fs/btrfs/file.c
+++ b/fs/btrfs/file.c
@@ -2009,8 +2009,13 @@ static long btrfs_fallocate(struct file *file, int mode,
 	if (mode & ~(FALLOC_FL_KEEP_SIZE | FALLOC_FL_PUNCH_HOLE))
 		return -EOPNOTSUPP;
 
-	if (mode & FALLOC_FL_PUNCH_HOLE)
+	if (mode & FALLOC_FL_PUNCH_HOLE) {
+		if (!allow_unsupported) {
+			printk(KERN_WARNING "btrfs: fallocate/PUNCH_HOLE is not supported, load module with allow_unsupported=1\n");
+			return -EOPNOTSUPP;
+		}
 		return btrfs_punch_hole(inode, offset, len);
+	}
 
 	/*
 	 * Make sure we have enough space before we do the
diff --git a/fs/btrfs/ioctl.c b/fs/btrfs/ioctl.c
index 6992443..b2958a0 100644
--- a/fs/btrfs/ioctl.c
+++ b/fs/btrfs/ioctl.c
@@ -3800,6 +3800,7 @@ long btrfs_ioctl(struct file *file, unsigned int
 {
 	struct btrfs_root *root = BTRFS_I(fdentry(file)->d_inode)->root;
 	void __user *argp = (void __user *)arg;
+	int ret = -ENOTTY;
 
 	switch (cmd) {
 	case FS_IOC_GETFLAGS:
@@ -3880,8 +3881,18 @@ long btrfs_ioctl(struct file *file, unsigned int
 	case BTRFS_IOC_BALANCE_PROGRESS:
 		return btrfs_ioctl_balance_progress(root, argp);
 	case BTRFS_IOC_SET_RECEIVED_SUBVOL:
+		if (!allow_unsupported) {
+			printk(KERN_WARNING "btrfs: IOC_SET_RECEWIVED_SUBVOL is not supported, load module with allow_unsupported=1\n");
+			ret = -EOPNOTSUPP;
+			break;
+		}
 		return btrfs_ioctl_set_received_subvol(file, argp);
 	case BTRFS_IOC_SEND:
+		if (!allow_unsupported) {
+			printk(KERN_WARNING "btrfs: IOC_SEND is not supported, load module with allow_unsupported=1\n");
+			ret = -EOPNOTSUPP;
+			break;
+		}
 		return btrfs_ioctl_send(file, argp);
 	case BTRFS_IOC_GET_DEV_STATS:
 		return btrfs_ioctl_get_dev_stats(root, argp);
@@ -3897,5 +3908,5 @@ long btrfs_ioctl(struct file *file, unsigned int
 		return btrfs_ioctl_compr_size(file, argp);
 	}
 
-	return -ENOTTY;
+	return ret;
 }
diff --git a/fs/btrfs/super.c b/fs/btrfs/super.c
index f04fb00..64fa2c9 100644
--- a/fs/btrfs/super.c
+++ b/fs/btrfs/super.c
@@ -18,6 +18,7 @@
 
 #include <linux/blkdev.h>
 #include <linux/module.h>
+#include <linux/moduleparam.h>
 #include <linux/buffer_head.h>
 #include <linux/fs.h>
 #include <linux/pagemap.h>
@@ -525,6 +526,11 @@ int btrfs_parse_options(struct btrfs_root *root, char *options)
 			btrfs_clear_opt(info->mount_opt, SPACE_CACHE);
 			break;
 		case Opt_inode_cache:
+			if (!allow_unsupported) {
+				printk(KERN_WARNING "btrfs: inode_cache is not supported, load module with allow_unsupported=1\n");
+				ret = -EOPNOTSUPP;
+				break;
+			}
 			printk(KERN_INFO "btrfs: enabling inode map caching\n");
 			btrfs_set_opt(info->mount_opt, INODE_MAP_CACHE);
 			break;
@@ -539,6 +545,11 @@ int btrfs_parse_options(struct btrfs_root *root, char *options)
 			btrfs_set_opt(info->mount_opt, ENOSPC_DEBUG);
 			break;
 		case Opt_defrag:
+			if (!allow_unsupported) {
+				printk(KERN_WARNING "btrfs: autodefrag is not supported, load module with allow_unsupported=1\n");
+				ret = -EOPNOTSUPP;
+				break;
+			}
 			printk(KERN_INFO "btrfs: enabling auto defrag\n");
 			btrfs_set_opt(info->mount_opt, AUTO_DEFRAG);
 			break;
@@ -1678,6 +1689,11 @@ static int __init init_btrfs_fs(void)
 	btrfs_init_lockdep();
 
 	printk(KERN_INFO "%s loaded\n", BTRFS_BUILD_VERSION);
+
+	if (allow_unsupported) {
+		add_taint(TAINT_NO_SUPPORT);
+		printk(KERN_INFO "btrfs: allow_unsupported=1 taints kernel\n");
+	}
 	return 0;
 
 unregister_ioctl:
@@ -1712,6 +1728,11 @@ static void __exit exit_btrfs_fs(void)
 	btrfs_exit_compress();
 }
 
+int allow_unsupported = 0;
+
+module_param(allow_unsupported, int, 0444);
+MODULE_PARM_DESC(allow_unsupported, "Allow using features that are out of supported scope");
+
 module_init(init_btrfs_fs)
 module_exit(exit_btrfs_fs)
 
-- 
1.8.0.2

