From: David Sterba <dsterba@suse.cz>
Date: Fri, 18 Jan 2013 00:28:40 +0100
Patch-mainline: never
References: fate#314697
Subject: [PATCH] btrfs: add allow_unsupported module parameter

Disallow access to filesystem with unsupported features by default but
leave a chance to access the filesystem via module parameter override
(taints kernel).

Current:
- mount: inode_cache - deny mount
- mount: autodefrag - deny mount
- ioctl: fallocate and hole punch - return, warning printed only once
- ioctl: receive - completely disallow
- ioctl: send - allowed only NO_FILE_DATA mode

Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/ctree.h |    6 ++++++
 fs/btrfs/file.c  |    8 +++++++-
 fs/btrfs/ioctl.c |   13 ++++++++++++-
 fs/btrfs/send.c  |    5 +++++
 fs/btrfs/super.c |   27 +++++++++++++++++++++++++++
 5 files changed, 57 insertions(+), 2 deletions(-)

--- a/fs/btrfs/ctree.h
+++ b/fs/btrfs/ctree.h
@@ -3733,4 +3733,10 @@ static inline int is_fstree(u64 rootid)
 		return 1;
 	return 0;
 }
+
+/*
+ * Module parameter
+ */
+extern int allow_unsupported;
+
 #endif
--- a/fs/btrfs/file.c
+++ b/fs/btrfs/file.c
@@ -2150,8 +2150,14 @@ static long btrfs_fallocate(struct file
 	if (mode & ~(FALLOC_FL_KEEP_SIZE | FALLOC_FL_PUNCH_HOLE))
 		return -EOPNOTSUPP;
 
-	if (mode & FALLOC_FL_PUNCH_HOLE)
+	if (mode & FALLOC_FL_PUNCH_HOLE) {
+		if (!allow_unsupported) {
+			printk_once(KERN_WARNING
+		"btrfs: fallocate/PUNCH_HOLE is not supported, load module with allow_unsupported=1\n");
+			return -EOPNOTSUPP;
+		}
 		return btrfs_punch_hole(inode, offset, len);
+	}
 
 	/*
 	 * Make sure we have enough space before we do the
--- a/fs/btrfs/ioctl.c
+++ b/fs/btrfs/ioctl.c
@@ -3946,6 +3946,7 @@ long btrfs_ioctl(struct file *file, unsi
 {
 	struct btrfs_root *root = BTRFS_I(fdentry(file)->d_inode)->root;
 	void __user *argp = (void __user *)arg;
+	int ret = -ENOTTY;
 
 	switch (cmd) {
 	case FS_IOC_GETFLAGS:
@@ -4026,6 +4027,11 @@ long btrfs_ioctl(struct file *file, unsi
 	case BTRFS_IOC_BALANCE_PROGRESS:
 		return btrfs_ioctl_balance_progress(root, argp);
 	case BTRFS_IOC_SET_RECEIVED_SUBVOL:
+		if (!allow_unsupported) {
+			printk(KERN_WARNING "btrfs: IOC_SET_RECEIVED_SUBVOL is not supported, load module with allow_unsupported=1\n");
+			ret = -EOPNOTSUPP;
+			break;
+		}
 		return btrfs_ioctl_set_received_subvol(file, argp);
 	case BTRFS_IOC_SEND:
 		return btrfs_ioctl_send(file, argp);
@@ -4040,10 +4046,15 @@ long btrfs_ioctl(struct file *file, unsi
 	case BTRFS_IOC_QGROUP_LIMIT:
 		return btrfs_ioctl_qgroup_limit(file, argp);
 	case BTRFS_IOC_DEV_REPLACE:
+		if (!allow_unsupported) {
+			printk(KERN_WARNING "btrfs: IOC_DEV_REPLACE is not supported, load module with allow_unsupported=1\n");
+			ret = -EOPNOTSUPP;
+			break;
+		}
 		return btrfs_ioctl_dev_replace(root, argp);
 	case BTRFS_IOC_COMPR_SIZE:
 		return btrfs_ioctl_compr_size(file, argp);
 	}
 
-	return -ENOTTY;
+	return ret;
 }
--- a/fs/btrfs/send.c
+++ b/fs/btrfs/send.c
@@ -4599,6 +4599,11 @@ long btrfs_ioctl_send(struct file *mnt_f
 		ret = -EINVAL;
 		goto out;
 	}
+	if (!allow_unsupported || !(arg->flags & BTRFS_SEND_FLAG_NO_FILE_DATA)) {
+		printk(KERN_WARNING "btrfs: IOC_SEND supported in NO_FILE_DATA mode, load module with allow_unsupported=1\n");
+		ret = -EOPNOTSUPP;
+		goto out;
+	}
 
 	sctx = kzalloc(sizeof(struct send_ctx), GFP_NOFS);
 	if (!sctx) {
--- a/fs/btrfs/super.c
+++ b/fs/btrfs/super.c
@@ -18,6 +18,7 @@
 
 #include <linux/blkdev.h>
 #include <linux/module.h>
+#include <linux/moduleparam.h>
 #include <linux/buffer_head.h>
 #include <linux/fs.h>
 #include <linux/pagemap.h>
@@ -535,6 +536,11 @@ int btrfs_parse_options(struct btrfs_roo
 			btrfs_clear_opt(info->mount_opt, SPACE_CACHE);
 			break;
 		case Opt_inode_cache:
+			if (!allow_unsupported) {
+				printk(KERN_WARNING "btrfs: inode_cache is not supported, load module with allow_unsupported=1\n");
+				ret = -EOPNOTSUPP;
+				break;
+			}
 			printk(KERN_INFO "btrfs: enabling inode map caching\n");
 			btrfs_set_opt(info->mount_opt, INODE_MAP_CACHE);
 			break;
@@ -549,6 +555,11 @@ int btrfs_parse_options(struct btrfs_roo
 			btrfs_set_opt(info->mount_opt, ENOSPC_DEBUG);
 			break;
 		case Opt_defrag:
+			if (!allow_unsupported) {
+				printk(KERN_WARNING "btrfs: autodefrag is not supported, load module with allow_unsupported=1\n");
+				ret = -EOPNOTSUPP;
+				break;
+			}
 			printk(KERN_INFO "btrfs: enabling auto defrag\n");
 			btrfs_set_opt(info->mount_opt, AUTO_DEFRAG);
 			break;
@@ -1713,6 +1724,13 @@ static int __init init_btrfs_fs(void)
 	btrfs_init_lockdep();
 
 	printk(KERN_INFO "%s loaded\n", BTRFS_BUILD_VERSION);
+
+#ifdef CONFIG_ENTERPRISE_SUPPORT
+	if (allow_unsupported) {
+		add_taint(TAINT_NO_SUPPORT);
+		printk(KERN_INFO "btrfs: allow_unsupported=1 taints kernel\n");
+	}
+#endif
 	return 0;
 
 unregister_ioctl:
@@ -1750,6 +1768,15 @@ static void __exit exit_btrfs_fs(void)
 	btrfs_exit_compress();
 }
 
+#ifdef CONFIG_ENTERPRISE_SUPPORT
+int allow_unsupported = 0;
+#else
+int allow_unsupported = 1;
+#endif
+
+module_param(allow_unsupported, int, 0444);
+MODULE_PARM_DESC(allow_unsupported, "Allow using features that are out of supported scope");
+
 module_init(init_btrfs_fs)
 module_exit(exit_btrfs_fs)
 
