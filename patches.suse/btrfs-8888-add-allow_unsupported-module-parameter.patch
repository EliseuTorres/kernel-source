From: David Sterba <dsterba@suse.cz>
Date: Fri, 18 Jan 2013 00:28:40 +0100
Patch-mainline: never
References: fate#314697
Subject: [PATCH] btrfs: add allow_unsupported module parameter

Disallow access to filesystem with unsupported features by default but
leave a chance to access the filesystem via module parameter override
(taints kernel).

The status can be toggled during runtime by changing the exported module
parameter in /sys.

Current:
- mount: inode_cache - deny mount
- mount: autodefrag - deny mount
- ioctl: fallocate and hole punch - return, warning printed only once
- ioctl: receive - completely disallow
- ioctl: send - allowed only NO_FILE_DATA mode
- ioctl: device add and rm - completely disallow
- mount: multiple devices - deny mount
- mount: big metadata blocks - remount RO
- mount: compression - deny mount
- mount: seeding device - deny mount

Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/ctree.h   |    4 +++
 fs/btrfs/disk-io.c |   15 ++++++++++++
 fs/btrfs/file.c    |    8 +++++-
 fs/btrfs/ioctl.c   |   23 +++++++++++++++++-
 fs/btrfs/send.c    |    5 ++++
 fs/btrfs/super.c   |   66 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 6 files changed, 119 insertions(+), 2 deletions(-)

--- a/fs/btrfs/ctree.h
+++ b/fs/btrfs/ctree.h
@@ -4045,5 +4045,9 @@ static inline int btrfs_defrag_cancelled
 	return signal_pending(current);
 }
 
+/*
+ * Module parameter
+ */
+extern bool allow_unsupported;
 
 #endif
--- a/fs/btrfs/disk-io.c
+++ b/fs/btrfs/disk-io.c
@@ -2379,6 +2379,14 @@ int open_ctree(struct super_block *sb,
 	if (btrfs_super_flags(disk_super) & BTRFS_SUPER_FLAG_ERROR)
 		set_bit(BTRFS_FS_STATE_ERROR, &fs_info->fs_state);
 
+	if (btrfs_super_flags(disk_super) & BTRFS_SUPER_FLAG_SEEDING) {
+		if (!allow_unsupported) {
+			printk(KERN_WARNING "btrfs: seeding mode is not supported, load module with allow_unsupported=1\n");
+			ret = -EOPNOTSUPP;
+			goto fail_alloc;
+		}
+	}
+
 	/*
 	 * run through our array of backup supers and setup
 	 * our ring pointer to the oldest one
@@ -2443,6 +2451,13 @@ int open_ctree(struct super_block *sb,
 		features |= BTRFS_FEATURE_INCOMPAT_BIG_METADATA;
 	}
 
+	if (features & BTRFS_FEATURE_INCOMPAT_BIG_METADATA) {
+		if (!allow_unsupported) {
+			printk(KERN_WARNING "btrfs: big metadata feature supported read-only, load module with allow_unsupported=1\n");
+			sb->s_flags |= MS_RDONLY;
+		}
+	}
+
 	nodesize = btrfs_super_nodesize(disk_super);
 	leafsize = btrfs_super_leafsize(disk_super);
 	sectorsize = btrfs_super_sectorsize(disk_super);
--- a/fs/btrfs/file.c
+++ b/fs/btrfs/file.c
@@ -2267,8 +2267,14 @@ static long btrfs_fallocate(struct file
 	if (mode & ~(FALLOC_FL_KEEP_SIZE | FALLOC_FL_PUNCH_HOLE))
 		return -EOPNOTSUPP;
 
-	if (mode & FALLOC_FL_PUNCH_HOLE)
+	if (mode & FALLOC_FL_PUNCH_HOLE) {
+		if (!allow_unsupported) {
+			printk_once(KERN_WARNING
+		"btrfs: fallocate/PUNCH_HOLE is not supported, load module with allow_unsupported=1\n");
+			return -EOPNOTSUPP;
+		}
 		return btrfs_punch_hole(inode, offset, len);
+	}
 
 	/*
 	 * Make sure we have enough space before we do the
--- a/fs/btrfs/ioctl.c
+++ b/fs/btrfs/ioctl.c
@@ -4673,6 +4673,7 @@ long btrfs_ioctl(struct file *file, unsi
 {
 	struct btrfs_root *root = BTRFS_I(file_inode(file))->root;
 	void __user *argp = (void __user *)arg;
+	int ret = -ENOTTY;
 
 	switch (cmd) {
 	case FS_IOC_GETFLAGS:
@@ -4706,8 +4707,18 @@ long btrfs_ioctl(struct file *file, unsi
 	case BTRFS_IOC_RESIZE:
 		return btrfs_ioctl_resize(file, argp);
 	case BTRFS_IOC_ADD_DEV:
+		if (!allow_unsupported) {
+			printk(KERN_WARNING "btrfs: IOC_ADD_DEV is not supported, load module with allow_unsupported=1\n");
+			ret = -EOPNOTSUPP;
+			break;
+		}
 		return btrfs_ioctl_add_dev(root, argp);
 	case BTRFS_IOC_RM_DEV:
+		if (!allow_unsupported) {
+			printk(KERN_WARNING "btrfs: IOC_RM_DEV is not supported, load module with allow_unsupported=1\n");
+			ret = -EOPNOTSUPP;
+			break;
+		}
 		return btrfs_ioctl_rm_dev(file, argp);
 	case BTRFS_IOC_FS_INFO:
 		return btrfs_ioctl_fs_info(root, argp);
@@ -4755,6 +4766,11 @@ long btrfs_ioctl(struct file *file, unsi
 	case BTRFS_IOC_BALANCE_PROGRESS:
 		return btrfs_ioctl_balance_progress(root, argp);
 	case BTRFS_IOC_SET_RECEIVED_SUBVOL:
+		if (!allow_unsupported) {
+			printk(KERN_WARNING "btrfs: IOC_SET_RECEIVED_SUBVOL is not supported, load module with allow_unsupported=1\n");
+			ret = -EOPNOTSUPP;
+			break;
+		}
 		return btrfs_ioctl_set_received_subvol(file, argp);
 	case BTRFS_IOC_SEND:
 		return btrfs_ioctl_send(file, argp);
@@ -4775,6 +4791,11 @@ long btrfs_ioctl(struct file *file, unsi
 	case BTRFS_IOC_QUOTA_RESCAN_WAIT:
 		return btrfs_ioctl_quota_rescan_wait(file, argp);
 	case BTRFS_IOC_DEV_REPLACE:
+		if (!allow_unsupported) {
+			printk(KERN_WARNING "btrfs: IOC_DEV_REPLACE is not supported, load module with allow_unsupported=1\n");
+			ret = -EOPNOTSUPP;
+			break;
+		}
 		return btrfs_ioctl_dev_replace(root, argp);
 	case BTRFS_IOC_GET_FSLABEL:
 		return btrfs_ioctl_get_fslabel(file, argp);
@@ -4790,5 +4811,5 @@ long btrfs_ioctl(struct file *file, unsi
 		return btrfs_ioctl_set_features(file, argp);
 	}
 
-	return -ENOTTY;
+	return ret;
 }
--- a/fs/btrfs/send.c
+++ b/fs/btrfs/send.c
@@ -4735,6 +4735,11 @@ long btrfs_ioctl_send(struct file *mnt_f
 		ret = -EINVAL;
 		goto out;
 	}
+	if (!allow_unsupported && !(arg->flags & BTRFS_SEND_FLAG_NO_FILE_DATA)) {
+		printk(KERN_WARNING "btrfs: IOC_SEND supported in NO_FILE_DATA mode, load module with allow_unsupported=1\n");
+		ret = -EOPNOTSUPP;
+		goto out;
+	}
 
 	sctx = kzalloc(sizeof(struct send_ctx), GFP_NOFS);
 	if (!sctx) {
--- a/fs/btrfs/super.c
+++ b/fs/btrfs/super.c
@@ -18,6 +18,7 @@
 
 #include <linux/blkdev.h>
 #include <linux/module.h>
+#include <linux/moduleparam.h>
 #include <linux/buffer_head.h>
 #include <linux/fs.h>
 #include <linux/pagemap.h>
@@ -445,6 +446,11 @@ int btrfs_parse_options(struct btrfs_roo
 			/* Fallthrough */
 		case Opt_compress:
 		case Opt_compress_type:
+			if (!allow_unsupported) {
+				printk(KERN_WARNING "btrfs: compression is not supported, load module with allow_unsupported=1\n");
+				ret = -EOPNOTSUPP;
+				break;
+			}
 			if (token == Opt_compress ||
 			    token == Opt_compress_force ||
 			    strcmp(args[0].from, "zlib") == 0) {
@@ -582,6 +588,11 @@ int btrfs_parse_options(struct btrfs_roo
 			btrfs_clear_opt(info->mount_opt, SPACE_CACHE);
 			break;
 		case Opt_inode_cache:
+			if (!allow_unsupported) {
+				printk(KERN_WARNING "btrfs: inode_cache is not supported, load module with allow_unsupported=1\n");
+				ret = -EOPNOTSUPP;
+				break;
+			}
 			printk(KERN_INFO "btrfs: enabling inode map caching\n");
 			btrfs_set_opt(info->mount_opt, INODE_MAP_CACHE);
 			break;
@@ -596,6 +607,11 @@ int btrfs_parse_options(struct btrfs_roo
 			btrfs_set_opt(info->mount_opt, ENOSPC_DEBUG);
 			break;
 		case Opt_defrag:
+			if (!allow_unsupported) {
+				printk(KERN_WARNING "btrfs: autodefrag is not supported, load module with allow_unsupported=1\n");
+				ret = -EOPNOTSUPP;
+				break;
+			}
 			printk(KERN_INFO "btrfs: enabling auto defrag\n");
 			btrfs_set_opt(info->mount_opt, AUTO_DEFRAG);
 			break;
@@ -1164,6 +1180,11 @@ static struct dentry *btrfs_mount(struct
 	if (error)
 		return ERR_PTR(error);
 
+	if (!allow_unsupported && fs_devices->total_devices > 1) {
+		printk(KERN_WARNING "btrfs: multiple devices not supported, load module with allow_unsupported=1\n");
+		return ERR_PTR(-EOPNOTSUPP);
+	}
+
 	/*
 	 * Setup a dummy root and fs_info for test/set super.  This is because
 	 * we don't actually fill this stuff out until open_ctree, but we need
@@ -1842,6 +1863,13 @@ static int __init init_btrfs_fs(void)
 
 	btrfs_print_info();
 
+#ifdef CONFIG_ENTERPRISE_SUPPORT
+	if (allow_unsupported) {
+		add_taint(TAINT_NO_SUPPORT, LOCKDEP_STILL_OK);
+		printk(KERN_INFO "btrfs: allow_unsupported=1 taints kernel\n");
+	}
+#endif
+
 	err = btrfs_run_sanity_tests();
 	if (err)
 		goto unregister_ioctl;
@@ -1893,6 +1921,44 @@ static void __exit exit_btrfs_fs(void)
 	btrfs_exit_compress();
 }
 
+#ifdef CONFIG_ENTERPRISE_SUPPORT
+bool allow_unsupported = false;
+#else
+bool allow_unsupported = true;
+#endif
+
+static int btrfs_set_allow_unsupported(const char *buffer, const struct kernel_param *kp)
+{
+	int ret;
+	struct kernel_param dummy_kp = *kp;
+	bool newval;
+
+	dummy_kp.arg = &newval;
+
+	ret = param_set_bool(buffer, &dummy_kp);
+	if (ret)
+		return ret;
+
+	if (allow_unsupported && !newval) {
+		printk(KERN_INFO "btrfs: disallowing unsupported features, kernel remains tainted\n");
+		allow_unsupported = false;
+	} else if (!allow_unsupported && newval) {
+		printk(KERN_INFO "btrfs: allowing unsupported features, kernel tainted\n");
+		add_taint(TAINT_NO_SUPPORT, LOCKDEP_STILL_OK);
+		allow_unsupported = true;
+	}
+	return 0;
+}
+
+static struct kernel_param_ops btrfs_allow_unsupported_param_ops = {
+	.set = btrfs_set_allow_unsupported,
+	.get = param_get_bool,
+};
+
+module_param_cb(allow_unsupported, &btrfs_allow_unsupported_param_ops,
+		&allow_unsupported, 0644);
+MODULE_PARM_DESC(allow_unsupported, "Allow using features that are out of supported scope");
+
 module_init(init_btrfs_fs)
 module_exit(exit_btrfs_fs)
 
