From: NeilBrown <neilb@suse.de>
Date: Thu, 12 Apr 2012 16:27:09 +1000
Subject: [PATCH 13/23] md/bitmap: convert some spin_lock_irqsave to
 spin_lock_irq3.5
Patch-mainline: fate#311379
References: 

All of these sites can only be called from process context with
irqs enabled, so using irqsave/irqrestore just adds noise.
Remove it.

Signed-off-by: NeilBrown <neilb@suse.de>
Acked-by: NeilBrown <neilb@suse.de>

---
 drivers/md/bitmap.c |   32 ++++++++++++++------------------
 1 file changed, 14 insertions(+), 18 deletions(-)

--- linux-3.0-SLE11-SP2-BTMU.orig/drivers/md/bitmap.c
+++ linux-3.0-SLE11-SP2-BTMU/drivers/md/bitmap.c
@@ -800,10 +800,9 @@ static void bitmap_file_unmap(struct bit
 	struct page **map, *sb_page;
 	unsigned long *attr;
 	int pages;
-	unsigned long flags;
 	struct bitmap_storage *store = &bitmap->storage;
 
-	spin_lock_irqsave(&bitmap->lock, flags);
+	spin_lock_irq(&bitmap->lock);
 	map = store->filemap;
 	store->filemap = NULL;
 	attr = store->filemap_attr;
@@ -812,7 +811,7 @@ static void bitmap_file_unmap(struct bit
 	store->file_pages = 0;
 	sb_page = store->sb_page;
 	store->sb_page = NULL;
-	spin_unlock_irqrestore(&bitmap->lock, flags);
+	spin_unlock_irq(&bitmap->lock);
 
 	while (pages--)
 		if (map[pages] != sb_page) /* 0 is sb_page, release it below */
@@ -827,12 +826,11 @@ static void bitmap_file_unmap(struct bit
 static void bitmap_file_put(struct bitmap *bitmap)
 {
 	struct file *file;
-	unsigned long flags;
 
-	spin_lock_irqsave(&bitmap->lock, flags);
+	spin_lock_irq(&bitmap->lock);
 	file = bitmap->storage.file;
 	bitmap->storage.file = NULL;
-	spin_unlock_irqrestore(&bitmap->lock, flags);
+	spin_unlock_irq(&bitmap->lock);
 
 	if (file) {
 		synchronize_rcu();
@@ -966,7 +964,7 @@ static void bitmap_file_clear_bit(struct
  * sync the dirty pages of the bitmap file to disk */
 void bitmap_unplug(struct bitmap *bitmap)
 {
-	unsigned long i, flags;
+	unsigned long i;
 	int dirty, need_write;
 	int wait = 0;
 
@@ -976,9 +974,9 @@ void bitmap_unplug(struct bitmap *bitmap
 	/* look at each page to see if there are any set bits that need to be
 	 * flushed out to disk */
 	for (i = 0; i < bitmap->storage.file_pages; i++) {
-		spin_lock_irqsave(&bitmap->lock, flags);
+		spin_lock_irq(&bitmap->lock);
 		if (!bitmap->storage.filemap) {
-			spin_unlock_irqrestore(&bitmap->lock, flags);
+			spin_unlock_irq(&bitmap->lock);
 			return;
 		}
 		dirty = test_page_attr(bitmap, i, BITMAP_PAGE_DIRTY);
@@ -989,7 +987,7 @@ void bitmap_unplug(struct bitmap *bitmap
 			clear_page_attr(bitmap, i, BITMAP_PAGE_PENDING);
 		if (dirty)
 			wait = 1;
-		spin_unlock_irqrestore(&bitmap->lock, flags);
+		spin_unlock_irq(&bitmap->lock);
 
 		if (dirty || need_write)
 			write_page(bitmap, bitmap->storage.filemap[i], 0);
@@ -1198,7 +1196,6 @@ void bitmap_daemon_work(mddev_t *mddev)
 	struct bitmap *bitmap;
 	unsigned long j;
 	unsigned long nextpage;
-	unsigned long flags;
 	sector_t blocks;
 
 	/* Use a mutex to guard daemon_work against
@@ -1225,7 +1222,7 @@ void bitmap_daemon_work(mddev_t *mddev)
 	 * So set NEEDWRITE now, then after we make any last-minute changes
 	 * we will write it.
 	 */
-	spin_lock_irqsave(&bitmap->lock, flags);
+	spin_lock_irq(&bitmap->lock);
 	for (j = 0; j < bitmap->storage.file_pages; j++)
 		if (test_page_attr(bitmap, j,
 				   BITMAP_PAGE_PENDING)) {
@@ -1304,14 +1301,14 @@ void bitmap_daemon_work(mddev_t *mddev)
 				   BITMAP_PAGE_NEEDWRITE)) {
 			clear_page_attr(bitmap, j,
 					BITMAP_PAGE_NEEDWRITE);
-			spin_unlock_irqrestore(&bitmap->lock, flags);
+			spin_unlock_irq(&bitmap->lock);
 			write_page(bitmap, bitmap->storage.filemap[j], 0);
-			spin_lock_irqsave(&bitmap->lock, flags);
+			spin_lock_irq(&bitmap->lock);
 			if (!bitmap->storage.filemap)
 				break;
 		}
 	}
-	spin_unlock_irqrestore(&bitmap->lock, flags);
+	spin_unlock_irq(&bitmap->lock);
 
  done:
 	if (bitmap->allclean == 0)
@@ -1537,13 +1534,12 @@ EXPORT_SYMBOL(bitmap_start_sync);
 void bitmap_end_sync(struct bitmap *bitmap, sector_t offset, sector_t *blocks, int aborted)
 {
 	bitmap_counter_t *bmc;
-	unsigned long flags;
 
 	if (bitmap == NULL) {
 		*blocks = 1024;
 		return;
 	}
-	spin_lock_irqsave(&bitmap->lock, flags);
+	spin_lock_irq(&bitmap->lock);
 	bmc = bitmap_get_counter(bitmap, offset, blocks, 0);
 	if (bmc == NULL)
 		goto unlock;
@@ -1559,7 +1555,7 @@ void bitmap_end_sync(struct bitmap *bitm
 		}
 	}
  unlock:
-	spin_unlock_irqrestore(&bitmap->lock, flags);
+	spin_unlock_irq(&bitmap->lock);
 	bitmap->allclean = 0;
 }
 EXPORT_SYMBOL(bitmap_end_sync);
