From: Arne Jansen <sensille@gmx.net>
Date: Wed, 18 Apr 2012 10:27:16 +0200
Patch-mainline: yes
References: FATE#306586
Git-commit: b9688bb8459b67e42327de6420edb405a9188775
Subject: [PATCH] btrfs: don't return EINTR

It is basically a good thing if we are interruptible when waiting for
free space, but the generality in which it is implemented currently
leads to system calls being interruptible that are not documented this
way. For example git can't handle interrupted unlink(), leading to
corrupt repos under space pressure.
Instead we raise the bar to only be interruptible by SIGKILL.
Thanks to David Sterba for suggesting this.

Signed-off-by: Arne Jansen <sensille@gmx.net>
Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/extent-tree.c |    3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

--- a/fs/btrfs/extent-tree.c
+++ b/fs/btrfs/extent-tree.c
@@ -3762,8 +3762,7 @@ again:
 		 */
 		if (current->journal_info)
 			return -EAGAIN;
-		ret = wait_event_interruptible(space_info->wait,
-					       !space_info->flush);
+		ret = wait_event_killable(space_info->wait, !space_info->flush);
 		/* Must have been interrupted, return */
 		if (ret) {
 			printk(KERN_DEBUG "%s returning -EINTR\n", __func__);
