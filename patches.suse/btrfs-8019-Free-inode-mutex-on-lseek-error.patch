From d5338b6a5a693b4f28a57a8d88deb6fdd5744b7e Mon Sep 17 00:00:00 2001
From: Andi Kleen <ak@linux.intel.com>
Date: Fri, 19 Aug 2011 17:07:38 -0700
Patch-mainline: pending
References: FATE#306586
Subject: [PATCH] BTRFS: Free inode mutex on lseek error

Introduced with b26751575a9aa55fd6dbf3febde3ff06dfadc44f

Cc: josef@redhat.com
Cc: chris.mason@oracle.com
Signed-off-by: Andi Kleen <ak@linux.intel.com>
Signed-off-by: David Sterba <dsterba@suse.cz>
---
 fs/btrfs/file.c |   22 ++++++++++------------
 1 files changed, 10 insertions(+), 12 deletions(-)

diff --git a/fs/btrfs/file.c b/fs/btrfs/file.c
index f2e9282..7a3d165 100644
--- a/fs/btrfs/file.c
+++ b/fs/btrfs/file.c
@@ -1842,20 +1842,15 @@ static loff_t btrfs_file_llseek(struct file *file, loff_t offset, int origin)
 		}
 
 		ret = find_desired_extent(inode, &offset, origin);
-		if (ret) {
-			mutex_unlock(&inode->i_mutex);
-			return ret;
-		}
+		if (ret)
+			goto error;
 	}
 
-	if (offset < 0 && !(file->f_mode & FMODE_UNSIGNED_OFFSET)) {
-		offset = -EINVAL;
-		goto out;
-	}
-	if (offset > inode->i_sb->s_maxbytes) {
-		offset = -EINVAL;
-		goto out;
-	}
+	ret = -EINVAL;
+	if (offset < 0 && !(file->f_mode & FMODE_UNSIGNED_OFFSET))
+		goto error;
+	if (offset > inode->i_sb->s_maxbytes)
+		goto error;
 
 	/* Special lock needed here? */
 	if (offset != file->f_pos) {
@@ -1865,6 +1860,9 @@ static loff_t btrfs_file_llseek(struct file *file, loff_t offset, int origin)
 out:
 	mutex_unlock(&inode->i_mutex);
 	return offset;
+error:
+	mutex_unlock(&inode->i_mutex);
+	return ret;
 }
 
 const struct file_operations btrfs_file_operations = {
-- 
1.7.6

