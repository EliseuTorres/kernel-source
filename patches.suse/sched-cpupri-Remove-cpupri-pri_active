Subject: sched/cpupri: Remove cpupri->pri_active
From: Yong Zhang <yong.zhang0@gmail.com>
Date: Sat, 6 Aug 2011 08:10:04 +0800
Git-commit: 5710f15b52664ae0bfa60a66d75464769d297b2b
Patch-mainline: not yet

Since [sched/cpupri: Remove the vec->lock], member pri_active
of struct cpupri is not needed any more, just remove it. Also
clean stuff related to it.

Signed-off-by: Yong Zhang <yong.zhang0@gmail.com>
Signed-off-by: Peter Zijlstra <a.p.zijlstra@chello.nl>
Link: http://lkml.kernel.org/r/20110806001004.GA2207@zhy
Signed-off-by: Ingo Molnar <mingo@elte.hu>
Acked-by: Mike Galbraith <mgalbraith@suse.de>

---
 kernel/sched_cpupri.c |    3 +--
 kernel/sched_cpupri.h |    2 --
 2 files changed, 1 insertion(+), 4 deletions(-)

Index: linux-3.0-SLE11-SP2-3.0/kernel/sched_cpupri.c
===================================================================
--- linux-3.0-SLE11-SP2-3.0.orig/kernel/sched_cpupri.c
+++ linux-3.0-SLE11-SP2-3.0/kernel/sched_cpupri.c
@@ -152,8 +152,7 @@ void cpupri_set(struct cpupri *cp, int c
 	 * If the cpu was currently mapped to a different value, we
 	 * need to map it to the new value then remove the old value.
 	 * Note, we must add the new value first, otherwise we risk the
-	 * cpu being cleared from pri_active, and this cpu could be
-	 * missed for a push or pull.
+	 * cpu being missed by the priority loop in cpupri_find.
 	 */
 	if (likely(newpri != CPUPRI_INVALID)) {
 		struct cpupri_vec *vec = &cp->pri_to_cpu[newpri];
Index: linux-3.0-SLE11-SP2-3.0/kernel/sched_cpupri.h
===================================================================
--- linux-3.0-SLE11-SP2-3.0.orig/kernel/sched_cpupri.h
+++ linux-3.0-SLE11-SP2-3.0/kernel/sched_cpupri.h
@@ -4,7 +4,6 @@
 #include <linux/sched.h>
 
 #define CPUPRI_NR_PRIORITIES	(MAX_RT_PRIO + 2)
-#define CPUPRI_NR_PRI_WORDS	BITS_TO_LONGS(CPUPRI_NR_PRIORITIES)
 
 #define CPUPRI_INVALID -1
 #define CPUPRI_IDLE     0
@@ -18,7 +17,6 @@ struct cpupri_vec {
 
 struct cpupri {
 	struct cpupri_vec pri_to_cpu[CPUPRI_NR_PRIORITIES];
-	long              pri_active[CPUPRI_NR_PRI_WORDS];
 	int               cpu_to_pri[NR_CPUS];
 };
 
