From: Josh Boyer <jwboyer@fedoraproject.org>
Date: Fri, 26 Oct 2012 14:02:09 -0400
Subject: [PATCH] hibernate: Disable in a signed modules environment

Git-commit: Not yet
Patch-mainline: Not yet, fedora 20
References: fate#314486, bnc#884333
Target: SLE-11 SP3

There is currently no way to verify the resume image when returning
from hibernate.  This might compromise the signed modules trust model,
so until we can work with signed hibernate images we disable it in
a secure modules environment.

Signed-off-by: Josh Boyer <jwboyer@fedoraproject.com>
Acked-by: Lee, Chun-Yi <jlee@suse.com>
---
 kernel/power/hibernate.c | 16 +++++++++++++++-
 kernel/power/main.c      |  7 ++++++-
 kernel/power/user.c      |  1 +
 3 files changed, 22 insertions(+), 2 deletions(-)

Index: linux-3.0-SLE11-SP3/kernel/power/hibernate.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/kernel/power/hibernate.c
+++ linux-3.0-SLE11-SP3/kernel/power/hibernate.c
@@ -24,6 +24,8 @@
 #include <linux/freezer.h>
 #include <linux/gfp.h>
 #include <linux/syscore_ops.h>
+#include <linux/efi.h>
+#include <linux/module.h>
 
 #include "power.h"
 
@@ -609,6 +611,10 @@ int hibernate(void)
 {
 	int error;
 
+	if (secure_modules()) {
+		return -EPERM;
+	}
+
 	mutex_lock(&pm_mutex);
 	/* The snapshot device should not be opened while we're running */
 	if (!atomic_add_unless(&snapshot_device_available, -1, 0)) {
@@ -705,7 +711,7 @@ static int software_resume(void)
 	/*
 	 * If the user said "noresume".. bail out early.
 	 */
-	if (noresume)
+	if (noresume || secure_modules())
 		return 0;
 
 	/*
@@ -854,6 +860,11 @@ static ssize_t disk_show(struct kobject
 	int i;
 	char *start = buf;
 
+	if (secure_boot_enabled) {
+		buf += sprintf(buf, "[%s]\n", "disabled");
+		return buf-start;
+	}
+
 	for (i = HIBERNATION_FIRST; i <= HIBERNATION_MAX; i++) {
 		if (!hibernation_modes[i])
 			continue;
@@ -887,6 +898,9 @@ static ssize_t disk_store(struct kobject
 	char *p;
 	int mode = HIBERNATION_INVALID;
 
+	if (secure_modules())
+		return -EPERM;
+
 	p = memchr(buf, '\n', n);
 	len = p ? p - buf : n;
 
Index: linux-3.0-SLE11-SP3/kernel/power/main.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/kernel/power/main.c
+++ linux-3.0-SLE11-SP3/kernel/power/main.c
@@ -12,6 +12,7 @@
 #include <linux/string.h>
 #include <linux/resume-trace.h>
 #include <linux/workqueue.h>
+#include <linux/efi.h>
 
 #include "power.h"
 
@@ -157,7 +158,11 @@ static ssize_t state_show(struct kobject
 	}
 #endif
 #ifdef CONFIG_HIBERNATION
-	s += sprintf(s, "%s\n", "disk");
+	if (!secure_boot_enabled) {
+		s += sprintf(s, "%s\n", "disk");
+	} else {
+		s += sprintf(s, "\n");
+	}
 #else
 	if (s != buf)
 		/* convert the last space to a newline */
Index: linux-3.0-SLE11-SP3/kernel/power/user.c
===================================================================
--- linux-3.0-SLE11-SP3.orig/kernel/power/user.c
+++ linux-3.0-SLE11-SP3/kernel/power/user.c
@@ -24,6 +24,7 @@
 #include <linux/cpu.h>
 #include <linux/freezer.h>
 #include <linux/module.h>
+#include <linux/efi.h>
 
 #include <asm/uaccess.h>
 
