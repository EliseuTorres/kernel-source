From 7692a0c5c833e22a4abd92a62c684b6c996eaf70 Mon Sep 17 00:00:00 2001
From: Shlomo Pongratz <shlomop@mellanox.com>
Date: Thu, 6 Feb 2014 18:33:17 +0200
Subject: [PATCH] block/null_blk: Fix completion processing from LIFO to FIFO
Git-commit: d7790b928d42597b7da21a4e43080774903e3b5c
Patch-mainline: v3.14-rc3
References: fate#315209

The completion queue is implemented using lockless list.

The llist_add is adds the events to the list head which is a push operation.
The processing of the completion elements is done by disconnecting all the
pushed elements and iterating over the disconnected list. The problem is
that the processing is done in reverse order w.r.t order of the insertion
i.e. LIFO processing. By reversing the disconnected list which is done in
linear time the desired FIFO processing is achieved.

Signed-off-by: Jan Kara <jack@suse.cz>
Signed-off-by: Jens Axboe <axboe@fb.com>

---
 drivers/block/null_blk.c |    2 ++
 1 files changed, 2 insertions(+), 0 deletions(-)

diff --git a/drivers/block/null_blk.c b/drivers/block/null_blk.c
index d167bbb..ab36a0e 100644
--- a/drivers/block/null_blk.c
+++ b/drivers/block/null_blk.c
@@ -195,6 +195,7 @@ static enum hrtimer_restart null_cmd_timer_expired(struct hrtimer *timer)
 	cq = &per_cpu(completion_queues, smp_processor_id());
 
 	while ((entry = llist_del_all(&cq->list)) != NULL) {
+		entry = llist_reverse_order(entry);
 		do {
 			cmd = container_of(entry, struct nullb_cmd, ll_list);
 			end_cmd(cmd);
@@ -235,6 +236,7 @@ static void null_ipi_cmd_end_io(void *data)
 	cq = &per_cpu(completion_queues, smp_processor_id());
 
 	entry = llist_del_all(&cq->list);
+	entry = llist_reverse_order(entry);
 
 	while (entry) {
 		next = entry->next;
-- 
1.6.0.2

