From: M. Mohan Kumar <mohan@in.ibm.com>
Subject: [PATCH 099/111]     fs/9p: TREADLINK bugfix
Git-commit: 31b6ceac497954c160c61f07e76b891b1cf53c90
Patch-Mainline: 2.6.38
References: FATE#311639

    Remove v9fs_vfs_readlink_dotl function and use generic_readlink. Update
    v9fs_vfs_follow_link_dotl function to accommodate this change

	upstream commit 31b6ceac497954c160c61f07e76b891b1cf53c90

    Signed-off-by: M. Mohan Kumar <mohan@in.ibm.com>
    Reported-by:  Dr. David Alan Gilbert <linux@treblig.org>
    Signed-off-by: Venkateswararao Jujjuri <jvrao@linux.vnet.ibm.com>
    Signed-off-by: Eric Van Hensbergen <ericvh@gmail.com>
Signed-off-by: Harsh Prateek Bora <harsh@linux.vnet.ibm.com>
Acked-by: Bruce Rogers <brogers@suse.com>
---
 fs/9p/vfs_inode_dotl.c |   62 ++++++++++++++++++-----------------------------
 1 files changed, 24 insertions(+), 38 deletions(-)

diff --git a/fs/9p/vfs_inode_dotl.c b/fs/9p/vfs_inode_dotl.c
index fdaf151..0cf1ecd 100644
--- a/fs/9p/vfs_inode_dotl.c
+++ b/fs/9p/vfs_inode_dotl.c
@@ -707,30 +707,6 @@ error:
         return err;
 }
 
-static int
-v9fs_vfs_readlink_dotl(struct dentry *dentry, char *buffer, int buflen)
-{
-        int retval;
-        struct p9_fid *fid;
-        char *target = NULL;
-
-        P9_DPRINTK(P9_DEBUG_VFS, " %s\n", dentry->d_name.name);
-        retval = -EPERM;
-        fid = v9fs_fid_lookup(dentry);
-        if (IS_ERR(fid))
-                return PTR_ERR(fid);
-
-        retval = p9_client_readlink(fid, &target);
-        if (retval < 0)
-                return retval;
-
-        strncpy(buffer, target, buflen);
-        P9_DPRINTK(P9_DEBUG_VFS, "%s -> %s\n", dentry->d_name.name, buffer);
-
-        retval = strnlen(buffer, buflen);
-        return retval;
-}
-
 /*
  * v9fs_vfs_follow_link_dotl - follow a symlink path
  * @dentry: dentry for symlink
@@ -741,24 +717,34 @@ v9fs_vfs_readlink_dotl(struct dentry *dentry, char *buffer, int buflen)
 static void *
 v9fs_vfs_follow_link_dotl(struct dentry *dentry, struct nameidata *nd)
 {
-        int len = 0;
+        int retval;
+	struct p9_fid *fid;
         char *link = __getname();
+	char *target;
 
-        P9_DPRINTK(P9_DEBUG_VFS, "%s n", dentry->d_name.name);
+        P9_DPRINTK(P9_DEBUG_VFS, "%s\n", dentry->d_name.name);
 
-        if (!link)
+        if (!link) {
                 link = ERR_PTR(-ENOMEM);
-        else {
-                len = v9fs_vfs_readlink_dotl(dentry, link, PATH_MAX);
-                if (len < 0) {
-                        __putname(link);
-                        link = ERR_PTR(len);
-                } else
-                        link[min(len, PATH_MAX-1)] = 0;
-        }
+		goto ndset;
+	}
+	fid = v9fs_fid_lookup(dentry);
+	if (IS_ERR(fid)) {
+		__putname(link);
+		link = ERR_PTR(PTR_ERR(fid));
+		goto ndset;
+	}
+	retval = p9_client_readlink(fid, &target);
+	if (!retval) {
+		strcpy(link, target);
+		kfree(target);
+		goto ndset;
+	}
+	__putname(link);
+	link = ERR_PTR(retval);
+ndset:
         nd_set_link(nd, link);
-
-        return NULL;
+	return NULL;
 }
 
 const struct inode_operations v9fs_dir_inode_operations_dotl = {
@@ -781,7 +767,7 @@ const struct inode_operations v9fs_file_inode_operations_dotl = {
 };
 
 const struct inode_operations v9fs_symlink_inode_operations_dotl = {
-        .readlink = v9fs_vfs_readlink_dotl,
+        .readlink = generic_readlink,
         .follow_link = v9fs_vfs_follow_link_dotl,
         .put_link = v9fs_vfs_put_link,
         .getattr = v9fs_vfs_getattr_dotl,
-- 
1.7.1.1

