From 1da0966c256f701e215fe3b556d90954bc5e3d7b Mon Sep 17 00:00:00 2001
From: Waiman Long <Waiman.Long@hp.com>
Date: Wed, 14 May 2014 14:14:43 -0400
Subject: [PATCH 12/17] make prepend_name() work correctly when called with negative *buflen
References: FATE#317271
Git-commit: e825196d48d2b89a6ec3a8eff280098d2a78207e
Patch-mainline: v3.14

In all callchains leading to prepend_name(), the value left in
*buflen is eventually discarded unused if prepend_name() has returned
a negative.  So we are free to do what prepend() does, and subtract
from *buflen *before* checking for underflow (which turns into checking
the sign of subtraction result, of course).

It is a backport of the upstream commit:

  e825196d48d2b89a6ec3a8eff280098d2a78207e

Cc: stable@vger.kernel.org
Signed-off-by: Al Viro <viro@zeniv.linux.org.uk>
Acked-by: Jeff Mahoney <jeffm@suse.com>
---
 fs/dcache.c |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/fs/dcache.c b/fs/dcache.c
index 7cdca33..80e6427 100644
--- a/fs/dcache.c
+++ b/fs/dcache.c
@@ -2619,9 +2619,9 @@ static int prepend_name(char **buffer, int *buflen, struct qstr *name)
 	u32 dlen = ACCESS_ONCE(name->len);
 	char *p;
 
-	if (*buflen < dlen + 1)
-		return -ENAMETOOLONG;
 	*buflen -= dlen + 1;
+	if (*buflen < 0)
+		return -ENAMETOOLONG;
 	p = *buffer -= dlen + 1;
 	*p++ = '/';
 	while (dlen--) {
-- 
1.7.1

