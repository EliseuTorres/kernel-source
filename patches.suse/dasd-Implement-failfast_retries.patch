From: Hannes Reinecke <hare@suse.de>
Date: Thu, 8 Dec 2011 14:21:28 +0100
Subject: dasd: Implement failfast_retries
References: bnc#735543
Patch-Mainline: n/a

For failfast we might want to set a different number of retries,
so this patch implements a 'failfast_retries' setting.

Signed-off-by: Hannes Reinecke <hare@suse.de>
---
 drivers/s390/block/dasd_devmap.c |   45 +++++++++++++++++++++++++++++++++++++-
 drivers/s390/block/dasd_diag.c   |    9 +++++--
 drivers/s390/block/dasd_eckd.c   |   33 +++++++++++++++++----------
 drivers/s390/block/dasd_fba.c    |    9 +++++--
 drivers/s390/block/dasd_int.h    |    1 +
 5 files changed, 78 insertions(+), 19 deletions(-)

diff --git a/drivers/s390/block/dasd_devmap.c b/drivers/s390/block/dasd_devmap.c
index 5f846b8..9bb58d9 100644
--- a/drivers/s390/block/dasd_devmap.c
+++ b/drivers/s390/block/dasd_devmap.c
@@ -1239,7 +1239,7 @@ dasd_failfast_expires_store(struct device *dev, struct device_attribute *attr,
 		return -ENODEV;
 
 	if ((strict_strtoul(buf, 10, &val) != 0) ||
-	    (val > DASD_EXPIRES_MAX) || val == 0) {
+	    (val > device->default_expires) || val == 0) {
 		dasd_put_device(device);
 		return -EINVAL;
 	}
@@ -1294,6 +1294,48 @@ dasd_retries_store(struct device *dev, struct device_attribute *attr,
 
 static DEVICE_ATTR(retries, 0644, dasd_retries_show, dasd_retries_store);
 
+static ssize_t
+dasd_failfast_retries_show(struct device *dev, struct device_attribute *attr,
+			   char *buf)
+{
+	struct dasd_device *device;
+	int len;
+
+	device = dasd_device_from_cdev(to_ccwdev(dev));
+	if (IS_ERR(device))
+		return -ENODEV;
+	len = snprintf(buf, PAGE_SIZE, "%lu\n", device->failfast_retries);
+	dasd_put_device(device);
+	return len;
+}
+
+static ssize_t
+dasd_failfast_retries_store(struct device *dev, struct device_attribute *attr,
+	       const char *buf, size_t count)
+{
+	struct dasd_device *device;
+	unsigned long val;
+
+	device = dasd_device_from_cdev(to_ccwdev(dev));
+	if (IS_ERR(device))
+		return -ENODEV;
+
+	if ((strict_strtoul(buf, 10, &val) != 0) ||
+	    (val > device->default_retries) || val == 0) {
+		dasd_put_device(device);
+		return -EINVAL;
+	}
+
+	if (val)
+		device->failfast_retries = val;
+
+	dasd_put_device(device);
+	return count;
+}
+
+static DEVICE_ATTR(failfast_retries, 0644,
+		   dasd_failfast_retries_show, dasd_failfast_retries_store);
+
 static ssize_t dasd_reservation_policy_show(struct device *dev,
 					    struct device_attribute *attr,
 					    char *buf)
@@ -1406,6 +1448,7 @@ static struct attribute * dasd_attrs[] = {
 	&dev_attr_expires.attr,
 	&dev_attr_failfast_expires.attr,
 	&dev_attr_retries.attr,
+	&dev_attr_failfast_retries.attr,
 	&dev_attr_reservation_policy.attr,
 	&dev_attr_last_known_reservation_state.attr,
 	NULL,
diff --git a/drivers/s390/block/dasd_diag.c b/drivers/s390/block/dasd_diag.c
index b0f3dcf..287c645 100644
--- a/drivers/s390/block/dasd_diag.c
+++ b/drivers/s390/block/dasd_diag.c
@@ -362,6 +362,7 @@ dasd_diag_check_device(struct dasd_device *device)
 	device->default_expires = DIAG_TIMEOUT;
 	device->failfast_expires = DIAG_TIMEOUT;
 	device->default_retries = DIAG_MAX_RETRIES;
+	device->failfast_retries = DIAG_MAX_RETRIES;
 
 	/* Figure out position of label block */
 	switch (private->rdc_data.vdev_class) {
@@ -558,7 +559,6 @@ static struct dasd_ccw_req *dasd_diag_build_cp(struct dasd_device *memdev,
 			recid++;
 		}
 	}
-	cqr->retries = device->default_retries;
 	cqr->buildclk = get_clock();
 	if (blk_noretry_request(req) ||
 	    block->base->features & DASD_FEATURE_FAILFAST)
@@ -566,10 +566,13 @@ static struct dasd_ccw_req *dasd_diag_build_cp(struct dasd_device *memdev,
 	cqr->startdev = memdev;
 	cqr->memdev = memdev;
 	cqr->block = block;
-	if (req->cmd_flags & REQ_FAILFAST_DEV)
+	if (req->cmd_flags & REQ_FAILFAST_DEV) {
 		cqr->expires = memdev->failfast_expires * HZ;
-	else
+		cqr->retries = memdev->failfast_retries;
+	} else {
 		cqr->expires = memdev->default_expires * HZ;
+		cqr->retries = memdev->default_retries;
+	}
 	cqr->status = DASD_CQR_FILLED;
 	return cqr;
 }
diff --git a/drivers/s390/block/dasd_eckd.c b/drivers/s390/block/dasd_eckd.c
index c2d51b6..2b6364f 100644
--- a/drivers/s390/block/dasd_eckd.c
+++ b/drivers/s390/block/dasd_eckd.c
@@ -1436,6 +1436,7 @@ dasd_eckd_check_characteristics(struct dasd_device *device)
 	}
 	device->failfast_expires = device->default_expires;
 	device->default_retries = DASD_RETRIES;
+	device->failfast_retries = device->default_retries;
 
 	/* Generate device unique id */
 	rc = dasd_eckd_generate_uid(device);
@@ -2269,12 +2270,14 @@ static struct dasd_ccw_req *dasd_eckd_build_cp_cmd_single(
 	cqr->startdev = startdev;
 	cqr->memdev = startdev;
 	cqr->block = block;
-	if (req->cmd_flags & REQ_FAILFAST_DEV)
+	if (req->cmd_flags & REQ_FAILFAST_DEV) {
 		cqr->expires = startdev->failfast_expires * HZ;
-	else
+		cqr->retries = startdev->failfast_retries;
+	} else {
 		cqr->expires = startdev->default_expires * HZ;
+		cqr->retries = startdev->default_retries;
+	}
 	cqr->lpm = startdev->path_data.ppm;
-	cqr->retries = startdev->default_retries;
 	cqr->buildclk = get_clock();
 	cqr->status = DASD_CQR_FILLED;
 	return cqr;
@@ -2447,12 +2450,14 @@ static struct dasd_ccw_req *dasd_eckd_build_cp_cmd_track(
 	cqr->startdev = startdev;
 	cqr->memdev = startdev;
 	cqr->block = block;
-	if (req->cmd_flags & REQ_FAILFAST_DEV)
+	if (req->cmd_flags & REQ_FAILFAST_DEV) {
 		cqr->expires = startdev->failfast_expires * HZ;
-	else
+		cqr->retries = startdev->failfast_retries;
+	} else {
 		cqr->expires = startdev->default_expires * HZ;
+		cqr->retries = startdev->default_retries;
+	}
 	cqr->lpm = startdev->path_data.ppm;
-	cqr->retries = startdev->default_retries;
 	cqr->buildclk = get_clock();
 	cqr->status = DASD_CQR_FILLED;
 	return cqr;
@@ -2738,12 +2743,14 @@ static struct dasd_ccw_req *dasd_eckd_build_cp_tpm_track(
 	cqr->startdev = startdev;
 	cqr->memdev = startdev;
 	cqr->block = block;
-	if (req->cmd_flags & REQ_FAILFAST_DEV)
+	if (req->cmd_flags & REQ_FAILFAST_DEV) {
 		cqr->expires = startdev->failfast_expires * HZ;
-	else
+		cqr->retries = startdev->failfast_retries;
+	} else {
 		cqr->expires = startdev->default_expires * HZ;
+		cqr->retries = startdev->default_retries;
+	}
 	cqr->lpm = startdev->path_data.ppm;
-	cqr->retries = startdev->default_retries;
 	cqr->buildclk = get_clock();
 	cqr->status = DASD_CQR_FILLED;
 	return cqr;
@@ -2941,12 +2948,14 @@ static struct dasd_ccw_req *dasd_raw_build_cp(struct dasd_device *startdev,
 	cqr->startdev = startdev;
 	cqr->memdev = startdev;
 	cqr->block = block;
-	if (req->cmd_flags & REQ_FAILFAST_DEV)
+	if (req->cmd_flags & REQ_FAILFAST_DEV) {
 		cqr->expires = startdev->failfast_expires * HZ;
-	else
+		cqr->retries = startdev->failfast_retries;
+	} else {
 		cqr->expires = startdev->default_expires * HZ;
+		cqr->retries = startdev->default_retries;
+	}
 	cqr->lpm = startdev->path_data.ppm;
-	cqr->retries = startdev->default_retries;
 	cqr->buildclk = get_clock();
 	cqr->status = DASD_CQR_FILLED;
 
diff --git a/drivers/s390/block/dasd_fba.c b/drivers/s390/block/dasd_fba.c
index 9805fc7..839df09 100644
--- a/drivers/s390/block/dasd_fba.c
+++ b/drivers/s390/block/dasd_fba.c
@@ -170,6 +170,7 @@ dasd_fba_check_characteristics(struct dasd_device *device)
 	device->default_expires = DASD_EXPIRES;
 	device->failfast_expires = DASD_EXPIRES;
 	device->default_retries = 32;
+	device->failfast_retries = 32;
 	device->path_data.opm = LPM_ANYPATH;
 
 	readonly = dasd_device_is_ro(device);
@@ -371,11 +372,13 @@ static struct dasd_ccw_req *dasd_fba_build_cp(struct dasd_device * memdev,
 	cqr->startdev = memdev;
 	cqr->memdev = memdev;
 	cqr->block = block;
-	if (req->cmd_flags & REQ_FAILFAST_DEV)
+	if (req->cmd_flags & REQ_FAILFAST_DEV) {
 		cqr->expires = memdev->failfast_expires * HZ;
-	else
+		cqr->retries = memdev->failfast_retries;
+	} else {
 		cqr->expires = memdev->default_expires * HZ;
-	cqr->retries = memdev->default_retries;
+		cqr->retries = memdev->default_retries;
+	}
 	cqr->buildclk = get_clock();
 	cqr->status = DASD_CQR_FILLED;
 	return cqr;
diff --git a/drivers/s390/block/dasd_int.h b/drivers/s390/block/dasd_int.h
index 0f91c59..b68d468 100644
--- a/drivers/s390/block/dasd_int.h
+++ b/drivers/s390/block/dasd_int.h
@@ -435,6 +435,7 @@ struct dasd_device {
 	unsigned long default_expires;
 	unsigned long failfast_expires;
 	unsigned long default_retries;
+	unsigned long failfast_retries;
 };
 
 struct dasd_block {
-- 
1.6.0.2

