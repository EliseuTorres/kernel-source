From: Mel Gorman <mgorman@suse.de>
Date: Tue, 8 Nov 2011 18:51:26 +0000
Subject: [PATCH] mm: Limit the amount of writing in direct reclaim for THP
References: Reduce major stalls due to THP and compaction
Patch-mainline: no

THP writes too much and while there is a series that eliminates writes, it
is very far reaching and not heavily tested enough. This patch limits some
of the writes without being too complex until the full series is baked.

Signed-off-by: Mel Gorman <mgorman@suse.de>
--- 
 mm/page_alloc.c |    7 +++++--
 mm/vmscan.c     |    4 ++++
 2 files changed, 9 insertions(+), 2 deletions(-)

--- a/mm/page_alloc.c	2011-12-08 17:02:20.651905963 +0000
+++ b/mm/page_alloc.c	2011-12-09 08:44:51.446898722 +0000
@@ -2136,6 +2136,7 @@
 	unsigned long did_some_progress;
 	bool sync_migration = false;
 	bool deferred_compaction = false;
+	bool first_pass = true;
 
 	/*
 	 * In the slowpath, we sanity check order to avoid ever trying to
@@ -2240,12 +2241,14 @@
 	 * If compaction is deferred for high-order allocations, it is because
 	 * sync compaction recently failed. In this is the case and the caller
 	 * has requested the system not be heavily disrupted, fail the
-	 * allocation now instead of entering direct reclaim
+	 * allocation now instead of entering direct reclaim. If direct reclaim
+	 * is used, use it only once before bailing.
 	 */
-	if (deferred_compaction && (gfp_mask & __GFP_NO_KSWAPD))
+	if ((first_pass || deferred_compaction) && (gfp_mask & __GFP_NO_KSWAPD))
 		goto nopage;
 
 	/* Try direct reclaim and then allocating */
+	first_pass = false;
 	page = __alloc_pages_direct_reclaim(gfp_mask, order,
 					zonelist, high_zoneidx,
 					nodemask,
--- a/mm/vmscan.c	2011-12-08 17:01:40.211800848 +0000
+++ b/mm/vmscan.c	2011-12-09 08:44:53.830904918 +0000
@@ -2400,6 +2400,10 @@
 		.gfp_mask = sc.gfp_mask,
	};
 
+	/* Do not write pages if reclaiming for THP */
+	if (gfp_mask & __GFP_NO_KSWAPD)
+		sc.may_writepage = 0;
+
 	trace_mm_vmscan_direct_reclaim_begin(order,
 				sc.may_writepage,
				gfp_mask);
