From: David Sterba <dsterba@suse.cz>
Date: Tue, 06 Mar 2012 00:06:18 +0100
Patch-mainline: pending
References: FATE#306586
Subject: [PATCH] Btrfs: update message levels

Signed-off-by: David Sterba <dsterba@suse.cz>
---
---
 fs/btrfs/compression.c      |    2 +-
 fs/btrfs/disk-io.c          |   16 ++++++++--------
 fs/btrfs/extent-tree.c      |    6 +++---
 fs/btrfs/free-space-cache.c |    5 +++--
 fs/btrfs/inode.c            |   10 +++++-----
 fs/btrfs/root-tree.c        |    2 +-
 6 files changed, 21 insertions(+), 20 deletions(-)

--- a/fs/btrfs/compression.c
+++ b/fs/btrfs/compression.c
@@ -411,7 +411,7 @@ int btrfs_submit_compressed_write(struct
 			bio_add_page(bio, page, PAGE_CACHE_SIZE, 0);
 		}
 		if (bytes_left < PAGE_CACHE_SIZE) {
-			printk("bytes left %lu compress len %lu nr %lu\n",
+			printk(KERN_DEBUG "bytes left %lu compress len %lu nr %lu\n",
 			       bytes_left, cb->compressed_len, cb->nr_pages);
 		}
 		bytes_left -= PAGE_CACHE_SIZE;
--- a/fs/btrfs/disk-io.c
+++ b/fs/btrfs/disk-io.c
@@ -295,7 +295,7 @@ static int csum_tree_block(struct btrfs_
 			memcpy(&found, result, csum_size);
 
 			read_extent_buffer(buf, &val, 0, csum_size);
-			printk_ratelimited(KERN_INFO "btrfs: %s checksum verify "
+			printk_ratelimited(KERN_WARNING "btrfs: %s checksum verify "
 				       "failed on %llu wanted %X found %X "
 				       "level %d\n",
 				       root->fs_info->sb->s_id,
@@ -339,7 +339,7 @@ static int verify_parent_transid(struct
 		ret = 0;
 		goto out;
 	}
-	printk_ratelimited("parent transid verify failed on %llu wanted %llu "
+	printk_ratelimited(KERN_WARNING "btrfs: parent transid verify failed on %llu wanted %llu "
 		       "found %llu\n",
 		       (unsigned long long)eb->start,
 		       (unsigned long long)parent_transid,
@@ -640,7 +640,7 @@ static int btree_readpage_end_io_hook(st
 
 	found_start = btrfs_header_bytenr(eb);
 	if (found_start != eb->start) {
-		printk_ratelimited(KERN_INFO "btrfs bad tree block start "
+		printk_ratelimited(KERN_WARNING "btrfs bad tree block start "
 			       "%llu %llu\n",
 			       (unsigned long long)found_start,
 			       (unsigned long long)eb->start);
@@ -648,7 +648,7 @@ static int btree_readpage_end_io_hook(st
 		goto err;
 	}
 	if (check_tree_block_fsid(root, eb)) {
-		printk_ratelimited(KERN_INFO "btrfs bad fsid on block %llu\n",
+		printk_ratelimited(KERN_WARNING "btrfs bad fsid on block %llu\n",
 			       (unsigned long long)eb->start);
 		ret = -EIO;
 		goto err;
@@ -2633,13 +2633,13 @@ retry_root_backup:
 
 	ret = btrfs_init_space_info(fs_info);
 	if (ret) {
-		printk(KERN_ERR "Failed to initial space info: %d\n", ret);
+		printk(KERN_ERR "btrfs: Failed to initial space info: %d\n", ret);
 		goto fail_block_groups;
 	}
 
 	ret = btrfs_read_block_groups(extent_root);
 	if (ret) {
-		printk(KERN_ERR "Failed to read block groups: %d\n", ret);
+		printk(KERN_ERR "btrfs: Failed to read block groups: %d\n", ret);
 		goto fail_block_groups;
 	}
 	fs_info->num_tolerated_disk_barrier_failures =
@@ -2874,7 +2874,7 @@ static void btrfs_end_buffer_write_sync(
 		struct btrfs_device *device = (struct btrfs_device *)
 			bh->b_private;
 
-		printk_ratelimited_in_rcu(KERN_WARNING "lost page write due to "
+		printk_ratelimited_in_rcu(KERN_WARNING "btrfs: lost page write due to "
 					  "I/O error on %s\n",
 					  rcu_str_deref(device->name));
 		/* note, we dont' set_buffer_write_io_error because we have
@@ -3686,7 +3686,7 @@ int btrfs_destroy_delayed_refs(struct bt
 	spin_lock(&delayed_refs->lock);
 	if (delayed_refs->num_entries == 0) {
 		spin_unlock(&delayed_refs->lock);
-		printk(KERN_INFO "delayed_refs has NO entry\n");
+		printk(KERN_DEBUG "btrfs: delayed_refs has NO entry\n");
 		return ret;
 	}
 
--- a/fs/btrfs/extent-tree.c
+++ b/fs/btrfs/extent-tree.c
@@ -3618,7 +3618,7 @@ static void check_system_chunk(struct bt
 
 	thresh = get_system_chunk_thresh(root, type);
 	if (left < thresh && btrfs_test_opt(root, ENOSPC_DEBUG)) {
-		printk(KERN_INFO "left=%llu, need=%llu, flags=%llu\n",
+		printk(KERN_INFO "btrfs: left=%llu, need=%llu, flags=%llu\n",
 		       left, thresh, type);
 		dump_space_info(info, 0, 0);
 	}
@@ -5792,7 +5792,7 @@ static noinline int find_free_extent(str
 
 	space_info = __find_space_info(root->fs_info, data);
 	if (!space_info) {
-		printk(KERN_ERR "No space info for %llu\n", data);
+		printk(KERN_ERR "btrfs: No space info for %llu\n", data);
 		return -ENOSPC;
 	}
 
@@ -6229,7 +6229,7 @@ static int __btrfs_free_reserved_extent(
 
 	cache = btrfs_lookup_block_group(root->fs_info, start);
 	if (!cache) {
-		printk(KERN_ERR "Unable to find block group for %llu\n",
+		printk(KERN_ERR "btrfs: Unable to find block group for %llu\n",
 		       (unsigned long long)start);
 		return -ENOSPC;
 	}
--- a/fs/btrfs/free-space-cache.c
+++ b/fs/btrfs/free-space-cache.c
@@ -104,7 +104,8 @@ struct inode *lookup_free_space_inode(st
 
 	spin_lock(&block_group->lock);
 	if (!((BTRFS_I(inode)->flags & flags) == flags)) {
-		printk(KERN_INFO "Old style space inode found, converting.\n");
+		printk(KERN_INFO
+			"btrfs: Old style space inode found, converting.\n");
 		BTRFS_I(inode)->flags |= BTRFS_INODE_NODATASUM |
 			BTRFS_INODE_NODATACOW;
 		block_group->disk_cache_state = BTRFS_DC_CLEAR;
@@ -833,7 +834,7 @@ int load_free_space_cache(struct btrfs_f
 
 	if (!matched) {
 		__btrfs_remove_free_space_cache(ctl);
-		printk(KERN_ERR "block group %llu has an wrong amount of free "
+		printk(KERN_ERR "btrfs: block group %llu has an wrong amount of free "
 		       "space\n", block_group->key.objectid);
 		ret = -1;
 	}
--- a/fs/btrfs/inode.c
+++ b/fs/btrfs/inode.c
@@ -2827,7 +2827,7 @@ good:
 	return 0;
 
 zeroit:
-	printk_ratelimited(KERN_INFO "btrfs csum failed ino %llu off %llu csum %u "
+	printk_ratelimited(KERN_WARNING "btrfs csum failed ino %llu off %llu csum %u "
 		       "private %llu\n",
 		       (unsigned long long)btrfs_ino(page->mapping->host),
 		       (unsigned long long)start, csum,
@@ -3238,13 +3238,13 @@ int btrfs_orphan_cleanup(struct btrfs_ro
 	}
 
 	if (nr_unlink)
-		printk(KERN_DEBUG "btrfs: unlinked %d orphans\n", nr_unlink);
+		pr_debug("btrfs: unlinked %d orphans\n", nr_unlink);
 	if (nr_truncate)
-		printk(KERN_DEBUG "btrfs: truncated %d orphans\n", nr_truncate);
+		pr_debug("btrfs: truncated %d orphans\n", nr_truncate);
 
 out:
 	if (ret)
-		printk(KERN_CRIT "btrfs: could not do orphan cleanup %d\n", ret);
+		printk(KERN_ERR "btrfs: could not do orphan cleanup %d\n", ret);
 	btrfs_free_path(path);
 	return ret;
 }
@@ -4665,7 +4665,7 @@ void btrfs_evict_inode(struct inode *ino
 			ret = btrfs_block_rsv_migrate(global_rsv, rsv, min_size);
 
 		if (ret) {
-			printk(KERN_WARNING "Could not get space for a "
+			printk(KERN_INFO "btrfs: Could not get space for a "
 			       "delete, will truncate on mount %d\n", ret);
 			btrfs_orphan_del(NULL, inode);
 			btrfs_free_block_rsv(root, rsv);
--- a/fs/btrfs/root-tree.c
+++ b/fs/btrfs/root-tree.c
@@ -148,7 +148,7 @@ int btrfs_update_root(struct btrfs_trans
 
 	if (ret != 0) {
 		btrfs_print_leaf(root, path->nodes[0]);
-		printk(KERN_CRIT "unable to update root key %llu %u %llu\n",
+		printk(KERN_CRIT "btrfs: unable to update root key %llu %u %llu\n",
 		       (unsigned long long)key->objectid, key->type,
 		       (unsigned long long)key->offset);
 		BUG_ON(1);
