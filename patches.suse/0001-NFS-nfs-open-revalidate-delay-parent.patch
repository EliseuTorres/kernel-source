From: NeilBrown <neilb@suse.de>
Date: Wed, 5 Mar 2014 12:57:02 +1100
Patch-mainline: submitted 2014-07-24
References: bnc#866130
Subject: [PATCH 1/8] NFS: nfs_open_revalidate: only evaluate parent if it will be used.

nfs_open_revalidate only uses 'parent' to get 'dir', and
uses 'dir' if 'inode == NULL' or if a real open is happening.

So we don't need to find out what 'parent' or 'dir' is until we
know that 'inode' is NULL or an open is happening.

By moving 'dget_parent' inside one 'if' and after some others, we can
reduce the number of call sites for 'dput(parent)' and increase the
places where it is safe to be in RCU-walk mode.

Signed-off-by: NeilBrown <neilb@suse.de>
---
 fs/nfs/dir.c |   16 ++++++++--------
 1 file changed, 8 insertions(+), 8 deletions(-)

--- linux-3.0-SLE11-SP3.orig/fs/nfs/dir.c
+++ linux-3.0-SLE11-SP3/fs/nfs/dir.c
@@ -1566,13 +1566,13 @@ static int nfs_open_revalidate(struct de
 	if (!is_atomic_open(nd) || d_mountpoint(dentry))
 		goto no_open;
 
-	parent = dget_parent(dentry);
-	dir = parent->d_inode;
-
 	/* We can't create new files in nfs_open_revalidate(), so we
 	 * optimize away revalidation of negative dentries.
 	 */
 	if (inode == NULL) {
+		parent = dget_parent(dentry);
+		dir = parent->d_inode;
+
 		if (!nfs_neg_need_reval(dir, dentry, nd))
 			ret = 1;
 		goto out;
@@ -1580,23 +1580,25 @@ static int nfs_open_revalidate(struct de
 
 	/* NFS only supports OPEN on regular files */
 	if (!S_ISREG(inode->i_mode))
-		goto no_open_dput;
+		goto no_open;
 	openflags = nd->intent.open.flags;
 	/* We cannot do exclusive creation on a positive dentry */
 	if ((openflags & (O_CREAT|O_EXCL)) == (O_CREAT|O_EXCL))
-		goto no_open_dput;
+		goto no_open;
 	/* We can't create new files, or truncate existing ones here */
 	openflags &= ~(O_CREAT|O_EXCL|O_TRUNC);
 
 	ctx = nameidata_to_nfs_open_context(dentry, nd);
 	ret = PTR_ERR(ctx);
 	if (IS_ERR(ctx))
-		goto out;
+		return ret;
 	/*
 	 * Note: we're not holding inode->i_mutex and so may be racing with
 	 * operations that change the directory. We therefore save the
 	 * change attribute *before* we do the RPC call.
 	 */
+	parent = dget_parent(dentry);
+	dir = parent->d_inode;
 	inode = NFS_PROTO(dir)->open_context(dir, ctx, openflags, NULL);
 	if (IS_ERR(inode)) {
 		ret = PTR_ERR(inode);
@@ -1629,8 +1631,6 @@ out_put_ctx:
 	put_nfs_open_context(ctx);
 	goto out;
 
-no_open_dput:
-	dput(parent);
 no_open:
 	return nfs_lookup_revalidate(dentry, nd);
 }
