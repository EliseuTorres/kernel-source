From: Mel Gorman <mgorman@suse.de>
Date: Wed, 18 May 2011 15:19:19 +0100
Subject: [PATCH] thp: _GFP_NO_KSWAPD
References: THP core (fate #311931)
Patch-mainline: yes
Commit-ID: 32dba98e085f8b2b4345887df9abf5e0e93bfc12

Transparent hugepage allocations must be allowed not to invoke kswapd
or any other kind of indirect reclaim (especially when the defrag sysfs
is control disabled).  It's unacceptable to swap out anonymous pages
(potentially anonymous transparent hugepages) in order to create new
transparent hugepages.  This is true for the MADV_HUGEPAGE areas
too (swapping out a kvm virtual machine and so having it suffer
an unbearable slowdown, so another one with guest physical memory
marked MADV_HUGEPAGE can run 30% faster if it is running memory
intensive workloads, makes no sense).  If a transparent hugepage
allocation fails the slowdown is minor and there is total fallback,
so kswapd should never be asked to swapout memory to allow the high
order allocation to succeed.

Signed-off-by: Andrea Arcangeli <aarcange@redhat.com>
Acked-by: Rik van Riel <riel@redhat.com>
Acked-by: Mel Gorman <mgorman@suse.de>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Mel Gorman <mgorman@suse.de>
---
 include/linux/gfp.h |    3 ++-
 mm/page_alloc.c     |    3 ++-
 2 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/include/linux/gfp.h b/include/linux/gfp.h
index 0108b1b..3b77198 100644
--- a/include/linux/gfp.h
+++ b/include/linux/gfp.h
@@ -52,6 +52,7 @@ struct vm_area_struct;
 #define __GFP_HARDWALL   ((__force gfp_t)0x20000u) /* Enforce hardwall cpuset memory allocs */
 #define __GFP_THISNODE	((__force gfp_t)0x40000u)/* No fallback, no policies */
 #define __GFP_RECLAIMABLE ((__force gfp_t)0x80000u) /* Page is reclaimable */
+#define __GFP_NO_KSWAPD	((__force gfp_t)0x400000u)
 
 #ifdef CONFIG_KMEMCHECK
 #define __GFP_NOTRACK	((__force gfp_t)0x200000u)  /* Don't track with kmemcheck */
@@ -65,7 +66,7 @@ struct vm_area_struct;
  */
 #define __GFP_NOTRACK_FALSE_POSITIVE (__GFP_NOTRACK)
 
-#define __GFP_BITS_SHIFT 22	/* Room for 22 __GFP_FOO bits */
+#define __GFP_BITS_SHIFT 23	/* Room for 22 __GFP_FOO bits */
 #define __GFP_BITS_MASK ((__force gfp_t)((1 << __GFP_BITS_SHIFT) - 1))
 
 /* This equals 0, but use constants in case they ever change */
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 0c9acd3..85ead01 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -1996,7 +1996,8 @@ __alloc_pages_slowpath(gfp_t gfp_mask, unsigned int order,
 		goto nopage;
 
 restart:
-	wake_all_kswapd(order, zonelist, high_zoneidx);
+	if (!(gfp_mask & __GFP_NO_KSWAPD))
+		wake_all_kswapd(order, zonelist, high_zoneidx);
 
 	/*
 	 * OK, we're below the kswapd watermark and have kicked background
