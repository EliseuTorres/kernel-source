From 8f48dda80d342db882bc6f0fdf3e97b5fc412fce Mon Sep 17 00:00:00 2001
From: Alex Thorlton <athorlton@sgi.com>
Date: Mon, 7 Apr 2014 15:37:10 -0700
Subject: [PATCH] mm, thp: add VM_INIT_DEF_MASK and PRCTL_THP_DISABLE

References: prctl support for disabling THP (fate#317831)
Patch-mainline: v3.15
Git-commit: a0715cc22601e8830ace98366c0c2bd8da52af52

Add VM_INIT_DEF_MASK, to allow us to set the default flags for VMs.  It
also adds a prctl control which allows us to set the THP disable bit in
mm->def_flags so that VMs will pick up the setting as they are created.

Signed-off-by: Alex Thorlton <athorlton@sgi.com>
Suggested-by: Oleg Nesterov <oleg@redhat.com>
Cc: Gerald Schaefer <gerald.schaefer@de.ibm.com>
Cc: Martin Schwidefsky <schwidefsky@de.ibm.com>
Cc: Heiko Carstens <heiko.carstens@de.ibm.com>
Cc: Christian Borntraeger <borntraeger@de.ibm.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
Cc: Mel Gorman <mgorman@suse.de>
Acked-by: Rik van Riel <riel@redhat.com>
Cc: Ingo Molnar <mingo@kernel.org>
Cc: Peter Zijlstra <peterz@infradead.org>
Cc: Andrea Arcangeli <aarcange@redhat.com>
Cc: Oleg Nesterov <oleg@redhat.com>
Cc: "Eric W. Biederman" <ebiederm@xmission.com>
Cc: Alexander Viro <viro@zeniv.linux.org.uk>
Cc: Johannes Weiner <hannes@cmpxchg.org>
Cc: David Rientjes <rientjes@google.com>
Cc: Paolo Bonzini <pbonzini@redhat.com>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
Signed-off-by: Mel Gorman <mgorman@suse.de>
---
 include/linux/mm.h    |  3 +++
 include/linux/prctl.h |  3 +++
 kernel/fork.c         | 11 ++++++++---
 kernel/sys.c          | 15 +++++++++++++++
 4 files changed, 29 insertions(+), 3 deletions(-)

diff --git a/include/linux/mm.h b/include/linux/mm.h
index 3a2bab2..9e4124f 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -184,6 +184,9 @@ static inline int is_pfn_mapping(struct vm_area_struct *vma)
 	return !!(vma->vm_flags & VM_PFNMAP);
 }
 
+/* This mask defines which mm->def_flags a process can inherit its parent */
+#define VM_INIT_DEF_MASK	VM_NOHUGEPAGE
+
 /*
  * vm_fault is filled by the the pagefault handler and passed to the vma's
  * ->fault function. The vma's ->fault is responsible for returning a bitmask
diff --git a/include/linux/prctl.h b/include/linux/prctl.h
index b527252..a7579d6 100644
--- a/include/linux/prctl.h
+++ b/include/linux/prctl.h
@@ -117,4 +117,7 @@
 #define PR_SET_NO_NEW_PRIVS 38
 #define PR_GET_NO_NEW_PRIVS 39
 
+#define PR_SET_THP_DISABLE	41
+#define PR_GET_THP_DISABLE	42
+
 #endif /* _LINUX_PRCTL_H */
diff --git a/kernel/fork.c b/kernel/fork.c
index 962fdea..9ef317d 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -497,8 +497,6 @@ static struct mm_struct * mm_init(struct mm_struct * mm, struct task_struct *p)
 	atomic_set(&mm->mm_count, 1);
 	init_rwsem(&mm->mmap_sem);
 	INIT_LIST_HEAD(&mm->mmlist);
-	mm->flags = (current->mm) ?
-		(current->mm->flags & MMF_INIT_MASK) : default_dump_filter;
 	mm->core_state = NULL;
 	mm->nr_ptes = 0;
 	memset(&mm->rss_stat, 0, sizeof(mm->rss_stat));
@@ -509,8 +507,15 @@ static struct mm_struct * mm_init(struct mm_struct * mm, struct task_struct *p)
 	mm_init_owner(mm, p);
 	atomic_set(&mm->oom_disable_count, 0);
 
-	if (likely(!mm_alloc_pgd(mm))) {
+	if (current->mm) {
+		mm->flags = current->mm->flags & MMF_INIT_MASK;
+		mm->def_flags = current->mm->def_flags & VM_INIT_DEF_MASK;
+	} else {
+		mm->flags = default_dump_filter;
 		mm->def_flags = 0;
+	}
+
+	if (likely(!mm_alloc_pgd(mm))) {
 		mmu_notifier_mm_init(mm);
 		return mm;
 	}
diff --git a/kernel/sys.c b/kernel/sys.c
index 967bb95..269bd3f 100644
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -1810,6 +1810,21 @@ SYSCALL_DEFINE5(prctl, int, option, unsigned long, arg2, unsigned long, arg3,
 			if (arg2 || arg3 || arg4 || arg5)
 				return -EINVAL;
 			return current->no_new_privs ? 1 : 0;
+		case PR_GET_THP_DISABLE:
+			if (arg2 || arg3 || arg4 || arg5)
+				return -EINVAL;
+			error = !!(me->mm->def_flags & VM_NOHUGEPAGE);
+			break;
+		case PR_SET_THP_DISABLE:
+			if (arg3 || arg4 || arg5)
+				return -EINVAL;
+			down_write(&me->mm->mmap_sem);
+			if (arg2)
+				me->mm->def_flags |= VM_NOHUGEPAGE;
+			else
+				me->mm->def_flags &= ~VM_NOHUGEPAGE;
+			up_write(&me->mm->mmap_sem);
+			break;
 		default:
 			error = -EINVAL;
 			break;
