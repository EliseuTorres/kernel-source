Git-commit: 3791e2fc0e4b40d4188e79b0a99bfa6bce714a10
From: Alasdair G Kergon <agk@redhat.com>
Date: Mon, 31 Oct 2011 20:19:00 +0000
Subject: [PATCH] dm table: add singleton feature
Patch-mainline: v3.2-rc1
Reference: FATE#313903

Introduce the concept of a singleton table which contains exactly one target.

If a target type sets the DM_TARGET_SINGLETON feature bit device-mapper
will ensure that any table that includes that target contains no others.

The thin provisioning pool target uses this.

Signed-off-by: Alasdair G Kergon <agk@redhat.com>
Acked-by: NeilBrown <nfbrown@suse.com>

---
 drivers/md/dm-table.c         |   16 ++++++++++++++++
 include/linux/device-mapper.h |   14 ++++++++++----
 2 files changed, 26 insertions(+), 4 deletions(-)

--- linux-3.0-SLE11-SP3.orig/drivers/md/dm-table.c
+++ linux-3.0-SLE11-SP3/drivers/md/dm-table.c
@@ -56,6 +56,7 @@ struct dm_table {
 
 	unsigned discards_supported:1;
 	unsigned integrity_supported:1;
+	unsigned singleton:1;
 
 	/*
 	 * Indicates the rw permissions for the new logical
@@ -761,6 +762,12 @@ int dm_table_add_target(struct dm_table
 	char **argv;
 	struct dm_target *tgt;
 
+	if (t->singleton) {
+		DMERR("%s: target type %s must appear alone in table",
+		      dm_device_name(t->md), t->targets->type->name);
+		return -EINVAL;
+	}
+
 	if ((r = check_space(t)))
 		return r;
 
@@ -779,6 +786,15 @@ int dm_table_add_target(struct dm_table
 		return -EINVAL;
 	}
 
+	if (dm_target_needs_singleton(tgt->type)) {
+		if (t->num_targets) {
+			DMERR("%s: target type %s must appear alone in table",
+			      dm_device_name(t->md), type);
+			return -EINVAL;
+		}
+		t->singleton = 1;
+	}
+
 	tgt->table = t;
 	tgt->begin = start;
 	tgt->len = len;
--- linux-3.0-SLE11-SP3.orig/include/linux/device-mapper.h
+++ linux-3.0-SLE11-SP3/include/linux/device-mapper.h
@@ -127,10 +127,6 @@ void dm_put_device(struct dm_target *ti,
  * Information about a target type
  */
 
-/*
- * Target features
- */
-
 struct target_type {
 	uint64_t features;
 	const char *name;
@@ -159,6 +155,16 @@ struct target_type {
 	struct list_head list;
 };
 
+/*
+ * Target features
+ */
+
+/*
+ * Any table that contains an instance of this target must have only one.
+ */
+#define DM_TARGET_SINGLETON		0x00000001
+#define dm_target_needs_singleton(type)	((type)->features & DM_TARGET_SINGLETON)
+
 struct dm_target {
 	struct dm_table *table;
 	struct target_type *type;
