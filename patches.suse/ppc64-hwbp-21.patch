From: K.Prasad <prasad@linux.vnet.ibm.com>
Subject: powerpc, hw_breakpoint: Handle concurrent alignment interrupts
Date: Tue Jun 15 11:35:31 2010 +0530
Git-commit: 2538c2d08f46141550a1e68819efa8fe31c6e3dc
Patch-mainline: v2.6.36-rc1
References: FATE#311653, BNC#702123
Signed-off-by: Tony Jones <tonyj@suse.de>

    powerpc, hw_breakpoint: Handle concurrent alignment interrupts
    
    If an alignment interrupt occurs on an instruction that is being
    single-stepped, the alignment interrupt handler currently handles
    the single-step condition by unconditionally sending a SIGTRAP to
    the process.  Other synchronous interrupts that result in the
    instruction being emulated do likewise.
    
    With hw_breakpoint support, the hw_breakpoint code needs to be able
    to intercept these single-step events as well as those where the
    instruction executes normally and a trace interrupt happens.
    
    Fix this by making emulate_single_step() use the existing
    single_step_exception() function instead of calling _exception()
    directly.  We then make single_step_exception() use the abstracted
    clear_single_step() rather than clearing bits in the MSR image
    directly so that emulate_single_step() will continue to work
    correctly on Book 3E processors.
    
    Signed-off-by: K.Prasad <prasad@linux.vnet.ibm.com>
    Signed-off-by: Paul Mackerras <paulus@samba.org>

---
 arch/powerpc/kernel/traps.c |    8 +++-----
 1 file changed, 3 insertions(+), 5 deletions(-)

--- a/arch/powerpc/kernel/traps.c
+++ b/arch/powerpc/kernel/traps.c
@@ -569,7 +569,7 @@ void RunModeException(struct pt_regs *re
 
 void __kprobes single_step_exception(struct pt_regs *regs)
 {
-	regs->msr &= ~(MSR_SE | MSR_BE);  /* Turn off 'trace' bits */
+	clear_single_step(regs);
 
 	if (notify_die(DIE_SSTEP, "single_step", regs, 5,
 					5, SIGTRAP) == NOTIFY_STOP)
@@ -588,10 +588,8 @@ void __kprobes single_step_exception(str
  */
 static void emulate_single_step(struct pt_regs *regs)
 {
-	if (single_stepping(regs)) {
-		clear_single_step(regs);
-		_exception(SIGTRAP, regs, TRAP_TRACE, 0);
-	}
+	if (single_stepping(regs))
+		single_step_exception(regs);
 }
 
 static inline int __parse_fpscr(unsigned long fpscr)
