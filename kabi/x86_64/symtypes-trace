/* arch/x86/crypto/aes_glue.o */
t#u32 typedef unsigned int u32 
s#crypto_aes_ctx struct crypto_aes_ctx { t#u32 key_enc [ ( ( 15 * 16 ) / sizeof ( u32 ) ) ] ; t#u32 key_dec [ ( ( 15 * 16 ) / sizeof ( u32 ) ) ] ; t#u32 key_length ; } 
t#u8 typedef unsigned char u8 
crypto_aes_encrypt_x86 void crypto_aes_encrypt_x86 ( s#crypto_aes_ctx * , t#u8 * , const t#u8 * ) 
crypto_aes_decrypt_x86 void crypto_aes_decrypt_x86 ( s#crypto_aes_ctx * , t#u8 * , const t#u8 * ) 

/* arch/x86/kdb/kdba_io.o */
t#atomic_t typedef struct { volatile int counter ; } atomic_t 
s#kref struct kref { t#atomic_t refcount ; } 
s#list_head struct list_head { s#list_head * next , * prev ; } 
s#raw_spinlock struct raw_spinlock { unsigned int slock ; } 
t#raw_spinlock_t typedef s#raw_spinlock raw_spinlock_t 
t#spinlock_t typedef struct { t#raw_spinlock_t raw_lock ; } spinlock_t 
s#__wait_queue_head struct __wait_queue_head { t#spinlock_t lock ; s#list_head task_list ; } 
t#wait_queue_head_t typedef s#__wait_queue_head wait_queue_head_t 
s#usb_anchor struct usb_anchor { s#list_head urb_list ; t#wait_queue_head_t wait ; t#spinlock_t lock ; unsigned int poisoned : 1 ; } 
e#usb_device_state enum usb_device_state { USB_STATE_NOTATTACHED = 0 , USB_STATE_ATTACHED , USB_STATE_POWERED , USB_STATE_RECONNECTING , USB_STATE_UNAUTHENTICATED , USB_STATE_DEFAULT , USB_STATE_ADDRESS , USB_STATE_CONFIGURED , USB_STATE_SUSPENDED } 
e#usb_device_speed enum usb_device_speed { USB_SPEED_UNKNOWN = 0 , USB_SPEED_LOW , USB_SPEED_FULL , USB_SPEED_HIGH , USB_SPEED_VARIABLE , USB_SPEED_SUPER , } 
s##usb_tt
s##device_private
s#kobj_uevent_env struct kobj_uevent_env { char * envp [ 32 ] ; int envp_idx ; char buf [ 2048 ] ; int buflen ; } 
s#kset_uevent_ops struct kset_uevent_ops { int ( * filter ) ( s#kset * , s#kobject * ) ; const char * ( * name ) ( s#kset * , s#kobject * ) ; int ( * uevent ) ( s#kset * , s#kobject * , s#kobj_uevent_env * ) ; } 
s#kset struct kset { s#list_head list ; t#spinlock_t list_lock ; s#kobject kobj ; s#kset_uevent_ops * uevent_ops ; } 
t#__kernel_ssize_t typedef long __kernel_ssize_t 
t#ssize_t typedef t#__kernel_ssize_t ssize_t 
e#module_state enum module_state { MODULE_STATE_LIVE , MODULE_STATE_COMING , MODULE_STATE_GOING , } 
s##module_param_attrs
s#module_kobject struct module_kobject { s#kobject kobj ; s#module * mod ; s#kobject * drivers_dir ; s#module_param_attrs * mp ; } 
t#__kernel_size_t typedef unsigned long __kernel_size_t 
t#size_t typedef t#__kernel_size_t size_t 
s#module_attribute struct module_attribute { s#attribute attr ; t#ssize_t ( * show ) ( s#module_attribute * , s#module * , char * ) ; t#ssize_t ( * store ) ( s#module_attribute * , s#module * , const char * , t#size_t ) ; void ( * setup ) ( s#module * , const char * ) ; int ( * test ) ( s#module * ) ; void ( * free ) ( s#module * ) ; } 
s#kernel_symbol struct kernel_symbol { unsigned long value ; const char * name ; } 
t#u16 typedef unsigned short u16 
t#param_set_fn typedef int ( * param_set_fn ) ( const char * , s#kernel_param * ) 
t#param_get_fn typedef int ( * param_get_fn ) ( char * , s#kernel_param * ) 
s#kparam_string struct kparam_string { unsigned int maxlen ; char * string ; } 
s#kparam_array struct kparam_array { unsigned int max ; unsigned int * num ; t#param_set_fn set ; t#param_get_fn get ; unsigned int elemsize ; void * elem ; } 
s#kernel_param struct kernel_param { const char * name ; t#u16 perm ; t#u16 flags ; t#param_set_fn set ; t#param_get_fn get ; union { void * arg ; const s#kparam_string * str ; const s#kparam_array * arr ; } ; } 
s#exception_table_entry struct exception_table_entry { unsigned long insn , fixup ; } 
s#mod_arch_specific struct mod_arch_specific { } 
s#bug_entry struct bug_entry { signed int bug_addr_disp ; signed int file_disp ; unsigned short line ; unsigned short flags ; } 
t#__u32 typedef unsigned int __u32 
t#Elf64_Word typedef t#__u32 Elf64_Word 
t#__u16 typedef unsigned short __u16 
t#Elf64_Half typedef t#__u16 Elf64_Half 
t#__u64 __extension__ typedef unsigned long long __u64 
t#Elf64_Addr typedef t#__u64 Elf64_Addr 
t#Elf64_Xword typedef t#__u64 Elf64_Xword 
s#elf64_sym struct elf64_sym { t#Elf64_Word st_name ; unsigned char st_info ; unsigned char st_other ; t#Elf64_Half st_shndx ; t#Elf64_Addr st_value ; t#Elf64_Xword st_size ; } 
t#Elf64_Sym typedef s#elf64_sym Elf64_Sym 
s##module_sect_attrs
s##module_notes_attrs
s#tracepoint struct tracepoint { const char * name ; int state ; void ( * regfunc ) ( void ) ; void ( * unregfunc ) ( void ) ; void * * funcs ; } 
s##ftrace_event_call
s##rq
s#sched_group struct sched_group { s#sched_group * next ; unsigned int cpu_power ; unsigned long cpumask [ 0 ] ; } 
e#sched_domain_level enum sched_domain_level { SD_LV_NONE = 0 , SD_LV_SIBLING , SD_LV_MC , SD_LV_CPU , SD_LV_NODE , SD_LV_ALLNODES , SD_LV_MAX } 
t#u64 typedef unsigned long long u64 
s#sched_domain struct sched_domain { s#sched_domain * parent ; s#sched_domain * child ; s#sched_group * groups ; unsigned long min_interval ; unsigned long max_interval ; unsigned int busy_factor ; unsigned int imbalance_pct ; unsigned int cache_nice_tries ; unsigned int busy_idx ; unsigned int idle_idx ; unsigned int newidle_idx ; unsigned int wake_idx ; unsigned int forkexec_idx ; unsigned int smt_gain ; int flags ; e#sched_domain_level level ; unsigned long last_balance ; unsigned int balance_interval ; unsigned int nr_balance_failed ; t#u64 last_update ; unsigned int lb_count [ CPU_MAX_IDLE_TYPES ] ; unsigned int lb_failed [ CPU_MAX_IDLE_TYPES ] ; unsigned int lb_balanced [ CPU_MAX_IDLE_TYPES ] ; unsigned int lb_imbalance [ CPU_MAX_IDLE_TYPES ] ; unsigned int lb_gained [ CPU_MAX_IDLE_TYPES ] ; unsigned int lb_hot_gained [ CPU_MAX_IDLE_TYPES ] ; unsigned int lb_nobusyg [ CPU_MAX_IDLE_TYPES ] ; unsigned int lb_nobusyq [ CPU_MAX_IDLE_TYPES ] ; unsigned int alb_count ; unsigned int alb_failed ; unsigned int alb_pushed ; unsigned int sbe_count ; unsigned int sbe_balanced ; unsigned int sbe_pushed ; unsigned int sbf_count ; unsigned int sbf_balanced ; unsigned int sbf_pushed ; unsigned int ttwu_wake_remote ; unsigned int ttwu_move_affine ; unsigned int ttwu_move_balance ; char * name ; unsigned long span [ 0 ] ; } 
e#cpu_idle_type enum cpu_idle_type { CPU_IDLE , CPU_NOT_IDLE , CPU_NEWLY_IDLE , CPU_MAX_IDLE_TYPES } 
s#cpumask struct cpumask { unsigned long bits [ ( ( ( 512 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } 
s#sched_class struct sched_class { const s#sched_class * next ; void ( * enqueue_task ) ( s#rq * , s#task_struct * , int ) ; void ( * dequeue_task ) ( s#rq * , s#task_struct * , int ) ; void ( * yield_task ) ( s#rq * ) ; void ( * check_preempt_curr ) ( s#rq * , s#task_struct * , int ) ; s#task_struct * ( * pick_next_task ) ( s#rq * ) ; void ( * put_prev_task ) ( s#rq * , s#task_struct * ) ; int ( * select_task_rq ) ( s#task_struct * , int , int ) ; unsigned long ( * load_balance ) ( s#rq * , int , s#rq * , unsigned long , s#sched_domain * , e#cpu_idle_type , int * , int * ) ; int ( * move_one_task ) ( s#rq * , int , s#rq * , s#sched_domain * , e#cpu_idle_type ) ; void ( * pre_schedule ) ( s#rq * , s#task_struct * ) ; void ( * post_schedule ) ( s#rq * ) ; void ( * task_wake_up ) ( s#rq * , s#task_struct * ) ; void ( * set_cpus_allowed ) ( s#task_struct * , const s#cpumask * ) ; void ( * rq_online ) ( s#rq * ) ; void ( * rq_offline ) ( s#rq * ) ; void ( * set_curr_task ) ( s#rq * ) ; void ( * task_tick ) ( s#rq * , s#task_struct * , int ) ; void ( * task_new ) ( s#rq * , s#task_struct * ) ; void ( * switched_from ) ( s#rq * , s#task_struct * , int ) ; void ( * switched_to ) ( s#rq * , s#task_struct * , int ) ; void ( * prio_changed ) ( s#rq * , s#task_struct * , int , int ) ; unsigned int ( * get_rr_interval ) ( s#task_struct * ) ; void ( * moved_group ) ( s#task_struct * ) ; } 
s#load_weight struct load_weight { unsigned long weight , inv_weight ; } 
s#rb_node struct rb_node { unsigned long rb_parent_color ; s#rb_node * rb_right ; s#rb_node * rb_left ; } 
t#s64 typedef signed long long s64 
s##cfs_rq
s#sched_entity struct sched_entity { s#load_weight load ; s#rb_node run_node ; s#list_head group_node ; unsigned int on_rq ; t#u64 exec_start ; t#u64 sum_exec_runtime ; t#u64 vruntime ; t#u64 prev_sum_exec_runtime ; t#u64 last_wakeup ; t#u64 avg_overlap ; t#u64 nr_migrations ; t#u64 start_runtime ; t#u64 avg_wakeup ; t#u64 avg_running ; t#u64 wait_start ; t#u64 wait_max ; t#u64 wait_count ; t#u64 wait_sum ; t#u64 iowait_count ; t#u64 iowait_sum ; t#u64 sleep_start ; t#u64 sleep_max ; t#s64 sum_sleep_runtime ; t#u64 block_start ; t#u64 block_max ; t#u64 exec_max ; t#u64 slice_max ; t#u64 nr_migrations_cold ; t#u64 nr_failed_migrations_affine ; t#u64 nr_failed_migrations_running ; t#u64 nr_failed_migrations_hot ; t#u64 nr_forced_migrations ; t#u64 nr_forced2_migrations ; t#u64 nr_wakeups ; t#u64 nr_wakeups_sync ; t#u64 nr_wakeups_migrate ; t#u64 nr_wakeups_local ; t#u64 nr_wakeups_remote ; t#u64 nr_wakeups_affine ; t#u64 nr_wakeups_affine_attempts ; t#u64 nr_wakeups_passive ; t#u64 nr_wakeups_idle ; s#sched_entity * parent ; s#cfs_rq * cfs_rq ; s#cfs_rq * my_q ; } 
s##rt_rq
s#sched_rt_entity struct sched_rt_entity { s#list_head run_list ; unsigned long timeout ; unsigned int time_slice ; int nr_cpus_allowed ; s#sched_rt_entity * back ; s#sched_rt_entity * parent ; s#rt_rq * rt_rq ; s#rt_rq * my_q ; } 
s#hlist_node struct hlist_node { s#hlist_node * next , * * pprev ; } 
s#hlist_head struct hlist_head { s#hlist_node * first ; } 
t#cpumask_t typedef s#cpumask cpumask_t 
s#sched_info struct sched_info { unsigned long pcount ; unsigned long long run_delay ; unsigned long long last_arrival , last_queued ; unsigned int bkl_count ; } 
s#plist_head struct plist_head { s#list_head prio_list ; s#list_head node_list ; } 
s#plist_node struct plist_node { int prio ; s#plist_head plist ; } 
t#pgprotval_t typedef unsigned long pgprotval_t 
s#pgprot struct pgprot { t#pgprotval_t pgprot ; } 
t#pgprot_t typedef s#pgprot pgprot_t 
s#prio_tree_node struct prio_tree_node { s#prio_tree_node * left ; s#prio_tree_node * right ; s#prio_tree_node * parent ; unsigned long start ; unsigned long last ; } 
s#raw_prio_tree_node struct raw_prio_tree_node { s#prio_tree_node * left ; s#prio_tree_node * right ; s#prio_tree_node * parent ; } 
s##anon_vma
s##vm_operations_struct
s#rcu_head struct rcu_head { s#rcu_head * next ; void ( * func ) ( s#rcu_head * ) ; } 
s##vfsmount
t#__kernel_uid_t typedef unsigned int __kernel_uid_t 
t#__kernel_uid32_t typedef t#__kernel_uid_t __kernel_uid32_t 
t#uid_t typedef t#__kernel_uid32_t uid_t 
t#__kernel_gid_t typedef unsigned int __kernel_gid_t 
t#__kernel_gid32_t typedef t#__kernel_gid_t __kernel_gid32_t 
t#gid_t typedef t#__kernel_gid32_t gid_t 
t#__kernel_dev_t typedef t#__u32 __kernel_dev_t 
t#dev_t typedef t#__kernel_dev_t dev_t 
t#__kernel_loff_t typedef long long __kernel_loff_t 
t#loff_t typedef t#__kernel_loff_t loff_t 
t#__kernel_time_t typedef long __kernel_time_t 
s#timespec struct timespec { t#__kernel_time_t tv_sec ; long tv_nsec ; } 
t#blkcnt_t typedef unsigned long blkcnt_t 
t#umode_t typedef unsigned short umode_t 
s#pt_regs struct pt_regs { unsigned long r15 ; unsigned long r14 ; unsigned long r13 ; unsigned long r12 ; unsigned long bp ; unsigned long bx ; unsigned long r11 ; unsigned long r10 ; unsigned long r9 ; unsigned long r8 ; unsigned long ax ; unsigned long cx ; unsigned long dx ; unsigned long si ; unsigned long di ; unsigned long orig_ax ; unsigned long ip ; unsigned long cs ; unsigned long flags ; unsigned long sp ; unsigned long ss ; } 
t#handler_t typedef void ( * handler_t ) ( int , s#pt_regs * ) 
s##map_segment
s#exec_domain struct exec_domain { const char * name ; t#handler_t handler ; unsigned char pers_low ; unsigned char pers_high ; unsigned long * signal_map ; unsigned long * signal_invmap ; s#map_segment * err_map ; s#map_segment * socktype_map ; s#map_segment * sockopt_map ; s#map_segment * af_map ; s#module * module ; s#exec_domain * next ; } 
t#mm_segment_t typedef struct { unsigned long seg ; } mm_segment_t 
t#__kernel_clockid_t typedef int __kernel_clockid_t 
t#clockid_t typedef t#__kernel_clockid_t clockid_t 
s##compat_timespec
s##pollfd
s#restart_block struct restart_block { long ( * fn ) ( s#restart_block * ) ; union { struct { unsigned long arg0 , arg1 , arg2 , arg3 ; } ; struct { t#u32 * uaddr ; t#u32 val ; t#u32 flags ; t#u32 bitset ; t#u64 time ; t#u32 * uaddr2 ; } futex ; struct { t#clockid_t index ; s#timespec * rmtp ; s#compat_timespec * compat_rmtp ; t#u64 expires ; } nanosleep ; struct { s#pollfd * ufds ; int nfds ; int has_timeout ; unsigned long tv_sec ; unsigned long tv_nsec ; } poll ; } ; } 
s#thread_info struct thread_info { s#task_struct * task ; s#exec_domain * exec_domain ; t#__u32 flags ; t#__u32 status ; t#__u32 cpu ; int preempt_count ; t#mm_segment_t addr_limit ; s#restart_block restart_block ; void * sysenter_return ; int uaccess_err ; } 
s#mutex struct mutex { t#atomic_t count ; t#spinlock_t wait_lock ; s#list_head wait_list ; s#thread_info * owner ; } 
t#rwsem_count_t typedef signed long rwsem_count_t 
s#rw_semaphore struct rw_semaphore { t#rwsem_count_t count ; t#spinlock_t wait_lock ; s#list_head wait_list ; } 
s##nameidata
s#iattr struct iattr { unsigned int ia_valid ; t#umode_t ia_mode ; t#uid_t ia_uid ; t#gid_t ia_gid ; t#loff_t ia_size ; s#timespec ia_atime ; s#timespec ia_mtime ; s#timespec ia_ctime ; s#file * ia_file ; } 
s#kstat struct kstat { t#u64 ino ; t#dev_t dev ; t#umode_t mode ; unsigned int nlink ; t#uid_t uid ; t#gid_t gid ; t#dev_t rdev ; t#loff_t size ; s#timespec atime ; s#timespec mtime ; s#timespec ctime ; unsigned long blksize ; unsigned long long blocks ; } 
s#fiemap_extent struct fiemap_extent { t#__u64 fe_logical ; t#__u64 fe_physical ; t#__u64 fe_length ; t#__u64 fe_reserved64 [ 2 ] ; t#__u32 fe_flags ; t#__u32 fe_reserved [ 3 ] ; } 
s#fiemap_extent_info struct fiemap_extent_info { unsigned int fi_flags ; unsigned int fi_extents_mapped ; unsigned int fi_extents_max ; s#fiemap_extent * fi_extents_start ; } 
s#inode_operations struct inode_operations { int ( * create ) ( s#inode * , s#dentry * , int , s#nameidata * ) ; s#dentry * ( * lookup ) ( s#inode * , s#dentry * , s#nameidata * ) ; int ( * link ) ( s#dentry * , s#inode * , s#dentry * ) ; int ( * unlink ) ( s#inode * , s#dentry * ) ; int ( * symlink ) ( s#inode * , s#dentry * , const char * ) ; int ( * mkdir ) ( s#inode * , s#dentry * , int ) ; int ( * rmdir ) ( s#inode * , s#dentry * ) ; int ( * mknod ) ( s#inode * , s#dentry * , int , t#dev_t ) ; int ( * rename ) ( s#inode * , s#dentry * , s#inode * , s#dentry * ) ; int ( * readlink ) ( s#dentry * , char * , int ) ; void * ( * follow_link ) ( s#dentry * , s#nameidata * ) ; void ( * put_link ) ( s#dentry * , s#nameidata * , void * ) ; void ( * truncate ) ( s#inode * ) ; int ( * permission ) ( s#inode * , int ) ; int ( * check_acl ) ( s#inode * , int ) ; int ( * may_create ) ( s#inode * , int ) ; int ( * may_delete ) ( s#inode * , s#inode * ) ; int ( * setattr ) ( s#dentry * , s#iattr * ) ; int ( * getattr ) ( s#vfsmount * , s#dentry * , s#kstat * ) ; int ( * setxattr ) ( s#dentry * , const char * , const void * , t#size_t , int ) ; t#ssize_t ( * getxattr ) ( s#dentry * , const char * , void * , t#size_t ) ; t#ssize_t ( * listxattr ) ( s#dentry * , char * , t#size_t ) ; int ( * removexattr ) ( s#dentry * , const char * ) ; void ( * truncate_range ) ( s#inode * , t#loff_t , t#loff_t ) ; long ( * fallocate ) ( s#inode * , int , t#loff_t , t#loff_t ) ; int ( * fiemap ) ( s#inode * , s#fiemap_extent_info * , t#u64 , t#u64 ) ; } 
t#gfp_t typedef unsigned gfp_t 
s##radix_tree_node
s#radix_tree_root struct radix_tree_root { unsigned int height ; t#gfp_t gfp_mask ; s#radix_tree_node * rnode ; } 
s#prio_tree_root struct prio_tree_root { s#prio_tree_node * prio_tree_node ; unsigned short index_bits ; unsigned short raw ; } 
s##writeback_control
t#sector_t typedef unsigned long sector_t 
s#iovec struct iovec { void * iov_base ; t#__kernel_size_t iov_len ; } 
t#read_descriptor_t typedef struct { t#size_t written ; t#size_t count ; union { char * buf ; void * data ; } arg ; int error ; } read_descriptor_t 
s#address_space_operations struct address_space_operations { int ( * writepage ) ( s#page * , s#writeback_control * ) ; int ( * readpage ) ( s#file * , s#page * ) ; void ( * sync_page ) ( s#page * ) ; int ( * writepages ) ( s#address_space * , s#writeback_control * ) ; int ( * set_page_dirty ) ( s#page * ) ; int ( * readpages ) ( s#file * , s#address_space * , s#list_head * , unsigned ) ; int ( * write_begin ) ( s#file * , s#address_space * , t#loff_t , unsigned , unsigned , s#page * * , void * * ) ; int ( * write_end ) ( s#file * , s#address_space * , t#loff_t , unsigned , unsigned , s#page * , void * ) ; t#sector_t ( * bmap ) ( s#address_space * , t#sector_t ) ; void ( * invalidatepage ) ( s#page * , unsigned long ) ; int ( * releasepage ) ( s#page * , t#gfp_t ) ; t#ssize_t ( * direct_IO ) ( int , s#kiocb * , const s#iovec * , t#loff_t , unsigned long ) ; int ( * get_xip_mem ) ( s#address_space * , unsigned long , int , void * * , unsigned long * ) ; int ( * migratepage ) ( s#address_space * , s#page * , s#page * ) ; int ( * launder_page ) ( s#page * ) ; int ( * is_partially_uptodate ) ( s#page * , t#read_descriptor_t * , unsigned long ) ; int ( * error_remove_page ) ( s#address_space * , s#page * ) ; int ( * swapon ) ( s#file * ) ; int ( * swapoff ) ( s#file * ) ; int ( * swap_out ) ( s#file * , s#page * , s#writeback_control * ) ; int ( * swap_in ) ( s#file * , s#page * ) ; } 
s##backing_dev_info
s#address_space struct address_space { s#inode * host ; s#radix_tree_root page_tree ; t#spinlock_t tree_lock ; unsigned int i_mmap_writable ; s#prio_tree_root i_mmap ; s#list_head i_mmap_nonlinear ; t#spinlock_t i_mmap_lock ; unsigned int truncate_count ; unsigned long nrpages ; unsigned long writeback_index ; const s#address_space_operations * a_ops ; unsigned long flags ; s#backing_dev_info * backing_dev_info ; t#spinlock_t private_lock ; s#list_head private_list ; s#address_space * assoc_mapping ; } 
s##array_cache
s##kmem_list3
s#kmem_cache struct kmem_cache { s#array_cache * array [ 512 ] ; unsigned int batchcount ; unsigned int limit ; unsigned int shared ; unsigned int buffer_size ; t#u32 reciprocal_buffer_size ; unsigned int flags ; unsigned int num ; unsigned int gfporder ; t#gfp_t gfpflags ; t#size_t colour ; unsigned int colour_off ; s#kmem_cache * slabp_cache ; unsigned int slab_size ; unsigned int dflags ; void ( * ctor ) ( void * ) ; const char * name ; s#list_head next ; s#kmem_list3 * nodelists [ ( 1 << 9 ) ] ; } 
s#page struct page { unsigned long flags ; t#atomic_t _count ; union { t#atomic_t _mapcount ; struct { t#u16 inuse ; t#u16 objects ; } ; } ; union { struct { unsigned long private ; s#address_space * mapping ; } ; t#spinlock_t ptl ; s#kmem_cache * slab ; s#page * first_page ; } ; union { unsigned long index ; void * freelist ; int reserve ; t#atomic_t frag_count ; } ; s#list_head lru ; } 
s#aio_ring_info struct aio_ring_info { unsigned long mmap_base ; unsigned long mmap_size ; s#page * * ring_pages ; t#spinlock_t ring_lock ; long nr_pages ; unsigned nr , tail ; s#page * internal_pages [ 8 ] ; } 
t#atomic64_t typedef struct { volatile long counter ; } atomic64_t 
t#atomic_long_t typedef t#atomic64_t atomic_long_t 
t#work_func_t typedef void ( * work_func_t ) ( s#work_struct * ) 
s#work_struct struct work_struct { t#atomic_long_t data ; s#list_head entry ; t#work_func_t func ; } 
s##tvec_base
s#timer_list struct timer_list { s#list_head entry ; unsigned long expires ; void ( * function ) ( unsigned long ) ; unsigned long data ; s#tvec_base * base ; void * start_site ; char start_comm [ 16 ] ; int start_pid ; } 
s#delayed_work struct delayed_work { s#work_struct work ; s#timer_list timer ; } 
s#kioctx struct kioctx { t#atomic_t users ; int dead ; s#mm_struct * mm ; unsigned long user_id ; s#hlist_node list ; t#wait_queue_head_t wait ; t#spinlock_t ctx_lock ; int reqs_active ; s#list_head active_reqs ; s#list_head run_list ; unsigned max_reqs ; s#aio_ring_info ring_info ; s#delayed_work wq ; t#wait_queue_head_t poll_wait ; s#file * file ; s#rcu_head rcu_head ; } 
t#__s64 __extension__ typedef __signed__ long long __s64 
s#io_event struct io_event { t#__u64 data ; t#__u64 obj ; t#__s64 res ; t#__s64 res2 ; } 
t#wait_queue_func_t typedef int ( * wait_queue_func_t ) ( t#wait_queue_t * , unsigned , int , void * ) 
s#__wait_queue struct __wait_queue { unsigned int flags ; void * private ; t#wait_queue_func_t func ; s#list_head task_list ; } 
t#wait_queue_t typedef s#__wait_queue wait_queue_t 
s##eventfd_ctx
s#kiocb struct kiocb { s#list_head ki_run_list ; unsigned long ki_flags ; int ki_users ; unsigned ki_key ; s#file * ki_filp ; s#kioctx * ki_ctx ; int ( * ki_cancel ) ( s#kiocb * , s#io_event * ) ; t#ssize_t ( * ki_retry ) ( s#kiocb * ) ; void ( * ki_dtor ) ( s#kiocb * ) ; union { void * user ; s#task_struct * tsk ; } ki_obj ; t#__u64 ki_user_data ; t#wait_queue_t ki_wait ; t#loff_t ki_pos ; void * private ; unsigned short ki_opcode ; t#size_t ki_nbytes ; char * ki_buf ; t#size_t ki_left ; s#iovec ki_inline_vec ; s#iovec * ki_iovec ; unsigned long ki_nr_segs ; unsigned long ki_cur_seg ; s#list_head ki_list ; s#eventfd_ctx * ki_eventfd ; } 
t#filldir_t typedef int ( * filldir_t ) ( void * , const char * , int , t#loff_t , t#u64 , unsigned ) 
s##poll_table_struct
s##files_struct
t#fl_owner_t typedef s#files_struct * fl_owner_t 
s##pid_namespace
s#upid struct upid { int nr ; s#pid_namespace * ns ; s#hlist_node pid_chain ; } 
s#pid struct pid { t#atomic_t count ; unsigned int level ; s#hlist_head tasks [ PIDTYPE_MAX ] ; s#rcu_head rcu ; s#upid numbers [ 1 ] ; } 
s#fasync_struct struct fasync_struct { int magic ; int fa_fd ; s#fasync_struct * fa_next ; s#file * fa_file ; } 
s#file_lock_operations struct file_lock_operations { void ( * fl_copy_lock ) ( s#file_lock * , s#file_lock * ) ; void ( * fl_release_private ) ( s#file_lock * ) ; } 
s#lock_manager_operations struct lock_manager_operations { int ( * fl_compare_owner ) ( s#file_lock * , s#file_lock * ) ; void ( * fl_notify ) ( s#file_lock * ) ; int ( * fl_grant ) ( s#file_lock * , s#file_lock * , int ) ; void ( * fl_copy_lock ) ( s#file_lock * , s#file_lock * ) ; void ( * fl_release_private ) ( s#file_lock * ) ; void ( * fl_break ) ( s#file_lock * ) ; int ( * fl_mylease ) ( s#file_lock * , s#file_lock * ) ; int ( * fl_change ) ( s#file_lock * * , int ) ; } 
s##nlm_lockowner
s#nfs_lock_info struct nfs_lock_info { t#u32 state ; s#nlm_lockowner * owner ; s#list_head list ; } 
s##nfs4_lock_state
s#nfs4_lock_info struct nfs4_lock_info { s#nfs4_lock_state * owner ; } 
s#file_lock struct file_lock { s#file_lock * fl_next ; s#list_head fl_link ; s#list_head fl_block ; t#fl_owner_t fl_owner ; unsigned char fl_flags ; unsigned char fl_type ; unsigned int fl_pid ; s#pid * fl_nspid ; t#wait_queue_head_t fl_wait ; s#file * fl_file ; t#loff_t fl_start ; t#loff_t fl_end ; s#fasync_struct * fl_fasync ; unsigned long fl_break_time ; const s#file_lock_operations * fl_ops ; const s#lock_manager_operations * fl_lmops ; union { s#nfs_lock_info nfs_fl ; s#nfs4_lock_info nfs4_fl ; struct { s#list_head link ; int state ; } afs ; } fl_u ; } 
s##pipe_inode_info
s#file_operations struct file_operations { s#module * owner ; t#loff_t ( * llseek ) ( s#file * , t#loff_t , int ) ; t#ssize_t ( * read ) ( s#file * , char * , t#size_t , t#loff_t * ) ; t#ssize_t ( * write ) ( s#file * , const char * , t#size_t , t#loff_t * ) ; t#ssize_t ( * aio_read ) ( s#kiocb * , const s#iovec * , unsigned long , t#loff_t ) ; t#ssize_t ( * aio_write ) ( s#kiocb * , const s#iovec * , unsigned long , t#loff_t ) ; int ( * readdir ) ( s#file * , void * , t#filldir_t ) ; unsigned int ( * poll ) ( s#file * , s#poll_table_struct * ) ; int ( * ioctl ) ( s#inode * , s#file * , unsigned int , unsigned long ) ; long ( * unlocked_ioctl ) ( s#file * , unsigned int , unsigned long ) ; long ( * compat_ioctl ) ( s#file * , unsigned int , unsigned long ) ; int ( * mmap ) ( s#file * , s#vm_area_struct * ) ; int ( * open ) ( s#inode * , s#file * ) ; int ( * flush ) ( s#file * , t#fl_owner_t ) ; int ( * release ) ( s#inode * , s#file * ) ; int ( * fsync ) ( s#file * , s#dentry * , int ) ; int ( * aio_fsync ) ( s#kiocb * , int ) ; int ( * fasync ) ( int , s#file * , int ) ; int ( * lock ) ( s#file * , int , s#file_lock * ) ; t#ssize_t ( * sendpage ) ( s#file * , s#page * , int , t#size_t , t#loff_t * , int ) ; unsigned long ( * get_unmapped_area ) ( s#file * , unsigned long , unsigned long , unsigned long , unsigned long ) ; int ( * check_flags ) ( int ) ; int ( * flock ) ( s#file * , int , s#file_lock * ) ; t#ssize_t ( * splice_write ) ( s#pipe_inode_info * , s#file * , t#loff_t * , t#size_t , unsigned int ) ; t#ssize_t ( * splice_read ) ( s#file * , t#loff_t * , s#pipe_inode_info * , t#size_t , unsigned int ) ; int ( * open_exec ) ( s#inode * ) ; int ( * setlease ) ( s#file * , long , s#file_lock * * ) ; } 
s#lock_class_key struct lock_class_key { } 
s#file_system_type struct file_system_type { const char * name ; int fs_flags ; int ( * get_sb ) ( s#file_system_type * , int , const char * , void * , s#vfsmount * ) ; void ( * kill_sb ) ( s#super_block * ) ; s#module * owner ; s#file_system_type * next ; s#list_head fs_supers ; s#lock_class_key s_lock_key ; s#lock_class_key s_umount_key ; s#lock_class_key i_lock_key ; s#lock_class_key i_mutex_key ; s#lock_class_key i_mutex_dir_key ; s#lock_class_key i_alloc_sem_key ; } 
s##kstatfs
s##seq_file
s#super_operations struct super_operations { s#inode * ( * alloc_inode ) ( s#super_block * ) ; void ( * destroy_inode ) ( s#inode * ) ; void ( * dirty_inode ) ( s#inode * ) ; int ( * write_inode ) ( s#inode * , int ) ; void ( * drop_inode ) ( s#inode * ) ; void ( * delete_inode ) ( s#inode * ) ; void ( * put_super ) ( s#super_block * ) ; void ( * write_super ) ( s#super_block * ) ; int ( * sync_fs ) ( s#super_block * , int ) ; int ( * freeze_fs ) ( s#super_block * ) ; int ( * unfreeze_fs ) ( s#super_block * ) ; int ( * statfs ) ( s#dentry * , s#kstatfs * ) ; int ( * remount_fs ) ( s#super_block * , int * , char * ) ; void ( * clear_inode ) ( s#inode * ) ; void ( * umount_begin ) ( s#super_block * ) ; int ( * show_options ) ( s#seq_file * , s#vfsmount * ) ; int ( * show_stats ) ( s#seq_file * , s#vfsmount * ) ; t#ssize_t ( * quota_read ) ( s#super_block * , int , char * , t#size_t , t#loff_t ) ; t#ssize_t ( * quota_write ) ( s#super_block * , int , const char * , t#size_t , t#loff_t ) ; int ( * bdev_try_to_free_page ) ( s#super_block * , s#page * , t#gfp_t ) ; } 
t#qsize_t typedef long long qsize_t 
t#time_t typedef t#__kernel_time_t time_t 
s#mem_dqblk struct mem_dqblk { t#qsize_t dqb_bhardlimit ; t#qsize_t dqb_bsoftlimit ; t#qsize_t dqb_curspace ; t#qsize_t dqb_rsvspace ; t#qsize_t dqb_ihardlimit ; t#qsize_t dqb_isoftlimit ; t#qsize_t dqb_curinodes ; t#time_t dqb_btime ; t#time_t dqb_itime ; } 
s#dquot struct dquot { s#hlist_node dq_hash ; s#list_head dq_inuse ; s#list_head dq_free ; s#list_head dq_dirty ; s#mutex dq_lock ; t#atomic_t dq_count ; t#wait_queue_head_t dq_wait_unused ; s#super_block * dq_sb ; unsigned int dq_id ; t#loff_t dq_off ; unsigned long dq_flags ; short dq_type ; s#mem_dqblk dq_dqb ; } 
s#dquot_operations struct dquot_operations { int ( * initialize ) ( s#inode * , int ) ; int ( * drop ) ( s#inode * ) ; int ( * alloc_space ) ( s#inode * , t#qsize_t , int ) ; int ( * alloc_inode ) ( const s#inode * , t#qsize_t ) ; int ( * free_space ) ( s#inode * , t#qsize_t ) ; int ( * free_inode ) ( const s#inode * , t#qsize_t ) ; int ( * transfer ) ( s#inode * , s#iattr * ) ; int ( * write_dquot ) ( s#dquot * ) ; s#dquot * ( * alloc_dquot ) ( s#super_block * , int ) ; void ( * destroy_dquot ) ( s#dquot * ) ; int ( * acquire_dquot ) ( s#dquot * ) ; int ( * release_dquot ) ( s#dquot * ) ; int ( * mark_dirty ) ( s#dquot * ) ; int ( * write_info ) ( s#super_block * , int ) ; int ( * reserve_space ) ( s#inode * , t#qsize_t , int ) ; int ( * claim_space ) ( s#inode * , t#qsize_t ) ; void ( * release_rsv ) ( s#inode * , t#qsize_t ) ; t#qsize_t * ( * get_reserved_space ) ( s#inode * ) ; } 
s#if_dqinfo struct if_dqinfo { t#__u64 dqi_bgrace ; t#__u64 dqi_igrace ; t#__u32 dqi_flags ; t#__u32 dqi_valid ; } 
t#qid_t typedef t#__kernel_uid32_t qid_t 
s#if_dqblk struct if_dqblk { t#__u64 dqb_bhardlimit ; t#__u64 dqb_bsoftlimit ; t#__u64 dqb_curspace ; t#__u64 dqb_ihardlimit ; t#__u64 dqb_isoftlimit ; t#__u64 dqb_curinodes ; t#__u64 dqb_btime ; t#__u64 dqb_itime ; t#__u32 dqb_valid ; } 
t#__s8 typedef __signed__ char __s8 
s#fs_qfilestat struct fs_qfilestat { t#__u64 qfs_ino ; t#__u64 qfs_nblks ; t#__u32 qfs_nextents ; } 
t#fs_qfilestat_t typedef s#fs_qfilestat fs_qfilestat_t 
t#__s32 typedef __signed__ int __s32 
s#fs_quota_stat struct fs_quota_stat { t#__s8 qs_version ; t#__u16 qs_flags ; t#__s8 qs_pad ; t#fs_qfilestat_t qs_uquota ; t#fs_qfilestat_t qs_gquota ; t#__u32 qs_incoredqs ; t#__s32 qs_btimelimit ; t#__s32 qs_itimelimit ; t#__s32 qs_rtbtimelimit ; t#__u16 qs_bwarnlimit ; t#__u16 qs_iwarnlimit ; } 
t#__s16 typedef __signed__ short __s16 
s#fs_disk_quota struct fs_disk_quota { t#__s8 d_version ; t#__s8 d_flags ; t#__u16 d_fieldmask ; t#__u32 d_id ; t#__u64 d_blk_hardlimit ; t#__u64 d_blk_softlimit ; t#__u64 d_ino_hardlimit ; t#__u64 d_ino_softlimit ; t#__u64 d_bcount ; t#__u64 d_icount ; t#__s32 d_itimer ; t#__s32 d_btimer ; t#__u16 d_iwarns ; t#__u16 d_bwarns ; t#__s32 d_padding2 ; t#__u64 d_rtb_hardlimit ; t#__u64 d_rtb_softlimit ; t#__u64 d_rtbcount ; t#__s32 d_rtbtimer ; t#__u16 d_rtbwarns ; t#__s16 d_padding3 ; char d_padding4 [ 8 ] ; } 
s#quotactl_ops struct quotactl_ops { int ( * quota_on ) ( s#super_block * , int , int , char * , int ) ; int ( * quota_off ) ( s#super_block * , int , int ) ; int ( * quota_sync ) ( s#super_block * , int ) ; int ( * get_info ) ( s#super_block * , int , s#if_dqinfo * ) ; int ( * set_info ) ( s#super_block * , int , s#if_dqinfo * ) ; int ( * get_dqblk ) ( s#super_block * , int , t#qid_t , s#if_dqblk * ) ; int ( * set_dqblk ) ( s#super_block * , int , t#qid_t , s#if_dqblk * ) ; int ( * get_xstate ) ( s#super_block * , s#fs_quota_stat * ) ; int ( * set_xstate ) ( s#super_block * , unsigned int , int ) ; int ( * get_xquota ) ( s#super_block * , int , t#qid_t , s#fs_disk_quota * ) ; int ( * set_xquota ) ( s#super_block * , int , t#qid_t , s#fs_disk_quota * ) ; } 
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s#block_device struct block_device { t#dev_t bd_dev ; s#inode * bd_inode ; s#super_block * bd_super ; int bd_openers ; s#mutex bd_mutex ; s#list_head bd_inodes ; void * bd_holder ; int bd_holders ; s#list_head bd_holder_list ; s#block_device * bd_contains ; unsigned bd_block_size ; s#hd_struct * bd_part ; unsigned bd_part_count ; int bd_invalidated ; s#gendisk * bd_disk ; s#list_head bd_list ; unsigned long bd_private ; int bd_fsfreeze_count ; s#mutex bd_fsfreeze_mutex ; } 
s##mtd_info
s#quota_format_ops struct quota_format_ops { int ( * check_quota_file ) ( s#super_block * , int ) ; int ( * read_file_info ) ( s#super_block * , int ) ; int ( * write_file_info ) ( s#super_block * , int ) ; int ( * free_file_info ) ( s#super_block * , int ) ; int ( * read_dqblk ) ( s#dquot * ) ; int ( * commit_dqblk ) ( s#dquot * ) ; int ( * release_dqblk ) ( s#dquot * ) ; } 
s#quota_format_type struct quota_format_type { int qf_fmt_id ; s#quota_format_ops * qf_ops ; s#module * qf_owner ; s#quota_format_type * qf_next ; } 
s#mem_dqinfo struct mem_dqinfo { s#quota_format_type * dqi_format ; int dqi_fmt_id ; s#list_head dqi_dirty_list ; unsigned long dqi_flags ; unsigned int dqi_bgrace ; unsigned int dqi_igrace ; t#qsize_t dqi_maxblimit ; t#qsize_t dqi_maxilimit ; void * dqi_priv ; } 
s#quota_info struct quota_info { unsigned int flags ; s#mutex dqio_mutex ; s#mutex dqonoff_mutex ; s#rw_semaphore dqptr_sem ; s#inode * files [ 2 ] ; s#mem_dqinfo info [ 2 ] ; s#quota_format_ops * ops [ 2 ] ; } 
t#fmode_t typedef unsigned fmode_t 
s#super_block struct super_block { s#list_head s_list ; t#dev_t s_dev ; unsigned long s_blocksize ; unsigned char s_blocksize_bits ; unsigned char s_dirt ; t#loff_t s_maxbytes ; s#file_system_type * s_type ; const s#super_operations * s_op ; const s#dquot_operations * dq_op ; const s#quotactl_ops * s_qcop ; const s#export_operations * s_export_op ; unsigned long s_flags ; unsigned long s_magic ; s#dentry * s_root ; s#rw_semaphore s_umount ; s#mutex s_lock ; int s_count ; int s_need_sync ; t#atomic_t s_active ; void * s_security ; s#xattr_handler * * s_xattr ; s#list_head s_inodes ; s#hlist_head s_anon ; s#list_head s_files ; s#list_head s_dentry_lru ; int s_nr_dentry_unused ; s#block_device * s_bdev ; s#backing_dev_info * s_bdi ; s#mtd_info * s_mtd ; s#list_head s_instances ; s#quota_info s_dquot ; int s_frozen ; t#wait_queue_head_t s_wait_unfrozen ; char s_id [ 32 ] ; void * s_fs_info ; t#fmode_t s_mode ; s#mutex s_vfs_rename_mutex ; t#u32 s_time_gran ; char * s_subtype ; char * s_options ; } 
s##cdev
s##posix_acl
s#inode struct inode { s#hlist_node i_hash ; s#list_head i_list ; s#list_head i_sb_list ; s#list_head i_dentry ; unsigned long i_ino ; t#atomic_t i_count ; unsigned int i_nlink ; t#uid_t i_uid ; t#gid_t i_gid ; t#dev_t i_rdev ; t#u64 i_version ; t#loff_t i_size ; s#timespec i_atime ; s#timespec i_mtime ; s#timespec i_ctime ; t#blkcnt_t i_blocks ; unsigned int i_blkbits ; unsigned short i_bytes ; t#umode_t i_mode ; t#spinlock_t i_lock ; s#mutex i_mutex ; s#rw_semaphore i_alloc_sem ; const s#inode_operations * i_op ; const s#file_operations * i_fop ; s#super_block * i_sb ; s#file_lock * i_flock ; s#address_space * i_mapping ; s#address_space i_data ; s#dquot * i_dquot [ 2 ] ; s#list_head i_devices ; union { s#pipe_inode_info * i_pipe ; s#block_device * i_bdev ; s#cdev * i_cdev ; } ; t#__u32 i_generation ; t#__u32 i_fsnotify_mask ; s#hlist_head i_fsnotify_mark_entries ; s#list_head inotify_watches ; s#mutex inotify_mutex ; unsigned long i_state ; unsigned long dirtied_when ; unsigned int i_flags ; t#atomic_t i_writecount ; void * i_security ; s#posix_acl * i_acl ; s#posix_acl * i_default_acl ; void * i_private ; } 
s#qstr struct qstr { unsigned int hash ; unsigned int len ; const unsigned char * name ; } 
s#dentry_operations struct dentry_operations { int ( * d_revalidate ) ( s#dentry * , s#nameidata * ) ; int ( * d_hash ) ( s#dentry * , s#qstr * ) ; int ( * d_compare ) ( s#dentry * , s#qstr * , s#qstr * ) ; int ( * d_delete ) ( s#dentry * ) ; void ( * d_release ) ( s#dentry * ) ; void ( * d_iput ) ( s#dentry * , s#inode * ) ; char * ( * d_dname ) ( s#dentry * , char * , int ) ; } 
s#dentry struct dentry { t#atomic_t d_count ; unsigned int d_flags ; t#spinlock_t d_lock ; int d_mounted ; s#inode * d_inode ; s#hlist_node d_hash ; s#dentry * d_parent ; s#qstr d_name ; s#list_head d_lru ; union { s#list_head d_child ; s#rcu_head d_rcu ; } d_u ; s#list_head d_subdirs ; s#list_head d_alias ; unsigned long d_time ; const s#dentry_operations * d_op ; s#super_block * d_sb ; void * d_fsdata ; unsigned char d_iname [ 32 ] ; } 
s#path struct path { s#vfsmount * mnt ; s#dentry * dentry ; } 
t#raw_rwlock_t typedef struct { unsigned int lock ; } raw_rwlock_t 
t#rwlock_t typedef struct { t#raw_rwlock_t raw_lock ; } rwlock_t 
e#pid_type enum pid_type { PIDTYPE_PID , PIDTYPE_PGID , PIDTYPE_SID , PIDTYPE_MAX } 
s#fown_struct struct fown_struct { t#rwlock_t lock ; s#pid * pid ; e#pid_type pid_type ; t#uid_t uid , euid ; int signum ; } 
s#kernel_cap_struct struct kernel_cap_struct { t#__u32 cap [ 2 ] ; } 
t#kernel_cap_t typedef s#kernel_cap_struct kernel_cap_t 
t#int32_t typedef t#__s32 int32_t 
t#key_serial_t typedef t#int32_t key_serial_t 
s##key_type
s##key_user
t#uint32_t typedef t#__u32 uint32_t 
t#key_perm_t typedef t#uint32_t key_perm_t 
s##keyring_list
s#key struct key { t#atomic_t usage ; t#key_serial_t serial ; s#rb_node serial_node ; s#key_type * type ; s#rw_semaphore sem ; s#key_user * user ; void * security ; union { t#time_t expiry ; t#time_t revoked_at ; } ; t#uid_t uid ; t#gid_t gid ; t#key_perm_t perm ; unsigned short quotalen ; unsigned short datalen ; unsigned long flags ; char * description ; union { s#list_head link ; unsigned long x [ 2 ] ; void * p [ 2 ] ; } type_data ; union { unsigned long value ; void * data ; s#keyring_list * subscriptions ; } payload ; } 
t#__kernel_pid_t typedef int __kernel_pid_t 
t#pid_t typedef t#__kernel_pid_t pid_t 
s#thread_group_cred struct thread_group_cred { t#atomic_t usage ; t#pid_t tgid ; t#spinlock_t lock ; s#key * session_keyring ; s#key * process_keyring ; s#rcu_head rcu ; } 
s##user_namespace
s#user_struct struct user_struct { t#atomic_t __count ; t#atomic_t processes ; t#atomic_t files ; t#atomic_t sigpending ; t#atomic_t inotify_watches ; t#atomic_t inotify_devs ; t#atomic_t epoll_watches ; unsigned long mq_bytes ; unsigned long locked_shm ; s#key * uid_keyring ; s#key * session_keyring ; s#hlist_node uidhash_node ; t#uid_t uid ; s#user_namespace * user_ns ; t#atomic_long_t locked_vm ; } 
s#group_info struct group_info { t#atomic_t usage ; int ngroups ; int nblocks ; t#gid_t small_block [ 32 ] ; t#gid_t * blocks [ 0 ] ; } 
s#cred struct cred { t#atomic_t usage ; t#uid_t uid ; t#gid_t gid ; t#uid_t suid ; t#gid_t sgid ; t#uid_t euid ; t#gid_t egid ; t#uid_t fsuid ; t#gid_t fsgid ; unsigned securebits ; t#kernel_cap_t cap_inheritable ; t#kernel_cap_t cap_permitted ; t#kernel_cap_t cap_effective ; t#kernel_cap_t cap_bset ; unsigned char jit_keyring ; s#key * thread_keyring ; s#key * request_key_auth ; s#thread_group_cred * tgcred ; void * security ; s#user_struct * user ; s#group_info * group_info ; s#rcu_head rcu ; } 
s#file_ra_state struct file_ra_state { unsigned long start ; unsigned int size ; unsigned int async_size ; unsigned int ra_pages ; unsigned int mmap_miss ; t#loff_t prev_pos ; } 
s#file struct file { union { s#list_head fu_list ; s#rcu_head fu_rcuhead ; } f_u ; s#path f_path ; const s#file_operations * f_op ; t#spinlock_t f_lock ; t#atomic_long_t f_count ; unsigned int f_flags ; t#fmode_t f_mode ; t#loff_t f_pos ; s#fown_struct f_owner ; const s#cred * f_cred ; s#file_ra_state f_ra ; t#u64 f_version ; void * f_security ; void * private_data ; s#list_head f_ep_links ; s#address_space * f_mapping ; } 
s##mempolicy
s#vm_area_struct struct vm_area_struct { s#mm_struct * vm_mm ; unsigned long vm_start ; unsigned long vm_end ; s#vm_area_struct * vm_next ; t#pgprot_t vm_page_prot ; unsigned long vm_flags ; s#rb_node vm_rb ; union { struct { s#list_head list ; void * parent ; s#vm_area_struct * head ; } vm_set ; s#raw_prio_tree_node prio_tree_node ; } shared ; s#list_head anon_vma_node ; s#anon_vma * anon_vma ; const s#vm_operations_struct * vm_ops ; unsigned long vm_pgoff ; s#file * vm_file ; void * vm_private_data ; unsigned long vm_truncate_count ; s#mempolicy * vm_policy ; } 
s#rb_root struct rb_root { s#rb_node * rb_node ; } 
t#pgdval_t typedef unsigned long pgdval_t 
t#pgd_t typedef struct { t#pgdval_t pgd ; } pgd_t 
t#mm_counter_t typedef t#atomic_long_t mm_counter_t 
s##linux_binfmt
t#mm_context_t typedef struct { void * ldt ; int size ; s#mutex lock ; void * vdso ; } mm_context_t 
s#core_thread struct core_thread { s#task_struct * task ; s#core_thread * next ; } 
s#completion struct completion { unsigned int done ; t#wait_queue_head_t wait ; } 
s#core_state struct core_state { t#atomic_t nr_threads ; s#core_thread dumper ; s#completion startup ; } 
s##mmu_notifier_mm
s#mm_struct struct mm_struct { s#vm_area_struct * mmap ; s#rb_root mm_rb ; s#vm_area_struct * mmap_cache ; unsigned long ( * get_unmapped_area ) ( s#file * , unsigned long , unsigned long , unsigned long , unsigned long ) ; void ( * unmap_area ) ( s#mm_struct * , unsigned long ) ; unsigned long mmap_base ; unsigned long task_size ; unsigned long cached_hole_size ; unsigned long free_area_cache ; t#pgd_t * pgd ; t#atomic_t mm_users ; t#atomic_t mm_count ; int map_count ; s#rw_semaphore mmap_sem ; t#spinlock_t page_table_lock ; s#list_head mmlist ; t#mm_counter_t _file_rss ; t#mm_counter_t _anon_rss ; unsigned long hiwater_rss ; unsigned long hiwater_vm ; unsigned long total_vm , locked_vm , shared_vm , exec_vm ; unsigned long stack_vm , reserved_vm , def_flags , nr_ptes ; unsigned long start_code , end_code , start_data , end_data ; unsigned long start_brk , brk , start_stack ; unsigned long arg_start , arg_end , env_start , env_end ; unsigned long saved_auxv [ ( 2 * ( 2 + 19 + 1 ) ) ] ; s#linux_binfmt * binfmt ; t#cpumask_t cpu_vm_mask ; t#mm_context_t context ; unsigned int faultstamp ; unsigned int token_priority ; unsigned int last_interval ; unsigned long flags ; s#core_state * core_state ; t#spinlock_t ioctx_lock ; s#hlist_head ioctx_list ; s#task_struct * owner ; s#file * exe_file ; unsigned long num_exe_file_vmas ; s#mmu_notifier_mm * mmu_notifier_mm ; } 
s##bts_context
s#pid_link struct pid_link { s#hlist_node node ; s#pid * pid ; } 
t#cputime_t typedef unsigned long cputime_t 
s#task_cputime struct task_cputime { t#cputime_t utime ; t#cputime_t stime ; unsigned long long sum_exec_runtime ; } 
s#sem_undo_list struct sem_undo_list { t#atomic_t refcnt ; t#spinlock_t lock ; s#list_head list_proc ; } 
s#sysv_sem struct sysv_sem { s#sem_undo_list * undo_list ; } 
s#desc_struct struct desc_struct { union { struct { unsigned int a ; unsigned int b ; } ; struct { t#u16 limit0 ; t#u16 base0 ; unsigned base1 : 8 , type : 4 , s : 1 , dpl : 2 , p : 1 ; unsigned limit : 4 , avl : 1 , l : 1 , d : 1 , g : 1 , base2 : 8 ; } ; } ; } 
s#i387_fsave_struct struct i387_fsave_struct { t#u32 cwd ; t#u32 swd ; t#u32 twd ; t#u32 fip ; t#u32 fcs ; t#u32 foo ; t#u32 fos ; t#u32 st_space [ 20 ] ; t#u32 status ; } 
s#i387_fxsave_struct struct i387_fxsave_struct { t#u16 cwd ; t#u16 swd ; t#u16 twd ; t#u16 fop ; union { struct { t#u64 rip ; t#u64 rdp ; } ; struct { t#u32 fip ; t#u32 fcs ; t#u32 foo ; t#u32 fos ; } ; } ; t#u32 mxcsr ; t#u32 mxcsr_mask ; t#u32 st_space [ 32 ] ; t#u32 xmm_space [ 64 ] ; t#u32 padding [ 12 ] ; union { t#u32 padding1 [ 12 ] ; t#u32 sw_reserved [ 12 ] ; } ; } 
s#kernel_vm86_regs struct kernel_vm86_regs { s#pt_regs pt ; unsigned short es , __esh ; unsigned short ds , __dsh ; unsigned short fs , __fsh ; unsigned short gs , __gsh ; } 
s#math_emu_info struct math_emu_info { long ___orig_eip ; union { s#pt_regs * regs ; s#kernel_vm86_regs * vm86 ; } ; } 
s#i387_soft_struct struct i387_soft_struct { t#u32 cwd ; t#u32 swd ; t#u32 twd ; t#u32 fip ; t#u32 fcs ; t#u32 foo ; t#u32 fos ; t#u32 st_space [ 20 ] ; t#u8 ftop ; t#u8 changed ; t#u8 lookahead ; t#u8 no_update ; t#u8 rm ; t#u8 alimit ; s#math_emu_info * info ; t#u32 entry_eip ; } 
s#xsave_hdr_struct struct xsave_hdr_struct { t#u64 xstate_bv ; t#u64 reserved1 [ 2 ] ; t#u64 reserved2 [ 5 ] ; } 
s#ymmh_struct struct ymmh_struct { t#u32 ymmh_space [ 64 ] ; } 
s#xsave_struct struct xsave_struct { s#i387_fxsave_struct i387 ; s#xsave_hdr_struct xsave_hdr ; s#ymmh_struct ymmh ; } 
u#thread_xstate union thread_xstate { s#i387_fsave_struct fsave ; s#i387_fxsave_struct fxsave ; s#i387_soft_struct soft ; s#xsave_struct xsave ; } 
s##ds_context
s#thread_struct struct thread_struct { s#desc_struct tls_array [ 3 ] ; unsigned long sp0 ; unsigned long sp ; unsigned long usersp ; unsigned short es ; unsigned short ds ; unsigned short fsindex ; unsigned short gsindex ; unsigned long fs ; unsigned long gs ; unsigned long debugreg0 ; unsigned long debugreg1 ; unsigned long debugreg2 ; unsigned long debugreg3 ; unsigned long debugreg6 ; unsigned long debugreg7 ; unsigned long cr2 ; unsigned long trap_no ; unsigned long error_code ; u#thread_xstate * xstate ; unsigned long * io_bitmap_ptr ; unsigned long iopl ; unsigned io_bitmap_max ; unsigned long debugctlmsr ; s#ds_context * ds_ctx ; } 
s##fs_struct
s##nsproxy
t#sigset_t typedef struct { unsigned long sig [ ( 64 / 64 ) ] ; } sigset_t 
s#sigpending struct sigpending { s#list_head list ; t#sigset_t signal ; } 
u#ktime union ktime { t#s64 tv64 ; } 
t#ktime_t typedef u#ktime ktime_t 
e#hrtimer_restart enum hrtimer_restart { HRTIMER_NORESTART , HRTIMER_RESTART , } 
s#hrtimer_cpu_base struct hrtimer_cpu_base { t#spinlock_t lock ; s#hrtimer_clock_base clock_base [ 2 ] ; t#ktime_t expires_next ; int hres_active ; unsigned long nr_events ; } 
s#hrtimer_clock_base struct hrtimer_clock_base { s#hrtimer_cpu_base * cpu_base ; t#clockid_t index ; s#rb_root active ; s#rb_node * first ; t#ktime_t resolution ; t#ktime_t ( * get_time ) ( void ) ; t#ktime_t softirq_time ; t#ktime_t offset ; } 
s#hrtimer struct hrtimer { s#rb_node node ; t#ktime_t _expires ; t#ktime_t _softexpires ; e#hrtimer_restart ( * function ) ( s#hrtimer * ) ; s#hrtimer_clock_base * base ; unsigned long state ; int start_pid ; void * start_site ; char start_comm [ 16 ] ; } 
s#cpu_itimer struct cpu_itimer { t#cputime_t expires ; t#cputime_t incr ; t#u32 error ; t#u32 incr_error ; } 
s#thread_group_cputimer struct thread_group_cputimer { s#task_cputime cputime ; int running ; t#spinlock_t lock ; } 
s##tty_struct
s#task_io_accounting struct task_io_accounting { t#u64 rchar ; t#u64 wchar ; t#u64 syscr ; t#u64 syscw ; t#u64 read_bytes ; t#u64 write_bytes ; t#u64 cancelled_write_bytes ; } 
s#rlimit struct rlimit { unsigned long rlim_cur ; unsigned long rlim_max ; } 
s#pacct_struct struct pacct_struct { int ac_flag ; long ac_exitcode ; unsigned long ac_mem ; t#cputime_t ac_utime , ac_stime ; unsigned long ac_minflt , ac_majflt ; } 
s##taskstats
s##tty_audit_buf
s#signal_struct struct signal_struct { t#atomic_t count ; t#atomic_t live ; t#wait_queue_head_t wait_chldexit ; s#task_struct * curr_target ; s#sigpending shared_pending ; int group_exit_code ; int notify_count ; s#task_struct * group_exit_task ; int group_stop_count ; unsigned int flags ; s#list_head posix_timers ; s#hrtimer real_timer ; s#pid * leader_pid ; t#ktime_t it_real_incr ; s#cpu_itimer it [ 2 ] ; s#thread_group_cputimer cputimer ; s#task_cputime cputime_expires ; s#list_head cpu_timers [ 3 ] ; s#pid * tty_old_pgrp ; int leader ; s#tty_struct * tty ; t#cputime_t utime , stime , cutime , cstime ; t#cputime_t gtime ; t#cputime_t cgtime ; t#cputime_t prev_utime , prev_stime ; unsigned long nvcsw , nivcsw , cnvcsw , cnivcsw ; unsigned long min_flt , maj_flt , cmin_flt , cmaj_flt ; unsigned long inblock , oublock , cinblock , coublock ; unsigned long maxrss , cmaxrss ; s#task_io_accounting ioac ; unsigned long long sum_sched_runtime ; s#rlimit rlim [ 16 ] ; s#pacct_struct pacct ; s#taskstats * stats ; unsigned audit_tty ; s#tty_audit_buf * tty_audit_buf ; int oom_adj ; } 
t#__signalfn_t typedef void __signalfn_t ( int ) 
t#__sighandler_t typedef t#__signalfn_t * __sighandler_t 
t#__restorefn_t typedef void __restorefn_t ( void ) 
t#__sigrestore_t typedef t#__restorefn_t * __sigrestore_t 
s#sigaction struct sigaction { t#__sighandler_t sa_handler ; unsigned long sa_flags ; t#__sigrestore_t sa_restorer ; t#sigset_t sa_mask ; } 
s#k_sigaction struct k_sigaction { s#sigaction sa ; } 
s#sighand_struct struct sighand_struct { t#atomic_t count ; s#k_sigaction action [ 64 ] ; t#spinlock_t siglock ; t#wait_queue_head_t signalfd_wqh ; } 
s##audit_context
t#seccomp_t typedef struct { int mode ; } seccomp_t 
s##utrace_engine
s#utrace struct utrace { s#task_struct * cloning ; s#list_head attached , attaching ; t#spinlock_t lock ; s#utrace_engine * reporting ; unsigned int stopped : 1 ; unsigned int report : 1 ; unsigned int interrupt : 1 ; unsigned int signal_handler : 1 ; unsigned int vfork_stop : 1 ; unsigned int death : 1 ; unsigned int reap : 1 ; unsigned int pending_attach : 1 ; } 
e#irqreturn enum irqreturn { IRQ_NONE , IRQ_HANDLED , IRQ_WAKE_THREAD , } 
t#irqreturn_t typedef e#irqreturn irqreturn_t 
t#irq_handler_t typedef t#irqreturn_t ( * irq_handler_t ) ( int , void * ) 
s##proc_dir_entry
s#irqaction struct irqaction { t#irq_handler_t handler ; unsigned long flags ; const char * name ; void * dev_id ; s#irqaction * next ; int irq ; s#proc_dir_entry * dir ; t#irq_handler_t thread_fn ; s#task_struct * thread ; unsigned long thread_flags ; } 
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
t#__kernel_timer_t typedef int __kernel_timer_t 
u#sigval union sigval { int sival_int ; void * sival_ptr ; } 
t#sigval_t typedef u#sigval sigval_t 
t#__kernel_clock_t typedef long __kernel_clock_t 
s#siginfo struct siginfo { int si_signo ; int si_errno ; int si_code ; union { int _pad [ ( ( 128 - ( 4 * sizeof ( int ) ) ) / sizeof ( int ) ) ] ; struct { t#__kernel_pid_t _pid ; t#__kernel_uid32_t _uid ; } _kill ; struct { t#__kernel_timer_t _tid ; int _overrun ; char _pad [ sizeof ( __kernel_uid32_t ) - sizeof ( int ) ] ; t#sigval_t _sigval ; int _sys_private ; } _timer ; struct { t#__kernel_pid_t _pid ; t#__kernel_uid32_t _uid ; t#sigval_t _sigval ; } _rt ; struct { t#__kernel_pid_t _pid ; t#__kernel_uid32_t _uid ; int _status ; t#__kernel_clock_t _utime ; t#__kernel_clock_t _stime ; } _sigchld ; struct { void * _addr ; short _addr_lsb ; } _sigfault ; struct { long _band ; int _fd ; } _sigpoll ; } _sifields ; } 
t#siginfo_t typedef s#siginfo siginfo_t 
t#nodemask_t typedef struct { unsigned long bits [ ( ( ( ( 1 << 9 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } nodemask_t 
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s#task_delay_info struct task_delay_info { t#spinlock_t lock ; unsigned int flags ; s#timespec blkio_start , blkio_end ; t#u64 blkio_delay ; t#u64 swapin_delay ; t#u32 blkio_count ; t#u32 swapin_count ; s#timespec freepages_start , freepages_end ; t#u64 freepages_delay ; t#u32 freepages_count ; } 
s#prop_local_single struct prop_local_single { unsigned long events ; unsigned long period ; int shift ; t#spinlock_t lock ; } 
s#latency_record struct latency_record { unsigned long backtrace [ 12 ] ; unsigned int count ; unsigned long time ; unsigned long max ; } 
s##ftrace_ret_stack
s##mem_cgroup
s#memcg_batch_info struct memcg_batch_info { int do_batch ; s#mem_cgroup * memcg ; unsigned long bytes ; unsigned long memsw_bytes ; } 
s#task_struct struct task_struct { volatile long state ; void * stack ; t#atomic_t usage ; unsigned int flags ; unsigned int ptrace ; int lock_depth ; int prio , static_prio , normal_prio ; unsigned int rt_priority ; const s#sched_class * sched_class ; s#sched_entity se ; s#sched_rt_entity rt ; s#hlist_head preempt_notifiers ; unsigned char fpu_counter ; unsigned int btrace_seq ; unsigned int policy ; t#cpumask_t cpus_allowed ; s#sched_info sched_info ; s#list_head tasks ; s#plist_node pushable_tasks ; s#mm_struct * mm , * active_mm ; int exit_state ; int exit_code , exit_signal ; int pdeath_signal ; unsigned int personality ; unsigned did_exec : 1 ; unsigned in_execve : 1 ; unsigned in_iowait : 1 ; unsigned sched_reset_on_fork : 1 ; t#pid_t pid ; t#pid_t tgid ; s#task_struct * real_parent ; s#task_struct * parent ; s#list_head children ; s#list_head sibling ; s#task_struct * group_leader ; s#list_head ptraced ; s#list_head ptrace_entry ; s#bts_context * bts ; s#pid_link pids [ PIDTYPE_MAX ] ; s#list_head thread_group ; s#completion * vfork_done ; int * set_child_tid ; int * clear_child_tid ; t#cputime_t utime , stime , utimescaled , stimescaled ; t#cputime_t gtime ; t#cputime_t prev_utime , prev_stime ; unsigned long nvcsw , nivcsw ; s#timespec start_time ; s#timespec real_start_time ; unsigned long min_flt , maj_flt ; s#task_cputime cputime_expires ; s#list_head cpu_timers [ 3 ] ; const s#cred * real_cred ; const s#cred * cred ; s#mutex cred_guard_mutex ; s#cred * replacement_session_keyring ; char comm [ 16 ] ; int link_count , total_link_count ; s#sysv_sem sysvsem ; unsigned long last_switch_count ; s#thread_struct thread ; s#fs_struct * fs ; s#files_struct * files ; s#nsproxy * nsproxy ; s#signal_struct * signal ; s#sighand_struct * sighand ; t#sigset_t blocked , real_blocked ; t#sigset_t saved_sigmask ; s#sigpending pending ; unsigned long sas_ss_sp ; t#size_t sas_ss_size ; int ( * notifier ) ( void * ) ; void * notifier_data ; t#sigset_t * notifier_mask ; s#audit_context * audit_context ; t#uid_t loginuid ; unsigned int sessionid ; t#seccomp_t seccomp ; s#utrace utrace ; unsigned long utrace_flags ; t#u32 parent_exec_id ; t#u32 self_exec_id ; t#spinlock_t alloc_lock ; s#irqaction * irqaction ; t#spinlock_t pi_lock ; s#plist_head pi_waiters ; s#rt_mutex_waiter * pi_blocked_on ; unsigned int irq_events ; int hardirqs_enabled ; unsigned long hardirq_enable_ip ; unsigned int hardirq_enable_event ; unsigned long hardirq_disable_ip ; unsigned int hardirq_disable_event ; int softirqs_enabled ; unsigned long softirq_disable_ip ; unsigned int softirq_disable_event ; unsigned long softirq_enable_ip ; unsigned int softirq_enable_event ; int hardirq_context ; int softirq_context ; void * journal_info ; s#bio * bio_list , * * bio_tail ; s#reclaim_state * reclaim_state ; s#backing_dev_info * backing_dev_info ; s#io_context * io_context ; unsigned long ptrace_message ; t#siginfo_t * last_siginfo ; s#task_io_accounting ioac ; t#u64 acct_rss_mem1 ; t#u64 acct_vm_mem1 ; t#cputime_t acct_timexpd ; t#nodemask_t mems_allowed ; int cpuset_mem_spread_rotor ; s#css_set * cgroups ; s#list_head cg_list ; s#robust_list_head * robust_list ; s#compat_robust_list_head * compat_robust_list ; s#list_head pi_state_list ; s#futex_pi_state * pi_state_cache ; s#perf_event_context * perf_event_ctxp ; s#mutex perf_event_mutex ; s#list_head perf_event_list ; s#mempolicy * mempolicy ; short il_next ; t#atomic_t fs_excl ; s#rcu_head rcu ; s#pipe_inode_info * splice_pipe ; s#task_delay_info * delays ; s#prop_local_single dirties ; int latency_record_count ; s#latency_record latency_record [ 32 ] ; unsigned long timer_slack_ns ; unsigned long default_timer_slack_ns ; s#list_head * scm_work_list ; int curr_ret_stack ; s#ftrace_ret_stack * ret_stack ; unsigned long long ftrace_timestamp ; t#atomic_t trace_overrun ; t#atomic_t tracing_graph_pause ; unsigned long trace ; unsigned long trace_recursion ; unsigned long stack_start ; s#memcg_batch_info memcg_batch ; } 
t#ctor_fn_t typedef void ( * ctor_fn_t ) ( void ) 
s#module struct module { e#module_state state ; s#list_head list ; char name [ ( 64 - sizeof ( unsigned long ) ) ] ; s#module_kobject mkobj ; s#module_attribute * modinfo_attrs ; const char * version ; const char * srcversion ; s#kobject * holders_dir ; const s#kernel_symbol * syms ; const unsigned long * crcs ; unsigned int num_syms ; s#kernel_param * kp ; unsigned int num_kp ; unsigned int num_gpl_syms ; const s#kernel_symbol * gpl_syms ; const unsigned long * gpl_crcs ; const s#kernel_symbol * unused_syms ; const unsigned long * unused_crcs ; unsigned int num_unused_syms ; unsigned int num_unused_gpl_syms ; const s#kernel_symbol * unused_gpl_syms ; const unsigned long * unused_gpl_crcs ; const s#kernel_symbol * gpl_future_syms ; const unsigned long * gpl_future_crcs ; unsigned int num_gpl_future_syms ; unsigned int num_exentries ; s#exception_table_entry * extable ; int ( * init ) ( void ) ; void * module_init ; void * module_core ; unsigned int init_size , core_size ; unsigned int init_text_size , core_text_size ; void * unwind_info ; s#mod_arch_specific arch ; unsigned int taints ; unsigned num_bugs ; s#list_head bug_list ; s#bug_entry * bug_table ; t#Elf64_Sym * symtab , * core_symtab ; unsigned int num_symtab , core_num_syms ; char * strtab , * core_strtab ; s#module_sect_attrs * sect_attrs ; s#module_notes_attrs * notes_attrs ; void * percpu ; char * args ; s#tracepoint * tracepoints ; unsigned int num_tracepoints ; const char * * trace_bprintk_fmt_start ; unsigned int num_trace_bprintk_fmt ; s#ftrace_event_call * trace_events ; unsigned int num_trace_events ; unsigned long * ftrace_callsites ; unsigned int num_ftrace_callsites ; s#list_head modules_which_use_me ; s#task_struct * waiter ; void ( * exit ) ( void ) ; char * refptr ; t#ctor_fn_t * ctors ; unsigned int num_ctors ; } 
t#__kernel_mode_t typedef unsigned int __kernel_mode_t 
t#mode_t typedef t#__kernel_mode_t mode_t 
s#attribute struct attribute { const char * name ; s#module * owner ; t#mode_t mode ; } 
s#sysfs_ops struct sysfs_ops { t#ssize_t ( * show ) ( s#kobject * , s#attribute * , char * ) ; t#ssize_t ( * store ) ( s#kobject * , s#attribute * , const char * , t#size_t ) ; } 
s#kobj_type struct kobj_type { void ( * release ) ( s#kobject * ) ; s#sysfs_ops * sysfs_ops ; s#attribute * * default_attrs ; } 
s##sysfs_dirent
s#kobject struct kobject { const char * name ; s#list_head entry ; s#kobject * parent ; s#kset * kset ; s#kobj_type * ktype ; s#sysfs_dirent * sd ; s#kref kref ; unsigned int state_initialized : 1 ; unsigned int state_in_sysfs : 1 ; unsigned int state_add_uevent_sent : 1 ; unsigned int state_remove_uevent_sent : 1 ; unsigned int uevent_suppress : 1 ; } 
s#attribute_group struct attribute_group { const char * name ; t#mode_t ( * is_visible ) ( s#kobject * , s#attribute * , int ) ; s#attribute * * attrs ; } 
s#dev_pm_ops struct dev_pm_ops { int ( * prepare ) ( s#device * ) ; void ( * complete ) ( s#device * ) ; int ( * suspend ) ( s#device * ) ; int ( * resume ) ( s#device * ) ; int ( * freeze ) ( s#device * ) ; int ( * thaw ) ( s#device * ) ; int ( * poweroff ) ( s#device * ) ; int ( * restore ) ( s#device * ) ; int ( * suspend_noirq ) ( s#device * ) ; int ( * resume_noirq ) ( s#device * ) ; int ( * freeze_noirq ) ( s#device * ) ; int ( * thaw_noirq ) ( s#device * ) ; int ( * poweroff_noirq ) ( s#device * ) ; int ( * restore_noirq ) ( s#device * ) ; int ( * runtime_suspend ) ( s#device * ) ; int ( * runtime_resume ) ( s#device * ) ; int ( * runtime_idle ) ( s#device * ) ; } 
s#device_type struct device_type { const char * name ; const s#attribute_group * * groups ; int ( * uevent ) ( s#device * , s#kobj_uevent_env * ) ; char * ( * devnode ) ( s#device * , t#mode_t * ) ; void ( * release ) ( s#device * ) ; const s#dev_pm_ops * pm ; } 
s#semaphore struct semaphore { t#spinlock_t lock ; unsigned int count ; s#list_head wait_list ; } 
s#bus_attribute struct bus_attribute { s#attribute attr ; t#ssize_t ( * show ) ( s#bus_type * , char * ) ; t#ssize_t ( * store ) ( s#bus_type * , const char * , t#size_t ) ; } 
s#device_attribute struct device_attribute { s#attribute attr ; t#ssize_t ( * show ) ( s#device * , s#device_attribute * , char * ) ; t#ssize_t ( * store ) ( s#device * , s#device_attribute * , const char * , t#size_t ) ; } 
t#bool typedef _Bool bool 
s#pm_message struct pm_message { int event ; } 
t#pm_message_t typedef s#pm_message pm_message_t 
s##driver_private
s#device_driver struct device_driver { const char * name ; s#bus_type * bus ; s#module * owner ; const char * mod_name ; t#bool suppress_bind_attrs ; int ( * probe ) ( s#device * ) ; int ( * remove ) ( s#device * ) ; void ( * shutdown ) ( s#device * ) ; int ( * suspend ) ( s#device * , t#pm_message_t ) ; int ( * resume ) ( s#device * ) ; const s#attribute_group * * groups ; const s#dev_pm_ops * pm ; s#driver_private * p ; } 
s#driver_attribute struct driver_attribute { s#attribute attr ; t#ssize_t ( * show ) ( s#device_driver * , char * ) ; t#ssize_t ( * store ) ( s#device_driver * , const char * , t#size_t ) ; } 
s##bus_type_private
s#bus_type struct bus_type { const char * name ; s#bus_attribute * bus_attrs ; s#device_attribute * dev_attrs ; s#driver_attribute * drv_attrs ; int ( * match ) ( s#device * , s#device_driver * ) ; int ( * uevent ) ( s#device * , s#kobj_uevent_env * ) ; int ( * probe ) ( s#device * ) ; int ( * remove ) ( s#device * ) ; void ( * shutdown ) ( s#device * ) ; int ( * suspend ) ( s#device * , t#pm_message_t ) ; int ( * resume ) ( s#device * ) ; const s#dev_pm_ops * pm ; s#bus_type_private * p ; } 
e#dpm_state enum dpm_state { DPM_INVALID , DPM_ON , DPM_PREPARING , DPM_RESUMING , DPM_SUSPENDING , DPM_OFF , DPM_OFF_IRQ , } 
e#rpm_request enum rpm_request { RPM_REQ_NONE = 0 , RPM_REQ_IDLE , RPM_REQ_SUSPEND , RPM_REQ_RESUME , } 
e#rpm_status enum rpm_status { RPM_ACTIVE = 0 , RPM_RESUMING , RPM_SUSPENDED , RPM_SUSPENDING , } 
s#dev_pm_info struct dev_pm_info { t#pm_message_t power_state ; unsigned int can_wakeup : 1 ; unsigned int should_wakeup : 1 ; e#dpm_state status ; s#list_head entry ; s#timer_list suspend_timer ; unsigned long timer_expires ; s#work_struct work ; t#wait_queue_head_t wait_queue ; t#spinlock_t lock ; t#atomic_t usage_count ; t#atomic_t child_count ; unsigned int disable_depth : 3 ; unsigned int ignore_children : 1 ; unsigned int idle_notification : 1 ; unsigned int request_pending : 1 ; unsigned int deferred_resume : 1 ; e#rpm_request request ; e#rpm_status runtime_status ; int runtime_error ; } 
s#device_dma_parameters struct device_dma_parameters { unsigned int max_segment_size ; unsigned long segment_boundary_mask ; } 
s##dma_coherent_mem
s##dma_map_ops
s#dev_archdata struct dev_archdata { void * acpi_handle ; s#dma_map_ops * dma_ops ; void * iommu ; } 
s#klist_node struct klist_node { void * n_klist ; s#list_head n_node ; s#kref n_ref ; } 
s#class_attribute struct class_attribute { s#attribute attr ; t#ssize_t ( * show ) ( s#class * , char * ) ; t#ssize_t ( * store ) ( s#class * , const char * , t#size_t ) ; } 
s##class_private
s#class struct class { const char * name ; s#module * owner ; s#class_attribute * class_attrs ; s#device_attribute * dev_attrs ; s#kobject * dev_kobj ; int ( * dev_uevent ) ( s#device * , s#kobj_uevent_env * ) ; char * ( * devnode ) ( s#device * , t#mode_t * ) ; void ( * class_release ) ( s#class * ) ; void ( * dev_release ) ( s#device * ) ; int ( * suspend ) ( s#device * , t#pm_message_t ) ; int ( * resume ) ( s#device * ) ; const s#dev_pm_ops * pm ; s#class_private * p ; } 
s#device struct device { s#device * parent ; s#device_private * p ; s#kobject kobj ; const char * init_name ; s#device_type * type ; s#semaphore sem ; s#bus_type * bus ; s#device_driver * driver ; void * platform_data ; s#dev_pm_info power ; int numa_node ; t#u64 * dma_mask ; t#u64 coherent_dma_mask ; s#device_dma_parameters * dma_parms ; s#list_head dma_pools ; s#dma_coherent_mem * dma_mem ; s#dev_archdata archdata ; t#dev_t devt ; t#spinlock_t devres_lock ; s#list_head devres_head ; s#klist_node knode_class ; s#class * class ; const s#attribute_group * * groups ; void ( * release ) ( s#device * ) ; } 
s#usb_devmap struct usb_devmap { unsigned long devicemap [ 128 / ( 8 * sizeof ( unsigned long ) ) ] ; } 
s##mon_bus
s#usb_bus struct usb_bus { s#device * controller ; int busnum ; const char * bus_name ; t#u8 uses_dma ; t#u8 otg_port ; unsigned is_b_host : 1 ; unsigned b_hnp_enable : 1 ; int devnum_next ; s#usb_devmap devmap ; s#usb_device * root_hub ; s#list_head bus_list ; int bandwidth_allocated ; int bandwidth_int_reqs ; int bandwidth_isoc_reqs ; s#dentry * usbfs_dentry ; s#mon_bus * mon_bus ; int monitored ; } 
t#__u8 typedef unsigned char __u8 
t#__le16 typedef t#__u16 __le16 
s#usb_endpoint_descriptor struct usb_endpoint_descriptor { t#__u8 bLength ; t#__u8 bDescriptorType ; t#__u8 bEndpointAddress ; t#__u8 bmAttributes ; t#__le16 wMaxPacketSize ; t#__u8 bInterval ; t#__u8 bRefresh ; t#__u8 bSynchAddress ; } 
s##ep_device
s#usb_ss_ep_comp_descriptor struct usb_ss_ep_comp_descriptor { t#__u8 bLength ; t#__u8 bDescriptorType ; t#__u8 bMaxBurst ; t#__u8 bmAttributes ; t#__u16 wBytesPerInterval ; } 
s#usb_host_ss_ep_comp struct usb_host_ss_ep_comp { s#usb_ss_ep_comp_descriptor desc ; unsigned char * extra ; int extralen ; } 
s#usb_host_endpoint struct usb_host_endpoint { s#usb_endpoint_descriptor desc ; s#list_head urb_list ; void * hcpriv ; s#ep_device * ep_dev ; s#usb_host_ss_ep_comp * ss_ep_comp ; unsigned char * extra ; int extralen ; int enabled ; } 
s#usb_device_descriptor struct usb_device_descriptor { t#__u8 bLength ; t#__u8 bDescriptorType ; t#__le16 bcdUSB ; t#__u8 bDeviceClass ; t#__u8 bDeviceSubClass ; t#__u8 bDeviceProtocol ; t#__u8 bMaxPacketSize0 ; t#__le16 idVendor ; t#__le16 idProduct ; t#__le16 bcdDevice ; t#__u8 iManufacturer ; t#__u8 iProduct ; t#__u8 iSerialNumber ; t#__u8 bNumConfigurations ; } 
s#usb_config_descriptor struct usb_config_descriptor { t#__u8 bLength ; t#__u8 bDescriptorType ; t#__le16 wTotalLength ; t#__u8 bNumInterfaces ; t#__u8 bConfigurationValue ; t#__u8 iConfiguration ; t#__u8 bmAttributes ; t#__u8 bMaxPower ; } 
s#usb_interface_assoc_descriptor struct usb_interface_assoc_descriptor { t#__u8 bLength ; t#__u8 bDescriptorType ; t#__u8 bFirstInterface ; t#__u8 bInterfaceCount ; t#__u8 bFunctionClass ; t#__u8 bFunctionSubClass ; t#__u8 bFunctionProtocol ; t#__u8 iFunction ; } 
s#usb_interface_descriptor struct usb_interface_descriptor { t#__u8 bLength ; t#__u8 bDescriptorType ; t#__u8 bInterfaceNumber ; t#__u8 bAlternateSetting ; t#__u8 bNumEndpoints ; t#__u8 bInterfaceClass ; t#__u8 bInterfaceSubClass ; t#__u8 bInterfaceProtocol ; t#__u8 iInterface ; } 
s#usb_host_interface struct usb_host_interface { s#usb_interface_descriptor desc ; s#usb_host_endpoint * endpoint ; char * string ; unsigned char * extra ; int extralen ; } 
e#usb_interface_condition enum usb_interface_condition { USB_INTERFACE_UNBOUND = 0 , USB_INTERFACE_BINDING , USB_INTERFACE_BOUND , USB_INTERFACE_UNBINDING , } 
s#usb_interface struct usb_interface { s#usb_host_interface * altsetting ; s#usb_host_interface * cur_altsetting ; unsigned num_altsetting ; s#usb_interface_assoc_descriptor * intf_assoc ; int minor ; e#usb_interface_condition condition ; unsigned is_active : 1 ; unsigned sysfs_files_created : 1 ; unsigned ep_devs_created : 1 ; unsigned unregistering : 1 ; unsigned needs_remote_wakeup : 1 ; unsigned needs_altsetting0 : 1 ; unsigned needs_binding : 1 ; unsigned reset_running : 1 ; s#device dev ; s#device * usb_dev ; t#atomic_t pm_usage_cnt ; s#work_struct reset_ws ; } 
s#usb_interface_cache struct usb_interface_cache { unsigned num_altsetting ; s#kref ref ; s#usb_host_interface altsetting [ 0 ] ; } 
s#usb_host_config struct usb_host_config { s#usb_config_descriptor desc ; char * string ; s#usb_interface_assoc_descriptor * intf_assoc [ 32 / 2 ] ; s#usb_interface * interface [ 32 ] ; s#usb_interface_cache * intf_cache [ 32 ] ; unsigned char * extra ; int extralen ; } 
s##wusb_dev
s#usb_device struct usb_device { int devnum ; char devpath [ 16 ] ; t#u32 route ; e#usb_device_state state ; e#usb_device_speed speed ; s#usb_tt * tt ; int ttport ; unsigned int toggle [ 2 ] ; s#usb_device * parent ; s#usb_bus * bus ; s#usb_host_endpoint ep0 ; s#device dev ; s#usb_device_descriptor descriptor ; s#usb_host_config * config ; s#usb_host_config * actconfig ; s#usb_host_endpoint * ep_in [ 16 ] ; s#usb_host_endpoint * ep_out [ 16 ] ; char * * rawdescriptors ; unsigned short bus_mA ; t#u8 portnum ; t#u8 level ; unsigned can_submit : 1 ; unsigned discon_suspended : 1 ; unsigned persist_enabled : 1 ; unsigned have_langid : 1 ; unsigned authorized : 1 ; unsigned authenticated : 1 ; unsigned wusb : 1 ; int string_langid ; char * product ; char * manufacturer ; char * serial ; s#list_head filelist ; s#dentry * usbfs_dentry ; int maxchild ; s#usb_device * children [ ( 31 ) ] ; int pm_usage_cnt ; t#u32 quirks ; t#atomic_t urbnum ; unsigned long active_duration ; s#delayed_work autosuspend ; s#work_struct autoresume ; s#mutex pm_mutex ; unsigned long last_busy ; int autosuspend_delay ; unsigned long connect_time ; unsigned auto_pm : 1 ; unsigned do_remote_wakeup : 1 ; unsigned reset_resume : 1 ; unsigned autosuspend_disabled : 1 ; unsigned autoresume_disabled : 1 ; unsigned skip_sys_resume : 1 ; s#wusb_dev * wusb_dev ; int slot_id ; } 
t#dma_addr_t typedef t#u64 dma_addr_t 
s##scatterlist
s#usb_sg_request struct usb_sg_request { int status ; t#size_t bytes ; t#spinlock_t lock ; s#usb_device * dev ; int pipe ; s#scatterlist * sg ; int nents ; int entries ; s#urb * * urbs ; int count ; s#completion complete ; } 
t#usb_complete_t typedef void ( * usb_complete_t ) ( s#urb * ) 
s#usb_iso_packet_descriptor struct usb_iso_packet_descriptor { unsigned int offset ; unsigned int length ; unsigned int actual_length ; int status ; } 
s#urb struct urb { s#kref kref ; void * hcpriv ; t#atomic_t use_count ; t#atomic_t reject ; int unlinked ; s#list_head urb_list ; s#list_head anchor_list ; s#usb_anchor * anchor ; s#usb_device * dev ; s#usb_host_endpoint * ep ; unsigned int pipe ; int status ; unsigned int transfer_flags ; void * transfer_buffer ; t#dma_addr_t transfer_dma ; s#usb_sg_request * sg ; int num_sgs ; t#u32 transfer_buffer_length ; t#u32 actual_length ; unsigned char * setup_packet ; t#dma_addr_t setup_dma ; int start_frame ; int number_of_packets ; int interval ; int error_count ; void * context ; t#usb_complete_t complete ; s#usb_iso_packet_descriptor iso_frame_desc [ 0 ] ; } 
s##uhci_qh
t#kdb_hc_keyboard_attach_t typedef int ( * kdb_hc_keyboard_attach_t ) ( int , unsigned int ) 
t#kdb_hc_keyboard_detach_t typedef int ( * kdb_hc_keyboard_detach_t ) ( s#urb * , int ) 
s#kdb_usb_kbd_info struct kdb_usb_kbd_info { s#urb * urb ; unsigned char * buffer ; int ( * poll_func ) ( s#urb * ) ; int poll_ret ; int caps_lock ; s#uhci_qh * qh ; int kdb_hid_event ; s#urb * hid_urb ; t#kdb_hc_keyboard_attach_t kdb_hc_keyboard_attach ; t#kdb_hc_keyboard_detach_t kdb_hc_keyboard_detach ; int ( * kdb_hc_urb_complete ) ( s#urb * ) ; } 
kdb_usb_kbds extern s#kdb_usb_kbd_info kdb_usb_kbds [ 8 ] 
kdb_usb_keyboard_attach extern int kdb_usb_keyboard_attach ( s#urb * , unsigned char * , void * , void * , t#kdb_hc_keyboard_attach_t , t#kdb_hc_keyboard_detach_t , unsigned int , s#urb * ) 
kdb_usb_keyboard_detach extern int kdb_usb_keyboard_detach ( s#urb * ) 

/* arch/x86/kdb/kdba_support.o */
kdba_dumpregs extern int kdba_dumpregs ( s#pt_regs * , const char * , const char * ) 

/* arch/x86/kernel/acpi/boot.o */
acpi_disabled extern int acpi_disabled 
acpi_pci_disabled extern int acpi_pci_disabled 
t#acpi_handle typedef void * acpi_handle 
acpi_map_lsapic int acpi_map_lsapic ( t#acpi_handle , int * ) 
acpi_unmap_lsapic int acpi_unmap_lsapic ( int ) 
acpi_register_ioapic int acpi_register_ioapic ( t#acpi_handle , t#u64 , t#u32 ) 
acpi_unregister_ioapic int acpi_unregister_ioapic ( t#acpi_handle , t#u32 ) 

/* arch/x86/kernel/acpi/cstate.o */
s#acpi_processor_flags struct acpi_processor_flags { t#u8 power : 1 ; t#u8 performance : 1 ; t#u8 throttling : 1 ; t#u8 limit : 1 ; t#u8 bm_control : 1 ; t#u8 bm_check : 1 ; t#u8 has_cst : 1 ; t#u8 power_setup_done : 1 ; t#u8 bm_rld_set : 1 ; } 
acpi_processor_power_init_bm_check void acpi_processor_power_init_bm_check ( s#acpi_processor_flags * , unsigned int ) 
s#acpi_processor_cx_policy struct acpi_processor_cx_policy { t#u32 count ; s#acpi_processor_cx * state ; struct { t#u32 time ; t#u32 ticks ; t#u32 count ; t#u32 bm ; } threshold ; } 
s#acpi_processor_cx struct acpi_processor_cx { t#u8 valid ; t#u8 type ; t#u32 address ; t#u8 entry_method ; t#u8 index ; t#u32 latency ; t#u32 latency_ticks ; t#u32 power ; t#u32 usage ; t#u64 time ; s#acpi_processor_cx_policy promotion ; s#acpi_processor_cx_policy demotion ; char desc [ 32 ] ; } 
s#acpi_power_register struct acpi_power_register { t#u8 descriptor ; t#u16 length ; t#u8 space_id ; t#u8 bit_width ; t#u8 bit_offset ; t#u8 reserved ; t#u64 address ; } 
acpi_processor_ffh_cstate_probe int acpi_processor_ffh_cstate_probe ( unsigned int , s#acpi_processor_cx * , s#acpi_power_register * ) 
acpi_processor_ffh_cstate_enter void acpi_processor_ffh_cstate_enter ( s#acpi_processor_cx * ) 

/* arch/x86/kernel/acpi/processor.o */
s#cpuidle_state struct cpuidle_state { char name [ 16 ] ; char desc [ 32 ] ; void * driver_data ; unsigned int flags ; unsigned int exit_latency ; unsigned int power_usage ; unsigned int target_residency ; unsigned long long usage ; unsigned long long time ; int ( * enter ) ( s#cpuidle_device * , s#cpuidle_state * ) ; } 
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s#cpuidle_state_kobj struct cpuidle_state_kobj { s#cpuidle_state * state ; s#completion kobj_unregister ; s#kobject kobj ; } 
s#cpuidle_device struct cpuidle_device { unsigned int registered : 1 ; unsigned int enabled : 1 ; unsigned int cpu ; int last_residency ; int state_count ; s#cpuidle_state states [ 8 ] ; s#cpuidle_state_kobj * kobjs [ 8 ] ; s#cpuidle_state * last_state ; s#list_head device_list ; s#kobject kobj ; s#completion kobj_unregister ; void * governor_data ; s#cpuidle_state * safe_state ; } 
s#acpi_processor_power struct acpi_processor_power { s#cpuidle_device dev ; s#acpi_processor_cx * state ; unsigned long bm_check_timestamp ; t#u32 default_state ; int count ; s#acpi_processor_cx states [ 8 ] ; int timer_broadcast_on_state ; } 
s#acpi_pct_register struct acpi_pct_register { t#u8 descriptor ; t#u16 length ; t#u8 space_id ; t#u8 bit_width ; t#u8 bit_offset ; t#u8 reserved ; t#u64 address ; } 
t#acpi_integer typedef unsigned long long acpi_integer 
s#acpi_processor_px struct acpi_processor_px { t#acpi_integer core_frequency ; t#acpi_integer power ; t#acpi_integer transition_latency ; t#acpi_integer bus_master_latency ; t#acpi_integer control ; t#acpi_integer status ; } 
s#acpi_psd_package struct acpi_psd_package { t#acpi_integer num_entries ; t#acpi_integer revision ; t#acpi_integer domain ; t#acpi_integer coord_type ; t#acpi_integer num_processors ; } 
t#cpumask_var_t typedef s#cpumask cpumask_var_t [ 1 ] 
s#acpi_processor_performance struct acpi_processor_performance { unsigned int state ; unsigned int platform_limit ; s#acpi_pct_register control_register ; s#acpi_pct_register status_register ; unsigned int state_count ; s#acpi_processor_px * states ; s#acpi_psd_package domain_info ; t#cpumask_var_t shared_cpu_map ; unsigned int shared_type ; } 
s#acpi_processor_tx_tss struct acpi_processor_tx_tss { t#acpi_integer freqpercentage ; t#acpi_integer power ; t#acpi_integer transition_latency ; t#acpi_integer control ; t#acpi_integer status ; } 
s#acpi_tsd_package struct acpi_tsd_package { t#acpi_integer num_entries ; t#acpi_integer revision ; t#acpi_integer domain ; t#acpi_integer coord_type ; t#acpi_integer num_processors ; } 
s#acpi_processor_tx struct acpi_processor_tx { t#u16 power ; t#u16 performance ; } 
s#acpi_processor_throttling struct acpi_processor_throttling { unsigned int state ; unsigned int platform_limit ; s#acpi_pct_register control_register ; s#acpi_pct_register status_register ; unsigned int state_count ; s#acpi_processor_tx_tss * states_tss ; s#acpi_tsd_package domain_info ; t#cpumask_var_t shared_cpu_map ; int ( * acpi_processor_get_throttling ) ( s#acpi_processor * ) ; int ( * acpi_processor_set_throttling ) ( s#acpi_processor * , int , t#bool ) ; t#u32 address ; t#u8 duty_offset ; t#u8 duty_width ; t#u8 tsd_valid_flag ; unsigned int shared_type ; s#acpi_processor_tx states [ 16 ] ; } 
s#acpi_processor_lx struct acpi_processor_lx { int px ; int tx ; } 
s#acpi_processor_limit struct acpi_processor_limit { s#acpi_processor_lx state ; s#acpi_processor_lx thermal ; s#acpi_processor_lx user ; } 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#thermal_cooling_device_ops struct thermal_cooling_device_ops { int ( * get_max_state ) ( s#thermal_cooling_device * , unsigned long * ) ; int ( * get_cur_state ) ( s#thermal_cooling_device * , unsigned long * ) ; int ( * set_cur_state ) ( s#thermal_cooling_device * , unsigned long ) ; } 
s#thermal_cooling_device struct thermal_cooling_device { int id ; char type [ 20 ] ; s#device device ; void * devdata ; s#thermal_cooling_device_ops * ops ; s#list_head node ; } 
t#acpi_object_type typedef t#u32 acpi_object_type 
t#acpi_io_address typedef t#u64 acpi_io_address 
u#acpi_object union acpi_object { t#acpi_object_type type ; struct { t#acpi_object_type type ; t#acpi_integer value ; } integer ; struct { t#acpi_object_type type ; t#u32 length ; char * pointer ; } string ; struct { t#acpi_object_type type ; t#u32 length ; t#u8 * pointer ; } buffer ; struct { t#acpi_object_type type ; t#u32 count ; u#acpi_object * elements ; } package ; struct { t#acpi_object_type type ; t#acpi_object_type actual_type ; t#acpi_handle handle ; } reference ; struct { t#acpi_object_type type ; t#u32 proc_id ; t#acpi_io_address pblk_address ; t#u32 pblk_length ; } processor ; struct { t#acpi_object_type type ; t#u32 system_level ; t#u32 resource_order ; } power_resource ; } 
s#acpi_object_list struct acpi_object_list { t#u32 count ; u#acpi_object * pointer ; } 
s#acpi_processor struct acpi_processor { t#acpi_handle handle ; t#u32 acpi_id ; t#u32 id ; t#u32 pblk ; int performance_platform_limit ; int throttling_platform_limit ; s#acpi_processor_flags flags ; s#acpi_processor_power power ; s#acpi_processor_performance * performance ; s#acpi_processor_throttling throttling ; s#acpi_processor_limit limit ; s#thermal_cooling_device * cdev ; s#acpi_object_list * pdc ; } 
arch_acpi_processor_init_pdc void arch_acpi_processor_init_pdc ( s#acpi_processor * ) 
arch_acpi_processor_cleanup_pdc void arch_acpi_processor_cleanup_pdc ( s#acpi_processor * ) 

/* arch/x86/kernel/apic/apic.o */
per_cpu__x86_cpu_to_apicid extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( t#u16 ) per_cpu__x86_cpu_to_apicid 
per_cpu__x86_bios_cpu_apicid extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( t#u16 ) per_cpu__x86_bios_cpu_apicid 
local_apic_timer_c2_ok extern int local_apic_timer_c2_ok 
setup_APIC_eilvt_ibs extern t#u8 setup_APIC_eilvt_ibs ( t#u8 , t#u8 , t#u8 ) 

/* arch/x86/kernel/apic/io_apic.o */
s#io_apic_irq_attr struct io_apic_irq_attr { int ioapic ; int ioapic_pin ; int trigger ; int polarity ; } 
IO_APIC_get_PCI_irq_vector extern int IO_APIC_get_PCI_irq_vector ( int , int , int , s#io_apic_irq_attr * ) 

/* arch/x86/kernel/apic/nmi.o */
nmi_active extern t#atomic_t nmi_active 
nmi_watchdog extern unsigned int nmi_watchdog 
touch_nmi_watchdog extern void touch_nmi_watchdog ( void ) 

/* arch/x86/kernel/apic/probe_64.o */
s#physid_mask struct physid_mask { unsigned long mask [ ( ( ( 32768 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } 
t#physid_mask_t typedef s#physid_mask physid_mask_t 
s#mpc_table struct mpc_table { char signature [ 4 ] ; unsigned short length ; char spec ; char checksum ; char oem [ 8 ] ; char productid [ 12 ] ; unsigned int oemptr ; unsigned short oemsize ; unsigned short oemcount ; unsigned int lapic ; unsigned int reserved ; } 
s#apic struct apic { char * name ; int ( * probe ) ( void ) ; int ( * acpi_madt_oem_check ) ( char * , char * ) ; int ( * apic_id_registered ) ( void ) ; t#u32 irq_delivery_mode ; t#u32 irq_dest_mode ; const s#cpumask * ( * target_cpus ) ( void ) ; int disable_esr ; int dest_logical ; unsigned long ( * check_apicid_used ) ( t#physid_mask_t , int ) ; unsigned long ( * check_apicid_present ) ( int ) ; void ( * vector_allocation_domain ) ( int , s#cpumask * ) ; void ( * init_apic_ldr ) ( void ) ; t#physid_mask_t ( * ioapic_phys_id_map ) ( t#physid_mask_t ) ; void ( * setup_apic_routing ) ( void ) ; int ( * multi_timer_check ) ( int , int ) ; int ( * apicid_to_node ) ( int ) ; int ( * cpu_to_logical_apicid ) ( int ) ; int ( * cpu_present_to_apicid ) ( int ) ; t#physid_mask_t ( * apicid_to_cpu_present ) ( int ) ; void ( * setup_portio_remap ) ( void ) ; int ( * check_phys_apicid_present ) ( int ) ; void ( * enable_apic_mode ) ( void ) ; int ( * phys_pkg_id ) ( int , int ) ; int ( * mps_oem_check ) ( s#mpc_table * , char * , char * ) ; unsigned int ( * get_apic_id ) ( unsigned long ) ; unsigned long ( * set_apic_id ) ( unsigned int ) ; unsigned long apic_id_mask ; unsigned int ( * cpu_mask_to_apicid ) ( const s#cpumask * ) ; unsigned int ( * cpu_mask_to_apicid_and ) ( const s#cpumask * , const s#cpumask * ) ; void ( * send_IPI_mask ) ( const s#cpumask * , int ) ; void ( * send_IPI_mask_allbutself ) ( const s#cpumask * , int ) ; void ( * send_IPI_allbutself ) ( int ) ; void ( * send_IPI_all ) ( int ) ; void ( * send_IPI_self ) ( int ) ; int ( * wakeup_secondary_cpu ) ( int , unsigned long ) ; int trampoline_phys_low ; int trampoline_phys_high ; void ( * wait_for_init_deassert ) ( t#atomic_t * ) ; void ( * smp_callin_clear_local_apic ) ( void ) ; void ( * inquire_remote_apic ) ( int ) ; t#u32 ( * read ) ( t#u32 ) ; void ( * write ) ( t#u32 , t#u32 ) ; t#u64 ( * icr_read ) ( void ) ; void ( * icr_write ) ( t#u32 , t#u32 ) ; void ( * wait_icr_idle ) ( void ) ; t#u32 ( * safe_wait_icr_idle ) ( void ) ; } 
apic extern s#apic * apic 

/* arch/x86/kernel/apic/x2apic_uv_x.o */
uv_min_hub_revision_id int uv_min_hub_revision_id 
is_uv_system extern int is_uv_system ( void ) 
s##tvec_base
s#uv_scir_s struct uv_scir_s { s#timer_list timer ; unsigned long offset ; unsigned long last ; unsigned long idle_on ; unsigned long idle_off ; unsigned char state ; unsigned char enabled ; } 
s#uv_hub_info_s struct uv_hub_info_s { unsigned long global_mmr_base ; unsigned long gpa_mask ; unsigned int gnode_extra ; unsigned long gnode_upper ; unsigned long lowmem_remap_top ; unsigned long lowmem_remap_base ; unsigned short pnode ; unsigned short pnode_mask ; unsigned short coherency_domain_number ; unsigned short numa_blade_id ; unsigned char blade_processor_id ; unsigned char m_val ; unsigned char n_val ; s#uv_scir_s scir ; } 
per_cpu____uv_hub_info extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( s#uv_hub_info_s ) per_cpu____uv_hub_info 
s#uv_blade_info struct uv_blade_info { unsigned short nr_possible_cpus ; unsigned short nr_online_cpus ; unsigned short pnode ; short memory_nid ; } 
uv_blade_info extern s#uv_blade_info * uv_blade_info 
uv_node_to_blade extern short * uv_node_to_blade 
uv_cpu_to_blade extern short * uv_cpu_to_blade 
uv_possible_blades extern short uv_possible_blades 
sn_rtc_cycles_per_second extern unsigned long sn_rtc_cycles_per_second 

/* arch/x86/kernel/bios_uv.o */
e#uv_bios_cmd enum uv_bios_cmd { UV_BIOS_COMMON , UV_BIOS_GET_SN_INFO , UV_BIOS_FREQ_BASE , UV_BIOS_WATCHLIST_ALLOC , UV_BIOS_WATCHLIST_FREE , UV_BIOS_MEMPROTECT , UV_BIOS_GET_PARTITION_ADDR , UV_BIOS_SET_LEGACY_VGA_TARGET } 
uv_bios_call extern t#s64 uv_bios_call ( e#uv_bios_cmd , t#u64 , t#u64 , t#u64 , t#u64 , t#u64 ) 
sn_partition_id extern long sn_partition_id 
sn_coherency_id extern long sn_coherency_id 
sn_region_size extern long sn_region_size 
system_serial_number extern long system_serial_number 
uv_type extern int uv_type 
uv_bios_get_sn_info extern t#s64 uv_bios_get_sn_info ( int , int * , long * , long * , long * , long * ) 
uv_bios_mq_watchlist_alloc extern int uv_bios_mq_watchlist_alloc ( unsigned long , unsigned int , unsigned long * ) 
uv_bios_mq_watchlist_free extern int uv_bios_mq_watchlist_free ( int , int ) 
e#uv_memprotect enum uv_memprotect { UV_MEMPROT_RESTRICT_ACCESS , UV_MEMPROT_ALLOW_AMO , UV_MEMPROT_ALLOW_RW } 
uv_bios_change_memprotect extern t#s64 uv_bios_change_memprotect ( t#u64 , t#u64 , e#uv_memprotect ) 
uv_bios_reserved_page_pa extern t#s64 uv_bios_reserved_page_pa ( t#u64 , t#u64 * , t#u64 * , t#u64 * ) 
uv_bios_freq_base extern t#s64 uv_bios_freq_base ( t#u64 , t#u64 * ) 
uv_bios_set_legacy_vga_target extern int uv_bios_set_legacy_vga_target ( t#bool , int , int ) 

/* arch/x86/kernel/cpu/amd.o */
amd_get_nb_id extern int amd_get_nb_id ( int ) 

/* arch/x86/kernel/cpu/common.o */
s#gdt_page struct gdt_page { s#desc_struct gdt [ 16 ] ; } 
per_cpu__gdt_page extern __attribute__ ( ( section ( ".data.percpu" ".page_aligned" ) ) ) __typeof__ ( s#gdt_page ) per_cpu__gdt_page 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
t#s32 typedef signed int s32 
t#compat_time_t typedef t#s32 compat_time_t 
s#compat_timespec struct compat_timespec { t#compat_time_t tv_sec ; t#s32 tv_nsec ; } 
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s#cdev struct cdev { s#kobject kobj ; s#module * owner ; const s#file_operations * ops ; s#list_head list ; t#dev_t dev ; unsigned int count ; } 
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s#vm_fault struct vm_fault { unsigned int flags ; unsigned long pgoff ; void * virtual_address ; s#page * page ; } 
s##mempolicy
s#vm_operations_struct struct vm_operations_struct { void ( * open ) ( s#vm_area_struct * ) ; void ( * close ) ( s#vm_area_struct * ) ; int ( * fault ) ( s#vm_area_struct * , s#vm_fault * ) ; int ( * mprotect ) ( s#vm_area_struct * , unsigned int ) ; int ( * page_mkwrite ) ( s#vm_area_struct * , s#vm_fault * ) ; int ( * access ) ( s#vm_area_struct * , unsigned long , void * , int , int ) ; int ( * set_policy ) ( s#vm_area_struct * , s#mempolicy * ) ; s#mempolicy * ( * get_policy ) ( s#vm_area_struct * , unsigned long ) ; int ( * migrate ) ( s#vm_area_struct * , const t#nodemask_t * , const t#nodemask_t * , unsigned long ) ; } 
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
t#tcflag_t typedef unsigned int tcflag_t 
t#cc_t typedef unsigned char cc_t 
t#speed_t typedef unsigned int speed_t 
s#ktermios struct ktermios { t#tcflag_t c_iflag ; t#tcflag_t c_oflag ; t#tcflag_t c_cflag ; t#tcflag_t c_lflag ; t#cc_t c_line ; t#cc_t c_cc [ 19 ] ; t#speed_t c_ispeed ; t#speed_t c_ospeed ; } 
s##proc_dir_entry
s#winsize struct winsize { unsigned short ws_row ; unsigned short ws_col ; unsigned short ws_xpixel ; unsigned short ws_ypixel ; } 
s#termiox struct termiox { t#__u16 x_hflag ; t#__u16 x_cflag ; t#__u16 x_rflag [ 5 ] ; t#__u16 x_sflag ; } 
s#tty_operations struct tty_operations { s#tty_struct * ( * lookup ) ( s#tty_driver * , s#inode * , int ) ; int ( * install ) ( s#tty_driver * , s#tty_struct * ) ; void ( * remove ) ( s#tty_driver * , s#tty_struct * ) ; int ( * open ) ( s#tty_struct * , s#file * ) ; void ( * close ) ( s#tty_struct * , s#file * ) ; void ( * shutdown ) ( s#tty_struct * ) ; void ( * cleanup ) ( s#tty_struct * ) ; int ( * write ) ( s#tty_struct * , const unsigned char * , int ) ; int ( * put_char ) ( s#tty_struct * , unsigned char ) ; void ( * flush_chars ) ( s#tty_struct * ) ; int ( * write_room ) ( s#tty_struct * ) ; int ( * chars_in_buffer ) ( s#tty_struct * ) ; int ( * ioctl ) ( s#tty_struct * , s#file * , unsigned int , unsigned long ) ; long ( * compat_ioctl ) ( s#tty_struct * , s#file * , unsigned int , unsigned long ) ; void ( * set_termios ) ( s#tty_struct * , s#ktermios * ) ; void ( * throttle ) ( s#tty_struct * ) ; void ( * unthrottle ) ( s#tty_struct * ) ; void ( * stop ) ( s#tty_struct * ) ; void ( * start ) ( s#tty_struct * ) ; void ( * hangup ) ( s#tty_struct * ) ; int ( * break_ctl ) ( s#tty_struct * , int ) ; void ( * flush_buffer ) ( s#tty_struct * ) ; void ( * set_ldisc ) ( s#tty_struct * ) ; void ( * wait_until_sent ) ( s#tty_struct * , int ) ; void ( * send_xchar ) ( s#tty_struct * , char ) ; int ( * tiocmget ) ( s#tty_struct * , s#file * ) ; int ( * tiocmset ) ( s#tty_struct * , s#file * , unsigned int , unsigned int ) ; int ( * resize ) ( s#tty_struct * , s#winsize * ) ; int ( * set_termiox ) ( s#tty_struct * , s#termiox * ) ; const s#file_operations * proc_fops ; } 
s#tty_driver struct tty_driver { int magic ; s#kref kref ; s#cdev cdev ; s#module * owner ; const char * driver_name ; const char * name ; int name_base ; int major ; int minor_start ; int minor_num ; int num ; short type ; short subtype ; s#ktermios init_termios ; int flags ; s#proc_dir_entry * proc_entry ; s#tty_driver * other ; s#tty_struct * * ttys ; s#ktermios * * termios ; s#ktermios * * termios_locked ; void * driver_state ; const s#tty_operations * ops ; s#list_head tty_drivers ; } 
s#tty_ldisc_ops struct tty_ldisc_ops { int magic ; char * name ; int num ; int flags ; int ( * open ) ( s#tty_struct * ) ; void ( * close ) ( s#tty_struct * ) ; void ( * flush_buffer ) ( s#tty_struct * ) ; t#ssize_t ( * chars_in_buffer ) ( s#tty_struct * ) ; t#ssize_t ( * read ) ( s#tty_struct * , s#file * , unsigned char * , t#size_t ) ; t#ssize_t ( * write ) ( s#tty_struct * , s#file * , const unsigned char * , t#size_t ) ; int ( * ioctl ) ( s#tty_struct * , s#file * , unsigned int , unsigned long ) ; long ( * compat_ioctl ) ( s#tty_struct * , s#file * , unsigned int , unsigned long ) ; void ( * set_termios ) ( s#tty_struct * , s#ktermios * ) ; unsigned int ( * poll ) ( s#tty_struct * , s#file * , s#poll_table_struct * ) ; int ( * hangup ) ( s#tty_struct * ) ; void ( * receive_buf ) ( s#tty_struct * , const unsigned char * , char * , int ) ; void ( * write_wakeup ) ( s#tty_struct * ) ; s#module * owner ; int refcount ; } 
s#tty_ldisc struct tty_ldisc { s#tty_ldisc_ops * ops ; t#atomic_t users ; } 
s#tty_buffer struct tty_buffer { s#tty_buffer * next ; char * char_buf_ptr ; unsigned char * flag_buf_ptr ; int used ; int size ; int commit ; int read ; unsigned long data [ 0 ] ; } 
s#tty_bufhead struct tty_bufhead { s#delayed_work work ; t#spinlock_t lock ; s#tty_buffer * head ; s#tty_buffer * tail ; s#tty_buffer * free ; int memory_used ; } 
s#tty_port_operations struct tty_port_operations { int ( * carrier_raised ) ( s#tty_port * ) ; void ( * dtr_rts ) ( s#tty_port * , int ) ; void ( * shutdown ) ( s#tty_port * ) ; void ( * drop ) ( s#tty_port * ) ; } 
s#tty_port struct tty_port { s#tty_struct * tty ; const s#tty_port_operations * ops ; t#spinlock_t lock ; int blocked_open ; int count ; t#wait_queue_head_t open_wait ; t#wait_queue_head_t close_wait ; t#wait_queue_head_t delta_msr_wait ; unsigned long flags ; s#mutex mutex ; unsigned char * xmit_buf ; unsigned int close_delay ; unsigned int closing_wait ; int drain_delay ; } 
s#tty_struct struct tty_struct { int magic ; s#kref kref ; s#tty_driver * driver ; const s#tty_operations * ops ; int index ; s#mutex ldisc_mutex ; s#tty_ldisc * ldisc ; s#mutex termios_mutex ; t#spinlock_t ctrl_lock ; s#ktermios * termios , * termios_locked ; s#termiox * termiox ; char name [ 64 ] ; s#pid * pgrp ; s#pid * session ; unsigned long flags ; int count ; s#winsize winsize ; unsigned char stopped : 1 , hw_stopped : 1 , flow_stopped : 1 , packet : 1 ; unsigned char low_latency : 1 , warned : 1 ; unsigned char ctrl_status ; unsigned int receive_room ; s#tty_struct * link ; s#fasync_struct * fasync ; s#tty_bufhead buf ; int alt_speed ; t#wait_queue_head_t write_wait ; t#wait_queue_head_t read_wait ; s#work_struct hangup_work ; void * disc_data ; void * driver_data ; s#list_head tty_files ; unsigned int column ; unsigned char lnext : 1 , erasing : 1 , raw : 1 , real_raw : 1 , icanon : 1 ; unsigned char closing : 1 ; unsigned char echo_overrun : 1 ; unsigned short minimum_to_wake ; unsigned long overrun_time ; int num_overrun ; unsigned long process_char_map [ 256 / ( 8 * sizeof ( unsigned long ) ) ] ; char * read_buf ; int read_head ; int read_tail ; int read_cnt ; unsigned long read_flags [ 4096 / ( 8 * sizeof ( unsigned long ) ) ] ; unsigned char * echo_buf ; unsigned int echo_pos ; unsigned int echo_cnt ; int canon_data ; unsigned long canon_head ; unsigned int canon_column ; s#mutex atomic_read_lock ; s#mutex atomic_write_lock ; s#mutex output_lock ; s#mutex echo_lock ; unsigned char * write_buf ; int write_cnt ; t#spinlock_t read_lock ; s#work_struct SAK_work ; s#tty_port * port ; } 
s#taskstats struct taskstats { t#__u16 version ; t#__u32 ac_exitcode ; t#__u8 ac_flag ; t#__u8 ac_nice ; t#__u64 cpu_count __attribute__ ( ( aligned ( 8 ) ) ) ; t#__u64 cpu_delay_total ; t#__u64 blkio_count ; t#__u64 blkio_delay_total ; t#__u64 swapin_count ; t#__u64 swapin_delay_total ; t#__u64 cpu_run_real_total ; t#__u64 cpu_run_virtual_total ; char ac_comm [ 32 ] ; t#__u8 ac_sched __attribute__ ( ( aligned ( 8 ) ) ) ; t#__u8 ac_pad [ 3 ] ; t#__u32 ac_uid __attribute__ ( ( aligned ( 8 ) ) ) ; t#__u32 ac_gid ; t#__u32 ac_pid ; t#__u32 ac_ppid ; t#__u32 ac_btime ; t#__u64 ac_etime __attribute__ ( ( aligned ( 8 ) ) ) ; t#__u64 ac_utime ; t#__u64 ac_stime ; t#__u64 ac_minflt ; t#__u64 ac_majflt ; t#__u64 coremem ; t#__u64 virtmem ; t#__u64 hiwater_rss ; t#__u64 hiwater_vm ; t#__u64 read_char ; t#__u64 write_char ; t#__u64 read_syscalls ; t#__u64 write_syscalls ; t#__u64 read_bytes ; t#__u64 write_bytes ; t#__u64 cancelled_write_bytes ; t#__u64 nvcsw ; t#__u64 nivcsw ; t#__u64 ac_utimescaled ; t#__u64 ac_stimescaled ; t#__u64 cpu_scaled_run_real_total ; t#__u64 freepages_count ; t#__u64 freepages_delay_total ; } 
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s#reclaim_state struct reclaim_state { unsigned long reclaimed_slab ; } 
s##io_context
s##cgroupfs_root
s#cgroup struct cgroup { unsigned long flags ; t#atomic_t count ; s#list_head sibling ; s#list_head children ; s#cgroup * parent ; s#dentry * dentry ; s#cgroup_subsys_state * subsys [ CGROUP_SUBSYS_COUNT ] ; s#cgroupfs_root * root ; s#cgroup * top_cgroup ; s#list_head css_sets ; s#list_head release_list ; s#list_head pidlists ; s#mutex pidlist_mutex ; s#rcu_head rcu_head ; } 
s##css_id
s#cgroup_subsys_state struct cgroup_subsys_state { s#cgroup * cgroup ; t#atomic_t refcnt ; unsigned long flags ; s#css_id * id ; } 
s#css_set struct css_set { t#atomic_t refcount ; s#hlist_node hlist ; s#list_head tasks ; s#list_head cg_links ; s#cgroup_subsys_state * subsys [ CGROUP_SUBSYS_COUNT ] ; s#rcu_head rcu_head ; } 
s##robust_list_head
t#compat_uptr_t typedef t#u32 compat_uptr_t 
s#compat_robust_list struct compat_robust_list { t#compat_uptr_t next ; } 
t#compat_long_t typedef t#s32 compat_long_t 
s#compat_robust_list_head struct compat_robust_list_head { s#compat_robust_list list ; t#compat_long_t futex_offset ; t#compat_uptr_t list_op_pending ; } 
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
per_cpu__current_task extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( s#task_struct * ) per_cpu__current_task 
per_cpu__kernel_stack extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( unsigned long ) per_cpu__kernel_stack 

/* arch/x86/kernel/cpu/mcheck/mce.o */
s#mce struct mce { t#__u64 status ; t#__u64 misc ; t#__u64 addr ; t#__u64 mcgstatus ; t#__u64 ip ; t#__u64 tsc ; t#__u64 time ; t#__u8 cpuvendor ; t#__u8 inject_flags ; t#__u16 pad ; t#__u32 cpuid ; t#__u8 cs ; t#__u8 bank ; t#__u8 cpu ; t#__u8 finished ; t#__u32 extcpu ; t#__u32 socketid ; t#__u32 apicid ; t#__u64 mcgcap ; t#__u64 aux0 ; t#__u64 aux1 ; } 
mce_cpu_specific_poll extern void ( * mce_cpu_specific_poll ) ( s#mce * ) 
x86_mce_decode_callback extern void ( * x86_mce_decode_callback ) ( s#mce * ) 
per_cpu__injectm extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( s#mce ) per_cpu__injectm 
e#mcp_flags enum mcp_flags { MCP_TIMESTAMP = ( 1 << 0 ) , MCP_UC = ( 1 << 1 ) , MCP_DONTLOG = ( 1 << 2 ) , } 
t#mce_banks_t typedef unsigned long mce_banks_t [ ( ( ( 32 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] 
machine_check_poll void machine_check_poll ( e#mcp_flags , t#mce_banks_t * ) 
do_machine_check void do_machine_check ( s#pt_regs * , long ) 
mce_notify_irq int mce_notify_irq ( void ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s#pollfd struct pollfd { int fd ; short events ; short revents ; } 
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
t#poll_queue_proc typedef void ( * poll_queue_proc ) ( s#file * , t#wait_queue_head_t * , s#poll_table_struct * ) 
s#poll_table_struct struct poll_table_struct { t#poll_queue_proc qproc ; unsigned long key ; } 
mce_chrdev_ops extern s#file_operations mce_chrdev_ops 

/* arch/x86/kernel/cpu/mtrr/generic.o */
s#mtrr_var_range struct mtrr_var_range { t#__u32 base_lo ; t#__u32 base_hi ; t#__u32 mask_lo ; t#__u32 mask_hi ; } 
t#mtrr_type typedef t#__u8 mtrr_type 
s#mtrr_state_type struct mtrr_state_type { s#mtrr_var_range var_ranges [ 256 ] ; t#mtrr_type fixed_ranges [ 88 ] ; unsigned char enabled ; unsigned char have_fixed ; t#mtrr_type def_type ; } 
mtrr_state extern s#mtrr_state_type mtrr_state 

/* arch/x86/kernel/cpu/mtrr/main.o */
mtrr_add extern int mtrr_add ( unsigned long , unsigned long , unsigned int , t#bool ) 
mtrr_del extern int mtrr_del ( int , unsigned long , unsigned long ) 

/* arch/x86/kernel/cpu/perfctr-watchdog.o */
avail_to_resrv_perfctr_nmi_bit extern int avail_to_resrv_perfctr_nmi_bit ( unsigned int ) 
reserve_perfctr_nmi extern int reserve_perfctr_nmi ( unsigned int ) 
release_perfctr_nmi extern void release_perfctr_nmi ( unsigned int ) 
reserve_evntsel_nmi extern int reserve_evntsel_nmi ( unsigned int ) 
release_evntsel_nmi extern void release_evntsel_nmi ( unsigned int ) 

/* arch/x86/kernel/dumpstack.o */
dump_stack extern void dump_stack ( void ) 

/* arch/x86/kernel/dumpstack_64.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s#stacktrace_ops struct stacktrace_ops { void ( * warning ) ( void * , char * ) ; void ( * warning_symbol ) ( void * , char * , unsigned long ) ; void ( * address ) ( void * , unsigned long , int ) ; int ( * stack ) ( void * , char * ) ; } 
dump_trace void dump_trace ( s#task_struct * , s#pt_regs * , unsigned long * , unsigned long , const s#stacktrace_ops * , void * ) 

/* arch/x86/kernel/e820.o */
pci_mem_start extern unsigned long pci_mem_start 
e820_any_mapped extern int e820_any_mapped ( t#u64 , t#u64 , unsigned ) 
e820_all_mapped extern int e820_all_mapped ( t#u64 , t#u64 , unsigned ) 

/* arch/x86/kernel/efi.o */
efi_enabled extern int efi_enabled 
t#efi_table_hdr_t typedef struct { t#u64 signature ; t#u32 revision ; t#u32 headersize ; t#u32 crc32 ; t#u32 reserved ; } efi_table_hdr_t 
t#efi_runtime_services_t typedef struct { t#efi_table_hdr_t hdr ; unsigned long get_time ; unsigned long set_time ; unsigned long get_wakeup_time ; unsigned long set_wakeup_time ; unsigned long set_virtual_address_map ; unsigned long convert_pointer ; unsigned long get_variable ; unsigned long get_next_variable ; unsigned long set_variable ; unsigned long get_next_high_mono_count ; unsigned long reset_system ; } efi_runtime_services_t 
t#efi_system_table_t typedef struct { t#efi_table_hdr_t hdr ; unsigned long fw_vendor ; t#u32 fw_revision ; unsigned long con_in_handle ; unsigned long con_in ; unsigned long con_out_handle ; unsigned long con_out ; unsigned long stderr_handle ; unsigned long stderr ; t#efi_runtime_services_t * runtime ; unsigned long boottime ; unsigned long nr_tables ; unsigned long tables ; } efi_system_table_t 
t#efi_status_t typedef unsigned long efi_status_t 
t#s16 typedef signed short s16 
t#efi_time_t typedef struct { t#u16 year ; t#u8 month ; t#u8 day ; t#u8 hour ; t#u8 minute ; t#u8 second ; t#u8 pad1 ; t#u32 nanosecond ; t#s16 timezone ; t#u8 daylight ; t#u8 pad2 ; } efi_time_t 
t#efi_time_cap_t typedef struct { t#u32 resolution ; t#u32 accuracy ; t#u8 sets_to_zero ; } efi_time_cap_t 
t#efi_get_time_t typedef t#efi_status_t efi_get_time_t ( t#efi_time_t * , t#efi_time_cap_t * ) 
t#efi_set_time_t typedef t#efi_status_t efi_set_time_t ( t#efi_time_t * ) 
t#efi_bool_t typedef t#u8 efi_bool_t 
t#efi_get_wakeup_time_t typedef t#efi_status_t efi_get_wakeup_time_t ( t#efi_bool_t * , t#efi_bool_t * , t#efi_time_t * ) 
t#efi_set_wakeup_time_t typedef t#efi_status_t efi_set_wakeup_time_t ( t#efi_bool_t , t#efi_time_t * ) 
t#efi_char16_t typedef t#u16 efi_char16_t 
t#efi_guid_t typedef struct { t#u8 b [ 16 ] ; } efi_guid_t 
t#efi_get_variable_t typedef t#efi_status_t efi_get_variable_t ( t#efi_char16_t * , t#efi_guid_t * , t#u32 * , unsigned long * , void * ) 
t#efi_get_next_variable_t typedef t#efi_status_t efi_get_next_variable_t ( unsigned long * , t#efi_char16_t * , t#efi_guid_t * ) 
t#efi_set_variable_t typedef t#efi_status_t efi_set_variable_t ( t#efi_char16_t * , t#efi_guid_t * , unsigned long , unsigned long , void * ) 
t#efi_get_next_high_mono_count_t typedef t#efi_status_t efi_get_next_high_mono_count_t ( t#u32 * ) 
t#efi_reset_system_t typedef void efi_reset_system_t ( int , t#efi_status_t , unsigned long , t#efi_char16_t * ) 
t#efi_memory_desc_t typedef struct { t#u32 type ; t#u32 pad ; t#u64 phys_addr ; t#u64 virt_addr ; t#u64 num_pages ; t#u64 attribute ; } efi_memory_desc_t 
t#efi_set_virtual_address_map_t typedef t#efi_status_t efi_set_virtual_address_map_t ( unsigned long , unsigned long , t#u32 , t#efi_memory_desc_t * ) 
s#efi extern struct efi { t#efi_system_table_t * systab ; unsigned long mps ; unsigned long acpi ; unsigned long acpi20 ; unsigned long smbios ; unsigned long sal_systab ; unsigned long boot_info ; unsigned long hcdp ; unsigned long uga ; unsigned long uv_systab ; t#efi_get_time_t * get_time ; t#efi_set_time_t * set_time ; t#efi_get_wakeup_time_t * get_wakeup_time ; t#efi_set_wakeup_time_t * set_wakeup_time ; t#efi_get_variable_t * get_variable ; t#efi_get_next_variable_t * get_next_variable ; t#efi_set_variable_t * set_variable ; t#efi_get_next_high_mono_count_t * get_next_high_mono_count ; t#efi_reset_system_t * reset_system ; t#efi_set_virtual_address_map_t * set_virtual_address_map ; } 
efi extern s#efi efi 
add_efi_memmap extern int add_efi_memmap 

/* arch/x86/kernel/hpet.o */
is_hpet_enabled extern int is_hpet_enabled ( void ) 
t#rtc_irq_handler typedef t#irqreturn_t ( * rtc_irq_handler ) ( int , void * ) 
hpet_register_irq_handler extern int hpet_register_irq_handler ( t#rtc_irq_handler ) 
hpet_unregister_irq_handler extern void hpet_unregister_irq_handler ( t#rtc_irq_handler ) 
hpet_rtc_timer_init extern int hpet_rtc_timer_init ( void ) 
hpet_mask_rtc_irq_bit extern int hpet_mask_rtc_irq_bit ( unsigned long ) 
hpet_set_rtc_irq_bit extern int hpet_set_rtc_irq_bit ( unsigned long ) 
hpet_set_alarm_time extern int hpet_set_alarm_time ( unsigned char , unsigned char , unsigned char ) 
hpet_set_periodic_freq extern int hpet_set_periodic_freq ( unsigned long ) 
hpet_rtc_dropped_irq extern int hpet_rtc_dropped_irq ( void ) 
hpet_rtc_interrupt extern t#irqreturn_t hpet_rtc_interrupt ( int , void * ) 

/* arch/x86/kernel/i387.o */
s#user_i387_struct struct user_i387_struct { unsigned short cwd ; unsigned short swd ; unsigned short twd ; unsigned short fop ; t#__u64 rip ; t#__u64 rdp ; t#__u32 mxcsr ; t#__u32 mxcsr_mask ; t#__u32 st_space [ 32 ] ; t#__u32 xmm_space [ 64 ] ; t#__u32 padding [ 24 ] ; } 
dump_fpu extern int dump_fpu ( s#pt_regs * , s#user_i387_struct * ) 

/* arch/x86/kernel/i8253.o */
i8253_lock extern t#spinlock_t i8253_lock 

/* arch/x86/kernel/init_task.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s#seq_operations struct seq_operations { void * ( * start ) ( s#seq_file * , t#loff_t * ) ; void ( * stop ) ( s#seq_file * , void * ) ; void * ( * next ) ( s#seq_file * , void * , t#loff_t * ) ; int ( * show ) ( s#seq_file * , void * ) ; } 
s#seq_file struct seq_file { char * buf ; t#size_t size ; t#size_t from ; t#size_t count ; t#loff_t index ; t#loff_t read_pos ; t#u64 version ; s#mutex lock ; const s#seq_operations * op ; void * private ; } 
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s#pidmap struct pidmap { t#atomic_t nr_free ; void * page ; } 
s##array_cache
s##kmem_list3
s##bsd_acct_struct
s#pid_namespace struct pid_namespace { s#kref kref ; s#pidmap pidmap [ ( ( ( 0 ? ( ( 1UL ) << 12 ) * 8 : ( sizeof ( long ) > 4 ? 4 * 1024 * 1024 : ( 0 ? 0x1000 : 0x8000 ) ) ) + 8 * ( ( 1UL ) << 12 ) - 1 ) / ( ( 1UL ) << 12 ) / 8 ) ] ; int last_pid ; s#task_struct * child_reaper ; s#kmem_cache * pid_cachep ; unsigned int level ; s#pid_namespace * parent ; s#vfsmount * proc_mnt ; s#bsd_acct_struct * bacct ; } 
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s#user_namespace struct user_namespace { s#kref kref ; s#hlist_head uidhash_table [ ( 1 << ( 0 ? 3 : 8 ) ) ] ; s#user_struct * creator ; s#work_struct destroyer ; } 
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s#new_utsname struct new_utsname { char sysname [ 64 + 1 ] ; char nodename [ 64 + 1 ] ; char release [ 64 + 1 ] ; char version [ 64 + 1 ] ; char machine [ 64 + 1 ] ; char domainname [ 64 + 1 ] ; } 
s#uts_namespace struct uts_namespace { s#kref kref ; s#new_utsname name ; } 
s##ipc_namespace
s##mnt_namespace
t#__kernel_nlink_t typedef unsigned long __kernel_nlink_t 
t#nlink_t typedef t#__kernel_nlink_t nlink_t 
t#__kernel_off_t typedef long __kernel_off_t 
t#off_t typedef t#__kernel_off_t off_t 
t#read_proc_t typedef int ( read_proc_t ) ( char * , char * * , t#off_t , int , int * , void * ) 
t#write_proc_t typedef int ( write_proc_t ) ( s#file * , const char * , unsigned long , void * ) 
s#proc_dir_entry struct proc_dir_entry { unsigned int low_ino ; unsigned short namelen ; const char * name ; t#mode_t mode ; t#nlink_t nlink ; t#uid_t uid ; t#gid_t gid ; t#loff_t size ; const s#inode_operations * proc_iops ; const s#file_operations * proc_fops ; s#proc_dir_entry * next , * parent , * subdir ; void * data ; t#read_proc_t * read_proc ; t#write_proc_t * write_proc ; t#atomic_t count ; int pde_users ; t#spinlock_t pde_unload_lock ; s#completion * pde_unload_completion ; s#list_head pde_openers ; } 
s#ctl_table_set struct ctl_table_set { s#list_head list ; s#ctl_table_set * parent ; int ( * is_seen ) ( s#ctl_table_set * ) ; } 
s##net_device
s##sock
t#proc_handler typedef int proc_handler ( s#ctl_table * , int , void * , t#size_t * , t#loff_t * ) 
t#ctl_handler typedef int ctl_handler ( s#ctl_table * , void * , t#size_t * , void * , t#size_t ) 
s#ctl_table struct ctl_table { int ctl_name ; const char * procname ; void * data ; int maxlen ; t#mode_t mode ; s#ctl_table * child ; s#ctl_table * parent ; t#proc_handler * proc_handler ; t#ctl_handler * strategy ; void * extra1 ; void * extra2 ; } 
s#ctl_table_root struct ctl_table_root { s#list_head root_list ; s#ctl_table_set default_set ; s#ctl_table_set * ( * lookup ) ( s#ctl_table_root * , s#nsproxy * ) ; int ( * permissions ) ( s#ctl_table_root * , s#nsproxy * , s#ctl_table * ) ; } 
s#ctl_table_header struct ctl_table_header { s#ctl_table * ctl_table ; s#list_head ctl_entry ; int used ; int count ; s#completion * unregistering ; s#ctl_table * ctl_table_arg ; s#ctl_table_root * root ; s#ctl_table_set * set ; s#ctl_table * attached_by ; s#ctl_table * attached_to ; s#ctl_table_header * parent ; } 
s##prot_inuse
s#netns_core struct netns_core { s#ctl_table_header * sysctl_hdr ; int sysctl_somaxconn ; s#prot_inuse * inuse ; } 
s#tcp_mib struct tcp_mib { unsigned long mibs [ __TCP_MIB_MAX ] ; } 
s#ipstats_mib struct ipstats_mib { unsigned long mibs [ __IPSTATS_MIB_MAX ] ; } 
s#linux_mib struct linux_mib { unsigned long mibs [ __LINUX_MIB_MAX ] ; } 
s#udp_mib struct udp_mib { unsigned long mibs [ __UDP_MIB_MAX ] ; } 
s#icmp_mib struct icmp_mib { unsigned long mibs [ ( __ICMP_MIB_MAX + 1 ) ] ; } 
s#icmpmsg_mib struct icmpmsg_mib { unsigned long mibs [ 512 ] ; } 
s#icmpv6_mib struct icmpv6_mib { unsigned long mibs [ __ICMP6_MIB_MAX ] ; } 
s#icmpv6msg_mib struct icmpv6msg_mib { unsigned long mibs [ 512 ] ; } 
s#netns_mib struct netns_mib { __typeof__ ( s#tcp_mib ) * tcp_statistics [ 2 ] ; __typeof__ ( s#ipstats_mib ) * ip_statistics [ 2 ] ; __typeof__ ( s#linux_mib ) * net_statistics [ 2 ] ; __typeof__ ( s#udp_mib ) * udp_statistics [ 2 ] ; __typeof__ ( s#udp_mib ) * udplite_statistics [ 2 ] ; __typeof__ ( s#icmp_mib ) * icmp_statistics [ 2 ] ; __typeof__ ( s#icmpmsg_mib ) * icmpmsg_statistics [ 2 ] ; s#proc_dir_entry * proc_net_devsnmp6 ; __typeof__ ( s#udp_mib ) * udp_stats_in6 [ 2 ] ; __typeof__ ( s#udp_mib ) * udplite_stats_in6 [ 2 ] ; __typeof__ ( s#ipstats_mib ) * ipv6_statistics [ 2 ] ; __typeof__ ( s#icmpv6_mib ) * icmpv6_statistics [ 2 ] ; __typeof__ ( s#icmpv6msg_mib ) * icmpv6msg_statistics [ 2 ] ; } 
s#netns_packet struct netns_packet { t#rwlock_t sklist_lock ; s#hlist_head sklist ; } 
s#netns_unix struct netns_unix { int sysctl_max_dgram_qlen ; s#ctl_table_header * ctl ; } 
s##ipv4_devconf
s##fib_rules_ops
s#mem_reserve struct mem_reserve { s#mem_reserve * parent ; s#list_head children ; s#list_head siblings ; const char * name ; long pages ; long limit ; long usage ; t#spinlock_t lock ; t#wait_queue_head_t waitqueue ; } 
s#netns_frags struct netns_frags { int nqueues ; t#atomic_t mem ; s#list_head lru_list ; int timeout ; int high_thresh ; int low_thresh ; s#mutex lock ; s#mem_reserve reserve ; } 
s##xt_table
s##mfc_cache
s##vif_device
s#netns_ipv4 struct netns_ipv4 { s#ctl_table_header * forw_hdr ; s#ctl_table_header * frags_hdr ; s#ctl_table_header * ipv4_hdr ; s#ctl_table_header * route_hdr ; s#ipv4_devconf * devconf_all ; s#ipv4_devconf * devconf_dflt ; s#fib_rules_ops * rules_ops ; s#hlist_head * fib_table_hash ; s#sock * fibnl ; s#sock * * icmp_sk ; s#sock * tcp_sock ; s#netns_frags frags ; s#xt_table * iptable_filter ; s#xt_table * iptable_mangle ; s#xt_table * iptable_raw ; s#xt_table * arptable_filter ; s#xt_table * iptable_security ; s#xt_table * nat_table ; s#hlist_head * nat_bysource ; unsigned int nat_htable_size ; int nat_vmalloced ; int sysctl_icmp_echo_ignore_all ; int sysctl_icmp_echo_ignore_broadcasts ; int sysctl_icmp_ignore_bogus_error_responses ; int sysctl_icmp_ratelimit ; int sysctl_icmp_ratemask ; int sysctl_icmp_errors_use_inbound_ifaddr ; int sysctl_rt_cache_rebuild_count ; int current_rt_cache_rebuild_count ; s#timer_list rt_secret_timer ; t#atomic_t rt_genid ; s#sock * mroute_sk ; s#mfc_cache * * mfc_cache_array ; s#vif_device * vif_table ; int maxvif ; t#atomic_t cache_resolve_queue_len ; int mroute_do_assert ; int mroute_do_pim ; int mroute_reg_vif_num ; } 
s#netns_sysctl_ipv6 struct netns_sysctl_ipv6 { s#ctl_table_header * table ; s#ctl_table_header * frags_hdr ; int bindv6only ; int flush_delay ; int ip6_rt_max_size ; int ip6_rt_gc_min_interval ; int ip6_rt_gc_timeout ; int ip6_rt_gc_interval ; int ip6_rt_gc_elasticity ; int ip6_rt_mtu_expires ; int ip6_rt_min_advmss ; int icmpv6_time ; s#mutex ip6_rt_lock ; } 
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
t#__be16 typedef t#__u16 __be16 
s##dst_entry
s##sec_path
t#__wsum typedef t#__u32 __wsum 
s#nf_conntrack struct nf_conntrack { t#atomic_t use ; } 
s#nf_bridge_info struct nf_bridge_info { t#atomic_t use ; s#net_device * physindev ; s#net_device * physoutdev ; unsigned int mask ; unsigned long data [ 32 / sizeof ( unsigned long ) ] ; } 
t#dma_cookie_t typedef t#s32 dma_cookie_t 
t#sk_buff_data_t typedef unsigned int sk_buff_data_t 
s#sk_buff struct sk_buff { s#sk_buff * next ; s#sk_buff * prev ; s#sock * sk ; t#ktime_t tstamp ; s#net_device * dev ; unsigned long _skb_dst ; s#sec_path * sp ; char cb [ 48 ] ; unsigned int len , data_len ; t#__u16 mac_len , hdr_len ; union { t#__wsum csum ; struct { t#__u16 csum_start ; t#__u16 csum_offset ; } ; } ; t#__u32 priority ; int flags1_begin [ 0 ] ; ; t#__u8 local_df : 1 , cloned : 1 , ip_summed : 2 , nohdr : 1 , nfctinfo : 3 ; t#__u8 pkt_type : 3 , fclone : 2 , ipvs_property : 1 , peeked : 1 , nf_trace : 1 ; t#__be16 protocol : 16 ; int flags1_end [ 0 ] ; ; void ( * destructor ) ( s#sk_buff * ) ; s#nf_conntrack * nfct ; s#sk_buff * nfct_reasm ; s#nf_bridge_info * nf_bridge ; int iif ; t#__u16 tc_index ; t#__u16 tc_verd ; int flags2_begin [ 0 ] ; ; t#__u16 queue_mapping : 16 ; t#__u8 ndisc_nodetype : 2 ; t#__u8 emergency : 1 ; int flags2_end [ 0 ] ; ; t#dma_cookie_t dma_cookie ; t#__u32 secmark ; t#__u32 mark ; t#__u16 vlan_tci ; t#sk_buff_data_t transport_header ; t#sk_buff_data_t network_header ; t#sk_buff_data_t mac_header ; t#sk_buff_data_t tail ; t#sk_buff_data_t end ; unsigned char * head , * data ; unsigned int truesize ; t#atomic_t users ; } 
s#dst_ops struct dst_ops { unsigned short family ; t#__be16 protocol ; unsigned gc_thresh ; int ( * gc ) ( s#dst_ops * ) ; s#dst_entry * ( * check ) ( s#dst_entry * , t#__u32 ) ; void ( * destroy ) ( s#dst_entry * ) ; void ( * ifdown ) ( s#dst_entry * , s#net_device * , int ) ; s#dst_entry * ( * negative_advice ) ( s#dst_entry * ) ; void ( * link_failure ) ( s#sk_buff * ) ; void ( * update_pmtu ) ( s#dst_entry * , t#u32 ) ; int ( * local_out ) ( s#sk_buff * ) ; t#atomic_t entries ; s#kmem_cache * kmem_cachep ; } 
s#netns_ipv6 struct netns_ipv6 { s#netns_sysctl_ipv6 sysctl ; s#ipv6_devconf * devconf_all ; s#ipv6_devconf * devconf_dflt ; s#netns_frags frags ; s#xt_table * ip6table_filter ; s#xt_table * ip6table_mangle ; s#xt_table * ip6table_raw ; s#xt_table * ip6table_security ; s#rt6_info * ip6_null_entry ; s#rt6_statistics * rt6_stats ; s#timer_list ip6_fib_timer ; s#hlist_head * fib_table_hash ; s#fib6_table * fib6_main_tbl ; s#dst_ops ip6_dst_ops ; unsigned int ip6_rt_gc_expire ; unsigned long ip6_rt_last_gc ; s#rt6_info * ip6_prohibit_entry ; s#rt6_info * ip6_blk_hole_entry ; s#fib6_table * fib6_local_tbl ; s#fib_rules_ops * fib6_rules_ops ; s#sock * * icmp_sk ; s#sock * ndisc_sk ; s#sock * tcp_sk ; s#sock * igmp_sk ; s#mem_reserve ip6_rt_reserve ; } 
s#netns_dccp struct netns_dccp { s#sock * v4_ctl_sk ; s#sock * v6_ctl_sk ; } 
s##ebt_table
s#netns_xt struct netns_xt { s#list_head tables [ NFPROTO_NUMPROTO ] ; s#ebt_table * broute_table ; s#ebt_table * frame_filter ; s#ebt_table * frame_nat ; } 
s#hlist_nulls_node struct hlist_nulls_node { s#hlist_nulls_node * next , * * pprev ; } 
s#hlist_nulls_head struct hlist_nulls_head { s#hlist_nulls_node * first ; } 
s##ip_conntrack_stat
s#netns_ct struct netns_ct { t#atomic_t count ; unsigned int expect_count ; unsigned int htable_size ; s#kmem_cache * nf_conntrack_cachep ; s#hlist_nulls_head * hash ; s#hlist_head * expect_hash ; s#hlist_nulls_head unconfirmed ; s#hlist_nulls_head dying ; s#ip_conntrack_stat * stat ; int sysctl_events ; unsigned int sysctl_events_retry_timeout ; int sysctl_acct ; int sysctl_checksum ; unsigned int sysctl_log_invalid ; s#ctl_table_header * sysctl_header ; s#ctl_table_header * acct_sysctl_header ; s#ctl_table_header * event_sysctl_header ; int hash_vmalloc ; int expect_vmalloc ; char * slabname ; } 
s#xfrm_policy_hash struct xfrm_policy_hash { s#hlist_head * table ; unsigned int hmask ; } 
s#netns_xfrm struct netns_xfrm { s#list_head state_all ; s#hlist_head * state_bydst ; s#hlist_head * state_bysrc ; s#hlist_head * state_byspi ; unsigned int state_hmask ; unsigned int state_num ; s#work_struct state_hash_work ; s#hlist_head state_gc_list ; s#work_struct state_gc_work ; t#wait_queue_head_t km_waitq ; s#list_head policy_all ; s#hlist_head * policy_byidx ; unsigned int policy_idx_hmask ; s#hlist_head policy_inexact [ XFRM_POLICY_MAX * 2 ] ; s#xfrm_policy_hash policy_bydst [ XFRM_POLICY_MAX * 2 ] ; unsigned int policy_count [ XFRM_POLICY_MAX * 2 ] ; s#work_struct policy_hash_work ; s#sock * nlsk ; t#u32 sysctl_aevent_etime ; t#u32 sysctl_aevent_rseqth ; int sysctl_larval_drop ; t#u32 sysctl_acq_expires ; s#ctl_table_header * sysctl_hdr ; } 
s#sk_buff_head struct sk_buff_head { s#sk_buff * next ; s#sk_buff * prev ; t#__u32 qlen ; t#spinlock_t lock ; } 
s##net_generic
s#net struct net { t#atomic_t count ; s#list_head list ; s#work_struct work ; s#proc_dir_entry * proc_net ; s#proc_dir_entry * proc_net_stat ; s#ctl_table_set sysctls ; s#net_device * loopback_dev ; s#list_head dev_base_head ; s#hlist_head * dev_name_head ; s#hlist_head * dev_index_head ; s#list_head rules_ops ; t#spinlock_t rules_mod_lock ; s#sock * rtnl ; s#sock * genl_sock ; s#netns_core core ; s#netns_mib mib ; s#netns_packet packet ; s#netns_unix unx ; s#netns_ipv4 ipv4 ; s#netns_ipv6 ipv6 ; s#netns_dccp dccp ; s#netns_xt xt ; s#netns_ct ct ; s#netns_xfrm xfrm ; s#sk_buff_head wext_nlevents ; s#net_generic * gen ; } 
s#nsproxy struct nsproxy { t#atomic_t count ; s#uts_namespace * uts_ns ; s#ipc_namespace * ipc_ns ; s#mnt_namespace * mnt_ns ; s#pid_namespace * pid_ns ; s#net * net_ns ; } 
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s#ftrace_ret_stack struct ftrace_ret_stack { unsigned long ret ; unsigned long func ; unsigned long long calltime ; unsigned long long subtime ; unsigned long fp ; } 
s##mem_cgroup
init_task extern s#task_struct init_task 

/* arch/x86/kernel/io_delay.o */
native_io_delay extern void native_io_delay ( void ) 

/* arch/x86/kernel/irq.o */
vector_used_by_percpu_irq extern int vector_used_by_percpu_irq ( unsigned int ) 

/* arch/x86/kernel/irq_64.o */
t#irq_cpustat_t typedef struct { unsigned int __softirq_pending ; unsigned int __nmi_count ; unsigned int irq0_irqs ; unsigned int apic_timer_irqs ; unsigned int irq_spurious_count ; unsigned int x86_platform_ipis ; unsigned int apic_perf_irqs ; unsigned int apic_pending_irqs ; unsigned int irq_resched_count ; unsigned int irq_call_count ; unsigned int irq_tlb_count ; unsigned int irq_thermal_count ; unsigned int irq_threshold_count ; } __attribute__ ( ( __aligned__ ( ( 1 << ( 7 ) ) ) ) ) irq_cpustat_t 
per_cpu__irq_stat extern __attribute__ ( ( section ( ".data.percpu" ".shared_aligned" ) ) ) __typeof__ ( t#irq_cpustat_t ) per_cpu__irq_stat 
per_cpu__irq_regs extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( s#pt_regs * ) per_cpu__irq_regs 

/* arch/x86/kernel/k8.o */
num_k8_northbridges extern int num_k8_northbridges 
t#kernel_ulong_t typedef unsigned long kernel_ulong_t 
s#pci_device_id struct pci_device_id { t#__u32 vendor , device ; t#__u32 subvendor , subdevice ; t#__u32 class , class_mask ; t#kernel_ulong_t driver_data ; } 
k8_nb_ids extern s#pci_device_id k8_nb_ids [ ] 
t#phys_addr_t typedef t#u64 phys_addr_t 
t#resource_size_t typedef t#phys_addr_t resource_size_t 
s#resource struct resource { t#resource_size_t start ; t#resource_size_t end ; const char * name ; unsigned long flags ; s#resource * parent , * sibling , * child ; } 
s#pci_ops struct pci_ops { int ( * read ) ( s#pci_bus * , unsigned int , int , int , t#u32 * ) ; int ( * write ) ( s#pci_bus * , unsigned int , int , int , t#u32 ) ; } 
s##proc_dir_entry
t#pci_bus_flags_t typedef unsigned short pci_bus_flags_t 
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
e#dma_data_direction enum dma_data_direction { DMA_BIDIRECTIONAL = 0 , DMA_TO_DEVICE = 1 , DMA_FROM_DEVICE = 2 , DMA_NONE = 3 , } 
s#dma_attrs struct dma_attrs { unsigned long flags [ ( ( ( DMA_ATTR_MAX ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } 
s#scatterlist struct scatterlist { unsigned long page_link ; unsigned int offset ; unsigned int length ; t#dma_addr_t dma_address ; unsigned int dma_length ; } 
s#dma_map_ops struct dma_map_ops { void * ( * alloc_coherent ) ( s#device * , t#size_t , t#dma_addr_t * , t#gfp_t ) ; void ( * free_coherent ) ( s#device * , t#size_t , void * , t#dma_addr_t ) ; t#dma_addr_t ( * map_page ) ( s#device * , s#page * , unsigned long , t#size_t , e#dma_data_direction , s#dma_attrs * ) ; void ( * unmap_page ) ( s#device * , t#dma_addr_t , t#size_t , e#dma_data_direction , s#dma_attrs * ) ; int ( * map_sg ) ( s#device * , s#scatterlist * , int , e#dma_data_direction , s#dma_attrs * ) ; void ( * unmap_sg ) ( s#device * , s#scatterlist * , int , e#dma_data_direction , s#dma_attrs * ) ; void ( * sync_single_for_cpu ) ( s#device * , t#dma_addr_t , t#size_t , e#dma_data_direction ) ; void ( * sync_single_for_device ) ( s#device * , t#dma_addr_t , t#size_t , e#dma_data_direction ) ; void ( * sync_single_range_for_cpu ) ( s#device * , t#dma_addr_t , unsigned long , t#size_t , e#dma_data_direction ) ; void ( * sync_single_range_for_device ) ( s#device * , t#dma_addr_t , unsigned long , t#size_t , e#dma_data_direction ) ; void ( * sync_sg_for_cpu ) ( s#device * , s#scatterlist * , int , e#dma_data_direction ) ; void ( * sync_sg_for_device ) ( s#device * , s#scatterlist * , int , e#dma_data_direction ) ; int ( * mapping_error ) ( s#device * , t#dma_addr_t ) ; int ( * dma_supported ) ( s#device * , t#u64 ) ; int ( * set_dma_mask ) ( s#device * , t#u64 ) ; int is_phys ; } 
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s#bin_attribute struct bin_attribute { s#attribute attr ; t#size_t size ; void * private ; t#ssize_t ( * read ) ( s#kobject * , s#bin_attribute * , char * , t#loff_t , t#size_t ) ; t#ssize_t ( * write ) ( s#kobject * , s#bin_attribute * , char * , t#loff_t , t#size_t ) ; int ( * mmap ) ( s#kobject * , s#bin_attribute * , s#vm_area_struct * ) ; } 
s#pci_bus struct pci_bus { s#list_head node ; s#pci_bus * parent ; s#list_head children ; s#list_head devices ; s#pci_dev * self ; s#list_head slots ; s#resource * resource [ 4 ] ; s#list_head resources ; s#pci_ops * ops ; void * sysdata ; s#proc_dir_entry * procdir ; unsigned char number ; unsigned char primary ; unsigned char secondary ; unsigned char subordinate ; char name [ 48 ] ; unsigned short bridge_ctl ; t#pci_bus_flags_t bus_flags ; s#device * bridge ; s#device dev ; s#bin_attribute * legacy_io ; s#bin_attribute * legacy_mem ; unsigned int is_added : 1 ; } 
s##hotplug_slot
s#pci_slot struct pci_slot { s#pci_bus * bus ; s#list_head list ; s#hotplug_slot * hotplug ; unsigned char number ; s#kobject kobj ; } 
t#pci_ers_result_t typedef unsigned int pci_ers_result_t 
e#pci_channel_state enum pci_channel_state { pci_channel_io_normal = ( pci_channel_state_t ) 1 , pci_channel_io_frozen = ( pci_channel_state_t ) 2 , pci_channel_io_perm_failure = ( pci_channel_state_t ) 3 , } 
s#pci_error_handlers struct pci_error_handlers { t#pci_ers_result_t ( * error_detected ) ( s#pci_dev * , e#pci_channel_state ) ; t#pci_ers_result_t ( * mmio_enabled ) ( s#pci_dev * ) ; t#pci_ers_result_t ( * link_reset ) ( s#pci_dev * ) ; t#pci_ers_result_t ( * slot_reset ) ( s#pci_dev * ) ; void ( * resume ) ( s#pci_dev * ) ; } 
s#pci_dynids struct pci_dynids { t#spinlock_t lock ; s#list_head list ; } 
s#pci_driver struct pci_driver { s#list_head node ; char * name ; const s#pci_device_id * id_table ; int ( * probe ) ( s#pci_dev * , const s#pci_device_id * ) ; void ( * remove ) ( s#pci_dev * ) ; int ( * suspend ) ( s#pci_dev * , t#pm_message_t ) ; int ( * suspend_late ) ( s#pci_dev * , t#pm_message_t ) ; int ( * resume_early ) ( s#pci_dev * ) ; int ( * resume ) ( s#pci_dev * ) ; void ( * shutdown ) ( s#pci_dev * ) ; s#pci_error_handlers * err_handler ; s#device_driver driver ; s#pci_dynids dynids ; } 
t#pci_power_t typedef int pci_power_t 
s##pcie_link_state
t#pci_channel_state_t typedef unsigned int pci_channel_state_t 
t#pci_dev_flags_t typedef unsigned short pci_dev_flags_t 
s##pci_vpd
s##pci_sriov
s##pci_ats
s#pci_dev struct pci_dev { s#list_head bus_list ; s#pci_bus * bus ; s#pci_bus * subordinate ; void * sysdata ; s#proc_dir_entry * procent ; s#pci_slot * slot ; unsigned int devfn ; unsigned short vendor ; unsigned short device ; unsigned short subsystem_vendor ; unsigned short subsystem_device ; unsigned int class ; t#u8 revision ; t#u8 hdr_type ; t#u8 pcie_type ; t#u8 rom_base_reg ; t#u8 pin ; s#pci_driver * driver ; t#u64 dma_mask ; s#device_dma_parameters dma_parms ; t#pci_power_t current_state ; int pm_cap ; unsigned int pme_support : 5 ; unsigned int d1_support : 1 ; unsigned int d2_support : 1 ; unsigned int no_d1d2 : 1 ; unsigned int wakeup_prepared : 1 ; s#pcie_link_state * link_state ; t#pci_channel_state_t error_state ; s#device dev ; int cfg_size ; unsigned int irq ; s#resource resource [ DEVICE_COUNT_RESOURCE ] ; unsigned int transparent : 1 ; unsigned int multifunction : 1 ; unsigned int is_added : 1 ; unsigned int is_busmaster : 1 ; unsigned int no_msi : 1 ; unsigned int block_ucfg_access : 1 ; unsigned int broken_parity_status : 1 ; unsigned int irq_reroute_variant : 2 ; unsigned int msi_enabled : 1 ; unsigned int msix_enabled : 1 ; unsigned int ari_enabled : 1 ; unsigned int is_managed : 1 ; unsigned int is_pcie : 1 ; unsigned int needs_freset : 1 ; unsigned int state_saved : 1 ; unsigned int is_physfn : 1 ; unsigned int is_virtfn : 1 ; unsigned int reset_fn : 1 ; unsigned int is_hotplug_bridge : 1 ; t#pci_dev_flags_t dev_flags ; t#atomic_t enable_cnt ; t#u32 saved_config_space [ 16 ] ; s#hlist_head saved_cap_space ; s#bin_attribute * rom_attr ; int rom_attr_enabled ; s#bin_attribute * res_attr [ DEVICE_COUNT_RESOURCE ] ; s#bin_attribute * res_attr_wc [ DEVICE_COUNT_RESOURCE ] ; s#list_head msi_list ; s#pci_vpd * vpd ; union { s#pci_sriov * sriov ; s#pci_dev * physfn ; } ; s#pci_ats * ats ; } 
k8_northbridges extern s#pci_dev * * k8_northbridges 
cache_k8_northbridges extern int cache_k8_northbridges ( void ) 
k8_flush_garts extern void k8_flush_garts ( void ) 

/* arch/x86/kernel/kdebugfs.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kiocb
s##iovec
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
arch_debugfs_dir extern s#dentry * arch_debugfs_dir 

/* arch/x86/kernel/microcode_core.o */
s#cpu_signature struct cpu_signature { unsigned int sig ; unsigned int pf ; unsigned int rev ; } 
s#ucode_cpu_info struct ucode_cpu_info { s#cpu_signature cpu_sig ; int valid ; void * mc ; } 
ucode_cpu_info extern s#ucode_cpu_info ucode_cpu_info [ ] 

/* arch/x86/kernel/paravirt.o */
s#pv_info struct pv_info { unsigned int kernel_rpl ; int shared_kernel_pmd ; int paravirt_enabled ; const char * name ; } 
pv_info extern s#pv_info pv_info 
s#pv_time_ops struct pv_time_ops { unsigned long long ( * sched_clock ) ( void ) ; unsigned long ( * get_tsc_khz ) ( void ) ; } 
pv_time_ops extern s#pv_time_ops pv_time_ops 

/* arch/x86/kernel/pci-dma.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
dma_ops extern s#dma_map_ops * dma_ops 
bad_dma_address extern t#dma_addr_t bad_dma_address 
x86_dma_fallback_dev extern s#device x86_dma_fallback_dev 
dma_set_mask extern int dma_set_mask ( s#device * , t#u64 ) 
dma_supported extern int dma_supported ( s#device * , t#u64 ) 

/* arch/x86/kernel/process.o */
idle_halt extern unsigned long idle_halt 
idle_nomwait extern unsigned long idle_nomwait 
boot_option_idle_override extern unsigned long boot_option_idle_override 
pm_idle extern void ( * pm_idle ) ( void ) 
cpu_idle_wait void cpu_idle_wait ( void ) 

/* arch/x86/kernel/process_64.o */
s#notifier_block struct notifier_block { int ( * notifier_call ) ( s#notifier_block * , unsigned long , void * ) ; s#notifier_block * next ; int priority ; } 
idle_notifier_register void idle_notifier_register ( s#notifier_block * ) 
idle_notifier_unregister void idle_notifier_unregister ( s#notifier_block * ) 
start_thread extern void start_thread ( s#pt_regs * , unsigned long , unsigned long ) 

/* arch/x86/kernel/reboot.o */
pm_power_off extern void ( * pm_power_off ) ( void ) 

/* arch/x86/kernel/rtc.o */
rtc_lock extern t#spinlock_t rtc_lock 
rtc_cmos_read unsigned char rtc_cmos_read ( unsigned char ) 
rtc_cmos_write void rtc_cmos_write ( unsigned char , unsigned char ) 
native_read_tsc extern unsigned long long native_read_tsc ( void ) 

/* arch/x86/kernel/setup.o */
s#cpuinfo_x86 struct cpuinfo_x86 { t#__u8 x86 ; t#__u8 x86_vendor ; t#__u8 x86_model ; t#__u8 x86_mask ; int x86_tlbsize ; t#__u8 x86_virt_bits ; t#__u8 x86_phys_bits ; t#__u8 x86_coreid_bits ; t#__u32 extended_cpuid_level ; int cpuid_level ; t#__u32 x86_capability [ 9 ] ; char x86_vendor_id [ 16 ] ; char x86_model_id [ 64 ] ; int x86_cache_size ; int x86_cache_alignment ; int x86_power ; unsigned long loops_per_jiffy ; t#cpumask_var_t llc_shared_map ; t#u16 x86_max_cores ; t#u16 apicid ; t#u16 initial_apicid ; t#u16 x86_clflush_size ; t#u16 booted_cores ; t#u16 phys_proc_id ; t#u16 cpu_core_id ; t#u16 cpu_index ; unsigned int x86_hyper_vendor ; } 
boot_cpu_data extern s#cpuinfo_x86 boot_cpu_data 
s#screen_info struct screen_info { t#__u8 orig_x ; t#__u8 orig_y ; t#__u16 ext_mem_k ; t#__u16 orig_video_page ; t#__u8 orig_video_mode ; t#__u8 orig_video_cols ; t#__u16 unused2 ; t#__u16 orig_video_ega_bx ; t#__u16 unused3 ; t#__u8 orig_video_lines ; t#__u8 orig_video_isVGA ; t#__u16 orig_video_points ; t#__u16 lfb_width ; t#__u16 lfb_height ; t#__u16 lfb_depth ; t#__u32 lfb_base ; t#__u32 lfb_size ; t#__u16 cl_magic , cl_offset ; t#__u16 lfb_linelength ; t#__u8 red_size ; t#__u8 red_pos ; t#__u8 green_size ; t#__u8 green_pos ; t#__u8 blue_size ; t#__u8 blue_pos ; t#__u8 rsvd_size ; t#__u8 rsvd_pos ; t#__u16 vesapm_seg ; t#__u16 vesapm_off ; t#__u16 pages ; t#__u16 vesa_attributes ; t#__u32 capabilities ; t#__u8 _reserved [ 6 ] ; } 
screen_info extern s#screen_info screen_info 
s#edid_info struct edid_info { unsigned char dummy [ 128 ] ; } 
edid_info extern s#edid_info edid_info 
s#edd_device_params struct edd_device_params { t#__u16 length ; t#__u16 info_flags ; t#__u32 num_default_cylinders ; t#__u32 num_default_heads ; t#__u32 sectors_per_track ; t#__u64 number_of_sectors ; t#__u16 bytes_per_sector ; t#__u32 dpte_ptr ; t#__u16 key ; t#__u8 device_path_info_length ; t#__u8 reserved2 ; t#__u16 reserved3 ; t#__u8 host_bus_type [ 4 ] ; t#__u8 interface_type [ 8 ] ; union { struct { t#__u16 base_address ; t#__u16 reserved1 ; t#__u32 reserved2 ; } __attribute__ ( ( packed ) ) isa ; struct { t#__u8 bus ; t#__u8 slot ; t#__u8 function ; t#__u8 channel ; t#__u32 reserved ; } __attribute__ ( ( packed ) ) pci ; struct { t#__u64 reserved ; } __attribute__ ( ( packed ) ) ibnd ; struct { t#__u64 reserved ; } __attribute__ ( ( packed ) ) xprs ; struct { t#__u64 reserved ; } __attribute__ ( ( packed ) ) htpt ; struct { t#__u64 reserved ; } __attribute__ ( ( packed ) ) unknown ; } interface_path ; union { struct { t#__u8 device ; t#__u8 reserved1 ; t#__u16 reserved2 ; t#__u32 reserved3 ; t#__u64 reserved4 ; } __attribute__ ( ( packed ) ) ata ; struct { t#__u8 device ; t#__u8 lun ; t#__u8 reserved1 ; t#__u8 reserved2 ; t#__u32 reserved3 ; t#__u64 reserved4 ; } __attribute__ ( ( packed ) ) atapi ; struct { t#__u16 id ; t#__u64 lun ; t#__u16 reserved1 ; t#__u32 reserved2 ; } __attribute__ ( ( packed ) ) scsi ; struct { t#__u64 serial_number ; t#__u64 reserved ; } __attribute__ ( ( packed ) ) usb ; struct { t#__u64 eui ; t#__u64 reserved ; } __attribute__ ( ( packed ) ) i1394 ; struct { t#__u64 wwid ; t#__u64 lun ; } __attribute__ ( ( packed ) ) fibre ; struct { t#__u64 identity_tag ; t#__u64 reserved ; } __attribute__ ( ( packed ) ) i2o ; struct { t#__u32 array_number ; t#__u32 reserved1 ; t#__u64 reserved2 ; } __attribute__ ( ( packed ) ) raid ; struct { t#__u8 device ; t#__u8 reserved1 ; t#__u16 reserved2 ; t#__u32 reserved3 ; t#__u64 reserved4 ; } __attribute__ ( ( packed ) ) sata ; struct { t#__u64 reserved1 ; t#__u64 reserved2 ; } __attribute__ ( ( packed ) ) unknown ; } device_path ; t#__u8 reserved4 ; t#__u8 checksum ; } 
s#edd_info struct edd_info { t#__u8 device ; t#__u8 version ; t#__u16 interface_support ; t#__u16 legacy_max_cylinder ; t#__u8 legacy_max_head ; t#__u8 legacy_sectors_per_track ; s#edd_device_params params ; } 
s#edd struct edd { unsigned int mbr_signature [ 16 ] ; s#edd_info edd_info [ 6 ] ; unsigned char mbr_signature_nr ; unsigned char edd_info_nr ; } 
edd extern s#edd edd 

/* arch/x86/kernel/setup_percpu.o */
per_cpu__cpu_number extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( int ) per_cpu__cpu_number 
per_cpu__this_cpu_off extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( unsigned long ) per_cpu__this_cpu_off 
__per_cpu_offset extern unsigned long __per_cpu_offset [ 512 ] 

/* arch/x86/kernel/smp.o */
s#smp_ops struct smp_ops { void ( * smp_prepare_boot_cpu ) ( void ) ; void ( * smp_prepare_cpus ) ( unsigned ) ; void ( * smp_cpus_done ) ( unsigned ) ; void ( * smp_send_stop ) ( void ) ; void ( * smp_send_reschedule ) ( int ) ; int ( * cpu_up ) ( unsigned ) ; int ( * cpu_disable ) ( void ) ; void ( * cpu_die ) ( unsigned int ) ; void ( * play_dead ) ( void ) ; void ( * send_call_func_ipi ) ( const s#cpumask * ) ; void ( * send_call_func_single_ipi ) ( int ) ; } 
smp_ops extern s#smp_ops smp_ops 

/* arch/x86/kernel/smpboot.o */
smp_num_siblings extern int smp_num_siblings 
per_cpu__cpu_sibling_map extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( t#cpumask_var_t ) per_cpu__cpu_sibling_map 
per_cpu__cpu_core_map extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( t#cpumask_var_t ) per_cpu__cpu_core_map 
per_cpu__cpu_info extern __attribute__ ( ( section ( ".data.percpu" ".shared_aligned" ) ) ) __typeof__ ( s#cpuinfo_x86 ) per_cpu__cpu_info 

/* arch/x86/kernel/stacktrace.o */
s#stack_trace struct stack_trace { unsigned int nr_entries , max_entries ; unsigned long * entries ; int skip ; } 
save_stack_trace extern void save_stack_trace ( s#stack_trace * ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
save_stack_trace_tsk extern void save_stack_trace_tsk ( s#task_struct * , s#stack_trace * ) 

/* arch/x86/kernel/time.o */
profile_pc extern unsigned long profile_pc ( s#pt_regs * ) 

/* arch/x86/kernel/topology.o */
arch_register_cpu extern int arch_register_cpu ( int ) 
arch_unregister_cpu extern void arch_unregister_cpu ( int ) 

/* arch/x86/kernel/traps.o */
used_vectors extern unsigned long used_vectors [ ( ( ( 256 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] 
math_state_restore extern void math_state_restore ( void ) 

/* arch/x86/kernel/tsc.o */
cpu_khz extern unsigned int cpu_khz 
tsc_khz extern unsigned int tsc_khz 
check_tsc_unstable extern int check_tsc_unstable ( void ) 
recalibrate_cpu_khz extern int recalibrate_cpu_khz ( void ) 
mark_tsc_unstable extern void mark_tsc_unstable ( char * ) 

/* arch/x86/kernel/uv_irq.o */
uv_setup_irq extern int uv_setup_irq ( char * , int , int , unsigned long , int ) 
uv_teardown_irq extern void uv_teardown_irq ( unsigned int ) 

/* arch/x86/kernel/x8664_ksyms_64.o */
mcount extern void mcount ( void ) 
kernel_thread extern int kernel_thread ( int ( * ) ( void * ) , void * , unsigned long ) 
__get_user_1 extern int __get_user_1 ( void ) 
__get_user_2 extern int __get_user_2 ( void ) 
__get_user_4 extern int __get_user_4 ( void ) 
__get_user_8 extern int __get_user_8 ( void ) 
__put_user_1 extern void __put_user_1 ( void ) 
__put_user_2 extern void __put_user_2 ( void ) 
__put_user_4 extern void __put_user_4 ( void ) 
__put_user_8 extern void __put_user_8 ( void ) 
copy_user_generic __attribute__ ( ( warn_unused_result ) ) unsigned long copy_user_generic ( void * , const void * , unsigned ) 
__copy_user_nocache extern long __copy_user_nocache ( void * , const void * , unsigned , int ) 
copy_from_user __attribute__ ( ( warn_unused_result ) ) unsigned long copy_from_user ( void * , const void * , unsigned ) 
copy_to_user __attribute__ ( ( warn_unused_result ) ) unsigned long copy_to_user ( void * , const void * , unsigned ) 
__copy_from_user_inatomic __attribute__ ( ( warn_unused_result ) ) long __copy_from_user_inatomic ( void * , const void * , unsigned ) 
copy_page void copy_page ( void * , void * ) 
clear_page void clear_page ( void * ) 
csum_partial extern t#__wsum csum_partial ( const void * , int , t#__wsum ) 
memset void * memset ( void * , int , t#size_t ) 
memcpy extern void * memcpy ( void * , const void * , t#size_t ) 
__memcpy extern void * __memcpy ( void * , const void * , t#__kernel_size_t ) 
empty_zero_page extern unsigned long empty_zero_page [ ( ( 1UL ) << 12 ) / sizeof ( unsigned long ) ] 
init_level4_pgt extern t#pgd_t init_level4_pgt [ ] 
native_load_gs_index extern void native_load_gs_index ( unsigned ) 

/* arch/x86/kvm/irq.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s#srcu_struct_array struct srcu_struct_array { int c [ 2 ] ; } 
s#srcu_struct struct srcu_struct { int completed ; s#srcu_struct_array * per_cpu_ref ; s#mutex mutex ; } 
s#mmu_notifier_mm struct mmu_notifier_mm { s#hlist_head list ; s#srcu_struct srcu ; t#spinlock_t lock ; } 
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##pollfd
t#gfn_t typedef unsigned long gfn_t 
s#kvm_memory_slot struct kvm_memory_slot { t#gfn_t base_gfn ; unsigned long npages ; unsigned long flags ; unsigned long * rmap ; unsigned long * dirty_bitmap ; struct { unsigned long rmap_pde ; int write_count ; } * lpage_info [ 3 - 1 ] ; unsigned long userspace_addr ; int user_alloc ; } 
s#kvm_memslots struct kvm_memslots { int nmemslots ; s#kvm_memory_slot memslots [ 32 + 4 ] ; } 
t#gpa_t typedef t#u64 gpa_t 
s#kvm_io_device_ops struct kvm_io_device_ops { int ( * read ) ( s#kvm_io_device * , t#gpa_t , int , void * ) ; int ( * write ) ( s#kvm_io_device * , t#gpa_t , int , const void * ) ; void ( * destructor ) ( s#kvm_io_device * ) ; } 
s#kvm_io_device struct kvm_io_device { const s#kvm_io_device_ops * ops ; } 
s#kvm_io_bus struct kvm_io_bus { int dev_count ; s#kvm_io_device * devs [ 6 ] ; } 
s#kvm_vm_stat struct kvm_vm_stat { t#u32 mmu_shadow_zapped ; t#u32 mmu_pte_write ; t#u32 mmu_pte_updated ; t#u32 mmu_pde_zapped ; t#u32 mmu_flooded ; t#u32 mmu_recycled ; t#u32 mmu_cache_miss ; t#u32 mmu_unsync ; t#u32 remote_tlb_flush ; t#u32 lpages ; } 
s#kvm_mem_alias struct kvm_mem_alias { t#gfn_t base_gfn ; unsigned long npages ; t#gfn_t target_gfn ; unsigned long flags ; } 
s#kvm_mem_aliases struct kvm_mem_aliases { s#kvm_mem_alias aliases [ 4 ] ; int naliases ; } 
s##iommu_domain
s#kvm_kpic_state struct kvm_kpic_state { t#u8 last_irr ; t#u8 irr ; t#u8 imr ; t#u8 isr ; t#u8 isr_ack ; t#u8 priority_add ; t#u8 irq_base ; t#u8 read_reg_select ; t#u8 poll ; t#u8 special_mask ; t#u8 init_state ; t#u8 auto_eoi ; t#u8 rotate_on_auto_eoi ; t#u8 special_fully_nested_mode ; t#u8 init4 ; t#u8 elcr ; t#u8 elcr_mask ; s#kvm_pic * pics_state ; } 
t#irq_request_func typedef void irq_request_func ( void * , int ) 
s#kvm_pic struct kvm_pic { t#spinlock_t lock ; unsigned pending_acks ; s#kvm * kvm ; s#kvm_kpic_state pics [ 2 ] ; t#irq_request_func * irq_request ; void * irq_request_opaque ; int output ; s#kvm_io_device dev ; void ( * ack_notifier ) ( void * , int ) ; unsigned long irq_states [ 16 ] ; } 
u#kvm_ioapic_redirect_entry union kvm_ioapic_redirect_entry { t#u64 bits ; struct { t#u8 vector ; t#u8 delivery_mode : 3 ; t#u8 dest_mode : 1 ; t#u8 delivery_status : 1 ; t#u8 polarity : 1 ; t#u8 remote_irr : 1 ; t#u8 trig_mode : 1 ; t#u8 mask : 1 ; t#u8 reserve : 7 ; t#u8 reserved [ 4 ] ; t#u8 dest_id ; } fields ; } 
s#kvm_ioapic struct kvm_ioapic { t#u64 base_address ; t#u32 ioregsel ; t#u32 id ; t#u32 irr ; t#u32 pad ; u#kvm_ioapic_redirect_entry redirtbl [ 24 ] ; unsigned long irq_states [ 24 ] ; s#kvm_io_device dev ; s#kvm * kvm ; void ( * ack_notifier ) ( void * , int ) ; s#mutex lock ; unsigned long handled_vectors [ ( ( ( 256 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } 
s#kvm_kpit_channel_state struct kvm_kpit_channel_state { t#u32 count ; t#u16 latched_count ; t#u8 count_latched ; t#u8 status_latched ; t#u8 status ; t#u8 read_state ; t#u8 write_state ; t#u8 write_latch ; t#u8 rw_mode ; t#u8 mode ; t#u8 bcd ; t#u8 gate ; t#ktime_t count_load_time ; } 
s#kvm_timer_ops struct kvm_timer_ops { t#bool ( * is_periodic ) ( s#kvm_timer * ) ; } 
s#kvm_timer struct kvm_timer { s#hrtimer timer ; t#s64 period ; t#atomic_t pending ; t#bool reinject ; s#kvm_timer_ops * t_ops ; s#kvm * kvm ; s#kvm_vcpu * vcpu ; } 
s#kvm_irq_ack_notifier struct kvm_irq_ack_notifier { s#hlist_node link ; unsigned gsi ; void ( * irq_acked ) ( s#kvm_irq_ack_notifier * ) ; } 
s#kvm_kpit_state struct kvm_kpit_state { s#kvm_kpit_channel_state channels [ 3 ] ; t#u32 flags ; s#kvm_timer pit_timer ; t#bool is_periodic ; t#u32 speaker_data_on ; s#mutex lock ; s#kvm_pit * pit ; t#spinlock_t inject_lock ; unsigned long irq_ack ; s#kvm_irq_ack_notifier irq_ack_notifier ; } 
s#kvm_irq_mask_notifier struct kvm_irq_mask_notifier { void ( * func ) ( s#kvm_irq_mask_notifier * , t#bool ) ; int irq ; s#hlist_node link ; } 
s#kvm_pit struct kvm_pit { unsigned long base_addresss ; s#kvm_io_device dev ; s#kvm_io_device speaker_dev ; s#kvm * kvm ; s#kvm_kpit_state pit_state ; int irq_source_id ; s#kvm_irq_mask_notifier mask_notifier ; } 
s#kvm_arch struct kvm_arch { s#kvm_mem_aliases * aliases ; unsigned int n_free_mmu_pages ; unsigned int n_requested_mmu_pages ; unsigned int n_alloc_mmu_pages ; s#hlist_head mmu_page_hash [ ( 1 << 10 ) ] ; s#list_head active_mmu_pages ; s#list_head assigned_dev_head ; s#iommu_domain * iommu_domain ; int iommu_flags ; s#kvm_pic * vpic ; s#kvm_ioapic * vioapic ; s#kvm_pit * vpit ; int vapics_in_nmi_mode ; unsigned int tss_addr ; s#page * apic_access_page ; t#gpa_t wall_clock ; s#page * ept_identity_pagetable ; t#bool ept_identity_pagetable_done ; t#gpa_t ept_identity_map_addr ; unsigned long irq_sources_bitmap ; t#u64 vm_init_tsc ; t#s64 kvmclock_offset ; } 
s##kvm_coalesced_mmio_dev
s#kvm_coalesced_mmio struct kvm_coalesced_mmio { t#__u64 phys_addr ; t#__u32 len ; t#__u32 pad ; t#__u8 data [ 8 ] ; } 
s#kvm_coalesced_mmio_ring struct kvm_coalesced_mmio_ring { t#__u32 first , last ; s#kvm_coalesced_mmio coalesced_mmio [ 0 ] ; } 
s#msi_msg struct msi_msg { t#u32 address_lo ; t#u32 address_hi ; t#u32 data ; } 
s#kvm_kernel_irq_routing_entry struct kvm_kernel_irq_routing_entry { t#u32 gsi ; t#u32 type ; int ( * set ) ( s#kvm_kernel_irq_routing_entry * , s#kvm * , int , int ) ; union { struct { unsigned irqchip ; unsigned pin ; } irqchip ; s#msi_msg msi ; } ; s#hlist_node link ; } 
s#kvm_irq_routing_table struct kvm_irq_routing_table { int chip [ 3 ] [ 24 ] ; s#kvm_kernel_irq_routing_entry * rt_entries ; t#u32 nr_rt_entries ; s#hlist_head map [ 0 ] ; } 
t#pteval_t typedef unsigned long pteval_t 
t#pte_t typedef struct { t#pteval_t pte ; } pte_t 
s#mmu_notifier_ops struct mmu_notifier_ops { void ( * release ) ( s#mmu_notifier * , s#mm_struct * ) ; int ( * clear_flush_young ) ( s#mmu_notifier * , s#mm_struct * , unsigned long ) ; void ( * change_pte ) ( s#mmu_notifier * , s#mm_struct * , unsigned long , t#pte_t ) ; void ( * invalidate_page ) ( s#mmu_notifier * , s#mm_struct * , unsigned long ) ; void ( * invalidate_range_start ) ( s#mmu_notifier * , s#mm_struct * , unsigned long , unsigned long ) ; void ( * invalidate_range_end ) ( s#mmu_notifier * , s#mm_struct * , unsigned long , unsigned long ) ; } 
s#mmu_notifier struct mmu_notifier { s#hlist_node hlist ; const s#mmu_notifier_ops * ops ; } 
s#kvm struct kvm { t#spinlock_t mmu_lock ; t#spinlock_t requests_lock ; s#mutex slots_lock ; s#mm_struct * mm ; s#kvm_memslots * memslots ; s#srcu_struct srcu ; t#u32 bsp_vcpu_id ; s#kvm_vcpu * bsp_vcpu ; s#kvm_vcpu * vcpus [ 64 ] ; t#atomic_t online_vcpus ; s#list_head vm_list ; s#mutex lock ; s#kvm_io_bus * buses [ KVM_NR_BUSES ] ; struct { t#spinlock_t lock ; s#list_head items ; } irqfds ; s#list_head ioeventfds ; s#kvm_vm_stat stat ; s#kvm_arch arch ; t#atomic_t users_count ; s#kvm_coalesced_mmio_dev * coalesced_mmio_dev ; s#kvm_coalesced_mmio_ring * coalesced_mmio_ring ; s#mutex irq_lock ; s#kvm_irq_routing_table * irq_routing ; s#hlist_head mask_notifier_list ; s#hlist_head irq_ack_notifier_list ; s#mmu_notifier mmu_notifier ; unsigned long mmu_notifier_seq ; long mmu_notifier_count ; } 
s#preempt_ops struct preempt_ops { void ( * sched_in ) ( s#preempt_notifier * , int ) ; void ( * sched_out ) ( s#preempt_notifier * , s#task_struct * ) ; } 
s#preempt_notifier struct preempt_notifier { s#hlist_node link ; s#preempt_ops * ops ; } 
s#kvm_debug_exit_arch struct kvm_debug_exit_arch { t#__u32 exception ; t#__u32 pad ; t#__u64 pc ; t#__u64 dr6 ; t#__u64 dr7 ; } 
s#kvm_run struct kvm_run { t#__u8 request_interrupt_window ; t#__u8 padding1 [ 7 ] ; t#__u32 exit_reason ; t#__u8 ready_for_interrupt_injection ; t#__u8 if_flag ; t#__u8 padding2 [ 2 ] ; t#__u64 cr8 ; t#__u64 apic_base ; union { struct { t#__u64 hardware_exit_reason ; } hw ; struct { t#__u64 hardware_entry_failure_reason ; } fail_entry ; struct { t#__u32 exception ; t#__u32 error_code ; } ex ; struct { t#__u8 direction ; t#__u8 size ; t#__u16 port ; t#__u32 count ; t#__u64 data_offset ; } io ; struct { s#kvm_debug_exit_arch arch ; } debug ; struct { t#__u64 phys_addr ; t#__u8 data [ 8 ] ; t#__u32 len ; t#__u8 is_write ; } mmio ; struct { t#__u64 nr ; t#__u64 args [ 6 ] ; t#__u64 ret ; t#__u32 longmode ; t#__u32 pad ; } hypercall ; struct { t#__u64 rip ; t#__u32 is_write ; t#__u32 pad ; } tpr_access ; struct { t#__u8 icptcode ; t#__u16 ipa ; t#__u32 ipb ; } s390_sieic ; t#__u64 s390_reset_flags ; struct { t#__u32 dcrn ; t#__u32 data ; t#__u8 is_write ; } dcr ; struct { t#__u32 suberror ; } internal ; char padding [ 256 ] ; } ; } 
s#kvm_vcpu_stat struct kvm_vcpu_stat { t#u32 pf_fixed ; t#u32 pf_guest ; t#u32 tlb_flush ; t#u32 invlpg ; t#u32 exits ; t#u32 io_exits ; t#u32 mmio_exits ; t#u32 signal_exits ; t#u32 irq_window_exits ; t#u32 nmi_window_exits ; t#u32 halt_exits ; t#u32 halt_wakeup ; t#u32 request_irq_exits ; t#u32 irq_exits ; t#u32 host_state_reload ; t#u32 efer_reload ; t#u32 fpu_reload ; t#u32 insn_emulation ; t#u32 insn_emulation_fail ; t#u32 hypercalls ; t#u32 irq_injections ; t#u32 nmi_injections ; } 
s#kvm_lapic struct kvm_lapic { unsigned long base_address ; s#kvm_io_device dev ; s#kvm_timer lapic_timer ; t#u32 divide_count ; s#kvm_vcpu * vcpu ; t#bool irr_pending ; s#page * regs_page ; void * regs ; t#gpa_t vapic_addr ; s#page * vapic_page ; } 
t#gva_t typedef unsigned long gva_t 
u#kvm_mmu_page_role union kvm_mmu_page_role { unsigned word ; struct { unsigned glevels : 4 ; unsigned level : 4 ; unsigned quadrant : 2 ; unsigned pad_for_nice_hex_output : 6 ; unsigned direct : 1 ; unsigned access : 3 ; unsigned invalid : 1 ; unsigned cr4_pge : 1 ; unsigned nxe : 1 ; } ; } 
s#kvm_mmu_page struct kvm_mmu_page { s#list_head link ; s#hlist_node hash_link ; s#list_head oos_link ; t#gfn_t gfn ; u#kvm_mmu_page_role role ; t#u64 * spt ; t#gfn_t * gfns ; unsigned long slot_bitmap [ ( ( ( 32 + 4 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; int multimapped ; int root_count ; t#bool unsync ; unsigned int unsync_children ; union { t#u64 * parent_pte ; s#hlist_head parent_ptes ; } ; unsigned long unsync_child_bitmap [ ( ( ( 512 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } 
t#hpa_t typedef t#u64 hpa_t 
s#kvm_mmu struct kvm_mmu { void ( * new_cr3 ) ( s#kvm_vcpu * ) ; int ( * page_fault ) ( s#kvm_vcpu * , t#gva_t , t#u32 ) ; void ( * free ) ( s#kvm_vcpu * ) ; t#gpa_t ( * gva_to_gpa ) ( s#kvm_vcpu * , t#gva_t ) ; void ( * prefetch_page ) ( s#kvm_vcpu * , s#kvm_mmu_page * ) ; int ( * sync_page ) ( s#kvm_vcpu * , s#kvm_mmu_page * ) ; void ( * invlpg ) ( s#kvm_vcpu * , t#gva_t ) ; t#hpa_t root_hpa ; int root_level ; int shadow_root_level ; u#kvm_mmu_page_role base_role ; t#u64 * pae_root ; t#u64 rsvd_bits_mask [ 2 ] [ 4 ] ; } 
s#kvm_pv_mmu_op_buffer struct kvm_pv_mmu_op_buffer { void * ptr ; unsigned len ; unsigned processed ; char buf [ 512 ] __attribute__ ( ( aligned ( sizeof ( long ) ) ) ) ; } 
s#kvm_mmu_memory_cache struct kvm_mmu_memory_cache { int nobjs ; void * objects [ 40 ] ; } 
t#hfn_t typedef unsigned long hfn_t 
t#pfn_t typedef t#hfn_t pfn_t 
s#kvm_pio_request struct kvm_pio_request { unsigned long count ; int cur_count ; t#gva_t guest_gva ; int in ; int port ; int size ; int string ; int down ; int rep ; } 
s#kvm_queued_exception struct kvm_queued_exception { t#bool pending ; t#bool has_error_code ; t#u8 nr ; t#u32 error_code ; } 
s#kvm_queued_interrupt struct kvm_queued_interrupt { t#bool pending ; t#bool soft ; t#u8 nr ; } 
s#kvm_cpuid_entry2 struct kvm_cpuid_entry2 { t#__u32 function ; t#__u32 index ; t#__u32 flags ; t#__u32 eax ; t#__u32 ebx ; t#__u32 ecx ; t#__u32 edx ; t#__u32 padding [ 3 ] ; } 
s#operand struct operand { enum { OP_REG , OP_MEM , OP_IMM , OP_NONE } type ; unsigned int bytes ; unsigned long val , orig_val , * ptr ; } 
s#fetch_cache struct fetch_cache { t#u8 data [ 15 ] ; unsigned long start ; unsigned long end ; } 
s#decode_cache struct decode_cache { t#u8 twobyte ; t#u8 b ; t#u8 lock_prefix ; t#u8 rep_prefix ; t#u8 op_bytes ; t#u8 ad_bytes ; t#u8 rex_prefix ; s#operand src ; s#operand src2 ; s#operand dst ; t#bool has_seg_override ; t#u8 seg_override ; unsigned int d ; unsigned long regs [ NR_VCPU_REGS ] ; unsigned long eip , eip_orig ; t#u8 modrm ; t#u8 modrm_mod ; t#u8 modrm_reg ; t#u8 modrm_rm ; t#u8 use_modrm_ea ; t#bool rip_relative ; unsigned long modrm_ea ; void * modrm_ptr ; unsigned long modrm_val ; s#fetch_cache fetch ; } 
s#x86_emulate_ctxt struct x86_emulate_ctxt { s#kvm_vcpu * vcpu ; unsigned long eflags ; int mode ; t#u32 cs_base ; int interruptibility ; s#decode_cache decode ; } 
t#s8 typedef signed char s8 
s#pvclock_vcpu_time_info struct pvclock_vcpu_time_info { t#u32 version ; t#u32 pad0 ; t#u64 tsc_timestamp ; t#u64 system_time ; t#u32 tsc_to_system_mul ; t#s8 tsc_shift ; t#u8 pad [ 3 ] ; } 
s#kvm_vcpu_arch struct kvm_vcpu_arch { t#u64 host_tsc ; unsigned long regs [ NR_VCPU_REGS ] ; t#u32 regs_avail ; t#u32 regs_dirty ; unsigned long cr0 ; unsigned long cr2 ; unsigned long cr3 ; unsigned long cr4 ; unsigned long cr8 ; t#u32 hflags ; t#u64 pdptrs [ 4 ] ; t#u64 shadow_efer ; t#u64 apic_base ; s#kvm_lapic * apic ; t#int32_t apic_arb_prio ; int mp_state ; int sipi_vector ; t#u64 ia32_misc_enable_msr ; t#bool tpr_access_reporting ; s#kvm_mmu mmu ; s#kvm_pv_mmu_op_buffer mmu_op_buffer ; s#kvm_mmu_memory_cache mmu_pte_chain_cache ; s#kvm_mmu_memory_cache mmu_rmap_desc_cache ; s#kvm_mmu_memory_cache mmu_page_cache ; s#kvm_mmu_memory_cache mmu_page_header_cache ; t#gfn_t last_pt_write_gfn ; int last_pt_write_count ; t#u64 * last_pte_updated ; t#gfn_t last_pte_gfn ; struct { t#gfn_t gfn ; t#pfn_t pfn ; unsigned long mmu_seq ; } update_pte ; s#i387_fxsave_struct host_fx_image ; s#i387_fxsave_struct guest_fx_image ; t#gva_t mmio_fault_cr2 ; s#kvm_pio_request pio ; void * pio_data ; t#u8 event_exit_inst_len ; s#kvm_queued_exception exception ; s#kvm_queued_interrupt interrupt ; int halt_request ; int cpuid_nent ; s#kvm_cpuid_entry2 cpuid_entries [ 40 ] ; s#x86_emulate_ctxt emulate_ctxt ; t#gpa_t time ; s#pvclock_vcpu_time_info hv_clock ; unsigned int hv_clock_tsc_khz ; unsigned int time_offset ; s#page * time_page ; t#bool singlestep ; t#bool nmi_pending ; t#bool nmi_injected ; s#mtrr_state_type mtrr_state ; t#u32 pat ; int switch_db_regs ; unsigned long db [ 4 ] ; unsigned long dr6 ; unsigned long dr7 ; unsigned long eff_db [ 4 ] ; t#u64 mcg_cap ; t#u64 mcg_status ; t#u64 mcg_ctl ; t#u64 * mce_banks ; } 
s#kvm_vcpu struct kvm_vcpu { s#kvm * kvm ; s#preempt_notifier preempt_notifier ; int vcpu_id ; s#mutex mutex ; int cpu ; s#kvm_run * run ; unsigned long requests ; unsigned long guest_debug ; int srcu_idx ; int fpu_active ; int guest_fpu_loaded ; t#wait_queue_head_t wq ; int sigset_active ; t#sigset_t sigset ; s#kvm_vcpu_stat stat ; int mmio_needed ; int mmio_read_completed ; int mmio_is_write ; int mmio_size ; unsigned char mmio_data [ 8 ] ; t#gpa_t mmio_phys_addr ; s#kvm_vcpu_arch arch ; } 
kvm_cpu_has_pending_timer int kvm_cpu_has_pending_timer ( s#kvm_vcpu * ) 
kvm_cpu_has_interrupt int kvm_cpu_has_interrupt ( s#kvm_vcpu * ) 
kvm_cpu_get_interrupt int kvm_cpu_get_interrupt ( s#kvm_vcpu * ) 
kvm_inject_pending_timer_irqs void kvm_inject_pending_timer_irqs ( s#kvm_vcpu * ) 

/* arch/x86/kvm/mmu.o */
kvm_mmu_set_nonpresent_ptes void kvm_mmu_set_nonpresent_ptes ( t#u64 , t#u64 ) 
kvm_mmu_set_base_ptes void kvm_mmu_set_base_ptes ( t#u64 ) 
kvm_mmu_set_mask_ptes void kvm_mmu_set_mask_ptes ( t#u64 , t#u64 , t#u64 , t#u64 , t#u64 ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
e#print_line_t enum print_line_t { TRACE_TYPE_PARTIAL_LINE = 0 , TRACE_TYPE_HANDLED = 1 , TRACE_TYPE_UNHANDLED = 2 , TRACE_TYPE_NO_CONSUME = 3 } 
s##trace_array
s##tracer
s##ring_buffer_iter
s#trace_seq struct trace_seq { unsigned char buffer [ ( ( 1UL ) << 12 ) ] ; unsigned int len ; unsigned int readpos ; } 
s#trace_entry struct trace_entry { unsigned short type ; unsigned char flags ; unsigned char preempt_count ; int pid ; int lock_depth ; } 
s#trace_iterator struct trace_iterator { s#trace_array * tr ; s#tracer * trace ; void * private ; int cpu_file ; s#mutex mutex ; s#ring_buffer_iter * buffer_iter [ 512 ] ; unsigned long iter_flags ; s#trace_seq seq ; s#trace_entry * ent ; int cpu ; t#u64 ts ; t#loff_t pos ; long idx ; t#cpumask_var_t started ; } 
t#trace_print_func typedef e#print_line_t ( * trace_print_func ) ( s#trace_iterator * , int ) 
s#trace_event struct trace_event { s#hlist_node node ; s#list_head list ; int type ; t#trace_print_func trace ; t#trace_print_func raw ; t#trace_print_func hex ; t#trace_print_func binary ; } 
s##event_filter
s#ftrace_event_call struct ftrace_event_call { s#list_head list ; char * name ; char * system ; s#dentry * dir ; s#trace_event * event ; int enabled ; int ( * regfunc ) ( void * ) ; void ( * unregfunc ) ( void * ) ; int id ; int ( * raw_init ) ( void ) ; int ( * show_format ) ( s#ftrace_event_call * , s#trace_seq * ) ; int ( * define_fields ) ( s#ftrace_event_call * ) ; s#list_head fields ; int filter_active ; s#event_filter * filter ; void * mod ; void * data ; t#atomic_t profile_count ; int ( * profile_enable ) ( void ) ; void ( * profile_disable ) ( void ) ; } 
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s#mempolicy struct mempolicy { t#atomic_t refcnt ; unsigned short mode ; unsigned short flags ; union { short preferred_node ; t#nodemask_t nodes ; } v ; union { t#nodemask_t cpuset_mems_allowed ; t#nodemask_t user_nodemask ; } w ; } 
s##linux_binfmt
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##kvm_io_device
s##iommu_domain
s##kvm_pic
s##kvm_ioapic
s##kvm_pit
s##kvm_coalesced_mmio_dev
s##kvm_lapic
kvm_get_guest_memory_type t#u8 kvm_get_guest_memory_type ( s#kvm_vcpu * , t#gfn_t ) 
kvm_mmu_reset_context int kvm_mmu_reset_context ( s#kvm_vcpu * ) 
kvm_mmu_load int kvm_mmu_load ( s#kvm_vcpu * ) 
kvm_mmu_unprotect_page_virt int kvm_mmu_unprotect_page_virt ( s#kvm_vcpu * , t#gva_t ) 
kvm_mmu_page_fault int kvm_mmu_page_fault ( s#kvm_vcpu * , t#gva_t , t#u32 ) 
kvm_mmu_invlpg void kvm_mmu_invlpg ( s#kvm_vcpu * , t#gva_t ) 
kvm_enable_tdp void kvm_enable_tdp ( void ) 
kvm_disable_tdp void kvm_disable_tdp ( void ) 
kvm_mmu_get_spte_hierarchy int kvm_mmu_get_spte_hierarchy ( s#kvm_vcpu * , t#u64 , t#u64 [ 4 ] ) 

/* arch/x86/kvm/x86.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s#iommu_domain struct iommu_domain { void * priv ; } 
s##kvm_coalesced_mmio_dev
s#kvm_guest_debug_arch struct kvm_guest_debug_arch { t#__u64 debugreg [ 8 ] ; } 
s#kvm_guest_debug struct kvm_guest_debug { t#__u32 control ; t#__u32 pad ; s#kvm_guest_debug_arch arch ; } 
s#kvm_segment struct kvm_segment { t#__u64 base ; t#__u32 limit ; t#__u16 selector ; t#__u8 type ; t#__u8 present , dpl , db , s , l , g , avl ; t#__u8 unusable ; t#__u8 padding ; } 
s#descriptor_table struct descriptor_table { t#u16 limit ; unsigned long base ; } 
e#kvm_reg enum kvm_reg { VCPU_REGS_RAX = 0 , VCPU_REGS_RCX = 1 , VCPU_REGS_RDX = 2 , VCPU_REGS_RBX = 3 , VCPU_REGS_RSP = 4 , VCPU_REGS_RBP = 5 , VCPU_REGS_RSI = 6 , VCPU_REGS_RDI = 7 , VCPU_REGS_R8 = 8 , VCPU_REGS_R9 = 9 , VCPU_REGS_R10 = 10 , VCPU_REGS_R11 = 11 , VCPU_REGS_R12 = 12 , VCPU_REGS_R13 = 13 , VCPU_REGS_R14 = 14 , VCPU_REGS_R15 = 15 , VCPU_REGS_RIP , NR_VCPU_REGS } 
s#trace_print_flags struct trace_print_flags { unsigned long mask ; const char * name ; } 
s#kvm_x86_ops struct kvm_x86_ops { int ( * cpu_has_kvm_support ) ( void ) ; int ( * disabled_by_bios ) ( void ) ; void ( * hardware_enable ) ( void * ) ; void ( * hardware_disable ) ( void * ) ; void ( * check_processor_compatibility ) ( void * ) ; int ( * hardware_setup ) ( void ) ; void ( * hardware_unsetup ) ( void ) ; t#bool ( * cpu_has_accelerated_tpr ) ( void ) ; s#kvm_vcpu * ( * vcpu_create ) ( s#kvm * , unsigned ) ; void ( * vcpu_free ) ( s#kvm_vcpu * ) ; int ( * vcpu_reset ) ( s#kvm_vcpu * ) ; void ( * prepare_guest_switch ) ( s#kvm_vcpu * ) ; void ( * vcpu_load ) ( s#kvm_vcpu * , int ) ; void ( * vcpu_put ) ( s#kvm_vcpu * ) ; int ( * set_guest_debug ) ( s#kvm_vcpu * , s#kvm_guest_debug * ) ; int ( * get_msr ) ( s#kvm_vcpu * , t#u32 , t#u64 * ) ; int ( * set_msr ) ( s#kvm_vcpu * , t#u32 , t#u64 ) ; t#u64 ( * get_segment_base ) ( s#kvm_vcpu * , int ) ; void ( * get_segment ) ( s#kvm_vcpu * , s#kvm_segment * , int ) ; int ( * get_cpl ) ( s#kvm_vcpu * ) ; void ( * set_segment ) ( s#kvm_vcpu * , s#kvm_segment * , int ) ; void ( * get_cs_db_l_bits ) ( s#kvm_vcpu * , int * , int * ) ; void ( * decache_cr4_guest_bits ) ( s#kvm_vcpu * ) ; void ( * set_cr0 ) ( s#kvm_vcpu * , unsigned long ) ; void ( * set_cr3 ) ( s#kvm_vcpu * , unsigned long ) ; void ( * set_cr4 ) ( s#kvm_vcpu * , unsigned long ) ; void ( * set_efer ) ( s#kvm_vcpu * , t#u64 ) ; void ( * get_idt ) ( s#kvm_vcpu * , s#descriptor_table * ) ; void ( * set_idt ) ( s#kvm_vcpu * , s#descriptor_table * ) ; void ( * get_gdt ) ( s#kvm_vcpu * , s#descriptor_table * ) ; void ( * set_gdt ) ( s#kvm_vcpu * , s#descriptor_table * ) ; unsigned long ( * get_dr ) ( s#kvm_vcpu * , int ) ; void ( * set_dr ) ( s#kvm_vcpu * , int , unsigned long , int * ) ; void ( * cache_reg ) ( s#kvm_vcpu * , e#kvm_reg ) ; unsigned long ( * get_rflags ) ( s#kvm_vcpu * ) ; void ( * set_rflags ) ( s#kvm_vcpu * , unsigned long ) ; void ( * tlb_flush ) ( s#kvm_vcpu * ) ; void ( * run ) ( s#kvm_vcpu * , s#kvm_run * ) ; int ( * handle_exit ) ( s#kvm_run * , s#kvm_vcpu * ) ; void ( * skip_emulated_instruction ) ( s#kvm_vcpu * ) ; void ( * set_interrupt_shadow ) ( s#kvm_vcpu * , int ) ; t#u32 ( * get_interrupt_shadow ) ( s#kvm_vcpu * , int ) ; void ( * patch_hypercall ) ( s#kvm_vcpu * , unsigned char * ) ; void ( * set_irq ) ( s#kvm_vcpu * ) ; void ( * set_nmi ) ( s#kvm_vcpu * ) ; void ( * queue_exception ) ( s#kvm_vcpu * , unsigned , t#bool , t#u32 ) ; int ( * interrupt_allowed ) ( s#kvm_vcpu * ) ; int ( * nmi_allowed ) ( s#kvm_vcpu * ) ; t#bool ( * get_nmi_mask ) ( s#kvm_vcpu * ) ; void ( * set_nmi_mask ) ( s#kvm_vcpu * , t#bool ) ; void ( * enable_nmi_window ) ( s#kvm_vcpu * ) ; void ( * enable_irq_window ) ( s#kvm_vcpu * ) ; void ( * update_cr8_intercept ) ( s#kvm_vcpu * , int , int ) ; int ( * set_tss_addr ) ( s#kvm * , unsigned int ) ; int ( * get_tdp_level ) ( void ) ; t#u64 ( * get_mt_mask ) ( s#kvm_vcpu * , t#gfn_t , t#bool ) ; t#bool ( * gb_page_enable ) ( void ) ; const s#trace_print_flags * exit_reasons_str ; } 
kvm_x86_ops extern s#kvm_x86_ops * kvm_x86_ops 
segment_base unsigned long segment_base ( t#u16 ) 
kvm_get_apic_base t#u64 kvm_get_apic_base ( s#kvm_vcpu * ) 
kvm_set_apic_base void kvm_set_apic_base ( s#kvm_vcpu * , t#u64 ) 
kvm_queue_exception void kvm_queue_exception ( s#kvm_vcpu * , unsigned ) 
kvm_inject_nmi void kvm_inject_nmi ( s#kvm_vcpu * ) 
kvm_queue_exception_e void kvm_queue_exception_e ( s#kvm_vcpu * , unsigned , t#u32 ) 
kvm_require_cpl t#bool kvm_require_cpl ( s#kvm_vcpu * , int ) 
load_pdptrs int load_pdptrs ( s#kvm_vcpu * , unsigned long ) 
kvm_set_cr0 void kvm_set_cr0 ( s#kvm_vcpu * , unsigned long ) 
kvm_lmsw void kvm_lmsw ( s#kvm_vcpu * , unsigned long ) 
kvm_set_cr4 void kvm_set_cr4 ( s#kvm_vcpu * , unsigned long ) 
kvm_set_cr3 void kvm_set_cr3 ( s#kvm_vcpu * , unsigned long ) 
kvm_set_cr8 void kvm_set_cr8 ( s#kvm_vcpu * , unsigned long ) 
kvm_get_cr8 unsigned long kvm_get_cr8 ( s#kvm_vcpu * ) 
kvm_enable_efer_bits void kvm_enable_efer_bits ( t#u64 ) 
kvm_set_msr_common int kvm_set_msr_common ( s#kvm_vcpu * , t#u32 , t#u64 ) 
kvm_get_msr_common int kvm_get_msr_common ( s#kvm_vcpu * , t#u32 , t#u64 * ) 
emulator_write_emulated int emulator_write_emulated ( unsigned long , const void * , unsigned int , s#kvm_vcpu * ) 
kvm_report_emulation_failure void kvm_report_emulation_failure ( s#kvm_vcpu * , const char * ) 
emulate_instruction int emulate_instruction ( s#kvm_vcpu * , s#kvm_run * , unsigned long , t#u16 , int ) 
kvm_emulate_pio int kvm_emulate_pio ( s#kvm_vcpu * , s#kvm_run * , int , int , unsigned ) 
kvm_emulate_pio_string int kvm_emulate_pio_string ( s#kvm_vcpu * , s#kvm_run * , int , int , unsigned long , int , t#gva_t , int , unsigned ) 
kvm_emulate_halt int kvm_emulate_halt ( s#kvm_vcpu * ) 
kvm_emulate_hypercall int kvm_emulate_hypercall ( s#kvm_vcpu * ) 
kvm_emulate_cpuid void kvm_emulate_cpuid ( s#kvm_vcpu * ) 
kvm_get_cs_db_l_bits void kvm_get_cs_db_l_bits ( s#kvm_vcpu * , int * , int * ) 
kvm_task_switch int kvm_task_switch ( s#kvm_vcpu * , t#u16 , int ) 
fx_init void fx_init ( s#kvm_vcpu * ) 
kvm_load_guest_fpu void kvm_load_guest_fpu ( s#kvm_vcpu * ) 
kvm_put_guest_fpu void kvm_put_guest_fpu ( s#kvm_vcpu * ) 
__tracepoint_kvm_exit extern s#tracepoint __tracepoint_kvm_exit 
__tracepoint_kvm_inj_virq extern s#tracepoint __tracepoint_kvm_inj_virq 
__tracepoint_kvm_page_fault extern s#tracepoint __tracepoint_kvm_page_fault 
__tracepoint_kvm_msr extern s#tracepoint __tracepoint_kvm_msr 
__tracepoint_kvm_cr extern s#tracepoint __tracepoint_kvm_cr 

/* arch/x86/lib/csum-partial_64.o */
t#__sum16 typedef t#__u16 __sum16 
ip_compute_csum extern t#__sum16 ip_compute_csum ( const void * , int ) 

/* arch/x86/lib/csum-wrappers_64.o */
csum_partial_copy_from_user extern t#__wsum csum_partial_copy_from_user ( const void * , void * , int , t#__wsum , int * ) 
csum_partial_copy_to_user extern t#__wsum csum_partial_copy_to_user ( const void * , void * , int , t#__wsum , int * ) 
csum_partial_copy_nocheck extern t#__wsum csum_partial_copy_nocheck ( const void * , void * , int , t#__wsum ) 
s##in6_addr
csum_ipv6_magic extern t#__sum16 csum_ipv6_magic ( const s#in6_addr * , const s#in6_addr * , t#__u32 , unsigned short , t#__wsum ) 

/* arch/x86/lib/delay.o */
__delay extern void __delay ( unsigned long ) 
__const_udelay extern void __const_udelay ( unsigned long ) 
__udelay extern void __udelay ( unsigned long ) 
__ndelay extern void __ndelay ( unsigned long ) 

/* arch/x86/lib/io_64.o */
__memcpy_toio void __memcpy_toio ( unsigned long , const void * , unsigned ) 
__memcpy_fromio void __memcpy_fromio ( void * , unsigned long , unsigned ) 
memset_io void memset_io ( volatile void * , int , t#size_t ) 

/* arch/x86/lib/memmove_64.o */
memmove void * memmove ( void * , const void * , t#size_t ) 

/* arch/x86/lib/msr.o */
s#msr struct msr { union { struct { t#u32 l ; t#u32 h ; } ; t#u64 q ; } ; } 
msrs_alloc s#msr * msrs_alloc ( void ) 
msrs_free void msrs_free ( s#msr * ) 

/* arch/x86/lib/msr-reg-export.o */
native_rdmsr_safe_regs extern int native_rdmsr_safe_regs ( t#u32 [ 8 ] ) 
native_wrmsr_safe_regs extern int native_wrmsr_safe_regs ( t#u32 [ 8 ] ) 

/* arch/x86/lib/msr-smp.o */
rdmsr_on_cpu int rdmsr_on_cpu ( unsigned int , t#u32 , t#u32 * , t#u32 * ) 
wrmsr_on_cpu int wrmsr_on_cpu ( unsigned int , t#u32 , t#u32 , t#u32 ) 
rdmsr_on_cpus void rdmsr_on_cpus ( const s#cpumask * , t#u32 , s#msr * ) 
wrmsr_on_cpus void wrmsr_on_cpus ( const s#cpumask * , t#u32 , s#msr * ) 
rdmsr_safe_on_cpu int rdmsr_safe_on_cpu ( unsigned int , t#u32 , t#u32 * , t#u32 * ) 
wrmsr_safe_on_cpu int wrmsr_safe_on_cpu ( unsigned int , t#u32 , t#u32 , t#u32 ) 
rdmsr_safe_regs_on_cpu int rdmsr_safe_regs_on_cpu ( unsigned int , t#u32 [ 8 ] ) 
wrmsr_safe_regs_on_cpu int wrmsr_safe_regs_on_cpu ( unsigned int , t#u32 [ 8 ] ) 

/* arch/x86/lib/usercopy_64.o */
__strncpy_from_user __attribute__ ( ( warn_unused_result ) ) long __strncpy_from_user ( char * , const char * , long ) 
strncpy_from_user __attribute__ ( ( warn_unused_result ) ) long strncpy_from_user ( char * , const char * , long ) 
__clear_user __attribute__ ( ( warn_unused_result ) ) unsigned long __clear_user ( void * , unsigned long ) 
clear_user __attribute__ ( ( warn_unused_result ) ) unsigned long clear_user ( void * , unsigned long ) 
__strnlen_user __attribute__ ( ( warn_unused_result ) ) long __strnlen_user ( const char * , long ) 
strnlen_user __attribute__ ( ( warn_unused_result ) ) long strnlen_user ( const char * , long ) 
strlen_user __attribute__ ( ( warn_unused_result ) ) long strlen_user ( const char * ) 
copy_in_user __attribute__ ( ( warn_unused_result ) ) unsigned long copy_in_user ( void * , const void * , unsigned ) 

/* arch/x86/mm/init_64.o */
__supported_pte_mask extern t#pteval_t __supported_pte_mask 
arch_add_memory extern int arch_add_memory ( int , t#u64 , t#u64 ) 
rodata_test_data extern const int rodata_test_data 
mark_rodata_ro void mark_rodata_ro ( void ) 
mark_rodata_rw void mark_rodata_rw ( void ) 

/* arch/x86/mm/ioremap.o */
ioremap_nocache extern void * ioremap_nocache ( t#resource_size_t , unsigned long ) 
ioremap_wc extern void * ioremap_wc ( t#resource_size_t , unsigned long ) 
ioremap_cache extern void * ioremap_cache ( t#resource_size_t , unsigned long ) 
ioremap_prot extern void * ioremap_prot ( t#resource_size_t , unsigned long , unsigned long ) 
iounmap extern void iounmap ( volatile void * ) 

/* arch/x86/mm/kmmio.o */
t#kmmio_pre_handler_t typedef void ( * kmmio_pre_handler_t ) ( s#kmmio_probe * , s#pt_regs * , unsigned long ) 
t#kmmio_post_handler_t typedef void ( * kmmio_post_handler_t ) ( s#kmmio_probe * , unsigned long , s#pt_regs * ) 
s#kmmio_probe struct kmmio_probe { s#list_head list ; unsigned long addr ; unsigned long len ; t#kmmio_pre_handler_t pre_handler ; t#kmmio_post_handler_t post_handler ; void * private ; } 
register_kmmio_probe extern int register_kmmio_probe ( s#kmmio_probe * ) 
unregister_kmmio_probe extern void unregister_kmmio_probe ( s#kmmio_probe * ) 

/* arch/x86/mm/mmio-mod.o */
mmiotrace_printk extern int mmiotrace_printk ( const char * , ... ) 

/* arch/x86/mm/numa.o */
node_to_cpumask_map extern t#cpumask_var_t node_to_cpumask_map [ ( 1 << 9 ) ] 

/* arch/x86/mm/numa_64.o */
s#per_cpu_pages struct per_cpu_pages { int count ; int high ; int batch ; s#list_head lists [ 3 ] ; } 
s#per_cpu_pageset struct per_cpu_pageset { s#per_cpu_pages pcp ; t#s8 expire ; t#s8 stat_threshold ; t#s8 vm_stat_diff [ NR_VM_ZONE_STAT_ITEMS ] ; } 
t#seqlock_t typedef struct { unsigned sequence ; t#spinlock_t lock ; } seqlock_t 
s#free_area struct free_area { s#list_head free_list [ 5 ] ; unsigned long nr_free ; } 
s#zone_padding struct zone_padding { char x [ 0 ] ; } 
s#zone_lru struct zone_lru { s#list_head list ; } 
s#zone_reclaim_stat struct zone_reclaim_stat { unsigned long recent_rotated [ 2 ] ; unsigned long recent_scanned [ 2 ] ; unsigned long nr_saved_scan [ NR_LRU_LISTS ] ; } 
s#zone struct zone { unsigned long pages_emerg ; unsigned long watermark [ NR_WMARK ] ; unsigned long lowmem_reserve [ 4 ] ; int node ; unsigned long min_unmapped_pages ; unsigned long min_slab_pages ; s#per_cpu_pageset * pageset [ 512 ] ; t#spinlock_t lock ; t#seqlock_t span_seqlock ; s#free_area free_area [ 11 ] ; s#zone_padding _pad1_ ; t#spinlock_t lru_lock ; s#zone_lru lru [ NR_LRU_LISTS ] ; s#zone_reclaim_stat reclaim_stat ; unsigned long pages_scanned ; unsigned long flags ; t#atomic_long_t vm_stat [ NR_VM_ZONE_STAT_ITEMS ] ; int prev_priority ; unsigned int inactive_ratio ; s#zone_padding _pad2_ ; t#wait_queue_head_t * wait_table ; unsigned long wait_table_hash_nr_entries ; unsigned long wait_table_bits ; s#pglist_data * zone_pgdat ; unsigned long zone_start_pfn ; unsigned long spanned_pages ; unsigned long present_pages ; const char * name ; } 
s#zonelist_cache struct zonelist_cache { unsigned short z_to_n [ ( ( 1 << 9 ) * 4 ) ] ; unsigned long fullzones [ ( ( ( ( ( 1 << 9 ) * 4 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long last_full_zap ; } 
s#zoneref struct zoneref { s#zone * zone ; int zone_idx ; } 
s#zonelist struct zonelist { s#zonelist_cache * zlcache_ptr ; s#zoneref _zonerefs [ ( ( 1 << 9 ) * 4 ) + 1 ] ; s#zonelist_cache zlcache ; } 
s#bootmem_data struct bootmem_data { unsigned long node_min_pfn ; unsigned long node_low_pfn ; void * node_bootmem_map ; unsigned long last_end_off ; unsigned long hint_idx ; s#list_head list ; } 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s#pglist_data struct pglist_data { s#zone node_zones [ 4 ] ; s#zonelist node_zonelists [ 2 ] ; int nr_zones ; s#bootmem_data * bdata ; t#spinlock_t node_size_lock ; unsigned long node_start_pfn ; unsigned long node_present_pages ; unsigned long node_spanned_pages ; int node_id ; t#wait_queue_head_t kswapd_wait ; s#task_struct * kswapd ; int kswapd_max_order ; } 
t#pg_data_t typedef s#pglist_data pg_data_t 
node_data extern t#pg_data_t * node_data [ ] 
per_cpu__node_number extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( int ) per_cpu__node_number 
per_cpu__x86_cpu_to_node_map extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( int ) per_cpu__x86_cpu_to_node_map 

/* arch/x86/mm/pageattr.o */
clflush_cache_range void clflush_cache_range ( void * , unsigned int ) 
lookup_address extern t#pte_t * lookup_address ( unsigned long , unsigned int * ) 
set_memory_uc int set_memory_uc ( unsigned long , int ) 
set_memory_array_uc int set_memory_array_uc ( unsigned long * , int ) 
set_memory_wc int set_memory_wc ( unsigned long , int ) 
set_memory_wb int set_memory_wb ( unsigned long , int ) 
set_memory_array_wb int set_memory_array_wb ( unsigned long * , int ) 
set_memory_x int set_memory_x ( unsigned long , int ) 
set_memory_nx int set_memory_nx ( unsigned long , int ) 
set_memory_ro int set_memory_ro ( unsigned long , int ) 
set_memory_rw int set_memory_rw ( unsigned long , int ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
set_pages_uc int set_pages_uc ( s#page * , int ) 
set_pages_array_uc int set_pages_array_uc ( s#page * * , int ) 
set_pages_wb int set_pages_wb ( s#page * , int ) 
set_pages_array_wb int set_pages_array_wb ( s#page * * , int ) 
set_pages_x int set_pages_x ( s#page * , int ) 
set_pages_nx int set_pages_nx ( s#page * , int ) 

/* arch/x86/mm/pat.o */
pgprot_writecombine extern t#pgprot_t pgprot_writecombine ( t#pgprot_t ) 

/* arch/x86/mm/physaddr.o */
__phys_addr extern unsigned long __phys_addr ( unsigned long ) 
__virt_addr_valid extern t#bool __virt_addr_valid ( unsigned long ) 

/* arch/x86/mm/srat_64.o */
__node_distance extern int __node_distance ( int , int ) 
memory_add_physaddr_to_nid extern int memory_add_physaddr_to_nid ( t#u64 ) 

/* arch/x86/mm/tlb.o */
leave_mm void leave_mm ( int ) 

/* arch/x86/pci/i386.o */
pcibios_align_resource void pcibios_align_resource ( void * , s#resource * , t#resource_size_t , t#resource_size_t ) 

/* block/blk-barrier.o */
s#call_single_data struct call_single_data { s#list_head list ; void ( * func ) ( void * ) ; void * info ; t#u16 flags ; t#u16 priv ; } 
e#rq_cmd_type_bits enum rq_cmd_type_bits { REQ_TYPE_FS = 1 , REQ_TYPE_BLOCK_PC , REQ_TYPE_SENSE , REQ_TYPE_PM_SUSPEND , REQ_TYPE_PM_RESUME , REQ_TYPE_PM_SHUTDOWN , REQ_TYPE_SPECIAL , REQ_TYPE_LINUX_BLOCK , REQ_TYPE_ATA_TASKFILE , REQ_TYPE_ATA_PC , } 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
t#congested_fn typedef int ( congested_fn ) ( void * , int ) 
s#percpu_counter struct percpu_counter { t#spinlock_t lock ; t#s64 count ; s#list_head list ; t#s32 * counters ; } 
s#prop_local_percpu struct prop_local_percpu { s#percpu_counter events ; int shift ; unsigned long period ; t#spinlock_t lock ; } 
s#bdi_writeback struct bdi_writeback { s#list_head list ; s#backing_dev_info * bdi ; unsigned int nr ; unsigned long last_old_flush ; s#task_struct * task ; s#list_head b_dirty ; s#list_head b_io ; s#list_head b_more_io ; } 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s#backing_dev_info struct backing_dev_info { s#list_head bdi_list ; s#rcu_head rcu_head ; unsigned long ra_pages ; unsigned long state ; unsigned int capabilities ; t#congested_fn * congested_fn ; void * congested_data ; void ( * unplug_io_fn ) ( s#backing_dev_info * , s#page * ) ; void * unplug_io_data ; char * name ; s#percpu_counter bdi_stat [ NR_BDI_STAT_ITEMS ] ; s#prop_local_percpu completions ; int dirty_exceeded ; unsigned int min_ratio ; unsigned int max_ratio , max_prop_frac ; s#bdi_writeback wb ; t#spinlock_t wb_lock ; s#list_head wb_list ; unsigned long wb_mask ; unsigned int wb_cnt ; s#list_head work_list ; s#device * dev ; s#dentry * debug_dir ; s#dentry * debug_stats ; } 
e#writeback_sync_modes enum writeback_sync_modes { WB_SYNC_NONE , WB_SYNC_ALL , } 
s#writeback_control struct writeback_control { s#backing_dev_info * bdi ; s#super_block * sb ; e#writeback_sync_modes sync_mode ; unsigned long * older_than_this ; long nr_to_write ; long pages_skipped ; t#loff_t range_start ; t#loff_t range_end ; unsigned nonblocking : 1 ; unsigned encountered_congestion : 1 ; unsigned for_kupdate : 1 ; unsigned for_reclaim : 1 ; unsigned range_cyclic : 1 ; unsigned more_io : 1 ; unsigned no_nrwrite_index_update : 1 ; } 
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s#as_io_context struct as_io_context { t#spinlock_t lock ; void ( * dtor ) ( s#as_io_context * ) ; void ( * exit ) ( s#as_io_context * ) ; unsigned long state ; t#atomic_t nr_queued ; t#atomic_t nr_dispatched ; unsigned long last_end_request ; unsigned long ttime_total ; unsigned long ttime_samples ; unsigned long ttime_mean ; unsigned int seek_samples ; t#sector_t last_request_pos ; t#u64 seek_total ; t#sector_t seek_mean ; } 
s#io_context struct io_context { t#atomic_long_t refcount ; t#atomic_t nr_tasks ; t#spinlock_t lock ; unsigned short ioprio ; unsigned short ioprio_changed ; unsigned long last_waited ; int nr_batch_requests ; s#as_io_context * aic ; s#radix_tree_root radix_root ; s#hlist_head cic_list ; void * ioc_data ; } 
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s#disk_stats struct disk_stats { unsigned long sectors [ 2 ] ; unsigned long ios [ 2 ] ; unsigned long merges [ 2 ] ; unsigned long ticks [ 2 ] ; unsigned long io_ticks ; unsigned long time_in_queue ; } 
s#hd_struct struct hd_struct { t#sector_t start_sect ; t#sector_t nr_sects ; t#sector_t alignment_offset ; s#device __dev ; s#kobject * holder_dir ; int policy , partno ; unsigned long stamp ; int in_flight [ 2 ] ; s#disk_stats * dkstats ; s#rcu_head rcu_head ; } 
s#disk_part_tbl struct disk_part_tbl { s#rcu_head rcu_head ; int len ; s#hd_struct * last_lookup ; s#hd_struct * part [ ] ; } 
s##hd_geometry
s#block_device_operations struct block_device_operations { int ( * open ) ( s#block_device * , t#fmode_t ) ; int ( * release ) ( s#gendisk * , t#fmode_t ) ; int ( * locked_ioctl ) ( s#block_device * , t#fmode_t , unsigned , unsigned long ) ; int ( * ioctl ) ( s#block_device * , t#fmode_t , unsigned , unsigned long ) ; int ( * compat_ioctl ) ( s#block_device * , t#fmode_t , unsigned , unsigned long ) ; int ( * direct_access ) ( s#block_device * , t#sector_t , void * * , unsigned long * ) ; int ( * media_changed ) ( s#gendisk * ) ; unsigned long long ( * set_capacity ) ( s#gendisk * , unsigned long long ) ; int ( * revalidate_disk ) ( s#gendisk * ) ; int ( * getgeo ) ( s#block_device * , s#hd_geometry * ) ; s#module * owner ; } 
s##timer_rand_state
s#blk_integrity_exchg struct blk_integrity_exchg { void * prot_buf ; void * data_buf ; t#sector_t sector ; unsigned int data_size ; unsigned short sector_size ; const char * disk_name ; } 
t#integrity_gen_fn typedef void ( integrity_gen_fn ) ( s#blk_integrity_exchg * ) 
t#integrity_vrfy_fn typedef int ( integrity_vrfy_fn ) ( s#blk_integrity_exchg * ) 
t#integrity_set_tag_fn typedef void ( integrity_set_tag_fn ) ( void * , void * , unsigned int ) 
t#integrity_get_tag_fn typedef void ( integrity_get_tag_fn ) ( void * , void * , unsigned int ) 
s#blk_integrity struct blk_integrity { t#integrity_gen_fn * generate_fn ; t#integrity_vrfy_fn * verify_fn ; t#integrity_set_tag_fn * set_tag_fn ; t#integrity_get_tag_fn * get_tag_fn ; unsigned short flags ; unsigned short tuple_size ; unsigned short sector_size ; unsigned short tag_size ; const char * name ; s#kobject kobj ; } 
s#gendisk struct gendisk { int major ; int first_minor ; int minors ; char disk_name [ 32 ] ; char * ( * devnode ) ( s#gendisk * , t#mode_t * ) ; s#disk_part_tbl * part_tbl ; s#hd_struct part0 ; const s#block_device_operations * fops ; s#request_queue * queue ; void * private_data ; int flags ; s#device * driverfs_dev ; s#kobject * slave_dir ; s#timer_rand_state * random ; t#atomic_t sync_io ; s#work_struct async_notify ; s#blk_integrity * integrity ; int node_id ; } 
s#bio_vec struct bio_vec { s#page * bv_page ; unsigned int bv_len ; unsigned int bv_offset ; } 
t#bio_end_io_t typedef void ( bio_end_io_t ) ( s#bio * , int ) 
s#bio_integrity_payload struct bio_integrity_payload { s#bio * bip_bio ; t#sector_t bip_sector ; void * bip_buf ; t#bio_end_io_t * bip_end_io ; unsigned int bip_size ; unsigned short bip_slab ; unsigned short bip_vcnt ; unsigned short bip_idx ; s#work_struct bip_work ; s#bio_vec bip_vec [ 0 ] ; } 
t#bio_destructor_t typedef void ( bio_destructor_t ) ( s#bio * ) 
s#bio struct bio { t#sector_t bi_sector ; s#bio * bi_next ; s#block_device * bi_bdev ; unsigned long bi_flags ; unsigned long bi_rw ; unsigned short bi_vcnt ; unsigned short bi_idx ; unsigned int bi_phys_segments ; unsigned int bi_size ; unsigned int bi_seg_front_size ; unsigned int bi_seg_back_size ; unsigned int bi_max_vecs ; unsigned int bi_comp_cpu ; t#atomic_t bi_cnt ; s#bio_vec * bi_io_vec ; t#bio_end_io_t * bi_end_io ; void * bi_private ; s#bio_integrity_payload * bi_integrity ; t#bio_destructor_t * bi_destructor ; s#bio_vec bi_inline_vecs [ 0 ] ; } 
t#rq_end_io_fn typedef void ( rq_end_io_fn ) ( s#request * , int ) 
s#request struct request { s#list_head queuelist ; s#call_single_data csd ; int cpu ; s#request_queue * q ; unsigned int cmd_flags ; e#rq_cmd_type_bits cmd_type ; unsigned long atomic_flags ; t#sector_t __sector ; unsigned int __data_len ; s#bio * bio ; s#bio * biotail ; s#hlist_node hash ; union { s#rb_node rb_node ; void * completion_data ; } ; void * elevator_private ; void * elevator_private2 ; s#gendisk * rq_disk ; unsigned long start_time ; unsigned short nr_phys_segments ; unsigned short ioprio ; void * special ; char * buffer ; int tag ; int errors ; int ref_count ; unsigned short cmd_len ; unsigned char __cmd [ 16 ] ; unsigned char * cmd ; unsigned int extra_len ; unsigned int sense_len ; unsigned int resid_len ; void * sense ; unsigned long deadline ; s#list_head timeout_list ; unsigned int timeout ; int retries ; t#rq_end_io_fn * end_io ; void * end_io_data ; s#request * next_rq ; } 
t#elevator_merge_fn typedef int ( elevator_merge_fn ) ( s#request_queue * , s#request * * , s#bio * ) 
t#elevator_merged_fn typedef void ( elevator_merged_fn ) ( s#request_queue * , s#request * , int ) 
t#elevator_merge_req_fn typedef void ( elevator_merge_req_fn ) ( s#request_queue * , s#request * , s#request * ) 
t#elevator_allow_merge_fn typedef int ( elevator_allow_merge_fn ) ( s#request_queue * , s#request * , s#bio * ) 
t#elevator_dispatch_fn typedef int ( elevator_dispatch_fn ) ( s#request_queue * , int ) 
t#elevator_add_req_fn typedef void ( elevator_add_req_fn ) ( s#request_queue * , s#request * ) 
t#elevator_activate_req_fn typedef void ( elevator_activate_req_fn ) ( s#request_queue * , s#request * ) 
t#elevator_deactivate_req_fn typedef void ( elevator_deactivate_req_fn ) ( s#request_queue * , s#request * ) 
t#elevator_queue_empty_fn typedef int ( elevator_queue_empty_fn ) ( s#request_queue * ) 
t#elevator_completed_req_fn typedef void ( elevator_completed_req_fn ) ( s#request_queue * , s#request * ) 
t#elevator_request_list_fn typedef s#request * ( elevator_request_list_fn ) ( s#request_queue * , s#request * ) 
t#elevator_set_req_fn typedef int ( elevator_set_req_fn ) ( s#request_queue * , s#request * , t#gfp_t ) 
t#elevator_put_req_fn typedef void ( elevator_put_req_fn ) ( s#request * ) 
t#elevator_may_queue_fn typedef int ( elevator_may_queue_fn ) ( s#request_queue * , int ) 
t#elevator_init_fn typedef void * ( elevator_init_fn ) ( s#request_queue * ) 
t#elevator_exit_fn typedef void ( elevator_exit_fn ) ( s#elevator_queue * ) 
s#elevator_ops struct elevator_ops { t#elevator_merge_fn * elevator_merge_fn ; t#elevator_merged_fn * elevator_merged_fn ; t#elevator_merge_req_fn * elevator_merge_req_fn ; t#elevator_allow_merge_fn * elevator_allow_merge_fn ; t#elevator_dispatch_fn * elevator_dispatch_fn ; t#elevator_add_req_fn * elevator_add_req_fn ; t#elevator_activate_req_fn * elevator_activate_req_fn ; t#elevator_deactivate_req_fn * elevator_deactivate_req_fn ; t#elevator_queue_empty_fn * elevator_queue_empty_fn ; t#elevator_completed_req_fn * elevator_completed_req_fn ; t#elevator_request_list_fn * elevator_former_req_fn ; t#elevator_request_list_fn * elevator_latter_req_fn ; t#elevator_set_req_fn * elevator_set_req_fn ; t#elevator_put_req_fn * elevator_put_req_fn ; t#elevator_may_queue_fn * elevator_may_queue_fn ; t#elevator_init_fn * elevator_init_fn ; t#elevator_exit_fn * elevator_exit_fn ; void ( * trim ) ( s#io_context * ) ; } 
s#elv_fs_entry struct elv_fs_entry { s#attribute attr ; t#ssize_t ( * show ) ( s#elevator_queue * , char * ) ; t#ssize_t ( * store ) ( s#elevator_queue * , const char * , t#size_t ) ; } 
s#elevator_type struct elevator_type { s#list_head list ; s#elevator_ops ops ; s#elv_fs_entry * elevator_attrs ; char elevator_name [ ( 16 ) ] ; s#module * elevator_owner ; } 
s#elevator_queue struct elevator_queue { s#elevator_ops * ops ; void * elevator_data ; s#kobject kobj ; s#elevator_type * elevator_type ; s#mutex sysfs_lock ; s#hlist_head * hash ; } 
t#mempool_alloc_t typedef void * ( mempool_alloc_t ) ( t#gfp_t , void * ) 
t#mempool_free_t typedef void ( mempool_free_t ) ( void * , void * ) 
s#mempool_s struct mempool_s { t#spinlock_t lock ; int min_nr ; int curr_nr ; void * * elements ; void * pool_data ; t#mempool_alloc_t * alloc ; t#mempool_free_t * free ; t#wait_queue_head_t wait ; } 
t#mempool_t typedef s#mempool_s mempool_t 
s#request_list struct request_list { int count [ 2 ] ; int starved [ 2 ] ; int elvpriv ; t#mempool_t * rq_pool ; t#wait_queue_head_t wait [ 2 ] ; } 
t#request_fn_proc typedef void ( request_fn_proc ) ( s#request_queue * ) 
t#make_request_fn typedef int ( make_request_fn ) ( s#request_queue * , s#bio * ) 
t#prep_rq_fn typedef int ( prep_rq_fn ) ( s#request_queue * , s#request * ) 
t#unprep_rq_fn typedef void ( unprep_rq_fn ) ( s#request_queue * , s#request * ) 
t#unplug_fn typedef void ( unplug_fn ) ( s#request_queue * ) 
s#bvec_merge_data struct bvec_merge_data { s#block_device * bi_bdev ; t#sector_t bi_sector ; unsigned bi_size ; unsigned long bi_rw ; } 
t#merge_bvec_fn typedef int ( merge_bvec_fn ) ( s#request_queue * , s#bvec_merge_data * , s#bio_vec * ) 
t#prepare_flush_fn typedef void ( prepare_flush_fn ) ( s#request_queue * , s#request * ) 
t#softirq_done_fn typedef void ( softirq_done_fn ) ( s#request * ) 
e#blk_eh_timer_return enum blk_eh_timer_return { BLK_EH_NOT_HANDLED , BLK_EH_HANDLED , BLK_EH_RESET_TIMER , } 
t#rq_timed_out_fn typedef e#blk_eh_timer_return ( rq_timed_out_fn ) ( s#request * ) 
t#dma_drain_needed_fn typedef int ( dma_drain_needed_fn ) ( s#request * ) 
t#lld_busy_fn typedef int ( lld_busy_fn ) ( s#request_queue * ) 
s#blk_queue_tag struct blk_queue_tag { s#request * * tag_index ; unsigned long * tag_map ; int busy ; int max_depth ; int real_max_depth ; t#atomic_t refcnt ; } 
s#queue_limits struct queue_limits { unsigned long bounce_pfn ; unsigned long seg_boundary_mask ; unsigned int max_hw_sectors ; unsigned int max_sectors ; unsigned int max_segment_size ; unsigned int physical_block_size ; unsigned int alignment_offset ; unsigned int io_min ; unsigned int io_opt ; unsigned int max_discard_sectors ; unsigned short logical_block_size ; unsigned short max_hw_segments ; unsigned short max_phys_segments ; unsigned char misaligned ; unsigned char no_cluster ; } 
s##blk_trace
s#bsg_class_device struct bsg_class_device { s#device * class_dev ; s#device * parent ; int minor ; s#request_queue * queue ; s#kref ref ; void ( * release ) ( s#device * ) ; } 
s#request_queue struct request_queue { s#list_head queue_head ; s#request * last_merge ; s#elevator_queue * elevator ; s#request_list rq ; t#request_fn_proc * request_fn ; t#make_request_fn * make_request_fn ; t#prep_rq_fn * prep_rq_fn ; t#unprep_rq_fn * unprep_rq_fn ; t#unplug_fn * unplug_fn ; t#merge_bvec_fn * merge_bvec_fn ; t#prepare_flush_fn * prepare_flush_fn ; t#softirq_done_fn * softirq_done_fn ; t#rq_timed_out_fn * rq_timed_out_fn ; t#dma_drain_needed_fn * dma_drain_needed ; t#lld_busy_fn * lld_busy_fn ; t#sector_t end_sector ; s#request * boundary_rq ; s#timer_list unplug_timer ; int unplug_thresh ; unsigned long unplug_delay ; s#work_struct unplug_work ; s#backing_dev_info backing_dev_info ; void * queuedata ; t#gfp_t bounce_gfp ; unsigned long queue_flags ; t#spinlock_t __queue_lock ; t#spinlock_t * queue_lock ; s#kobject kobj ; unsigned long nr_requests ; unsigned int nr_congestion_on ; unsigned int nr_congestion_off ; unsigned int nr_batching ; void * dma_drain_buffer ; unsigned int dma_drain_size ; unsigned int dma_pad_mask ; unsigned int dma_alignment ; s#blk_queue_tag * queue_tags ; s#list_head tag_busy_list ; unsigned int nr_sorted ; unsigned int in_flight [ 2 ] ; unsigned int rq_timeout ; s#timer_list timeout ; s#list_head timeout_list ; s#queue_limits limits ; unsigned int sg_timeout ; unsigned int sg_reserved_size ; int node ; s#blk_trace * blk_trace ; unsigned int ordered , next_ordered , ordseq ; int orderr , ordcolor ; s#request pre_flush_rq , bar_rq , post_flush_rq ; s#request * orig_bar_rq ; s#mutex sysfs_lock ; s#bsg_class_device bsg_dev ; } 
blk_queue_ordered extern int blk_queue_ordered ( s#request_queue * , unsigned , t#prepare_flush_fn * ) 
blkdev_issue_flush extern int blkdev_issue_flush ( s#block_device * , t#sector_t * ) 
blkdev_issue_discard extern int blkdev_issue_discard ( s#block_device * , t#sector_t , t#sector_t , t#gfp_t , int ) 

/* block/blk-core.o */
__tracepoint_block_remap extern s#tracepoint __tracepoint_block_remap 
__tracepoint_block_rq_remap extern s#tracepoint __tracepoint_block_rq_remap 
__tracepoint_block_bio_complete extern s#tracepoint __tracepoint_block_bio_complete 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s#rchan_buf struct rchan_buf { void * start ; void * data ; t#size_t offset ; t#size_t subbufs_produced ; t#size_t subbufs_consumed ; s#rchan * chan ; t#wait_queue_head_t read_wait ; s#timer_list timer ; s#dentry * dentry ; s#kref kref ; s#page * * page_array ; unsigned int page_count ; unsigned int finalized ; t#size_t * padding ; t#size_t prev_padding ; t#size_t bytes_consumed ; t#size_t early_bytes ; unsigned int cpu ; } 
s#rchan_callbacks struct rchan_callbacks { int ( * subbuf_start ) ( s#rchan_buf * , void * , void * , t#size_t ) ; void ( * buf_mapped ) ( s#rchan_buf * , s#file * ) ; void ( * buf_unmapped ) ( s#rchan_buf * , s#file * ) ; s#dentry * ( * create_buf_file ) ( const char * , s#dentry * , int , s#rchan_buf * , int * ) ; int ( * remove_buf_file ) ( s#dentry * ) ; } 
s#rchan struct rchan { t#u32 version ; t#size_t subbuf_size ; t#size_t n_subbufs ; t#size_t alloc_size ; s#rchan_callbacks * cb ; s#kref kref ; void * private_data ; t#size_t last_toobig ; s#rchan_buf * buf [ 512 ] ; int is_global ; s#list_head list ; s#dentry * parent ; int has_base_filename ; char base_filename [ 255 ] ; } 
s#blk_trace struct blk_trace { int trace_state ; s#rchan * rchan ; unsigned long * sequence ; unsigned char * msg_data ; t#u16 act_mask ; t#u64 start_lba ; t#u64 end_lba ; t#u32 pid ; t#u32 dev ; s#dentry * dir ; s#dentry * dropped_file ; s#dentry * msg_file ; t#atomic_t dropped ; } 
s##timer_rand_state
s##mtd_info
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
blk_get_backing_dev_info extern s#backing_dev_info * blk_get_backing_dev_info ( s#block_device * ) 
blk_rq_init extern void blk_rq_init ( s#request_queue * , s#request * ) 
blk_dump_rq_flags extern void blk_dump_rq_flags ( s#request * , char * ) 
blk_plug_device extern void blk_plug_device ( s#request_queue * ) 
blk_plug_device_unlocked extern void blk_plug_device_unlocked ( s#request_queue * ) 
blk_remove_plug extern int blk_remove_plug ( s#request_queue * ) 
generic_unplug_device extern void generic_unplug_device ( s#request_queue * ) 
blk_unplug extern void blk_unplug ( s#request_queue * ) 
blk_start_queue extern void blk_start_queue ( s#request_queue * ) 
blk_stop_queue extern void blk_stop_queue ( s#request_queue * ) 
blk_sync_queue extern void blk_sync_queue ( s#request_queue * ) 
__blk_run_queue extern void __blk_run_queue ( s#request_queue * ) 
blk_run_queue extern void blk_run_queue ( s#request_queue * ) 
blk_cleanup_queue extern void blk_cleanup_queue ( s#request_queue * ) 
blk_alloc_queue s#request_queue * blk_alloc_queue ( t#gfp_t ) 
blk_alloc_queue_node s#request_queue * blk_alloc_queue_node ( t#gfp_t , int ) 
blk_init_queue extern s#request_queue * blk_init_queue ( t#request_fn_proc * , t#spinlock_t * ) 
blk_init_queue_node extern s#request_queue * blk_init_queue_node ( t#request_fn_proc * , t#spinlock_t * , int ) 
blk_get_request extern s#request * blk_get_request ( s#request_queue * , int , t#gfp_t ) 
blk_make_request extern s#request * blk_make_request ( s#request_queue * , s#bio * , t#gfp_t ) 
blk_requeue_request extern void blk_requeue_request ( s#request_queue * , s#request * ) 
blk_insert_request extern void blk_insert_request ( s#request_queue * , s#request * , int , void * ) 
part_round_stats extern void part_round_stats ( int , s#hd_struct * ) 
__blk_put_request extern void __blk_put_request ( s#request_queue * , s#request * ) 
blk_put_request extern void blk_put_request ( s#request * ) 
generic_make_request extern void generic_make_request ( s#bio * ) 
submit_bio extern void submit_bio ( int , s#bio * ) 
blk_rq_check_limits extern int blk_rq_check_limits ( s#request_queue * , s#request * ) 
blk_insert_cloned_request extern int blk_insert_cloned_request ( s#request_queue * , s#request * ) 
blk_rq_err_bytes extern unsigned int blk_rq_err_bytes ( const s#request * ) 
blk_peek_request extern s#request * blk_peek_request ( s#request_queue * ) 
blk_start_request extern void blk_start_request ( s#request * ) 
blk_fetch_request extern s#request * blk_fetch_request ( s#request_queue * ) 
blk_update_request extern t#bool blk_update_request ( s#request * , int , unsigned int ) 
blk_end_request extern t#bool blk_end_request ( s#request * , int , unsigned int ) 
blk_end_request_all extern void blk_end_request_all ( s#request * , int ) 
blk_end_request_cur extern t#bool blk_end_request_cur ( s#request * , int ) 
blk_end_request_err extern t#bool blk_end_request_err ( s#request * , int ) 
__blk_end_request extern t#bool __blk_end_request ( s#request * , int , unsigned int ) 
__blk_end_request_all extern void __blk_end_request_all ( s#request * , int ) 
__blk_end_request_cur extern t#bool __blk_end_request_cur ( s#request * , int ) 
__blk_end_request_err extern t#bool __blk_end_request_err ( s#request * , int ) 
blk_lld_busy extern int blk_lld_busy ( s#request_queue * ) 
blk_rq_unprep_clone extern void blk_rq_unprep_clone ( s#request * ) 
s#bio_set struct bio_set { s#kmem_cache * bio_slab ; unsigned int front_pad ; t#mempool_t * bio_pool ; t#mempool_t * bio_integrity_pool ; t#mempool_t * bvec_pool ; } 
blk_rq_prep_clone extern int blk_rq_prep_clone ( s#request * , s#request * , s#bio_set * , t#gfp_t , int ( * ) ( s#bio * , s#bio * , void * ) , void * ) 
kblockd_schedule_work int kblockd_schedule_work ( s#request_queue * , s#work_struct * ) 

/* block/blk-exec.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
blk_execute_rq_nowait extern void blk_execute_rq_nowait ( s#request_queue * , s#gendisk * , s#request * , int , t#rq_end_io_fn * ) 
blk_execute_rq extern int blk_execute_rq ( s#request_queue * , s#gendisk * , s#request * , int ) 

/* block/blk-integrity.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
blk_rq_count_integrity_sg extern int blk_rq_count_integrity_sg ( s#request * ) 
blk_rq_map_integrity_sg extern int blk_rq_map_integrity_sg ( s#request * , s#scatterlist * ) 
blk_integrity_compare extern int blk_integrity_compare ( s#gendisk * , s#gendisk * ) 
blk_integrity_register extern int blk_integrity_register ( s#gendisk * , s#blk_integrity * ) 
blk_integrity_unregister extern void blk_integrity_unregister ( s#gendisk * ) 

/* block/blk-ioc.o */
s##radix_tree_node
put_io_context int put_io_context ( s#io_context * ) 
get_io_context s#io_context * get_io_context ( t#gfp_t , int ) 
copy_io_context void copy_io_context ( s#io_context * * , s#io_context * * ) 

/* block/blk-iopoll.o */
blk_iopoll_enabled extern int blk_iopoll_enabled 
t#blk_iopoll_fn typedef int ( blk_iopoll_fn ) ( s#blk_iopoll * , int ) 
s#blk_iopoll struct blk_iopoll { s#list_head list ; unsigned long state ; unsigned long data ; int weight ; int max ; t#blk_iopoll_fn * poll ; } 
blk_iopoll_sched extern void blk_iopoll_sched ( s#blk_iopoll * ) 
__blk_iopoll_complete extern void __blk_iopoll_complete ( s#blk_iopoll * ) 
blk_iopoll_complete extern void blk_iopoll_complete ( s#blk_iopoll * ) 
blk_iopoll_disable extern void blk_iopoll_disable ( s#blk_iopoll * ) 
blk_iopoll_enable extern void blk_iopoll_enable ( s#blk_iopoll * ) 
blk_iopoll_init extern void blk_iopoll_init ( s#blk_iopoll * , int , t#blk_iopoll_fn * ) 

/* block/blk-map.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
s#rq_map_data struct rq_map_data { s#page * * pages ; int page_order ; int nr_entries ; unsigned long offset ; int null_mapped ; int from_user ; } 
blk_rq_map_user extern int blk_rq_map_user ( s#request_queue * , s#request * , s#rq_map_data * , void * , unsigned long , t#gfp_t ) 
s#sg_iovec struct sg_iovec { void * iov_base ; t#size_t iov_len ; } 
blk_rq_map_user_iov extern int blk_rq_map_user_iov ( s#request_queue * , s#request * , s#rq_map_data * , s#sg_iovec * , int , unsigned int , t#gfp_t ) 
blk_rq_unmap_user extern int blk_rq_unmap_user ( s#bio * ) 
blk_rq_map_kern extern int blk_rq_map_kern ( s#request_queue * , s#request * , void * , unsigned int , t#gfp_t ) 

/* block/blk-merge.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
blk_recount_segments extern void blk_recount_segments ( s#request_queue * , s#bio * ) 
blk_rq_map_sg extern int blk_rq_map_sg ( s#request_queue * , s#request * , s#scatterlist * ) 

/* block/blk-settings.o */
blk_max_low_pfn extern unsigned long blk_max_low_pfn 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
blk_queue_prep_rq extern void blk_queue_prep_rq ( s#request_queue * , t#prep_rq_fn * ) 
blk_queue_unprep_rq extern void blk_queue_unprep_rq ( s#request_queue * , t#unprep_rq_fn * ) 
blk_queue_merge_bvec extern void blk_queue_merge_bvec ( s#request_queue * , t#merge_bvec_fn * ) 
blk_queue_softirq_done extern void blk_queue_softirq_done ( s#request_queue * , t#softirq_done_fn * ) 
blk_queue_rq_timeout extern void blk_queue_rq_timeout ( s#request_queue * , unsigned int ) 
blk_queue_rq_timed_out extern void blk_queue_rq_timed_out ( s#request_queue * , t#rq_timed_out_fn * ) 
blk_queue_lld_busy extern void blk_queue_lld_busy ( s#request_queue * , t#lld_busy_fn * ) 
blk_set_default_limits extern void blk_set_default_limits ( s#queue_limits * ) 
blk_queue_make_request extern void blk_queue_make_request ( s#request_queue * , t#make_request_fn * ) 
blk_queue_bounce_limit extern void blk_queue_bounce_limit ( s#request_queue * , t#u64 ) 
blk_queue_max_sectors extern void blk_queue_max_sectors ( s#request_queue * , unsigned int ) 
blk_queue_max_hw_sectors extern void blk_queue_max_hw_sectors ( s#request_queue * , unsigned int ) 
blk_queue_max_discard_sectors extern void blk_queue_max_discard_sectors ( s#request_queue * , unsigned int ) 
blk_queue_max_phys_segments extern void blk_queue_max_phys_segments ( s#request_queue * , unsigned short ) 
blk_queue_max_hw_segments extern void blk_queue_max_hw_segments ( s#request_queue * , unsigned short ) 
blk_queue_max_segment_size extern void blk_queue_max_segment_size ( s#request_queue * , unsigned int ) 
blk_queue_logical_block_size extern void blk_queue_logical_block_size ( s#request_queue * , unsigned short ) 
blk_queue_physical_block_size extern void blk_queue_physical_block_size ( s#request_queue * , unsigned short ) 
blk_queue_alignment_offset extern void blk_queue_alignment_offset ( s#request_queue * , unsigned int ) 
blk_limits_io_min extern void blk_limits_io_min ( s#queue_limits * , unsigned int ) 
blk_queue_io_min extern void blk_queue_io_min ( s#request_queue * , unsigned int ) 
blk_limits_io_opt extern void blk_limits_io_opt ( s#queue_limits * , unsigned int ) 
blk_queue_io_opt extern void blk_queue_io_opt ( s#request_queue * , unsigned int ) 
blk_queue_stack_limits extern void blk_queue_stack_limits ( s#request_queue * , s#request_queue * ) 
blk_stack_limits extern int blk_stack_limits ( s#queue_limits * , s#queue_limits * , t#sector_t ) 
bdev_stack_limits extern int bdev_stack_limits ( s#queue_limits * , s#block_device * , t#sector_t ) 
disk_stack_limits extern void disk_stack_limits ( s#gendisk * , s#block_device * , t#sector_t ) 
blk_queue_dma_pad extern void blk_queue_dma_pad ( s#request_queue * , unsigned int ) 
blk_queue_update_dma_pad extern void blk_queue_update_dma_pad ( s#request_queue * , unsigned int ) 
blk_queue_dma_drain extern int blk_queue_dma_drain ( s#request_queue * , t#dma_drain_needed_fn * , void * , unsigned int ) 
blk_queue_segment_boundary extern void blk_queue_segment_boundary ( s#request_queue * , unsigned long ) 
blk_queue_dma_alignment extern void blk_queue_dma_alignment ( s#request_queue * , int ) 
blk_queue_update_dma_alignment extern void blk_queue_update_dma_alignment ( s#request_queue * , int ) 

/* block/blk-softirq.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
blk_complete_request extern void blk_complete_request ( s#request * ) 

/* block/blk-tag.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
blk_queue_find_tag extern s#request * blk_queue_find_tag ( s#request_queue * , int ) 
blk_free_tags extern void blk_free_tags ( s#blk_queue_tag * ) 
blk_queue_free_tags extern void blk_queue_free_tags ( s#request_queue * ) 
blk_init_tags extern s#blk_queue_tag * blk_init_tags ( int ) 
blk_queue_init_tags extern int blk_queue_init_tags ( s#request_queue * , int , s#blk_queue_tag * ) 
blk_queue_resize_tags extern int blk_queue_resize_tags ( s#request_queue * , int ) 
blk_queue_end_tag extern void blk_queue_end_tag ( s#request_queue * , s#request * ) 
blk_queue_start_tag extern int blk_queue_start_tag ( s#request_queue * , s#request * ) 
blk_queue_invalidate_tags extern void blk_queue_invalidate_tags ( s#request_queue * ) 

/* block/blk-timeout.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
blk_abort_request extern void blk_abort_request ( s#request * ) 
blk_request_aborted extern int blk_request_aborted ( s#request * ) 
blk_abort_queue extern void blk_abort_queue ( s#request_queue * ) 

/* block/bsg.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
bsg_unregister_queue extern void bsg_unregister_queue ( s#request_queue * ) 
bsg_register_queue extern int bsg_register_queue ( s#request_queue * , s#device * , const char * , void ( * ) ( s#device * ) ) 

/* block/elevator.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
elv_rq_merge_ok extern int elv_rq_merge_ok ( s#request * , s#bio * ) 
elevator_init extern int elevator_init ( s#request_queue * , char * ) 
elevator_exit extern void elevator_exit ( s#elevator_queue * ) 
elv_rb_add extern s#request * elv_rb_add ( s#rb_root * , s#request * ) 
elv_rb_del extern void elv_rb_del ( s#rb_root * , s#request * ) 
elv_rb_find extern s#request * elv_rb_find ( s#rb_root * , t#sector_t ) 
elv_dispatch_sort extern void elv_dispatch_sort ( s#request_queue * , s#request * ) 
elv_dispatch_add_tail extern void elv_dispatch_add_tail ( s#request_queue * , s#request * ) 
__elv_add_request extern void __elv_add_request ( s#request_queue * , s#request * , int , int ) 
elv_add_request extern void elv_add_request ( s#request_queue * , s#request * , int , int ) 
elv_queue_empty extern int elv_queue_empty ( s#request_queue * ) 
elv_abort_queue extern void elv_abort_queue ( s#request_queue * ) 
elv_register extern void elv_register ( s#elevator_type * ) 
elv_unregister extern void elv_unregister ( s#elevator_type * ) 
elv_rb_former_request extern s#request * elv_rb_former_request ( s#request_queue * , s#request * ) 
elv_rb_latter_request extern s#request * elv_rb_latter_request ( s#request_queue * , s#request * ) 

/* block/genhd.o */
blk_mangle_devt extern int blk_mangle_devt 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
disk_get_part extern s#hd_struct * disk_get_part ( s#gendisk * , int ) 
s#disk_part_iter struct disk_part_iter { s#gendisk * disk ; s#hd_struct * part ; int idx ; unsigned int flags ; } 
disk_part_iter_init extern void disk_part_iter_init ( s#disk_part_iter * , s#gendisk * , unsigned int ) 
disk_part_iter_next extern s#hd_struct * disk_part_iter_next ( s#disk_part_iter * ) 
disk_part_iter_exit extern void disk_part_iter_exit ( s#disk_part_iter * ) 
disk_map_sector_rcu extern s#hd_struct * disk_map_sector_rcu ( s#gendisk * , t#sector_t ) 
register_blkdev extern int register_blkdev ( unsigned int , const char * ) 
unregister_blkdev extern void unregister_blkdev ( unsigned int , const char * ) 
blk_register_region extern void blk_register_region ( t#dev_t , unsigned long , s#module * , s#kobject * ( * ) ( t#dev_t , int * , void * ) , int ( * ) ( t#dev_t , void * ) , void * ) 
blk_unregister_region extern void blk_unregister_region ( t#dev_t , unsigned long ) 
add_disk extern void add_disk ( s#gendisk * ) 
del_gendisk extern void del_gendisk ( s#gendisk * ) 
bdget_disk extern s#block_device * bdget_disk ( s#gendisk * , int ) 
blk_lookup_devt extern t#dev_t blk_lookup_devt ( const char * , int ) 
alloc_disk extern s#gendisk * alloc_disk ( int ) 
alloc_disk_node extern s#gendisk * alloc_disk_node ( int , int ) 
get_disk extern s#kobject * get_disk ( s#gendisk * ) 
put_disk extern void put_disk ( s#gendisk * ) 
set_device_ro extern void set_device_ro ( s#block_device * , int ) 
set_disk_ro extern void set_disk_ro ( s#gendisk * , int ) 
bdev_read_only extern int bdev_read_only ( s#block_device * ) 
invalidate_partition extern int invalidate_partition ( s#gendisk * , int ) 

/* block/ioctl.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s#hd_geometry struct hd_geometry { unsigned char heads ; unsigned char sectors ; unsigned short cylinders ; unsigned long start ; } 
s##timer_rand_state
__blkdev_driver_ioctl extern int __blkdev_driver_ioctl ( s#block_device * , t#fmode_t , unsigned int , unsigned long ) 
blkdev_ioctl extern int blkdev_ioctl ( s#block_device * , t#fmode_t , unsigned , unsigned long ) 

/* block/scsi_ioctl.o */
scsi_command_size_tbl extern const unsigned char scsi_command_size_tbl [ 8 ] 
blk_verify_command extern int blk_verify_command ( unsigned char * , t#fmode_t ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
s#scsi_ioctl_command struct scsi_ioctl_command { unsigned int inlen ; unsigned int outlen ; unsigned char data [ 0 ] ; } 
sg_scsi_ioctl extern int sg_scsi_ioctl ( s#request_queue * , s#gendisk * , t#fmode_t , s#scsi_ioctl_command * ) 
scsi_cmd_ioctl extern int scsi_cmd_ioctl ( s#request_queue * , s#gendisk * , t#fmode_t , unsigned int , void * ) 

/* crypto/ablkcipher.o */
t#crypto_completion_t typedef void ( * crypto_completion_t ) ( s#crypto_async_request * , int ) 
s#crypto_async_request struct crypto_async_request { s#list_head list ; t#crypto_completion_t complete ; void * data ; s#crypto_tfm * tfm ; t#u32 flags ; } 
s#ablkcipher_request struct ablkcipher_request { s#crypto_async_request base ; unsigned int nbytes ; void * info ; s#scatterlist * src ; s#scatterlist * dst ; void * __ctx [ ] __attribute__ ( ( __aligned__ ( __alignof__ ( unsigned long long ) ) ) ) ; } 
s#skcipher_givcrypt_request struct skcipher_givcrypt_request { t#u64 seq ; t#u8 * giv ; s#ablkcipher_request creq ; } 
s#ablkcipher_tfm struct ablkcipher_tfm { int ( * setkey ) ( s#crypto_ablkcipher * , const t#u8 * , unsigned int ) ; int ( * encrypt ) ( s#ablkcipher_request * ) ; int ( * decrypt ) ( s#ablkcipher_request * ) ; int ( * givencrypt ) ( s#skcipher_givcrypt_request * ) ; int ( * givdecrypt ) ( s#skcipher_givcrypt_request * ) ; s#crypto_ablkcipher * base ; unsigned int ivsize ; unsigned int reqsize ; } 
s#crypto_aead struct crypto_aead { s#crypto_tfm base ; } 
s#aead_request struct aead_request { s#crypto_async_request base ; unsigned int assoclen ; unsigned int cryptlen ; t#u8 * iv ; s#scatterlist * assoc ; s#scatterlist * src ; s#scatterlist * dst ; void * __ctx [ ] __attribute__ ( ( __aligned__ ( __alignof__ ( unsigned long long ) ) ) ) ; } 
s##aead_givcrypt_request
s#aead_tfm struct aead_tfm { int ( * setkey ) ( s#crypto_aead * , const t#u8 * , unsigned int ) ; int ( * encrypt ) ( s#aead_request * ) ; int ( * decrypt ) ( s#aead_request * ) ; int ( * givencrypt ) ( s#aead_givcrypt_request * ) ; int ( * givdecrypt ) ( s#aead_givcrypt_request * ) ; s#crypto_aead * base ; unsigned int ivsize ; unsigned int authsize ; unsigned int reqsize ; } 
s#crypto_blkcipher struct crypto_blkcipher { s#crypto_tfm base ; } 
s#blkcipher_desc struct blkcipher_desc { s#crypto_blkcipher * tfm ; void * info ; t#u32 flags ; } 
s#blkcipher_tfm struct blkcipher_tfm { void * iv ; int ( * setkey ) ( s#crypto_tfm * , const t#u8 * , unsigned int ) ; int ( * encrypt ) ( s#blkcipher_desc * , s#scatterlist * , s#scatterlist * , unsigned int ) ; int ( * decrypt ) ( s#blkcipher_desc * , s#scatterlist * , s#scatterlist * , unsigned int ) ; } 
s#cipher_tfm struct cipher_tfm { int ( * cit_setkey ) ( s#crypto_tfm * , const t#u8 * , unsigned int ) ; void ( * cit_encrypt_one ) ( s#crypto_tfm * , t#u8 * , const t#u8 * ) ; void ( * cit_decrypt_one ) ( s#crypto_tfm * , t#u8 * , const t#u8 * ) ; } 
s#crypto_hash struct crypto_hash { s#crypto_tfm base ; } 
s#hash_desc struct hash_desc { s#crypto_hash * tfm ; t#u32 flags ; } 
s#hash_tfm struct hash_tfm { int ( * init ) ( s#hash_desc * ) ; int ( * update ) ( s#hash_desc * , s#scatterlist * , unsigned int ) ; int ( * final ) ( s#hash_desc * , t#u8 * ) ; int ( * digest ) ( s#hash_desc * , s#scatterlist * , unsigned int , t#u8 * ) ; int ( * setkey ) ( s#crypto_hash * , const t#u8 * , unsigned int ) ; unsigned int digestsize ; } 
s#compress_tfm struct compress_tfm { int ( * cot_compress ) ( s#crypto_tfm * , const t#u8 * , unsigned int , t#u8 * , unsigned int * ) ; int ( * cot_decompress ) ( s#crypto_tfm * , const t#u8 * , unsigned int , t#u8 * , unsigned int * ) ; } 
s#crypto_rng struct crypto_rng { s#crypto_tfm base ; } 
s#rng_tfm struct rng_tfm { int ( * rng_gen_random ) ( s#crypto_rng * , t#u8 * , unsigned int ) ; int ( * rng_reset ) ( s#crypto_rng * , t#u8 * , unsigned int ) ; } 
s#crypto_tfm struct crypto_tfm { t#u32 crt_flags ; union { s#ablkcipher_tfm ablkcipher ; s#aead_tfm aead ; s#blkcipher_tfm blkcipher ; s#cipher_tfm cipher ; s#hash_tfm hash ; s#compress_tfm compress ; s#rng_tfm rng ; } crt_u ; void ( * exit ) ( s#crypto_tfm * ) ; s#crypto_alg * __crt_alg ; void * __crt_ctx [ ] __attribute__ ( ( __aligned__ ( __alignof__ ( unsigned long long ) ) ) ) ; } 
s#crypto_ablkcipher struct crypto_ablkcipher { s#crypto_tfm base ; } 
s#ablkcipher_alg struct ablkcipher_alg { int ( * setkey ) ( s#crypto_ablkcipher * , const t#u8 * , unsigned int ) ; int ( * encrypt ) ( s#ablkcipher_request * ) ; int ( * decrypt ) ( s#ablkcipher_request * ) ; int ( * givencrypt ) ( s#skcipher_givcrypt_request * ) ; int ( * givdecrypt ) ( s#skcipher_givcrypt_request * ) ; const char * geniv ; unsigned int min_keysize ; unsigned int max_keysize ; unsigned int ivsize ; } 
s#aead_alg struct aead_alg { int ( * setkey ) ( s#crypto_aead * , const t#u8 * , unsigned int ) ; int ( * setauthsize ) ( s#crypto_aead * , unsigned int ) ; int ( * encrypt ) ( s#aead_request * ) ; int ( * decrypt ) ( s#aead_request * ) ; int ( * givencrypt ) ( s#aead_givcrypt_request * ) ; int ( * givdecrypt ) ( s#aead_givcrypt_request * ) ; const char * geniv ; unsigned int ivsize ; unsigned int maxauthsize ; } 
s#blkcipher_alg struct blkcipher_alg { int ( * setkey ) ( s#crypto_tfm * , const t#u8 * , unsigned int ) ; int ( * encrypt ) ( s#blkcipher_desc * , s#scatterlist * , s#scatterlist * , unsigned int ) ; int ( * decrypt ) ( s#blkcipher_desc * , s#scatterlist * , s#scatterlist * , unsigned int ) ; const char * geniv ; unsigned int min_keysize ; unsigned int max_keysize ; unsigned int ivsize ; } 
s#cipher_alg struct cipher_alg { unsigned int cia_min_keysize ; unsigned int cia_max_keysize ; int ( * cia_setkey ) ( s#crypto_tfm * , const t#u8 * , unsigned int ) ; void ( * cia_encrypt ) ( s#crypto_tfm * , t#u8 * , const t#u8 * ) ; void ( * cia_decrypt ) ( s#crypto_tfm * , t#u8 * , const t#u8 * ) ; } 
s#digest_alg struct digest_alg { unsigned int dia_digestsize ; void ( * dia_init ) ( s#crypto_tfm * ) ; void ( * dia_update ) ( s#crypto_tfm * , const t#u8 * , unsigned int ) ; void ( * dia_final ) ( s#crypto_tfm * , t#u8 * ) ; int ( * dia_setkey ) ( s#crypto_tfm * , const t#u8 * , unsigned int ) ; } 
s#hash_alg struct hash_alg { int ( * init ) ( s#hash_desc * ) ; int ( * update ) ( s#hash_desc * , s#scatterlist * , unsigned int ) ; int ( * final ) ( s#hash_desc * , t#u8 * ) ; int ( * digest ) ( s#hash_desc * , s#scatterlist * , unsigned int , t#u8 * ) ; int ( * setkey ) ( s#crypto_hash * , const t#u8 * , unsigned int ) ; unsigned int digestsize ; } 
s#compress_alg struct compress_alg { int ( * coa_compress ) ( s#crypto_tfm * , const t#u8 * , unsigned int , t#u8 * , unsigned int * ) ; int ( * coa_decompress ) ( s#crypto_tfm * , const t#u8 * , unsigned int , t#u8 * , unsigned int * ) ; } 
s#rng_alg struct rng_alg { int ( * rng_make_random ) ( s#crypto_rng * , t#u8 * , unsigned int ) ; int ( * rng_reset ) ( s#crypto_rng * , t#u8 * , unsigned int ) ; unsigned int seedsize ; } 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#crypto_alg struct crypto_alg { s#list_head cra_list ; s#list_head cra_users ; t#u32 cra_flags ; unsigned int cra_blocksize ; unsigned int cra_ctxsize ; unsigned int cra_alignmask ; int cra_priority ; t#atomic_t cra_refcnt ; char cra_name [ 64 ] ; char cra_driver_name [ 64 ] ; const s#crypto_type * cra_type ; union { s#ablkcipher_alg ablkcipher ; s#aead_alg aead ; s#blkcipher_alg blkcipher ; s#cipher_alg cipher ; s#digest_alg digest ; s#hash_alg hash ; s#compress_alg compress ; s#rng_alg rng ; } cra_u ; int ( * cra_init ) ( s#crypto_tfm * ) ; void ( * cra_exit ) ( s#crypto_tfm * ) ; void ( * cra_destroy ) ( s#crypto_alg * ) ; s#module * cra_module ; } 
s#crypto_type struct crypto_type { unsigned int ( * ctxsize ) ( s#crypto_alg * , t#u32 , t#u32 ) ; unsigned int ( * extsize ) ( s#crypto_alg * ) ; int ( * init ) ( s#crypto_tfm * , t#u32 , t#u32 ) ; int ( * init_tfm ) ( s#crypto_tfm * ) ; void ( * show ) ( s#seq_file * , s#crypto_alg * ) ; s#crypto_alg * ( * lookup ) ( const char * , t#u32 , t#u32 ) ; unsigned int type ; unsigned int maskclear ; unsigned int maskset ; unsigned int tfmsize ; } 
crypto_ablkcipher_type extern const s#crypto_type crypto_ablkcipher_type 
crypto_givcipher_type extern const s#crypto_type crypto_givcipher_type 
s#rtattr struct rtattr { unsigned short rta_len ; unsigned short rta_type ; } 
s#crypto_template struct crypto_template { s#list_head list ; s#hlist_head instances ; s#module * module ; s#crypto_instance * ( * alloc ) ( s#rtattr * * ) ; void ( * free ) ( s#crypto_instance * ) ; int ( * create ) ( s#crypto_template * , s#rtattr * * ) ; char name [ 64 ] ; } 
s#crypto_instance struct crypto_instance { s#crypto_alg alg ; s#crypto_template * tmpl ; s#hlist_node list ; void * __ctx [ ] __attribute__ ( ( __aligned__ ( __alignof__ ( unsigned long long ) ) ) ) ; } 
s#crypto_spawn struct crypto_spawn { s#list_head list ; s#crypto_alg * alg ; s#crypto_instance * inst ; const s#crypto_type * frontend ; t#u32 mask ; } 
s#crypto_skcipher_spawn struct crypto_skcipher_spawn { s#crypto_spawn base ; } 
crypto_grab_skcipher int crypto_grab_skcipher ( s#crypto_skcipher_spawn * , const char * , t#u32 , t#u32 ) 
crypto_alloc_ablkcipher s#crypto_ablkcipher * crypto_alloc_ablkcipher ( const char * , t#u32 , t#u32 ) 

/* crypto/aead.o */
s##skcipher_givcrypt_request
s#aead_givcrypt_request struct aead_givcrypt_request { t#u64 seq ; t#u8 * giv ; s#aead_request areq ; } 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
crypto_aead_setauthsize int crypto_aead_setauthsize ( s#crypto_aead * , unsigned int ) 
crypto_aead_type extern const s#crypto_type crypto_aead_type 
crypto_nivaead_type extern const s#crypto_type crypto_nivaead_type 
aead_geniv_alloc s#crypto_instance * aead_geniv_alloc ( s#crypto_template * , s#rtattr * * , t#u32 , t#u32 ) 
aead_geniv_free void aead_geniv_free ( s#crypto_instance * ) 
aead_geniv_init int aead_geniv_init ( s#crypto_tfm * ) 
aead_geniv_exit void aead_geniv_exit ( s#crypto_tfm * ) 
s#crypto_aead_spawn struct crypto_aead_spawn { s#crypto_spawn base ; } 
crypto_grab_aead int crypto_grab_aead ( s#crypto_aead_spawn * , const char * , t#u32 , t#u32 ) 
crypto_alloc_aead s#crypto_aead * crypto_alloc_aead ( const char * , t#u32 , t#u32 ) 

/* crypto/aes_generic.o */
crypto_ft_tab extern const t#u32 crypto_ft_tab [ 4 ] [ 256 ] 
crypto_fl_tab extern const t#u32 crypto_fl_tab [ 4 ] [ 256 ] 
crypto_it_tab extern const t#u32 crypto_it_tab [ 4 ] [ 256 ] 
crypto_il_tab extern const t#u32 crypto_il_tab [ 4 ] [ 256 ] 
crypto_aes_expand_key int crypto_aes_expand_key ( s#crypto_aes_ctx * , const t#u8 * , unsigned int ) 
s##scatterlist
s##skcipher_givcrypt_request
s##aead_givcrypt_request
s##crypto_type
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
crypto_aes_set_key int crypto_aes_set_key ( s#crypto_tfm * , const t#u8 * , unsigned int ) 

/* crypto/ahash.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s#crypto_hash_walk struct crypto_hash_walk { char * data ; unsigned int offset ; unsigned int alignmask ; s#page * pg ; unsigned int entrylen ; unsigned int total ; s#scatterlist * sg ; unsigned int flags ; } 
crypto_hash_walk_done int crypto_hash_walk_done ( s#crypto_hash_walk * , int ) 
s##skcipher_givcrypt_request
s##aead_givcrypt_request
s#ahash_request struct ahash_request { s#crypto_async_request base ; unsigned int nbytes ; s#scatterlist * src ; t#u8 * result ; void * priv ; void * __ctx [ ] __attribute__ ( ( __aligned__ ( __alignof__ ( unsigned long long ) ) ) ) ; } 
crypto_hash_walk_first int crypto_hash_walk_first ( s#ahash_request * , s#crypto_hash_walk * ) 
s#crypto_ahash struct crypto_ahash { int ( * init ) ( s#ahash_request * ) ; int ( * update ) ( s#ahash_request * ) ; int ( * final ) ( s#ahash_request * ) ; int ( * finup ) ( s#ahash_request * ) ; int ( * digest ) ( s#ahash_request * ) ; int ( * export ) ( s#ahash_request * , void * ) ; int ( * import ) ( s#ahash_request * , const void * ) ; int ( * setkey ) ( s#crypto_ahash * , const t#u8 * , unsigned int ) ; unsigned int reqsize ; s#crypto_tfm base ; } 
crypto_ahash_setkey int crypto_ahash_setkey ( s#crypto_ahash * , const t#u8 * , unsigned int ) 
crypto_ahash_final int crypto_ahash_final ( s#ahash_request * ) 
crypto_ahash_finup int crypto_ahash_finup ( s#ahash_request * ) 
crypto_ahash_digest int crypto_ahash_digest ( s#ahash_request * ) 
crypto_ahash_type extern const s#crypto_type crypto_ahash_type 
crypto_alloc_ahash s#crypto_ahash * crypto_alloc_ahash ( const char * , t#u32 , t#u32 ) 
s#hash_alg_common struct hash_alg_common { unsigned int digestsize ; unsigned int statesize ; s#crypto_alg base ; } 
s#ahash_alg struct ahash_alg { int ( * init ) ( s#ahash_request * ) ; int ( * update ) ( s#ahash_request * ) ; int ( * final ) ( s#ahash_request * ) ; int ( * finup ) ( s#ahash_request * ) ; int ( * digest ) ( s#ahash_request * ) ; int ( * export ) ( s#ahash_request * , void * ) ; int ( * import ) ( s#ahash_request * , const void * ) ; int ( * setkey ) ( s#crypto_ahash * , const t#u8 * , unsigned int ) ; s#hash_alg_common halg ; } 
crypto_register_ahash int crypto_register_ahash ( s#ahash_alg * ) 
crypto_unregister_ahash int crypto_unregister_ahash ( s#ahash_alg * ) 
s##rtattr
s#ahash_instance struct ahash_instance { s#ahash_alg alg ; } 
ahash_register_instance int ahash_register_instance ( s#crypto_template * , s#ahash_instance * ) 
ahash_free_instance void ahash_free_instance ( s#crypto_instance * ) 
s#crypto_ahash_spawn struct crypto_ahash_spawn { s#crypto_spawn base ; } 
crypto_init_ahash_spawn int crypto_init_ahash_spawn ( s#crypto_ahash_spawn * , s#hash_alg_common * , s#crypto_instance * ) 
ahash_attr_alg s#hash_alg_common * ahash_attr_alg ( s#rtattr * , t#u32 , t#u32 ) 

/* crypto/algapi.o */
crypto_larval_error void crypto_larval_error ( const char * , t#u32 , t#u32 ) 
crypto_alg_tested void crypto_alg_tested ( const char * , int ) 
s##skcipher_givcrypt_request
s##aead_givcrypt_request
s##seq_file
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
crypto_register_alg int crypto_register_alg ( s#crypto_alg * ) 
crypto_unregister_alg int crypto_unregister_alg ( s#crypto_alg * ) 
crypto_register_template int crypto_register_template ( s#crypto_template * ) 
crypto_unregister_template void crypto_unregister_template ( s#crypto_template * ) 
crypto_lookup_template s#crypto_template * crypto_lookup_template ( const char * ) 
crypto_register_instance int crypto_register_instance ( s#crypto_template * , s#crypto_instance * ) 
crypto_init_spawn int crypto_init_spawn ( s#crypto_spawn * , s#crypto_alg * , s#crypto_instance * , t#u32 ) 
crypto_init_spawn2 int crypto_init_spawn2 ( s#crypto_spawn * , s#crypto_alg * , s#crypto_instance * , const s#crypto_type * ) 
crypto_drop_spawn void crypto_drop_spawn ( s#crypto_spawn * ) 
crypto_spawn_tfm s#crypto_tfm * crypto_spawn_tfm ( s#crypto_spawn * , t#u32 , t#u32 ) 
crypto_spawn_tfm2 void * crypto_spawn_tfm2 ( s#crypto_spawn * ) 
crypto_register_notifier int crypto_register_notifier ( s#notifier_block * ) 
crypto_unregister_notifier int crypto_unregister_notifier ( s#notifier_block * ) 
s#crypto_attr_type struct crypto_attr_type { t#u32 type ; t#u32 mask ; } 
crypto_get_attr_type s#crypto_attr_type * crypto_get_attr_type ( s#rtattr * * ) 
crypto_check_attr_type int crypto_check_attr_type ( s#rtattr * * , t#u32 ) 
crypto_attr_alg_name const char * crypto_attr_alg_name ( s#rtattr * ) 
crypto_attr_alg2 s#crypto_alg * crypto_attr_alg2 ( s#rtattr * , const s#crypto_type * , t#u32 , t#u32 ) 
crypto_attr_u32 int crypto_attr_u32 ( s#rtattr * , t#u32 * ) 
crypto_alloc_instance2 void * crypto_alloc_instance2 ( const char * , s#crypto_alg * , unsigned int ) 
crypto_alloc_instance s#crypto_instance * crypto_alloc_instance ( const char * , s#crypto_alg * ) 
s#crypto_queue struct crypto_queue { s#list_head list ; s#list_head * backlog ; unsigned int qlen ; unsigned int max_qlen ; } 
crypto_init_queue void crypto_init_queue ( s#crypto_queue * , unsigned int ) 
crypto_enqueue_request int crypto_enqueue_request ( s#crypto_queue * , s#crypto_async_request * ) 
__crypto_dequeue_request void * __crypto_dequeue_request ( s#crypto_queue * , unsigned int ) 
crypto_dequeue_request s#crypto_async_request * crypto_dequeue_request ( s#crypto_queue * ) 
crypto_tfm_in_queue int crypto_tfm_in_queue ( s#crypto_queue * , s#crypto_tfm * ) 
crypto_inc void crypto_inc ( t#u8 * , unsigned int ) 
crypto_xor void crypto_xor ( t#u8 * , const t#u8 * , unsigned int ) 

/* crypto/api.o */
crypto_alg_list extern s#list_head crypto_alg_list 
crypto_alg_sem extern s#rw_semaphore crypto_alg_sem 
s#blocking_notifier_head struct blocking_notifier_head { s#rw_semaphore rwsem ; s#notifier_block * head ; } 
crypto_chain extern s#blocking_notifier_head crypto_chain 
s##scatterlist
s##skcipher_givcrypt_request
s##aead_givcrypt_request
s##seq_file
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
crypto_mod_get s#crypto_alg * crypto_mod_get ( s#crypto_alg * ) 
crypto_mod_put void crypto_mod_put ( s#crypto_alg * ) 
s#crypto_larval struct crypto_larval { s#crypto_alg alg ; s#crypto_alg * adult ; s#completion completion ; t#u32 mask ; } 
crypto_larval_alloc s#crypto_larval * crypto_larval_alloc ( const char * , t#u32 , t#u32 ) 
crypto_larval_kill void crypto_larval_kill ( s#crypto_alg * ) 
crypto_alg_lookup s#crypto_alg * crypto_alg_lookup ( const char * , t#u32 , t#u32 ) 
crypto_larval_lookup s#crypto_alg * crypto_larval_lookup ( const char * , t#u32 , t#u32 ) 
crypto_probing_notify int crypto_probing_notify ( unsigned long , void * ) 
crypto_alg_mod_lookup s#crypto_alg * crypto_alg_mod_lookup ( const char * , t#u32 , t#u32 ) 
crypto_shoot_alg void crypto_shoot_alg ( s#crypto_alg * ) 
__crypto_alloc_tfm s#crypto_tfm * __crypto_alloc_tfm ( s#crypto_alg * , t#u32 , t#u32 ) 
crypto_alloc_base s#crypto_tfm * crypto_alloc_base ( const char * , t#u32 , t#u32 ) 
crypto_create_tfm void * crypto_create_tfm ( s#crypto_alg * , const s#crypto_type * ) 
crypto_find_alg s#crypto_alg * crypto_find_alg ( const char * , const s#crypto_type * , t#u32 , t#u32 ) 
crypto_alloc_tfm void * crypto_alloc_tfm ( const char * , const s#crypto_type * , t#u32 , t#u32 ) 
crypto_destroy_tfm void crypto_destroy_tfm ( void * , s#crypto_tfm * ) 
crypto_has_alg int crypto_has_alg ( const char * , t#u32 , t#u32 ) 

/* crypto/async_tx/async_memcpy.o */
e#dma_ctrl_flags enum dma_ctrl_flags { DMA_PREP_INTERRUPT = ( 1 << 0 ) , DMA_CTRL_ACK = ( 1 << 1 ) , DMA_COMPL_SKIP_SRC_UNMAP = ( 1 << 2 ) , DMA_COMPL_SKIP_DEST_UNMAP = ( 1 << 3 ) , DMA_COMPL_SRC_UNMAP_SINGLE = ( 1 << 4 ) , DMA_COMPL_DEST_UNMAP_SINGLE = ( 1 << 5 ) , DMA_PREP_PQ_DISABLE_P = ( 1 << 6 ) , DMA_PREP_PQ_DISABLE_Q = ( 1 << 7 ) , DMA_PREP_CONTINUE = ( 1 << 8 ) , DMA_PREP_FENCE = ( 1 << 9 ) , } 
t#dma_cap_mask_t typedef struct { unsigned long bits [ ( ( ( ( DMA_SLAVE + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } dma_cap_mask_t 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##kiocb
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##class_private
e#sum_check_flags enum sum_check_flags { SUM_CHECK_P_RESULT = ( 1 << SUM_CHECK_P ) , SUM_CHECK_Q_RESULT = ( 1 << SUM_CHECK_Q ) , } 
e#dma_status enum dma_status { DMA_SUCCESS , DMA_IN_PROGRESS , DMA_ERROR , } 
s#dma_device struct dma_device { unsigned int chancnt ; unsigned int privatecnt ; s#list_head channels ; s#list_head global_node ; t#dma_cap_mask_t cap_mask ; unsigned short max_xor ; unsigned short max_pq ; t#u8 copy_align ; t#u8 xor_align ; t#u8 pq_align ; t#u8 fill_align ; int dev_id ; s#device * dev ; int ( * device_alloc_chan_resources ) ( s#dma_chan * ) ; void ( * device_free_chan_resources ) ( s#dma_chan * ) ; s#dma_async_tx_descriptor * ( * device_prep_dma_memcpy ) ( s#dma_chan * , t#dma_addr_t , t#dma_addr_t , t#size_t , unsigned long ) ; s#dma_async_tx_descriptor * ( * device_prep_dma_xor ) ( s#dma_chan * , t#dma_addr_t , t#dma_addr_t * , unsigned int , t#size_t , unsigned long ) ; s#dma_async_tx_descriptor * ( * device_prep_dma_xor_val ) ( s#dma_chan * , t#dma_addr_t * , unsigned int , t#size_t , e#sum_check_flags * , unsigned long ) ; s#dma_async_tx_descriptor * ( * device_prep_dma_pq ) ( s#dma_chan * , t#dma_addr_t * , t#dma_addr_t * , unsigned int , const unsigned char * , t#size_t , unsigned long ) ; s#dma_async_tx_descriptor * ( * device_prep_dma_pq_val ) ( s#dma_chan * , t#dma_addr_t * , t#dma_addr_t * , unsigned int , const unsigned char * , t#size_t , e#sum_check_flags * , unsigned long ) ; s#dma_async_tx_descriptor * ( * device_prep_dma_memset ) ( s#dma_chan * , t#dma_addr_t , int , t#size_t , unsigned long ) ; s#dma_async_tx_descriptor * ( * device_prep_dma_interrupt ) ( s#dma_chan * , unsigned long ) ; s#dma_async_tx_descriptor * ( * device_prep_slave_sg ) ( s#dma_chan * , s#scatterlist * , unsigned int , e#dma_data_direction , unsigned long ) ; void ( * device_terminate_all ) ( s#dma_chan * ) ; e#dma_status ( * device_is_tx_complete ) ( s#dma_chan * , t#dma_cookie_t , t#dma_cookie_t * , t#dma_cookie_t * ) ; void ( * device_issue_pending ) ( s#dma_chan * ) ; } 
s#dma_chan_dev struct dma_chan_dev { s#dma_chan * chan ; s#device device ; int dev_id ; t#atomic_t * idr_ref ; } 
s#dma_chan_percpu struct dma_chan_percpu { unsigned long memcpy_count ; unsigned long bytes_transferred ; } 
s#dma_chan struct dma_chan { s#dma_device * device ; t#dma_cookie_t cookie ; int chan_id ; s#dma_chan_dev * dev ; s#list_head device_node ; s#dma_chan_percpu * local ; int client_count ; int table_count ; void * private ; } 
t#dma_async_tx_callback typedef void ( * dma_async_tx_callback ) ( void * ) 
s#dma_async_tx_descriptor struct dma_async_tx_descriptor { t#dma_cookie_t cookie ; e#dma_ctrl_flags flags ; t#dma_addr_t phys ; s#dma_chan * chan ; t#dma_cookie_t ( * tx_submit ) ( s#dma_async_tx_descriptor * ) ; t#dma_async_tx_callback callback ; void * callback_param ; s#dma_async_tx_descriptor * next ; s#dma_async_tx_descriptor * parent ; t#spinlock_t lock ; } 
e#async_tx_flags enum async_tx_flags { ASYNC_TX_XOR_ZERO_DST = ( 1 << 0 ) , ASYNC_TX_XOR_DROP_DST = ( 1 << 1 ) , ASYNC_TX_ACK = ( 1 << 2 ) , ASYNC_TX_FENCE = ( 1 << 3 ) , } 
s#async_submit_ctl struct async_submit_ctl { e#async_tx_flags flags ; s#dma_async_tx_descriptor * depend_tx ; t#dma_async_tx_callback cb_fn ; void * cb_param ; void * scribble ; } 
async_memcpy s#dma_async_tx_descriptor * async_memcpy ( s#page * , s#page * , unsigned int , unsigned int , t#size_t , s#async_submit_ctl * ) 

/* crypto/async_tx/async_pq.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
async_gen_syndrome s#dma_async_tx_descriptor * async_gen_syndrome ( s#page * * , unsigned int , int , t#size_t , s#async_submit_ctl * ) 
async_syndrome_val s#dma_async_tx_descriptor * async_syndrome_val ( s#page * * , unsigned int , int , t#size_t , e#sum_check_flags * , s#page * , s#async_submit_ctl * ) 

/* crypto/async_tx/async_raid6_recov.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
async_raid6_2data_recov s#dma_async_tx_descriptor * async_raid6_2data_recov ( int , t#size_t , int , int , s#page * * , s#async_submit_ctl * ) 
async_raid6_datap_recov s#dma_async_tx_descriptor * async_raid6_datap_recov ( int , t#size_t , int , s#page * * , s#async_submit_ctl * ) 

/* crypto/async_tx/async_tx.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
e#dma_transaction_type enum dma_transaction_type { DMA_MEMCPY , DMA_XOR , DMA_PQ , DMA_XOR_VAL , DMA_PQ_VAL , DMA_MEMSET , DMA_INTERRUPT , DMA_PRIVATE , DMA_ASYNC_TX , DMA_SLAVE , } 
__async_tx_find_channel s#dma_chan * __async_tx_find_channel ( s#async_submit_ctl * , e#dma_transaction_type ) 
async_tx_submit void async_tx_submit ( s#dma_chan * , s#dma_async_tx_descriptor * , s#async_submit_ctl * ) 
async_trigger_callback s#dma_async_tx_descriptor * async_trigger_callback ( s#async_submit_ctl * ) 
async_tx_quiesce void async_tx_quiesce ( s#dma_async_tx_descriptor * * ) 

/* crypto/async_tx/async_xor.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
async_xor s#dma_async_tx_descriptor * async_xor ( s#page * , s#page * * , unsigned int , int , t#size_t , s#async_submit_ctl * ) 
async_xor_val s#dma_async_tx_descriptor * async_xor_val ( s#page * , s#page * * , unsigned int , int , t#size_t , e#sum_check_flags * , s#async_submit_ctl * ) 

/* crypto/blkcipher.o */
s##aead_givcrypt_request
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s#scatter_walk struct scatter_walk { s#scatterlist * sg ; unsigned int offset ; } 
s#blkcipher_walk struct blkcipher_walk { union { struct { s#page * page ; unsigned long offset ; } phys ; struct { t#u8 * page ; t#u8 * addr ; } virt ; } src , dst ; s#scatter_walk in ; unsigned int nbytes ; s#scatter_walk out ; unsigned int total ; void * page ; t#u8 * buffer ; t#u8 * iv ; int flags ; unsigned int blocksize ; } 
blkcipher_walk_done int blkcipher_walk_done ( s#blkcipher_desc * , s#blkcipher_walk * , int ) 
blkcipher_walk_virt int blkcipher_walk_virt ( s#blkcipher_desc * , s#blkcipher_walk * ) 
blkcipher_walk_phys int blkcipher_walk_phys ( s#blkcipher_desc * , s#blkcipher_walk * ) 
blkcipher_walk_virt_block int blkcipher_walk_virt_block ( s#blkcipher_desc * , s#blkcipher_walk * , unsigned int ) 
crypto_blkcipher_type extern const s#crypto_type crypto_blkcipher_type 
s##rtattr
skcipher_geniv_alloc s#crypto_instance * skcipher_geniv_alloc ( s#crypto_template * , s#rtattr * * , t#u32 , t#u32 ) 
skcipher_geniv_free void skcipher_geniv_free ( s#crypto_instance * ) 
skcipher_geniv_init int skcipher_geniv_init ( s#crypto_tfm * ) 
skcipher_geniv_exit void skcipher_geniv_exit ( s#crypto_tfm * ) 

/* crypto/cryptd.o */
s##skcipher_givcrypt_request
s##aead_givcrypt_request
s##seq_file
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s#cryptd_ablkcipher struct cryptd_ablkcipher { s#crypto_ablkcipher base ; } 
cryptd_alloc_ablkcipher s#cryptd_ablkcipher * cryptd_alloc_ablkcipher ( const char * , t#u32 , t#u32 ) 
cryptd_ablkcipher_child s#crypto_blkcipher * cryptd_ablkcipher_child ( s#cryptd_ablkcipher * ) 
cryptd_free_ablkcipher void cryptd_free_ablkcipher ( s#cryptd_ablkcipher * ) 
s#cryptd_ahash struct cryptd_ahash { s#crypto_ahash base ; } 
cryptd_alloc_ahash s#cryptd_ahash * cryptd_alloc_ahash ( const char * , t#u32 , t#u32 ) 
s#crypto_shash struct crypto_shash { unsigned int descsize ; s#crypto_tfm base ; } 
cryptd_ahash_child s#crypto_shash * cryptd_ahash_child ( s#cryptd_ahash * ) 
s#shash_desc struct shash_desc { s#crypto_shash * tfm ; t#u32 flags ; void * __ctx [ ] __attribute__ ( ( __aligned__ ( __alignof__ ( unsigned long long ) ) ) ) ; } 
cryptd_shash_desc s#shash_desc * cryptd_shash_desc ( s#ahash_request * ) 
cryptd_free_ahash void cryptd_free_ahash ( s#cryptd_ahash * ) 

/* crypto/crypto_wq.o */
s##workqueue_struct
kcrypto_wq extern s#workqueue_struct * kcrypto_wq 

/* crypto/des_generic.o */
des_ekey extern unsigned long des_ekey ( t#u32 * , const t#u8 * ) 

/* crypto/fips.o */
fips_enabled extern int fips_enabled 

/* crypto/gf128mul.o */
t#__be64 typedef t#__u64 __be64 
t#be128 typedef struct { t#__be64 a , b ; } be128 
gf128mul_x_ble void gf128mul_x_ble ( t#be128 * , const t#be128 * ) 
gf128mul_lle void gf128mul_lle ( t#be128 * , const t#be128 * ) 
gf128mul_bbe void gf128mul_bbe ( t#be128 * , const t#be128 * ) 
s#gf128mul_4k struct gf128mul_4k { t#be128 t [ 256 ] ; } 
s#gf128mul_64k struct gf128mul_64k { s#gf128mul_4k * t [ 16 ] ; } 
gf128mul_init_64k_lle s#gf128mul_64k * gf128mul_init_64k_lle ( const t#be128 * ) 
gf128mul_init_64k_bbe s#gf128mul_64k * gf128mul_init_64k_bbe ( const t#be128 * ) 
gf128mul_free_64k void gf128mul_free_64k ( s#gf128mul_64k * ) 
gf128mul_64k_lle void gf128mul_64k_lle ( t#be128 * , s#gf128mul_64k * ) 
gf128mul_64k_bbe void gf128mul_64k_bbe ( t#be128 * , s#gf128mul_64k * ) 
gf128mul_init_4k_lle s#gf128mul_4k * gf128mul_init_4k_lle ( const t#be128 * ) 
gf128mul_init_4k_bbe s#gf128mul_4k * gf128mul_init_4k_bbe ( const t#be128 * ) 
gf128mul_4k_lle void gf128mul_4k_lle ( t#be128 * , s#gf128mul_4k * ) 
gf128mul_4k_bbe void gf128mul_4k_bbe ( t#be128 * , s#gf128mul_4k * ) 

/* crypto/pcompress.o */
s##scatterlist
s##skcipher_givcrypt_request
s##aead_givcrypt_request
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s#crypto_pcomp struct crypto_pcomp { s#crypto_tfm base ; } 
crypto_alloc_pcomp extern s#crypto_pcomp * crypto_alloc_pcomp ( const char * , t#u32 , t#u32 ) 
s#comp_request struct comp_request { const void * next_in ; void * next_out ; unsigned int avail_in ; unsigned int avail_out ; } 
s#pcomp_alg struct pcomp_alg { int ( * compress_setup ) ( s#crypto_pcomp * , void * , unsigned int ) ; int ( * compress_init ) ( s#crypto_pcomp * ) ; int ( * compress_update ) ( s#crypto_pcomp * , s#comp_request * ) ; int ( * compress_final ) ( s#crypto_pcomp * , s#comp_request * ) ; int ( * decompress_setup ) ( s#crypto_pcomp * , void * , unsigned int ) ; int ( * decompress_init ) ( s#crypto_pcomp * ) ; int ( * decompress_update ) ( s#crypto_pcomp * , s#comp_request * ) ; int ( * decompress_final ) ( s#crypto_pcomp * , s#comp_request * ) ; s#crypto_alg base ; } 
crypto_register_pcomp extern int crypto_register_pcomp ( s#pcomp_alg * ) 
crypto_unregister_pcomp extern int crypto_unregister_pcomp ( s#pcomp_alg * ) 

/* crypto/rng.o */
s##scatterlist
s##skcipher_givcrypt_request
s##aead_givcrypt_request
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
crypto_default_rng extern s#crypto_rng * crypto_default_rng 
crypto_rng_type extern const s#crypto_type crypto_rng_type 
crypto_get_default_rng int crypto_get_default_rng ( void ) 
crypto_put_default_rng void crypto_put_default_rng ( void ) 

/* crypto/scatterwalk.o */
scatterwalk_start void scatterwalk_start ( s#scatter_walk * , s#scatterlist * ) 
scatterwalk_map void * scatterwalk_map ( s#scatter_walk * , int ) 
scatterwalk_done void scatterwalk_done ( s#scatter_walk * , int , int ) 
scatterwalk_copychunks void scatterwalk_copychunks ( void * , s#scatter_walk * , t#size_t , int ) 
scatterwalk_map_and_copy void scatterwalk_map_and_copy ( void * , s#scatterlist * , unsigned int , unsigned int , int ) 

/* crypto/shash.o */
s##skcipher_givcrypt_request
s##aead_givcrypt_request
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
crypto_shash_setkey int crypto_shash_setkey ( s#crypto_shash * , const t#u8 * , unsigned int ) 
crypto_shash_update int crypto_shash_update ( s#shash_desc * , const t#u8 * , unsigned int ) 
crypto_shash_final int crypto_shash_final ( s#shash_desc * , t#u8 * ) 
crypto_shash_finup int crypto_shash_finup ( s#shash_desc * , const t#u8 * , unsigned int , t#u8 * ) 
crypto_shash_digest int crypto_shash_digest ( s#shash_desc * , const t#u8 * , unsigned int , t#u8 * ) 
shash_ahash_update int shash_ahash_update ( s#ahash_request * , s#shash_desc * ) 
shash_ahash_finup int shash_ahash_finup ( s#ahash_request * , s#shash_desc * ) 
shash_ahash_digest int shash_ahash_digest ( s#ahash_request * , s#shash_desc * ) 
crypto_alloc_shash s#crypto_shash * crypto_alloc_shash ( const char * , t#u32 , t#u32 ) 
s#shash_alg struct shash_alg { int ( * init ) ( s#shash_desc * ) ; int ( * update ) ( s#shash_desc * , const t#u8 * , unsigned int ) ; int ( * final ) ( s#shash_desc * , t#u8 * ) ; int ( * finup ) ( s#shash_desc * , const t#u8 * , unsigned int , t#u8 * ) ; int ( * digest ) ( s#shash_desc * , const t#u8 * , unsigned int , t#u8 * ) ; int ( * export ) ( s#shash_desc * , void * ) ; int ( * import ) ( s#shash_desc * , const void * ) ; int ( * setkey ) ( s#crypto_shash * , const t#u8 * , unsigned int ) ; unsigned int descsize ; unsigned int digestsize __attribute__ ( ( aligned ( __alignof__ ( struct hash_alg_common ) ) ) ) ; unsigned int statesize ; s#crypto_alg base ; } 
crypto_register_shash int crypto_register_shash ( s#shash_alg * ) 
crypto_unregister_shash int crypto_unregister_shash ( s#shash_alg * ) 
s##rtattr
s#shash_instance struct shash_instance { s#shash_alg alg ; } 
shash_register_instance int shash_register_instance ( s#crypto_template * , s#shash_instance * ) 
shash_free_instance void shash_free_instance ( s#crypto_instance * ) 
s#crypto_shash_spawn struct crypto_shash_spawn { s#crypto_spawn base ; } 
crypto_init_shash_spawn int crypto_init_shash_spawn ( s#crypto_shash_spawn * , s#shash_alg * , s#crypto_instance * ) 
shash_attr_alg s#shash_alg * shash_attr_alg ( s#rtattr * , t#u32 , t#u32 ) 

/* crypto/testmgr.o */
alg_test int alg_test ( const char * , const char * , t#u32 , t#u32 ) 

/* crypto/twofish_common.o */
s##scatterlist
s##skcipher_givcrypt_request
s##aead_givcrypt_request
s##crypto_type
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
twofish_setkey int twofish_setkey ( s#crypto_tfm * , const t#u8 * , unsigned int ) 

/* crypto/xor.o */
xor_blocks extern void xor_blocks ( unsigned int , unsigned int , void * , void * * ) 

/* drivers/acpi/acpica/evxface.o */
t#acpi_status typedef t#u32 acpi_status 
t#acpi_event_handler typedef t#u32 ( * acpi_event_handler ) ( void * ) 
acpi_install_fixed_event_handler t#acpi_status acpi_install_fixed_event_handler ( t#u32 , t#acpi_event_handler , void * ) 
acpi_remove_fixed_event_handler t#acpi_status acpi_remove_fixed_event_handler ( t#u32 , t#acpi_event_handler ) 
t#acpi_notify_handler typedef void ( * acpi_notify_handler ) ( t#acpi_handle , t#u32 , void * ) 
acpi_install_notify_handler t#acpi_status acpi_install_notify_handler ( t#acpi_handle , t#u32 , t#acpi_notify_handler , void * ) 
acpi_remove_notify_handler t#acpi_status acpi_remove_notify_handler ( t#acpi_handle , t#u32 , t#acpi_notify_handler ) 
acpi_install_gpe_handler t#acpi_status acpi_install_gpe_handler ( t#acpi_handle , t#u32 , t#u32 , t#acpi_event_handler , void * ) 
acpi_remove_gpe_handler t#acpi_status acpi_remove_gpe_handler ( t#acpi_handle , t#u32 , t#acpi_event_handler ) 
acpi_acquire_global_lock t#acpi_status acpi_acquire_global_lock ( t#u16 , t#u32 * ) 
acpi_release_global_lock t#acpi_status acpi_release_global_lock ( t#u32 ) 

/* drivers/acpi/acpica/evxfevnt.o */
acpi_enable t#acpi_status acpi_enable ( void ) 
acpi_disable t#acpi_status acpi_disable ( void ) 
acpi_enable_event t#acpi_status acpi_enable_event ( t#u32 , t#u32 ) 
acpi_set_gpe_type t#acpi_status acpi_set_gpe_type ( t#acpi_handle , t#u32 , t#u8 ) 
acpi_enable_gpe t#acpi_status acpi_enable_gpe ( t#acpi_handle , t#u32 ) 
acpi_disable_gpe t#acpi_status acpi_disable_gpe ( t#acpi_handle , t#u32 ) 
acpi_disable_event t#acpi_status acpi_disable_event ( t#u32 , t#u32 ) 
acpi_clear_event t#acpi_status acpi_clear_event ( t#u32 ) 
acpi_clear_gpe t#acpi_status acpi_clear_gpe ( t#acpi_handle , t#u32 , t#u32 ) 
t#acpi_event_status typedef t#u32 acpi_event_status 
acpi_get_event_status t#acpi_status acpi_get_event_status ( t#u32 , t#acpi_event_status * ) 
acpi_get_gpe_status t#acpi_status acpi_get_gpe_status ( t#acpi_handle , t#u32 , t#u32 , t#acpi_event_status * ) 
s#acpi_generic_address struct acpi_generic_address { t#u8 space_id ; t#u8 bit_width ; t#u8 bit_offset ; t#u8 access_width ; t#u64 address ; } 
acpi_install_gpe_block t#acpi_status acpi_install_gpe_block ( t#acpi_handle , s#acpi_generic_address * , t#u32 , t#u32 ) 
acpi_remove_gpe_block t#acpi_status acpi_remove_gpe_block ( t#acpi_handle ) 
acpi_get_gpe_device t#acpi_status acpi_get_gpe_device ( t#u32 , t#acpi_handle * ) 

/* drivers/acpi/acpica/evxfregn.o */
t#acpi_adr_space_type typedef t#u8 acpi_adr_space_type 
t#acpi_physical_address typedef t#u64 acpi_physical_address 
t#acpi_adr_space_handler typedef t#acpi_status ( * acpi_adr_space_handler ) ( t#u32 , t#acpi_physical_address , t#u32 , t#acpi_integer * , void * , void * ) 
t#acpi_adr_space_setup typedef t#acpi_status ( * acpi_adr_space_setup ) ( t#acpi_handle , t#u32 , void * , void * * ) 
acpi_install_address_space_handler t#acpi_status acpi_install_address_space_handler ( t#acpi_handle , t#acpi_adr_space_type , t#acpi_adr_space_handler , t#acpi_adr_space_setup , void * ) 
acpi_remove_address_space_handler t#acpi_status acpi_remove_address_space_handler ( t#acpi_handle , t#acpi_adr_space_type , t#acpi_adr_space_handler ) 

/* drivers/acpi/acpica/hwsleep.o */
acpi_set_firmware_waking_vector t#acpi_status acpi_set_firmware_waking_vector ( t#u32 ) 
acpi_set_firmware_waking_vector64 t#acpi_status acpi_set_firmware_waking_vector64 ( t#u64 ) 
acpi_enter_sleep_state_prep t#acpi_status acpi_enter_sleep_state_prep ( t#u8 ) 
acpi_enter_sleep_state t#acpi_status acpi_enter_sleep_state ( t#u8 ) 
acpi_enter_sleep_state_s4bios t#acpi_status acpi_enter_sleep_state_s4bios ( void ) 
acpi_leave_sleep_state t#acpi_status acpi_leave_sleep_state ( t#u8 ) 

/* drivers/acpi/acpica/hwxface.o */
acpi_reset t#acpi_status acpi_reset ( void ) 
acpi_read t#acpi_status acpi_read ( t#u64 * , s#acpi_generic_address * ) 
acpi_write t#acpi_status acpi_write ( t#u64 , s#acpi_generic_address * ) 
acpi_read_bit_register t#acpi_status acpi_read_bit_register ( t#u32 , t#u32 * ) 
acpi_write_bit_register t#acpi_status acpi_write_bit_register ( t#u32 , t#u32 ) 
acpi_get_sleep_type_data t#acpi_status acpi_get_sleep_type_data ( t#u8 , t#u8 * , t#u8 * ) 

/* drivers/acpi/acpica/nsxfeval.o */
t#acpi_string typedef char * acpi_string 
t#acpi_size typedef t#u64 acpi_size 
s#acpi_buffer struct acpi_buffer { t#acpi_size length ; void * pointer ; } 
acpi_evaluate_object_typed t#acpi_status acpi_evaluate_object_typed ( t#acpi_handle , t#acpi_string , s#acpi_object_list * , s#acpi_buffer * , t#acpi_object_type ) 
acpi_evaluate_object t#acpi_status acpi_evaluate_object ( t#acpi_handle , t#acpi_string , s#acpi_object_list * , s#acpi_buffer * ) 
t#acpi_walk_callback typedef t#acpi_status ( * acpi_walk_callback ) ( t#acpi_handle , t#u32 , void * , void * * ) 
acpi_walk_namespace t#acpi_status acpi_walk_namespace ( t#acpi_object_type , t#acpi_handle , t#u32 , t#acpi_walk_callback , void * , void * * ) 
acpi_get_devices t#acpi_status acpi_get_devices ( const char * , t#acpi_walk_callback , void * , void * * ) 
t#acpi_object_handler typedef void ( * acpi_object_handler ) ( t#acpi_handle , void * ) 
acpi_attach_data t#acpi_status acpi_attach_data ( t#acpi_handle , t#acpi_object_handler , void * ) 
acpi_detach_data t#acpi_status acpi_detach_data ( t#acpi_handle , t#acpi_object_handler ) 
acpi_get_data t#acpi_status acpi_get_data ( t#acpi_handle , t#acpi_object_handler , void * * ) 

/* drivers/acpi/acpica/nsxfname.o */
acpi_get_handle t#acpi_status acpi_get_handle ( t#acpi_handle , t#acpi_string , t#acpi_handle * ) 
acpi_get_name t#acpi_status acpi_get_name ( t#acpi_handle , t#u32 , s#acpi_buffer * ) 
s#acpica_device_id struct acpica_device_id { t#u32 length ; char * string ; } 
s#acpica_device_id_list struct acpica_device_id_list { t#u32 count ; t#u32 list_size ; s#acpica_device_id ids [ 1 ] ; } 
s#acpi_device_info struct acpi_device_info { t#u32 info_size ; t#u32 name ; t#acpi_object_type type ; t#u8 param_count ; t#u8 valid ; t#u8 flags ; t#u8 highest_dstates [ 4 ] ; t#u8 lowest_dstates [ 5 ] ; t#u32 current_status ; t#acpi_integer address ; s#acpica_device_id hardware_id ; s#acpica_device_id unique_id ; s#acpica_device_id_list compatible_id_list ; } 
acpi_get_object_info t#acpi_status acpi_get_object_info ( t#acpi_handle , s#acpi_device_info * * ) 
acpi_install_method t#acpi_status acpi_install_method ( t#u8 * ) 

/* drivers/acpi/acpica/nsxfobj.o */
t#acpi_owner_id typedef t#u8 acpi_owner_id 
acpi_get_id t#acpi_status acpi_get_id ( t#acpi_handle , t#acpi_owner_id * ) 
acpi_get_type t#acpi_status acpi_get_type ( t#acpi_handle , t#acpi_object_type * ) 
acpi_get_parent t#acpi_status acpi_get_parent ( t#acpi_handle , t#acpi_handle * ) 
acpi_get_next_object t#acpi_status acpi_get_next_object ( t#acpi_object_type , t#acpi_handle , t#acpi_handle , t#acpi_handle * ) 

/* drivers/acpi/acpica/rsxface.o */
acpi_get_irq_routing_table t#acpi_status acpi_get_irq_routing_table ( t#acpi_handle , s#acpi_buffer * ) 
acpi_get_current_resources t#acpi_status acpi_get_current_resources ( t#acpi_handle , s#acpi_buffer * ) 
acpi_set_current_resources t#acpi_status acpi_set_current_resources ( t#acpi_handle , s#acpi_buffer * ) 
s#acpi_resource_irq struct acpi_resource_irq { t#u8 descriptor_length ; t#u8 triggering ; t#u8 polarity ; t#u8 sharable ; t#u8 interrupt_count ; t#u8 interrupts [ 1 ] ; } 
s#acpi_resource_dma struct acpi_resource_dma { t#u8 type ; t#u8 bus_master ; t#u8 transfer ; t#u8 channel_count ; t#u8 channels [ 1 ] ; } 
s#acpi_resource_start_dependent struct acpi_resource_start_dependent { t#u8 descriptor_length ; t#u8 compatibility_priority ; t#u8 performance_robustness ; } 
s#acpi_resource_io struct acpi_resource_io { t#u8 io_decode ; t#u8 alignment ; t#u8 address_length ; t#u16 minimum ; t#u16 maximum ; } 
s#acpi_resource_fixed_io struct acpi_resource_fixed_io { t#u16 address ; t#u8 address_length ; } 
s#acpi_resource_vendor struct acpi_resource_vendor { t#u16 byte_length ; t#u8 byte_data [ 1 ] ; } 
s#acpi_resource_vendor_typed struct acpi_resource_vendor_typed { t#u16 byte_length ; t#u8 uuid_subtype ; t#u8 uuid [ 16 ] ; t#u8 byte_data [ 1 ] ; } 
s#acpi_resource_end_tag struct acpi_resource_end_tag { t#u8 checksum ; } 
s#acpi_resource_memory24 struct acpi_resource_memory24 { t#u8 write_protect ; t#u16 minimum ; t#u16 maximum ; t#u16 alignment ; t#u16 address_length ; } 
s#acpi_resource_memory32 struct acpi_resource_memory32 { t#u8 write_protect ; t#u32 minimum ; t#u32 maximum ; t#u32 alignment ; t#u32 address_length ; } 
s#acpi_resource_fixed_memory32 struct acpi_resource_fixed_memory32 { t#u8 write_protect ; t#u32 address ; t#u32 address_length ; } 
s#acpi_memory_attribute struct acpi_memory_attribute { t#u8 write_protect ; t#u8 caching ; t#u8 range_type ; t#u8 translation ; } 
s#acpi_io_attribute struct acpi_io_attribute { t#u8 range_type ; t#u8 translation ; t#u8 translation_type ; t#u8 reserved1 ; } 
u#acpi_resource_attribute union acpi_resource_attribute { s#acpi_memory_attribute mem ; s#acpi_io_attribute io ; t#u8 type_specific ; } 
s#acpi_resource_source struct acpi_resource_source { t#u8 index ; t#u16 string_length ; char * string_ptr ; } 
s#acpi_resource_address16 struct acpi_resource_address16 { t#u8 resource_type ; t#u8 producer_consumer ; t#u8 decode ; t#u8 min_address_fixed ; t#u8 max_address_fixed ; u#acpi_resource_attribute info ; t#u16 granularity ; t#u16 minimum ; t#u16 maximum ; t#u16 translation_offset ; t#u16 address_length ; s#acpi_resource_source resource_source ; } 
s#acpi_resource_address32 struct acpi_resource_address32 { t#u8 resource_type ; t#u8 producer_consumer ; t#u8 decode ; t#u8 min_address_fixed ; t#u8 max_address_fixed ; u#acpi_resource_attribute info ; t#u32 granularity ; t#u32 minimum ; t#u32 maximum ; t#u32 translation_offset ; t#u32 address_length ; s#acpi_resource_source resource_source ; } 
s#acpi_resource_address64 struct acpi_resource_address64 { t#u8 resource_type ; t#u8 producer_consumer ; t#u8 decode ; t#u8 min_address_fixed ; t#u8 max_address_fixed ; u#acpi_resource_attribute info ; t#u64 granularity ; t#u64 minimum ; t#u64 maximum ; t#u64 translation_offset ; t#u64 address_length ; s#acpi_resource_source resource_source ; } 
s#acpi_resource_extended_address64 struct acpi_resource_extended_address64 { t#u8 resource_type ; t#u8 producer_consumer ; t#u8 decode ; t#u8 min_address_fixed ; t#u8 max_address_fixed ; u#acpi_resource_attribute info ; t#u8 revision_iD ; t#u64 granularity ; t#u64 minimum ; t#u64 maximum ; t#u64 translation_offset ; t#u64 address_length ; t#u64 type_specific ; } 
s#acpi_resource_extended_irq struct acpi_resource_extended_irq { t#u8 producer_consumer ; t#u8 triggering ; t#u8 polarity ; t#u8 sharable ; t#u8 interrupt_count ; s#acpi_resource_source resource_source ; t#u32 interrupts [ 1 ] ; } 
s#acpi_resource_generic_register struct acpi_resource_generic_register { t#u8 space_id ; t#u8 bit_width ; t#u8 bit_offset ; t#u8 access_size ; t#u64 address ; } 
s#acpi_resource_address struct acpi_resource_address { t#u8 resource_type ; t#u8 producer_consumer ; t#u8 decode ; t#u8 min_address_fixed ; t#u8 max_address_fixed ; u#acpi_resource_attribute info ; } 
u#acpi_resource_data union acpi_resource_data { s#acpi_resource_irq irq ; s#acpi_resource_dma dma ; s#acpi_resource_start_dependent start_dpf ; s#acpi_resource_io io ; s#acpi_resource_fixed_io fixed_io ; s#acpi_resource_vendor vendor ; s#acpi_resource_vendor_typed vendor_typed ; s#acpi_resource_end_tag end_tag ; s#acpi_resource_memory24 memory24 ; s#acpi_resource_memory32 memory32 ; s#acpi_resource_fixed_memory32 fixed_memory32 ; s#acpi_resource_address16 address16 ; s#acpi_resource_address32 address32 ; s#acpi_resource_address64 address64 ; s#acpi_resource_extended_address64 ext_address64 ; s#acpi_resource_extended_irq extended_irq ; s#acpi_resource_generic_register generic_reg ; s#acpi_resource_address address ; } 
s#acpi_resource struct acpi_resource { t#u32 type ; t#u32 length ; u#acpi_resource_data data ; } 
acpi_resource_to_address64 t#acpi_status acpi_resource_to_address64 ( s#acpi_resource * , s#acpi_resource_address64 * ) 
s#acpi_vendor_uuid struct acpi_vendor_uuid { t#u8 subtype ; t#u8 data [ 16 ] ; } 
acpi_get_vendor_resource t#acpi_status acpi_get_vendor_resource ( t#acpi_handle , char * , s#acpi_vendor_uuid * , s#acpi_buffer * ) 
t#acpi_walk_resource_callback typedef t#acpi_status ( * acpi_walk_resource_callback ) ( s#acpi_resource * , void * ) 
acpi_walk_resources t#acpi_status acpi_walk_resources ( t#acpi_handle , char * , t#acpi_walk_resource_callback , void * ) 

/* drivers/acpi/acpica/tbxface.o */
s#acpi_table_header struct acpi_table_header { char signature [ 4 ] ; t#u32 length ; t#u8 revision ; t#u8 checksum ; char oem_id [ 6 ] ; char oem_table_id [ 8 ] ; t#u32 oem_revision ; char asl_compiler_id [ 4 ] ; t#u32 asl_compiler_revision ; } 
acpi_load_table t#acpi_status acpi_load_table ( s#acpi_table_header * ) 
acpi_get_table_header t#acpi_status acpi_get_table_header ( t#acpi_string , t#u32 , s#acpi_table_header * ) 
acpi_unload_table_id t#acpi_status acpi_unload_table_id ( t#acpi_owner_id ) 
acpi_get_table t#acpi_status acpi_get_table ( t#acpi_string , t#u32 , s#acpi_table_header * * ) 
acpi_get_table_by_index t#acpi_status acpi_get_table_by_index ( t#u32 , s#acpi_table_header * * ) 
acpi_load_tables t#acpi_status acpi_load_tables ( void ) 
t#acpi_tbl_handler typedef t#acpi_status ( * acpi_tbl_handler ) ( t#u32 , void * , void * ) 
acpi_install_table_handler t#acpi_status acpi_install_table_handler ( t#acpi_tbl_handler , void * ) 
acpi_remove_table_handler t#acpi_status acpi_remove_table_handler ( t#acpi_tbl_handler ) 

/* drivers/acpi/acpica/utdebug.o */
acpi_debug_print void acpi_debug_print ( t#u32 , t#u32 , const char * , const char * , t#u32 , const char * , ... ) 
acpi_debug_print_raw void acpi_debug_print_raw ( t#u32 , t#u32 , const char * , const char * , t#u32 , const char * , ... ) 
acpi_ut_trace void acpi_ut_trace ( t#u32 , const char * , const char * , t#u32 ) 
acpi_ut_exit void acpi_ut_exit ( t#u32 , const char * , const char * , t#u32 ) 
acpi_ut_status_exit void acpi_ut_status_exit ( t#u32 , const char * , const char * , t#u32 , t#acpi_status ) 
acpi_ut_value_exit void acpi_ut_value_exit ( t#u32 , const char * , const char * , t#u32 , t#acpi_integer ) 

/* drivers/acpi/acpica/utglobal.o */
acpi_format_exception const char * acpi_format_exception ( t#acpi_status ) 
s#acpi_table_fadt struct acpi_table_fadt { s#acpi_table_header header ; t#u32 facs ; t#u32 dsdt ; t#u8 model ; t#u8 preferred_profile ; t#u16 sci_interrupt ; t#u32 smi_command ; t#u8 acpi_enable ; t#u8 acpi_disable ; t#u8 S4bios_request ; t#u8 pstate_control ; t#u32 pm1a_event_block ; t#u32 pm1b_event_block ; t#u32 pm1a_control_block ; t#u32 pm1b_control_block ; t#u32 pm2_control_block ; t#u32 pm_timer_block ; t#u32 gpe0_block ; t#u32 gpe1_block ; t#u8 pm1_event_length ; t#u8 pm1_control_length ; t#u8 pm2_control_length ; t#u8 pm_timer_length ; t#u8 gpe0_block_length ; t#u8 gpe1_block_length ; t#u8 gpe1_base ; t#u8 cst_control ; t#u16 C2latency ; t#u16 C3latency ; t#u16 flush_size ; t#u16 flush_stride ; t#u8 duty_offset ; t#u8 duty_width ; t#u8 day_alarm ; t#u8 month_alarm ; t#u8 century ; t#u16 boot_flags ; t#u8 reserved ; t#u32 flags ; s#acpi_generic_address reset_register ; t#u8 reset_value ; t#u8 reserved4 [ 3 ] ; t#u64 Xfacs ; t#u64 Xdsdt ; s#acpi_generic_address xpm1a_event_block ; s#acpi_generic_address xpm1b_event_block ; s#acpi_generic_address xpm1a_control_block ; s#acpi_generic_address xpm1b_control_block ; s#acpi_generic_address xpm2_control_block ; s#acpi_generic_address xpm_timer_block ; s#acpi_generic_address xgpe0_block ; s#acpi_generic_address xgpe1_block ; } 
acpi_gbl_FADT extern s#acpi_table_fadt acpi_gbl_FADT 
acpi_dbg_level extern t#u32 acpi_dbg_level 
acpi_dbg_layer extern t#u32 acpi_dbg_layer 
acpi_current_gpe_count extern t#u32 acpi_current_gpe_count 

/* drivers/acpi/acpica/utmisc.o */
acpi_error void acpi_error ( const char * , t#u32 , const char * , ... ) 
acpi_exception void acpi_exception ( const char * , t#u32 , t#acpi_status , const char * , ... ) 
acpi_warning void acpi_warning ( const char * , t#u32 , const char * , ... ) 
acpi_info void acpi_info ( const char * , t#u32 , const char * , ... ) 

/* drivers/acpi/acpica/utxface.o */
acpi_enable_subsystem t#acpi_status acpi_enable_subsystem ( t#u32 ) 
acpi_initialize_objects t#acpi_status acpi_initialize_objects ( t#u32 ) 
acpi_terminate t#acpi_status acpi_terminate ( void ) 
acpi_purge_cached_objects t#acpi_status acpi_purge_cached_objects ( void ) 

/* drivers/acpi/bus.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
acpi_root_dir extern s#proc_dir_entry * acpi_root_dir 
s#acpi_device_status struct acpi_device_status { t#u32 present : 1 ; t#u32 enabled : 1 ; t#u32 show_in_ui : 1 ; t#u32 functional : 1 ; t#u32 battery_present : 1 ; t#u32 reserved : 27 ; } 
s#acpi_device_flags struct acpi_device_flags { t#u32 dynamic_status : 1 ; t#u32 bus_address : 1 ; t#u32 removable : 1 ; t#u32 ejectable : 1 ; t#u32 lockable : 1 ; t#u32 suprise_removal_ok : 1 ; t#u32 power_manageable : 1 ; t#u32 performance_manageable : 1 ; t#u32 wake_capable : 1 ; t#u32 force_power_state : 1 ; t#u32 reserved : 22 ; } 
t#acpi_bus_id typedef char acpi_bus_id [ 8 ] 
t#acpi_bus_address typedef unsigned long acpi_bus_address 
t#acpi_device_name typedef char acpi_device_name [ 40 ] 
t#acpi_device_class typedef char acpi_device_class [ 20 ] 
s#acpi_device_pnp struct acpi_device_pnp { t#acpi_bus_id bus_id ; t#acpi_bus_address bus_address ; char * unique_id ; s#list_head ids ; t#acpi_device_name device_name ; t#acpi_device_class device_class ; } 
s#acpi_device_power_flags struct acpi_device_power_flags { t#u32 explicit_get : 1 ; t#u32 power_resources : 1 ; t#u32 inrush_current : 1 ; t#u32 power_removed : 1 ; t#u32 reserved : 28 ; } 
s#acpi_handle_list struct acpi_handle_list { t#u32 count ; t#acpi_handle handles [ 10 ] ; } 
s#acpi_device_power_state struct acpi_device_power_state { struct { t#u8 valid : 1 ; t#u8 explicit_set : 1 ; t#u8 reserved : 6 ; } flags ; int power ; int latency ; s#acpi_handle_list resources ; } 
s#acpi_device_power struct acpi_device_power { int state ; s#acpi_device_power_flags flags ; s#acpi_device_power_state states [ 4 ] ; } 
s#acpi_device_wakeup_state struct acpi_device_wakeup_state { t#u8 enabled : 1 ; } 
s#acpi_device_wakeup_flags struct acpi_device_wakeup_flags { t#u8 valid : 1 ; t#u8 run_wake : 1 ; } 
s#acpi_device_wakeup struct acpi_device_wakeup { t#acpi_handle gpe_device ; t#acpi_integer gpe_number ; t#acpi_integer sleep_state ; s#acpi_handle_list resources ; s#acpi_device_wakeup_state state ; s#acpi_device_wakeup_flags flags ; int prepare_count ; } 
s#acpi_device_perf_flags struct acpi_device_perf_flags { t#u8 reserved : 8 ; } 
s#acpi_device_perf_state struct acpi_device_perf_state { struct { t#u8 valid : 1 ; t#u8 reserved : 7 ; } flags ; t#u8 power ; t#u8 performance ; int latency ; } 
s#acpi_device_perf struct acpi_device_perf { int state ; s#acpi_device_perf_flags flags ; int state_count ; s#acpi_device_perf_state * states ; } 
s#acpi_device_dir struct acpi_device_dir { s#proc_dir_entry * entry ; } 
t#acpi_op_add typedef int ( * acpi_op_add ) ( s#acpi_device * ) 
t#acpi_op_remove typedef int ( * acpi_op_remove ) ( s#acpi_device * , int ) 
t#acpi_op_start typedef int ( * acpi_op_start ) ( s#acpi_device * ) 
t#acpi_op_suspend typedef int ( * acpi_op_suspend ) ( s#acpi_device * , t#pm_message_t ) 
t#acpi_op_resume typedef int ( * acpi_op_resume ) ( s#acpi_device * ) 
t#acpi_op_bind typedef int ( * acpi_op_bind ) ( s#acpi_device * ) 
t#acpi_op_unbind typedef int ( * acpi_op_unbind ) ( s#acpi_device * ) 
t#acpi_op_notify typedef void ( * acpi_op_notify ) ( s#acpi_device * , t#u32 ) 
s#acpi_device_ops struct acpi_device_ops { t#acpi_op_add add ; t#acpi_op_remove remove ; t#acpi_op_start start ; t#acpi_op_suspend suspend ; t#acpi_op_resume resume ; t#acpi_op_bind bind ; t#acpi_op_unbind unbind ; t#acpi_op_notify notify ; } 
s#acpi_device_id struct acpi_device_id { t#__u8 id [ 16 ] ; t#kernel_ulong_t driver_data ; } 
s##device_private
s##dma_coherent_mem
s##class_private
s##bus_type_private
s##driver_private
s#acpi_driver struct acpi_driver { char name [ 80 ] ; char class [ 80 ] ; const s#acpi_device_id * ids ; unsigned int flags ; s#acpi_device_ops ops ; s#device_driver drv ; s#module * owner ; } 
s#acpi_bus_ops struct acpi_bus_ops { t#u32 t#acpi_op_add : 1 ; t#u32 t#acpi_op_start : 1 ; } 
e#acpi_bus_removal_type enum acpi_bus_removal_type { ACPI_BUS_REMOVAL_NORMAL = 0 , ACPI_BUS_REMOVAL_EJECT , ACPI_BUS_REMOVAL_SUPRISE , ACPI_BUS_REMOVAL_TYPE_COUNT } 
s#acpi_device struct acpi_device { int device_type ; t#acpi_handle handle ; s#acpi_device * parent ; s#list_head children ; s#list_head node ; s#list_head wakeup_list ; s#acpi_device_status status ; s#acpi_device_flags flags ; s#acpi_device_pnp pnp ; s#acpi_device_power power ; s#acpi_device_wakeup wakeup ; s#acpi_device_perf performance ; s#acpi_device_dir dir ; s#acpi_device_ops ops ; s#acpi_driver * driver ; void * driver_data ; s#device dev ; s#acpi_bus_ops bus_ops ; e#acpi_bus_removal_type removal_type ; } 
acpi_bus_get_device int acpi_bus_get_device ( t#acpi_handle , s#acpi_device * * ) 
acpi_bus_get_status int acpi_bus_get_status ( s#acpi_device * ) 
acpi_bus_private_data_handler void acpi_bus_private_data_handler ( t#acpi_handle , void * ) 
acpi_bus_get_private_data int acpi_bus_get_private_data ( t#acpi_handle , void * * ) 
acpi_bus_get_power int acpi_bus_get_power ( t#acpi_handle , int * ) 
acpi_bus_set_power int acpi_bus_set_power ( t#acpi_handle , int ) 
acpi_bus_power_manageable t#bool acpi_bus_power_manageable ( t#acpi_handle ) 
acpi_bus_can_wakeup t#bool acpi_bus_can_wakeup ( t#acpi_handle ) 
s#acpi_osc_context struct acpi_osc_context { char * uuid_str ; int rev ; s#acpi_buffer cap ; s#acpi_buffer ret ; } 
acpi_run_osc t#acpi_status acpi_run_osc ( t#acpi_handle , s#acpi_osc_context * ) 
acpi_bus_generate_proc_event4 int acpi_bus_generate_proc_event4 ( const char * , const char * , t#u8 , int ) 
acpi_bus_generate_proc_event int acpi_bus_generate_proc_event ( s#acpi_device * , t#u8 , int ) 
register_acpi_bus_notifier extern int register_acpi_bus_notifier ( s#notifier_block * ) 
unregister_acpi_bus_notifier extern void unregister_acpi_bus_notifier ( s#notifier_block * ) 

/* drivers/acpi/button.o */
acpi_lid_notifier_register int acpi_lid_notifier_register ( s#notifier_block * ) 
acpi_lid_notifier_unregister int acpi_lid_notifier_unregister ( s#notifier_block * ) 
acpi_lid_open int acpi_lid_open ( void ) 

/* drivers/acpi/cm_sbs.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
acpi_lock_ac_dir s#proc_dir_entry * acpi_lock_ac_dir ( void ) 
acpi_unlock_ac_dir void acpi_unlock_ac_dir ( s#proc_dir_entry * ) 
acpi_lock_battery_dir s#proc_dir_entry * acpi_lock_battery_dir ( void ) 
acpi_unlock_battery_dir void acpi_unlock_battery_dir ( s#proc_dir_entry * ) 

/* drivers/acpi/dock.o */
is_dock_device extern int is_dock_device ( t#acpi_handle ) 
register_dock_notifier extern int register_dock_notifier ( s#notifier_block * ) 
unregister_dock_notifier extern void unregister_dock_notifier ( s#notifier_block * ) 
s#acpi_dock_ops struct acpi_dock_ops { t#acpi_notify_handler handler ; t#acpi_notify_handler uevent ; } 
register_hotplug_dock_device extern int register_hotplug_dock_device ( t#acpi_handle , s#acpi_dock_ops * , void * ) 
unregister_hotplug_dock_device extern void unregister_hotplug_dock_device ( t#acpi_handle ) 

/* drivers/acpi/ec.o */
ec_burst_enable int ec_burst_enable ( void ) 
ec_burst_disable int ec_burst_disable ( void ) 
ec_read extern int ec_read ( t#u8 , t#u8 * ) 
ec_write extern int ec_write ( t#u8 , t#u8 ) 
ec_transaction extern int ec_transaction ( t#u8 , const t#u8 * , unsigned , t#u8 * , unsigned , int ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s#transaction struct transaction { const t#u8 * wdata ; t#u8 * rdata ; unsigned short irq_count ; t#u8 command ; t#u8 wi ; t#u8 ri ; t#u8 wlen ; t#u8 rlen ; t#bool done ; } 
s#acpi_ec struct acpi_ec { t#acpi_handle handle ; unsigned long gpe ; unsigned long command_addr ; unsigned long data_addr ; unsigned long global_lock ; unsigned long flags ; s#mutex lock ; t#wait_queue_head_t wait ; s#list_head list ; s#transaction * curr ; t#spinlock_t curr_lock ; } 
t#acpi_ec_query_func typedef int ( * acpi_ec_query_func ) ( void * ) 
acpi_ec_add_query_handler int acpi_ec_add_query_handler ( s#acpi_ec * , t#u8 , t#acpi_handle , t#acpi_ec_query_func , void * ) 
acpi_ec_remove_query_handler void acpi_ec_remove_query_handler ( s#acpi_ec * , t#u8 ) 

/* drivers/acpi/event.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##device_private
s##dma_coherent_mem
s##class_private
s##bus_type_private
s##driver_private
acpi_notifier_call_chain extern int acpi_notifier_call_chain ( s#acpi_device * , t#u32 , t#u32 ) 
register_acpi_notifier extern int register_acpi_notifier ( s#notifier_block * ) 
unregister_acpi_notifier extern int unregister_acpi_notifier ( s#notifier_block * ) 
acpi_bus_generate_netlink_event extern int acpi_bus_generate_netlink_event ( const char * , const char * , t#u8 , int ) 

/* drivers/acpi/glue.o */
acpi_get_child t#acpi_handle acpi_get_child ( t#acpi_handle , t#acpi_integer ) 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
acpi_get_physical_device s#device * acpi_get_physical_device ( t#acpi_handle ) 

/* drivers/acpi/numa.o */
acpi_get_node int acpi_get_node ( t#acpi_handle * ) 

/* drivers/acpi/osl.o */
acpi_os_map_memory void * acpi_os_map_memory ( t#acpi_physical_address , t#acpi_size ) 
acpi_os_unmap_memory void acpi_os_unmap_memory ( void * , t#acpi_size ) 
acpi_os_read_port t#acpi_status acpi_os_read_port ( t#acpi_io_address , t#u32 * , t#u32 ) 
acpi_os_write_port t#acpi_status acpi_os_write_port ( t#acpi_io_address , t#u32 , t#u32 ) 
t#acpi_execute_type typedef enum { OSL_GLOBAL_LOCK_HANDLER , OSL_NOTIFY_HANDLER , OSL_GPE_HANDLER , OSL_DEBUGGER_THREAD , OSL_EC_POLL_HANDLER , OSL_EC_BURST_HANDLER } acpi_execute_type 
t#acpi_osd_exec_callback typedef void ( * acpi_osd_exec_callback ) ( void * ) 
acpi_os_execute t#acpi_status acpi_os_execute ( t#acpi_execute_type , t#acpi_osd_exec_callback , void * ) 
acpi_os_hotplug_execute t#acpi_status acpi_os_hotplug_execute ( t#acpi_osd_exec_callback , void * ) 
acpi_os_wait_events_complete void acpi_os_wait_events_complete ( void * ) 
acpi_check_resource_conflict int acpi_check_resource_conflict ( s#resource * ) 
acpi_check_region int acpi_check_region ( t#resource_size_t , t#resource_size_t , const char * ) 
acpi_check_mem_region int acpi_check_mem_region ( t#resource_size_t , t#resource_size_t , const char * ) 

/* drivers/acpi/pci_root.o */
s#acpi_pci_driver struct acpi_pci_driver { s#acpi_pci_driver * next ; int ( * add ) ( t#acpi_handle ) ; void ( * remove ) ( t#acpi_handle ) ; } 
acpi_pci_register_driver int acpi_pci_register_driver ( s#acpi_pci_driver * ) 
acpi_pci_unregister_driver void acpi_pci_unregister_driver ( s#acpi_pci_driver * ) 
acpi_get_pci_rootbridge_handle t#acpi_handle acpi_get_pci_rootbridge_handle ( unsigned int , unsigned int ) 
acpi_is_root_bridge int acpi_is_root_bridge ( t#acpi_handle ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##device_private
s##dma_coherent_mem
s##class_private
s##bus_type_private
s##driver_private
s#acpi_pci_id struct acpi_pci_id { t#u16 segment ; t#u16 bus ; t#u16 device ; t#u16 function ; } 
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#acpi_pci_root struct acpi_pci_root { s#list_head node ; s#acpi_device * device ; s#acpi_pci_id id ; s#pci_bus * bus ; t#u16 segment ; t#u8 bus_nr ; t#u32 osc_support_set ; t#u32 osc_control_set ; t#u32 osc_control_qry ; t#u32 osc_queried : 1 ; } 
acpi_pci_find_root s#acpi_pci_root * acpi_pci_find_root ( t#acpi_handle ) 
acpi_get_pci_dev s#pci_dev * acpi_get_pci_dev ( t#acpi_handle ) 
acpi_pci_osc_control_set extern t#acpi_status acpi_pci_osc_control_set ( t#acpi_handle , t#u32 ) 

/* drivers/acpi/processor_core.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
per_cpu__processors extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( s#acpi_processor * ) per_cpu__processors 
acpi_processor_set_thermal_limit int acpi_processor_set_thermal_limit ( t#acpi_handle , int ) 

/* drivers/acpi/processor_perflib.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
acpi_processor_notify_smm int acpi_processor_notify_smm ( s#module * ) 
acpi_processor_preregister_performance extern int acpi_processor_preregister_performance ( s#acpi_processor_performance * ) 
acpi_processor_register_performance extern int acpi_processor_register_performance ( s#acpi_processor_performance * , unsigned int ) 
acpi_processor_unregister_performance extern void acpi_processor_unregister_performance ( s#acpi_processor_performance * , unsigned int ) 

/* drivers/acpi/sbshc.o */
s##acpi_ec
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
t#smbus_alarm_callback typedef void ( * smbus_alarm_callback ) ( void * ) 
s#acpi_smb_hc struct acpi_smb_hc { s#acpi_ec * ec ; s#mutex lock ; t#wait_queue_head_t wait ; t#u8 offset ; t#u8 query_bit ; t#smbus_alarm_callback callback ; void * context ; } 
acpi_smbus_read extern int acpi_smbus_read ( s#acpi_smb_hc * , t#u8 , t#u8 , t#u8 , t#u8 * ) 
acpi_smbus_write extern int acpi_smbus_write ( s#acpi_smb_hc * , t#u8 , t#u8 , t#u8 , t#u8 * , t#u8 ) 
acpi_smbus_register_callback extern int acpi_smbus_register_callback ( s#acpi_smb_hc * , t#smbus_alarm_callback , void * ) 
acpi_smbus_unregister_callback extern int acpi_smbus_unregister_callback ( s#acpi_smb_hc * ) 

/* drivers/acpi/scan.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##device_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##bus_type_private
s##driver_private
acpi_match_device_ids int acpi_match_device_ids ( s#acpi_device * , const s#acpi_device_id * ) 
acpi_bus_register_driver int acpi_bus_register_driver ( s#acpi_driver * ) 
acpi_bus_unregister_driver void acpi_bus_unregister_driver ( s#acpi_driver * ) 
acpi_bus_get_ejd t#acpi_status acpi_bus_get_ejd ( t#acpi_handle , t#acpi_handle * ) 
acpi_device_hid char * acpi_device_hid ( s#acpi_device * ) 
acpi_bus_add int acpi_bus_add ( s#acpi_device * * , s#acpi_device * , t#acpi_handle , int ) 
acpi_bus_start int acpi_bus_start ( s#acpi_device * ) 
acpi_bus_trim int acpi_bus_trim ( s#acpi_device * , int ) 

/* drivers/acpi/utils.o */
acpi_extract_package t#acpi_status acpi_extract_package ( u#acpi_object * , s#acpi_buffer * , s#acpi_buffer * ) 
acpi_evaluate_integer t#acpi_status acpi_evaluate_integer ( t#acpi_handle , t#acpi_string , s#acpi_object_list * , unsigned long long * ) 
acpi_evaluate_reference t#acpi_status acpi_evaluate_reference ( t#acpi_handle , t#acpi_string , s#acpi_object_list * , s#acpi_handle_list * ) 

/* drivers/acpi/video.o */
acpi_video_register int acpi_video_register ( void ) 
acpi_video_unregister void acpi_video_unregister ( void ) 

/* drivers/acpi/video_detect.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##device_private
s##dma_coherent_mem
s##class_private
s##bus_type_private
s##driver_private
acpi_is_video_device extern long acpi_is_video_device ( s#acpi_device * ) 
acpi_video_get_capabilities extern long acpi_video_get_capabilities ( t#acpi_handle ) 
acpi_video_backlight_support extern int acpi_video_backlight_support ( void ) 
acpi_video_display_switch_support extern int acpi_video_display_switch_support ( void ) 

/* drivers/ata/libata-acpi.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##scsi_cmnd
s#execute_work struct execute_work { s#work_struct work ; } 
e#scsi_target_state enum scsi_target_state { STARGET_CREATED = 1 , STARGET_RUNNING , STARGET_DEL , } 
s#scsi_target struct scsi_target { s#scsi_device * starget_sdev_user ; s#list_head siblings ; s#list_head devices ; s#device dev ; unsigned int reap_ref ; unsigned int channel ; unsigned int id ; unsigned int create : 1 ; unsigned int single_lun : 1 ; unsigned int pdt_1f_for_no_lun ; unsigned int target_busy ; unsigned int can_queue ; unsigned int target_blocked ; unsigned int max_target_blocked ; char scsi_level ; s#execute_work ew ; e#scsi_target_state state ; void * hostdata ; unsigned long starget_data [ 0 ] ; } 
s#scsi_dh_devlist struct scsi_dh_devlist { char * vendor ; char * model ; char tgps ; } 
s##scsi_sense_hdr
t#activate_complete typedef void ( * activate_complete ) ( void * , int ) 
s#scsi_device_handler struct scsi_device_handler { s#list_head list ; s#module * module ; const char * name ; const s#scsi_dh_devlist * devlist ; int ( * check_sense ) ( s#scsi_device * , s#scsi_sense_hdr * ) ; int ( * attach ) ( s#scsi_device * ) ; void ( * detach ) ( s#scsi_device * ) ; int ( * activate ) ( s#scsi_device * , t#activate_complete , void * ) ; int ( * prep_fn ) ( s#scsi_device * , s#request * ) ; int ( * set_params ) ( s#scsi_device * , const char * ) ; } 
s#scsi_dh_data struct scsi_dh_data { s#scsi_device_handler * scsi_dh ; s#scsi_device * sdev ; s#kref kref ; char buf [ 0 ] ; } 
e#scsi_device_state enum scsi_device_state { SDEV_CREATED = 1 , SDEV_RUNNING , SDEV_CANCEL , SDEV_DEL , SDEV_QUIESCE , SDEV_OFFLINE , SDEV_BLOCK , SDEV_CREATED_BLOCK , } 
s#scsi_device struct scsi_device { s#Scsi_Host * host ; s#request_queue * request_queue ; s#list_head siblings ; s#list_head same_target_siblings ; unsigned int device_busy ; t#spinlock_t list_lock ; s#list_head cmd_list ; s#list_head starved_entry ; s#scsi_cmnd * current_cmnd ; unsigned short queue_depth ; unsigned short max_queue_depth ; unsigned short last_queue_full_depth ; unsigned short last_queue_full_count ; unsigned long last_queue_full_time ; unsigned long queue_ramp_up_period ; unsigned long last_queue_ramp_up ; unsigned int id , lun , channel ; unsigned int manufacturer ; unsigned sector_size ; void * hostdata ; char type ; char scsi_level ; char inq_periph_qual ; char tgps ; unsigned char inquiry_len ; unsigned char * inquiry ; const char * vendor ; const char * model ; const char * rev ; unsigned char current_tag ; s#scsi_target * sdev_target ; unsigned int sdev_bflags ; unsigned writeable : 1 ; unsigned removable : 1 ; unsigned changed : 1 ; unsigned busy : 1 ; unsigned lockable : 1 ; unsigned locked : 1 ; unsigned borken : 1 ; unsigned disconnect : 1 ; unsigned soft_reset : 1 ; unsigned sdtr : 1 ; unsigned wdtr : 1 ; unsigned ppr : 1 ; unsigned tagged_supported : 1 ; unsigned simple_tags : 1 ; unsigned ordered_tags : 1 ; unsigned was_reset : 1 ; unsigned expecting_cc_ua : 1 ; unsigned use_10_for_rw : 1 ; unsigned use_10_for_ms : 1 ; unsigned skip_ms_page_8 : 1 ; unsigned skip_ms_page_3f : 1 ; unsigned use_192_bytes_for_3f : 1 ; unsigned no_start_on_add : 1 ; unsigned allow_restart : 1 ; unsigned manage_start_stop : 1 ; unsigned start_stop_pwr_cond : 1 ; unsigned no_uld_attach : 1 ; unsigned select_no_atn : 1 ; unsigned fix_capacity : 1 ; unsigned guess_capacity : 1 ; unsigned retry_hwerror : 1 ; unsigned last_sector_bug : 1 ; unsigned is_visible : 1 ; unsigned long supported_events [ ( ( ( SDEV_EVT_MAXBITS ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; s#list_head event_list ; s#work_struct event_work ; unsigned int device_blocked ; unsigned int max_device_blocked ; t#atomic_t iorequest_cnt ; t#atomic_t iodone_cnt ; t#atomic_t ioerr_cnt ; s#device sdev_gendev , sdev_dev ; s#execute_work ew ; s#scsi_dh_data * scsi_dh_data ; e#scsi_device_state sdev_state ; unsigned long sdev_data [ 0 ] ; } 
s#scsi_host_template struct scsi_host_template { s#module * module ; const char * name ; int ( * detect ) ( s#scsi_host_template * ) ; int ( * release ) ( s#Scsi_Host * ) ; const char * ( * info ) ( s#Scsi_Host * ) ; int ( * ioctl ) ( s#scsi_device * , int , void * ) ; int ( * compat_ioctl ) ( s#scsi_device * , int , void * ) ; int ( * queuecommand ) ( s#scsi_cmnd * , void ( * ) ( s#scsi_cmnd * ) ) ; int ( * transfer_response ) ( s#scsi_cmnd * , void ( * ) ( s#scsi_cmnd * ) ) ; int ( * eh_abort_handler ) ( s#scsi_cmnd * ) ; int ( * eh_device_reset_handler ) ( s#scsi_cmnd * ) ; int ( * eh_target_reset_handler ) ( s#scsi_cmnd * ) ; int ( * eh_bus_reset_handler ) ( s#scsi_cmnd * ) ; int ( * eh_host_reset_handler ) ( s#scsi_cmnd * ) ; int ( * slave_alloc ) ( s#scsi_device * ) ; int ( * slave_configure ) ( s#scsi_device * ) ; void ( * slave_destroy ) ( s#scsi_device * ) ; int ( * target_alloc ) ( s#scsi_target * ) ; void ( * target_destroy ) ( s#scsi_target * ) ; int ( * scan_finished ) ( s#Scsi_Host * , unsigned long ) ; void ( * scan_start ) ( s#Scsi_Host * ) ; int ( * change_queue_depth ) ( s#scsi_device * , int , int ) ; int ( * change_queue_type ) ( s#scsi_device * , int ) ; int ( * bios_param ) ( s#scsi_device * , s#block_device * , t#sector_t , int [ ] ) ; int ( * proc_info ) ( s#Scsi_Host * , char * , char * * , t#off_t , int , int ) ; e#blk_eh_timer_return ( * eh_timed_out ) ( s#scsi_cmnd * ) ; const char * proc_name ; s#proc_dir_entry * proc_dir ; int can_queue ; int this_id ; unsigned short sg_tablesize ; unsigned short max_sectors ; unsigned long dma_boundary ; short cmd_per_lun ; unsigned char present ; unsigned supported_mode : 2 ; unsigned unchecked_isa_dma : 1 ; unsigned use_clustering : 1 ; unsigned emulated : 1 ; unsigned skip_settle_delay : 1 ; unsigned ordered_tag : 1 ; unsigned int max_host_blocked ; s#device_attribute * * shost_attrs ; s#device_attribute * * sdev_attrs ; s#list_head legacy_hosts ; t#u64 vendor_id ; } 
s##scsi_transport_template
s##workqueue_struct
e#scsi_host_state enum scsi_host_state { SHOST_CREATED = 1 , SHOST_RUNNING , SHOST_CANCEL , SHOST_DEL , SHOST_RECOVERY , SHOST_CANCEL_RECOVERY , SHOST_DEL_RECOVERY , } 
s#Scsi_Host struct Scsi_Host { s#list_head __devices ; s#list_head __targets ; s#scsi_host_cmd_pool * cmd_pool ; t#spinlock_t free_list_lock ; s#list_head free_list ; s#list_head starved_list ; t#spinlock_t default_lock ; t#spinlock_t * host_lock ; s#mutex scan_mutex ; s#list_head eh_cmd_q ; s#task_struct * ehandler ; s#completion * eh_action ; t#wait_queue_head_t host_wait ; s#scsi_host_template * hostt ; s#scsi_transport_template * transportt ; s#blk_queue_tag * bqt ; unsigned int host_busy ; unsigned int host_failed ; unsigned int host_eh_scheduled ; unsigned int host_no ; int resetting ; unsigned long last_reset ; unsigned int max_id ; unsigned int max_lun ; unsigned int max_channel ; unsigned int unique_id ; unsigned short max_cmd_len ; int this_id ; int can_queue ; short cmd_per_lun ; short unsigned int sg_tablesize ; short unsigned int max_sectors ; unsigned long dma_boundary ; unsigned long cmd_serial_number ; unsigned active_mode : 2 ; unsigned unchecked_isa_dma : 1 ; unsigned use_clustering : 1 ; unsigned use_blk_tcq : 1 ; unsigned host_self_blocked : 1 ; unsigned reverse_ordering : 1 ; unsigned ordered_tag : 1 ; unsigned tmf_in_progress : 1 ; unsigned async_scan : 1 ; char work_q_name [ 20 ] ; s#workqueue_struct * work_q ; unsigned int host_blocked ; unsigned int max_host_blocked ; unsigned int prot_capabilities ; unsigned char prot_guard_type ; s#request_queue * uspace_req_q ; unsigned long base ; unsigned long io_port ; unsigned char n_io_port ; unsigned char dma_channel ; unsigned int irq ; e#scsi_host_state shost_state ; s#device shost_gendev , shost_dev ; s#list_head sht_legacy_list ; void * shost_data ; s#device * dma_dev ; unsigned long hostdata [ 0 ] __attribute__ ( ( aligned ( sizeof ( unsigned long ) ) ) ) ; } 
s#ata_eh_info struct ata_eh_info { s#ata_device * dev ; t#u32 serror ; unsigned int err_mask ; unsigned int action ; unsigned int dev_action [ ATA_MAX_DEVICES ] ; unsigned int flags ; unsigned int probe_mask ; char desc [ ATA_EH_DESC_LEN ] ; int desc_len ; } 
s#ata_eh_context struct ata_eh_context { s#ata_eh_info i ; int tries [ ATA_MAX_DEVICES ] ; int cmd_timeout_idx [ ATA_MAX_DEVICES ] [ ATA_EH_CMD_TIMEOUT_TABLE_SIZE ] ; unsigned int classes [ ATA_MAX_DEVICES ] ; unsigned int did_probe_mask ; unsigned int unloaded_mask ; unsigned int saved_ncq_enabled ; t#u8 saved_xfer_mode [ ATA_MAX_DEVICES ] ; unsigned long last_reset ; } 
s#ata_link struct ata_link { s#ata_port * ap ; int pmp ; unsigned int active_tag ; t#u32 sactive ; unsigned int flags ; t#u32 saved_scontrol ; unsigned int hw_sata_spd_limit ; unsigned int sata_spd_limit ; unsigned int sata_spd ; s#ata_eh_info eh_info ; s#ata_eh_context eh_context ; s#ata_device device [ ATA_MAX_DEVICES ] ; } 
s#ata_ering_entry struct ata_ering_entry { unsigned int eflags ; unsigned int err_mask ; t#u64 timestamp ; } 
s#ata_ering struct ata_ering { int cursor ; s#ata_ering_entry ring [ ATA_ERING_SIZE ] ; } 
s#ata_device struct ata_device { s#ata_link * link ; unsigned int devno ; unsigned int horkage ; unsigned long flags ; s#scsi_device * sdev ; t#acpi_handle t#acpi_handle ; u#acpi_object * gtf_cache ; unsigned int gtf_filter ; t#u64 n_sectors ; t#u64 n_native_sectors ; unsigned int class ; unsigned long unpark_deadline ; t#u8 pio_mode ; t#u8 dma_mode ; t#u8 xfer_mode ; unsigned int xfer_shift ; unsigned int multi_count ; unsigned int max_sectors ; unsigned int cdb_len ; unsigned long pio_mask ; unsigned long mwdma_mask ; unsigned long udma_mask ; t#u16 cylinders ; t#u16 heads ; t#u16 sectors ; union { t#u16 id [ ATA_ID_WORDS ] ; t#u32 gscr [ SATA_PMP_GSCR_DWORDS ] ; } ; int spdn_cnt ; s#ata_ering ering ; } 
s#ata_taskfile struct ata_taskfile { unsigned long flags ; t#u8 protocol ; t#u8 ctl ; t#u8 hob_feature ; t#u8 hob_nsect ; t#u8 hob_lbal ; t#u8 hob_lbam ; t#u8 hob_lbah ; t#u8 feature ; t#u8 nsect ; t#u8 lbal ; t#u8 lbam ; t#u8 lbah ; t#u8 device ; t#u8 command ; } 
t#ata_qc_cb_t typedef void ( * ata_qc_cb_t ) ( s#ata_queued_cmd * ) 
s#ata_queued_cmd struct ata_queued_cmd { s#ata_port * ap ; s#ata_device * dev ; s#scsi_cmnd * scsicmd ; void ( * scsidone ) ( s#scsi_cmnd * ) ; s#ata_taskfile tf ; t#u8 cdb [ ATAPI_CDB_LEN ] ; unsigned long flags ; unsigned int tag ; unsigned int n_elem ; unsigned int orig_n_elem ; int dma_dir ; unsigned int sect_size ; unsigned int nbytes ; unsigned int extrabytes ; unsigned int curbytes ; s#scatterlist * cursg ; unsigned int cursg_ofs ; s#scatterlist sgent ; s#scatterlist * sg ; unsigned int err_mask ; s#ata_taskfile result_tf ; t#ata_qc_cb_t complete_fn ; void * private_data ; void * lldd_task ; } 
t#ata_prereset_fn_t typedef int ( * ata_prereset_fn_t ) ( s#ata_link * , unsigned long ) 
t#ata_reset_fn_t typedef int ( * ata_reset_fn_t ) ( s#ata_link * , unsigned int * , unsigned long ) 
t#ata_postreset_fn_t typedef void ( * ata_postreset_fn_t ) ( s#ata_link * , unsigned int * ) 
e#link_pm enum link_pm { NOT_AVAILABLE , MIN_POWER , MAX_PERFORMANCE , MEDIUM_POWER , } 
s#ata_host struct ata_host { t#spinlock_t lock ; s#device * dev ; void * const * iomap ; unsigned int n_ports ; void * private_data ; s#ata_port_operations * ops ; unsigned long flags ; t#acpi_handle t#acpi_handle ; s#ata_port * simplex_claimed ; s#ata_port * ports [ 0 ] ; } 
e#sw_activity enum sw_activity { OFF , BLINK_ON , BLINK_OFF , } 
s#ata_port_operations struct ata_port_operations { int ( * qc_defer ) ( s#ata_queued_cmd * ) ; int ( * check_atapi_dma ) ( s#ata_queued_cmd * ) ; void ( * qc_prep ) ( s#ata_queued_cmd * ) ; unsigned int ( * qc_issue ) ( s#ata_queued_cmd * ) ; t#bool ( * qc_fill_rtf ) ( s#ata_queued_cmd * ) ; int ( * cable_detect ) ( s#ata_port * ) ; unsigned long ( * mode_filter ) ( s#ata_device * , unsigned long ) ; void ( * set_piomode ) ( s#ata_port * , s#ata_device * ) ; void ( * set_dmamode ) ( s#ata_port * , s#ata_device * ) ; int ( * set_mode ) ( s#ata_link * , s#ata_device * * ) ; unsigned int ( * read_id ) ( s#ata_device * , s#ata_taskfile * , t#u16 * ) ; void ( * dev_config ) ( s#ata_device * ) ; void ( * freeze ) ( s#ata_port * ) ; void ( * thaw ) ( s#ata_port * ) ; t#ata_prereset_fn_t prereset ; t#ata_reset_fn_t softreset ; t#ata_reset_fn_t hardreset ; t#ata_postreset_fn_t postreset ; t#ata_prereset_fn_t pmp_prereset ; t#ata_reset_fn_t pmp_softreset ; t#ata_reset_fn_t pmp_hardreset ; t#ata_postreset_fn_t pmp_postreset ; void ( * error_handler ) ( s#ata_port * ) ; void ( * lost_interrupt ) ( s#ata_port * ) ; void ( * post_internal_cmd ) ( s#ata_queued_cmd * ) ; int ( * scr_read ) ( s#ata_link * , unsigned int , t#u32 * ) ; int ( * scr_write ) ( s#ata_link * , unsigned int , t#u32 ) ; void ( * pmp_attach ) ( s#ata_port * ) ; void ( * pmp_detach ) ( s#ata_port * ) ; int ( * enable_pm ) ( s#ata_port * , e#link_pm ) ; void ( * disable_pm ) ( s#ata_port * ) ; int ( * port_suspend ) ( s#ata_port * , t#pm_message_t ) ; int ( * port_resume ) ( s#ata_port * ) ; int ( * port_start ) ( s#ata_port * ) ; void ( * port_stop ) ( s#ata_port * ) ; void ( * host_stop ) ( s#ata_host * ) ; void ( * sff_dev_select ) ( s#ata_port * , unsigned int ) ; t#u8 ( * sff_check_status ) ( s#ata_port * ) ; t#u8 ( * sff_check_altstatus ) ( s#ata_port * ) ; void ( * sff_tf_load ) ( s#ata_port * , const s#ata_taskfile * ) ; void ( * sff_tf_read ) ( s#ata_port * , s#ata_taskfile * ) ; void ( * sff_exec_command ) ( s#ata_port * , const s#ata_taskfile * ) ; unsigned int ( * sff_data_xfer ) ( s#ata_device * , unsigned char * , unsigned int , int ) ; t#u8 ( * sff_irq_on ) ( s#ata_port * ) ; void ( * sff_irq_clear ) ( s#ata_port * ) ; void ( * bmdma_setup ) ( s#ata_queued_cmd * ) ; void ( * bmdma_start ) ( s#ata_queued_cmd * ) ; void ( * bmdma_stop ) ( s#ata_queued_cmd * ) ; t#u8 ( * bmdma_status ) ( s#ata_port * ) ; void ( * drain_fifo ) ( s#ata_queued_cmd * ) ; t#ssize_t ( * em_show ) ( s#ata_port * , char * ) ; t#ssize_t ( * em_store ) ( s#ata_port * , const char * , t#size_t ) ; t#ssize_t ( * sw_activity_show ) ( s#ata_device * , char * ) ; t#ssize_t ( * sw_activity_store ) ( s#ata_device * , e#sw_activity ) ; void ( * phy_reset ) ( s#ata_port * ) ; void ( * eng_timeout ) ( s#ata_port * ) ; const s#ata_port_operations * inherits ; } 
t#__le32 typedef t#__u32 __le32 
s#ata_prd struct ata_prd { t#__le32 addr ; t#__le32 flags_len ; } 
s#ata_ioports struct ata_ioports { void * cmd_addr ; void * data_addr ; void * error_addr ; void * feature_addr ; void * nsect_addr ; void * lbal_addr ; void * lbam_addr ; void * lbah_addr ; void * device_addr ; void * status_addr ; void * command_addr ; void * altstatus_addr ; void * ctl_addr ; void * bmdma_addr ; void * scr_addr ; } 
s#ata_port_stats struct ata_port_stats { unsigned long unhandled_irq ; unsigned long idle_irq ; unsigned long rw_reqbuf ; } 
s#ata_acpi_drive struct ata_acpi_drive { t#u32 pio ; t#u32 dma ; } 
s#ata_acpi_gtm struct ata_acpi_gtm { s#ata_acpi_drive drive [ 2 ] ; t#u32 flags ; } 
s#ata_port struct ata_port { s#Scsi_Host * scsi_host ; s#ata_port_operations * ops ; t#spinlock_t * lock ; unsigned long flags ; unsigned int pflags ; unsigned int print_id ; unsigned int port_no ; s#ata_prd * prd ; t#dma_addr_t prd_dma ; s#ata_ioports ioaddr ; t#u8 ctl ; t#u8 last_ctl ; unsigned int pio_mask ; unsigned int mwdma_mask ; unsigned int udma_mask ; unsigned int cbl ; s#ata_queued_cmd qcmd [ ATA_MAX_QUEUE ] ; unsigned long qc_allocated ; unsigned int qc_active ; int nr_active_links ; s#ata_link link ; s#ata_link * slave_link ; int nr_pmp_links ; s#ata_link * pmp_link ; s#ata_link * excl_link ; s#ata_port_stats stats ; s#ata_host * host ; s#device * dev ; void * port_task_data ; s#delayed_work port_task ; s#delayed_work hotplug_task ; s#work_struct scsi_rescan_task ; unsigned int hsm_task_state ; t#u32 msg_enable ; s#list_head eh_done_q ; t#wait_queue_head_t eh_wait_q ; int eh_tries ; s#completion park_req_pending ; t#pm_message_t pm_mesg ; int * pm_result ; e#link_pm pm_policy ; s#timer_list fastdrain_timer ; unsigned long fastdrain_cnt ; int em_message_type ; void * private_data ; t#acpi_handle t#acpi_handle ; s#ata_acpi_gtm __acpi_init_gtm ; t#u8 sector_buf [ ATA_SECT_SIZE ] __attribute__ ( ( __aligned__ ( ( 1 << ( 7 ) ) ) ) ) ; } 
ata_acpi_gtm int ata_acpi_gtm ( s#ata_port * , s#ata_acpi_gtm * ) 
ata_acpi_stm int ata_acpi_stm ( s#ata_port * , const s#ata_acpi_gtm * ) 
ata_acpi_gtm_xfermask unsigned long ata_acpi_gtm_xfermask ( s#ata_device * , const s#ata_acpi_gtm * ) 
ata_acpi_cbl_80wire int ata_acpi_cbl_80wire ( s#ata_port * , const s#ata_acpi_gtm * ) 

/* drivers/ata/libata-core.o */
sata_deb_timing_normal extern const unsigned long sata_deb_timing_normal [ ] 
sata_deb_timing_hotplug extern const unsigned long sata_deb_timing_hotplug [ ] 
sata_deb_timing_long extern const unsigned long sata_deb_timing_long [ ] 
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##scsi_device
s#sg_table struct sg_table { s#scatterlist * sgl ; unsigned int nents ; unsigned int orig_nents ; } 
s#scsi_data_buffer struct scsi_data_buffer { s#sg_table table ; unsigned length ; int resid ; } 
s#scsi_pointer struct scsi_pointer { char * ptr ; int this_residual ; s#scatterlist * buffer ; int buffers_residual ; t#dma_addr_t dma_handle ; volatile int Status ; volatile int Message ; volatile int have_data_in ; volatile int sent_command ; volatile int phase ; } 
s#scsi_cmnd struct scsi_cmnd { s#scsi_device * device ; s#list_head list ; s#list_head eh_entry ; int eh_eflags ; unsigned long serial_number ; unsigned long jiffies_at_alloc ; int retries ; int allowed ; unsigned char prot_op ; unsigned char prot_type ; unsigned short cmd_len ; e#dma_data_direction sc_data_direction ; unsigned char * cmnd ; s#scsi_data_buffer sdb ; s#scsi_data_buffer * prot_sdb ; unsigned underflow ; unsigned transfersize ; s#request * request ; unsigned char * sense_buffer ; void ( * scsi_done ) ( s#scsi_cmnd * ) ; s#scsi_pointer SCp ; unsigned char * host_scribble ; int result ; unsigned char tag ; } 
s##scsi_target
s##scsi_transport_template
s##workqueue_struct
ata_base_port_ops extern const s#ata_port_operations ata_base_port_ops 
sata_port_ops extern const s#ata_port_operations sata_port_ops 
ata_dummy_port_ops extern s#ata_port_operations ata_dummy_port_ops 
s#ata_port_info struct ata_port_info { unsigned long flags ; unsigned long link_flags ; unsigned long pio_mask ; unsigned long mwdma_mask ; unsigned long udma_mask ; s#ata_port_operations * port_ops ; void * private_data ; } 
ata_dummy_port_info extern const s#ata_port_info ata_dummy_port_info 
e#ata_link_iter_mode enum ata_link_iter_mode { ATA_LITER_EDGE , ATA_LITER_HOST_FIRST , ATA_LITER_PMP_FIRST , } 
ata_link_next extern s#ata_link * ata_link_next ( s#ata_link * , s#ata_port * , e#ata_link_iter_mode ) 
e#ata_dev_iter_mode enum ata_dev_iter_mode { ATA_DITER_ENABLED , ATA_DITER_ENABLED_REVERSE , ATA_DITER_ALL , ATA_DITER_ALL_REVERSE , } 
ata_dev_next extern s#ata_device * ata_dev_next ( s#ata_device * , s#ata_link * , e#ata_dev_iter_mode ) 
ata_std_bios_param extern int ata_std_bios_param ( s#scsi_device * , s#block_device * , t#sector_t , int [ ] ) 
ata_host_init extern void ata_host_init ( s#ata_host * , s#device * , unsigned long , s#ata_port_operations * ) 
ata_host_alloc extern s#ata_host * ata_host_alloc ( s#device * , int ) 
ata_host_alloc_pinfo extern s#ata_host * ata_host_alloc_pinfo ( s#device * , const s#ata_port_info * const * , int ) 
ata_slave_link_init extern int ata_slave_link_init ( s#ata_port * ) 
ata_host_start extern int ata_host_start ( s#ata_host * ) 
ata_host_register extern int ata_host_register ( s#ata_host * , s#scsi_host_template * ) 
ata_host_activate extern int ata_host_activate ( s#ata_host * , int , t#irq_handler_t , unsigned long , s#scsi_host_template * ) 
ata_host_detach extern void ata_host_detach ( s#ata_host * ) 
ata_sg_init extern void ata_sg_init ( s#ata_queued_cmd * , s#scatterlist * , unsigned int ) 
ata_qc_complete extern void ata_qc_complete ( s#ata_queued_cmd * ) 
ata_qc_complete_multiple extern int ata_qc_complete_multiple ( s#ata_port * , t#u32 ) 
atapi_cmd_type extern int atapi_cmd_type ( t#u8 ) 
ata_tf_to_fis extern void ata_tf_to_fis ( const s#ata_taskfile * , t#u8 , int , t#u8 * ) 
ata_tf_from_fis extern void ata_tf_from_fis ( const t#u8 * , s#ata_taskfile * ) 
ata_pack_xfermask extern unsigned long ata_pack_xfermask ( unsigned long , unsigned long , unsigned long ) 
ata_unpack_xfermask extern void ata_unpack_xfermask ( unsigned long , unsigned long * , unsigned long * , unsigned long * ) 
ata_xfer_mask2mode extern t#u8 ata_xfer_mask2mode ( unsigned long ) 
ata_xfer_mode2mask extern unsigned long ata_xfer_mode2mask ( t#u8 ) 
ata_xfer_mode2shift extern int ata_xfer_mode2shift ( unsigned long ) 
ata_mode_string extern const char * ata_mode_string ( unsigned long ) 
ata_id_xfermask extern unsigned long ata_id_xfermask ( const t#u16 * ) 
ata_port_start extern int ata_port_start ( s#ata_port * ) 
ata_do_set_mode extern int ata_do_set_mode ( s#ata_link * , s#ata_device * * ) 
ata_std_qc_defer extern int ata_std_qc_defer ( s#ata_queued_cmd * ) 
ata_noop_qc_prep extern void ata_noop_qc_prep ( s#ata_queued_cmd * ) 
ata_port_probe extern void ata_port_probe ( s#ata_port * ) 
ata_dev_disable extern void ata_dev_disable ( s#ata_device * ) 
sata_set_spd extern int sata_set_spd ( s#ata_link * ) 
ata_wait_after_reset extern int ata_wait_after_reset ( s#ata_link * , unsigned long , int ( * ) ( s#ata_link * ) ) 
sata_link_debounce extern int sata_link_debounce ( s#ata_link * , const unsigned long * , unsigned long ) 
sata_link_resume extern int sata_link_resume ( s#ata_link * , const unsigned long * , unsigned long ) 
ata_std_prereset extern int ata_std_prereset ( s#ata_link * , unsigned long ) 
sata_link_hardreset extern int sata_link_hardreset ( s#ata_link * , const unsigned long * , unsigned long , t#bool * , int ( * ) ( s#ata_link * ) ) 
sata_std_hardreset extern int sata_std_hardreset ( s#ata_link * , unsigned int * , unsigned long ) 
ata_std_postreset extern void ata_std_postreset ( s#ata_link * , unsigned int * ) 
ata_dev_classify extern unsigned int ata_dev_classify ( const s#ata_taskfile * ) 
ata_dev_pair extern s#ata_device * ata_dev_pair ( s#ata_device * ) 
ata_port_disable extern void ata_port_disable ( s#ata_port * ) 
ata_ratelimit extern int ata_ratelimit ( void ) 
ata_wait_register extern t#u32 ata_wait_register ( void * , t#u32 , t#u32 , unsigned long , unsigned long ) 
ata_scsi_queuecmd extern int ata_scsi_queuecmd ( s#scsi_cmnd * , void ( * ) ( s#scsi_cmnd * ) ) 
ata_scsi_slave_config extern int ata_scsi_slave_config ( s#scsi_device * ) 
ata_scsi_slave_destroy extern void ata_scsi_slave_destroy ( s#scsi_device * ) 
ata_scsi_change_queue_depth extern int ata_scsi_change_queue_depth ( s#scsi_device * , int , int ) 
sata_scr_valid extern int sata_scr_valid ( s#ata_link * ) 
sata_scr_read extern int sata_scr_read ( s#ata_link * , int , t#u32 * ) 
sata_scr_write extern int sata_scr_write ( s#ata_link * , int , t#u32 ) 
sata_scr_write_flush extern int sata_scr_write_flush ( s#ata_link * , int , t#u32 ) 
ata_link_online extern t#bool ata_link_online ( s#ata_link * ) 
ata_link_offline extern t#bool ata_link_offline ( s#ata_link * ) 
ata_host_suspend extern int ata_host_suspend ( s#ata_host * , t#pm_message_t ) 
ata_host_resume extern void ata_host_resume ( s#ata_host * ) 
ata_id_string extern void ata_id_string ( const t#u16 * , unsigned char * , unsigned int , unsigned int ) 
ata_id_c_string extern void ata_id_c_string ( const t#u16 * , unsigned char * , unsigned int , unsigned int ) 
ata_do_dev_read_id extern unsigned int ata_do_dev_read_id ( s#ata_device * , s#ata_taskfile * , t#u16 * ) 
ata_scsi_simulate extern void ata_scsi_simulate ( s#ata_device * , s#scsi_cmnd * , void ( * ) ( s#scsi_cmnd * ) ) 
ata_pio_queue_task extern void ata_pio_queue_task ( s#ata_port * , void * , unsigned long ) 
ata_pio_need_iordy extern unsigned int ata_pio_need_iordy ( const s#ata_device * ) 
s#ata_timing struct ata_timing { unsigned short mode ; unsigned short setup ; unsigned short act8b ; unsigned short rec8b ; unsigned short cyc8b ; unsigned short active ; unsigned short recover ; unsigned short dmack_hold ; unsigned short cycle ; unsigned short udma ; } 
ata_timing_find_mode extern const s#ata_timing * ata_timing_find_mode ( t#u8 ) 
ata_timing_compute extern int ata_timing_compute ( s#ata_device * , unsigned short , s#ata_timing * , int , int ) 
ata_timing_merge extern void ata_timing_merge ( const s#ata_timing * , const s#ata_timing * , s#ata_timing * , unsigned int ) 
ata_timing_cycle2mode extern t#u8 ata_timing_cycle2mode ( unsigned int , int ) 
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#pci_bits struct pci_bits { unsigned int reg ; unsigned int width ; unsigned long mask ; unsigned long val ; } 
pci_test_config_bits extern int pci_test_config_bits ( s#pci_dev * , const s#pci_bits * ) 
ata_pci_remove_one extern void ata_pci_remove_one ( s#pci_dev * ) 
ata_pci_device_do_suspend extern void ata_pci_device_do_suspend ( s#pci_dev * , t#pm_message_t ) 
ata_pci_device_do_resume extern int __attribute__ ( ( warn_unused_result ) ) ata_pci_device_do_resume ( s#pci_dev * ) 
ata_pci_device_suspend extern int ata_pci_device_suspend ( s#pci_dev * , t#pm_message_t ) 
ata_pci_device_resume extern int ata_pci_device_resume ( s#pci_dev * ) 
__ata_ehi_push_desc extern void __ata_ehi_push_desc ( s#ata_eh_info * , const char * , ... ) 
ata_ehi_push_desc extern void ata_ehi_push_desc ( s#ata_eh_info * , const char * , ... ) 
ata_ehi_clear_desc extern void ata_ehi_clear_desc ( s#ata_eh_info * ) 
ata_port_desc extern void ata_port_desc ( s#ata_port * , const char * , ... ) 
ata_port_pbar_desc extern void ata_port_pbar_desc ( s#ata_port * , int , t#ssize_t , const char * ) 
ata_port_schedule_eh extern void ata_port_schedule_eh ( s#ata_port * ) 
ata_link_abort extern int ata_link_abort ( s#ata_link * ) 
ata_port_abort extern int ata_port_abort ( s#ata_port * ) 
ata_port_freeze extern int ata_port_freeze ( s#ata_port * ) 
sata_async_notification extern int sata_async_notification ( s#ata_port * ) 
ata_eh_freeze_port extern void ata_eh_freeze_port ( s#ata_port * ) 
ata_eh_thaw_port extern void ata_eh_thaw_port ( s#ata_port * ) 
ata_eh_qc_complete extern void ata_eh_qc_complete ( s#ata_queued_cmd * ) 
ata_eh_qc_retry extern void ata_eh_qc_retry ( s#ata_queued_cmd * ) 
ata_eh_analyze_ncq_error extern void ata_eh_analyze_ncq_error ( s#ata_link * ) 
ata_do_eh extern void ata_do_eh ( s#ata_port * , t#ata_prereset_fn_t , t#ata_reset_fn_t , t#ata_reset_fn_t , t#ata_postreset_fn_t ) 
ata_std_error_handler extern void ata_std_error_handler ( s#ata_port * ) 
ata_cable_40wire extern int ata_cable_40wire ( s#ata_port * ) 
ata_cable_80wire extern int ata_cable_80wire ( s#ata_port * ) 
ata_cable_unknown extern int ata_cable_unknown ( s#ata_port * ) 
ata_cable_ignore extern int ata_cable_ignore ( s#ata_port * ) 
ata_cable_sata extern int ata_cable_sata ( s#ata_port * ) 

/* drivers/ata/libata-pmp.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##scsi_device
s##scsi_cmnd
s##scsi_target
e##blk_eh_timer_return
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##scsi_transport_template
s##blk_queue_tag
s##workqueue_struct
s##request_queue
sata_pmp_port_ops extern const s#ata_port_operations sata_pmp_port_ops 
sata_pmp_qc_defer_cmd_switch extern int sata_pmp_qc_defer_cmd_switch ( s#ata_queued_cmd * ) 
sata_pmp_error_handler extern void sata_pmp_error_handler ( s#ata_port * ) 

/* drivers/ata/libata-scsi.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
dev_attr_link_power_management_policy extern s#device_attribute dev_attr_link_power_management_policy 
dev_attr_unload_heads extern s#device_attribute dev_attr_unload_heads 
dev_attr_em_message extern s#device_attribute dev_attr_em_message 
dev_attr_em_message_type extern s#device_attribute dev_attr_em_message_type 
dev_attr_sw_activity extern s#device_attribute dev_attr_sw_activity 
ata_common_sdev_attrs extern s#device_attribute * ata_common_sdev_attrs [ ] 
s##scsi_host_cmd_pool
s#scsi_sense_hdr struct scsi_sense_hdr { t#u8 response_code ; t#u8 sense_key ; t#u8 asc ; t#u8 ascq ; t#u8 byte4 ; t#u8 byte5 ; t#u8 byte6 ; t#u8 additional_length ; } 
s#klist struct klist { t#spinlock_t k_lock ; s#list_head k_list ; void ( * get ) ( s#klist_node * ) ; void ( * put ) ( s#klist_node * ) ; } 
s#attribute_container struct attribute_container { s#list_head node ; s#klist containers ; s#class * class ; const s#attribute_group * grp ; s#device_attribute * * attrs ; int ( * match ) ( s#attribute_container * , s#device * ) ; unsigned long flags ; } 
s#transport_container struct transport_container { s#attribute_container ac ; const s#attribute_group * statistics ; } 
t#uint typedef unsigned int uint 
s#scsi_transport_template struct scsi_transport_template { s#transport_container host_attrs ; s#transport_container target_attrs ; s#transport_container device_attrs ; int ( * user_scan ) ( s#Scsi_Host * , t#uint , t#uint , t#uint ) ; int device_size ; int device_private_offset ; int target_size ; int target_private_offset ; int host_size ; unsigned int create_work_queue : 1 ; void ( * eh_strategy_handler ) ( s#Scsi_Host * ) ; e#blk_eh_timer_return ( * eh_timed_out ) ( s#scsi_cmnd * ) ; int ( * it_nexus_response ) ( s#Scsi_Host * , t#u64 , int ) ; int ( * tsk_mgmt_response ) ( s#Scsi_Host * , t#u64 , t#u64 , int ) ; } 
s##workqueue_struct
ata_sas_scsi_ioctl extern int ata_sas_scsi_ioctl ( s#ata_port * , s#scsi_device * , int , void * ) 
ata_scsi_ioctl extern int ata_scsi_ioctl ( s#scsi_device * , int , void * ) 
ata_sas_port_alloc extern s#ata_port * ata_sas_port_alloc ( s#ata_host * , s#ata_port_info * , s#Scsi_Host * ) 
ata_sas_port_start extern int ata_sas_port_start ( s#ata_port * ) 
ata_sas_port_stop extern void ata_sas_port_stop ( s#ata_port * ) 
ata_sas_port_init extern int ata_sas_port_init ( s#ata_port * ) 
ata_sas_port_destroy extern void ata_sas_port_destroy ( s#ata_port * ) 
ata_sas_slave_configure extern int ata_sas_slave_configure ( s#scsi_device * , s#ata_port * ) 
ata_sas_queuecmd extern int ata_sas_queuecmd ( s#scsi_cmnd * , void ( * ) ( s#scsi_cmnd * ) , s#ata_port * ) 

/* drivers/ata/libata-sff.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##scsi_device
s##scsi_cmnd
s##scsi_target
e##blk_eh_timer_return
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##scsi_transport_template
s##blk_queue_tag
s##workqueue_struct
s##request_queue
ata_sff_port_ops extern const s#ata_port_operations ata_sff_port_ops 
ata_bmdma_port_ops extern const s#ata_port_operations ata_bmdma_port_ops 
ata_bmdma32_port_ops extern const s#ata_port_operations ata_bmdma32_port_ops 
ata_sff_qc_prep extern void ata_sff_qc_prep ( s#ata_queued_cmd * ) 
ata_sff_dumb_qc_prep extern void ata_sff_dumb_qc_prep ( s#ata_queued_cmd * ) 
ata_sff_check_status extern t#u8 ata_sff_check_status ( s#ata_port * ) 
ata_sff_pause extern void ata_sff_pause ( s#ata_port * ) 
ata_sff_dma_pause extern void ata_sff_dma_pause ( s#ata_port * ) 
ata_sff_busy_sleep extern int ata_sff_busy_sleep ( s#ata_port * , unsigned long , unsigned long ) 
ata_sff_wait_ready extern int ata_sff_wait_ready ( s#ata_link * , unsigned long ) 
ata_sff_dev_select extern void ata_sff_dev_select ( s#ata_port * , unsigned int ) 
ata_sff_irq_on extern t#u8 ata_sff_irq_on ( s#ata_port * ) 
ata_sff_irq_clear extern void ata_sff_irq_clear ( s#ata_port * ) 
ata_sff_tf_load extern void ata_sff_tf_load ( s#ata_port * , const s#ata_taskfile * ) 
ata_sff_tf_read extern void ata_sff_tf_read ( s#ata_port * , s#ata_taskfile * ) 
ata_sff_exec_command extern void ata_sff_exec_command ( s#ata_port * , const s#ata_taskfile * ) 
ata_sff_data_xfer extern unsigned int ata_sff_data_xfer ( s#ata_device * , unsigned char * , unsigned int , int ) 
ata_sff_data_xfer32 extern unsigned int ata_sff_data_xfer32 ( s#ata_device * , unsigned char * , unsigned int , int ) 
ata_sff_data_xfer_noirq extern unsigned int ata_sff_data_xfer_noirq ( s#ata_device * , unsigned char * , unsigned int , int ) 
ata_sff_hsm_move extern int ata_sff_hsm_move ( s#ata_port * , s#ata_queued_cmd * , t#u8 , int ) 
ata_sff_qc_issue extern unsigned int ata_sff_qc_issue ( s#ata_queued_cmd * ) 
ata_sff_qc_fill_rtf extern t#bool ata_sff_qc_fill_rtf ( s#ata_queued_cmd * ) 
ata_sff_host_intr extern unsigned int ata_sff_host_intr ( s#ata_port * , s#ata_queued_cmd * ) 
ata_sff_interrupt extern t#irqreturn_t ata_sff_interrupt ( int , void * ) 
ata_sff_lost_interrupt extern void ata_sff_lost_interrupt ( s#ata_port * ) 
ata_sff_freeze extern void ata_sff_freeze ( s#ata_port * ) 
ata_sff_thaw extern void ata_sff_thaw ( s#ata_port * ) 
ata_sff_prereset extern int ata_sff_prereset ( s#ata_link * , unsigned long ) 
ata_sff_dev_classify extern unsigned int ata_sff_dev_classify ( s#ata_device * , int , t#u8 * ) 
ata_sff_wait_after_reset extern int ata_sff_wait_after_reset ( s#ata_link * , unsigned int , unsigned long ) 
ata_sff_softreset extern int ata_sff_softreset ( s#ata_link * , unsigned int * , unsigned long ) 
sata_sff_hardreset extern int sata_sff_hardreset ( s#ata_link * , unsigned int * , unsigned long ) 
ata_sff_postreset extern void ata_sff_postreset ( s#ata_link * , unsigned int * ) 
ata_sff_drain_fifo extern void ata_sff_drain_fifo ( s#ata_queued_cmd * ) 
ata_sff_error_handler extern void ata_sff_error_handler ( s#ata_port * ) 
ata_sff_post_internal_cmd extern void ata_sff_post_internal_cmd ( s#ata_queued_cmd * ) 
ata_sff_port_start extern int ata_sff_port_start ( s#ata_port * ) 
ata_sff_port_start32 extern int ata_sff_port_start32 ( s#ata_port * ) 
ata_sff_std_ports extern void ata_sff_std_ports ( s#ata_ioports * ) 
ata_bmdma_mode_filter extern unsigned long ata_bmdma_mode_filter ( s#ata_device * , unsigned long ) 
ata_bmdma_setup extern void ata_bmdma_setup ( s#ata_queued_cmd * ) 
ata_bmdma_start extern void ata_bmdma_start ( s#ata_queued_cmd * ) 
ata_bmdma_stop extern void ata_bmdma_stop ( s#ata_queued_cmd * ) 
ata_bmdma_status extern t#u8 ata_bmdma_status ( s#ata_port * ) 
ata_bus_reset extern void ata_bus_reset ( s#ata_port * ) 
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
ata_pci_bmdma_clear_simplex extern int ata_pci_bmdma_clear_simplex ( s#pci_dev * ) 
ata_pci_bmdma_init extern int ata_pci_bmdma_init ( s#ata_host * ) 
ata_pci_sff_init_host extern int ata_pci_sff_init_host ( s#ata_host * ) 
ata_pci_sff_prepare_host extern int ata_pci_sff_prepare_host ( s#pci_dev * , const s#ata_port_info * const * , s#ata_host * * ) 
ata_pci_sff_activate_host extern int ata_pci_sff_activate_host ( s#ata_host * , t#irq_handler_t , s#scsi_host_template * ) 
ata_pci_sff_init_one extern int ata_pci_sff_init_one ( s#pci_dev * , const s#ata_port_info * const * , s#scsi_host_template * , void * ) 

/* drivers/ata/pata_sis.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##scsi_device
s##scsi_cmnd
s##scsi_target
s##scsi_transport_template
s##workqueue_struct
sis_info133_for_sata extern const s#ata_port_info sis_info133_for_sata 

/* drivers/atm/suni.o */
t#sa_family_t typedef unsigned short sa_family_t 
s#sockaddr struct sockaddr { t#sa_family_t sa_family ; char sa_data [ 14 ] ; } 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s#linux_binprm struct linux_binprm { char buf [ 128 ] ; s#vm_area_struct * vma ; s#mm_struct * mm ; unsigned long p ; unsigned int cred_prepared : 1 , cap_effective : 1 ; unsigned int recursion_depth ; s#file * file ; s#cred * cred ; int unsafe ; unsigned int per_clear ; int argc , envc ; char * filename ; char * interp ; unsigned interp_flags ; unsigned interp_data ; unsigned long loader , exec ; } 
s#linux_binfmt struct linux_binfmt { s#list_head lh ; s#module * module ; int ( * load_binary ) ( s#linux_binprm * , s#pt_regs * ) ; int ( * load_shlib ) ( s#file * ) ; int ( * core_dump ) ( long , s#pt_regs * , s#file * , unsigned long ) ; unsigned long min_coredump ; int hasvdso ; } 
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s#msghdr struct msghdr { void * msg_name ; int msg_namelen ; s#iovec * msg_iov ; t#__kernel_size_t msg_iovlen ; void * msg_control ; t#__kernel_size_t msg_controllen ; unsigned msg_flags ; } 
s#net_device_stats struct net_device_stats { unsigned long rx_packets ; unsigned long tx_packets ; unsigned long rx_bytes ; unsigned long tx_bytes ; unsigned long rx_errors ; unsigned long tx_errors ; unsigned long rx_dropped ; unsigned long tx_dropped ; unsigned long multicast ; unsigned long collisions ; unsigned long rx_length_errors ; unsigned long rx_over_errors ; unsigned long rx_crc_errors ; unsigned long rx_frame_errors ; unsigned long rx_fifo_errors ; unsigned long rx_missed_errors ; unsigned long tx_aborted_errors ; unsigned long tx_carrier_errors ; unsigned long tx_fifo_errors ; unsigned long tx_heartbeat_errors ; unsigned long tx_window_errors ; unsigned long rx_compressed ; unsigned long tx_compressed ; } 
s##iw_handler_def
s##iw_public_data
e#netdev_tx enum netdev_tx { NETDEV_TX_OK = 0 , NETDEV_TX_BUSY , NETDEV_TX_LOCKED = - 1 , } 
t#netdev_tx_t typedef e#netdev_tx netdev_tx_t 
s#ifmap struct ifmap { unsigned long mem_start ; unsigned long mem_end ; unsigned short base_addr ; unsigned char irq ; unsigned char dma ; unsigned char port ; } 
t#raw_hdlc_proto typedef struct { unsigned short encoding ; unsigned short parity ; } raw_hdlc_proto 
t#cisco_proto typedef struct { unsigned int interval ; unsigned int timeout ; } cisco_proto 
t#fr_proto typedef struct { unsigned int t391 ; unsigned int t392 ; unsigned int n391 ; unsigned int n392 ; unsigned int n393 ; unsigned short lmi ; unsigned short dce ; } fr_proto 
t#fr_proto_pvc typedef struct { unsigned int dlci ; } fr_proto_pvc 
t#fr_proto_pvc_info typedef struct { unsigned int dlci ; char master [ 16 ] ; } fr_proto_pvc_info 
t#sync_serial_settings typedef struct { unsigned int clock_rate ; unsigned int clock_type ; unsigned short loopback ; } sync_serial_settings 
t#te1_settings typedef struct { unsigned int clock_rate ; unsigned int clock_type ; unsigned short loopback ; unsigned int slot_map ; } te1_settings 
s#if_settings struct if_settings { unsigned int type ; unsigned int size ; union { t#raw_hdlc_proto * raw_hdlc ; t#cisco_proto * cisco ; t#fr_proto * fr ; t#fr_proto_pvc * fr_pvc ; t#fr_proto_pvc_info * fr_pvc_info ; t#sync_serial_settings * sync ; t#te1_settings * te1 ; } ifs_ifsu ; } 
s#ifreq struct ifreq { union { char ifrn_name [ 16 ] ; } ifr_ifrn ; union { s#sockaddr ifru_addr ; s#sockaddr ifru_dstaddr ; s#sockaddr ifru_broadaddr ; s#sockaddr ifru_netmask ; s#sockaddr ifru_hwaddr ; short ifru_flags ; int ifru_ivalue ; int ifru_mtu ; s#ifmap ifru_map ; char ifru_slave [ 16 ] ; char ifru_newname [ 16 ] ; void * ifru_data ; s#if_settings ifru_settings ; } ifr_ifru ; } 
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s#pneigh_entry struct pneigh_entry { s#pneigh_entry * next ; s#net * net ; s#net_device * dev ; t#u8 flags ; t#u8 key [ 0 ] ; } 
s#neigh_statistics struct neigh_statistics { unsigned long allocs ; unsigned long destroys ; unsigned long hash_grows ; unsigned long res_failed ; unsigned long lookups ; unsigned long hits ; unsigned long rcv_probes_mcast ; unsigned long rcv_probes_ucast ; unsigned long periodic_gc_runs ; unsigned long forced_gc_runs ; unsigned long unres_discards ; } 
s#neigh_table struct neigh_table { s#neigh_table * next ; int family ; int entry_size ; int key_len ; t#__u32 ( * hash ) ( const void * , const s#net_device * ) ; int ( * constructor ) ( s#neighbour * ) ; int ( * pconstructor ) ( s#pneigh_entry * ) ; void ( * pdestructor ) ( s#pneigh_entry * ) ; void ( * proxy_redo ) ( s#sk_buff * ) ; char * id ; s#neigh_parms parms ; int gc_interval ; int gc_thresh1 ; int gc_thresh2 ; int gc_thresh3 ; unsigned long last_flush ; s#delayed_work gc_work ; s#timer_list proxy_timer ; s#sk_buff_head proxy_queue ; t#atomic_t entries ; t#rwlock_t lock ; unsigned long last_rand ; s#kmem_cache * kmem_cachep ; s#neigh_statistics * stats ; s#neighbour * * hash_buckets ; unsigned int hash_mask ; t#__u32 hash_rnd ; s#pneigh_entry * * phash_buckets ; } 
s#hh_cache struct hh_cache { s#hh_cache * hh_next ; t#atomic_t hh_refcnt ; t#__be16 hh_type __attribute__ ( ( __aligned__ ( ( 1 << ( 7 ) ) ) ) ) ; t#u16 hh_len ; int ( * hh_output ) ( s#sk_buff * ) ; t#seqlock_t hh_lock ; unsigned long hh_data [ ( ( ( 128 ) + ( 16 - 1 ) ) & ~ ( 16 - 1 ) ) / sizeof ( long ) ] ; } 
s#neigh_ops struct neigh_ops { int family ; void ( * solicit ) ( s#neighbour * , s#sk_buff * ) ; void ( * error_report ) ( s#neighbour * , s#sk_buff * ) ; int ( * output ) ( s#sk_buff * ) ; int ( * connected_output ) ( s#sk_buff * ) ; int ( * hh_output ) ( s#sk_buff * ) ; int ( * queue_xmit ) ( s#sk_buff * ) ; } 
s#neighbour struct neighbour { s#neighbour * next ; s#neigh_table * tbl ; s#neigh_parms * parms ; s#net_device * dev ; unsigned long used ; unsigned long confirmed ; unsigned long updated ; t#__u8 flags ; t#__u8 nud_state ; t#__u8 type ; t#__u8 dead ; t#atomic_t probes ; t#rwlock_t lock ; unsigned char ha [ ( ( ( 32 ) + ( ( typeof ( 32 ) ) ( sizeof ( unsigned long ) ) - 1 ) ) & ~ ( ( typeof ( 32 ) ) ( sizeof ( unsigned long ) ) - 1 ) ) ] ; s#hh_cache * hh ; t#atomic_t refcnt ; int ( * output ) ( s#sk_buff * ) ; s#sk_buff_head arp_queue ; s#timer_list timer ; const s#neigh_ops * ops ; t#u8 primary_key [ 0 ] ; } 
s##xfrm_state
s##rtable
s##dn_route
s#dst_entry struct dst_entry { s#rcu_head rcu_head ; s#dst_entry * child ; s#net_device * dev ; short error ; short obsolete ; int flags ; unsigned long expires ; unsigned short header_len ; unsigned short trailer_len ; unsigned int rate_tokens ; unsigned long rate_last ; s#dst_entry * path ; s#neighbour * neighbour ; s#hh_cache * hh ; s#xfrm_state * xfrm ; int ( * input ) ( s#sk_buff * ) ; int ( * output ) ( s#sk_buff * ) ; s#dst_ops * ops ; t#u32 metrics [ ( __RTAX_MAX - 1 ) ] ; t#__u32 tclassid ; long __pad_to_align_refcnt [ 2 ] ; t#atomic_t __refcnt ; int __use ; unsigned long lastuse ; union { s#dst_entry * next ; s#rtable * rt_next ; s#rt6_info * rt6_next ; s#dn_route * dn_next ; } ; } 
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s#neigh_parms struct neigh_parms { s#net * net ; s#net_device * dev ; s#neigh_parms * next ; int ( * neigh_setup ) ( s#neighbour * ) ; void ( * neigh_cleanup ) ( s#neighbour * ) ; s#neigh_table * tbl ; void * sysctl_table ; int dead ; t#atomic_t refcnt ; s#rcu_head rcu_head ; int base_reachable_time ; int retrans_time ; int gc_staletime ; int reachable_time ; int delay_probe_time ; int queue_len ; int ucast_probes ; int app_probes ; int mcast_probes ; int anycast_delay ; int proxy_delay ; int proxy_qlen ; int locktime ; } 
s##vlan_group
s#net_device_ops struct net_device_ops { int ( * ndo_init ) ( s#net_device * ) ; void ( * ndo_uninit ) ( s#net_device * ) ; int ( * ndo_open ) ( s#net_device * ) ; int ( * ndo_stop ) ( s#net_device * ) ; t#netdev_tx_t ( * ndo_start_xmit ) ( s#sk_buff * , s#net_device * ) ; t#u16 ( * ndo_select_queue ) ( s#net_device * , s#sk_buff * ) ; void ( * ndo_change_rx_flags ) ( s#net_device * , int ) ; void ( * ndo_set_rx_mode ) ( s#net_device * ) ; void ( * ndo_set_multicast_list ) ( s#net_device * ) ; int ( * ndo_set_mac_address ) ( s#net_device * , void * ) ; int ( * ndo_validate_addr ) ( s#net_device * ) ; int ( * ndo_do_ioctl ) ( s#net_device * , s#ifreq * , int ) ; int ( * ndo_set_config ) ( s#net_device * , s#ifmap * ) ; int ( * ndo_change_mtu ) ( s#net_device * , int ) ; int ( * ndo_neigh_setup ) ( s#net_device * , s#neigh_parms * ) ; void ( * ndo_tx_timeout ) ( s#net_device * ) ; s#net_device_stats * ( * ndo_get_stats ) ( s#net_device * ) ; void ( * ndo_vlan_rx_register ) ( s#net_device * , s#vlan_group * ) ; void ( * ndo_vlan_rx_add_vid ) ( s#net_device * , unsigned short ) ; void ( * ndo_vlan_rx_kill_vid ) ( s#net_device * , unsigned short ) ; void ( * ndo_poll_controller ) ( s#net_device * ) ; int ( * ndo_fcoe_enable ) ( s#net_device * ) ; int ( * ndo_fcoe_disable ) ( s#net_device * ) ; int ( * ndo_fcoe_ddp_setup ) ( s#net_device * , t#u16 , s#scatterlist * , unsigned int ) ; int ( * ndo_fcoe_ddp_done ) ( s#net_device * , t#u16 ) ; int ( * ndo_fcoe_get_wwn ) ( s#net_device * , t#u64 * , int ) ; } 
s#ethtool_cmd struct ethtool_cmd { t#__u32 cmd ; t#__u32 supported ; t#__u32 advertising ; t#__u16 speed ; t#__u8 duplex ; t#__u8 port ; t#__u8 phy_address ; t#__u8 transceiver ; t#__u8 autoneg ; t#__u8 mdio_support ; t#__u32 maxtxpkt ; t#__u32 maxrxpkt ; t#__u16 speed_hi ; t#__u8 eth_tp_mdix ; t#__u8 reserved2 ; t#__u32 lp_advertising ; t#__u32 reserved [ 2 ] ; } 
s#ethtool_drvinfo struct ethtool_drvinfo { t#__u32 cmd ; char driver [ 32 ] ; char version [ 32 ] ; char fw_version [ 32 ] ; char bus_info [ 32 ] ; char reserved1 [ 32 ] ; char reserved2 [ 12 ] ; t#__u32 n_priv_flags ; t#__u32 n_stats ; t#__u32 testinfo_len ; t#__u32 eedump_len ; t#__u32 regdump_len ; } 
s#ethtool_regs struct ethtool_regs { t#__u32 cmd ; t#__u32 version ; t#__u32 len ; t#__u8 data [ 0 ] ; } 
s#ethtool_wolinfo struct ethtool_wolinfo { t#__u32 cmd ; t#__u32 supported ; t#__u32 wolopts ; t#__u8 sopass [ 6 ] ; } 
s#ethtool_eeprom struct ethtool_eeprom { t#__u32 cmd ; t#__u32 magic ; t#__u32 offset ; t#__u32 len ; t#__u8 data [ 0 ] ; } 
s#ethtool_coalesce struct ethtool_coalesce { t#__u32 cmd ; t#__u32 rx_coalesce_usecs ; t#__u32 rx_max_coalesced_frames ; t#__u32 rx_coalesce_usecs_irq ; t#__u32 rx_max_coalesced_frames_irq ; t#__u32 tx_coalesce_usecs ; t#__u32 tx_max_coalesced_frames ; t#__u32 tx_coalesce_usecs_irq ; t#__u32 tx_max_coalesced_frames_irq ; t#__u32 stats_block_coalesce_usecs ; t#__u32 use_adaptive_rx_coalesce ; t#__u32 use_adaptive_tx_coalesce ; t#__u32 pkt_rate_low ; t#__u32 rx_coalesce_usecs_low ; t#__u32 rx_max_coalesced_frames_low ; t#__u32 tx_coalesce_usecs_low ; t#__u32 tx_max_coalesced_frames_low ; t#__u32 pkt_rate_high ; t#__u32 rx_coalesce_usecs_high ; t#__u32 rx_max_coalesced_frames_high ; t#__u32 tx_coalesce_usecs_high ; t#__u32 tx_max_coalesced_frames_high ; t#__u32 rate_sample_interval ; } 
s#ethtool_ringparam struct ethtool_ringparam { t#__u32 cmd ; t#__u32 rx_max_pending ; t#__u32 rx_mini_max_pending ; t#__u32 rx_jumbo_max_pending ; t#__u32 tx_max_pending ; t#__u32 rx_pending ; t#__u32 rx_mini_pending ; t#__u32 rx_jumbo_pending ; t#__u32 tx_pending ; } 
s#ethtool_pauseparam struct ethtool_pauseparam { t#__u32 cmd ; t#__u32 autoneg ; t#__u32 rx_pause ; t#__u32 tx_pause ; } 
s#ethtool_test struct ethtool_test { t#__u32 cmd ; t#__u32 flags ; t#__u32 reserved ; t#__u32 len ; t#__u64 data [ 0 ] ; } 
s#ethtool_stats struct ethtool_stats { t#__u32 cmd ; t#__u32 n_stats ; t#__u64 data [ 0 ] ; } 
t#__be32 typedef t#__u32 __be32 
s#ethtool_tcpip4_spec struct ethtool_tcpip4_spec { t#__be32 ip4src ; t#__be32 ip4dst ; t#__be16 psrc ; t#__be16 pdst ; t#__u8 tos ; } 
s#ethtool_ah_espip4_spec struct ethtool_ah_espip4_spec { t#__be32 ip4src ; t#__be32 ip4dst ; t#__be32 spi ; t#__u8 tos ; } 
s#ethtool_rawip4_spec struct ethtool_rawip4_spec { t#__be32 ip4src ; t#__be32 ip4dst ; t#__u8 hdata [ 64 ] ; } 
s#ethtool_ether_spec struct ethtool_ether_spec { t#__be16 ether_type ; t#__u8 frame_size ; t#__u8 eframe [ 16 ] ; } 
s#ethtool_usrip4_spec struct ethtool_usrip4_spec { t#__be32 ip4src ; t#__be32 ip4dst ; t#__be32 l4_4_bytes ; t#__u8 tos ; t#__u8 ip_ver ; t#__u8 proto ; } 
s#ethtool_rx_flow_spec struct ethtool_rx_flow_spec { t#__u32 flow_type ; union { s#ethtool_tcpip4_spec tcp_ip4_spec ; s#ethtool_tcpip4_spec udp_ip4_spec ; s#ethtool_tcpip4_spec sctp_ip4_spec ; s#ethtool_ah_espip4_spec ah_ip4_spec ; s#ethtool_ah_espip4_spec esp_ip4_spec ; s#ethtool_rawip4_spec raw_ip4_spec ; s#ethtool_ether_spec ether_spec ; s#ethtool_usrip4_spec usr_ip4_spec ; t#__u8 hdata [ 64 ] ; } h_u , m_u ; t#__u64 ring_cookie ; t#__u32 location ; } 
s#ethtool_rxnfc struct ethtool_rxnfc { t#__u32 cmd ; t#__u32 flow_type ; t#__u64 data ; s#ethtool_rx_flow_spec fs ; t#__u32 rule_cnt ; t#__u32 rule_locs [ 0 ] ; } 
s#ethtool_flash struct ethtool_flash { t#__u32 cmd ; t#__u32 region ; char data [ 128 ] ; } 
s#ethtool_ops struct ethtool_ops { int ( * get_settings ) ( s#net_device * , s#ethtool_cmd * ) ; int ( * set_settings ) ( s#net_device * , s#ethtool_cmd * ) ; void ( * get_drvinfo ) ( s#net_device * , s#ethtool_drvinfo * ) ; int ( * get_regs_len ) ( s#net_device * ) ; void ( * get_regs ) ( s#net_device * , s#ethtool_regs * , void * ) ; void ( * get_wol ) ( s#net_device * , s#ethtool_wolinfo * ) ; int ( * set_wol ) ( s#net_device * , s#ethtool_wolinfo * ) ; t#u32 ( * get_msglevel ) ( s#net_device * ) ; void ( * set_msglevel ) ( s#net_device * , t#u32 ) ; int ( * nway_reset ) ( s#net_device * ) ; t#u32 ( * get_link ) ( s#net_device * ) ; int ( * get_eeprom_len ) ( s#net_device * ) ; int ( * get_eeprom ) ( s#net_device * , s#ethtool_eeprom * , t#u8 * ) ; int ( * set_eeprom ) ( s#net_device * , s#ethtool_eeprom * , t#u8 * ) ; int ( * get_coalesce ) ( s#net_device * , s#ethtool_coalesce * ) ; int ( * set_coalesce ) ( s#net_device * , s#ethtool_coalesce * ) ; void ( * get_ringparam ) ( s#net_device * , s#ethtool_ringparam * ) ; int ( * set_ringparam ) ( s#net_device * , s#ethtool_ringparam * ) ; void ( * get_pauseparam ) ( s#net_device * , s#ethtool_pauseparam * ) ; int ( * set_pauseparam ) ( s#net_device * , s#ethtool_pauseparam * ) ; t#u32 ( * get_rx_csum ) ( s#net_device * ) ; int ( * set_rx_csum ) ( s#net_device * , t#u32 ) ; t#u32 ( * get_tx_csum ) ( s#net_device * ) ; int ( * set_tx_csum ) ( s#net_device * , t#u32 ) ; t#u32 ( * get_sg ) ( s#net_device * ) ; int ( * set_sg ) ( s#net_device * , t#u32 ) ; t#u32 ( * get_tso ) ( s#net_device * ) ; int ( * set_tso ) ( s#net_device * , t#u32 ) ; void ( * self_test ) ( s#net_device * , s#ethtool_test * , t#u64 * ) ; void ( * get_strings ) ( s#net_device * , t#u32 , t#u8 * ) ; int ( * phys_id ) ( s#net_device * , t#u32 ) ; void ( * get_ethtool_stats ) ( s#net_device * , s#ethtool_stats * , t#u64 * ) ; int ( * begin ) ( s#net_device * ) ; void ( * complete ) ( s#net_device * ) ; t#u32 ( * get_ufo ) ( s#net_device * ) ; int ( * set_ufo ) ( s#net_device * , t#u32 ) ; t#u32 ( * get_flags ) ( s#net_device * ) ; int ( * set_flags ) ( s#net_device * , t#u32 ) ; t#u32 ( * get_priv_flags ) ( s#net_device * ) ; int ( * set_priv_flags ) ( s#net_device * , t#u32 ) ; int ( * get_sset_count ) ( s#net_device * , int ) ; int ( * self_test_count ) ( s#net_device * ) ; int ( * get_stats_count ) ( s#net_device * ) ; int ( * get_rxnfc ) ( s#net_device * , s#ethtool_rxnfc * , void * ) ; int ( * set_rxnfc ) ( s#net_device * , s#ethtool_rxnfc * ) ; int ( * flash_device ) ( s#net_device * , s#ethtool_flash * ) ; } 
s#header_ops struct header_ops { int ( * create ) ( s#sk_buff * , s#net_device * , unsigned short , const void * , const void * , unsigned ) ; int ( * parse ) ( const s#sk_buff * , unsigned char * ) ; int ( * rebuild ) ( s#sk_buff * ) ; int ( * cache ) ( const s#neighbour * , s#hh_cache * ) ; void ( * cache_update ) ( s#hh_cache * , const s#net_device * , const unsigned char * ) ; } 
s#netdev_hw_addr_list struct netdev_hw_addr_list { s#list_head list ; int count ; } 
s#dev_addr_list struct dev_addr_list { s#dev_addr_list * next ; t#u8 da_addr [ 32 ] ; t#u8 da_addrlen ; t#u8 da_synced ; int da_users ; int da_gusers ; } 
s##wireless_dev
s##Qdisc
s#netdev_queue struct netdev_queue { s#net_device * dev ; s#Qdisc * qdisc ; unsigned long state ; s#Qdisc * qdisc_sleeping ; t#spinlock_t _xmit_lock __attribute__ ( ( __aligned__ ( ( 1 << ( 7 ) ) ) ) ) ; int xmit_lock_owner ; unsigned long trans_start ; unsigned long tx_bytes ; unsigned long tx_packets ; unsigned long tx_dropped ; } 
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s#nla_policy struct nla_policy { t#u16 type ; t#u16 len ; } 
s#nlattr struct nlattr { t#__u16 nla_len ; t#__u16 nla_type ; } 
s#rtnl_link_ops struct rtnl_link_ops { s#list_head list ; const char * kind ; t#size_t priv_size ; void ( * setup ) ( s#net_device * ) ; int maxtype ; const s#nla_policy * policy ; int ( * validate ) ( s#nlattr * [ ] , s#nlattr * [ ] ) ; int ( * newlink ) ( s#net_device * , s#nlattr * [ ] , s#nlattr * [ ] ) ; int ( * changelink ) ( s#net_device * , s#nlattr * [ ] , s#nlattr * [ ] ) ; void ( * dellink ) ( s#net_device * ) ; t#size_t ( * get_size ) ( const s#net_device * ) ; int ( * fill_info ) ( s#sk_buff * , const s#net_device * ) ; t#size_t ( * get_xstats_size ) ( const s#net_device * ) ; int ( * fill_xstats ) ( s#sk_buff * , const s#net_device * ) ; int ( * get_tx_queues ) ( s#net * , s#nlattr * [ ] , unsigned int * , unsigned int * ) ; } 
s#dcbnl_rtnl_ops struct dcbnl_rtnl_ops { t#u8 ( * getstate ) ( s#net_device * ) ; t#u8 ( * setstate ) ( s#net_device * , t#u8 ) ; void ( * getpermhwaddr ) ( s#net_device * , t#u8 * ) ; void ( * setpgtccfgtx ) ( s#net_device * , int , t#u8 , t#u8 , t#u8 , t#u8 ) ; void ( * setpgbwgcfgtx ) ( s#net_device * , int , t#u8 ) ; void ( * setpgtccfgrx ) ( s#net_device * , int , t#u8 , t#u8 , t#u8 , t#u8 ) ; void ( * setpgbwgcfgrx ) ( s#net_device * , int , t#u8 ) ; void ( * getpgtccfgtx ) ( s#net_device * , int , t#u8 * , t#u8 * , t#u8 * , t#u8 * ) ; void ( * getpgbwgcfgtx ) ( s#net_device * , int , t#u8 * ) ; void ( * getpgtccfgrx ) ( s#net_device * , int , t#u8 * , t#u8 * , t#u8 * , t#u8 * ) ; void ( * getpgbwgcfgrx ) ( s#net_device * , int , t#u8 * ) ; void ( * setpfccfg ) ( s#net_device * , int , t#u8 ) ; void ( * getpfccfg ) ( s#net_device * , int , t#u8 * ) ; t#u8 ( * setall ) ( s#net_device * ) ; t#u8 ( * getcap ) ( s#net_device * , int , t#u8 * ) ; t#u8 ( * getnumtcs ) ( s#net_device * , int , t#u8 * ) ; t#u8 ( * setnumtcs ) ( s#net_device * , int , t#u8 ) ; t#u8 ( * getpfcstate ) ( s#net_device * ) ; void ( * setpfcstate ) ( s#net_device * , t#u8 ) ; void ( * getbcncfg ) ( s#net_device * , int , t#u32 * ) ; void ( * setbcncfg ) ( s#net_device * , int , t#u32 ) ; void ( * getbcnrp ) ( s#net_device * , int , t#u8 * ) ; void ( * setbcnrp ) ( s#net_device * , int , t#u8 ) ; t#u8 ( * setapp ) ( s#net_device * , t#u8 , t#u16 , t#u8 ) ; t#u8 ( * getapp ) ( s#net_device * , t#u8 , t#u16 ) ; } 
s#net_device struct net_device { char name [ 16 ] ; s#hlist_node name_hlist ; char * ifalias ; unsigned long mem_end ; unsigned long mem_start ; unsigned long base_addr ; unsigned int irq ; unsigned char if_port ; unsigned char dma ; unsigned long state ; s#list_head dev_list ; s#list_head napi_list ; unsigned long features ; int ifindex ; int iflink ; s#net_device_stats stats ; const s#iw_handler_def * wireless_handlers ; s#iw_public_data * wireless_data ; const s#net_device_ops * netdev_ops ; const s#ethtool_ops * ethtool_ops ; const s#header_ops * header_ops ; unsigned int flags ; unsigned short gflags ; unsigned short priv_flags ; unsigned short padded ; unsigned char operstate ; unsigned char link_mode ; unsigned mtu ; unsigned short type ; unsigned short hard_header_len ; unsigned short needed_headroom ; unsigned short needed_tailroom ; s#net_device * master ; unsigned char perm_addr [ 32 ] ; unsigned char addr_len ; unsigned short dev_id ; s#netdev_hw_addr_list uc ; int uc_promisc ; t#spinlock_t addr_list_lock ; s#dev_addr_list * mc_list ; int mc_count ; unsigned int promiscuity ; unsigned int allmulti ; void * dsa_ptr ; void * atalk_ptr ; void * ip_ptr ; void * dn_ptr ; void * ip6_ptr ; void * ec_ptr ; void * ax25_ptr ; s#wireless_dev * ieee80211_ptr ; unsigned long last_rx ; unsigned char * dev_addr ; s#netdev_hw_addr_list dev_addrs ; unsigned char broadcast [ 32 ] ; s#netdev_queue rx_queue ; s#netdev_queue * _tx __attribute__ ( ( __aligned__ ( ( 1 << ( 7 ) ) ) ) ) ; unsigned int num_tx_queues ; unsigned int real_num_tx_queues ; s#Qdisc * qdisc ; unsigned long tx_queue_len ; t#spinlock_t tx_global_lock ; unsigned long trans_start ; int watchdog_timeo ; s#timer_list watchdog_timer ; t#atomic_t refcnt __attribute__ ( ( __aligned__ ( ( 1 << ( 7 ) ) ) ) ) ; s#list_head todo_list ; s#hlist_node index_hlist ; s#net_device * link_watch_next ; enum { NETREG_UNINITIALIZED = 0 , NETREG_REGISTERED , NETREG_UNREGISTERING , NETREG_UNREGISTERED , NETREG_RELEASED , NETREG_DUMMY , } reg_state ; void ( * destructor ) ( s#net_device * ) ; s#netpoll_info * npinfo ; s#net * nd_net ; void * ml_priv ; s#net_bridge_port * br_port ; s#macvlan_port * macvlan_port ; s#garp_port * garp_port ; s#device dev ; const s#attribute_group * sysfs_groups [ 3 ] ; const s#rtnl_link_ops * rtnl_link_ops ; unsigned long vlan_features ; unsigned int gso_max_size ; const s#dcbnl_rtnl_ops * dcbnl_ops ; unsigned int fcoe_ddp_xid ; } 
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s#proto struct proto { void ( * close ) ( s#sock * , long ) ; int ( * connect ) ( s#sock * , s#sockaddr * , int ) ; int ( * disconnect ) ( s#sock * , int ) ; s#sock * ( * accept ) ( s#sock * , int , int * ) ; int ( * ioctl ) ( s#sock * , int , unsigned long ) ; int ( * init ) ( s#sock * ) ; void ( * destroy ) ( s#sock * ) ; void ( * shutdown ) ( s#sock * , int ) ; int ( * setsockopt ) ( s#sock * , int , int , char * , unsigned int ) ; int ( * getsockopt ) ( s#sock * , int , int , char * , int * ) ; int ( * compat_setsockopt ) ( s#sock * , int , int , char * , unsigned int ) ; int ( * compat_getsockopt ) ( s#sock * , int , int , char * , int * ) ; int ( * sendmsg ) ( s#kiocb * , s#sock * , s#msghdr * , t#size_t ) ; int ( * recvmsg ) ( s#kiocb * , s#sock * , s#msghdr * , t#size_t , int , int , int * ) ; int ( * sendpage ) ( s#sock * , s#page * , int , t#size_t , int ) ; int ( * bind ) ( s#sock * , s#sockaddr * , int ) ; int ( * backlog_rcv ) ( s#sock * , s#sk_buff * ) ; void ( * hash ) ( s#sock * ) ; void ( * unhash ) ( s#sock * ) ; int ( * get_port ) ( s#sock * , unsigned short ) ; unsigned int inuse_idx ; void ( * enter_memory_pressure ) ( s#sock * ) ; t#atomic_t * memory_allocated ; s#percpu_counter * sockets_allocated ; int * memory_pressure ; int * sysctl_mem ; int * sysctl_wmem ; int * sysctl_rmem ; int max_header ; s#kmem_cache * slab ; unsigned int obj_size ; int slab_flags ; s#percpu_counter * orphan_count ; s#request_sock_ops * rsk_prot ; s#timewait_sock_ops * twsk_prot ; union { s#inet_hashinfo * hashinfo ; s#udp_table * udp_table ; s#raw_hashinfo * raw_hash ; } h ; s#module * owner ; char name [ 32 ] ; s#list_head node ; } 
s#sock_common struct sock_common { union { s#hlist_node skc_node ; s#hlist_nulls_node skc_nulls_node ; } ; t#atomic_t skc_refcnt ; unsigned int skc_hash ; unsigned short skc_family ; volatile unsigned char skc_state ; unsigned char skc_reuse ; int skc_bound_dev_if ; s#hlist_node skc_bind_node ; s#proto * skc_prot ; s#net * skc_net ; } 
t#socket_lock_t typedef struct { t#spinlock_t slock ; int owned ; t#wait_queue_head_t wq ; } socket_lock_t 
s##xfrm_policy
s#ucred struct ucred { t#__u32 pid ; t#__u32 uid ; t#__u32 gid ; } 
s#sock_filter struct sock_filter { t#__u16 code ; t#__u8 jt ; t#__u8 jf ; t#__u32 k ; } 
s#sk_filter struct sk_filter { t#atomic_t refcnt ; unsigned int len ; s#rcu_head rcu ; s#sock_filter insns [ 0 ] ; } 
t#socket_state typedef enum { SS_FREE = 0 , SS_UNCONNECTED , SS_CONNECTING , SS_CONNECTED , SS_DISCONNECTING } socket_state 
s#proto_ops struct proto_ops { int family ; s#module * owner ; int ( * release ) ( s#socket * ) ; int ( * bind ) ( s#socket * , s#sockaddr * , int ) ; int ( * connect ) ( s#socket * , s#sockaddr * , int , int ) ; int ( * socketpair ) ( s#socket * , s#socket * ) ; int ( * accept ) ( s#socket * , s#socket * , int ) ; int ( * getname ) ( s#socket * , s#sockaddr * , int * , int ) ; unsigned int ( * poll ) ( s#file * , s#socket * , s#poll_table_struct * ) ; int ( * ioctl ) ( s#socket * , unsigned int , unsigned long ) ; int ( * compat_ioctl ) ( s#socket * , unsigned int , unsigned long ) ; int ( * listen ) ( s#socket * , int ) ; int ( * shutdown ) ( s#socket * , int ) ; int ( * setsockopt ) ( s#socket * , int , int , char * , unsigned int ) ; int ( * getsockopt ) ( s#socket * , int , int , char * , int * ) ; int ( * compat_setsockopt ) ( s#socket * , int , int , char * , unsigned int ) ; int ( * compat_getsockopt ) ( s#socket * , int , int , char * , int * ) ; int ( * sendmsg ) ( s#kiocb * , s#socket * , s#msghdr * , t#size_t ) ; int ( * recvmsg ) ( s#kiocb * , s#socket * , s#msghdr * , t#size_t , int ) ; int ( * mmap ) ( s#file * , s#socket * , s#vm_area_struct * ) ; t#ssize_t ( * sendpage ) ( s#socket * , s#page * , int , t#size_t , int ) ; t#ssize_t ( * splice_read ) ( s#socket * , t#loff_t * , s#pipe_inode_info * , t#size_t , unsigned int ) ; } 
s#socket struct socket { t#socket_state state ; int type_begin [ 0 ] ; ; short type ; int type_end [ 0 ] ; ; unsigned long flags ; s#fasync_struct * fasync_list ; t#wait_queue_head_t wait ; s#file * file ; s#sock * sk ; const s#proto_ops * ops ; } 
s#sock struct sock { s#sock_common __sk_common ; int flags_begin [ 0 ] ; ; unsigned int sk_shutdown : 2 , sk_no_check : 2 , sk_userlocks : 4 , sk_protocol : 8 , sk_type : 16 ; int flags_end [ 0 ] ; ; int sk_rcvbuf ; t#socket_lock_t sk_lock ; struct { s#sk_buff * head ; s#sk_buff * tail ; } sk_backlog ; t#wait_queue_head_t * sk_sleep ; s#dst_entry * sk_dst_cache ; s#xfrm_policy * sk_policy [ 2 ] ; t#rwlock_t sk_dst_lock ; t#atomic_t sk_rmem_alloc ; t#atomic_t sk_wmem_alloc ; t#atomic_t sk_omem_alloc ; int sk_sndbuf ; s#sk_buff_head sk_receive_queue ; s#sk_buff_head sk_write_queue ; s#sk_buff_head sk_async_wait_queue ; int sk_wmem_queued ; int sk_forward_alloc ; t#gfp_t sk_allocation ; int sk_route_caps ; int sk_gso_type ; unsigned int sk_gso_max_size ; int sk_rcvlowat ; unsigned long sk_flags ; unsigned long sk_lingertime ; s#sk_buff_head sk_error_queue ; s#proto * sk_prot_creator ; t#rwlock_t sk_callback_lock ; int sk_err , sk_err_soft ; t#atomic_t sk_drops ; unsigned short sk_ack_backlog ; unsigned short sk_max_ack_backlog ; t#__u32 sk_priority ; s#ucred sk_peercred ; long sk_rcvtimeo ; long sk_sndtimeo ; s#sk_filter * sk_filter ; void * sk_protinfo ; s#timer_list sk_timer ; t#ktime_t sk_stamp ; s#socket * sk_socket ; void * sk_user_data ; s#page * sk_sndmsg_page ; s#sk_buff * sk_send_head ; t#__u32 sk_sndmsg_off ; int sk_write_pending ; void * sk_security ; t#__u32 sk_mark ; void ( * sk_state_change ) ( s#sock * ) ; void ( * sk_data_ready ) ( s#sock * , int ) ; void ( * sk_write_space ) ( s#sock * ) ; void ( * sk_error_report ) ( s#sock * ) ; int ( * sk_backlog_rcv ) ( s#sock * , s#sk_buff * ) ; void ( * sk_destruct ) ( s#sock * ) ; } 
s#atm_trafprm struct atm_trafprm { unsigned char traffic_class ; int max_pcr ; int pcr ; int min_pcr ; int max_cdv ; int max_sdu ; unsigned int icr ; unsigned int tbe ; unsigned int frtt : 24 ; unsigned int rif : 4 ; unsigned int rdf : 4 ; unsigned int nrm_pres : 1 ; unsigned int trm_pres : 1 ; unsigned int adtf_pres : 1 ; unsigned int cdf_pres : 1 ; unsigned int nrm : 3 ; unsigned int trm : 3 ; unsigned int adtf : 10 ; unsigned int cdf : 3 ; unsigned int spare : 9 ; } 
s#atm_qos struct atm_qos { s#atm_trafprm txtp ; s#atm_trafprm rxtp ; unsigned char aal ; } 
s#atm_bhli struct atm_bhli { unsigned char hl_type ; unsigned char hl_length ; unsigned char hl_info [ 8 ] ; } 
s#atm_blli struct atm_blli { unsigned char l2_proto ; union { struct { unsigned char mode ; unsigned char window ; } itu ; unsigned char user ; } l2 ; unsigned char l3_proto ; union { struct { unsigned char mode ; unsigned char def_size ; unsigned char window ; } itu ; unsigned char user ; struct { unsigned char term_type ; unsigned char fw_mpx_cap ; unsigned char bw_mpx_cap ; } h310 ; struct { unsigned char ipi ; unsigned char snap [ 5 ] ; } tr9577 ; } l3 ; } 
s#atm_sap struct atm_sap { s#atm_bhli bhli ; s#atm_blli blli [ 3 ] ; } 
s#k_atm_aal_stats struct k_atm_aal_stats { t#atomic_t tx ; t#atomic_t tx_err ; t#atomic_t rx ; t#atomic_t rx_err ; t#atomic_t rx_drop ; } 
s#sockaddr_atmsvc struct sockaddr_atmsvc { unsigned short sas_family ; struct { unsigned char prv [ 20 ] ; char pub [ 12 + 1 ] ; char lij_type ; t#__u32 lij_id ; } sas_addr ; } 
s#atm_vcc struct atm_vcc { s#sock sk ; unsigned long flags ; short vpi ; int vci ; unsigned long aal_options ; unsigned long atm_options ; s#atm_dev * dev ; s#atm_qos qos ; s#atm_sap sap ; void ( * push ) ( s#atm_vcc * , s#sk_buff * ) ; void ( * pop ) ( s#atm_vcc * , s#sk_buff * ) ; int ( * push_oam ) ( s#atm_vcc * , void * ) ; int ( * send ) ( s#atm_vcc * , s#sk_buff * ) ; void * dev_data ; void * proto_data ; s#k_atm_aal_stats * stats ; short itf ; s#sockaddr_atmsvc local ; s#sockaddr_atmsvc remote ; s#atm_vcc * session ; void * user_back ; } 
s#atmdev_ops struct atmdev_ops { void ( * dev_close ) ( s#atm_dev * ) ; int ( * open ) ( s#atm_vcc * ) ; void ( * close ) ( s#atm_vcc * ) ; int ( * ioctl ) ( s#atm_dev * , unsigned int , void * ) ; int ( * compat_ioctl ) ( s#atm_dev * , unsigned int , void * ) ; int ( * getsockopt ) ( s#atm_vcc * , int , int , void * , int ) ; int ( * setsockopt ) ( s#atm_vcc * , int , int , void * , unsigned int ) ; int ( * send ) ( s#atm_vcc * , s#sk_buff * ) ; int ( * send_oam ) ( s#atm_vcc * , void * , int ) ; void ( * phy_put ) ( s#atm_dev * , unsigned char , unsigned long ) ; unsigned char ( * phy_get ) ( s#atm_dev * , unsigned long ) ; int ( * change_qos ) ( s#atm_vcc * , s#atm_qos * , int ) ; int ( * proc_read ) ( s#atm_dev * , t#loff_t * , char * ) ; s#module * owner ; } 
s#atmphy_ops struct atmphy_ops { int ( * start ) ( s#atm_dev * ) ; int ( * ioctl ) ( s#atm_dev * , unsigned int , void * ) ; void ( * interrupt ) ( s#atm_dev * ) ; int ( * stop ) ( s#atm_dev * ) ; } 
s#atm_cirange struct atm_cirange { signed char vpi_bits ; signed char vci_bits ; } 
s#k_atm_dev_stats struct k_atm_dev_stats { s#k_atm_aal_stats aal0 ; s#k_atm_aal_stats aal34 ; s#k_atm_aal_stats aal5 ; } 
s#atm_dev struct atm_dev { const s#atmdev_ops * ops ; const s#atmphy_ops * phy ; const char * type ; int number ; void * dev_data ; void * phy_data ; unsigned long flags ; s#list_head local ; s#list_head lecs ; unsigned char esi [ 6 ] ; s#atm_cirange ci_range ; s#k_atm_dev_stats stats ; char signal ; int link_rate ; t#atomic_t refcnt ; t#spinlock_t lock ; s#proc_dir_entry * proc_entry ; char * proc_name ; s#device class_dev ; s#list_head dev_list ; } 
suni_init int suni_init ( s#atm_dev * ) 

/* drivers/atm/uPD98402.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
uPD98402_init int uPD98402_init ( s#atm_dev * ) 

/* drivers/auxdisplay/cfag12864b.o */
cfag12864b_buffer extern unsigned char * cfag12864b_buffer 
cfag12864b_getrate extern unsigned int cfag12864b_getrate ( void ) 
cfag12864b_enable extern unsigned char cfag12864b_enable ( void ) 
cfag12864b_disable extern void cfag12864b_disable ( void ) 
cfag12864b_isenabled extern unsigned char cfag12864b_isenabled ( void ) 
cfag12864b_isinited extern unsigned char cfag12864b_isinited ( void ) 

/* drivers/auxdisplay/ks0108.o */
ks0108_writedata extern void ks0108_writedata ( unsigned char ) 
ks0108_writecontrol extern void ks0108_writecontrol ( unsigned char ) 
ks0108_displaystate extern void ks0108_displaystate ( unsigned char ) 
ks0108_startline extern void ks0108_startline ( unsigned char ) 
ks0108_address extern void ks0108_address ( unsigned char ) 
ks0108_page extern void ks0108_page ( unsigned char ) 
ks0108_isinited extern unsigned char ks0108_isinited ( void ) 

/* drivers/base/attribute_container.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s#device_private struct device_private { s#klist klist_children ; s#klist_node knode_parent ; s#klist_node knode_driver ; s#klist_node knode_bus ; void * driver_data ; s#device * device ; } 
s#driver_private struct driver_private { s#kobject kobj ; s#klist klist_devices ; s#klist_node knode_bus ; s#module_kobject * mkobj ; s#device_driver * driver ; } 
s#bus_type_private struct bus_type_private { s#kset subsys ; s#kset * drivers_kset ; s#kset * devices_kset ; s#klist klist_devices ; s#klist klist_drivers ; s#blocking_notifier_head bus_notifier ; unsigned int drivers_autoprobe : 1 ; s#bus_type * bus ; } 
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##map_segment
s##compat_timespec
s##pollfd
s#class_private struct class_private { s#kset class_subsys ; s#klist class_devices ; s#list_head class_interfaces ; s#kset class_dirs ; s#mutex class_mutex ; s#class * class ; } 
attribute_container_classdev_to_container s#attribute_container * attribute_container_classdev_to_container ( s#device * ) 
attribute_container_register int attribute_container_register ( s#attribute_container * ) 
attribute_container_unregister int __attribute__ ( ( warn_unused_result ) ) attribute_container_unregister ( s#attribute_container * ) 
attribute_container_find_class_device s#device * attribute_container_find_class_device ( s#attribute_container * , s#device * ) 

/* drivers/base/bus.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##map_segment
s##compat_timespec
s##pollfd
bus_create_file extern int __attribute__ ( ( warn_unused_result ) ) bus_create_file ( s#bus_type * , s#bus_attribute * ) 
bus_remove_file extern void bus_remove_file ( s#bus_type * , s#bus_attribute * ) 
bus_for_each_dev int bus_for_each_dev ( s#bus_type * , s#device * , void * , int ( * ) ( s#device * , void * ) ) 
bus_find_device s#device * bus_find_device ( s#bus_type * , s#device * , void * , int ( * ) ( s#device * , void * ) ) 
bus_find_device_by_name s#device * bus_find_device_by_name ( s#bus_type * , s#device * , const char * ) 
bus_for_each_drv int __attribute__ ( ( warn_unused_result ) ) bus_for_each_drv ( s#bus_type * , s#device_driver * , void * , int ( * ) ( s#device_driver * , void * ) ) 
bus_rescan_devices extern int __attribute__ ( ( warn_unused_result ) ) bus_rescan_devices ( s#bus_type * ) 
device_reprobe extern int __attribute__ ( ( warn_unused_result ) ) device_reprobe ( s#device * ) 
bus_register extern int __attribute__ ( ( warn_unused_result ) ) bus_register ( s#bus_type * ) 
bus_unregister extern void bus_unregister ( s#bus_type * ) 
bus_register_notifier extern int bus_register_notifier ( s#bus_type * , s#notifier_block * ) 
bus_unregister_notifier extern int bus_unregister_notifier ( s#bus_type * , s#notifier_block * ) 
bus_get_kset extern s#kset * bus_get_kset ( s#bus_type * ) 
bus_get_device_klist extern s#klist * bus_get_device_klist ( s#bus_type * ) 
bus_sort_breadthfirst void bus_sort_breadthfirst ( s#bus_type * , int ( * ) ( const s#device * , const s#device * ) ) 

/* drivers/base/class.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##map_segment
s##compat_timespec
s##pollfd
__class_register extern int __attribute__ ( ( warn_unused_result ) ) __class_register ( s#class * , s#lock_class_key * ) 
__class_create extern s#class * __attribute__ ( ( warn_unused_result ) ) __class_create ( s#module * , const char * , s#lock_class_key * ) 
s#klist_iter struct klist_iter { s#klist * i_klist ; s#klist_node * i_cur ; } 
s#class_dev_iter struct class_dev_iter { s#klist_iter ki ; const s#device_type * type ; } 
class_dev_iter_init extern void class_dev_iter_init ( s#class_dev_iter * , s#class * , s#device * , const s#device_type * ) 
class_dev_iter_next extern s#device * class_dev_iter_next ( s#class_dev_iter * ) 
class_dev_iter_exit extern void class_dev_iter_exit ( s#class_dev_iter * ) 
class_for_each_device extern int class_for_each_device ( s#class * , s#device * , void * , int ( * ) ( s#device * , void * ) ) 
class_find_device extern s#device * class_find_device ( s#class * , s#device * , void * , int ( * ) ( s#device * , void * ) ) 
s#class_compat struct class_compat { s#kobject * kobj ; } 
class_compat_register s#class_compat * class_compat_register ( const char * ) 
class_compat_unregister void class_compat_unregister ( s#class_compat * ) 
class_compat_create_link int class_compat_create_link ( s#class_compat * , s#device * , s#device * ) 
class_compat_remove_link void class_compat_remove_link ( s#class_compat * , s#device * , s#device * ) 
class_create_file extern int __attribute__ ( ( warn_unused_result ) ) class_create_file ( s#class * , const s#class_attribute * ) 
class_remove_file extern void class_remove_file ( s#class * , const s#class_attribute * ) 
class_unregister extern void class_unregister ( s#class * ) 
class_destroy extern void class_destroy ( s#class * ) 
s#class_interface struct class_interface { s#list_head node ; s#class * class ; int ( * add_dev ) ( s#device * , s#class_interface * ) ; void ( * remove_dev ) ( s#device * , s#class_interface * ) ; } 
class_interface_register extern int __attribute__ ( ( warn_unused_result ) ) class_interface_register ( s#class_interface * ) 
class_interface_unregister extern void class_interface_unregister ( s#class_interface * ) 

/* drivers/base/core.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##map_segment
s##compat_timespec
s##pollfd
dev_driver_string extern const char * dev_driver_string ( const s#device * ) 
s##vm_area_struct
device_create_bin_file extern int __attribute__ ( ( warn_unused_result ) ) device_create_bin_file ( s#device * , s#bin_attribute * ) 
device_remove_bin_file extern void device_remove_bin_file ( s#device * , s#bin_attribute * ) 
device_schedule_callback_owner extern int device_schedule_callback_owner ( s#device * , void ( * ) ( s#device * ) , s#module * ) 
dev_set_name extern int dev_set_name ( s#device * , const char * , ... ) 
device_for_each_child extern int device_for_each_child ( s#device * , void * , int ( * ) ( s#device * , void * ) ) 
device_find_child extern s#device * device_find_child ( s#device * , void * , int ( * ) ( s#device * , void * ) ) 
device_initialize extern void device_initialize ( s#device * ) 
device_add extern int __attribute__ ( ( warn_unused_result ) ) device_add ( s#device * ) 
device_register extern int __attribute__ ( ( warn_unused_result ) ) device_register ( s#device * ) 
device_del extern void device_del ( s#device * ) 
device_unregister extern void device_unregister ( s#device * ) 
get_device extern s#device * get_device ( s#device * ) 
put_device extern void put_device ( s#device * ) 
device_create_file extern int __attribute__ ( ( warn_unused_result ) ) device_create_file ( s#device * , s#device_attribute * ) 
device_remove_file extern void device_remove_file ( s#device * , s#device_attribute * ) 
__root_device_register extern s#device * __root_device_register ( const char * , s#module * ) 
root_device_unregister extern void root_device_unregister ( s#device * ) 
device_create_vargs extern s#device * device_create_vargs ( s#class * , s#device * , t#dev_t , void * , const char * , va_list vargs ) 
device_create extern s#device * device_create ( s#class * , s#device * , t#dev_t , void * , const char * , ... ) 
device_destroy extern void device_destroy ( s#class * , t#dev_t ) 
device_rename extern int device_rename ( s#device * , char * ) 
e#dpm_order enum dpm_order { DPM_ORDER_NONE , DPM_ORDER_DEV_AFTER_PARENT , DPM_ORDER_PARENT_BEFORE_DEV , DPM_ORDER_DEV_LAST , } 
device_move extern int device_move ( s#device * , s#device * , e#dpm_order ) 

/* drivers/base/cpu.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s#sys_device struct sys_device { t#u32 id ; s#sysdev_class * cls ; s#kobject kobj ; } 
s#sysdev_class struct sysdev_class { const char * name ; s#list_head drivers ; int ( * shutdown ) ( s#sys_device * ) ; int ( * suspend ) ( s#sys_device * , t#pm_message_t ) ; int ( * resume ) ( s#sys_device * ) ; s#kset kset ; } 
cpu_sysdev_class extern s#sysdev_class cpu_sysdev_class 
get_cpu_sysdev extern s#sys_device * get_cpu_sysdev ( unsigned ) 

/* drivers/base/dd.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
device_bind_driver extern int __attribute__ ( ( warn_unused_result ) ) device_bind_driver ( s#device * ) 
wait_for_device_probe extern void wait_for_device_probe ( void ) 
device_attach extern int __attribute__ ( ( warn_unused_result ) ) device_attach ( s#device * ) 
driver_attach extern int __attribute__ ( ( warn_unused_result ) ) driver_attach ( s#device_driver * ) 
device_release_driver extern void device_release_driver ( s#device * ) 
dev_get_drvdata extern void * dev_get_drvdata ( const s#device * ) 
dev_set_drvdata extern void dev_set_drvdata ( s#device * , void * ) 

/* drivers/base/devres.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##map_segment
s##compat_timespec
s##pollfd
t#dr_release_t typedef void ( * dr_release_t ) ( s#device * , void * ) 
devres_alloc extern void * devres_alloc ( t#dr_release_t , t#size_t , t#gfp_t ) 
devres_free extern void devres_free ( void * ) 
devres_add extern void devres_add ( s#device * , void * ) 
t#dr_match_t typedef int ( * dr_match_t ) ( s#device * , void * , void * ) 
devres_find extern void * devres_find ( s#device * , t#dr_release_t , t#dr_match_t , void * ) 
devres_get extern void * devres_get ( s#device * , void * , t#dr_match_t , void * ) 
devres_remove extern void * devres_remove ( s#device * , t#dr_release_t , t#dr_match_t , void * ) 
devres_destroy extern int devres_destroy ( s#device * , t#dr_release_t , t#dr_match_t , void * ) 
devres_open_group extern void * __attribute__ ( ( warn_unused_result ) ) devres_open_group ( s#device * , void * , t#gfp_t ) 
devres_close_group extern void devres_close_group ( s#device * , void * ) 
devres_remove_group extern void devres_remove_group ( s#device * , void * ) 
devres_release_group extern int devres_release_group ( s#device * , void * ) 
devm_kzalloc extern void * devm_kzalloc ( s#device * , t#size_t , t#gfp_t ) 
devm_kfree extern void devm_kfree ( s#device * , void * ) 

/* drivers/base/dma-mapping.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
dmam_alloc_coherent extern void * dmam_alloc_coherent ( s#device * , t#size_t , t#dma_addr_t * , t#gfp_t ) 
dmam_free_coherent extern void dmam_free_coherent ( s#device * , t#size_t , void * , t#dma_addr_t ) 
dmam_alloc_noncoherent extern void * dmam_alloc_noncoherent ( s#device * , t#size_t , t#dma_addr_t * , t#gfp_t ) 
dmam_free_noncoherent extern void dmam_free_noncoherent ( s#device * , t#size_t , void * , t#dma_addr_t ) 

/* drivers/base/driver.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##map_segment
s##compat_timespec
s##pollfd
driver_for_each_device extern int __attribute__ ( ( warn_unused_result ) ) driver_for_each_device ( s#device_driver * , s#device * , void * , int ( * ) ( s#device * , void * ) ) 
driver_find_device s#device * driver_find_device ( s#device_driver * , s#device * , void * , int ( * ) ( s#device * , void * ) ) 
driver_create_file extern int __attribute__ ( ( warn_unused_result ) ) driver_create_file ( s#device_driver * , s#driver_attribute * ) 
driver_remove_file extern void driver_remove_file ( s#device_driver * , s#driver_attribute * ) 
driver_add_kobj extern int __attribute__ ( ( warn_unused_result ) ) driver_add_kobj ( s#device_driver * , s#kobject * , const char * , ... ) 
get_driver extern s#device_driver * get_driver ( s#device_driver * ) 
put_driver extern void put_driver ( s#device_driver * ) 
driver_register extern int __attribute__ ( ( warn_unused_result ) ) driver_register ( s#device_driver * ) 
driver_unregister extern void driver_unregister ( s#device_driver * ) 
driver_find extern s#device_driver * driver_find ( const char * , s#bus_type * ) 

/* drivers/base/firmware.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
firmware_kobj extern s#kobject * firmware_kobj 

/* drivers/base/firmware_class.o */
s#firmware struct firmware { t#size_t size ; const t#u8 * data ; } 
release_firmware void release_firmware ( const s#firmware * ) 
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##dma_coherent_mem
s##dma_map_ops
request_firmware int request_firmware ( const s#firmware * * , const char * , s#device * ) 
request_firmware_nowait int request_firmware_nowait ( s#module * , int , const char * , s#device * , void * , void ( * ) ( const s#firmware * , void * ) ) 

/* drivers/base/iommu.o */
iommu_found extern t#bool iommu_found ( void ) 
iommu_domain_alloc extern s#iommu_domain * iommu_domain_alloc ( void ) 
iommu_domain_free extern void iommu_domain_free ( s#iommu_domain * ) 
s##device
iommu_attach_device extern int iommu_attach_device ( s#iommu_domain * , s#device * ) 
iommu_detach_device extern void iommu_detach_device ( s#iommu_domain * , s#device * ) 
iommu_map_range extern int iommu_map_range ( s#iommu_domain * , unsigned long , t#phys_addr_t , t#size_t , int ) 
iommu_unmap_range extern void iommu_unmap_range ( s#iommu_domain * , unsigned long , t#size_t ) 
iommu_iova_to_phys extern t#phys_addr_t iommu_iova_to_phys ( s#iommu_domain * , unsigned long ) 
iommu_domain_has_cap extern int iommu_domain_has_cap ( s#iommu_domain * , unsigned long ) 

/* drivers/base/memory.o */
register_memory_notifier extern int register_memory_notifier ( s#notifier_block * ) 
unregister_memory_notifier extern void unregister_memory_notifier ( s#notifier_block * ) 

/* drivers/base/platform.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##map_segment
s##compat_timespec
s##pollfd
platform_bus extern s#device platform_bus 
s#platform_device_id struct platform_device_id { char name [ 20 ] ; t#kernel_ulong_t driver_data __attribute__ ( ( aligned ( sizeof ( kernel_ulong_t ) ) ) ) ; } 
s#pdev_archdata struct pdev_archdata { } 
s#platform_device struct platform_device { const char * name ; int id ; s#device dev ; t#u32 num_resources ; s#resource * resource ; s#platform_device_id * id_entry ; s#pdev_archdata archdata ; } 
platform_get_resource extern s#resource * platform_get_resource ( s#platform_device * , unsigned int , unsigned int ) 
platform_get_irq extern int platform_get_irq ( s#platform_device * , unsigned int ) 
platform_get_resource_byname extern s#resource * platform_get_resource_byname ( s#platform_device * , unsigned int , const char * ) 
platform_get_irq_byname extern int platform_get_irq_byname ( s#platform_device * , const char * ) 
platform_add_devices extern int platform_add_devices ( s#platform_device * * , int ) 
platform_device_put extern void platform_device_put ( s#platform_device * ) 
platform_device_alloc extern s#platform_device * platform_device_alloc ( const char * , int ) 
platform_device_add_resources extern int platform_device_add_resources ( s#platform_device * , s#resource * , unsigned int ) 
platform_device_add_data extern int platform_device_add_data ( s#platform_device * , const void * , t#size_t ) 
platform_device_add extern int platform_device_add ( s#platform_device * ) 
platform_device_del extern void platform_device_del ( s#platform_device * ) 
platform_device_register extern int platform_device_register ( s#platform_device * ) 
platform_device_unregister extern void platform_device_unregister ( s#platform_device * ) 
platform_device_register_simple extern s#platform_device * platform_device_register_simple ( const char * , int , s#resource * , unsigned int ) 
s#platform_driver struct platform_driver { int ( * probe ) ( s#platform_device * ) ; int ( * remove ) ( s#platform_device * ) ; void ( * shutdown ) ( s#platform_device * ) ; int ( * suspend ) ( s#platform_device * , t#pm_message_t ) ; int ( * resume ) ( s#platform_device * ) ; s#device_driver driver ; s#platform_device_id * id_table ; } 
platform_driver_register extern int platform_driver_register ( s#platform_driver * ) 
platform_driver_unregister extern void platform_driver_unregister ( s#platform_driver * ) 
platform_driver_probe extern int platform_driver_probe ( s#platform_driver * , int ( * ) ( s#platform_device * ) ) 
platform_bus_type extern s#bus_type platform_bus_type 
dma_get_required_mask extern t#u64 dma_get_required_mask ( s#device * ) 

/* drivers/base/power/main.o */
dpm_resume_noirq extern void dpm_resume_noirq ( t#pm_message_t ) 
dpm_resume_end extern void dpm_resume_end ( t#pm_message_t ) 
dpm_suspend_noirq extern int dpm_suspend_noirq ( t#pm_message_t ) 
dpm_suspend_start extern int dpm_suspend_start ( t#pm_message_t ) 
__suspend_report_result extern void __suspend_report_result ( const char * , void * , int ) 

/* drivers/base/power/runtime.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
pm_runtime_idle extern int pm_runtime_idle ( s#device * ) 
pm_runtime_suspend extern int pm_runtime_suspend ( s#device * ) 
pm_runtime_resume extern int pm_runtime_resume ( s#device * ) 
pm_request_idle extern int pm_request_idle ( s#device * ) 
pm_schedule_suspend extern int pm_schedule_suspend ( s#device * , unsigned int ) 
pm_request_resume extern int pm_request_resume ( s#device * ) 
__pm_runtime_get extern int __pm_runtime_get ( s#device * , t#bool ) 
__pm_runtime_put extern int __pm_runtime_put ( s#device * , t#bool ) 
__pm_runtime_set_status extern int __pm_runtime_set_status ( s#device * , unsigned int ) 
pm_runtime_barrier extern int pm_runtime_barrier ( s#device * ) 
__pm_runtime_disable extern void __pm_runtime_disable ( s#device * , t#bool ) 
pm_runtime_enable extern void pm_runtime_enable ( s#device * ) 

/* drivers/base/power/trace.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
set_trace_device extern void set_trace_device ( s#device * ) 
generate_resume_trace extern void generate_resume_trace ( const void * , unsigned int ) 

/* drivers/base/sys.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s#sysdev_attribute struct sysdev_attribute { s#attribute attr ; t#ssize_t ( * show ) ( s#sys_device * , s#sysdev_attribute * , char * ) ; t#ssize_t ( * store ) ( s#sys_device * , s#sysdev_attribute * , const char * , t#size_t ) ; } 
sysdev_create_file extern int sysdev_create_file ( s#sys_device * , s#sysdev_attribute * ) 
sysdev_remove_file extern void sysdev_remove_file ( s#sys_device * , s#sysdev_attribute * ) 
s#sysdev_class_attribute struct sysdev_class_attribute { s#attribute attr ; t#ssize_t ( * show ) ( s#sysdev_class * , char * ) ; t#ssize_t ( * store ) ( s#sysdev_class * , const char * , t#size_t ) ; } 
sysdev_class_create_file extern int sysdev_class_create_file ( s#sysdev_class * , s#sysdev_class_attribute * ) 
sysdev_class_remove_file extern void sysdev_class_remove_file ( s#sysdev_class * , s#sysdev_class_attribute * ) 
sysdev_class_register extern int sysdev_class_register ( s#sysdev_class * ) 
sysdev_class_unregister extern void sysdev_class_unregister ( s#sysdev_class * ) 
s#sysdev_driver struct sysdev_driver { s#list_head entry ; int ( * add ) ( s#sys_device * ) ; int ( * remove ) ( s#sys_device * ) ; int ( * shutdown ) ( s#sys_device * ) ; int ( * suspend ) ( s#sys_device * , t#pm_message_t ) ; int ( * resume ) ( s#sys_device * ) ; } 
sysdev_driver_register extern int sysdev_driver_register ( s#sysdev_class * , s#sysdev_driver * ) 
sysdev_driver_unregister extern void sysdev_driver_unregister ( s#sysdev_class * , s#sysdev_driver * ) 
sysdev_suspend extern int sysdev_suspend ( t#pm_message_t ) 
sysdev_resume extern int sysdev_resume ( void ) 
sysdev_register extern int sysdev_register ( s#sys_device * ) 
sysdev_unregister extern void sysdev_unregister ( s#sys_device * ) 
sysdev_store_ulong extern t#ssize_t sysdev_store_ulong ( s#sys_device * , s#sysdev_attribute * , const char * , t#size_t ) 
sysdev_show_ulong extern t#ssize_t sysdev_show_ulong ( s#sys_device * , s#sysdev_attribute * , char * ) 
sysdev_store_int extern t#ssize_t sysdev_store_int ( s#sys_device * , s#sysdev_attribute * , const char * , t#size_t ) 
sysdev_show_int extern t#ssize_t sysdev_show_int ( s#sys_device * , s#sysdev_attribute * , char * ) 

/* drivers/base/transport_class.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#transport_class struct transport_class { s#class class ; int ( * setup ) ( s#transport_container * , s#device * , s#device * ) ; int ( * configure ) ( s#transport_container * , s#device * , s#device * ) ; int ( * remove ) ( s#transport_container * , s#device * , s#device * ) ; } 
transport_class_register int transport_class_register ( s#transport_class * ) 
transport_class_unregister void transport_class_unregister ( s#transport_class * ) 
s#anon_transport_class struct anon_transport_class { s#transport_class tclass ; s#attribute_container container ; } 
anon_transport_class_register int anon_transport_class_register ( s#anon_transport_class * ) 
anon_transport_class_unregister void anon_transport_class_unregister ( s#anon_transport_class * ) 
transport_setup_device void transport_setup_device ( s#device * ) 
transport_add_device void transport_add_device ( s#device * ) 
transport_configure_device void transport_configure_device ( s#device * ) 
transport_remove_device void transport_remove_device ( s#device * ) 
transport_destroy_device void transport_destroy_device ( s#device * ) 

/* drivers/block/loop.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s#pipe_buf_operations struct pipe_buf_operations { int can_merge ; void * ( * map ) ( s#pipe_inode_info * , s#pipe_buffer * , int ) ; void ( * unmap ) ( s#pipe_inode_info * , s#pipe_buffer * , void * ) ; int ( * confirm ) ( s#pipe_inode_info * , s#pipe_buffer * ) ; void ( * release ) ( s#pipe_inode_info * , s#pipe_buffer * ) ; int ( * steal ) ( s#pipe_inode_info * , s#pipe_buffer * ) ; void ( * get ) ( s#pipe_inode_info * , s#pipe_buffer * ) ; } 
s#pipe_buffer struct pipe_buffer { s#page * page ; unsigned int offset , len ; const s#pipe_buf_operations * ops ; unsigned int flags ; unsigned long private ; } 
s#pipe_inode_info struct pipe_inode_info { t#wait_queue_head_t wait ; unsigned int nrbufs , curbuf ; s#page * tmp_page ; unsigned int readers ; unsigned int writers ; unsigned int waiting_writers ; unsigned int r_counter ; unsigned int w_counter ; s#fasync_struct * fasync_readers ; s#fasync_struct * fasync_writers ; s#inode * inode ; s#pipe_buffer bufs [ ( 16 ) ] ; } 
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s#bio_list struct bio_list { s#bio * head ; s#bio * tail ; } 
s#loop_device struct loop_device { int lo_number ; int lo_refcnt ; t#loff_t lo_offset ; t#loff_t lo_sizelimit ; int lo_flags ; int ( * transfer ) ( s#loop_device * , int , s#page * , unsigned , s#page * , unsigned , int , t#sector_t ) ; char lo_file_name [ 64 ] ; char lo_crypt_name [ 64 ] ; char lo_encrypt_key [ 32 ] ; int lo_encrypt_key_size ; s#loop_func_table * lo_encryption ; t#__u32 lo_init [ 2 ] ; t#uid_t lo_key_owner ; int ( * ioctl ) ( s#loop_device * , int , unsigned long ) ; s#file * lo_backing_file ; s#block_device * lo_device ; unsigned lo_blocksize ; void * key_data ; t#gfp_t old_gfp_mask ; t#spinlock_t lo_lock ; s#bio_list lo_bio_list ; int lo_state ; s#mutex lo_ctl_mutex ; s#task_struct * lo_thread ; t#wait_queue_head_t lo_event ; s#request_queue * lo_queue ; s#gendisk * lo_disk ; s#list_head lo_list ; } 
s#loop_info64 struct loop_info64 { t#__u64 lo_device ; t#__u64 lo_inode ; t#__u64 lo_rdevice ; t#__u64 lo_offset ; t#__u64 lo_sizelimit ; t#__u32 lo_number ; t#__u32 lo_encrypt_type ; t#__u32 lo_encrypt_key_size ; t#__u32 lo_flags ; t#__u8 lo_file_name [ 64 ] ; t#__u8 lo_crypt_name [ 64 ] ; t#__u8 lo_encrypt_key [ 32 ] ; t#__u64 lo_init [ 2 ] ; } 
s#loop_func_table struct loop_func_table { int number ; int ( * transfer ) ( s#loop_device * , int , s#page * , unsigned , s#page * , unsigned , int , t#sector_t ) ; int ( * init ) ( s#loop_device * , const s#loop_info64 * ) ; int ( * release ) ( s#loop_device * ) ; int ( * ioctl ) ( s#loop_device * , int , unsigned long ) ; s#module * owner ; } 
loop_register_transfer int loop_register_transfer ( s#loop_func_table * ) 
loop_unregister_transfer int loop_unregister_transfer ( int ) 

/* drivers/block/paride/paride.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#pi_protocol struct pi_protocol { char name [ 8 ] ; int index ; int max_mode ; int epp_first ; int default_delay ; int max_units ; void ( * write_regr ) ( t#PIA * , int , int , int ) ; int ( * read_regr ) ( t#PIA * , int , int ) ; void ( * write_block ) ( t#PIA * , char * , int ) ; void ( * read_block ) ( t#PIA * , char * , int ) ; void ( * connect ) ( t#PIA * ) ; void ( * disconnect ) ( t#PIA * ) ; int ( * test_port ) ( t#PIA * ) ; int ( * probe_unit ) ( t#PIA * ) ; int ( * test_proto ) ( t#PIA * , char * , int ) ; void ( * log_adapter ) ( t#PIA * , char * , int ) ; int ( * init_proto ) ( t#PIA * ) ; void ( * release_proto ) ( t#PIA * ) ; s#module * owner ; } 
s#pi_adapter struct pi_adapter { s#pi_protocol * proto ; int port ; int mode ; int delay ; int devtype ; char * device ; int unit ; int saved_r0 ; int saved_r2 ; int reserved ; unsigned long private ; t#wait_queue_head_t parq ; void * pardev ; char * parname ; int claimed ; void ( * claim_cont ) ( void ) ; } 
t#PIA typedef s#pi_adapter PIA 
pi_write_regr extern void pi_write_regr ( t#PIA * , int , int , int ) 
pi_read_regr extern int pi_read_regr ( t#PIA * , int , int ) 
pi_write_block extern void pi_write_block ( t#PIA * , char * , int ) 
pi_read_block extern void pi_read_block ( t#PIA * , char * , int ) 
pi_schedule_claimed extern int pi_schedule_claimed ( t#PIA * , void ( * ) ( void ) ) 
pi_do_claimed extern void pi_do_claimed ( t#PIA * , void ( * ) ( void ) ) 
pi_connect extern void pi_connect ( t#PIA * ) 
pi_disconnect extern void pi_disconnect ( t#PIA * ) 
pi_release extern void pi_release ( t#PIA * ) 
t#PIP typedef s#pi_protocol PIP 
paride_register extern int paride_register ( t#PIP * ) 
paride_unregister extern void paride_unregister ( t#PIP * ) 
pi_init extern int pi_init ( t#PIA * , int , int , int , int , int , int , char * , int , int , char * ) 

/* drivers/bluetooth/btmrvl_main.o */
t#bdaddr_t typedef struct { t#__u8 b [ 6 ] ; } __attribute__ ( ( packed ) ) bdaddr_t 
s#tasklet_struct struct tasklet_struct { s#tasklet_struct * next ; unsigned long state ; t#atomic_t count ; void ( * func ) ( unsigned long ) ; unsigned long data ; } 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s#inquiry_data struct inquiry_data { t#bdaddr_t bdaddr ; t#__u8 pscan_rep_mode ; t#__u8 pscan_period_mode ; t#__u8 pscan_mode ; t#__u8 dev_class [ 3 ] ; t#__le16 clock_offset ; t#__s8 rssi ; t#__u8 ssp_mode ; } 
s#inquiry_entry struct inquiry_entry { s#inquiry_entry * next ; t#__u32 timestamp ; s#inquiry_data data ; } 
s#inquiry_cache struct inquiry_cache { t#spinlock_t lock ; t#__u32 timestamp ; s#inquiry_entry * list ; } 
s#hci_conn_hash struct hci_conn_hash { s#list_head list ; t#spinlock_t lock ; unsigned int acl_num ; unsigned int sco_num ; } 
s#hci_dev_stats struct hci_dev_stats { t#__u32 err_rx ; t#__u32 err_tx ; t#__u32 cmd_tx ; t#__u32 evt_rx ; t#__u32 acl_tx ; t#__u32 acl_rx ; t#__u32 sco_tx ; t#__u32 sco_rx ; t#__u32 byte_rx ; t#__u32 byte_tx ; } 
s##rfkill
s#hci_dev struct hci_dev { s#list_head list ; t#spinlock_t lock ; t#atomic_t refcnt ; char name [ 8 ] ; unsigned long flags ; t#__u16 id ; t#__u8 type ; t#bdaddr_t bdaddr ; t#__u8 dev_name [ 248 ] ; t#__u8 dev_class [ 3 ] ; t#__u8 features [ 8 ] ; t#__u8 commands [ 64 ] ; t#__u8 ssp_mode ; t#__u8 hci_ver ; t#__u16 hci_rev ; t#__u16 manufacturer ; t#__u16 voice_setting ; t#__u16 pkt_type ; t#__u16 esco_type ; t#__u16 link_policy ; t#__u16 link_mode ; t#__u32 idle_timeout ; t#__u16 sniff_min_interval ; t#__u16 sniff_max_interval ; unsigned long quirks ; t#atomic_t cmd_cnt ; unsigned int acl_cnt ; unsigned int sco_cnt ; unsigned int acl_mtu ; unsigned int sco_mtu ; unsigned int acl_pkts ; unsigned int sco_pkts ; unsigned long cmd_last_tx ; unsigned long acl_last_tx ; unsigned long sco_last_tx ; s#tasklet_struct cmd_task ; s#tasklet_struct rx_task ; s#tasklet_struct tx_task ; s#sk_buff_head rx_q ; s#sk_buff_head raw_q ; s#sk_buff_head cmd_q ; s#sk_buff * sent_cmd ; s#sk_buff * reassembly [ 3 ] ; s#mutex req_lock ; t#wait_queue_head_t req_wait_q ; t#__u32 req_status ; t#__u32 req_result ; s#inquiry_cache inq_cache ; s#hci_conn_hash conn_hash ; s#hci_dev_stats stat ; s#sk_buff_head driver_init ; void * driver_data ; void * core_data ; t#atomic_t promisc ; s#device * parent ; s#device dev ; s#rfkill * rfkill ; s#module * owner ; int ( * open ) ( s#hci_dev * ) ; int ( * close ) ( s#hci_dev * ) ; int ( * flush ) ( s#hci_dev * ) ; int ( * send ) ( s#sk_buff * ) ; void ( * destruct ) ( s#hci_dev * ) ; void ( * notify ) ( s#hci_dev * , unsigned int ) ; int ( * ioctl ) ( s#hci_dev * , unsigned int , unsigned long ) ; } 
s#btmrvl_device struct btmrvl_device { void * card ; s#hci_dev * hcidev ; t#u8 tx_dnld_rdy ; t#u8 psmode ; t#u8 pscmd ; t#u8 hsmode ; t#u8 hscmd ; t#u16 gpio_gap ; t#u8 hscfgcmd ; t#u8 sendcmdflag ; } 
s#btmrvl_adapter struct btmrvl_adapter { t#u32 int_count ; s#sk_buff_head tx_queue ; t#u8 psmode ; t#u8 ps_state ; t#u8 hs_state ; t#u8 wakeup_tries ; t#wait_queue_head_t cmd_wait_q ; t#u8 cmd_complete ; } 
s#btmrvl_thread struct btmrvl_thread { s#task_struct * task ; t#wait_queue_head_t wait_q ; void * priv ; } 
s#btmrvl_private struct btmrvl_private { s#btmrvl_device btmrvl_dev ; s#btmrvl_adapter * adapter ; s#btmrvl_thread main_thread ; int ( * hw_host_to_card ) ( s#btmrvl_private * , t#u8 * , t#u16 ) ; int ( * hw_wakeup_firmware ) ( s#btmrvl_private * ) ; t#spinlock_t driver_lock ; void * debugfs_data ; } 
btmrvl_interrupt void btmrvl_interrupt ( s#btmrvl_private * ) 
btmrvl_check_evtpkt void btmrvl_check_evtpkt ( s#btmrvl_private * , s#sk_buff * ) 
btmrvl_process_event int btmrvl_process_event ( s#btmrvl_private * , s#sk_buff * ) 
btmrvl_send_module_cfg_cmd int btmrvl_send_module_cfg_cmd ( s#btmrvl_private * , int ) 
btmrvl_add_card s#btmrvl_private * btmrvl_add_card ( void * ) 
btmrvl_remove_card int btmrvl_remove_card ( s#btmrvl_private * ) 

/* drivers/cdrom/cdrom.o */
s#cdrom_msf0 struct cdrom_msf0 { t#__u8 minute ; t#__u8 second ; t#__u8 frame ; } 
u#cdrom_addr union cdrom_addr { s#cdrom_msf0 msf ; int lba ; } 
s#cdrom_multisession struct cdrom_multisession { u#cdrom_addr addr ; t#__u8 xa_flag ; t#__u8 addr_format ; } 
s#cdrom_mcn struct cdrom_mcn { t#__u8 medium_catalog_number [ 14 ] ; } 
s#request_sense struct request_sense { t#__u8 error_code : 7 ; t#__u8 valid : 1 ; t#__u8 segment_number ; t#__u8 sense_key : 4 ; t#__u8 reserved2 : 1 ; t#__u8 ili : 1 ; t#__u8 reserved1 : 2 ; t#__u8 information [ 4 ] ; t#__u8 add_sense_len ; t#__u8 command_info [ 4 ] ; t#__u8 asc ; t#__u8 ascq ; t#__u8 fruc ; t#__u8 sks [ 3 ] ; t#__u8 asb [ 46 ] ; } 
s#packet_command struct packet_command { unsigned char cmd [ 12 ] ; unsigned char * buffer ; unsigned int buflen ; int stat ; s#request_sense * sense ; unsigned char data_direction ; int quiet ; int timeout ; void * reserved [ 1 ] ; } 
s#cdrom_device_ops struct cdrom_device_ops { int ( * open ) ( s#cdrom_device_info * , int ) ; void ( * release ) ( s#cdrom_device_info * ) ; int ( * drive_status ) ( s#cdrom_device_info * , int ) ; int ( * media_changed ) ( s#cdrom_device_info * , int ) ; int ( * tray_move ) ( s#cdrom_device_info * , int ) ; int ( * lock_door ) ( s#cdrom_device_info * , int ) ; int ( * select_speed ) ( s#cdrom_device_info * , int ) ; int ( * select_disc ) ( s#cdrom_device_info * , int ) ; int ( * get_last_session ) ( s#cdrom_device_info * , s#cdrom_multisession * ) ; int ( * get_mcn ) ( s#cdrom_device_info * , s#cdrom_mcn * ) ; int ( * reset ) ( s#cdrom_device_info * ) ; int ( * audio_ioctl ) ( s#cdrom_device_info * , unsigned int , void * ) ; const int capability ; int n_minors ; int ( * generic_packet ) ( s#cdrom_device_info * , s#packet_command * ) ; } 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##blk_trace
s##timer_rand_state
s#cdrom_device_info struct cdrom_device_info { s#cdrom_device_ops * ops ; s#list_head list ; s#gendisk * disk ; void * handle ; int mask ; int speed ; int capacity ; unsigned int options : 30 ; unsigned mc_flags : 2 ; int use_count ; char name [ 20 ] ; t#__u8 sanyo_slot : 2 ; t#__u8 reserved : 6 ; int cdda_method ; t#__u8 last_sense ; t#__u8 media_written ; unsigned short mmc3_profile ; int for_data ; int ( * exit ) ( s#cdrom_device_info * ) ; int mrw_mode_page ; } 
cdrom_get_last_written extern int cdrom_get_last_written ( s#cdrom_device_info * , long * ) 
register_cdrom extern int register_cdrom ( s#cdrom_device_info * ) 
unregister_cdrom extern void unregister_cdrom ( s#cdrom_device_info * ) 
cdrom_open extern int cdrom_open ( s#cdrom_device_info * , s#block_device * , t#fmode_t ) 
cdrom_release extern void cdrom_release ( s#cdrom_device_info * , t#fmode_t ) 
cdrom_ioctl extern int cdrom_ioctl ( s#cdrom_device_info * , s#block_device * , t#fmode_t , unsigned int , unsigned long ) 
cdrom_media_changed extern int cdrom_media_changed ( s#cdrom_device_info * ) 
cdrom_number_of_slots extern int cdrom_number_of_slots ( s#cdrom_device_info * ) 
cdrom_mode_select extern int cdrom_mode_select ( s#cdrom_device_info * , s#packet_command * ) 
cdrom_mode_sense extern int cdrom_mode_sense ( s#cdrom_device_info * , s#packet_command * , int , int ) 
init_cdrom_command extern void init_cdrom_command ( s#packet_command * , void * , int , int ) 
s#media_event_desc struct media_event_desc { t#__u8 media_event_code : 4 ; t#__u8 reserved1 : 4 ; t#__u8 door_open : 1 ; t#__u8 media_present : 1 ; t#__u8 reserved2 : 6 ; t#__u8 start_slot ; t#__u8 end_slot ; } 
cdrom_get_media_event extern int cdrom_get_media_event ( s#cdrom_device_info * , s#media_event_desc * ) 

/* drivers/char/agp/backend.o */
s#agp_version struct agp_version { t#u16 major ; t#u16 minor ; } 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
e#aper_size_type enum aper_size_type { U8_APER_SIZE , U16_APER_SIZE , U32_APER_SIZE , LVL2_APER_SIZE , FIXED_APER_SIZE } 
s#gatt_mask struct gatt_mask { unsigned long mask ; t#u32 type ; } 
s#agp_memory struct agp_memory { s#agp_memory * next ; s#agp_memory * prev ; s#agp_bridge_data * bridge ; s#page * * pages ; t#size_t page_count ; int key ; int num_scratch_pages ; t#off_t pg_start ; t#u32 type ; t#u32 physical ; t#bool is_bound ; t#bool is_flushed ; t#bool vmalloc_flag ; s#list_head mapped_list ; s#scatterlist * sg_list ; int num_sg ; } 
s#agp_bridge_driver struct agp_bridge_driver { s#module * owner ; const void * aperture_sizes ; int num_aperture_sizes ; e#aper_size_type size_type ; t#bool cant_use_aperture ; t#bool needs_scratch_page ; const s#gatt_mask * masks ; int ( * fetch_size ) ( void ) ; int ( * configure ) ( void ) ; void ( * agp_enable ) ( s#agp_bridge_data * , t#u32 ) ; void ( * cleanup ) ( void ) ; void ( * tlb_flush ) ( s#agp_memory * ) ; unsigned long ( * mask_memory ) ( s#agp_bridge_data * , t#dma_addr_t , int ) ; void ( * cache_flush ) ( void ) ; int ( * create_gatt_table ) ( s#agp_bridge_data * ) ; int ( * free_gatt_table ) ( s#agp_bridge_data * ) ; int ( * insert_memory ) ( s#agp_memory * , t#off_t , int ) ; int ( * remove_memory ) ( s#agp_memory * , t#off_t , int ) ; s#agp_memory * ( * alloc_by_type ) ( t#size_t , int ) ; void ( * free_by_type ) ( s#agp_memory * ) ; s#page * ( * agp_alloc_page ) ( s#agp_bridge_data * ) ; int ( * agp_alloc_pages ) ( s#agp_bridge_data * , s#agp_memory * , t#size_t ) ; void ( * agp_destroy_page ) ( s#page * , int ) ; void ( * agp_destroy_pages ) ( s#agp_memory * ) ; int ( * agp_type_to_mask_type ) ( s#agp_bridge_data * , int ) ; void ( * chipset_flush ) ( s#agp_bridge_data * ) ; int ( * agp_map_page ) ( s#page * , t#dma_addr_t * ) ; void ( * agp_unmap_page ) ( s#page * , t#dma_addr_t ) ; int ( * agp_map_memory ) ( s#agp_memory * ) ; void ( * agp_unmap_memory ) ( s#agp_memory * ) ; } 
s##proc_dir_entry
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
e#chipset_type enum chipset_type { NOT_SUPPORTED , SUPPORTED , } 
s#agp_bridge_data struct agp_bridge_data { const s#agp_version * version ; const s#agp_bridge_driver * driver ; const s#vm_operations_struct * vm_ops ; void * previous_size ; void * current_size ; void * dev_private_data ; s#pci_dev * dev ; t#u32 * gatt_table ; t#u32 * gatt_table_real ; unsigned long scratch_page ; s#page * scratch_page_page ; t#dma_addr_t scratch_page_dma ; unsigned long gart_bus_addr ; unsigned long gatt_bus_addr ; t#u32 mode ; e#chipset_type type ; unsigned long * key_list ; t#atomic_t current_memory_agp ; t#atomic_t agp_in_use ; int max_memory_agp ; int aperture_size_idx ; int capndx ; int flags ; char major_version ; char minor_version ; s#list_head list ; t#u32 apbase_config ; s#list_head mapped_list ; t#spinlock_t mapped_lock ; } 
agp_bridge extern s#agp_bridge_data * agp_bridge 
agp_bridges extern s#list_head agp_bridges 
agp_find_bridge extern s#agp_bridge_data * ( * agp_find_bridge ) ( s#pci_dev * ) 
agp_backend_acquire extern s#agp_bridge_data * agp_backend_acquire ( s#pci_dev * ) 
agp_backend_release extern void agp_backend_release ( s#agp_bridge_data * ) 
agp_alloc_bridge s#agp_bridge_data * agp_alloc_bridge ( void ) 
agp_put_bridge void agp_put_bridge ( s#agp_bridge_data * ) 
agp_add_bridge int agp_add_bridge ( s#agp_bridge_data * ) 
agp_remove_bridge void agp_remove_bridge ( s#agp_bridge_data * ) 
agp_off extern int agp_off 
agp_try_unsupported_boot extern int agp_try_unsupported_boot 

/* drivers/char/agp/generic.o */
agp_memory_reserved int agp_memory_reserved 
agp_free_key void agp_free_key ( int ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##proc_dir_entry
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
agp_flush_chipset extern void agp_flush_chipset ( s#agp_bridge_data * ) 
agp_alloc_page_array void agp_alloc_page_array ( t#size_t , s#agp_memory * ) 
agp_free_page_array void agp_free_page_array ( s#agp_memory * ) 
agp_create_memory s#agp_memory * agp_create_memory ( int ) 
agp_free_memory extern void agp_free_memory ( s#agp_memory * ) 
agp_allocate_memory extern s#agp_memory * agp_allocate_memory ( s#agp_bridge_data * , t#size_t , t#u32 ) 
agp_num_entries int agp_num_entries ( void ) 
s#agp_kern_info struct agp_kern_info { s#agp_version version ; s#pci_dev * device ; e#chipset_type chipset ; unsigned long mode ; unsigned long aper_base ; t#size_t aper_size ; int max_memory ; int current_memory ; t#bool cant_use_aperture ; unsigned long page_mask ; const s#vm_operations_struct * vm_ops ; } 
agp_copy_info extern int agp_copy_info ( s#agp_bridge_data * , s#agp_kern_info * ) 
agp_bind_memory extern int agp_bind_memory ( s#agp_memory * , t#off_t ) 
agp_unbind_memory extern int agp_unbind_memory ( s#agp_memory * ) 
agp_rebind_memory extern int agp_rebind_memory ( void ) 
agp_collect_device_status t#u32 agp_collect_device_status ( s#agp_bridge_data * , t#u32 , t#u32 ) 
agp_device_command void agp_device_command ( t#u32 , t#bool ) 
get_agp_version void get_agp_version ( s#agp_bridge_data * ) 
agp_generic_enable void agp_generic_enable ( s#agp_bridge_data * , t#u32 ) 
agp_generic_create_gatt_table int agp_generic_create_gatt_table ( s#agp_bridge_data * ) 
agp_generic_free_gatt_table int agp_generic_free_gatt_table ( s#agp_bridge_data * ) 
agp_generic_insert_memory int agp_generic_insert_memory ( s#agp_memory * , t#off_t , int ) 
agp_generic_remove_memory int agp_generic_remove_memory ( s#agp_memory * , t#off_t , int ) 
agp_generic_alloc_by_type s#agp_memory * agp_generic_alloc_by_type ( t#size_t , int ) 
agp_generic_free_by_type void agp_generic_free_by_type ( s#agp_memory * ) 
agp_generic_alloc_user s#agp_memory * agp_generic_alloc_user ( t#size_t , int ) 
agp_generic_alloc_pages int agp_generic_alloc_pages ( s#agp_bridge_data * , s#agp_memory * , t#size_t ) 
agp_generic_alloc_page s#page * agp_generic_alloc_page ( s#agp_bridge_data * ) 
agp_generic_destroy_pages void agp_generic_destroy_pages ( s#agp_memory * ) 
agp_generic_destroy_page void agp_generic_destroy_page ( s#page * , int ) 
agp_enable extern void agp_enable ( s#agp_bridge_data * , t#u32 ) 
global_cache_flush void global_cache_flush ( void ) 
agp_generic_mask_memory unsigned long agp_generic_mask_memory ( s#agp_bridge_data * , t#dma_addr_t , int ) 
agp_generic_type_to_mask_type int agp_generic_type_to_mask_type ( s#agp_bridge_data * , int ) 
agp3_generic_fetch_size int agp3_generic_fetch_size ( void ) 
agp3_generic_tlbflush void agp3_generic_tlbflush ( s#agp_memory * ) 
agp3_generic_configure int agp3_generic_configure ( void ) 
agp3_generic_cleanup void agp3_generic_cleanup ( void ) 
s#aper_size_info_16 struct aper_size_info_16 { int size ; int num_entries ; int page_order ; t#u16 size_value ; } 
agp3_generic_sizes extern const s#aper_size_info_16 agp3_generic_sizes [ ] 

/* drivers/char/consolemap.o */
s##consw
s#console_font struct console_font { unsigned int width , height ; unsigned int charcount ; unsigned char * data ; } 
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##kstatfs
s##seq_file
s##radix_tree_node
s##writeback_control
s##kiocb
s##iovec
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##posix_acl
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##proc_dir_entry
s##tvec_base
s#vt_mode struct vt_mode { char mode ; char waitv ; short relsig ; short acqsig ; short frsig ; } 
s##splash_data
s#vc_data struct vc_data { unsigned short vc_num ; unsigned int vc_cols ; unsigned int vc_rows ; unsigned int vc_size_row ; unsigned int vc_scan_lines ; unsigned long vc_origin ; unsigned long vc_scr_end ; unsigned long vc_visible_origin ; unsigned int vc_top , vc_bottom ; const s#consw * vc_sw ; unsigned short * vc_screenbuf ; unsigned int vc_screenbuf_size ; unsigned char vc_mode ; unsigned char vc_attr ; unsigned char vc_def_color ; unsigned char vc_color ; unsigned char vc_s_color ; unsigned char vc_ulcolor ; unsigned char vc_itcolor ; unsigned char vc_halfcolor ; unsigned int vc_cursor_type ; unsigned short vc_complement_mask ; unsigned short vc_s_complement_mask ; unsigned int vc_x , vc_y ; unsigned int vc_saved_x , vc_saved_y ; unsigned long vc_pos ; unsigned short vc_hi_font_mask ; s#console_font vc_font ; unsigned short vc_video_erase_char ; unsigned int vc_state ; unsigned int vc_npar , vc_par [ 16 ] ; s#tty_struct * vc_tty ; s#vt_mode vt_mode ; s#pid * vt_pid ; int vt_newvt ; t#wait_queue_head_t paste_wait ; unsigned int vc_charset : 1 ; unsigned int vc_s_charset : 1 ; unsigned int vc_disp_ctrl : 1 ; unsigned int vc_toggle_meta : 1 ; unsigned int vc_decscnm : 1 ; unsigned int vc_decom : 1 ; unsigned int vc_decawm : 1 ; unsigned int vc_deccm : 1 ; unsigned int vc_decim : 1 ; unsigned int vc_deccolm : 1 ; unsigned int vc_intensity : 2 ; unsigned int vc_italic : 1 ; unsigned int vc_underline : 1 ; unsigned int vc_blink : 1 ; unsigned int vc_reverse : 1 ; unsigned int vc_s_intensity : 2 ; unsigned int vc_s_italic : 1 ; unsigned int vc_s_underline : 1 ; unsigned int vc_s_blink : 1 ; unsigned int vc_s_reverse : 1 ; unsigned int vc_ques : 1 ; unsigned int vc_need_wrap : 1 ; unsigned int vc_can_do_color : 1 ; unsigned int vc_report_mouse : 2 ; unsigned char vc_utf : 1 ; unsigned char vc_utf_count ; int vc_utf_char ; unsigned int vc_tab_stop [ 8 ] ; unsigned char vc_palette [ 16 * 3 ] ; unsigned short * vc_translate ; unsigned char vc_G0_charset ; unsigned char vc_G1_charset ; unsigned char vc_saved_G0 ; unsigned char vc_saved_G1 ; unsigned int vc_resize_user ; unsigned int vc_bell_pitch ; unsigned int vc_bell_duration ; s#vc_data * * vc_display_fg ; unsigned long vc_uni_pagedir ; unsigned long * vc_uni_pagedir_loc ; s#splash_data * vc_splash_data ; } 
inverse_translate extern t#u16 inverse_translate ( s#vc_data * , int , int ) 
con_set_default_unimap int con_set_default_unimap ( s#vc_data * ) 
con_copy_unimap int con_copy_unimap ( s#vc_data * , s#vc_data * ) 

/* drivers/char/generic_serial.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
gs_put_char int gs_put_char ( s#tty_struct * , unsigned char ) 
gs_write int gs_write ( s#tty_struct * , const unsigned char * , int ) 
gs_write_room int gs_write_room ( s#tty_struct * ) 
gs_chars_in_buffer int gs_chars_in_buffer ( s#tty_struct * ) 
gs_flush_buffer void gs_flush_buffer ( s#tty_struct * ) 
gs_flush_chars void gs_flush_chars ( s#tty_struct * ) 
gs_stop void gs_stop ( s#tty_struct * ) 
gs_start void gs_start ( s#tty_struct * ) 
gs_hangup void gs_hangup ( s#tty_struct * ) 
gs_block_til_ready int gs_block_til_ready ( void * , s#file * ) 
gs_close void gs_close ( s#tty_struct * , s#file * ) 
gs_set_termios void gs_set_termios ( s#tty_struct * , s#ktermios * ) 
s#serial_struct struct serial_struct { int type ; int line ; unsigned int port ; int irq ; int flags ; int xmit_fifo_size ; int custom_divisor ; int baud_base ; unsigned short close_delay ; char io_type ; char reserved_char [ 1 ] ; int hub6 ; unsigned short closing_wait ; unsigned short closing_wait2 ; unsigned char * iomem_base ; unsigned short iomem_reg_shift ; unsigned int port_high ; unsigned long iomap_base ; } 
s#real_driver struct real_driver { void ( * disable_tx_interrupts ) ( void * ) ; void ( * enable_tx_interrupts ) ( void * ) ; void ( * disable_rx_interrupts ) ( void * ) ; void ( * enable_rx_interrupts ) ( void * ) ; void ( * shutdown_port ) ( void * ) ; int ( * set_real_termios ) ( void * ) ; int ( * chars_in_buffer ) ( void * ) ; void ( * close ) ( void * ) ; void ( * hungup ) ( void * ) ; void ( * getserial ) ( void * , s#serial_struct * ) ; } 
s#gs_port struct gs_port { int magic ; s#tty_port port ; unsigned char * xmit_buf ; int xmit_head ; int xmit_tail ; int xmit_cnt ; s#mutex port_write_mutex ; unsigned long event ; unsigned short closing_wait ; int close_delay ; s#real_driver * rd ; int wakeup_chars ; int baud_base ; int baud ; int custom_divisor ; t#spinlock_t driver_lock ; } 
gs_init_port int gs_init_port ( s#gs_port * ) 
gs_setserial int gs_setserial ( s#gs_port * , s#serial_struct * ) 
gs_getserial int gs_getserial ( s#gs_port * , s#serial_struct * ) 
gs_got_break void gs_got_break ( s#gs_port * ) 

/* drivers/char/hvc_console.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s#hvc_struct struct hvc_struct { t#spinlock_t lock ; int index ; s#tty_struct * tty ; int count ; int do_wakeup ; char * outbuf ; int outbuf_size ; int n_outbuf ; t#uint32_t vtermno ; s#hv_ops * ops ; int irq_requested ; int data ; s#winsize ws ; s#work_struct tty_resize ; s#list_head next ; s#kref kref ; } 
s#hv_ops struct hv_ops { int ( * get_chars ) ( t#uint32_t , char * , int ) ; int ( * put_chars ) ( t#uint32_t , const char * , int ) ; int ( * notifier_add ) ( s#hvc_struct * , int ) ; void ( * notifier_del ) ( s#hvc_struct * , int ) ; void ( * notifier_hangup ) ( s#hvc_struct * , int ) ; } 
hvc_instantiate extern int hvc_instantiate ( t#uint32_t , int , s#hv_ops * ) 
hvc_kick void hvc_kick ( void ) 
hvc_poll int hvc_poll ( s#hvc_struct * ) 
__hvc_resize extern void __hvc_resize ( s#hvc_struct * , s#winsize ) 
hvc_alloc extern s#hvc_struct * __attribute__ ( ( __section__ ( ".devinit.text" ) ) ) __attribute__ ( ( __cold__ ) ) hvc_alloc ( t#uint32_t , int , s#hv_ops * , int ) 

/* drivers/char/hw_random/core.o */
s#hwrng struct hwrng { const char * name ; int ( * init ) ( s#hwrng * ) ; void ( * cleanup ) ( s#hwrng * ) ; int ( * data_present ) ( s#hwrng * , int ) ; int ( * data_read ) ( s#hwrng * , t#u32 * ) ; unsigned long priv ; s#list_head list ; } 
hwrng_register extern int hwrng_register ( s#hwrng * ) 
hwrng_unregister extern void hwrng_unregister ( s#hwrng * ) 

/* drivers/char/ipmi/ipmi_msghandler.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#ipmi_smi_watcher struct ipmi_smi_watcher { s#list_head link ; s#module * owner ; void ( * new_smi ) ( int , s#device * ) ; void ( * smi_gone ) ( int ) ; } 
ipmi_smi_watcher_register int ipmi_smi_watcher_register ( s#ipmi_smi_watcher * ) 
ipmi_smi_watcher_unregister int ipmi_smi_watcher_unregister ( s#ipmi_smi_watcher * ) 
s#ipmi_addr struct ipmi_addr { int addr_type ; short channel ; char data [ 32 ] ; } 
ipmi_validate_addr int ipmi_validate_addr ( s#ipmi_addr * , int ) 
ipmi_addr_length unsigned int ipmi_addr_length ( int ) 
s#ipmi_device_id struct ipmi_device_id { unsigned char device_id ; unsigned char device_revision ; unsigned char firmware_revision_1 ; unsigned char firmware_revision_2 ; unsigned char ipmi_version ; unsigned char additional_device_support ; unsigned int manufacturer_id ; unsigned int product_id ; unsigned char aux_firmware_revision [ 4 ] ; unsigned int aux_firmware_revision_set : 1 ; } 
s#bmc_device struct bmc_device { s#platform_device * dev ; s#ipmi_device_id id ; unsigned char guid [ 16 ] ; int guid_set ; s#kref refcount ; s#device_attribute device_id_attr ; s#device_attribute provides_dev_sdrs_attr ; s#device_attribute revision_attr ; s#device_attribute firmware_rev_attr ; s#device_attribute version_attr ; s#device_attribute add_dev_support_attr ; s#device_attribute manufacturer_id_attr ; s#device_attribute product_id_attr ; s#device_attribute guid_attr ; s#device_attribute aux_firmware_rev_attr ; } 
s#ipmi_smi_msg struct ipmi_smi_msg { s#list_head link ; long msgid ; void * user_data ; int data_size ; unsigned char data [ 272 ] ; int rsp_size ; unsigned char rsp [ 272 ] ; void ( * done ) ( s#ipmi_smi_msg * ) ; } 
s#ipmi_smi_handlers struct ipmi_smi_handlers { s#module * owner ; int ( * start_processing ) ( void * , t#ipmi_smi_t ) ; void ( * sender ) ( void * , s#ipmi_smi_msg * , int ) ; void ( * request_events ) ( void * ) ; void ( * set_run_to_completion ) ( void * , int ) ; void ( * poll ) ( void * ) ; void ( * set_maintenance_mode ) ( void * , int ) ; int ( * inc_usecount ) ( void * ) ; void ( * dec_usecount ) ( void * ) ; } 
s#ipmi_proc_entry struct ipmi_proc_entry { char * name ; s#ipmi_proc_entry * next ; } 
s#seq_table struct seq_table { unsigned int inuse : 1 ; unsigned int broadcast : 1 ; unsigned long timeout ; unsigned long orig_timeout ; unsigned int retries_left ; long seqid ; s#ipmi_recv_msg * recv_msg ; } 
s#ipmi_channel struct ipmi_channel { unsigned char medium ; unsigned char protocol ; unsigned char address ; unsigned char lun ; } 
s#ipmi_smi struct ipmi_smi { int intf_num ; s#kref refcount ; s#list_head link ; s#list_head users ; unsigned char ipmi_version_major ; unsigned char ipmi_version_minor ; t#wait_queue_head_t waitq ; s#bmc_device * bmc ; char * my_dev_name ; char * sysfs_name ; s#ipmi_smi_handlers * handlers ; void * send_info ; s#mutex proc_entry_lock ; s#ipmi_proc_entry * proc_entries ; s#device * si_dev ; t#spinlock_t seq_lock ; s#seq_table seq_table [ 64 ] ; int curr_seq ; t#spinlock_t waiting_msgs_lock ; s#list_head waiting_msgs ; s#mutex cmd_rcvrs_mutex ; s#list_head cmd_rcvrs ; t#spinlock_t events_lock ; s#list_head waiting_events ; unsigned int waiting_events_count ; char delivering_events ; char event_msg_printed ; unsigned char event_receiver ; unsigned char event_receiver_lun ; unsigned char local_sel_device ; unsigned char local_event_generator ; int maintenance_mode ; int maintenance_mode_enable ; int auto_maintenance_timeout ; t#spinlock_t maintenance_mode_lock ; void ( * null_user_handler ) ( t#ipmi_smi_t , s#ipmi_recv_msg * ) ; int curr_channel ; s#ipmi_channel channels [ 16 ] ; s#proc_dir_entry * proc_dir ; char proc_dir_name [ 10 ] ; t#atomic_t stats [ IPMI_NUM_STATS ] ; int run_to_completion ; } 
t#ipmi_smi_t typedef s#ipmi_smi * ipmi_smi_t 
s#ipmi_user struct ipmi_user { s#list_head link ; int valid ; s#kref refcount ; s#ipmi_user_hndl * handler ; void * handler_data ; t#ipmi_smi_t intf ; int gets_events ; } 
t#ipmi_user_t typedef s#ipmi_user * ipmi_user_t 
s#kernel_ipmi_msg struct kernel_ipmi_msg { unsigned char netfn ; unsigned char cmd ; unsigned short data_len ; unsigned char * data ; } 
s#ipmi_recv_msg struct ipmi_recv_msg { s#list_head link ; int recv_type ; t#ipmi_user_t user ; s#ipmi_addr addr ; long msgid ; s#kernel_ipmi_msg msg ; void * user_msg_data ; void ( * done ) ( s#ipmi_recv_msg * ) ; unsigned char msg_data [ 272 ] ; } 
s#ipmi_user_hndl struct ipmi_user_hndl { void ( * ipmi_recv_hndl ) ( s#ipmi_recv_msg * , void * ) ; void ( * ipmi_watchdog_pretimeout ) ( void * ) ; } 
ipmi_create_user int ipmi_create_user ( unsigned int , s#ipmi_user_hndl * , void * , t#ipmi_user_t * ) 
ipmi_destroy_user int ipmi_destroy_user ( t#ipmi_user_t ) 
ipmi_get_version void ipmi_get_version ( t#ipmi_user_t , unsigned char * , unsigned char * ) 
ipmi_set_my_address int ipmi_set_my_address ( t#ipmi_user_t , unsigned int , unsigned char ) 
ipmi_get_my_address int ipmi_get_my_address ( t#ipmi_user_t , unsigned int , unsigned char * ) 
ipmi_set_my_LUN int ipmi_set_my_LUN ( t#ipmi_user_t , unsigned int , unsigned char ) 
ipmi_get_my_LUN int ipmi_get_my_LUN ( t#ipmi_user_t , unsigned int , unsigned char * ) 
ipmi_get_maintenance_mode int ipmi_get_maintenance_mode ( t#ipmi_user_t ) 
ipmi_set_maintenance_mode int ipmi_set_maintenance_mode ( t#ipmi_user_t , int ) 
ipmi_set_gets_events int ipmi_set_gets_events ( t#ipmi_user_t , int ) 
ipmi_register_for_cmd int ipmi_register_for_cmd ( t#ipmi_user_t , unsigned char , unsigned char , unsigned int ) 
ipmi_unregister_for_cmd int ipmi_unregister_for_cmd ( t#ipmi_user_t , unsigned char , unsigned char , unsigned int ) 
ipmi_request_settime int ipmi_request_settime ( t#ipmi_user_t , s#ipmi_addr * , long , s#kernel_ipmi_msg * , void * , int , int , unsigned int ) 
ipmi_request_supply_msgs int ipmi_request_supply_msgs ( t#ipmi_user_t , s#ipmi_addr * , long , s#kernel_ipmi_msg * , void * , void * , s#ipmi_recv_msg * , int ) 
ipmi_smi_add_proc_entry int ipmi_smi_add_proc_entry ( t#ipmi_smi_t , char * , t#read_proc_t * , void * ) 
ipmi_poll_interface void ipmi_poll_interface ( t#ipmi_user_t ) 
ipmi_register_smi int ipmi_register_smi ( s#ipmi_smi_handlers * , void * , s#ipmi_device_id * , s#device * , const char * , unsigned char ) 
ipmi_unregister_smi int ipmi_unregister_smi ( t#ipmi_smi_t ) 
ipmi_smi_msg_received void ipmi_smi_msg_received ( t#ipmi_smi_t , s#ipmi_smi_msg * ) 
ipmi_smi_watchdog_pretimeout void ipmi_smi_watchdog_pretimeout ( t#ipmi_smi_t ) 
ipmi_alloc_smi_msg s#ipmi_smi_msg * ipmi_alloc_smi_msg ( void ) 
ipmi_free_recv_msg void ipmi_free_recv_msg ( s#ipmi_recv_msg * ) 

/* drivers/char/keyboard.o */
s##consw
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##splash_data
t#k_handler_fn typedef void ( k_handler_fn ) ( s#vc_data * , unsigned char , char ) 
k_handler t#k_handler_fn * k_handler [ 16 ] 
s#kbd_struct struct kbd_struct { unsigned char lockstate ; unsigned char slockstate ; unsigned char ledmode : 2 ; unsigned char ledflagstate : 4 ; unsigned char default_ledflagstate : 4 ; unsigned char kbdmode : 2 ; unsigned char modeflags : 5 ; } 
kbd_table extern s#kbd_struct kbd_table [ ] 
register_keyboard_notifier extern int register_keyboard_notifier ( s#notifier_block * ) 
unregister_keyboard_notifier extern int unregister_keyboard_notifier ( s#notifier_block * ) 
kd_mksound extern void kd_mksound ( unsigned int , unsigned int ) 

/* drivers/char/misc.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##poll_table_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#miscdevice struct miscdevice { int minor ; const char * name ; const s#file_operations * fops ; s#list_head list ; s#device * parent ; s#device * this_device ; const char * nodename ; t#mode_t mode ; } 
misc_register extern int misc_register ( s#miscdevice * ) 
misc_deregister extern int misc_deregister ( s#miscdevice * ) 

/* drivers/char/nsc_gpio.o */
s##vfsmount
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##kiocb
s##iovec
s##poll_table_struct
s##vm_area_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##page
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##radix_tree_node
s##writeback_control
s##cdev
s##posix_acl
s##cred
nsc_gpio_write extern t#ssize_t nsc_gpio_write ( s#file * , const char * , t#size_t , t#loff_t * ) 
nsc_gpio_read extern t#ssize_t nsc_gpio_read ( s#file * , char * , t#size_t , t#loff_t * ) 
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#nsc_gpio_ops struct nsc_gpio_ops { s#module * owner ; t#u32 ( * gpio_config ) ( unsigned , t#u32 , t#u32 ) ; void ( * gpio_dump ) ( s#nsc_gpio_ops * , unsigned ) ; int ( * gpio_get ) ( unsigned ) ; void ( * gpio_set ) ( unsigned , int ) ; void ( * gpio_change ) ( unsigned ) ; int ( * gpio_current ) ( unsigned ) ; s#device * dev ; } 
nsc_gpio_dump extern void nsc_gpio_dump ( s#nsc_gpio_ops * , unsigned ) 

/* drivers/char/nvram.o */
__nvram_read_byte extern unsigned char __nvram_read_byte ( int ) 
nvram_read_byte extern unsigned char nvram_read_byte ( int ) 
__nvram_write_byte extern void __nvram_write_byte ( unsigned char , int ) 
nvram_write_byte extern void nvram_write_byte ( unsigned char , int ) 
__nvram_check_checksum extern int __nvram_check_checksum ( void ) 
nvram_check_checksum extern int nvram_check_checksum ( void ) 

/* drivers/char/random.o */
add_input_randomness extern void add_input_randomness ( unsigned int , unsigned int , unsigned int ) 
get_random_bytes extern void get_random_bytes ( void * , int ) 
generate_random_uuid void generate_random_uuid ( unsigned char [ 16 ] ) 
secure_tcpv6_sequence_number extern t#__u32 secure_tcpv6_sequence_number ( t#__be32 * , t#__be32 * , t#__be16 , t#__be16 ) 
secure_ipv4_port_ephemeral extern t#u32 secure_ipv4_port_ephemeral ( t#__be32 , t#__be32 , t#__be16 ) 
secure_dccp_sequence_number extern t#u64 secure_dccp_sequence_number ( t#__be32 , t#__be32 , t#__be16 , t#__be16 ) 

/* drivers/char/sysrq.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##mnt_namespace
s#vfsmount struct vfsmount { s#list_head mnt_hash ; s#vfsmount * mnt_parent ; s#dentry * mnt_mountpoint ; s#dentry * mnt_root ; s#super_block * mnt_sb ; s#list_head mnt_mounts ; s#list_head mnt_child ; int mnt_flags ; const char * mnt_devname ; s#list_head mnt_list ; s#list_head mnt_expire ; s#list_head mnt_share ; s#list_head mnt_slave_list ; s#list_head mnt_slave ; s#vfsmount * mnt_master ; s#mnt_namespace * mnt_ns ; int mnt_id ; int mnt_group_id ; t#atomic_t mnt_count ; int mnt_expiry_mark ; int mnt_pinned ; int mnt_ghosts ; int * mnt_writers ; } 
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##array_cache
s##kmem_list3
s##bsd_acct_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##uts_namespace
s##ipc_namespace
s##net
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s#perf_event_context struct perf_event_context { t#spinlock_t lock ; s#mutex mutex ; s#list_head group_list ; s#list_head event_list ; int nr_events ; int nr_active ; int is_active ; int nr_stat ; t#atomic_t refcount ; s#task_struct * task ; t#u64 time ; t#u64 timestamp ; s#perf_event_context * parent_ctx ; t#u64 parent_gen ; t#u64 generation ; int pin_count ; s#rcu_head rcu_head ; } 
s##mem_cgroup
s##sysfs_dirent
handle_sysrq void handle_sysrq ( int , s#tty_struct * ) 
s#sysrq_key_op struct sysrq_key_op { void ( * handler ) ( int , s#tty_struct * ) ; char * help_msg ; char * action_msg ; int enable_mask ; } 
register_sysrq_key int register_sysrq_key ( int , s#sysrq_key_op * ) 
unregister_sysrq_key int unregister_sysrq_key ( int , s#sysrq_key_op * ) 

/* drivers/char/tpm/tpm.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#tpm_vendor_specific struct tpm_vendor_specific { const t#u8 req_complete_mask ; const t#u8 req_complete_val ; const t#u8 req_canceled ; void * iobase ; unsigned long base ; int irq ; int region_size ; int have_region ; int ( * recv ) ( s#tpm_chip * , t#u8 * , t#size_t ) ; int ( * send ) ( s#tpm_chip * , t#u8 * , t#size_t ) ; void ( * cancel ) ( s#tpm_chip * ) ; t#u8 ( * status ) ( s#tpm_chip * ) ; void ( * release ) ( s#device * ) ; s#miscdevice miscdev ; s#attribute_group * attr_group ; s#list_head list ; int locality ; unsigned long timeout_a , timeout_b , timeout_c , timeout_d ; unsigned long duration [ 3 ] ; t#wait_queue_head_t read_queue ; t#wait_queue_head_t int_queue ; } 
s#tpm_chip struct tpm_chip { s#device * dev ; int dev_num ; unsigned long is_open ; int time_expired ; t#u8 * data_buffer ; t#atomic_t data_pending ; s#mutex buffer_mutex ; s#timer_list user_read_timer ; s#work_struct work ; s#mutex tpm_mutex ; s#tpm_vendor_specific vendor ; s#dentry * * bios_dir ; s#list_head list ; void ( * release ) ( s#device * ) ; } 
tpm_calc_ordinal_duration extern unsigned long tpm_calc_ordinal_duration ( s#tpm_chip * , t#u32 ) 
tpm_gen_interrupt extern void tpm_gen_interrupt ( s#tpm_chip * ) 
tpm_get_timeouts extern void tpm_get_timeouts ( s#tpm_chip * ) 
tpm_continue_selftest extern void tpm_continue_selftest ( s#tpm_chip * ) 
tpm_show_enabled extern t#ssize_t tpm_show_enabled ( s#device * , s#device_attribute * , char * ) 
tpm_show_active extern t#ssize_t tpm_show_active ( s#device * , s#device_attribute * , char * ) 
tpm_show_owned extern t#ssize_t tpm_show_owned ( s#device * , s#device_attribute * , char * ) 
tpm_show_temp_deactivated extern t#ssize_t tpm_show_temp_deactivated ( s#device * , s#device_attribute * , char * ) 
tpm_pcr_read int tpm_pcr_read ( t#u32 , int , t#u8 * ) 
tpm_pcr_extend int tpm_pcr_extend ( t#u32 , int , const t#u8 * ) 
tpm_show_pcrs extern t#ssize_t tpm_show_pcrs ( s#device * , s#device_attribute * , char * ) 
tpm_show_pubek extern t#ssize_t tpm_show_pubek ( s#device * , s#device_attribute * , char * ) 
tpm_show_caps extern t#ssize_t tpm_show_caps ( s#device * , s#device_attribute * , char * ) 
tpm_show_caps_1_2 extern t#ssize_t tpm_show_caps_1_2 ( s#device * , s#device_attribute * , char * ) 
tpm_store_cancel extern t#ssize_t tpm_store_cancel ( s#device * , s#device_attribute * , const char * , t#size_t ) 
tpm_open extern int tpm_open ( s#inode * , s#file * ) 
tpm_release extern int tpm_release ( s#inode * , s#file * ) 
tpm_write extern t#ssize_t tpm_write ( s#file * , const char * , t#size_t , t#loff_t * ) 
tpm_read extern t#ssize_t tpm_read ( s#file * , char * , t#size_t , t#loff_t * ) 
tpm_remove_hardware extern void tpm_remove_hardware ( s#device * ) 
tpm_pm_suspend extern int tpm_pm_suspend ( s#device * , t#pm_message_t ) 
tpm_pm_resume extern int tpm_pm_resume ( s#device * ) 
tpm_dev_vendor_release extern void tpm_dev_vendor_release ( s#tpm_chip * ) 
tpm_dev_release void tpm_dev_release ( s#device * ) 
tpm_register_hardware extern s#tpm_chip * tpm_register_hardware ( s#device * , const s#tpm_vendor_specific * ) 

/* drivers/char/tpm/tpm_bios.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
tpm_bios_log_setup extern s#dentry * * tpm_bios_log_setup ( char * ) 
tpm_bios_log_teardown extern void tpm_bios_log_teardown ( s#dentry * * ) 

/* drivers/char/tty_buffer.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##proc_dir_entry
tty_buffer_request_room extern int tty_buffer_request_room ( s#tty_struct * , t#size_t ) 
tty_insert_flip_string extern int tty_insert_flip_string ( s#tty_struct * , const unsigned char * , t#size_t ) 
tty_insert_flip_string_flags extern int tty_insert_flip_string_flags ( s#tty_struct * , const unsigned char * , const char * , t#size_t ) 
tty_schedule_flip void tty_schedule_flip ( s#tty_struct * ) 
tty_prepare_flip_string extern int tty_prepare_flip_string ( s#tty_struct * , unsigned char * * , t#size_t ) 
tty_prepare_flip_string_flags extern int tty_prepare_flip_string_flags ( s#tty_struct * , unsigned char * * , char * * , t#size_t ) 
tty_flip_buffer_push extern void tty_flip_buffer_push ( s#tty_struct * ) 

/* drivers/char/tty_io.o */
tty_std_termios extern s#ktermios tty_std_termios 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
t#__kernel_fd_set typedef struct { unsigned long fds_bits [ ( 1024 / ( 8 * sizeof ( unsigned long ) ) ) ] ; } __kernel_fd_set 
t#fd_set typedef t#__kernel_fd_set fd_set 
s#fdtable struct fdtable { unsigned int max_fds ; s#file * * fd ; t#fd_set * close_on_exec ; t#fd_set * open_fds ; s#rcu_head rcu ; s#fdtable * next ; } 
s#embedded_fd_set struct embedded_fd_set { unsigned long fds_bits [ 1 ] ; } 
s#files_struct struct files_struct { t#atomic_t count ; s#fdtable * fdt ; s#fdtable fdtab ; t#spinlock_t file_lock __attribute__ ( ( __aligned__ ( ( 1 << ( 7 ) ) ) ) ) ; int next_fd ; s#embedded_fd_set close_on_exec_init ; s#embedded_fd_set open_fds_init ; s#file * fd_array [ 64 ] ; } 
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##net
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
tty_mutex extern s#mutex tty_mutex 
tty_name extern char * tty_name ( s#tty_struct * , char * ) 
tty_check_change extern int tty_check_change ( s#tty_struct * ) 
tty_wakeup extern void tty_wakeup ( s#tty_struct * ) 
tty_hangup extern void tty_hangup ( s#tty_struct * ) 
tty_vhangup extern void tty_vhangup ( s#tty_struct * ) 
tty_hung_up_p extern int tty_hung_up_p ( s#file * ) 
stop_tty extern void stop_tty ( s#tty_struct * ) 
start_tty extern void start_tty ( s#tty_struct * ) 
tty_init_termios extern int tty_init_termios ( s#tty_struct * ) 
tty_free_termios extern void tty_free_termios ( s#tty_struct * ) 
tty_shutdown extern void tty_shutdown ( s#tty_struct * ) 
tty_kref_put extern void tty_kref_put ( s#tty_struct * ) 
tty_get_pgrp extern s#pid * tty_get_pgrp ( s#tty_struct * ) 
tty_pair_get_tty extern s#tty_struct * tty_pair_get_tty ( s#tty_struct * ) 
tty_pair_get_pty extern s#tty_struct * tty_pair_get_pty ( s#tty_struct * ) 
do_SAK extern void do_SAK ( s#tty_struct * ) 
tty_put_char extern int tty_put_char ( s#tty_struct * , unsigned char ) 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
tty_register_device extern s#device * tty_register_device ( s#tty_driver * , unsigned , s#device * ) 
tty_unregister_device extern void tty_unregister_device ( s#tty_driver * , unsigned ) 
alloc_tty_driver extern s#tty_driver * alloc_tty_driver ( int ) 
tty_driver_kref_put extern void tty_driver_kref_put ( s#tty_driver * ) 
tty_set_operations extern void tty_set_operations ( s#tty_driver * , const s#tty_operations * ) 
put_tty_driver extern void put_tty_driver ( s#tty_driver * ) 
tty_register_driver extern int tty_register_driver ( s#tty_driver * ) 
tty_unregister_driver extern int tty_unregister_driver ( s#tty_driver * ) 
tty_devnum extern t#dev_t tty_devnum ( s#tty_struct * ) 
get_current_tty extern s#tty_struct * get_current_tty ( void ) 

/* drivers/char/tty_ioctl.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##proc_dir_entry
tty_chars_in_buffer extern int tty_chars_in_buffer ( s#tty_struct * ) 
tty_write_room extern int tty_write_room ( s#tty_struct * ) 
tty_driver_flush_buffer extern void tty_driver_flush_buffer ( s#tty_struct * ) 
tty_throttle extern void tty_throttle ( s#tty_struct * ) 
tty_unthrottle extern void tty_unthrottle ( s#tty_struct * ) 
tty_wait_until_sent extern void tty_wait_until_sent ( s#tty_struct * , long ) 
tty_termios_baud_rate extern t#speed_t tty_termios_baud_rate ( s#ktermios * ) 
tty_termios_input_baud_rate extern t#speed_t tty_termios_input_baud_rate ( s#ktermios * ) 
tty_termios_encode_baud_rate extern void tty_termios_encode_baud_rate ( s#ktermios * , t#speed_t , t#speed_t ) 
tty_encode_baud_rate extern void tty_encode_baud_rate ( s#tty_struct * , t#speed_t , t#speed_t ) 
tty_get_baud_rate extern t#speed_t tty_get_baud_rate ( s#tty_struct * ) 
tty_termios_copy_hw extern void tty_termios_copy_hw ( s#ktermios * , s#ktermios * ) 
tty_termios_hw_change extern int tty_termios_hw_change ( s#ktermios * , s#ktermios * ) 
tty_mode_ioctl extern int tty_mode_ioctl ( s#tty_struct * , s#file * , unsigned int , unsigned long ) 
tty_perform_flush extern int tty_perform_flush ( s#tty_struct * , unsigned long ) 
n_tty_ioctl_helper extern int n_tty_ioctl_helper ( s#tty_struct * , s#file * , unsigned int , unsigned long ) 

/* drivers/char/tty_ldisc.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##net
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
tty_register_ldisc extern int tty_register_ldisc ( int , s#tty_ldisc_ops * ) 
tty_unregister_ldisc extern int tty_unregister_ldisc ( int ) 
tty_ldisc_ref_wait extern s#tty_ldisc * tty_ldisc_ref_wait ( s#tty_struct * ) 
tty_ldisc_ref extern s#tty_ldisc * tty_ldisc_ref ( s#tty_struct * ) 
tty_ldisc_deref extern void tty_ldisc_deref ( s#tty_ldisc * ) 
tty_ldisc_flush extern void tty_ldisc_flush ( s#tty_struct * ) 

/* drivers/char/tty_port.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##proc_dir_entry
tty_port_init extern void tty_port_init ( s#tty_port * ) 
tty_port_alloc_xmit_buf extern int tty_port_alloc_xmit_buf ( s#tty_port * ) 
tty_port_free_xmit_buf extern void tty_port_free_xmit_buf ( s#tty_port * ) 
tty_port_tty_get extern s#tty_struct * tty_port_tty_get ( s#tty_port * ) 
tty_port_tty_set extern void tty_port_tty_set ( s#tty_port * , s#tty_struct * ) 
tty_port_hangup extern void tty_port_hangup ( s#tty_port * ) 
tty_port_carrier_raised extern int tty_port_carrier_raised ( s#tty_port * ) 
tty_port_raise_dtr_rts extern void tty_port_raise_dtr_rts ( s#tty_port * ) 
tty_port_lower_dtr_rts extern void tty_port_lower_dtr_rts ( s#tty_port * ) 
tty_port_block_til_ready extern int tty_port_block_til_ready ( s#tty_port * , s#tty_struct * , s#file * ) 
tty_port_close_start extern int tty_port_close_start ( s#tty_port * , s#tty_struct * , s#file * ) 
tty_port_close_end extern void tty_port_close_end ( s#tty_port * , s#tty_struct * ) 
tty_port_close extern void tty_port_close ( s#tty_port * , s#tty_struct * , s#file * ) 

/* drivers/char/vt.o */
register_vt_notifier extern int register_vt_notifier ( s#notifier_block * ) 
unregister_vt_notifier extern int unregister_vt_notifier ( s#notifier_block * ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##proc_dir_entry
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##splash_data
s#consw struct consw { s#module * owner ; const char * ( * con_startup ) ( void ) ; void ( * con_init ) ( s#vc_data * , int ) ; void ( * con_deinit ) ( s#vc_data * ) ; void ( * con_clear ) ( s#vc_data * , int , int , int , int ) ; void ( * con_putc ) ( s#vc_data * , int , int , int ) ; void ( * con_putcs ) ( s#vc_data * , const unsigned short * , int , int , int ) ; void ( * con_cursor ) ( s#vc_data * , int ) ; int ( * con_scroll ) ( s#vc_data * , int , int , int , int ) ; void ( * con_bmove ) ( s#vc_data * , int , int , int , int , int , int ) ; int ( * con_switch ) ( s#vc_data * ) ; int ( * con_blank ) ( s#vc_data * , int , int ) ; int ( * con_font_set ) ( s#vc_data * , s#console_font * , unsigned ) ; int ( * con_font_get ) ( s#vc_data * , s#console_font * ) ; int ( * con_font_default ) ( s#vc_data * , s#console_font * , char * ) ; int ( * con_font_copy ) ( s#vc_data * , int ) ; int ( * con_resize ) ( s#vc_data * , unsigned int , unsigned int , unsigned int ) ; int ( * con_set_palette ) ( s#vc_data * , unsigned char * ) ; int ( * con_scrolldelta ) ( s#vc_data * , int ) ; int ( * con_set_origin ) ( s#vc_data * ) ; void ( * con_save_screen ) ( s#vc_data * ) ; t#u8 ( * con_build_attr ) ( s#vc_data * , t#u8 , t#u8 , t#u8 , t#u8 , t#u8 , t#u8 ) ; void ( * con_invert_region ) ( s#vc_data * , t#u16 * , int ) ; t#u16 * ( * con_screen_pos ) ( s#vc_data * , int ) ; unsigned long ( * con_getxy ) ( s#vc_data * , unsigned long , int * , int * ) ; } 
unbind_con_driver extern int unbind_con_driver ( const s#consw * , int , int , int ) 
con_is_bound int con_is_bound ( const s#consw * ) 
register_con_driver int register_con_driver ( const s#consw * , int , int ) 
unregister_con_driver int unregister_con_driver ( const s#consw * ) 
do_blank_screen void do_blank_screen ( int ) 
do_unblank_screen void do_unblank_screen ( int ) 
screen_glyph extern t#u16 screen_glyph ( s#vc_data * , int ) 
color_table extern unsigned char color_table [ ] 
default_red extern int default_red [ ] 
default_grn extern int default_grn [ ] 
default_blu extern int default_blu [ ] 
update_region void update_region ( s#vc_data * , unsigned long , int ) 
redraw_screen void redraw_screen ( s#vc_data * , int ) 
vc_resize int vc_resize ( s#vc_data * , unsigned int , unsigned int ) 
fg_console extern int fg_console 
console_blank_hook int ( * console_blank_hook ) ( int ) 
console_blanked extern int console_blanked 
s#vc struct vc { s#vc_data * d ; s#work_struct SAK_work ; } 
vc_cons extern s#vc vc_cons [ 63 ] 
take_over_console int take_over_console ( const s#consw * , int , int , int ) 
give_up_console void give_up_console ( const s#consw * ) 

/* drivers/char/vt_ioctl.o */
pm_set_vt_switch void pm_set_vt_switch ( int ) 

/* drivers/connector/connector.o */
s#cb_id struct cb_id { t#__u32 idx ; t#__u32 val ; } 
s#cn_msg struct cn_msg { s#cb_id id ; t#__u32 seq ; t#__u32 ack ; t#__u16 len ; t#__u16 flags ; t#__u8 data [ 0 ] ; } 
cn_netlink_send int cn_netlink_send ( s#cn_msg * , t#u32 , t#gfp_t ) 
s#netlink_skb_parms struct netlink_skb_parms { s#ucred creds ; t#__u32 pid ; t#__u32 dst_group ; t#kernel_cap_t eff_cap ; t#__u32 loginuid ; t#__u32 sessionid ; t#__u32 sid ; } 
cn_add_callback int cn_add_callback ( s#cb_id * , char * , void ( * ) ( s#cn_msg * , s#netlink_skb_parms * ) ) 
cn_del_callback void cn_del_callback ( s#cb_id * ) 

/* drivers/cpufreq/cpufreq.o */
lock_policy_rwsem_read int lock_policy_rwsem_read ( int ) 
lock_policy_rwsem_write int lock_policy_rwsem_write ( int ) 
unlock_policy_rwsem_read void unlock_policy_rwsem_read ( int ) 
unlock_policy_rwsem_write void unlock_policy_rwsem_write ( int ) 
s#cpufreq_cpuinfo struct cpufreq_cpuinfo { unsigned int max_freq ; unsigned int min_freq ; unsigned int transition_latency ; } 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s#cpufreq_governor struct cpufreq_governor { char name [ 16 ] ; int ( * governor ) ( s#cpufreq_policy * , unsigned int ) ; t#ssize_t ( * show_setspeed ) ( s#cpufreq_policy * , char * ) ; int ( * store_setspeed ) ( s#cpufreq_policy * , unsigned int ) ; unsigned int max_transition_latency ; s#list_head governor_list ; s#module * owner ; } 
s#cpufreq_real_policy struct cpufreq_real_policy { unsigned int min ; unsigned int max ; unsigned int policy ; s#cpufreq_governor * governor ; } 
s#cpufreq_policy struct cpufreq_policy { t#cpumask_var_t cpus ; t#cpumask_var_t related_cpus ; unsigned int shared_type ; unsigned int cpu ; s#cpufreq_cpuinfo cpuinfo ; unsigned int min ; unsigned int max ; unsigned int cur ; unsigned int policy ; s#cpufreq_governor * governor ; s#work_struct update ; s#cpufreq_real_policy user_policy ; s#kobject kobj ; s#completion kobj_unregister ; } 
cpufreq_cpu_get s#cpufreq_policy * cpufreq_cpu_get ( unsigned int ) 
cpufreq_cpu_put void cpufreq_cpu_put ( s#cpufreq_policy * ) 
cpufreq_debug_printk extern void cpufreq_debug_printk ( unsigned int , const char * , const char * , ... ) 
s#cpufreq_freqs struct cpufreq_freqs { unsigned int cpu ; unsigned int old ; unsigned int new ; t#u8 flags ; } 
cpufreq_notify_transition void cpufreq_notify_transition ( s#cpufreq_freqs * , unsigned int ) 
cpufreq_global_kobject extern s#kobject * cpufreq_global_kobject 
cpufreq_quick_get unsigned int cpufreq_quick_get ( unsigned int ) 
cpufreq_get unsigned int cpufreq_get ( unsigned int ) 
cpufreq_register_notifier int cpufreq_register_notifier ( s#notifier_block * , unsigned int ) 
cpufreq_unregister_notifier int cpufreq_unregister_notifier ( s#notifier_block * , unsigned int ) 
__cpufreq_driver_target extern int __cpufreq_driver_target ( s#cpufreq_policy * , unsigned int , unsigned int ) 
cpufreq_driver_target extern int cpufreq_driver_target ( s#cpufreq_policy * , unsigned int , unsigned int ) 
__cpufreq_driver_getavg extern int __cpufreq_driver_getavg ( s#cpufreq_policy * , unsigned int ) 
cpufreq_register_governor int cpufreq_register_governor ( s#cpufreq_governor * ) 
cpufreq_unregister_governor void cpufreq_unregister_governor ( s#cpufreq_governor * ) 
cpufreq_get_policy int cpufreq_get_policy ( s#cpufreq_policy * , unsigned int ) 
cpufreq_update_policy int cpufreq_update_policy ( unsigned int ) 
s#freq_attr struct freq_attr { s#attribute attr ; t#ssize_t ( * show ) ( s#cpufreq_policy * , char * ) ; t#ssize_t ( * store ) ( s#cpufreq_policy * , const char * , t#size_t ) ; } 
s#cpufreq_driver struct cpufreq_driver { s#module * owner ; char name [ 16 ] ; t#u8 flags ; int ( * init ) ( s#cpufreq_policy * ) ; int ( * verify ) ( s#cpufreq_policy * ) ; int ( * setpolicy ) ( s#cpufreq_policy * ) ; int ( * target ) ( s#cpufreq_policy * , unsigned int , unsigned int ) ; unsigned int ( * get ) ( unsigned int ) ; unsigned int ( * getavg ) ( s#cpufreq_policy * , unsigned int ) ; int ( * exit ) ( s#cpufreq_policy * ) ; int ( * suspend ) ( s#cpufreq_policy * , t#pm_message_t ) ; int ( * resume ) ( s#cpufreq_policy * ) ; s#freq_attr * * attr ; } 
cpufreq_register_driver int cpufreq_register_driver ( s#cpufreq_driver * ) 
cpufreq_unregister_driver int cpufreq_unregister_driver ( s#cpufreq_driver * ) 

/* drivers/cpufreq/freq_table.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s#cpufreq_frequency_table struct cpufreq_frequency_table { unsigned int index ; unsigned int frequency ; } 
cpufreq_frequency_table_cpuinfo int cpufreq_frequency_table_cpuinfo ( s#cpufreq_policy * , s#cpufreq_frequency_table * ) 
cpufreq_frequency_table_verify int cpufreq_frequency_table_verify ( s#cpufreq_policy * , s#cpufreq_frequency_table * ) 
cpufreq_frequency_table_target int cpufreq_frequency_table_target ( s#cpufreq_policy * , s#cpufreq_frequency_table * , unsigned int , unsigned int , unsigned int * ) 
cpufreq_freq_attr_scaling_available_freqs extern s#freq_attr cpufreq_freq_attr_scaling_available_freqs 
cpufreq_frequency_table_get_attr void cpufreq_frequency_table_get_attr ( s#cpufreq_frequency_table * , unsigned int ) 
cpufreq_frequency_table_put_attr void cpufreq_frequency_table_put_attr ( unsigned int ) 
cpufreq_frequency_get_table s#cpufreq_frequency_table * cpufreq_frequency_get_table ( unsigned int ) 

/* drivers/cpuidle/cpuidle.o */
cpuidle_pause_and_lock extern void cpuidle_pause_and_lock ( void ) 
cpuidle_resume_and_unlock extern void cpuidle_resume_and_unlock ( void ) 
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
cpuidle_enable_device extern int cpuidle_enable_device ( s#cpuidle_device * ) 
cpuidle_disable_device extern void cpuidle_disable_device ( s#cpuidle_device * ) 
cpuidle_register_device extern int cpuidle_register_device ( s#cpuidle_device * ) 
cpuidle_unregister_device extern void cpuidle_unregister_device ( s#cpuidle_device * ) 

/* drivers/cpuidle/driver.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s#cpuidle_driver struct cpuidle_driver { char name [ 16 ] ; s#module * owner ; } 
cpuidle_register_driver extern int cpuidle_register_driver ( s#cpuidle_driver * ) 
cpuidle_unregister_driver extern void cpuidle_unregister_driver ( s#cpuidle_driver * ) 

/* drivers/dca/dca-core.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
dca_add_requester int dca_add_requester ( s#device * ) 
dca_remove_requester int dca_remove_requester ( s#device * ) 
dca3_get_tag t#u8 dca3_get_tag ( s#device * , int ) 
dca_get_tag t#u8 dca_get_tag ( int ) 
s#dca_ops struct dca_ops { int ( * add_requester ) ( s#dca_provider * , s#device * ) ; int ( * remove_requester ) ( s#dca_provider * , s#device * ) ; t#u8 ( * get_tag ) ( s#dca_provider * , s#device * , int ) ; int ( * dev_managed ) ( s#dca_provider * , s#device * ) ; } 
s#dca_provider struct dca_provider { s#list_head node ; s#dca_ops * ops ; s#device * cd ; int id ; } 
alloc_dca_provider s#dca_provider * alloc_dca_provider ( s#dca_ops * , int ) 
free_dca_provider void free_dca_provider ( s#dca_provider * ) 
register_dca_provider int register_dca_provider ( s#dca_provider * , s#device * ) 
unregister_dca_provider void unregister_dca_provider ( s#dca_provider * , s#device * ) 
dca_register_notify void dca_register_notify ( s#notifier_block * ) 
dca_unregister_notify void dca_unregister_notify ( s#notifier_block * ) 

/* drivers/dma/dmaengine.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
dma_sync_wait e#dma_status dma_sync_wait ( s#dma_chan * , t#dma_cookie_t ) 
dma_find_channel s#dma_chan * dma_find_channel ( e#dma_transaction_type ) 
dma_issue_pending_all void dma_issue_pending_all ( void ) 
t#dma_filter_fn typedef t#bool ( * dma_filter_fn ) ( s#dma_chan * , void * ) 
__dma_request_channel s#dma_chan * __dma_request_channel ( t#dma_cap_mask_t * , t#dma_filter_fn , void * ) 
dma_release_channel void dma_release_channel ( s#dma_chan * ) 
dmaengine_get void dmaengine_get ( void ) 
dmaengine_put void dmaengine_put ( void ) 
dma_async_device_register int dma_async_device_register ( s#dma_device * ) 
dma_async_device_unregister void dma_async_device_unregister ( s#dma_device * ) 
dma_async_memcpy_buf_to_buf t#dma_cookie_t dma_async_memcpy_buf_to_buf ( s#dma_chan * , void * , void * , t#size_t ) 
dma_async_memcpy_buf_to_pg t#dma_cookie_t dma_async_memcpy_buf_to_pg ( s#dma_chan * , s#page * , unsigned int , void * , t#size_t ) 
dma_async_memcpy_pg_to_pg t#dma_cookie_t dma_async_memcpy_pg_to_pg ( s#dma_chan * , s#page * , unsigned int , s#page * , unsigned int , t#size_t ) 
dma_async_tx_descriptor_init void dma_async_tx_descriptor_init ( s#dma_async_tx_descriptor * , s#dma_chan * ) 
dma_wait_for_async_tx e#dma_status dma_wait_for_async_tx ( s#dma_async_tx_descriptor * ) 
dma_run_dependencies void dma_run_dependencies ( s#dma_async_tx_descriptor * ) 

/* drivers/edac/amd64_edac.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
e#scrub_type enum scrub_type { SCRUB_UNKNOWN = 0 , SCRUB_NONE , SCRUB_SW_PROG , SCRUB_SW_SRC , SCRUB_SW_PROG_SRC , SCRUB_SW_TUNABLE , SCRUB_HW_PROG , SCRUB_HW_SRC , SCRUB_HW_PROG_SRC , SCRUB_HW_TUNABLE } 
e#dev_type enum dev_type { DEV_UNKNOWN = 0 , DEV_X1 , DEV_X2 , DEV_X4 , DEV_X8 , DEV_X16 , DEV_X32 , DEV_X64 } 
e#mem_type enum mem_type { MEM_EMPTY = 0 , MEM_RESERVED , MEM_UNKNOWN , MEM_FPM , MEM_EDO , MEM_BEDO , MEM_SDR , MEM_RDR , MEM_DDR , MEM_RDDR , MEM_RMBS , MEM_DDR2 , MEM_FB_DDR2 , MEM_RDDR2 , MEM_XDR , MEM_DDR3 , MEM_RDDR3 , } 
e#edac_type enum edac_type { EDAC_UNKNOWN = 0 , EDAC_NONE , EDAC_RESERVED , EDAC_PARITY , EDAC_EC , EDAC_SECDED , EDAC_S2ECD2ED , EDAC_S4ECD4ED , EDAC_S8ECD8ED , EDAC_S16ECD16ED , } 
s#channel_info struct channel_info { int chan_idx ; t#u32 ce_count ; char label [ 31 + 1 ] ; s#csrow_info * csrow ; } 
s#csrow_info struct csrow_info { unsigned long first_page ; unsigned long last_page ; unsigned long page_mask ; t#u32 nr_pages ; t#u32 grain ; int csrow_idx ; e#dev_type dtype ; t#u32 ue_count ; t#u32 ce_count ; e#mem_type mtype ; e#edac_type edac_mode ; s#mem_ctl_info * mci ; s#kobject kobj ; t#u32 nr_channels ; s#channel_info * channels ; } 
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s#mcidev_sysfs_attribute struct mcidev_sysfs_attribute { s#attribute attr ; t#ssize_t ( * show ) ( s#mem_ctl_info * , char * ) ; t#ssize_t ( * store ) ( s#mem_ctl_info * , const char * , t#size_t ) ; } 
s#mem_ctl_info struct mem_ctl_info { s#list_head link ; s#module * owner ; unsigned long mtype_cap ; unsigned long edac_ctl_cap ; unsigned long edac_cap ; unsigned long scrub_cap ; e#scrub_type scrub_mode ; int ( * set_sdram_scrub_rate ) ( s#mem_ctl_info * , t#u32 * ) ; int ( * get_sdram_scrub_rate ) ( s#mem_ctl_info * , t#u32 * ) ; void ( * edac_check ) ( s#mem_ctl_info * ) ; unsigned long ( * ctl_page_to_phys ) ( s#mem_ctl_info * , unsigned long ) ; int mc_idx ; int nr_csrows ; s#csrow_info * csrows ; s#device * dev ; const char * mod_name ; const char * mod_ver ; const char * ctl_name ; const char * dev_name ; char proc_name [ 7 + 1 ] ; void * pvt_info ; t#u32 ue_noinfo_count ; t#u32 ce_noinfo_count ; t#u32 ue_count ; t#u32 ce_count ; unsigned long start_time ; s#rcu_head rcu ; s#completion complete ; s#kobject edac_mci_kobj ; s#mcidev_sysfs_attribute * mc_driver_sysfs_attributes ; s#delayed_work work ; int op_state ; } 
amd64_get_dram_hole_info int amd64_get_dram_hole_info ( s#mem_ctl_info * , t#u64 * , t#u64 * , t#u64 * ) 

/* drivers/edac/edac_device.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#edac_dev_sysfs_attribute struct edac_dev_sysfs_attribute { s#attribute attr ; t#ssize_t ( * show ) ( s#edac_device_ctl_info * , char * ) ; t#ssize_t ( * store ) ( s#edac_device_ctl_info * , const char * , t#size_t ) ; } 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s#edac_device_counter struct edac_device_counter { t#u32 ue_count ; t#u32 ce_count ; } 
s#edac_dev_sysfs_block_attribute struct edac_dev_sysfs_block_attribute { s#attribute attr ; t#ssize_t ( * show ) ( s#kobject * , s#attribute * , char * ) ; t#ssize_t ( * store ) ( s#kobject * , s#attribute * , const char * , t#size_t ) ; s#edac_device_block * block ; unsigned int value ; } 
s#edac_device_block struct edac_device_block { s#edac_device_instance * instance ; char name [ 31 + 1 ] ; s#edac_device_counter counters ; int nr_attribs ; s#edac_dev_sysfs_block_attribute * block_attributes ; s#kobject kobj ; } 
s#edac_device_instance struct edac_device_instance { s#edac_device_ctl_info * ctl ; char name [ 31 + 4 ] ; s#edac_device_counter counters ; t#u32 nr_blocks ; s#edac_device_block * blocks ; s#kobject kobj ; } 
s#edac_device_ctl_info struct edac_device_ctl_info { s#list_head link ; s#module * owner ; int dev_idx ; int log_ue ; int log_ce ; int panic_on_ue ; unsigned poll_msec ; unsigned long delay ; s#edac_dev_sysfs_attribute * sysfs_attributes ; s#sysdev_class * edac_class ; int op_state ; s#delayed_work work ; void ( * edac_check ) ( s#edac_device_ctl_info * ) ; s#device * dev ; const char * mod_name ; const char * ctl_name ; const char * dev_name ; void * pvt_info ; unsigned long start_time ; s#rcu_head rcu ; s#completion removal_complete ; char name [ 31 + 1 ] ; t#u32 nr_instances ; s#edac_device_instance * instances ; s#edac_device_counter counters ; s#kobject kobj ; } 
edac_device_alloc_ctl_info extern s#edac_device_ctl_info * edac_device_alloc_ctl_info ( unsigned , char * , unsigned , char * , unsigned , unsigned , s#edac_dev_sysfs_block_attribute * , unsigned , int ) 
edac_device_free_ctl_info extern void edac_device_free_ctl_info ( s#edac_device_ctl_info * ) 
edac_device_alloc_index extern int edac_device_alloc_index ( void ) 
edac_device_add_device extern int edac_device_add_device ( s#edac_device_ctl_info * ) 
edac_device_del_device extern s#edac_device_ctl_info * edac_device_del_device ( s#device * ) 
edac_device_handle_ce extern void edac_device_handle_ce ( s#edac_device_ctl_info * , int , int , const char * ) 
edac_device_handle_ue extern void edac_device_handle_ue ( s#edac_device_ctl_info * , int , int , const char * ) 

/* drivers/edac/edac_mc.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
edac_mc_alloc extern s#mem_ctl_info * edac_mc_alloc ( unsigned , unsigned , unsigned , int ) 
edac_mc_free extern void edac_mc_free ( s#mem_ctl_info * ) 
edac_mc_find extern s#mem_ctl_info * edac_mc_find ( int ) 
edac_mc_add_mc extern int edac_mc_add_mc ( s#mem_ctl_info * ) 
edac_mc_del_mc extern s#mem_ctl_info * edac_mc_del_mc ( s#device * ) 
edac_mc_find_csrow_by_page extern int edac_mc_find_csrow_by_page ( s#mem_ctl_info * , unsigned long ) 
edac_mc_handle_ce extern void edac_mc_handle_ce ( s#mem_ctl_info * , unsigned long , unsigned long , unsigned long , int , int , const char * ) 
edac_mc_handle_ce_no_info extern void edac_mc_handle_ce_no_info ( s#mem_ctl_info * , const char * ) 
edac_mc_handle_ue extern void edac_mc_handle_ue ( s#mem_ctl_info * , unsigned long , unsigned long , int , const char * ) 
edac_mc_handle_ue_no_info extern void edac_mc_handle_ue_no_info ( s#mem_ctl_info * , const char * ) 
edac_mc_handle_fbd_ue extern void edac_mc_handle_fbd_ue ( s#mem_ctl_info * , unsigned int , unsigned int , unsigned int , char * ) 
edac_mc_handle_fbd_ce extern void edac_mc_handle_fbd_ce ( s#mem_ctl_info * , unsigned int , unsigned int , char * ) 

/* drivers/edac/edac_mce_amd.o */
amd_report_gart_errors void amd_report_gart_errors ( t#bool ) 
s#err_regs struct err_regs { t#u32 nbcfg ; t#u32 nbsh ; t#u32 nbsl ; t#u32 nbeah ; t#u32 nbeal ; } 
amd_register_ecc_decoder void amd_register_ecc_decoder ( void ( * ) ( int , s#err_regs * ) ) 
amd_unregister_ecc_decoder void amd_unregister_ecc_decoder ( void ( * ) ( int , s#err_regs * ) ) 
tt_msgs extern const char * tt_msgs [ ] 
ll_msgs extern const char * ll_msgs [ ] 
rrrr_msgs extern const char * rrrr_msgs [ ] 
pp_msgs extern const char * pp_msgs [ ] 
to_msgs extern const char * to_msgs [ ] 
ii_msgs extern const char * ii_msgs [ ] 
ext_msgs extern const char * ext_msgs [ ] 
amd_decode_nb_mce void amd_decode_nb_mce ( int , s#err_regs * , int ) 

/* drivers/edac/edac_pci.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s#edac_pci_counter struct edac_pci_counter { t#atomic_t pe_count ; t#atomic_t npe_count ; } 
s#edac_pci_ctl_info struct edac_pci_ctl_info { s#list_head link ; int pci_idx ; s#sysdev_class * edac_class ; int op_state ; s#delayed_work work ; void ( * edac_check ) ( s#edac_pci_ctl_info * ) ; s#device * dev ; const char * mod_name ; const char * ctl_name ; const char * dev_name ; void * pvt_info ; unsigned long start_time ; s#rcu_head rcu ; s#completion complete ; char name [ 31 + 1 ] ; s#edac_pci_counter counters ; s#kobject kobj ; s#completion kobj_complete ; } 
edac_pci_alloc_ctl_info extern s#edac_pci_ctl_info * edac_pci_alloc_ctl_info ( unsigned int , const char * ) 
edac_pci_free_ctl_info extern void edac_pci_free_ctl_info ( s#edac_pci_ctl_info * ) 
edac_pci_reset_delay_period extern void edac_pci_reset_delay_period ( s#edac_pci_ctl_info * , unsigned long ) 
edac_pci_alloc_index extern int edac_pci_alloc_index ( void ) 
edac_pci_add_device extern int edac_pci_add_device ( s#edac_pci_ctl_info * , int ) 
edac_pci_del_device extern s#edac_pci_ctl_info * edac_pci_del_device ( s#device * ) 
edac_pci_create_generic_ctl extern s#edac_pci_ctl_info * edac_pci_create_generic_ctl ( s#device * , const char * ) 
edac_pci_release_generic_ctl extern void edac_pci_release_generic_ctl ( s#edac_pci_ctl_info * ) 

/* drivers/edac/edac_pci_sysfs.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##tvec_base
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
edac_pci_handle_pe extern void edac_pci_handle_pe ( s#edac_pci_ctl_info * , const char * ) 
edac_pci_handle_npe extern void edac_pci_handle_npe ( s#edac_pci_ctl_info * , const char * ) 

/* drivers/edac/edac_stub.o */
edac_op_state extern int edac_op_state 
edac_handlers extern t#atomic_t edac_handlers 
edac_err_assert extern int edac_err_assert 
edac_handler_set extern int edac_handler_set ( void ) 
edac_atomic_assert_error extern void edac_atomic_assert_error ( void ) 

/* drivers/firmware/dcdbas.o */
s#smi_cmd struct smi_cmd { t#__u32 magic ; t#__u32 ebx ; t#__u32 ecx ; t#__u16 command_address ; t#__u8 command_code ; t#__u8 reserved ; t#__u8 command_buffer [ 1 ] ; } 
dcdbas_smi_request int dcdbas_smi_request ( s#smi_cmd * ) 

/* drivers/firmware/dmi_scan.o */
s#dmi_strmatch struct dmi_strmatch { unsigned char slot ; char substr [ 79 ] ; } 
s#dmi_system_id struct dmi_system_id { int ( * callback ) ( const s#dmi_system_id * ) ; const char * ident ; s#dmi_strmatch matches [ 4 ] ; void * driver_data ; } 
dmi_check_system extern int dmi_check_system ( const s#dmi_system_id * ) 
dmi_first_match const s#dmi_system_id * dmi_first_match ( const s#dmi_system_id * ) 
dmi_get_system_info extern const char * dmi_get_system_info ( int ) 
dmi_name_in_vendors extern int dmi_name_in_vendors ( const char * ) 
s#dmi_device struct dmi_device { s#list_head list ; int type ; const char * name ; void * device_data ; } 
dmi_find_device extern const s#dmi_device * dmi_find_device ( int , const char * , const s#dmi_device * ) 
dmi_get_date extern t#bool dmi_get_date ( int , int * , int * , int * ) 
s#dmi_header struct dmi_header { t#u8 type ; t#u8 length ; t#u16 handle ; } 
dmi_walk extern int dmi_walk ( void ( * ) ( const s#dmi_header * , void * ) , void * ) 
e#dmi_field enum dmi_field { DMI_NONE , DMI_BIOS_VENDOR , DMI_BIOS_VERSION , DMI_BIOS_DATE , DMI_SYS_VENDOR , DMI_PRODUCT_NAME , DMI_PRODUCT_VERSION , DMI_PRODUCT_SERIAL , DMI_PRODUCT_UUID , DMI_BOARD_VENDOR , DMI_BOARD_NAME , DMI_BOARD_VERSION , DMI_BOARD_SERIAL , DMI_BOARD_ASSET_TAG , DMI_CHASSIS_VENDOR , DMI_CHASSIS_TYPE , DMI_CHASSIS_VERSION , DMI_CHASSIS_SERIAL , DMI_CHASSIS_ASSET_TAG , DMI_STRING_MAX , } 
dmi_match extern t#bool dmi_match ( e#dmi_field , const char * ) 

/* drivers/firmware/iscsi_ibft_find.o */
s##ibft_table_header
ibft_addr s#ibft_table_header * ibft_addr 

/* drivers/gpio/gpiolib.o */
gpio_export extern int gpio_export ( unsigned , t#bool ) 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
gpio_export_link extern int gpio_export_link ( s#device * , const char * , unsigned ) 
gpio_unexport extern void gpio_unexport ( unsigned ) 
s##map_segment
s##compat_timespec
s##pollfd
s#gpio_chip struct gpio_chip { const char * label ; s#device * dev ; s#module * owner ; int ( * request ) ( s#gpio_chip * , unsigned ) ; void ( * free ) ( s#gpio_chip * , unsigned ) ; int ( * direction_input ) ( s#gpio_chip * , unsigned ) ; int ( * get ) ( s#gpio_chip * , unsigned ) ; int ( * direction_output ) ( s#gpio_chip * , unsigned , int ) ; void ( * set ) ( s#gpio_chip * , unsigned , int ) ; int ( * to_irq ) ( s#gpio_chip * , unsigned ) ; void ( * dbg_show ) ( s#seq_file * , s#gpio_chip * ) ; int base ; t#u16 ngpio ; char * * names ; unsigned can_sleep : 1 ; unsigned exported : 1 ; } 
gpiochip_add extern int gpiochip_add ( s#gpio_chip * ) 
gpiochip_remove extern int __attribute__ ( ( warn_unused_result ) ) gpiochip_remove ( s#gpio_chip * ) 
gpio_request extern int gpio_request ( unsigned , const char * ) 
gpio_free extern void gpio_free ( unsigned ) 
gpiochip_is_requested extern const char * gpiochip_is_requested ( s#gpio_chip * , unsigned ) 
gpio_direction_input extern int gpio_direction_input ( unsigned ) 
gpio_direction_output extern int gpio_direction_output ( unsigned , int ) 
__gpio_get_value extern int __gpio_get_value ( unsigned ) 
__gpio_set_value extern void __gpio_set_value ( unsigned , int ) 
__gpio_cansleep extern int __gpio_cansleep ( unsigned ) 
__gpio_to_irq extern int __gpio_to_irq ( unsigned ) 
gpio_get_value_cansleep extern int gpio_get_value_cansleep ( unsigned ) 
gpio_set_value_cansleep extern void gpio_set_value_cansleep ( unsigned , int ) 

/* drivers/gpu/drm/ati_pcigart.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
e#drm_stat_type enum drm_stat_type { _DRM_STAT_LOCK , _DRM_STAT_OPENS , _DRM_STAT_CLOSES , _DRM_STAT_IOCTLS , _DRM_STAT_LOCKS , _DRM_STAT_UNLOCKS , _DRM_STAT_VALUE , _DRM_STAT_BYTE , _DRM_STAT_COUNT , _DRM_STAT_IRQ , _DRM_STAT_PRIMARY , _DRM_STAT_SECONDARY , _DRM_STAT_DMA , _DRM_STAT_SPECIAL , _DRM_STAT_MISSED } 
s#drm_open_hash struct drm_open_hash { unsigned int size ; unsigned int order ; unsigned int fill ; s#hlist_head * table ; int use_vmalloc ; } 
s#idr_layer struct idr_layer { unsigned long bitmap ; s#idr_layer * ary [ 1 << 6 ] ; int count ; int layer ; s#rcu_head rcu_head ; } 
s#idr struct idr { s#idr_layer * top ; s#idr_layer * id_free ; int layers ; int id_free_cnt ; t#spinlock_t lock ; } 
e#drm_ctx_flags enum drm_ctx_flags { _DRM_CONTEXT_PRESERVED = 0x01 , _DRM_CONTEXT_2DONLY = 0x02 } 
t#drm_magic_t typedef unsigned int drm_magic_t 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s#drm_info_list struct drm_info_list { const char * name ; int ( * show ) ( s#seq_file * , void * ) ; t#u32 driver_features ; void * data ; } 
s#drm_info_node struct drm_info_node { s#list_head list ; s#drm_minor * minor ; s#drm_info_list * info_ent ; s#dentry * dent ; } 
s#drm_hw_lock struct drm_hw_lock { __volatile__ unsigned int lock ; char padding [ 60 ] ; } 
s#drm_lock_data struct drm_lock_data { s#drm_hw_lock * hw_lock ; s#drm_file * file_priv ; t#wait_queue_head_t lock_queue ; unsigned long lock_time ; t#spinlock_t spinlock ; t#uint32_t kernel_waiters ; t#uint32_t user_waiters ; int idle_has_lock ; } 
s#drm_master struct drm_master { s#kref refcount ; s#list_head head ; s#drm_minor * minor ; char * unique ; int unique_len ; int unique_size ; int blocked ; s#drm_open_hash magiclist ; s#list_head magicfree ; s#drm_lock_data lock ; void * driver_priv ; } 
s#drm_mode_group struct drm_mode_group { t#uint32_t num_crtcs ; t#uint32_t num_encoders ; t#uint32_t num_connectors ; t#uint32_t * id_list ; } 
s#drm_minor struct drm_minor { int index ; int type ; t#dev_t device ; s#device kdev ; s#drm_device * dev ; s#proc_dir_entry * proc_root ; s#drm_info_node proc_nodes ; s#dentry * debugfs_root ; s#drm_info_node debugfs_nodes ; s#drm_master * master ; s#list_head master_list ; s#drm_mode_group mode_group ; } 
s#drm_file struct drm_file { int authenticated ; t#pid_t pid ; t#uid_t uid ; t#drm_magic_t magic ; unsigned long ioctl_count ; s#list_head lhead ; s#drm_minor * minor ; unsigned long lock_count ; s#idr object_idr ; t#spinlock_t table_lock ; s#file * filp ; void * driver_priv ; int is_master ; s#drm_master * master ; s#list_head fbs ; } 
s#drm_buf struct drm_buf { int idx ; int total ; int order ; int used ; unsigned long offset ; void * address ; unsigned long bus_address ; s#drm_buf * next ; __volatile__ int waiting ; __volatile__ int pending ; t#wait_queue_head_t dma_wait ; s#drm_file * file_priv ; int context ; int while_locked ; enum { DRM_LIST_NONE = 0 , DRM_LIST_FREE = 1 , DRM_LIST_WAIT = 2 , DRM_LIST_PEND = 3 , DRM_LIST_PRIO = 4 , DRM_LIST_RECLAIM = 5 } list ; int dev_priv_size ; void * dev_private ; } 
s#drm_waitlist struct drm_waitlist { int count ; s#drm_buf * * bufs ; s#drm_buf * * rp ; s#drm_buf * * wp ; s#drm_buf * * end ; t#spinlock_t read_lock ; t#spinlock_t write_lock ; } 
s#drm_queue struct drm_queue { t#atomic_t use_count ; t#atomic_t finalization ; t#atomic_t block_count ; t#atomic_t block_read ; t#wait_queue_head_t read_queue ; t#atomic_t block_write ; t#wait_queue_head_t write_queue ; t#atomic_t total_queued ; t#atomic_t total_flushed ; t#atomic_t total_locks ; e#drm_ctx_flags flags ; s#drm_waitlist waitlist ; t#wait_queue_head_t flush_queue ; } 
s#drm_dma_handle struct drm_dma_handle { t#dma_addr_t busaddr ; void * vaddr ; t#size_t size ; } 
s#drm_freelist struct drm_freelist { int initialized ; t#atomic_t count ; s#drm_buf * next ; t#wait_queue_head_t waiting ; int low_mark ; int high_mark ; t#atomic_t wfh ; t#spinlock_t lock ; } 
s#drm_buf_entry struct drm_buf_entry { int buf_size ; int buf_count ; s#drm_buf * buflist ; int seg_count ; int page_order ; s#drm_dma_handle * * seglist ; s#drm_freelist freelist ; } 
s#drm_device_dma struct drm_device_dma { s#drm_buf_entry bufs [ 22 + 1 ] ; int buf_count ; s#drm_buf * * buflist ; int seg_count ; int page_count ; unsigned long * pagelist ; unsigned long byte_count ; enum { _DRM_DMA_USE_AGP = 0x01 , _DRM_DMA_USE_SG = 0x02 , _DRM_DMA_USE_FB = 0x04 , _DRM_DMA_USE_PCI_RO = 0x08 } flags ; } 
t#cycles_t typedef unsigned long long cycles_t 
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
s#drm_agp_head struct drm_agp_head { s#agp_kern_info agp_info ; s#list_head memory ; unsigned long mode ; s#agp_bridge_data * bridge ; int enabled ; int acquired ; unsigned long base ; int agp_mtrr ; int cant_use_aperture ; unsigned long page_mask ; } 
s#drm_sg_mem struct drm_sg_mem { unsigned long handle ; void * virtual ; int pages ; s#page * * pagelist ; t#dma_addr_t * busaddr ; } 
s#drm_sigdata struct drm_sigdata { int context ; s#drm_hw_lock * lock ; } 
e#drm_map_type enum drm_map_type { _DRM_FRAME_BUFFER = 0 , _DRM_REGISTERS = 1 , _DRM_SHM = 2 , _DRM_AGP = 3 , _DRM_SCATTER_GATHER = 4 , _DRM_CONSISTENT = 5 , _DRM_GEM = 6 , } 
e#drm_map_flags enum drm_map_flags { _DRM_RESTRICTED = 0x01 , _DRM_READ_ONLY = 0x02 , _DRM_LOCKED = 0x04 , _DRM_KERNEL = 0x08 , _DRM_WRITE_COMBINING = 0x10 , _DRM_CONTAINS_LOCK = 0x20 , _DRM_REMOVABLE = 0x40 , _DRM_DRIVER = 0x80 } 
s#drm_local_map struct drm_local_map { t#resource_size_t offset ; unsigned long size ; e#drm_map_type type ; e#drm_map_flags flags ; void * handle ; int mtrr ; } 
s#drm_set_version struct drm_set_version { int drm_di_major ; int drm_di_minor ; int drm_dd_major ; int drm_dd_minor ; } 
s#drm_hash_item struct drm_hash_item { s#hlist_node head ; unsigned long key ; } 
t#uint64_t typedef t#__u64 uint64_t 
s#drm_mm struct drm_mm { s#list_head fl_entry ; s#list_head ml_entry ; s#list_head unused_nodes ; int num_unused ; t#spinlock_t unused_lock ; } 
s#drm_mm_node struct drm_mm_node { s#list_head fl_entry ; s#list_head ml_entry ; int free ; unsigned long start ; unsigned long size ; s#drm_mm * mm ; void * private ; } 
s#drm_map_list struct drm_map_list { s#list_head head ; s#drm_hash_item hash ; s#drm_local_map * map ; t#uint64_t user_token ; s#drm_master * master ; s#drm_mm_node * file_offset_node ; } 
s#drm_gem_object struct drm_gem_object { s#kref refcount ; s#kref handlecount ; s#drm_device * dev ; s#file * filp ; s#drm_map_list map_list ; t#size_t size ; int name ; t#uint32_t read_domains ; t#uint32_t write_domain ; t#uint32_t pending_read_domains ; t#uint32_t pending_write_domain ; void * driver_private ; } 
t#drm_ioctl_t typedef int drm_ioctl_t ( s#drm_device * , void * , s#drm_file * ) 
s#drm_ioctl_desc struct drm_ioctl_desc { unsigned int cmd ; int flags ; t#drm_ioctl_t * func ; } 
s#drm_driver struct drm_driver { int ( * load ) ( s#drm_device * , unsigned long ) ; int ( * firstopen ) ( s#drm_device * ) ; int ( * open ) ( s#drm_device * , s#drm_file * ) ; void ( * preclose ) ( s#drm_device * , s#drm_file * ) ; void ( * postclose ) ( s#drm_device * , s#drm_file * ) ; void ( * lastclose ) ( s#drm_device * ) ; int ( * unload ) ( s#drm_device * ) ; int ( * suspend ) ( s#drm_device * , t#pm_message_t ) ; int ( * resume ) ( s#drm_device * ) ; int ( * dma_ioctl ) ( s#drm_device * , void * , s#drm_file * ) ; void ( * dma_ready ) ( s#drm_device * ) ; int ( * dma_quiescent ) ( s#drm_device * ) ; int ( * context_ctor ) ( s#drm_device * , int ) ; int ( * context_dtor ) ( s#drm_device * , int ) ; int ( * kernel_context_switch ) ( s#drm_device * , int , int ) ; void ( * kernel_context_switch_unlock ) ( s#drm_device * ) ; t#u32 ( * get_vblank_counter ) ( s#drm_device * , int ) ; int ( * enable_vblank ) ( s#drm_device * , int ) ; void ( * disable_vblank ) ( s#drm_device * , int ) ; int ( * device_is_agp ) ( s#drm_device * ) ; t#irqreturn_t ( * irq_handler ) ( int , void * ) ; void ( * irq_preinstall ) ( s#drm_device * ) ; int ( * irq_postinstall ) ( s#drm_device * ) ; void ( * irq_uninstall ) ( s#drm_device * ) ; void ( * reclaim_buffers ) ( s#drm_device * , s#drm_file * ) ; void ( * reclaim_buffers_locked ) ( s#drm_device * , s#drm_file * ) ; void ( * reclaim_buffers_idlelocked ) ( s#drm_device * , s#drm_file * ) ; t#resource_size_t ( * get_map_ofs ) ( s#drm_local_map * ) ; t#resource_size_t ( * get_reg_ofs ) ( s#drm_device * ) ; void ( * set_version ) ( s#drm_device * , s#drm_set_version * ) ; int ( * master_create ) ( s#drm_device * , s#drm_master * ) ; void ( * master_destroy ) ( s#drm_device * , s#drm_master * ) ; int ( * proc_init ) ( s#drm_minor * ) ; void ( * proc_cleanup ) ( s#drm_minor * ) ; int ( * debugfs_init ) ( s#drm_minor * ) ; void ( * debugfs_cleanup ) ( s#drm_minor * ) ; int ( * gem_init_object ) ( s#drm_gem_object * ) ; void ( * gem_free_object ) ( s#drm_gem_object * ) ; void ( * vgaarb_irq ) ( s#drm_device * , t#bool ) ; s#vm_operations_struct * gem_vm_ops ; int major ; int minor ; int patchlevel ; char * name ; char * desc ; char * date ; t#u32 driver_features ; int dev_priv_size ; s#drm_ioctl_desc * ioctls ; int num_ioctls ; s#file_operations fops ; s#pci_driver pci_driver ; s#list_head device_list ; } 
s#drm_mode_object struct drm_mode_object { t#uint32_t id ; t#uint32_t type ; } 
s#drm_framebuffer_funcs struct drm_framebuffer_funcs { void ( * destroy ) ( s#drm_framebuffer * ) ; int ( * create_handle ) ( s#drm_framebuffer * , s#drm_file * , unsigned int * ) ; } 
s#drm_framebuffer struct drm_framebuffer { s#drm_device * dev ; s#list_head head ; s#drm_mode_object base ; const s#drm_framebuffer_funcs * funcs ; unsigned int pitch ; unsigned int width ; unsigned int height ; unsigned int depth ; int bits_per_pixel ; int flags ; void * fbdev ; t#u32 pseudo_palette [ 17 ] ; s#list_head filp_head ; void * helper_private ; } 
s#drm_mode_fb_cmd struct drm_mode_fb_cmd { t#__u32 fb_id ; t#__u32 width , height ; t#__u32 pitch ; t#__u32 bpp ; t#__u32 depth ; t#__u32 handle ; } 
s#drm_mode_config_funcs struct drm_mode_config_funcs { s#drm_framebuffer * ( * fb_create ) ( s#drm_device * , s#drm_file * , s#drm_mode_fb_cmd * ) ; int ( * fb_changed ) ( s#drm_device * ) ; } 
s#drm_property struct drm_property { s#list_head head ; s#drm_mode_object base ; t#uint32_t flags ; char name [ 32 ] ; t#uint32_t num_values ; t#uint64_t * values ; s#list_head enum_blob_list ; } 
s#drm_mode_config struct drm_mode_config { s#mutex mutex ; s#mutex idr_mutex ; s#idr crtc_idr ; int num_fb ; s#list_head fb_list ; int num_connector ; s#list_head connector_list ; int num_encoder ; s#list_head encoder_list ; int num_crtc ; s#list_head crtc_list ; s#list_head property_list ; s#list_head fb_kernel_list ; int min_width , min_height ; int max_width , max_height ; s#drm_mode_config_funcs * funcs ; t#resource_size_t fb_base ; s#list_head property_blob_list ; s#drm_property * edid_property ; s#drm_property * dpms_property ; s#drm_property * dvi_i_subconnector_property ; s#drm_property * dvi_i_select_subconnector_property ; s#drm_property * tv_subconnector_property ; s#drm_property * tv_select_subconnector_property ; s#drm_property * tv_mode_property ; s#drm_property * tv_left_margin_property ; s#drm_property * tv_right_margin_property ; s#drm_property * tv_top_margin_property ; s#drm_property * tv_bottom_margin_property ; s#drm_property * tv_brightness_property ; s#drm_property * tv_contrast_property ; s#drm_property * tv_flicker_reduction_property ; s#drm_property * tv_overscan_property ; s#drm_property * tv_saturation_property ; s#drm_property * tv_hue_property ; s#drm_property * scaling_mode_property ; s#drm_property * dithering_mode_property ; } 
s#drm_device struct drm_device { s#list_head driver_item ; char * devname ; int if_version ; t#spinlock_t count_lock ; s#mutex struct_mutex ; int open_count ; t#atomic_t ioctl_count ; t#atomic_t vma_count ; int buf_use ; t#atomic_t buf_alloc ; unsigned long counters ; e#drm_stat_type types [ 15 ] ; t#atomic_t counts [ 15 ] ; s#list_head filelist ; s#list_head maplist ; int map_count ; s#drm_open_hash map_hash ; s#list_head ctxlist ; int ctx_count ; s#mutex ctxlist_mutex ; s#idr ctx_idr ; s#list_head vmalist ; int queue_count ; int queue_reserved ; int queue_slots ; s#drm_queue * * queuelist ; s#drm_device_dma * dma ; int irq_enabled ; __volatile__ long context_flag ; __volatile__ long interrupt_flag ; __volatile__ long dma_flag ; s#timer_list timer ; t#wait_queue_head_t context_wait ; int last_checked ; int last_context ; unsigned long last_switch ; s#work_struct work ; int vblank_disable_allowed ; t#wait_queue_head_t * vbl_queue ; t#atomic_t * _vblank_count ; t#spinlock_t vbl_lock ; t#atomic_t * vblank_refcount ; t#u32 * last_vblank ; int * vblank_enabled ; int * vblank_inmodeset ; t#u32 * last_vblank_wait ; s#timer_list vblank_disable_timer ; t#u32 max_vblank_count ; t#cycles_t ctx_start ; t#cycles_t lck_start ; s#fasync_struct * buf_async ; t#wait_queue_head_t buf_readers ; t#wait_queue_head_t buf_writers ; s#drm_agp_head * agp ; s#pci_dev * pdev ; int pci_vendor ; int pci_device ; s#drm_sg_mem * sg ; int num_crtcs ; void * dev_private ; void * mm_private ; s#address_space * dev_mapping ; s#drm_sigdata sigdata ; t#sigset_t sigmask ; s#drm_driver * driver ; s#drm_local_map * agp_buffer_map ; unsigned int agp_buffer_token ; s#drm_minor * control ; s#drm_minor * primary ; t#spinlock_t drw_lock ; s#idr drw_idr ; s#drm_mode_config mode_config ; t#spinlock_t object_name_lock ; s#idr object_name_idr ; t#atomic_t object_count ; t#atomic_t object_memory ; t#atomic_t pin_count ; t#atomic_t pin_memory ; t#atomic_t gtt_count ; t#atomic_t gtt_memory ; t#uint32_t gtt_total ; t#uint32_t invalidate_domains ; t#uint32_t flush_domains ; } 
s#drm_ati_pcigart_info struct drm_ati_pcigart_info { int gart_table_location ; int gart_reg_if ; void * addr ; t#dma_addr_t bus_addr ; t#dma_addr_t table_mask ; s#drm_dma_handle * table_handle ; s#drm_local_map mapping ; int table_size ; } 
drm_ati_pcigart_cleanup extern int drm_ati_pcigart_cleanup ( s#drm_device * , s#drm_ati_pcigart_info * ) 
drm_ati_pcigart_init extern int drm_ati_pcigart_init ( s#drm_device * , s#drm_ati_pcigart_info * ) 

/* drivers/gpu/drm/drm_agpsupport.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
s#drm_agp_info struct drm_agp_info { int agp_version_major ; int agp_version_minor ; unsigned long mode ; unsigned long aperture_base ; unsigned long aperture_size ; unsigned long memory_allowed ; unsigned long memory_used ; unsigned short id_vendor ; unsigned short id_device ; } 
drm_agp_info extern int drm_agp_info ( s#drm_device * , s#drm_agp_info * ) 
drm_agp_acquire extern int drm_agp_acquire ( s#drm_device * ) 
drm_agp_release extern int drm_agp_release ( s#drm_device * ) 
s#drm_agp_mode struct drm_agp_mode { unsigned long mode ; } 
drm_agp_enable extern int drm_agp_enable ( s#drm_device * , s#drm_agp_mode ) 
s#drm_agp_buffer struct drm_agp_buffer { unsigned long size ; unsigned long handle ; unsigned long type ; unsigned long physical ; } 
drm_agp_alloc extern int drm_agp_alloc ( s#drm_device * , s#drm_agp_buffer * ) 
s#drm_agp_binding struct drm_agp_binding { unsigned long handle ; unsigned long offset ; } 
drm_agp_unbind extern int drm_agp_unbind ( s#drm_device * , s#drm_agp_binding * ) 
drm_agp_bind extern int drm_agp_bind ( s#drm_device * , s#drm_agp_binding * ) 
drm_agp_free extern int drm_agp_free ( s#drm_device * , s#drm_agp_buffer * ) 
drm_agp_bind_pages extern s#agp_memory * drm_agp_bind_pages ( s#drm_device * , s#page * * , unsigned long , t#uint32_t , t#uint32_t ) 
drm_agp_chipset_flush extern void drm_agp_chipset_flush ( s#drm_device * ) 

/* drivers/gpu/drm/drm_bufs.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
drm_get_resource_start extern t#resource_size_t drm_get_resource_start ( s#drm_device * , unsigned int ) 
drm_get_resource_len extern t#resource_size_t drm_get_resource_len ( s#drm_device * , unsigned int ) 
drm_addmap extern int drm_addmap ( s#drm_device * , t#resource_size_t , unsigned int , e#drm_map_type , e#drm_map_flags , s#drm_local_map * * ) 
drm_rmmap_locked extern int drm_rmmap_locked ( s#drm_device * , s#drm_local_map * ) 
drm_rmmap extern int drm_rmmap ( s#drm_device * , s#drm_local_map * ) 
s#drm_buf_desc struct drm_buf_desc { int count ; int size ; int low_mark ; int high_mark ; enum { _DRM_PAGE_ALIGN = 0x01 , _DRM_AGP_BUFFER = 0x02 , _DRM_SG_BUFFER = 0x04 , _DRM_FB_BUFFER = 0x08 , _DRM_PCI_BUFFER_RO = 0x10 } flags ; unsigned long agp_start ; } 
drm_addbufs_agp extern int drm_addbufs_agp ( s#drm_device * , s#drm_buf_desc * ) 
drm_addbufs_pci extern int drm_addbufs_pci ( s#drm_device * , s#drm_buf_desc * ) 
drm_order extern int drm_order ( unsigned long ) 

/* drivers/gpu/drm/drm_cache.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
drm_clflush_pages void drm_clflush_pages ( s#page * [ ] , unsigned long ) 

/* drivers/gpu/drm/drm_crtc.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
e#drm_mode_status enum drm_mode_status { MODE_OK = 0 , MODE_HSYNC , MODE_VSYNC , MODE_H_ILLEGAL , MODE_V_ILLEGAL , MODE_BAD_WIDTH , MODE_NOMODE , MODE_NO_INTERLACE , MODE_NO_DBLESCAN , MODE_NO_VSCAN , MODE_MEM , MODE_VIRTUAL_X , MODE_VIRTUAL_Y , MODE_MEM_VIRT , MODE_NOCLOCK , MODE_CLOCK_HIGH , MODE_CLOCK_LOW , MODE_CLOCK_RANGE , MODE_BAD_HVALUE , MODE_BAD_VVALUE , MODE_BAD_VSCAN , MODE_HSYNC_NARROW , MODE_HSYNC_WIDE , MODE_HBLANK_NARROW , MODE_HBLANK_WIDE , MODE_VSYNC_NARROW , MODE_VSYNC_WIDE , MODE_VBLANK_NARROW , MODE_VBLANK_WIDE , MODE_PANEL , MODE_INTERLACE_WIDTH , MODE_ONE_WIDTH , MODE_ONE_HEIGHT , MODE_ONE_SIZE , MODE_NO_REDUCED , MODE_UNVERIFIED = - 3 , MODE_BAD = - 2 , MODE_ERROR = - 1 } 
s#drm_display_mode struct drm_display_mode { s#list_head head ; s#drm_mode_object base ; char name [ 32 ] ; int connector_count ; e#drm_mode_status status ; int type ; int clock ; int hdisplay ; int hsync_start ; int hsync_end ; int htotal ; int hskew ; int vdisplay ; int vsync_start ; int vsync_end ; int vtotal ; int vscan ; unsigned int flags ; int width_mm ; int height_mm ; int clock_index ; int synth_clock ; int crtc_hdisplay ; int crtc_hblank_start ; int crtc_hblank_end ; int crtc_hsync_start ; int crtc_hsync_end ; int crtc_htotal ; int crtc_hskew ; int crtc_vdisplay ; int crtc_vblank_start ; int crtc_vblank_end ; int crtc_vsync_start ; int crtc_vsync_end ; int crtc_vtotal ; int crtc_hadjusted ; int crtc_vadjusted ; int private_size ; int * private ; int private_flags ; int vrefresh ; float hsync ; } 
e#drm_connector_status enum drm_connector_status { connector_status_connected = 1 , connector_status_disconnected = 2 , connector_status_unknown = 3 , } 
e#subpixel_order enum subpixel_order { SubPixelUnknown = 0 , SubPixelHorizontalRGB , SubPixelHorizontalBGR , SubPixelVerticalRGB , SubPixelVerticalBGR , SubPixelNone , } 
s#drm_display_info struct drm_display_info { char name [ 32 ] ; t#bool serration_vsync ; t#bool sync_on_green ; t#bool composite_sync ; t#bool separate_syncs ; t#bool blank_to_black ; unsigned char video_level ; t#bool digital ; unsigned int width_mm ; unsigned int height_mm ; unsigned char gamma ; t#bool gtf_supported ; t#bool standard_color ; enum { monochrome = 0 , rgb , other , unknown , } display_type ; t#bool active_off_supported ; t#bool suspend_supported ; t#bool standby_supported ; unsigned short redx , redy ; unsigned short greenx , greeny ; unsigned short bluex , bluey ; unsigned short whitex , whitey ; unsigned int min_vfreq , max_vfreq ; unsigned int min_hfreq , max_hfreq ; unsigned int pixel_clock ; unsigned int wpx1 , wpy1 ; unsigned int wpgamma1 ; unsigned int wpx2 , wpy2 ; unsigned int wpgamma2 ; e#subpixel_order subpixel_order ; char * raw_edid ; } 
s#drm_connector_funcs struct drm_connector_funcs { void ( * dpms ) ( s#drm_connector * , int ) ; void ( * save ) ( s#drm_connector * ) ; void ( * restore ) ( s#drm_connector * ) ; e#drm_connector_status ( * detect ) ( s#drm_connector * ) ; int ( * fill_modes ) ( s#drm_connector * , t#uint32_t , t#uint32_t ) ; int ( * set_property ) ( s#drm_connector * , s#drm_property * , t#uint64_t ) ; void ( * destroy ) ( s#drm_connector * ) ; void ( * force ) ( s#drm_connector * ) ; } 
s#drm_property_blob struct drm_property_blob { s#drm_mode_object base ; s#list_head head ; unsigned int length ; void * data ; } 
e#drm_connector_force enum drm_connector_force { DRM_FORCE_UNSPECIFIED , DRM_FORCE_OFF , DRM_FORCE_ON , DRM_FORCE_ON_DIGITAL , } 
s#drm_connector struct drm_connector { s#drm_device * dev ; s#device kdev ; s#device_attribute * attr ; s#list_head head ; s#drm_mode_object base ; int connector_type ; int connector_type_id ; t#bool interlace_allowed ; t#bool doublescan_allowed ; s#list_head modes ; int initial_x , initial_y ; e#drm_connector_status status ; s#list_head probed_modes ; s#drm_display_info display_info ; const s#drm_connector_funcs * funcs ; s#list_head user_modes ; s#drm_property_blob * edid_blob_ptr ; t#u32 property_ids [ 16 ] ; t#uint64_t property_values [ 16 ] ; int dpms ; void * helper_private ; e#drm_connector_force force ; t#uint32_t encoder_ids [ 2 ] ; t#uint32_t force_encoder_id ; s#drm_encoder * encoder ; void * fb_helper_private ; } 
s#drm_mode_set struct drm_mode_set { s#list_head head ; s#drm_framebuffer * fb ; s#drm_crtc * crtc ; s#drm_display_mode * mode ; t#uint32_t x ; t#uint32_t y ; s#drm_connector * * connectors ; t#size_t num_connectors ; } 
s#drm_crtc_funcs struct drm_crtc_funcs { void ( * save ) ( s#drm_crtc * ) ; void ( * restore ) ( s#drm_crtc * ) ; int ( * cursor_set ) ( s#drm_crtc * , s#drm_file * , t#uint32_t , t#uint32_t , t#uint32_t ) ; int ( * cursor_move ) ( s#drm_crtc * , int , int ) ; void ( * gamma_set ) ( s#drm_crtc * , t#u16 * , t#u16 * , t#u16 * , t#uint32_t ) ; void ( * destroy ) ( s#drm_crtc * ) ; int ( * set_config ) ( s#drm_mode_set * ) ; } 
t#uint16_t typedef t#__u16 uint16_t 
s#drm_crtc struct drm_crtc { s#drm_device * dev ; s#list_head head ; s#drm_mode_object base ; s#drm_framebuffer * fb ; t#bool enabled ; s#drm_display_mode mode ; int x , y ; s#drm_display_mode * desired_mode ; int desired_x , desired_y ; const s#drm_crtc_funcs * funcs ; t#uint32_t gamma_size ; t#uint16_t * gamma_store ; void * helper_private ; } 
s#drm_encoder_funcs struct drm_encoder_funcs { void ( * destroy ) ( s#drm_encoder * ) ; } 
s#drm_encoder struct drm_encoder { s#drm_device * dev ; s#list_head head ; s#drm_mode_object base ; int encoder_type ; t#uint32_t possible_crtcs ; t#uint32_t possible_clones ; s#drm_crtc * crtc ; const s#drm_encoder_funcs * funcs ; void * helper_private ; } 
drm_get_encoder_name extern char * drm_get_encoder_name ( s#drm_encoder * ) 
drm_get_connector_name extern char * drm_get_connector_name ( s#drm_connector * ) 
drm_mode_object_find extern void * drm_mode_object_find ( s#drm_device * , t#uint32_t , t#uint32_t ) 
drm_framebuffer_init extern int drm_framebuffer_init ( s#drm_device * , s#drm_framebuffer * , const s#drm_framebuffer_funcs * ) 
drm_framebuffer_cleanup extern void drm_framebuffer_cleanup ( s#drm_framebuffer * ) 
drm_crtc_init extern void drm_crtc_init ( s#drm_device * , s#drm_crtc * , const s#drm_crtc_funcs * ) 
drm_crtc_cleanup extern void drm_crtc_cleanup ( s#drm_crtc * ) 
drm_mode_probed_add extern void drm_mode_probed_add ( s#drm_connector * , s#drm_display_mode * ) 
drm_mode_remove extern void drm_mode_remove ( s#drm_connector * , s#drm_display_mode * ) 
drm_connector_init extern void drm_connector_init ( s#drm_device * , s#drm_connector * , const s#drm_connector_funcs * , int ) 
drm_connector_cleanup extern void drm_connector_cleanup ( s#drm_connector * ) 
drm_encoder_init extern void drm_encoder_init ( s#drm_device * , s#drm_encoder * , const s#drm_encoder_funcs * , int ) 
drm_encoder_cleanup extern void drm_encoder_cleanup ( s#drm_encoder * ) 
drm_mode_create extern s#drm_display_mode * drm_mode_create ( s#drm_device * ) 
drm_mode_destroy extern void drm_mode_destroy ( s#drm_device * , s#drm_display_mode * ) 
drm_mode_create_dvi_i_properties extern int drm_mode_create_dvi_i_properties ( s#drm_device * ) 
drm_mode_create_tv_properties extern int drm_mode_create_tv_properties ( s#drm_device * , int , char * [ ] ) 
drm_mode_create_scaling_mode_property extern int drm_mode_create_scaling_mode_property ( s#drm_device * ) 
drm_mode_create_dithering_property extern int drm_mode_create_dithering_property ( s#drm_device * ) 
drm_mode_config_init extern void drm_mode_config_init ( s#drm_device * ) 
drm_mode_config_cleanup extern void drm_mode_config_cleanup ( s#drm_device * ) 
drm_mode_attachmode_crtc extern int drm_mode_attachmode_crtc ( s#drm_device * , s#drm_crtc * , s#drm_display_mode * ) 
drm_mode_detachmode_crtc extern int drm_mode_detachmode_crtc ( s#drm_device * , s#drm_display_mode * ) 
drm_property_create extern s#drm_property * drm_property_create ( s#drm_device * , int , const char * , int ) 
drm_property_add_enum extern int drm_property_add_enum ( s#drm_property * , int , t#uint64_t , const char * ) 
drm_property_destroy extern void drm_property_destroy ( s#drm_device * , s#drm_property * ) 
drm_connector_attach_property extern int drm_connector_attach_property ( s#drm_connector * , s#drm_property * , t#uint64_t ) 
drm_connector_property_set_value extern int drm_connector_property_set_value ( s#drm_connector * , s#drm_property * , t#uint64_t ) 
drm_connector_property_get_value extern int drm_connector_property_get_value ( s#drm_connector * , s#drm_property * , t#uint64_t * ) 
s##edid
drm_mode_connector_update_edid_property extern int drm_mode_connector_update_edid_property ( s#drm_connector * , s#edid * ) 
drm_mode_connector_attach_encoder extern int drm_mode_connector_attach_encoder ( s#drm_connector * , s#drm_encoder * ) 
drm_mode_connector_detach_encoder extern void drm_mode_connector_detach_encoder ( s#drm_connector * , s#drm_encoder * ) 
drm_mode_crtc_set_gamma_size extern t#bool drm_mode_crtc_set_gamma_size ( s#drm_crtc * , int ) 

/* drivers/gpu/drm/drm_crtc_helper.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
drm_helper_probe_single_connector_modes extern int drm_helper_probe_single_connector_modes ( s#drm_connector * , t#uint32_t , t#uint32_t ) 
drm_helper_probe_connector_modes int drm_helper_probe_connector_modes ( s#drm_device * , t#uint32_t , t#uint32_t ) 
drm_helper_encoder_in_use extern t#bool drm_helper_encoder_in_use ( s#drm_encoder * ) 
drm_helper_crtc_in_use extern t#bool drm_helper_crtc_in_use ( s#drm_crtc * ) 
drm_helper_disable_unused_functions extern void drm_helper_disable_unused_functions ( s#drm_device * ) 
drm_crtc_helper_set_mode extern t#bool drm_crtc_helper_set_mode ( s#drm_crtc * , s#drm_display_mode * , int , int , s#drm_framebuffer * ) 
drm_crtc_helper_set_config extern int drm_crtc_helper_set_config ( s#drm_mode_set * ) 
drm_helper_initial_config extern t#bool drm_helper_initial_config ( s#drm_device * ) 
drm_helper_connector_dpms extern void drm_helper_connector_dpms ( s#drm_connector * , int ) 
drm_helper_hotplug_stage_two extern int drm_helper_hotplug_stage_two ( s#drm_device * ) 
drm_helper_mode_fill_fb_struct extern int drm_helper_mode_fill_fb_struct ( s#drm_framebuffer * , s#drm_mode_fb_cmd * ) 
drm_helper_resume_force_mode extern int drm_helper_resume_force_mode ( s#drm_device * ) 

/* drivers/gpu/drm/drm_debugfs.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
drm_debugfs_create_files extern int drm_debugfs_create_files ( s#drm_info_list * , int , s#dentry * , s#drm_minor * ) 
drm_debugfs_remove_files extern int drm_debugfs_remove_files ( s#drm_info_list * , int , s#drm_minor * ) 

/* drivers/gpu/drm/drm_dma.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
drm_core_reclaim_buffers extern void drm_core_reclaim_buffers ( s#drm_device * , s#drm_file * ) 

/* drivers/gpu/drm/drm_drawable.o */
s#drm_clip_rect struct drm_clip_rect { unsigned short x1 ; unsigned short y1 ; unsigned short x2 ; unsigned short y2 ; } 
s#drm_drawable_info struct drm_drawable_info { unsigned int num_rects ; s#drm_clip_rect * rects ; } 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
t#drm_drawable_t typedef unsigned int drm_drawable_t 
drm_get_drawable_info extern s#drm_drawable_info * drm_get_drawable_info ( s#drm_device * , t#drm_drawable_t ) 

/* drivers/gpu/drm/drm_drv.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
drm_init extern int drm_init ( s#drm_driver * ) 
drm_exit extern void drm_exit ( s#drm_driver * ) 
drm_ioctl extern int drm_ioctl ( s#inode * , s#file * , unsigned int , unsigned long ) 
drm_getsarea extern s#drm_local_map * drm_getsarea ( s#drm_device * ) 

/* drivers/gpu/drm/drm_edid.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#i2c_msg struct i2c_msg { t#__u16 addr ; t#__u16 flags ; t#__u16 len ; t#__u8 * buf ; } 
u#i2c_smbus_data union i2c_smbus_data { t#__u8 byte ; t#__u16 word ; t#__u8 block [ 32 + 2 ] ; } 
s#i2c_algorithm struct i2c_algorithm { int ( * master_xfer ) ( s#i2c_adapter * , s#i2c_msg * , int ) ; int ( * smbus_xfer ) ( s#i2c_adapter * , t#u16 , unsigned short , char , t#u8 , int , u#i2c_smbus_data * ) ; t#u32 ( * functionality ) ( s#i2c_adapter * ) ; } 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s#i2c_adapter struct i2c_adapter { s#module * owner ; unsigned int id ; unsigned int class ; const s#i2c_algorithm * algo ; void * algo_data ; t#u8 level ; s#mutex bus_lock ; int timeout ; int retries ; s#device dev ; int nr ; char name [ 48 ] ; s#completion dev_released ; } 
drm_do_probe_ddc_edid extern int drm_do_probe_ddc_edid ( s#i2c_adapter * , unsigned char * , int ) 
s#est_timings struct est_timings { t#u8 t1 ; t#u8 t2 ; t#u8 mfg_rsvd ; } 
s#std_timing struct std_timing { t#u8 hsize ; t#u8 vfreq_aspect ; } 
s#detailed_pixel_timing struct detailed_pixel_timing { t#u8 hactive_lo ; t#u8 hblank_lo ; t#u8 hactive_hblank_hi ; t#u8 vactive_lo ; t#u8 vblank_lo ; t#u8 vactive_vblank_hi ; t#u8 hsync_offset_lo ; t#u8 hsync_pulse_width_lo ; t#u8 vsync_offset_pulse_width_lo ; t#u8 hsync_vsync_offset_pulse_width_hi ; t#u8 width_mm_lo ; t#u8 height_mm_lo ; t#u8 width_height_mm_hi ; t#u8 hborder ; t#u8 vborder ; t#u8 misc ; } 
s#detailed_data_string struct detailed_data_string { t#u8 str [ 13 ] ; } 
s#detailed_data_monitor_range struct detailed_data_monitor_range { t#u8 min_vfreq ; t#u8 max_vfreq ; t#u8 min_hfreq_khz ; t#u8 max_hfreq_khz ; t#u8 pixel_clock_mhz ; t#__le16 sec_gtf_toggle ; t#u8 hfreq_start_khz ; t#u8 c ; t#__le16 m ; t#u8 k ; t#u8 j ; } 
s#detailed_data_wpindex struct detailed_data_wpindex { t#u8 white_yx_lo ; t#u8 white_x_hi ; t#u8 white_y_hi ; t#u8 gamma ; } 
s#detailed_non_pixel struct detailed_non_pixel { t#u8 pad1 ; t#u8 type ; t#u8 pad2 ; union { s#detailed_data_string str ; s#detailed_data_monitor_range range ; s#detailed_data_wpindex color ; s#std_timing timings [ 5 ] ; } data ; } 
s#detailed_timing struct detailed_timing { t#__le16 pixel_clock ; union { s#detailed_pixel_timing pixel_data ; s#detailed_non_pixel other_data ; } data ; } 
s#edid struct edid { t#u8 header [ 8 ] ; t#u8 mfg_id [ 2 ] ; t#u8 prod_code [ 2 ] ; t#u32 serial ; t#u8 mfg_week ; t#u8 mfg_year ; t#u8 version ; t#u8 revision ; t#u8 input ; t#u8 width_cm ; t#u8 height_cm ; t#u8 gamma ; t#u8 features ; t#u8 red_green_lo ; t#u8 black_white_lo ; t#u8 red_x ; t#u8 red_y ; t#u8 green_x ; t#u8 green_y ; t#u8 blue_x ; t#u8 blue_y ; t#u8 white_x ; t#u8 white_y ; s#est_timings established_timings ; s#std_timing standard_timings [ 8 ] ; s#detailed_timing detailed_timings [ 4 ] ; t#u8 extensions ; t#u8 checksum ; } 
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
drm_get_edid extern s#edid * drm_get_edid ( s#drm_connector * , s#i2c_adapter * ) 
drm_detect_hdmi_monitor extern t#bool drm_detect_hdmi_monitor ( s#edid * ) 
drm_add_edid_modes extern int drm_add_edid_modes ( s#drm_connector * , s#edid * ) 
drm_add_modes_noedid extern int drm_add_modes_noedid ( s#drm_connector * , int , int ) 

/* drivers/gpu/drm/drm_encoder_slave.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
s#drm_encoder_slave_funcs struct drm_encoder_slave_funcs { void ( * set_config ) ( s#drm_encoder * , void * ) ; void ( * destroy ) ( s#drm_encoder * ) ; void ( * dpms ) ( s#drm_encoder * , int ) ; void ( * save ) ( s#drm_encoder * ) ; void ( * restore ) ( s#drm_encoder * ) ; t#bool ( * mode_fixup ) ( s#drm_encoder * , s#drm_display_mode * , s#drm_display_mode * ) ; int ( * mode_valid ) ( s#drm_encoder * , s#drm_display_mode * ) ; void ( * mode_set ) ( s#drm_encoder * , s#drm_display_mode * , s#drm_display_mode * ) ; e#drm_connector_status ( * detect ) ( s#drm_encoder * , s#drm_connector * ) ; int ( * get_modes ) ( s#drm_encoder * , s#drm_connector * ) ; int ( * create_resources ) ( s#drm_encoder * , s#drm_connector * ) ; int ( * set_property ) ( s#drm_encoder * , s#drm_connector * , s#drm_property * , t#uint64_t ) ; } 
s#drm_encoder_slave struct drm_encoder_slave { s#drm_encoder base ; s#drm_encoder_slave_funcs * slave_funcs ; void * slave_priv ; void * bus_priv ; } 
s#i2c_board_info struct i2c_board_info { char type [ 20 ] ; unsigned short flags ; unsigned short addr ; void * platform_data ; s#dev_archdata * archdata ; int irq ; } 
drm_i2c_encoder_init int drm_i2c_encoder_init ( s#drm_device * , s#drm_encoder_slave * , s#i2c_adapter * , const s#i2c_board_info * ) 
drm_i2c_encoder_destroy void drm_i2c_encoder_destroy ( s#drm_encoder * ) 

/* drivers/gpu/drm/drm_fb_helper.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
drm_fb_helper_add_connector int drm_fb_helper_add_connector ( s#drm_connector * ) 
drm_fb_helper_panic int drm_fb_helper_panic ( s#notifier_block * , unsigned long , void * ) 
drm_fb_helper_restore void drm_fb_helper_restore ( void ) 
s#fb_bitfield struct fb_bitfield { t#__u32 offset ; t#__u32 length ; t#__u32 msb_right ; } 
s#fb_var_screeninfo struct fb_var_screeninfo { t#__u32 xres ; t#__u32 yres ; t#__u32 xres_virtual ; t#__u32 yres_virtual ; t#__u32 xoffset ; t#__u32 yoffset ; t#__u32 bits_per_pixel ; t#__u32 grayscale ; s#fb_bitfield red ; s#fb_bitfield green ; s#fb_bitfield blue ; s#fb_bitfield transp ; t#__u32 nonstd ; t#__u32 activate ; t#__u32 height ; t#__u32 width ; t#__u32 accel_flags ; t#__u32 pixclock ; t#__u32 left_margin ; t#__u32 right_margin ; t#__u32 upper_margin ; t#__u32 lower_margin ; t#__u32 hsync_len ; t#__u32 vsync_len ; t#__u32 sync ; t#__u32 vmode ; t#__u32 rotate ; t#__u32 reserved [ 5 ] ; } 
s#fb_fix_screeninfo struct fb_fix_screeninfo { char id [ 16 ] ; unsigned long smem_start ; t#__u32 smem_len ; t#__u32 type ; t#__u32 type_aux ; t#__u32 visual ; t#__u16 xpanstep ; t#__u16 ypanstep ; t#__u16 ywrapstep ; t#__u32 line_length ; unsigned long mmio_start ; t#__u32 mmio_len ; t#__u32 accel ; t#__u16 reserved [ 3 ] ; } 
s#fb_chroma struct fb_chroma { t#__u32 redx ; t#__u32 greenx ; t#__u32 bluex ; t#__u32 whitex ; t#__u32 redy ; t#__u32 greeny ; t#__u32 bluey ; t#__u32 whitey ; } 
s#fb_videomode struct fb_videomode { const char * name ; t#u32 refresh ; t#u32 xres ; t#u32 yres ; t#u32 pixclock ; t#u32 left_margin ; t#u32 right_margin ; t#u32 upper_margin ; t#u32 lower_margin ; t#u32 hsync_len ; t#u32 vsync_len ; t#u32 sync ; t#u32 vmode ; t#u32 flag ; } 
s#fb_monspecs struct fb_monspecs { s#fb_chroma chroma ; s#fb_videomode * modedb ; t#__u8 manufacturer [ 4 ] ; t#__u8 monitor [ 14 ] ; t#__u8 serial_no [ 14 ] ; t#__u8 ascii [ 14 ] ; t#__u32 modedb_len ; t#__u32 model ; t#__u32 serial ; t#__u32 year ; t#__u32 week ; t#__u32 hfmin ; t#__u32 hfmax ; t#__u32 dclkmin ; t#__u32 dclkmax ; t#__u16 input ; t#__u16 dpms ; t#__u16 signal ; t#__u16 vfmin ; t#__u16 vfmax ; t#__u16 gamma ; t#__u16 gtf : 1 ; t#__u16 misc ; t#__u8 version ; t#__u8 revision ; t#__u8 max_x ; t#__u8 max_y ; } 
s#fb_pixmap struct fb_pixmap { t#u8 * addr ; t#u32 size ; t#u32 offset ; t#u32 buf_align ; t#u32 scan_align ; t#u32 access_align ; t#u32 flags ; t#u32 blit_x ; t#u32 blit_y ; void ( * writeio ) ( s#fb_info * , void * , void * , unsigned int ) ; void ( * readio ) ( s#fb_info * , void * , void * , unsigned int ) ; } 
s#fb_cmap struct fb_cmap { t#__u32 start ; t#__u32 len ; t#__u16 * red ; t#__u16 * green ; t#__u16 * blue ; t#__u16 * transp ; } 
s#backlight_properties struct backlight_properties { int brightness ; int max_brightness ; int power ; int fb_blank ; unsigned int state ; } 
s#backlight_ops struct backlight_ops { unsigned int options ; int ( * update_status ) ( s#backlight_device * ) ; int ( * get_brightness ) ( s#backlight_device * ) ; int ( * check_fb ) ( s#fb_info * ) ; } 
s#backlight_device struct backlight_device { s#backlight_properties props ; s#mutex update_lock ; s#mutex ops_lock ; s#backlight_ops * ops ; s#notifier_block fb_notif ; s#device dev ; } 
s#fb_deferred_io struct fb_deferred_io { unsigned long delay ; s#mutex lock ; s#list_head pagelist ; void ( * deferred_io ) ( s#fb_info * , s#list_head * ) ; } 
s#fb_fillrect struct fb_fillrect { t#__u32 dx ; t#__u32 dy ; t#__u32 width ; t#__u32 height ; t#__u32 color ; t#__u32 rop ; } 
s#fb_copyarea struct fb_copyarea { t#__u32 dx ; t#__u32 dy ; t#__u32 width ; t#__u32 height ; t#__u32 sx ; t#__u32 sy ; } 
s#fb_image struct fb_image { t#__u32 dx ; t#__u32 dy ; t#__u32 width ; t#__u32 height ; t#__u32 fg_color ; t#__u32 bg_color ; t#__u8 depth ; const char * data ; s#fb_cmap cmap ; } 
s#fbcurpos struct fbcurpos { t#__u16 x , y ; } 
s#fb_cursor struct fb_cursor { t#__u16 set ; t#__u16 enable ; t#__u16 rop ; const char * mask ; s#fbcurpos hot ; s#fb_image image ; } 
s#fb_blit_caps struct fb_blit_caps { t#u32 x ; t#u32 y ; t#u32 len ; t#u32 flags ; } 
s#fb_ops struct fb_ops { s#module * owner ; int ( * fb_open ) ( s#fb_info * , int ) ; int ( * fb_release ) ( s#fb_info * , int ) ; t#ssize_t ( * fb_read ) ( s#fb_info * , char * , t#size_t , t#loff_t * ) ; t#ssize_t ( * fb_write ) ( s#fb_info * , const char * , t#size_t , t#loff_t * ) ; int ( * fb_check_var ) ( s#fb_var_screeninfo * , s#fb_info * ) ; int ( * fb_set_par ) ( s#fb_info * ) ; int ( * fb_setcolreg ) ( unsigned , unsigned , unsigned , unsigned , unsigned , s#fb_info * ) ; int ( * fb_setcmap ) ( s#fb_cmap * , s#fb_info * ) ; int ( * fb_blank ) ( int , s#fb_info * ) ; int ( * fb_pan_display ) ( s#fb_var_screeninfo * , s#fb_info * ) ; void ( * fb_fillrect ) ( s#fb_info * , const s#fb_fillrect * ) ; void ( * fb_copyarea ) ( s#fb_info * , const s#fb_copyarea * ) ; void ( * fb_imageblit ) ( s#fb_info * , const s#fb_image * ) ; int ( * fb_cursor ) ( s#fb_info * , s#fb_cursor * ) ; void ( * fb_rotate ) ( s#fb_info * , int ) ; int ( * fb_sync ) ( s#fb_info * ) ; int ( * fb_ioctl ) ( s#fb_info * , unsigned int , unsigned long ) ; int ( * fb_compat_ioctl ) ( s#fb_info * , unsigned , unsigned long ) ; int ( * fb_mmap ) ( s#fb_info * , s#vm_area_struct * ) ; void ( * fb_get_caps ) ( s#fb_info * , s#fb_blit_caps * , s#fb_var_screeninfo * ) ; void ( * fb_destroy ) ( s#fb_info * ) ; } 
s#fb_tilemap struct fb_tilemap { t#__u32 width ; t#__u32 height ; t#__u32 depth ; t#__u32 length ; const t#__u8 * data ; } 
s#fb_tilearea struct fb_tilearea { t#__u32 sx ; t#__u32 sy ; t#__u32 dx ; t#__u32 dy ; t#__u32 width ; t#__u32 height ; } 
s#fb_tilerect struct fb_tilerect { t#__u32 sx ; t#__u32 sy ; t#__u32 width ; t#__u32 height ; t#__u32 index ; t#__u32 fg ; t#__u32 bg ; t#__u32 rop ; } 
s#fb_tileblit struct fb_tileblit { t#__u32 sx ; t#__u32 sy ; t#__u32 width ; t#__u32 height ; t#__u32 fg ; t#__u32 bg ; t#__u32 length ; t#__u32 * indices ; } 
s#fb_tilecursor struct fb_tilecursor { t#__u32 sx ; t#__u32 sy ; t#__u32 mode ; t#__u32 shape ; t#__u32 fg ; t#__u32 bg ; } 
s#fb_tile_ops struct fb_tile_ops { void ( * fb_settile ) ( s#fb_info * , s#fb_tilemap * ) ; void ( * fb_tilecopy ) ( s#fb_info * , s#fb_tilearea * ) ; void ( * fb_tilefill ) ( s#fb_info * , s#fb_tilerect * ) ; void ( * fb_tileblit ) ( s#fb_info * , s#fb_tileblit * ) ; void ( * fb_tilecursor ) ( s#fb_info * , s#fb_tilecursor * ) ; int ( * fb_get_tilemax ) ( s#fb_info * ) ; } 
s##splash_data
s#fb_info struct fb_info { int node ; int flags ; s#mutex lock ; s#mutex mm_lock ; s#fb_var_screeninfo var ; s#fb_fix_screeninfo fix ; s#fb_monspecs monspecs ; s#work_struct queue ; s#fb_pixmap pixmap ; s#fb_pixmap sprite ; s#fb_cmap cmap ; s#list_head modelist ; s#fb_videomode * mode ; s#backlight_device * bl_dev ; s#mutex bl_curve_mutex ; t#u8 bl_curve [ 128 ] ; s#delayed_work deferred_work ; s#fb_deferred_io * fbdefio ; s#fb_ops * fbops ; s#device * device ; s#device * dev ; int class_flag ; s#fb_tile_ops * tileops ; char * screen_base ; unsigned long screen_size ; void * pseudo_palette ; t#u32 state ; void * fbcon_par ; void * par ; s#splash_data * splash_data ; char fb_cursordata [ 64 ] ; t#resource_size_t aperture_base ; t#resource_size_t aperture_size ; } 
drm_fb_helper_blank int drm_fb_helper_blank ( int , s#fb_info * ) 
s#drm_fb_helper_crtc struct drm_fb_helper_crtc { t#uint32_t crtc_id ; s#drm_mode_set mode_set ; } 
s#drm_fb_helper_funcs struct drm_fb_helper_funcs { void ( * gamma_set ) ( s#drm_crtc * , t#u16 , t#u16 , t#u16 , int ) ; void ( * gamma_get ) ( s#drm_crtc * , t#u16 * , t#u16 * , t#u16 * , int ) ; } 
s#drm_fb_helper struct drm_fb_helper { s#drm_framebuffer * fb ; s#drm_device * dev ; s#drm_display_mode * mode ; int crtc_count ; s#drm_fb_helper_crtc * crtc_info ; s#drm_fb_helper_funcs * funcs ; int conn_limit ; s#list_head kernel_fb_list ; } 
drm_fb_helper_init_crtc_count int drm_fb_helper_init_crtc_count ( s#drm_fb_helper * , int , int ) 
drm_fb_helper_setcmap int drm_fb_helper_setcmap ( s#fb_cmap * , s#fb_info * ) 
drm_fb_helper_setcolreg int drm_fb_helper_setcolreg ( unsigned , unsigned , unsigned , unsigned , unsigned , s#fb_info * ) 
drm_fb_helper_check_var int drm_fb_helper_check_var ( s#fb_var_screeninfo * , s#fb_info * ) 
drm_fb_helper_set_par int drm_fb_helper_set_par ( s#fb_info * ) 
drm_fb_helper_pan_display int drm_fb_helper_pan_display ( s#fb_var_screeninfo * , s#fb_info * ) 
drm_fb_helper_single_fb_probe int drm_fb_helper_single_fb_probe ( s#drm_device * , int , int ( * ) ( s#drm_device * , t#uint32_t , t#uint32_t , t#uint32_t , t#uint32_t , t#uint32_t , t#uint32_t , s#drm_framebuffer * * ) ) 
drm_fb_helper_free void drm_fb_helper_free ( s#drm_fb_helper * ) 
drm_fb_helper_fill_fix void drm_fb_helper_fill_fix ( s#fb_info * , t#uint32_t , t#uint32_t ) 
drm_fb_helper_fill_var void drm_fb_helper_fill_var ( s#fb_info * , s#drm_framebuffer * , t#uint32_t , t#uint32_t ) 

/* drivers/gpu/drm/drm_fops.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##posix_acl
drm_open extern int drm_open ( s#inode * , s#file * ) 
drm_fasync extern int drm_fasync ( int , s#file * , int ) 
drm_release extern int drm_release ( s#inode * , s#file * ) 
drm_poll extern unsigned int drm_poll ( s#file * , s#poll_table_struct * ) 

/* drivers/gpu/drm/drm_gem.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
drm_gem_object_alloc s#drm_gem_object * drm_gem_object_alloc ( s#drm_device * , t#size_t ) 
drm_gem_handle_create int drm_gem_handle_create ( s#drm_file * , s#drm_gem_object * , t#u32 * ) 
drm_gem_object_lookup s#drm_gem_object * drm_gem_object_lookup ( s#drm_device * , s#drm_file * , t#u32 ) 
drm_gem_object_free void drm_gem_object_free ( s#kref * ) 
drm_gem_object_handle_free void drm_gem_object_handle_free ( s#kref * ) 
drm_gem_vm_open void drm_gem_vm_open ( s#vm_area_struct * ) 
drm_gem_vm_close void drm_gem_vm_close ( s#vm_area_struct * ) 
drm_gem_mmap int drm_gem_mmap ( s#file * , s#vm_area_struct * ) 

/* drivers/gpu/drm/drm_hashtab.o */
drm_ht_create extern int drm_ht_create ( s#drm_open_hash * , unsigned int ) 
drm_ht_insert_item extern int drm_ht_insert_item ( s#drm_open_hash * , s#drm_hash_item * ) 
drm_ht_just_insert_please extern int drm_ht_just_insert_please ( s#drm_open_hash * , s#drm_hash_item * , unsigned long , int , int , unsigned long ) 
drm_ht_find_item extern int drm_ht_find_item ( s#drm_open_hash * , unsigned long , s#drm_hash_item * * ) 
drm_ht_remove_item extern int drm_ht_remove_item ( s#drm_open_hash * , s#drm_hash_item * ) 
drm_ht_remove extern void drm_ht_remove ( s#drm_open_hash * ) 

/* drivers/gpu/drm/drm_ioc32.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
drm_compat_ioctl extern long drm_compat_ioctl ( s#file * , unsigned int , unsigned long ) 

/* drivers/gpu/drm/drm_irq.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
drm_vblank_init extern int drm_vblank_init ( s#drm_device * , int ) 
drm_irq_install extern int drm_irq_install ( s#drm_device * ) 
drm_irq_uninstall extern int drm_irq_uninstall ( s#drm_device * ) 
drm_vblank_count extern t#u32 drm_vblank_count ( s#drm_device * , int ) 
drm_vblank_get extern int drm_vblank_get ( s#drm_device * , int ) 
drm_vblank_put extern void drm_vblank_put ( s#drm_device * , int ) 
drm_vblank_off extern void drm_vblank_off ( s#drm_device * , int ) 
drm_vblank_pre_modeset extern void drm_vblank_pre_modeset ( s#drm_device * , int ) 
drm_vblank_post_modeset extern void drm_vblank_post_modeset ( s#drm_device * , int ) 
drm_handle_vblank extern void drm_handle_vblank ( s#drm_device * , int ) 

/* drivers/gpu/drm/drm_lock.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
drm_lock_take extern int drm_lock_take ( s#drm_lock_data * , unsigned int ) 
drm_lock_free extern int drm_lock_free ( s#drm_lock_data * , unsigned int ) 
drm_idlelock_take extern void drm_idlelock_take ( s#drm_lock_data * ) 
drm_idlelock_release extern void drm_idlelock_release ( s#drm_lock_data * ) 
drm_i_have_hw_lock extern int drm_i_have_hw_lock ( s#drm_device * , s#drm_file * ) 

/* drivers/gpu/drm/drm_memory.o */
s##agp_bridge_data
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
drm_free_agp extern int drm_free_agp ( s#agp_memory * , int ) 
drm_unbind_agp extern int drm_unbind_agp ( s#agp_memory * ) 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
drm_core_ioremap extern void drm_core_ioremap ( s#drm_local_map * , s#drm_device * ) 
drm_core_ioremap_wc extern void drm_core_ioremap_wc ( s#drm_local_map * , s#drm_device * ) 
drm_core_ioremapfree extern void drm_core_ioremapfree ( s#drm_local_map * , s#drm_device * ) 

/* drivers/gpu/drm/drm_mm.o */
drm_mm_pre_get extern int drm_mm_pre_get ( s#drm_mm * ) 
drm_mm_get_block_generic extern s#drm_mm_node * drm_mm_get_block_generic ( s#drm_mm_node * , unsigned long , unsigned , int ) 
drm_mm_put_block extern void drm_mm_put_block ( s#drm_mm_node * ) 
drm_mm_search_free extern s#drm_mm_node * drm_mm_search_free ( const s#drm_mm * , unsigned long , unsigned , int ) 
drm_mm_clean extern int drm_mm_clean ( s#drm_mm * ) 
drm_mm_init extern int drm_mm_init ( s#drm_mm * , unsigned long , unsigned long ) 
drm_mm_takedown extern void drm_mm_takedown ( s#drm_mm * ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
drm_mm_dump_table int drm_mm_dump_table ( s#seq_file * , s#drm_mm * ) 

/* drivers/gpu/drm/drm_modes.o */
drm_mode_debug_printmodeline extern void drm_mode_debug_printmodeline ( s#drm_display_mode * ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
drm_cvt_mode extern s#drm_display_mode * drm_cvt_mode ( s#drm_device * , int , int , int , t#bool , t#bool , t#bool ) 
drm_gtf_mode extern s#drm_display_mode * drm_gtf_mode ( s#drm_device * , int , int , int , t#bool , int ) 
drm_mode_set_name extern void drm_mode_set_name ( s#drm_display_mode * ) 
drm_mode_list_concat extern void drm_mode_list_concat ( s#list_head * , s#list_head * ) 
drm_mode_width extern int drm_mode_width ( s#drm_display_mode * ) 
drm_mode_height extern int drm_mode_height ( s#drm_display_mode * ) 
drm_mode_vrefresh extern int drm_mode_vrefresh ( s#drm_display_mode * ) 
drm_mode_set_crtcinfo extern void drm_mode_set_crtcinfo ( s#drm_display_mode * , int ) 
drm_mode_duplicate extern s#drm_display_mode * drm_mode_duplicate ( s#drm_device * , s#drm_display_mode * ) 
drm_mode_equal extern t#bool drm_mode_equal ( s#drm_display_mode * , s#drm_display_mode * ) 
drm_mode_validate_size extern void drm_mode_validate_size ( s#drm_device * , s#list_head * , int , int , int ) 
drm_mode_validate_clocks void drm_mode_validate_clocks ( s#drm_device * , s#list_head * , int * , int * , int ) 
drm_mode_prune_invalid extern void drm_mode_prune_invalid ( s#drm_device * , s#list_head * , t#bool ) 
drm_mode_sort extern void drm_mode_sort ( s#list_head * ) 
drm_mode_connector_list_update extern void drm_mode_connector_list_update ( s#drm_connector * ) 

/* drivers/gpu/drm/drm_pci.o */
t#drm_dma_handle_t typedef s#drm_dma_handle drm_dma_handle_t 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
drm_pci_alloc extern t#drm_dma_handle_t * drm_pci_alloc ( s#drm_device * , t#size_t , t#size_t ) 
drm_pci_free extern void drm_pci_free ( s#drm_device * , t#drm_dma_handle_t * ) 

/* drivers/gpu/drm/drm_scatter.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
s#drm_scatter_gather struct drm_scatter_gather { unsigned long size ; unsigned long handle ; } 
drm_sg_alloc extern int drm_sg_alloc ( s#drm_device * , s#drm_scatter_gather * ) 

/* drivers/gpu/drm/drm_sman.o */
s#drm_sman_mm struct drm_sman_mm { void * private ; void * ( * allocate ) ( void * , unsigned long , unsigned ) ; void ( * free ) ( void * , void * ) ; void ( * destroy ) ( void * ) ; unsigned long ( * offset ) ( void * , void * ) ; } 
s#drm_sman struct drm_sman { s#drm_sman_mm * mm ; int num_managers ; s#drm_open_hash owner_hash_tab ; s#drm_open_hash user_hash_tab ; s#list_head owner_items ; } 
drm_sman_takedown extern void drm_sman_takedown ( s#drm_sman * ) 
drm_sman_init extern int drm_sman_init ( s#drm_sman * , unsigned int , unsigned int , unsigned int ) 
drm_sman_set_range extern int drm_sman_set_range ( s#drm_sman * , unsigned int , unsigned long , unsigned long ) 
drm_sman_set_manager extern int drm_sman_set_manager ( s#drm_sman * , unsigned int , s#drm_sman_mm * ) 
s#drm_memblock_item struct drm_memblock_item { s#list_head owner_list ; s#drm_hash_item user_hash ; void * mm_info ; s#drm_sman_mm * mm ; s#drm_sman * sman ; } 
drm_sman_alloc extern s#drm_memblock_item * drm_sman_alloc ( s#drm_sman * , unsigned int , unsigned long , unsigned , unsigned long ) 
drm_sman_free_key extern int drm_sman_free_key ( s#drm_sman * , unsigned int ) 
drm_sman_owner_clean extern int drm_sman_owner_clean ( s#drm_sman * , unsigned long ) 
drm_sman_owner_cleanup extern void drm_sman_owner_cleanup ( s#drm_sman * , unsigned long ) 
drm_sman_cleanup extern void drm_sman_cleanup ( s#drm_sman * ) 

/* drivers/gpu/drm/drm_stub.o */
drm_debug extern unsigned int drm_debug 
drm_ut_debug_printk extern void drm_ut_debug_printk ( unsigned int , const char * , const char * , const char * , ... ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##posix_acl
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
drm_get_dev extern int drm_get_dev ( s#pci_dev * , const s#pci_device_id * , s#drm_driver * ) 
drm_put_dev extern void drm_put_dev ( s#drm_device * ) 

/* drivers/gpu/drm/drm_sysfs.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
drm_sysfs_connector_add extern int drm_sysfs_connector_add ( s#drm_connector * ) 
drm_sysfs_connector_remove extern void drm_sysfs_connector_remove ( s#drm_connector * ) 
drm_sysfs_hotplug_event extern void drm_sysfs_hotplug_event ( s#drm_device * ) 
drm_class_device_register extern int drm_class_device_register ( s#device * ) 
drm_class_device_unregister extern void drm_class_device_unregister ( s#device * ) 

/* drivers/gpu/drm/drm_vm.o */
drm_core_get_map_ofs extern t#resource_size_t drm_core_get_map_ofs ( s#drm_local_map * ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
drm_core_get_reg_ofs extern t#resource_size_t drm_core_get_reg_ofs ( s#drm_device * ) 
drm_mmap extern int drm_mmap ( s#file * , s#vm_area_struct * ) 

/* drivers/gpu/drm/i915/intel_dp_i2c.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
i2c_dp_aux_add_bus int i2c_dp_aux_add_bus ( s#i2c_adapter * ) 

/* drivers/gpu/drm/i915/intel_fb.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
intelfb_resize extern int intelfb_resize ( s#drm_device * , s#drm_crtc * ) 
intelfb_probe extern int intelfb_probe ( s#drm_device * ) 
intelfb_remove extern int intelfb_remove ( s#drm_device * , s#drm_framebuffer * ) 

/* drivers/gpu/drm/radeon/radeon_fb.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##agp_bridge_data
radeonfb_resize int radeonfb_resize ( s#drm_device * , s#drm_crtc * ) 
radeonfb_remove int radeonfb_remove ( s#drm_device * , s#drm_framebuffer * ) 

/* drivers/gpu/drm/ttm/ttm_agp_backend.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s#ttm_mem_shrink struct ttm_mem_shrink { int ( * do_shrink ) ( s#ttm_mem_shrink * ) ; } 
s##workqueue_struct
s##ttm_mem_zone
s#ttm_mem_global struct ttm_mem_global { s#kobject kobj ; s#ttm_mem_shrink * shrink ; s#workqueue_struct * swap_queue ; s#work_struct work ; t#wait_queue_head_t queue ; t#spinlock_t lock ; s#ttm_mem_zone * zones [ 2 ] ; unsigned int num_zones ; s#ttm_mem_zone * zone_kernel ; s#ttm_mem_zone * zone_dma32 ; } 
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##kiocb
s##iovec
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s#ttm_bo_global struct ttm_bo_global { s#kobject kobj ; s#ttm_mem_global * mem_glob ; s#page * dummy_read_page ; s#ttm_mem_shrink shrink ; t#size_t ttm_bo_extra_size ; t#size_t ttm_bo_size ; s#mutex device_list_mutex ; t#spinlock_t lru_lock ; s#list_head device_list ; s#list_head swap_lru ; t#atomic_t bo_count ; } 
s#ttm_mem_type_manager struct ttm_mem_type_manager { t#bool has_type ; t#bool use_type ; t#uint32_t flags ; unsigned long gpu_offset ; unsigned long io_offset ; unsigned long io_size ; void * io_addr ; t#uint64_t size ; t#uint32_t available_caching ; t#uint32_t default_caching ; s#drm_mm manager ; s#list_head lru ; } 
e#ttm_bo_type enum ttm_bo_type { ttm_bo_type_device , ttm_bo_type_user , ttm_bo_type_kernel } 
s#ttm_mem_reg struct ttm_mem_reg { s#drm_mm_node * mm_node ; unsigned long size ; unsigned long num_pages ; t#uint32_t page_alignment ; t#uint32_t mem_type ; t#uint32_t placement ; } 
e#ttm_caching_state enum ttm_caching_state { tt_uncached , tt_wc , tt_cached } 
s#ttm_tt struct ttm_tt { s#page * dummy_read_page ; s#page * * pages ; long first_himem_page ; long last_lomem_page ; t#uint32_t page_flags ; unsigned long num_pages ; s#ttm_bo_global * glob ; s#ttm_backend * be ; s#task_struct * tsk ; unsigned long start ; s#file * swap_storage ; e#ttm_caching_state caching_state ; enum { tt_bound , tt_unbound , tt_unpopulated , } state ; } 
s#ttm_buffer_object struct ttm_buffer_object { s#ttm_bo_global * glob ; s#ttm_bo_device * bdev ; unsigned long buffer_start ; e#ttm_bo_type type ; void ( * destroy ) ( s#ttm_buffer_object * ) ; unsigned long num_pages ; t#uint64_t addr_space_offset ; t#size_t acc_size ; s#kref kref ; s#kref list_kref ; t#wait_queue_head_t event_queue ; t#spinlock_t lock ; t#uint32_t proposed_placement ; s#ttm_mem_reg mem ; s#file * persistant_swap_storage ; s#ttm_tt * ttm ; t#bool evicted ; t#atomic_t cpu_writers ; s#list_head lru ; s#list_head ddestroy ; s#list_head swap ; t#uint32_t val_seq ; t#bool seq_valid ; t#atomic_t reserved ; void * sync_obj_arg ; void * sync_obj ; unsigned long priv_flags ; s#rb_node vm_rb ; s#drm_mm_node * vm_node ; unsigned long offset ; t#uint32_t cur_placement ; } 
s#ttm_bo_driver struct ttm_bo_driver { const t#uint32_t * mem_type_prio ; const t#uint32_t * mem_busy_prio ; t#uint32_t num_mem_type_prio ; t#uint32_t num_mem_busy_prio ; s#ttm_backend * ( * create_ttm_backend_entry ) ( s#ttm_bo_device * ) ; int ( * invalidate_caches ) ( s#ttm_bo_device * , t#uint32_t ) ; int ( * init_mem_type ) ( s#ttm_bo_device * , t#uint32_t , s#ttm_mem_type_manager * ) ; t#uint32_t ( * evict_flags ) ( s#ttm_buffer_object * ) ; int ( * move ) ( s#ttm_buffer_object * , t#bool , t#bool , t#bool , s#ttm_mem_reg * ) ; int ( * verify_access ) ( s#ttm_buffer_object * , s#file * ) ; t#bool ( * sync_obj_signaled ) ( void * , void * ) ; int ( * sync_obj_wait ) ( void * , void * , t#bool , t#bool ) ; int ( * sync_obj_flush ) ( void * , void * ) ; void ( * sync_obj_unref ) ( void * * ) ; void * ( * sync_obj_ref ) ( void * ) ; void ( * move_notify ) ( s#ttm_buffer_object * , s#ttm_mem_reg * ) ; void ( * fault_reserve_notify ) ( s#ttm_buffer_object * ) ; } 
s##tvec_base
s#ttm_bo_device struct ttm_bo_device { s#list_head device_list ; s#ttm_bo_global * glob ; s#ttm_bo_driver * driver ; t#rwlock_t vm_lock ; s#ttm_mem_type_manager man [ 8 ] ; s#rb_root addr_space_rb ; s#drm_mm addr_space_mm ; s#list_head ddestroy ; t#bool nice_mode ; s#address_space * dev_mapping ; s#delayed_work wq ; t#bool need_dma32 ; } 
s#ttm_backend_func struct ttm_backend_func { int ( * populate ) ( s#ttm_backend * , unsigned long , s#page * * , s#page * ) ; void ( * clear ) ( s#ttm_backend * ) ; int ( * bind ) ( s#ttm_backend * , s#ttm_mem_reg * ) ; int ( * unbind ) ( s#ttm_backend * ) ; void ( * destroy ) ( s#ttm_backend * ) ; } 
s#ttm_backend struct ttm_backend { s#ttm_bo_device * bdev ; t#uint32_t flags ; s#ttm_backend_func * func ; } 
s##agp_bridge_data
ttm_agp_backend_init extern s#ttm_backend * ttm_agp_backend_init ( s#ttm_bo_device * , s#agp_bridge_data * ) 

/* drivers/gpu/drm/ttm/ttm_bo.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##workqueue_struct
s##ttm_mem_zone
ttm_bo_reserve extern int ttm_bo_reserve ( s#ttm_buffer_object * , t#bool , t#bool , t#bool , t#uint32_t ) 
ttm_bo_unreserve extern void ttm_bo_unreserve ( s#ttm_buffer_object * ) 
ttm_bo_unref extern void ttm_bo_unref ( s#ttm_buffer_object * * ) 
ttm_bo_mem_space extern int ttm_bo_mem_space ( s#ttm_buffer_object * , t#uint32_t , s#ttm_mem_reg * , t#bool , t#bool ) 
ttm_buffer_object_validate extern int ttm_buffer_object_validate ( s#ttm_buffer_object * , t#uint32_t , t#bool , t#bool ) 
ttm_buffer_object_init extern int ttm_buffer_object_init ( s#ttm_bo_device * , s#ttm_buffer_object * , unsigned long , e#ttm_bo_type , t#uint32_t , t#uint32_t , unsigned long , t#bool , s#file * , t#size_t , void ( * ) ( s#ttm_buffer_object * ) ) 
ttm_bo_clean_mm extern int ttm_bo_clean_mm ( s#ttm_bo_device * , unsigned ) 
ttm_bo_evict_mm extern int ttm_bo_evict_mm ( s#ttm_bo_device * , unsigned ) 
ttm_bo_init_mm extern int ttm_bo_init_mm ( s#ttm_bo_device * , unsigned , unsigned long , unsigned long ) 
e#ttm_global_types enum ttm_global_types { TTM_GLOBAL_TTM_MEM = 0 , TTM_GLOBAL_TTM_BO , TTM_GLOBAL_TTM_OBJECT , TTM_GLOBAL_NUM } 
s#ttm_global_reference struct ttm_global_reference { e#ttm_global_types global_type ; t#size_t size ; void * object ; int ( * init ) ( s#ttm_global_reference * ) ; void ( * release ) ( s#ttm_global_reference * ) ; } 
ttm_bo_global_release extern void ttm_bo_global_release ( s#ttm_global_reference * ) 
ttm_bo_global_init extern int ttm_bo_global_init ( s#ttm_global_reference * ) 
ttm_bo_device_release extern int ttm_bo_device_release ( s#ttm_bo_device * ) 
ttm_bo_device_init extern int ttm_bo_device_init ( s#ttm_bo_device * , s#ttm_bo_global * , s#ttm_bo_driver * , t#uint64_t , t#bool ) 
ttm_bo_unmap_virtual extern void ttm_bo_unmap_virtual ( s#ttm_buffer_object * ) 
ttm_bo_wait extern int ttm_bo_wait ( s#ttm_buffer_object * , t#bool , t#bool , t#bool ) 

/* drivers/gpu/drm/ttm/ttm_bo_util.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##workqueue_struct
s##ttm_mem_zone
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##kiocb
s##iovec
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##tvec_base
ttm_bo_move_ttm extern int ttm_bo_move_ttm ( s#ttm_buffer_object * , t#bool , t#bool , s#ttm_mem_reg * ) 
ttm_bo_move_memcpy extern int ttm_bo_move_memcpy ( s#ttm_buffer_object * , t#bool , t#bool , s#ttm_mem_reg * ) 
s#ttm_bo_kmap_obj struct ttm_bo_kmap_obj { void * virtual ; s#page * page ; enum { ttm_bo_map_iomap = 1 | 0x80 , ttm_bo_map_vmap = 2 , ttm_bo_map_kmap = 3 , ttm_bo_map_premapped = 4 | 0x80 , } bo_kmap_type ; } 
ttm_bo_kmap extern int ttm_bo_kmap ( s#ttm_buffer_object * , unsigned long , unsigned long , s#ttm_bo_kmap_obj * ) 
ttm_bo_kunmap extern void ttm_bo_kunmap ( s#ttm_bo_kmap_obj * ) 
ttm_bo_move_accel_cleanup extern int ttm_bo_move_accel_cleanup ( s#ttm_buffer_object * , void * , void * , t#bool , t#bool , s#ttm_mem_reg * ) 

/* drivers/gpu/drm/ttm/ttm_bo_vm.o */
s##vfsmount
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##kiocb
s##iovec
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##cred
s##workqueue_struct
s##ttm_mem_zone
s##tvec_base
ttm_bo_mmap extern int ttm_bo_mmap ( s#file * , s#vm_area_struct * , s#ttm_bo_device * ) 
ttm_fbdev_mmap extern int ttm_fbdev_mmap ( s#vm_area_struct * , s#ttm_buffer_object * ) 

/* drivers/gpu/drm/ttm/ttm_global.o */
ttm_global_item_ref extern int ttm_global_item_ref ( s#ttm_global_reference * ) 
ttm_global_item_unref extern void ttm_global_item_unref ( s#ttm_global_reference * ) 

/* drivers/gpu/drm/ttm/ttm_memory.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##workqueue_struct
s#ttm_mem_zone struct ttm_mem_zone { s#kobject kobj ; s#ttm_mem_global * glob ; const char * name ; t#uint64_t zone_mem ; t#uint64_t emer_mem ; t#uint64_t max_mem ; t#uint64_t swap_limit ; t#uint64_t used_mem ; } 
ttm_mem_global_init extern int ttm_mem_global_init ( s#ttm_mem_global * ) 
ttm_mem_global_release extern void ttm_mem_global_release ( s#ttm_mem_global * ) 

/* drivers/gpu/drm/ttm/ttm_tt.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##workqueue_struct
s##ttm_mem_zone
ttm_tt_set_placement_caching extern int ttm_tt_set_placement_caching ( s#ttm_tt * , t#uint32_t ) 
ttm_tt_bind extern int ttm_tt_bind ( s#ttm_tt * , s#ttm_mem_reg * ) 

/* drivers/gpu/vga/vgaarb.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
vga_get extern int vga_get ( s#pci_dev * , unsigned int , int ) 
vga_tryget extern int vga_tryget ( s#pci_dev * , unsigned int ) 
vga_put extern void vga_put ( s#pci_dev * , unsigned int ) 
vga_set_legacy_decoding extern void vga_set_legacy_decoding ( s#pci_dev * , unsigned int ) 
vga_client_register int vga_client_register ( s#pci_dev * , void * , void ( * ) ( void * , t#bool ) , unsigned int ( * ) ( void * , t#bool ) ) 

/* drivers/hid/hid-core.o */
hid_debug extern int hid_debug 
s#hid_collection struct hid_collection { unsigned type ; unsigned usage ; unsigned level ; } 
e#hid_type enum hid_type { HID_TYPE_OTHER = 0 , HID_TYPE_USBMOUSE } 
s#hid_usage struct hid_usage { unsigned hid ; unsigned collection_index ; t#__u16 code ; t#__u8 type ; t#__s8 hat_min ; t#__s8 hat_max ; t#__s8 hat_dir ; } 
s#input_id struct input_id { t#__u16 bustype ; t#__u16 vendor ; t#__u16 product ; t#__u16 version ; } 
s#ff_trigger struct ff_trigger { t#__u16 button ; t#__u16 interval ; } 
s#ff_replay struct ff_replay { t#__u16 length ; t#__u16 delay ; } 
s#ff_envelope struct ff_envelope { t#__u16 attack_length ; t#__u16 attack_level ; t#__u16 fade_length ; t#__u16 fade_level ; } 
s#ff_constant_effect struct ff_constant_effect { t#__s16 level ; s#ff_envelope envelope ; } 
s#ff_ramp_effect struct ff_ramp_effect { t#__s16 start_level ; t#__s16 end_level ; s#ff_envelope envelope ; } 
s#ff_periodic_effect struct ff_periodic_effect { t#__u16 waveform ; t#__u16 period ; t#__s16 magnitude ; t#__s16 offset ; t#__u16 phase ; s#ff_envelope envelope ; t#__u32 custom_len ; t#__s16 * custom_data ; } 
s#ff_condition_effect struct ff_condition_effect { t#__u16 right_saturation ; t#__u16 left_saturation ; t#__s16 right_coeff ; t#__s16 left_coeff ; t#__u16 deadband ; t#__s16 center ; } 
s#ff_rumble_effect struct ff_rumble_effect { t#__u16 strong_magnitude ; t#__u16 weak_magnitude ; } 
s#ff_effect struct ff_effect { t#__u16 type ; t#__s16 id ; t#__u16 direction ; s#ff_trigger trigger ; s#ff_replay replay ; union { s#ff_constant_effect constant ; s#ff_ramp_effect ramp ; s#ff_periodic_effect periodic ; s#ff_condition_effect condition [ 2 ] ; s#ff_rumble_effect rumble ; } u ; } 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s#ff_device struct ff_device { int ( * upload ) ( s#input_dev * , s#ff_effect * , s#ff_effect * ) ; int ( * erase ) ( s#input_dev * , int ) ; int ( * playback ) ( s#input_dev * , int , int ) ; void ( * set_gain ) ( s#input_dev * , t#u16 ) ; void ( * set_autocenter ) ( s#input_dev * , t#u16 ) ; void ( * destroy ) ( s#ff_device * ) ; void * private ; unsigned long ffbit [ ( ( ( ( 0x7f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; s#mutex mutex ; int max_effects ; s#ff_effect * effects ; s#file * effect_owners [ ] ; } 
s#input_device_id struct input_device_id { t#kernel_ulong_t flags ; t#__u16 bustype ; t#__u16 vendor ; t#__u16 product ; t#__u16 version ; t#kernel_ulong_t evbit [ 0x1f / 64 + 1 ] ; t#kernel_ulong_t keybit [ 0x2ff / 64 + 1 ] ; t#kernel_ulong_t relbit [ 0x0f / 64 + 1 ] ; t#kernel_ulong_t absbit [ 0x3f / 64 + 1 ] ; t#kernel_ulong_t mscbit [ 0x07 / 64 + 1 ] ; t#kernel_ulong_t ledbit [ 0x0f / 64 + 1 ] ; t#kernel_ulong_t sndbit [ 0x07 / 64 + 1 ] ; t#kernel_ulong_t ffbit [ 0x7f / 64 + 1 ] ; t#kernel_ulong_t swbit [ 0x0f / 64 + 1 ] ; t#kernel_ulong_t driver_info ; } 
s#input_handler struct input_handler { void * private ; void ( * event ) ( s#input_handle * , unsigned int , unsigned int , int ) ; int ( * connect ) ( s#input_handler * , s#input_dev * , const s#input_device_id * ) ; void ( * disconnect ) ( s#input_handle * ) ; void ( * start ) ( s#input_handle * ) ; const s#file_operations * fops ; int minor ; const char * name ; const s#input_device_id * id_table ; const s#input_device_id * blacklist ; s#list_head h_list ; s#list_head node ; } 
s#input_handle struct input_handle { void * private ; int open ; const char * name ; s#input_dev * dev ; s#input_handler * handler ; s#list_head d_node ; s#list_head h_node ; } 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#input_dev struct input_dev { const char * name ; const char * phys ; const char * uniq ; s#input_id id ; unsigned long evbit [ ( ( ( ( 0x1f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long keybit [ ( ( ( ( 0x2ff + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long relbit [ ( ( ( ( 0x0f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long absbit [ ( ( ( ( 0x3f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long mscbit [ ( ( ( ( 0x07 + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long ledbit [ ( ( ( ( 0x0f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long sndbit [ ( ( ( ( 0x07 + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long ffbit [ ( ( ( ( 0x7f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long swbit [ ( ( ( ( 0x0f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned int keycodemax ; unsigned int keycodesize ; void * keycode ; int ( * setkeycode ) ( s#input_dev * , int , int ) ; int ( * getkeycode ) ( s#input_dev * , int , int * ) ; s#ff_device * ff ; unsigned int repeat_key ; s#timer_list timer ; int sync ; int abs [ 0x3f + 1 ] ; int rep [ 0x01 + 1 ] ; unsigned long key [ ( ( ( ( 0x2ff + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long led [ ( ( ( ( 0x0f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long snd [ ( ( ( ( 0x07 + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long sw [ ( ( ( ( 0x0f + 1 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; int absmax [ 0x3f + 1 ] ; int absmin [ 0x3f + 1 ] ; int absfuzz [ 0x3f + 1 ] ; int absflat [ 0x3f + 1 ] ; int absres [ 0x3f + 1 ] ; int ( * open ) ( s#input_dev * ) ; void ( * close ) ( s#input_dev * ) ; int ( * flush ) ( s#input_dev * , s#file * ) ; int ( * event ) ( s#input_dev * , unsigned int , unsigned int , int ) ; s#input_handle * grab ; t#spinlock_t event_lock ; s#mutex mutex ; unsigned int users ; t#bool going_away ; s#device dev ; s#list_head h_list ; s#list_head node ; } 
s#hid_input struct hid_input { s#list_head list ; s#hid_report * report ; s#input_dev * input ; } 
s#hid_field struct hid_field { unsigned physical ; unsigned logical ; unsigned application ; s#hid_usage * usage ; unsigned maxusage ; unsigned flags ; unsigned report_offset ; unsigned report_size ; unsigned report_count ; unsigned report_type ; t#__s32 * value ; t#__s32 logical_minimum ; t#__s32 logical_maximum ; t#__s32 physical_minimum ; t#__s32 physical_maximum ; t#__s32 unit_exponent ; unsigned unit ; s#hid_report * report ; unsigned index ; s#hid_input * hidinput ; t#__u16 dpad ; } 
s#hid_report struct hid_report { s#list_head list ; unsigned id ; unsigned type ; s#hid_field * field [ 64 ] ; unsigned maxfield ; unsigned size ; s#hid_device * device ; } 
s#hid_report_enum struct hid_report_enum { unsigned numbered ; s#list_head report_list ; s#hid_report * report_id_hash [ 256 ] ; } 
s#hid_device_id struct hid_device_id { t#__u16 bus ; t#__u16 pad1 ; t#__u32 vendor ; t#__u32 product ; t#kernel_ulong_t driver_data __attribute__ ( ( aligned ( sizeof ( kernel_ulong_t ) ) ) ) ; } 
s#hid_report_id struct hid_report_id { t#__u32 report_type ; } 
s#hid_usage_id struct hid_usage_id { t#__u32 usage_hid ; t#__u32 usage_type ; t#__u32 usage_code ; } 
s#hid_driver struct hid_driver { char * name ; const s#hid_device_id * id_table ; s#list_head dyn_list ; t#spinlock_t dyn_lock ; int ( * probe ) ( s#hid_device * , const s#hid_device_id * ) ; void ( * remove ) ( s#hid_device * ) ; const s#hid_report_id * report_table ; int ( * raw_event ) ( s#hid_device * , s#hid_report * , t#u8 * , int ) ; const s#hid_usage_id * usage_table ; int ( * event ) ( s#hid_device * , s#hid_field * , s#hid_usage * , t#__s32 ) ; void ( * report_fixup ) ( s#hid_device * , t#__u8 * , unsigned int ) ; int ( * input_mapping ) ( s#hid_device * , s#hid_input * , s#hid_field * , s#hid_usage * , unsigned long * * , int * ) ; int ( * input_mapped ) ( s#hid_device * , s#hid_input * , s#hid_field * , s#hid_usage * , unsigned long * * , int * ) ; s#device_driver driver ; } 
s#hid_ll_driver struct hid_ll_driver { int ( * start ) ( s#hid_device * ) ; void ( * stop ) ( s#hid_device * ) ; int ( * open ) ( s#hid_device * ) ; void ( * close ) ( s#hid_device * ) ; int ( * power ) ( s#hid_device * , int ) ; int ( * hidinput_input_event ) ( s#input_dev * , unsigned int , unsigned int , int ) ; int ( * parse ) ( s#hid_device * ) ; } 
s#hid_device struct hid_device { t#__u8 * rdesc ; unsigned rsize ; s#hid_collection * collection ; unsigned collection_size ; unsigned maxcollection ; unsigned maxapplication ; t#__u16 bus ; t#__u32 vendor ; t#__u32 product ; t#__u32 version ; e#hid_type type ; unsigned country ; s#hid_report_enum report_enum [ 3 ] ; s#device dev ; s#hid_driver * driver ; s#hid_ll_driver * ll_driver ; unsigned int status ; unsigned claimed ; unsigned quirks ; s#list_head inputs ; void * hiddev ; void * hidraw ; int minor ; int open ; char name [ 128 ] ; char phys [ 64 ] ; char uniq [ 64 ] ; void * driver_data ; int ( * ff_init ) ( s#hid_device * ) ; int ( * hiddev_connect ) ( s#hid_device * , unsigned int ) ; void ( * hiddev_disconnect ) ( s#hid_device * ) ; void ( * hiddev_hid_event ) ( s#hid_device * , s#hid_field * , s#hid_usage * , t#__s32 ) ; void ( * hiddev_report_event ) ( s#hid_device * , s#hid_report * ) ; int ( * hid_output_raw_report ) ( s#hid_device * , t#__u8 * , t#size_t ) ; unsigned short debug ; s#dentry * debug_dir ; s#dentry * debug_rdesc ; s#dentry * debug_events ; s#list_head debug_list ; t#wait_queue_head_t debug_wait ; } 
hid_parse_report int hid_parse_report ( s#hid_device * , t#__u8 * , unsigned ) 
hid_output_report void hid_output_report ( s#hid_report * , t#__u8 * ) 
hid_set_field int hid_set_field ( s#hid_field * , unsigned , t#__s32 ) 
hid_report_raw_event void hid_report_raw_event ( s#hid_device * , int , t#u8 * , int , int ) 
hid_input_report int hid_input_report ( s#hid_device * , int , t#u8 * , int , int ) 
hid_connect int hid_connect ( s#hid_device * , unsigned int ) 
hid_disconnect void hid_disconnect ( s#hid_device * ) 
hid_add_device extern int hid_add_device ( s#hid_device * ) 
hid_allocate_device s#hid_device * hid_allocate_device ( void ) 
hid_destroy_device extern void hid_destroy_device ( s#hid_device * ) 
__hid_register_driver extern int __attribute__ ( ( warn_unused_result ) ) __hid_register_driver ( s#hid_driver * , s#module * , const char * ) 
hid_unregister_driver extern void hid_unregister_driver ( s#hid_driver * ) 
hid_check_keys_pressed int hid_check_keys_pressed ( s#hid_device * ) 

/* drivers/hid/hid-debug.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
hid_resolv_usage char * hid_resolv_usage ( unsigned , s#seq_file * ) 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
hid_dump_field void hid_dump_field ( s#hid_field * , int , s#seq_file * ) 
hid_dump_device void hid_dump_device ( s#hid_device * , s#seq_file * ) 
hid_debug_event void hid_debug_event ( s#hid_device * , char * ) 
hid_dump_input void hid_dump_input ( s#hid_device * , s#hid_usage * , t#__s32 ) 

/* drivers/hid/hid-input.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kiocb
s##iovec
s##poll_table_struct
s##vm_area_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##page
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##radix_tree_node
s##writeback_control
s##cdev
s##posix_acl
s##cred
s##tvec_base
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
hidinput_report_event extern void hidinput_report_event ( s#hid_device * , s#hid_report * ) 
hidinput_find_field int hidinput_find_field ( s#hid_device * , unsigned int , unsigned int , s#hid_field * * ) 
hidinput_connect extern int hidinput_connect ( s#hid_device * , unsigned int ) 
hidinput_disconnect extern void hidinput_disconnect ( s#hid_device * ) 

/* drivers/hid/hidraw.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
hidraw_report_event void hidraw_report_event ( s#hid_device * , t#u8 * , int ) 
hidraw_connect int hidraw_connect ( s#hid_device * ) 
hidraw_disconnect void hidraw_disconnect ( s#hid_device * ) 

/* drivers/hid/usbhid/hid-core.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
usbhid_submit_report void usbhid_submit_report ( s#hid_device * , s#hid_report * , unsigned char ) 
usbhid_set_leds void usbhid_set_leds ( s#hid_device * ) 

/* drivers/hid/usbhid/hid-quirks.o */
usbhid_lookup_quirk t#u32 usbhid_lookup_quirk ( const t#u16 , const t#u16 ) 

/* drivers/hid/usbhid/hiddev.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
hiddev_hid_event void hiddev_hid_event ( s#hid_device * , s#hid_field * , s#hid_usage * , t#__s32 ) 

/* drivers/hwmon/hwmon.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
hwmon_device_register s#device * hwmon_device_register ( s#device * ) 
hwmon_device_unregister void hwmon_device_unregister ( s#device * ) 

/* drivers/hwmon/hwmon-vid.o */
vid_from_reg int vid_from_reg ( int , t#u8 ) 
vid_which_vrm t#u8 vid_which_vrm ( void ) 

/* drivers/hwmon/lis3lv02d.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#input_polled_dev struct input_polled_dev { void * private ; void ( * flush ) ( s#input_polled_dev * ) ; void ( * poll ) ( s#input_polled_dev * ) ; unsigned int poll_interval ; s#input_dev * input ; s#delayed_work work ; } 
s#axis_conversion struct axis_conversion { t#s8 x ; t#s8 y ; t#s8 z ; } 
s#lis3lv02d_platform_data struct lis3lv02d_platform_data { unsigned char click_flags ; unsigned char click_thresh_x ; unsigned char click_thresh_y ; unsigned char click_thresh_z ; unsigned char click_time_limit ; unsigned char click_latency ; unsigned char click_window ; unsigned char irq_cfg ; unsigned char wakeup_flags ; unsigned char wakeup_thresh ; } 
s#lis3lv02d struct lis3lv02d { void * bus_priv ; int ( * init ) ( s#lis3lv02d * ) ; int ( * write ) ( s#lis3lv02d * , int , t#u8 ) ; int ( * read ) ( s#lis3lv02d * , int , t#u8 * ) ; t#u8 whoami ; t#s16 ( * read_data ) ( s#lis3lv02d * , int ) ; int mdps_max_val ; s#input_polled_dev * idev ; s#platform_device * pdev ; t#atomic_t count ; int xcalib ; int ycalib ; int zcalib ; s#axis_conversion ac ; t#u32 irq ; s#fasync_struct * async_queue ; t#wait_queue_head_t misc_wait ; unsigned long misc_opened ; s#lis3lv02d_platform_data * pdata ; } 
lis3_dev extern s#lis3lv02d lis3_dev 
lis3lv02d_poweroff void lis3lv02d_poweroff ( s#lis3lv02d * ) 
lis3lv02d_poweron void lis3lv02d_poweron ( s#lis3lv02d * ) 
lis3lv02d_joystick_enable int lis3lv02d_joystick_enable ( void ) 
lis3lv02d_joystick_disable void lis3lv02d_joystick_disable ( void ) 
lis3lv02d_remove_fs int lis3lv02d_remove_fs ( s#lis3lv02d * ) 
lis3lv02d_init_device int lis3lv02d_init_device ( s#lis3lv02d * ) 

/* drivers/i2c/algos/i2c-algo-bit.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
i2c_bit_add_bus int i2c_bit_add_bus ( s#i2c_adapter * ) 
i2c_bit_add_numbered_bus int i2c_bit_add_numbered_bus ( s#i2c_adapter * ) 

/* drivers/i2c/algos/i2c-algo-pca.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
i2c_pca_add_bus int i2c_pca_add_bus ( s#i2c_adapter * ) 
i2c_pca_add_numbered_bus int i2c_pca_add_numbered_bus ( s#i2c_adapter * ) 

/* drivers/i2c/busses/i2c-amd756.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
amd756_smbus s#i2c_adapter amd756_smbus 

/* drivers/i2c/busses/i2c-nforce2.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
nforce2_smbus s#i2c_adapter * nforce2_smbus 

/* drivers/i2c/i2c-boardinfo.o */
__i2c_board_lock extern s#rw_semaphore __i2c_board_lock 
__i2c_board_list extern s#list_head __i2c_board_list 
__i2c_first_dynamic_bus_num extern int __i2c_first_dynamic_bus_num 

/* drivers/i2c/i2c-core.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##bus_type_private
i2c_bus_type extern s#bus_type i2c_bus_type 
s#i2c_device_id struct i2c_device_id { char name [ 20 ] ; t#kernel_ulong_t driver_data __attribute__ ( ( aligned ( sizeof ( kernel_ulong_t ) ) ) ) ; } 
s#i2c_client_address_data struct i2c_client_address_data { const unsigned short * normal_i2c ; const unsigned short * probe ; const unsigned short * ignore ; const unsigned short * const * forces ; } 
s#i2c_driver struct i2c_driver { unsigned int class ; int ( * attach_adapter ) ( s#i2c_adapter * ) ; int ( * detach_adapter ) ( s#i2c_adapter * ) ; int ( * probe ) ( s#i2c_client * , const s#i2c_device_id * ) ; int ( * remove ) ( s#i2c_client * ) ; void ( * shutdown ) ( s#i2c_client * ) ; int ( * suspend ) ( s#i2c_client * , t#pm_message_t ) ; int ( * resume ) ( s#i2c_client * ) ; int ( * command ) ( s#i2c_client * , unsigned int , void * ) ; s#device_driver driver ; const s#i2c_device_id * id_table ; int ( * detect ) ( s#i2c_client * , int , s#i2c_board_info * ) ; const s#i2c_client_address_data * address_data ; s#list_head clients ; } 
s#i2c_client struct i2c_client { unsigned short flags ; unsigned short addr ; char name [ 20 ] ; s#i2c_adapter * adapter ; s#i2c_driver * driver ; s#device dev ; int irq ; s#list_head detected ; } 
i2c_verify_client extern s#i2c_client * i2c_verify_client ( s#device * ) 
i2c_new_device extern s#i2c_client * i2c_new_device ( s#i2c_adapter * , s#i2c_board_info const * ) 
i2c_unregister_device extern void i2c_unregister_device ( s#i2c_client * ) 
i2c_new_dummy extern s#i2c_client * i2c_new_dummy ( s#i2c_adapter * , t#u16 ) 
i2c_add_adapter extern int i2c_add_adapter ( s#i2c_adapter * ) 
i2c_add_numbered_adapter extern int i2c_add_numbered_adapter ( s#i2c_adapter * ) 
i2c_del_adapter extern int i2c_del_adapter ( s#i2c_adapter * ) 
i2c_register_driver extern int i2c_register_driver ( s#module * , s#i2c_driver * ) 
i2c_del_driver extern void i2c_del_driver ( s#i2c_driver * ) 
i2c_use_client extern s#i2c_client * i2c_use_client ( s#i2c_client * ) 
i2c_release_client extern void i2c_release_client ( s#i2c_client * ) 
i2c_clients_command extern void i2c_clients_command ( s#i2c_adapter * , unsigned int , void * ) 
i2c_transfer extern int i2c_transfer ( s#i2c_adapter * , s#i2c_msg * , int ) 
i2c_master_send extern int i2c_master_send ( s#i2c_client * , const char * , int ) 
i2c_master_recv extern int i2c_master_recv ( s#i2c_client * , char * , int ) 
i2c_new_probed_device extern s#i2c_client * i2c_new_probed_device ( s#i2c_adapter * , s#i2c_board_info * , unsigned short const * ) 
i2c_get_adapter extern s#i2c_adapter * i2c_get_adapter ( int ) 
i2c_put_adapter extern void i2c_put_adapter ( s#i2c_adapter * ) 
i2c_smbus_read_byte extern t#s32 i2c_smbus_read_byte ( s#i2c_client * ) 
i2c_smbus_write_byte extern t#s32 i2c_smbus_write_byte ( s#i2c_client * , t#u8 ) 
i2c_smbus_read_byte_data extern t#s32 i2c_smbus_read_byte_data ( s#i2c_client * , t#u8 ) 
i2c_smbus_write_byte_data extern t#s32 i2c_smbus_write_byte_data ( s#i2c_client * , t#u8 , t#u8 ) 
i2c_smbus_read_word_data extern t#s32 i2c_smbus_read_word_data ( s#i2c_client * , t#u8 ) 
i2c_smbus_write_word_data extern t#s32 i2c_smbus_write_word_data ( s#i2c_client * , t#u8 , t#u16 ) 
i2c_smbus_process_call t#s32 i2c_smbus_process_call ( s#i2c_client * , t#u8 , t#u16 ) 
i2c_smbus_read_block_data extern t#s32 i2c_smbus_read_block_data ( s#i2c_client * , t#u8 , t#u8 * ) 
i2c_smbus_write_block_data extern t#s32 i2c_smbus_write_block_data ( s#i2c_client * , t#u8 , t#u8 , const t#u8 * ) 
i2c_smbus_read_i2c_block_data extern t#s32 i2c_smbus_read_i2c_block_data ( s#i2c_client * , t#u8 , t#u8 , t#u8 * ) 
i2c_smbus_write_i2c_block_data extern t#s32 i2c_smbus_write_i2c_block_data ( s#i2c_client * , t#u8 , t#u8 , const t#u8 * ) 
i2c_smbus_xfer extern t#s32 i2c_smbus_xfer ( s#i2c_adapter * , t#u16 , unsigned short , char , t#u8 , int , u#i2c_smbus_data * ) 

/* drivers/ide/ide.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##timer_rand_state
s##blk_trace
s#ide_devset struct ide_devset { int ( * get ) ( t#ide_drive_t * ) ; int ( * set ) ( t#ide_drive_t * , int ) ; unsigned int flags ; } 
s#ide_proc_devset struct ide_proc_devset { const char * name ; const s#ide_devset * setting ; int min , max ; int ( * mulf ) ( t#ide_drive_t * ) ; int ( * divf ) ( t#ide_drive_t * ) ; } 
t#ide_hwif_t typedef s#hwif_s __attribute__ ( ( __aligned__ ( 1 << ( ( 7 ) ) ) ) ) ide_hwif_t 
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#ide_host struct ide_host { t#ide_hwif_t * ports [ 4 + 1 ] ; unsigned int n_ports ; s#device * dev [ 2 ] ; int ( * init_chipset ) ( s#pci_dev * ) ; void ( * get_lock ) ( t#irq_handler_t , void * ) ; void ( * release_lock ) ( void ) ; t#irq_handler_t irq_handler ; unsigned long host_flags ; int irq_flags ; void * host_priv ; t#ide_hwif_t * cur_port ; volatile unsigned long host_busy ; } 
s#ide_io_ports struct ide_io_ports { unsigned long data_addr ; union { unsigned long error_addr ; unsigned long feature_addr ; } ; unsigned long nsect_addr ; unsigned long lbal_addr ; unsigned long lbam_addr ; unsigned long lbah_addr ; unsigned long device_addr ; union { unsigned long status_addr ; unsigned long command_addr ; } ; unsigned long ctl_addr ; unsigned long irq_addr ; } 
t#hwif_chipset_t typedef t#u8 hwif_chipset_t 
s#ide_taskfile struct ide_taskfile { t#u8 data ; union { t#u8 error ; t#u8 feature ; } ; t#u8 nsect ; t#u8 lbal ; t#u8 lbam ; t#u8 lbah ; t#u8 device ; union { t#u8 status ; t#u8 command ; } ; } 
s#ide_cmd struct ide_cmd { s#ide_taskfile tf ; s#ide_taskfile hob ; struct { struct { t#u8 tf ; t#u8 hob ; } out , in ; } valid ; t#u16 tf_flags ; t#u8 ftf_flags ; int protocol ; int sg_nents ; int orig_sg_nents ; int sg_dma_direction ; unsigned int nbytes ; unsigned int nleft ; unsigned int last_xfer_len ; s#scatterlist * cursg ; unsigned int cursg_ofs ; s#request * rq ; } 
s#ide_tp_ops struct ide_tp_ops { void ( * exec_command ) ( s#hwif_s * , t#u8 ) ; t#u8 ( * read_status ) ( s#hwif_s * ) ; t#u8 ( * read_altstatus ) ( s#hwif_s * ) ; void ( * write_devctl ) ( s#hwif_s * , t#u8 ) ; void ( * dev_select ) ( t#ide_drive_t * ) ; void ( * tf_load ) ( t#ide_drive_t * , s#ide_taskfile * , t#u8 ) ; void ( * tf_read ) ( t#ide_drive_t * , s#ide_taskfile * , t#u8 ) ; void ( * input_data ) ( t#ide_drive_t * , s#ide_cmd * , void * , unsigned int ) ; void ( * output_data ) ( t#ide_drive_t * , s#ide_cmd * , void * , unsigned int ) ; } 
s#ide_port_ops struct ide_port_ops { void ( * init_dev ) ( t#ide_drive_t * ) ; void ( * set_pio_mode ) ( t#ide_drive_t * , const t#u8 ) ; void ( * set_dma_mode ) ( t#ide_drive_t * , const t#u8 ) ; int ( * reset_poll ) ( t#ide_drive_t * ) ; void ( * pre_reset ) ( t#ide_drive_t * ) ; void ( * resetproc ) ( t#ide_drive_t * ) ; void ( * maskproc ) ( t#ide_drive_t * , int ) ; void ( * quirkproc ) ( t#ide_drive_t * ) ; void ( * clear_irq ) ( t#ide_drive_t * ) ; int ( * test_irq ) ( s#hwif_s * ) ; t#u8 ( * mdma_filter ) ( t#ide_drive_t * ) ; t#u8 ( * udma_filter ) ( t#ide_drive_t * ) ; t#u8 ( * cable_detect ) ( s#hwif_s * ) ; } 
s#ide_dma_ops struct ide_dma_ops { void ( * dma_host_set ) ( s#ide_drive_s * , int ) ; int ( * dma_setup ) ( s#ide_drive_s * , s#ide_cmd * ) ; void ( * dma_start ) ( s#ide_drive_s * ) ; int ( * dma_end ) ( s#ide_drive_s * ) ; int ( * dma_test_irq ) ( s#ide_drive_s * ) ; void ( * dma_lost_irq ) ( s#ide_drive_s * ) ; int ( * dma_check ) ( s#ide_drive_s * , s#ide_cmd * ) ; int ( * dma_timer_expiry ) ( s#ide_drive_s * ) ; void ( * dma_clear ) ( s#ide_drive_s * ) ; t#u8 ( * dma_sff_read_status ) ( s#hwif_s * ) ; } 
s##ide_acpi_hwif_link
t#ide_startstop_t typedef enum { ide_stopped , ide_started , } ide_startstop_t 
s#hwif_s struct hwif_s { s#hwif_s * mate ; s#proc_dir_entry * proc ; s#ide_host * host ; char name [ 6 ] ; s#ide_io_ports io_ports ; unsigned long sata_scr [ ( 3 ) ] ; t#ide_drive_t * devices [ 2 + 1 ] ; unsigned long port_flags ; t#u8 major ; t#u8 index ; t#u8 channel ; t#u32 host_flags ; t#u8 pio_mask ; t#u8 ultra_mask ; t#u8 mwdma_mask ; t#u8 swdma_mask ; t#u8 cbl ; t#hwif_chipset_t chipset ; s#device * dev ; void ( * rw_disk ) ( t#ide_drive_t * , s#request * ) ; const s#ide_tp_ops * tp_ops ; const s#ide_port_ops * port_ops ; const s#ide_dma_ops * dma_ops ; unsigned int * dmatable_cpu ; t#dma_addr_t dmatable_dma ; int prd_max_nents ; int prd_ent_size ; s#scatterlist * sg_table ; int sg_max_nents ; s#ide_cmd cmd ; int rqsize ; int irq ; unsigned long dma_base ; unsigned long config_data ; unsigned long select_data ; unsigned long extra_base ; unsigned extra_ports ; unsigned present : 1 ; unsigned busy : 1 ; s#device gendev ; s#device * portdev ; s#completion gendev_rel_comp ; void * hwif_data ; s#ide_acpi_hwif_link * acpidata ; t#ide_startstop_t ( * handler ) ( t#ide_drive_t * ) ; unsigned int polling : 1 ; t#ide_drive_t * cur_dev ; s#request * rq ; s#timer_list timer ; unsigned long poll_timeout ; int ( * expiry ) ( t#ide_drive_t * ) ; int req_gen ; int req_gen_timer ; t#spinlock_t lock ; } 
s#ide_disk_ops struct ide_disk_ops { int ( * check ) ( s#ide_drive_s * , const char * ) ; int ( * get_capacity ) ( s#ide_drive_s * ) ; t#u64 ( * set_capacity ) ( s#ide_drive_s * , t#u64 ) ; void ( * setup ) ( s#ide_drive_s * ) ; void ( * flush ) ( s#ide_drive_s * ) ; int ( * init_media ) ( s#ide_drive_s * , s#gendisk * ) ; int ( * set_doorlock ) ( s#ide_drive_s * , s#gendisk * , int ) ; t#ide_startstop_t ( * do_request ) ( s#ide_drive_s * , s#request * , t#sector_t ) ; int ( * ioctl ) ( s#ide_drive_s * , s#block_device * , t#fmode_t , unsigned int , unsigned long ) ; } 
s##ide_acpi_drive_link
s#ide_atapi_pc struct ide_atapi_pc { t#u8 c [ 12 ] ; int retries ; int error ; int req_xfer ; s#request * rq ; unsigned long flags ; unsigned long timeout ; } 
s#ide_drive_s struct ide_drive_s { char name [ 4 ] ; char driver_req [ 10 ] ; s#request_queue * queue ; s#request * rq ; void * driver_data ; t#u16 * id ; s#proc_dir_entry * proc ; const s#ide_proc_devset * settings ; s#hwif_s * hwif ; const s#ide_disk_ops * disk_ops ; unsigned long dev_flags ; unsigned long sleep ; unsigned long timeout ; t#u8 special_flags ; t#u8 select ; t#u8 retry_pio ; t#u8 waiting_for_dma ; t#u8 dma ; t#u8 init_speed ; t#u8 current_speed ; t#u8 desired_speed ; t#u8 dn ; t#u8 acoustic ; t#u8 media ; t#u8 ready_stat ; t#u8 mult_count ; t#u8 mult_req ; t#u8 io_32bit ; t#u8 bad_wstat ; t#u8 head ; t#u8 sect ; t#u8 bios_head ; t#u8 bios_sect ; t#u8 pc_delay ; unsigned int bios_cyl ; unsigned int cyl ; void * drive_data ; unsigned int failures ; unsigned int max_failures ; t#u64 probed_capacity ; t#u64 capacity64 ; int lun ; int crc_count ; unsigned long debug_mask ; s#ide_acpi_drive_link * acpidata ; s#list_head list ; s#device gendev ; s#completion gendev_rel_comp ; s#ide_atapi_pc * pc ; s#ide_atapi_pc * failed_pc ; int ( * pc_callback ) ( s#ide_drive_s * , int ) ; t#ide_startstop_t ( * irq_handler ) ( s#ide_drive_s * ) ; unsigned long atapi_flags ; s#ide_atapi_pc request_sense_pc ; t#bool sense_rq_armed ; s#request sense_rq ; s#request_sense sense_data ; } 
t#ide_drive_t typedef s#ide_drive_s ide_drive_t 
ide_device_get int ide_device_get ( t#ide_drive_t * ) 
ide_device_put void ide_device_put ( t#ide_drive_t * ) 
ide_bus_type extern s#bus_type ide_bus_type 
ide_vlb_clk extern int ide_vlb_clk 
ide_pci_clk extern int ide_pci_clk 

/* drivers/ide/ide-atapi.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##ide_acpi_hwif_link
s##ide_acpi_drive_link
ide_check_atapi_device int ide_check_atapi_device ( t#ide_drive_t * , const char * ) 
ide_init_pc void ide_init_pc ( s#ide_atapi_pc * ) 
ide_queue_pc_tail int ide_queue_pc_tail ( t#ide_drive_t * , s#gendisk * , s#ide_atapi_pc * , void * , unsigned int ) 
ide_do_test_unit_ready int ide_do_test_unit_ready ( t#ide_drive_t * , s#gendisk * ) 
ide_do_start_stop int ide_do_start_stop ( t#ide_drive_t * , s#gendisk * , int ) 
ide_set_media_lock int ide_set_media_lock ( t#ide_drive_t * , s#gendisk * , int ) 
ide_create_request_sense_cmd void ide_create_request_sense_cmd ( t#ide_drive_t * , s#ide_atapi_pc * ) 
ide_prep_sense void ide_prep_sense ( t#ide_drive_t * , s#request * ) 
ide_queue_sense_rq int ide_queue_sense_rq ( t#ide_drive_t * , void * ) 
ide_retry_pc void ide_retry_pc ( t#ide_drive_t * ) 
ide_cd_expiry int ide_cd_expiry ( t#ide_drive_t * ) 
ide_cd_get_xferlen int ide_cd_get_xferlen ( s#request * ) 
ide_read_bcount_and_ireason void ide_read_bcount_and_ireason ( t#ide_drive_t * , t#u16 * , t#u8 * ) 
ide_check_ireason int ide_check_ireason ( t#ide_drive_t * , s#request * , int , int , int ) 
ide_issue_pc t#ide_startstop_t ide_issue_pc ( t#ide_drive_t * , s#ide_cmd * ) 

/* drivers/ide/ide-dma.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##ide_acpi_hwif_link
s##ide_acpi_drive_link
ide_dma_unmap_sg void ide_dma_unmap_sg ( t#ide_drive_t * , s#ide_cmd * ) 
ide_dma_off_quietly void ide_dma_off_quietly ( t#ide_drive_t * ) 
ide_dma_off void ide_dma_off ( t#ide_drive_t * ) 
__ide_dma_bad_drive int __ide_dma_bad_drive ( t#ide_drive_t * ) 
ide_dma_lost_irq void ide_dma_lost_irq ( t#ide_drive_t * ) 
ide_release_dma_engine void ide_release_dma_engine ( t#ide_hwif_t * ) 
ide_allocate_dma_engine int ide_allocate_dma_engine ( t#ide_hwif_t * ) 

/* drivers/ide/ide-dma-sff.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##blk_trace
s##timer_rand_state
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##ide_acpi_drive_link
s##ide_acpi_hwif_link
ide_dma_sff_read_status t#u8 ide_dma_sff_read_status ( t#ide_hwif_t * ) 
ide_dma_host_set void ide_dma_host_set ( t#ide_drive_t * , int ) 
ide_build_dmatable int ide_build_dmatable ( t#ide_drive_t * , s#ide_cmd * ) 
ide_dma_setup int ide_dma_setup ( t#ide_drive_t * , s#ide_cmd * ) 
ide_dma_sff_timer_expiry int ide_dma_sff_timer_expiry ( t#ide_drive_t * ) 
ide_dma_start extern void ide_dma_start ( t#ide_drive_t * ) 
ide_dma_end int ide_dma_end ( t#ide_drive_t * ) 
ide_dma_test_irq int ide_dma_test_irq ( t#ide_drive_t * ) 
sff_dma_ops extern const s#ide_dma_ops sff_dma_ops 

/* drivers/ide/ide-eh.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##ide_acpi_hwif_link
s##ide_acpi_drive_link
ide_error t#ide_startstop_t ide_error ( t#ide_drive_t * , const char * , t#u8 ) 
ide_do_reset extern t#ide_startstop_t ide_do_reset ( t#ide_drive_t * ) 

/* drivers/ide/ide-io.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##ide_acpi_hwif_link
s##ide_acpi_drive_link
ide_end_rq int ide_end_rq ( t#ide_drive_t * , s#request * , int , unsigned int ) 
ide_complete_rq int ide_complete_rq ( t#ide_drive_t * , int , unsigned int ) 
ide_map_sg void ide_map_sg ( t#ide_drive_t * , s#ide_cmd * ) 
ide_init_sg_cmd void ide_init_sg_cmd ( s#ide_cmd * , unsigned int ) 
ide_stall_queue extern void ide_stall_queue ( t#ide_drive_t * , unsigned long ) 
ide_intr extern t#irqreturn_t ide_intr ( int , void * ) 
ide_pad_transfer void ide_pad_transfer ( t#ide_drive_t * , int , int ) 

/* drivers/ide/ide-io-std.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##blk_trace
s##timer_rand_state
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##ide_acpi_drive_link
s##ide_acpi_hwif_link
ide_exec_command void ide_exec_command ( t#ide_hwif_t * , t#u8 ) 
ide_read_status t#u8 ide_read_status ( t#ide_hwif_t * ) 
ide_read_altstatus t#u8 ide_read_altstatus ( t#ide_hwif_t * ) 
ide_write_devctl void ide_write_devctl ( t#ide_hwif_t * , t#u8 ) 
ide_dev_select void ide_dev_select ( t#ide_drive_t * ) 
ide_tf_load void ide_tf_load ( t#ide_drive_t * , s#ide_taskfile * , t#u8 ) 
ide_tf_read void ide_tf_read ( t#ide_drive_t * , s#ide_taskfile * , t#u8 ) 
ide_input_data void ide_input_data ( t#ide_drive_t * , s#ide_cmd * , void * , unsigned int ) 
ide_output_data void ide_output_data ( t#ide_drive_t * , s#ide_cmd * , void * , unsigned int ) 

/* drivers/ide/ide-ioctls.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##timer_rand_state
s##blk_trace
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##ide_acpi_hwif_link
s##ide_acpi_drive_link
s#ide_ioctl_devset struct ide_ioctl_devset { unsigned int get_ioctl ; unsigned int set_ioctl ; const s#ide_devset * setting ; } 
ide_setting_ioctl int ide_setting_ioctl ( t#ide_drive_t * , s#block_device * , unsigned int , unsigned long , const s#ide_ioctl_devset * ) 
generic_ide_ioctl int generic_ide_ioctl ( t#ide_drive_t * , s#block_device * , unsigned , unsigned long ) 

/* drivers/ide/ide-iops.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##ide_acpi_hwif_link
s##ide_acpi_drive_link
ide_read_error t#u8 ide_read_error ( t#ide_drive_t * ) 
ide_fixstring extern void ide_fixstring ( t#u8 * , const int , const int ) 
ide_wait_stat int ide_wait_stat ( t#ide_startstop_t * , t#ide_drive_t * , t#u8 , t#u8 , unsigned long ) 
s#drive_list_entry struct drive_list_entry { const char * id_model ; const char * id_firmware ; } 
ide_in_drive_list int ide_in_drive_list ( t#u16 * , const s#drive_list_entry * ) 
t#ide_handler_t typedef t#ide_startstop_t ( ide_handler_t ) ( t#ide_drive_t * ) 
ide_set_handler void ide_set_handler ( t#ide_drive_t * , t#ide_handler_t * , unsigned int ) 

/* drivers/ide/ide-lib.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
ide_get_lba_addr t#u64 ide_get_lba_addr ( s#ide_cmd * , int ) 
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##ide_acpi_hwif_link
s##ide_acpi_drive_link
ide_dump_status t#u8 ide_dump_status ( t#ide_drive_t * , const char * , t#u8 ) 

/* drivers/ide/ide-probe.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##ide_acpi_hwif_link
s##ide_acpi_drive_link
ide_undecoded_slave void ide_undecoded_slave ( t#ide_drive_t * ) 
ide_register_region void ide_register_region ( s#gendisk * ) 
ide_unregister_region void ide_unregister_region ( s#gendisk * ) 
ide_init_disk void ide_init_disk ( s#gendisk * , t#ide_drive_t * ) 
s#ide_pci_enablebit struct ide_pci_enablebit { t#u8 reg ; t#u8 mask ; t#u8 val ; } 
s#ide_port_info struct ide_port_info { char * name ; int ( * init_chipset ) ( s#pci_dev * ) ; void ( * get_lock ) ( t#irq_handler_t , void * ) ; void ( * release_lock ) ( void ) ; void ( * init_iops ) ( t#ide_hwif_t * ) ; void ( * init_hwif ) ( t#ide_hwif_t * ) ; int ( * init_dma ) ( t#ide_hwif_t * , const s#ide_port_info * ) ; const s#ide_tp_ops * tp_ops ; const s#ide_port_ops * port_ops ; const s#ide_dma_ops * dma_ops ; s#ide_pci_enablebit enablebits [ 2 ] ; t#hwif_chipset_t chipset ; t#u16 max_sectors ; t#u32 host_flags ; int irq_flags ; t#u8 pio_mask ; t#u8 swdma_mask ; t#u8 mwdma_mask ; t#u8 udma_mask ; } 
s#ide_hw struct ide_hw { union { s#ide_io_ports io_ports ; unsigned long io_ports_array [ ( 10 ) ] ; } ; int irq ; s#device * dev , * parent ; unsigned long config ; } 
ide_host_alloc s#ide_host * ide_host_alloc ( const s#ide_port_info * , s#ide_hw * * , unsigned int ) 
ide_host_register int ide_host_register ( s#ide_host * , const s#ide_port_info * , s#ide_hw * * ) 
ide_host_add int ide_host_add ( const s#ide_port_info * , s#ide_hw * * , unsigned int , s#ide_host * * ) 
ide_port_unregister_devices void ide_port_unregister_devices ( t#ide_hwif_t * ) 
ide_host_free void ide_host_free ( s#ide_host * ) 
ide_host_remove void ide_host_remove ( s#ide_host * ) 
ide_port_scan void ide_port_scan ( t#ide_hwif_t * ) 

/* drivers/ide/ide-proc.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##eventfd_ctx
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##poll_table_struct
ide_capacity_proc_fops extern const s#file_operations ide_capacity_proc_fops 
ide_geometry_proc_fops extern const s#file_operations ide_geometry_proc_fops 
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##ide_acpi_hwif_link
s##ide_acpi_drive_link
t#ide_proc_entry_t typedef struct { const char * name ; t#mode_t mode ; const s#file_operations * proc_fops ; } ide_proc_entry_t 
s#ide_driver struct ide_driver { const char * version ; t#ide_startstop_t ( * do_request ) ( t#ide_drive_t * , s#request * , t#sector_t ) ; s#device_driver gen_driver ; int ( * probe ) ( t#ide_drive_t * ) ; void ( * remove ) ( t#ide_drive_t * ) ; void ( * resume ) ( t#ide_drive_t * ) ; void ( * shutdown ) ( t#ide_drive_t * ) ; t#ide_proc_entry_t * ( * proc_entries ) ( t#ide_drive_t * ) ; const s#ide_proc_devset * ( * proc_devsets ) ( t#ide_drive_t * ) ; } 
ide_proc_register_driver void ide_proc_register_driver ( t#ide_drive_t * , s#ide_driver * ) 
ide_proc_unregister_driver void ide_proc_unregister_driver ( t#ide_drive_t * , s#ide_driver * ) 

/* drivers/ide/ide-taskfile.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##timer_rand_state
s##blk_trace
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##ide_acpi_hwif_link
s##ide_acpi_drive_link
do_rw_taskfile t#ide_startstop_t do_rw_taskfile ( t#ide_drive_t * , s#ide_cmd * ) 
ide_pio_bytes void ide_pio_bytes ( t#ide_drive_t * , s#ide_cmd * , unsigned int , unsigned int ) 
ide_raw_taskfile int ide_raw_taskfile ( t#ide_drive_t * , s#ide_cmd * , t#u8 * , t#u16 ) 
ide_no_data_taskfile int ide_no_data_taskfile ( t#ide_drive_t * , s#ide_cmd * ) 

/* drivers/ide/ide-timings.o */
s#ide_timing struct ide_timing { t#u8 mode ; t#u8 setup ; t#u16 act8b ; t#u16 rec8b ; t#u16 cyc8b ; t#u16 active ; t#u16 recover ; t#u16 cycle ; t#u16 udma ; } 
ide_timing_find_mode s#ide_timing * ide_timing_find_mode ( t#u8 ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##ide_acpi_hwif_link
s##ide_acpi_drive_link
ide_pio_cycle_time t#u16 ide_pio_cycle_time ( t#ide_drive_t * , t#u8 ) 
ide_timing_merge void ide_timing_merge ( s#ide_timing * , s#ide_timing * , s#ide_timing * , unsigned int ) 
ide_timing_compute int ide_timing_compute ( t#ide_drive_t * , t#u8 , s#ide_timing * , int , int ) 

/* drivers/ide/ide-xfer-mode.o */
ide_xfer_verbose const char * ide_xfer_verbose ( t#u8 ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##ide_acpi_hwif_link
s##ide_acpi_drive_link
ide_get_best_pio_mode t#u8 ide_get_best_pio_mode ( t#ide_drive_t * , t#u8 , t#u8 ) 
ide_pio_need_iordy int ide_pio_need_iordy ( t#ide_drive_t * , const t#u8 ) 
ide_set_dma_mode int ide_set_dma_mode ( t#ide_drive_t * , t#u8 ) 
ide_set_pio void ide_set_pio ( t#ide_drive_t * , t#u8 ) 

/* drivers/ide/setup-pci.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##blk_trace
s##timer_rand_state
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##ide_acpi_drive_link
s##ide_acpi_hwif_link
ide_pci_dma_base unsigned long ide_pci_dma_base ( t#ide_hwif_t * , const s#ide_port_info * ) 
ide_pci_check_simplex int ide_pci_check_simplex ( t#ide_hwif_t * , const s#ide_port_info * ) 
ide_pci_set_master int ide_pci_set_master ( s#pci_dev * , const char * ) 
ide_setup_pci_noise void ide_setup_pci_noise ( s#pci_dev * , const s#ide_port_info * ) 
ide_pci_setup_ports void ide_pci_setup_ports ( s#pci_dev * , const s#ide_port_info * , s#ide_hw * , s#ide_hw * * ) 
ide_pci_init_two int ide_pci_init_two ( s#pci_dev * , s#pci_dev * , const s#ide_port_info * , void * ) 
ide_pci_init_one int ide_pci_init_one ( s#pci_dev * , const s#ide_port_info * , void * ) 
ide_pci_remove void ide_pci_remove ( s#pci_dev * ) 
ide_pci_suspend int ide_pci_suspend ( s#pci_dev * , t#pm_message_t ) 
ide_pci_resume int ide_pci_resume ( s#pci_dev * ) 

/* drivers/ieee1394/config_roms.o */
s##tvec_base
t#nodeid_t typedef t#u16 nodeid_t 
t#quadlet_t typedef t#u32 quadlet_t 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s#hpsb_packet struct hpsb_packet { s#list_head driver_list ; t#nodeid_t node_id ; enum { hpsb_async , hpsb_raw } __attribute__ ( ( packed ) ) type ; enum { hpsb_unused , hpsb_queued , hpsb_pending , hpsb_complete } __attribute__ ( ( packed ) ) state ; signed char tlabel ; signed char ack_code ; unsigned char tcode ; unsigned expect_response : 1 ; unsigned no_waiter : 1 ; unsigned speed_code : 2 ; s#hpsb_host * host ; unsigned int generation ; t#atomic_t refcnt ; s#list_head queue ; void ( * complete_routine ) ( void * ) ; void * complete_data ; unsigned long sendtime ; t#size_t allocated_data_size ; t#size_t data_size ; t#size_t header_size ; t#quadlet_t * data ; t#quadlet_t header [ 5 ] ; t#quadlet_t embedded_data [ 0 ] ; } 
e#devctl_cmd enum devctl_cmd { RESET_BUS , GET_CYCLE_COUNTER , SET_CYCLE_COUNTER , SET_BUS_ID , ACT_CYCLE_MASTER , CANCEL_REQUESTS , } 
s##hpsb_iso
e#isoctl_cmd enum isoctl_cmd { XMIT_INIT , XMIT_START , XMIT_STOP , XMIT_QUEUE , XMIT_SHUTDOWN , RECV_INIT , RECV_LISTEN_CHANNEL , RECV_UNLISTEN_CHANNEL , RECV_SET_CHANNEL_MASK , RECV_START , RECV_STOP , RECV_RELEASE , RECV_SHUTDOWN , RECV_FLUSH } 
s#hpsb_host_driver struct hpsb_host_driver { s#module * owner ; const char * name ; void ( * set_hw_config_rom ) ( s#hpsb_host * , t#__be32 * ) ; int ( * transmit_packet ) ( s#hpsb_host * , s#hpsb_packet * ) ; int ( * devctl ) ( s#hpsb_host * , e#devctl_cmd , int ) ; int ( * isoctl ) ( s#hpsb_iso * , e#isoctl_cmd , unsigned long ) ; t#quadlet_t ( * hw_csr_reg ) ( s#hpsb_host * , int , t#quadlet_t , t#quadlet_t ) ; } 
s##pci_dev
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##kiocb
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##class_private
s#csr1212_bus_ops struct csr1212_bus_ops { int ( * bus_read ) ( s#csr1212_csr * , t#u64 , void * , void * ) ; t#u64 ( * allocate_addr_range ) ( t#u64 , t#u32 , void * ) ; void ( * release_addr ) ( t#u64 , void * ) ; } 
s#csr1212_leaf struct csr1212_leaf { int len ; t#u32 * data ; } 
s#csr1212_dentry struct csr1212_dentry { s#csr1212_dentry * next , * prev ; s#csr1212_keyval * kv ; } 
s#csr1212_directory struct csr1212_directory { int len ; s#csr1212_dentry * dentries_head , * dentries_tail ; } 
s#csr1212_keyval struct csr1212_keyval { struct { t#u8 type ; t#u8 id ; } key ; union { t#u32 immediate ; t#u32 csr_offset ; s#csr1212_leaf leaf ; s#csr1212_directory directory ; } value ; s#csr1212_keyval * associate ; t#atomic_t refcnt ; s#csr1212_keyval * next , * prev ; t#u32 offset ; t#u8 valid ; } 
s#csr1212_cache_region struct csr1212_cache_region { s#csr1212_cache_region * next , * prev ; t#u32 offset_start ; t#u32 offset_end ; } 
s#csr1212_csr_rom_cache struct csr1212_csr_rom_cache { s#csr1212_csr_rom_cache * next , * prev ; s#csr1212_cache_region * filled_head , * filled_tail ; s#csr1212_keyval * layout_head , * layout_tail ; t#size_t size ; t#u32 offset ; s#csr1212_keyval * ext_rom ; t#size_t len ; t#u32 data [ 0 ] ; } 
s#csr1212_csr struct csr1212_csr { t#size_t bus_info_len ; t#size_t crc_len ; t#__be32 * bus_info_data ; void * private ; s#csr1212_bus_ops * ops ; s#csr1212_keyval * root_kv ; int max_rom ; s#csr1212_csr_rom_cache * cache_head , * cache_tail ; } 
s#csr_control struct csr_control { t#spinlock_t lock ; t#quadlet_t state ; t#quadlet_t node_ids ; t#quadlet_t split_timeout_hi , split_timeout_lo ; unsigned long expire ; t#quadlet_t cycle_time ; t#quadlet_t bus_time ; t#quadlet_t bus_manager_id ; t#quadlet_t bandwidth_available ; t#quadlet_t channels_available_hi , channels_available_lo ; t#quadlet_t broadcast_channel ; t#quadlet_t guid_hi , guid_lo ; t#u8 cyc_clk_acc ; t#u8 max_rec ; t#u8 max_rom ; t#u8 generation ; t#u8 lnk_spd ; unsigned long gen_timestamp [ 16 ] ; s#csr1212_csr * rom ; t#quadlet_t topology_map [ 256 ] ; t#quadlet_t speed_map [ 1024 ] ; } 
t#octlet_t typedef t#u64 octlet_t 
s#hpsb_address_ops struct hpsb_address_ops { int ( * read ) ( s#hpsb_host * , int , t#quadlet_t * , t#u64 , t#size_t , t#u16 ) ; int ( * write ) ( s#hpsb_host * , int , int , t#quadlet_t * , t#u64 , t#size_t , t#u16 ) ; int ( * lock ) ( s#hpsb_host * , int , t#quadlet_t * , t#u64 , t#quadlet_t , t#quadlet_t , int , t#u16 ) ; int ( * lock64 ) ( s#hpsb_host * , int , t#octlet_t * , t#u64 , t#octlet_t , t#octlet_t , int , t#u16 ) ; } 
s#hpsb_address_serve struct hpsb_address_serve { s#list_head host_list ; s#list_head hl_list ; const s#hpsb_address_ops * op ; s#hpsb_host * host ; t#u64 start ; t#u64 end ; } 
s#hpsb_host struct hpsb_host { s#list_head host_list ; void * hostdata ; t#atomic_t generation ; s#list_head pending_packets ; s#timer_list timeout ; unsigned long timeout_interval ; int node_count ; int selfid_count ; int nodes_active ; t#nodeid_t node_id ; t#nodeid_t irm_id ; t#nodeid_t busmgr_id ; unsigned in_bus_reset : 1 ; unsigned is_shutdown : 1 ; unsigned resume_packet_sent : 1 ; unsigned is_root : 1 ; unsigned is_cycmst : 1 ; unsigned is_irm : 1 ; unsigned is_busmgr : 1 ; int reset_retries ; t#quadlet_t * topology_map ; t#u8 * speed_map ; int id ; s#hpsb_host_driver * driver ; s#pci_dev * pdev ; s#device device ; s#device host_dev ; s#delayed_work delayed_reset ; unsigned config_roms : 31 ; unsigned update_config_rom : 1 ; s#list_head addr_space ; t#u64 low_addr_space ; t#u64 middle_addr_space ; t#u8 speed [ 0x003f ] ; t#u8 next_tl [ 0x003f ] ; struct { unsigned long map [ ( ( ( 64 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } tl_pool [ 0x003f ] ; s#csr_control csr ; s#hpsb_address_serve dummy_zero_addr ; s#hpsb_address_serve dummy_max_addr ; } 
hpsb_config_rom_ip1394_add int hpsb_config_rom_ip1394_add ( s#hpsb_host * ) 
hpsb_config_rom_ip1394_remove void hpsb_config_rom_ip1394_remove ( s#hpsb_host * ) 

/* drivers/ieee1394/ieee1394_core.o */
s##tvec_base
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
e#hpsb_iso_type enum hpsb_iso_type { HPSB_ISO_RECV = 0 , HPSB_ISO_XMIT = 1 } 
s##pci_dev
s##scatterlist
s#dma_region struct dma_region { unsigned char * kvirt ; s#pci_dev * dev ; unsigned int n_pages ; unsigned int n_dma_pages ; s#scatterlist * sglist ; int direction ; } 
s#hpsb_iso_packet_info struct hpsb_iso_packet_info { t#__u32 offset ; t#__u16 len ; t#__u16 cycle ; t#__u8 channel ; t#__u8 tag ; t#__u8 sy ; t#__u16 total_len ; } 
s#hpsb_iso struct hpsb_iso { e#hpsb_iso_type type ; s#hpsb_host * host ; void * hostdata ; void ( * callback ) ( s#hpsb_iso * ) ; t#wait_queue_head_t waitq ; int speed ; int channel ; int dma_mode ; int irq_interval ; s#dma_region data_buf ; unsigned int buf_size ; unsigned int buf_packets ; t#spinlock_t lock ; int first_packet ; int pkt_dma ; int n_ready_packets ; t#atomic_t overflows ; t#atomic_t skips ; int bytes_discarded ; unsigned int flags ; int prebuffer ; int start_cycle ; int xmit_cycle ; s#hpsb_iso_packet_info * infos ; } 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
hpsb_alloc_host s#hpsb_host * hpsb_alloc_host ( s#hpsb_host_driver * , t#size_t , s#device * ) 
hpsb_add_host int hpsb_add_host ( s#hpsb_host * ) 
hpsb_resume_host void hpsb_resume_host ( s#hpsb_host * ) 
hpsb_remove_host void hpsb_remove_host ( s#hpsb_host * ) 
hpsb_update_config_rom_image int hpsb_update_config_rom_image ( s#hpsb_host * ) 
hpsb_speedto_str extern const char * hpsb_speedto_str [ ] 
hpsb_protocol_class extern s#class * hpsb_protocol_class 
hpsb_set_packet_complete_task void hpsb_set_packet_complete_task ( s#hpsb_packet * , void ( * ) ( void * ) , void * ) 
hpsb_alloc_packet s#hpsb_packet * hpsb_alloc_packet ( t#size_t ) 
hpsb_free_packet void hpsb_free_packet ( s#hpsb_packet * ) 
hpsb_send_packet int hpsb_send_packet ( s#hpsb_packet * ) 
hpsb_reset_bus int hpsb_reset_bus ( s#hpsb_host * , int ) 
hpsb_read_cycle_timer int hpsb_read_cycle_timer ( s#hpsb_host * , t#u32 * , t#u64 * ) 
hpsb_bus_reset int hpsb_bus_reset ( s#hpsb_host * ) 
hpsb_selfid_received void hpsb_selfid_received ( s#hpsb_host * , t#quadlet_t ) 
hpsb_selfid_complete void hpsb_selfid_complete ( s#hpsb_host * , int , int ) 
hpsb_packet_sent void hpsb_packet_sent ( s#hpsb_host * , s#hpsb_packet * , int ) 
hpsb_packet_received void hpsb_packet_received ( s#hpsb_host * , t#quadlet_t * , t#size_t , int ) 
hpsb_disable_irm extern int hpsb_disable_irm 
hpsb_get_tlabel int hpsb_get_tlabel ( s#hpsb_packet * ) 
hpsb_free_tlabel void hpsb_free_tlabel ( s#hpsb_packet * ) 
hpsb_make_readpacket s#hpsb_packet * hpsb_make_readpacket ( s#hpsb_host * , t#nodeid_t , t#u64 , t#size_t ) 
hpsb_make_writepacket s#hpsb_packet * hpsb_make_writepacket ( s#hpsb_host * , t#nodeid_t , t#u64 , t#quadlet_t * , t#size_t ) 
hpsb_make_streampacket s#hpsb_packet * hpsb_make_streampacket ( s#hpsb_host * , t#u8 * , int , int , int , int ) 
hpsb_make_lockpacket s#hpsb_packet * hpsb_make_lockpacket ( s#hpsb_host * , t#nodeid_t , t#u64 , int , t#quadlet_t * , t#quadlet_t ) 
hpsb_make_lock64packet s#hpsb_packet * hpsb_make_lock64packet ( s#hpsb_host * , t#nodeid_t , t#u64 , int , t#octlet_t * , t#octlet_t ) 
hpsb_make_phypacket s#hpsb_packet * hpsb_make_phypacket ( s#hpsb_host * , t#quadlet_t ) 
hpsb_read int hpsb_read ( s#hpsb_host * , t#nodeid_t , unsigned int , t#u64 , t#quadlet_t * , t#size_t ) 
hpsb_write int hpsb_write ( s#hpsb_host * , t#nodeid_t , unsigned int , t#u64 , t#quadlet_t * , t#size_t ) 
hpsb_lock int hpsb_lock ( s#hpsb_host * , t#nodeid_t , unsigned int , t#u64 , int , t#quadlet_t * , t#quadlet_t ) 
hpsb_packet_success int hpsb_packet_success ( s#hpsb_packet * ) 
s#hpsb_highlevel struct hpsb_highlevel { const char * name ; void ( * add_host ) ( s#hpsb_host * ) ; void ( * remove_host ) ( s#hpsb_host * ) ; void ( * host_reset ) ( s#hpsb_host * ) ; void ( * fcp_request ) ( s#hpsb_host * , int , int , int , t#u8 * , t#size_t ) ; s#list_head hl_list ; s#list_head irq_list ; s#list_head addr_list ; s#list_head host_info_list ; t#rwlock_t host_info_lock ; } 
hpsb_register_highlevel void hpsb_register_highlevel ( s#hpsb_highlevel * ) 
hpsb_unregister_highlevel void hpsb_unregister_highlevel ( s#hpsb_highlevel * ) 
hpsb_register_addrspace int hpsb_register_addrspace ( s#hpsb_highlevel * , s#hpsb_host * , const s#hpsb_address_ops * , t#u64 , t#u64 ) 
hpsb_unregister_addrspace int hpsb_unregister_addrspace ( s#hpsb_highlevel * , s#hpsb_host * , t#u64 ) 
hpsb_allocate_and_register_addrspace t#u64 hpsb_allocate_and_register_addrspace ( s#hpsb_highlevel * , s#hpsb_host * , const s#hpsb_address_ops * , t#u64 , t#u64 , t#u64 , t#u64 ) 
hpsb_get_hostinfo void * hpsb_get_hostinfo ( s#hpsb_highlevel * , s#hpsb_host * ) 
hpsb_create_hostinfo void * hpsb_create_hostinfo ( s#hpsb_highlevel * , s#hpsb_host * , t#size_t ) 
hpsb_destroy_hostinfo void hpsb_destroy_hostinfo ( s#hpsb_highlevel * , s#hpsb_host * ) 
hpsb_set_hostinfo_key void hpsb_set_hostinfo_key ( s#hpsb_highlevel * , s#hpsb_host * , unsigned long ) 
hpsb_get_hostinfo_bykey void * hpsb_get_hostinfo_bykey ( s#hpsb_highlevel * , unsigned long ) 
hpsb_set_hostinfo int hpsb_set_hostinfo ( s#hpsb_highlevel * , s#hpsb_host * , void * ) 
s#bus_options struct bus_options { t#u8 irmc ; t#u8 cmc ; t#u8 isc ; t#u8 bmc ; t#u8 pmc ; t#u8 cyc_clk_acc ; t#u8 max_rom ; t#u8 generation ; t#u8 lnkspd ; t#u16 max_rec ; } 
s#node_entry struct node_entry { t#u64 guid ; t#u32 guid_vendor_id ; s#hpsb_host * host ; t#nodeid_t nodeid ; s#bus_options busopt ; t#bool needs_probe ; unsigned int generation ; t#u32 vendor_id ; s#csr1212_keyval * vendor_name_kv ; t#u32 capabilities ; s#device device ; s#device node_dev ; t#bool in_limbo ; s#csr1212_csr * csr ; } 
hpsb_node_fill_packet void hpsb_node_fill_packet ( s#node_entry * , s#hpsb_packet * ) 
hpsb_node_write int hpsb_node_write ( s#node_entry * , t#u64 , t#quadlet_t * , t#size_t ) 
s##ieee1394_device_id
s#unit_directory struct unit_directory { s#node_entry * ne ; t#octlet_t address ; t#u8 flags ; t#quadlet_t vendor_id ; s#csr1212_keyval * vendor_name_kv ; t#quadlet_t model_id ; s#csr1212_keyval * model_name_kv ; t#quadlet_t specifier_id ; t#quadlet_t version ; t#quadlet_t directory_id ; unsigned int id ; int ignore_driver ; int length ; s#device device ; s#device unit_dev ; s#csr1212_keyval * ud_kv ; t#u32 lun ; } 
s#hpsb_protocol_driver struct hpsb_protocol_driver { const char * name ; const s#ieee1394_device_id * id_table ; int ( * update ) ( s#unit_directory * ) ; s#device_driver driver ; } 
__hpsb_register_protocol int __hpsb_register_protocol ( s#hpsb_protocol_driver * , s#module * ) 
hpsb_unregister_protocol void hpsb_unregister_protocol ( s#hpsb_protocol_driver * ) 
hpsb_update_config_rom int hpsb_update_config_rom ( s#hpsb_host * , const t#quadlet_t * , t#size_t , unsigned char ) 
s#dma_prog_region struct dma_prog_region { unsigned char * kvirt ; s#pci_dev * dev ; unsigned int n_pages ; t#dma_addr_t bus_addr ; } 
dma_prog_region_init void dma_prog_region_init ( s#dma_prog_region * ) 
dma_prog_region_alloc int dma_prog_region_alloc ( s#dma_prog_region * , unsigned long , s#pci_dev * ) 
dma_prog_region_free void dma_prog_region_free ( s#dma_prog_region * ) 
dma_region_init void dma_region_init ( s#dma_region * ) 
dma_region_alloc int dma_region_alloc ( s#dma_region * , unsigned long , s#pci_dev * , int ) 
dma_region_free void dma_region_free ( s#dma_region * ) 
dma_region_sync_for_cpu void dma_region_sync_for_cpu ( s#dma_region * , unsigned long , unsigned long ) 
dma_region_sync_for_device void dma_region_sync_for_device ( s#dma_region * , unsigned long , unsigned long ) 
dma_region_mmap int dma_region_mmap ( s#dma_region * , s#file * , s#vm_area_struct * ) 
dma_region_offset_to_bus t#dma_addr_t dma_region_offset_to_bus ( s#dma_region * , unsigned long ) 
hpsb_iso_xmit_init s#hpsb_iso * hpsb_iso_xmit_init ( s#hpsb_host * , unsigned int , unsigned int , int , int , int , void ( * ) ( s#hpsb_iso * ) ) 
hpsb_iso_recv_init s#hpsb_iso * hpsb_iso_recv_init ( s#hpsb_host * , unsigned int , unsigned int , int , int , int , void ( * ) ( s#hpsb_iso * ) ) 
hpsb_iso_xmit_start int hpsb_iso_xmit_start ( s#hpsb_iso * , int , int ) 
hpsb_iso_recv_start int hpsb_iso_recv_start ( s#hpsb_iso * , int , int , int ) 
hpsb_iso_recv_listen_channel int hpsb_iso_recv_listen_channel ( s#hpsb_iso * , unsigned char ) 
hpsb_iso_recv_unlisten_channel int hpsb_iso_recv_unlisten_channel ( s#hpsb_iso * , unsigned char ) 
hpsb_iso_recv_set_channel_mask int hpsb_iso_recv_set_channel_mask ( s#hpsb_iso * , t#u64 ) 
hpsb_iso_stop void hpsb_iso_stop ( s#hpsb_iso * ) 
hpsb_iso_shutdown void hpsb_iso_shutdown ( s#hpsb_iso * ) 
hpsb_iso_xmit_queue_packet int hpsb_iso_xmit_queue_packet ( s#hpsb_iso * , t#u32 , t#u16 , t#u8 , t#u8 ) 
hpsb_iso_xmit_sync int hpsb_iso_xmit_sync ( s#hpsb_iso * ) 
hpsb_iso_recv_release_packets int hpsb_iso_recv_release_packets ( s#hpsb_iso * , unsigned int ) 
hpsb_iso_n_ready int hpsb_iso_n_ready ( s#hpsb_iso * ) 
hpsb_iso_packet_sent void hpsb_iso_packet_sent ( s#hpsb_iso * , int , int ) 
hpsb_iso_packet_received void hpsb_iso_packet_received ( s#hpsb_iso * , t#u32 , t#u16 , t#u16 , t#u16 , t#u8 , t#u8 , t#u8 ) 
hpsb_iso_wake void hpsb_iso_wake ( s#hpsb_iso * ) 
hpsb_iso_recv_flush int hpsb_iso_recv_flush ( s#hpsb_iso * ) 
csr1212_attach_keyval_to_directory extern int csr1212_attach_keyval_to_directory ( s#csr1212_keyval * , s#csr1212_keyval * ) 
csr1212_detach_keyval_from_directory extern void csr1212_detach_keyval_from_directory ( s#csr1212_keyval * , s#csr1212_keyval * ) 
csr1212_get_keyval extern s#csr1212_keyval * csr1212_get_keyval ( s#csr1212_csr * , s#csr1212_keyval * ) 
csr1212_new_directory extern s#csr1212_keyval * csr1212_new_directory ( t#u8 ) 
csr1212_parse_keyval extern int csr1212_parse_keyval ( s#csr1212_keyval * , s#csr1212_csr_rom_cache * ) 
csr1212_read extern int csr1212_read ( s#csr1212_csr * , t#u32 , void * , t#u32 ) 
csr1212_release_keyval extern void csr1212_release_keyval ( s#csr1212_keyval * ) 

/* drivers/ieee1394/ohci1394.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##kiocb
s##iovec
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
e#context_type enum context_type { DMA_CTX_ASYNC_REQ , DMA_CTX_ASYNC_RESP , DMA_CTX_ISO } 
s#dma_cmd struct dma_cmd { t#u32 control ; t#u32 address ; t#u32 branchAddress ; t#u32 status ; } 
s##dma_pool
s#dma_rcv_ctx struct dma_rcv_ctx { s#ti_ohci * ohci ; e#context_type type ; int ctx ; unsigned int num_desc ; unsigned int buf_size ; unsigned int split_buf_size ; s#dma_cmd * * prg_cpu ; t#dma_addr_t * prg_bus ; s#dma_pool * prg_pool ; t#quadlet_t * * buf_cpu ; t#dma_addr_t * buf_bus ; unsigned int buf_ind ; unsigned int buf_offset ; t#quadlet_t * spb ; t#spinlock_t lock ; s#tasklet_struct task ; int ctrlClear ; int ctrlSet ; int cmdPtr ; int ctxtMatch ; } 
s#at_dma_prg struct at_dma_prg { s#dma_cmd begin ; t#quadlet_t data [ 4 ] ; s#dma_cmd end ; t#quadlet_t pad [ 4 ] ; } 
s#dma_trm_ctx struct dma_trm_ctx { s#ti_ohci * ohci ; e#context_type type ; int ctx ; unsigned int num_desc ; s#at_dma_prg * * prg_cpu ; t#dma_addr_t * prg_bus ; s#dma_pool * prg_pool ; unsigned int prg_ind ; unsigned int sent_ind ; int free_prgs ; t#quadlet_t * branchAddrPtr ; s#list_head fifo_list ; s#list_head pending_list ; t#spinlock_t lock ; s#tasklet_struct task ; int ctrlClear ; int ctrlSet ; int cmdPtr ; } 
s#ti_ohci struct ti_ohci { s#pci_dev * dev ; enum { OHCI_INIT_ALLOC_HOST , OHCI_INIT_HAVE_MEM_REGION , OHCI_INIT_HAVE_IOMAPPING , OHCI_INIT_HAVE_CONFIG_ROM_BUFFER , OHCI_INIT_HAVE_SELFID_BUFFER , OHCI_INIT_HAVE_TXRX_BUFFERS__MAYBE , OHCI_INIT_HAVE_IRQ , OHCI_INIT_DONE , } init_state ; void * registers ; t#quadlet_t * selfid_buf_cpu ; t#dma_addr_t selfid_buf_bus ; t#quadlet_t * csr_config_rom_cpu ; t#dma_addr_t csr_config_rom_bus ; int csr_config_rom_length ; unsigned int max_packet_size ; s#dma_rcv_ctx ar_resp_context ; s#dma_rcv_ctx ar_req_context ; s#dma_trm_ctx at_resp_context ; s#dma_trm_ctx at_req_context ; int nb_iso_rcv_ctx ; unsigned long ir_ctx_usage ; unsigned long ir_multichannel_used ; t#spinlock_t IR_channel_lock ; int nb_iso_xmit_ctx ; unsigned long it_ctx_usage ; t#u64 ISO_channel_usage ; s#hpsb_host * host ; int phyid , isroot ; t#spinlock_t phy_reg_lock ; t#spinlock_t event_lock ; int self_id_errors ; s#list_head iso_tasklet_list ; t#spinlock_t iso_tasklet_list_lock ; unsigned int selfid_swap : 1 ; unsigned int no_swap_incoming : 1 ; unsigned int check_busreset : 1 ; } 
ohci1394_stop_context int ohci1394_stop_context ( s#ti_ohci * , int , char * ) 
s#ohci1394_iso_tasklet struct ohci1394_iso_tasklet { s#tasklet_struct tasklet ; s#list_head link ; int context ; enum { OHCI_ISO_TRANSMIT , OHCI_ISO_RECEIVE , OHCI_ISO_MULTICHANNEL_RECEIVE } type ; } 
ohci1394_init_iso_tasklet void ohci1394_init_iso_tasklet ( s#ohci1394_iso_tasklet * , int , void ( * ) ( unsigned long ) , unsigned long ) 
ohci1394_register_iso_tasklet int ohci1394_register_iso_tasklet ( s#ti_ohci * , s#ohci1394_iso_tasklet * ) 
ohci1394_unregister_iso_tasklet void ohci1394_unregister_iso_tasklet ( s#ti_ohci * , s#ohci1394_iso_tasklet * ) 

/* drivers/infiniband/core/addr.o */
s#rdma_addr_client struct rdma_addr_client { t#atomic_t refcount ; s#completion comp ; } 
rdma_addr_register_client void rdma_addr_register_client ( s#rdma_addr_client * ) 
rdma_addr_unregister_client void rdma_addr_unregister_client ( s#rdma_addr_client * ) 
e#rdma_node_type enum rdma_node_type { RDMA_NODE_IB_CA = 1 , RDMA_NODE_IB_SWITCH , RDMA_NODE_IB_ROUTER , RDMA_NODE_RNIC } 
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s#request_sock struct request_sock { s#request_sock * dl_next ; t#u16 mss ; t#u8 retrans ; t#u8 cookie_ts ; t#u32 window_clamp ; t#u32 rcv_wnd ; t#u32 ts_recent ; unsigned long expires ; const s#request_sock_ops * rsk_ops ; s#sock * sk ; t#u32 secid ; t#u32 peer_secid ; } 
s#request_sock_ops struct request_sock_ops { int family ; int obj_size ; s#kmem_cache * slab ; char * slab_name ; int ( * rtx_syn_ack ) ( s#sock * , s#request_sock * ) ; void ( * send_ack ) ( s#sock * , s#sk_buff * , s#request_sock * ) ; void ( * send_reset ) ( s#sock * , s#sk_buff * ) ; void ( * destructor ) ( s#request_sock * ) ; } 
s#timewait_sock_ops struct timewait_sock_ops { s#kmem_cache * twsk_slab ; char * twsk_slab_name ; unsigned int twsk_obj_size ; int ( * twsk_unique ) ( s#sock * , s#sock * , void * ) ; void ( * twsk_destructor ) ( s#sock * ) ; } 
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s#ipv4_devconf struct ipv4_devconf { void * sysctl ; int data [ __NET_IPV4_CONF_MAX - 1 ] ; unsigned long state [ ( ( ( __NET_IPV4_CONF_MAX - 1 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } 
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s#ipv6_devconf struct ipv6_devconf { t#__s32 forwarding ; t#__s32 hop_limit ; t#__s32 mtu6 ; t#__s32 accept_ra ; t#__s32 accept_redirects ; t#__s32 autoconf ; t#__s32 dad_transmits ; t#__s32 rtr_solicits ; t#__s32 rtr_solicit_interval ; t#__s32 rtr_solicit_delay ; t#__s32 force_mld_version ; t#__s32 use_tempaddr ; t#__s32 temp_valid_lft ; t#__s32 temp_prefered_lft ; t#__s32 regen_max_retry ; t#__s32 max_desync_factor ; t#__s32 max_addresses ; t#__s32 accept_ra_defrtr ; t#__s32 accept_ra_pinfo ; t#__s32 accept_ra_rtr_pref ; t#__s32 rtr_probe_interval ; t#__s32 accept_ra_rt_info_max_plen ; t#__s32 proxy_ndp ; t#__s32 accept_source_route ; t#__s32 disable_ipv6 ; t#__s32 accept_dad ; void * sysctl ; } 
s##xfrm_state
s#in6_addr struct in6_addr { union { t#__u8 u6_addr8 [ 16 ] ; t#__be16 u6_addr16 [ 8 ] ; t#__be32 u6_addr32 [ 4 ] ; } in6_u ; } 
s#flowi struct flowi { int oif ; int iif ; t#__u32 mark ; union { struct { t#__be32 daddr ; t#__be32 saddr ; t#__u8 tos ; t#__u8 scope ; } ip4_u ; struct { s#in6_addr daddr ; s#in6_addr saddr ; t#__be32 flowlabel ; } ip6_u ; struct { t#__le16 daddr ; t#__le16 saddr ; t#__u8 scope ; } dn_u ; } nl_u ; t#__u8 proto ; t#__u8 flags ; union { struct { t#__be16 sport ; t#__be16 dport ; } ports ; struct { t#__u8 type ; t#__u8 code ; } icmpt ; struct { t#__le16 sport ; t#__le16 dport ; } dnports ; t#__be32 spi ; struct { t#__u8 type ; } mht ; } uli_u ; t#__u32 secid ; } 
s#in_ifaddr struct in_ifaddr { s#in_ifaddr * ifa_next ; s#in_device * ifa_dev ; s#rcu_head rcu_head ; t#__be32 ifa_local ; t#__be32 ifa_address ; t#__be32 ifa_mask ; t#__be32 ifa_broadcast ; unsigned char ifa_scope ; unsigned char ifa_flags ; unsigned char ifa_prefixlen ; char ifa_label [ 16 ] ; } 
s##ip_mc_list
s#in_device struct in_device { s#net_device * dev ; t#atomic_t refcnt ; int dead ; s#in_ifaddr * ifa_list ; t#rwlock_t mc_list_lock ; s#ip_mc_list * mc_list ; int mc_count ; t#spinlock_t mc_tomb_lock ; s#ip_mc_list * mc_tomb ; unsigned long mr_v1_seen ; unsigned long mr_v2_seen ; unsigned long mr_maxdelay ; unsigned char mr_qrv ; unsigned char mr_gq_running ; unsigned char mr_ifc_count ; s#timer_list mr_gq_timer ; s#timer_list mr_ifc_timer ; s#neigh_parms * arp_parms ; s#ipv4_devconf cnf ; s#rcu_head rcu_head ; } 
s#inet_peer struct inet_peer { s#inet_peer * avl_left , * avl_right ; t#__be32 v4daddr ; t#__u16 avl_height ; t#__u16 ip_id_count ; s#list_head unused ; t#__u32 dtime ; t#atomic_t refcnt ; t#atomic_t rid ; t#__u32 tcp_ts ; unsigned long tcp_ts_stamp ; } 
s#rtable struct rtable { union { s#dst_entry dst ; } u ; s#flowi fl ; s#in_device * idev ; int rt_genid ; unsigned rt_flags ; t#__u16 rt_type ; t#__be32 rt_dst ; t#__be32 rt_src ; int rt_iif ; t#__be32 rt_gateway ; t#__be32 rt_spec_dst ; s#inet_peer * peer ; } 
s##dn_route
s#inet6_ifaddr struct inet6_ifaddr { s#in6_addr addr ; t#__u32 prefix_len ; t#__u32 valid_lft ; t#__u32 prefered_lft ; t#atomic_t refcnt ; t#spinlock_t lock ; t#__u8 probes ; t#__u8 flags ; t#__u16 scope ; unsigned long cstamp ; unsigned long tstamp ; s#timer_list timer ; s#inet6_dev * idev ; s#rt6_info * rt ; s#inet6_ifaddr * lst_next ; s#inet6_ifaddr * if_next ; s#inet6_ifaddr * tmp_next ; s#inet6_ifaddr * ifpub ; int regen_count ; int dead ; } 
s#ip6_sf_list struct ip6_sf_list { s#ip6_sf_list * sf_next ; s#in6_addr sf_addr ; unsigned long sf_count [ 2 ] ; unsigned char sf_gsresp ; unsigned char sf_oldin ; unsigned char sf_crcount ; } 
s#ifmcaddr6 struct ifmcaddr6 { s#in6_addr mca_addr ; s#inet6_dev * idev ; s#ifmcaddr6 * next ; s#ip6_sf_list * mca_sources ; s#ip6_sf_list * mca_tomb ; unsigned int mca_sfmode ; unsigned char mca_crcount ; unsigned long mca_sfcount [ 2 ] ; s#timer_list mca_timer ; unsigned mca_flags ; int mca_users ; t#atomic_t mca_refcnt ; t#spinlock_t mca_lock ; unsigned long mca_cstamp ; unsigned long mca_tstamp ; } 
s#ifacaddr6 struct ifacaddr6 { s#in6_addr aca_addr ; s#inet6_dev * aca_idev ; s#rt6_info * aca_rt ; s#ifacaddr6 * aca_next ; int aca_users ; t#atomic_t aca_refcnt ; t#spinlock_t aca_lock ; unsigned long aca_cstamp ; unsigned long aca_tstamp ; } 
s#ipv6_devstat struct ipv6_devstat { s#proc_dir_entry * proc_dir_entry ; __typeof__ ( s#ipstats_mib ) * ipv6 [ 2 ] ; __typeof__ ( s#icmpv6_mib ) * icmpv6 [ 2 ] ; __typeof__ ( s#icmpv6msg_mib ) * icmpv6msg [ 2 ] ; } 
s#inet6_dev struct inet6_dev { s#net_device * dev ; s#inet6_ifaddr * addr_list ; s#ifmcaddr6 * mc_list ; s#ifmcaddr6 * mc_tomb ; t#rwlock_t mc_lock ; unsigned char mc_qrv ; unsigned char mc_gq_running ; unsigned char mc_ifc_count ; unsigned long mc_v1_seen ; unsigned long mc_maxdelay ; s#timer_list mc_gq_timer ; s#timer_list mc_ifc_timer ; s#ifacaddr6 * ac_list ; t#rwlock_t lock ; t#atomic_t refcnt ; t#__u32 if_flags ; int dead ; t#u8 rndid [ 8 ] ; s#timer_list regen_timer ; s#inet6_ifaddr * tempaddr_list ; s#neigh_parms * nd_parms ; s#inet6_dev * next ; s#ipv6_devconf cnf ; s#ipv6_devstat stats ; unsigned long tstamp ; s#rcu_head rcu ; } 
s#fib6_node struct fib6_node { s#fib6_node * parent ; s#fib6_node * left ; s#fib6_node * right ; s#fib6_node * subtree ; s#rt6_info * leaf ; t#__u16 fn_bit ; t#__u16 fn_flags ; t#__u32 fn_sernum ; s#rt6_info * rr_ptr ; } 
s#fib6_table struct fib6_table { s#hlist_node tb6_hlist ; t#u32 tb6_id ; t#rwlock_t tb6_lock ; s#fib6_node tb6_root ; } 
s#rt6key struct rt6key { s#in6_addr addr ; int plen ; } 
s#rt6_info struct rt6_info { union { s#dst_entry dst ; } u ; s#inet6_dev * rt6i_idev ; s#fib6_node * rt6i_node ; s#in6_addr rt6i_gateway ; t#u32 rt6i_flags ; t#u32 rt6i_metric ; t#atomic_t rt6i_ref ; unsigned short rt6i_nfheader_len ; t#u8 rt6i_protocol ; s#fib6_table * rt6i_table ; s#rt6key rt6i_dst ; t#u32 rt6i_flow_cache_genid ; s#rt6key rt6i_src ; } 
s#rt6_statistics struct rt6_statistics { t#__u32 fib_nodes ; t#__u32 fib_route_nodes ; t#__u32 fib_rt_alloc ; t#__u32 fib_rt_entries ; t#__u32 fib_rt_cache ; t#__u32 fib_discarded_routes ; } 
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s#rdma_dev_addr struct rdma_dev_addr { unsigned char src_dev_addr [ 32 ] ; unsigned char dst_dev_addr [ 32 ] ; unsigned char broadcast [ 32 ] ; e#rdma_node_type dev_type ; s#net_device * src_dev ; } 
rdma_copy_addr int rdma_copy_addr ( s#rdma_dev_addr * , s#net_device * , const unsigned char * ) 
rdma_translate_ip int rdma_translate_ip ( s#sockaddr * , s#rdma_dev_addr * ) 
rdma_resolve_ip int rdma_resolve_ip ( s#rdma_addr_client * , s#sockaddr * , s#sockaddr * , s#rdma_dev_addr * , int , void ( * ) ( int , s#sockaddr * , s#rdma_dev_addr * , void * ) , void * ) 
rdma_addr_cancel void rdma_addr_cancel ( s#rdma_dev_addr * ) 

/* drivers/infiniband/core/cache.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s#ib_ucontext struct ib_ucontext { s#ib_device * device ; s#list_head pd_list ; s#list_head mr_list ; s#list_head mw_list ; s#list_head cq_list ; s#list_head qp_list ; s#list_head srq_list ; s#list_head ah_list ; int closing ; } 
s#ib_uobject struct ib_uobject { t#u64 user_handle ; s#ib_ucontext * context ; void * object ; s#list_head list ; int id ; s#kref ref ; s#rw_semaphore mutex ; int live ; } 
t#ib_comp_handler typedef void ( * ib_comp_handler ) ( s#ib_cq * , void * ) 
s#ib_cq struct ib_cq { s#ib_device * device ; s#ib_uobject * uobject ; t#ib_comp_handler comp_handler ; void ( * event_handler ) ( s#ib_event * , void * ) ; void * cq_context ; int cqe ; t#atomic_t usecnt ; } 
s#ib_pd struct ib_pd { s#ib_device * device ; s#ib_uobject * uobject ; t#atomic_t usecnt ; } 
s#ib_srq struct ib_srq { s#ib_device * device ; s#ib_pd * pd ; s#ib_uobject * uobject ; void ( * event_handler ) ( s#ib_event * , void * ) ; void * srq_context ; t#atomic_t usecnt ; } 
e#ib_qp_type enum ib_qp_type { IB_QPT_SMI , IB_QPT_GSI , IB_QPT_RC , IB_QPT_UC , IB_QPT_UD , IB_QPT_RAW_IPV6 , IB_QPT_RAW_ETY } 
s#ib_qp struct ib_qp { s#ib_device * device ; s#ib_pd * pd ; s#ib_cq * send_cq ; s#ib_cq * recv_cq ; s#ib_srq * srq ; s#ib_uobject * uobject ; void ( * event_handler ) ( s#ib_event * , void * ) ; void * qp_context ; t#u32 qp_num ; e#ib_qp_type qp_type ; } 
e#ib_event_type enum ib_event_type { IB_EVENT_CQ_ERR , IB_EVENT_QP_FATAL , IB_EVENT_QP_REQ_ERR , IB_EVENT_QP_ACCESS_ERR , IB_EVENT_COMM_EST , IB_EVENT_SQ_DRAINED , IB_EVENT_PATH_MIG , IB_EVENT_PATH_MIG_ERR , IB_EVENT_DEVICE_FATAL , IB_EVENT_PORT_ACTIVE , IB_EVENT_PORT_ERR , IB_EVENT_LID_CHANGE , IB_EVENT_PKEY_CHANGE , IB_EVENT_SM_CHANGE , IB_EVENT_SRQ_ERR , IB_EVENT_SRQ_LIMIT_REACHED , IB_EVENT_QP_LAST_WQE_REACHED , IB_EVENT_CLIENT_REREGISTER } 
s#ib_event struct ib_event { s#ib_device * device ; union { s#ib_cq * cq ; s#ib_qp * qp ; s#ib_srq * srq ; t#u8 port_num ; } element ; e#ib_event_type event ; } 
s#ib_event_handler struct ib_event_handler { s#ib_device * device ; void ( * handler ) ( s#ib_event_handler * , s#ib_event * ) ; s#list_head list ; } 
s#ib_pkey_cache struct ib_pkey_cache { int table_len ; t#u16 table [ 0 ] ; } 
u#ib_gid union ib_gid { t#u8 raw [ 16 ] ; struct { t#__be64 subnet_prefix ; t#__be64 interface_id ; } global ; } 
s#ib_gid_cache struct ib_gid_cache { int table_len ; u#ib_gid table [ 0 ] ; } 
s#ib_cache struct ib_cache { t#rwlock_t lock ; s#ib_event_handler event_handler ; s#ib_pkey_cache * * pkey_cache ; s#ib_gid_cache * * gid_cache ; t#u8 * lmc_cache ; } 
s##iw_cm_verbs
s#ib_protocol_stats struct ib_protocol_stats { } 
s#iw_protocol_stats struct iw_protocol_stats { t#u64 ipInReceives ; t#u64 ipInHdrErrors ; t#u64 ipInTooBigErrors ; t#u64 ipInNoRoutes ; t#u64 ipInAddrErrors ; t#u64 ipInUnknownProtos ; t#u64 ipInTruncatedPkts ; t#u64 ipInDiscards ; t#u64 ipInDelivers ; t#u64 ipOutForwDatagrams ; t#u64 ipOutRequests ; t#u64 ipOutDiscards ; t#u64 ipOutNoRoutes ; t#u64 ipReasmTimeout ; t#u64 ipReasmReqds ; t#u64 ipReasmOKs ; t#u64 ipReasmFails ; t#u64 ipFragOKs ; t#u64 ipFragFails ; t#u64 ipFragCreates ; t#u64 ipInMcastPkts ; t#u64 ipOutMcastPkts ; t#u64 ipInBcastPkts ; t#u64 ipOutBcastPkts ; t#u64 tcpRtoAlgorithm ; t#u64 tcpRtoMin ; t#u64 tcpRtoMax ; t#u64 tcpMaxConn ; t#u64 tcpActiveOpens ; t#u64 tcpPassiveOpens ; t#u64 tcpAttemptFails ; t#u64 tcpEstabResets ; t#u64 tcpCurrEstab ; t#u64 tcpInSegs ; t#u64 tcpOutSegs ; t#u64 tcpRetransSegs ; t#u64 tcpInErrs ; t#u64 tcpOutRsts ; } 
u#rdma_protocol_stats union rdma_protocol_stats { s#ib_protocol_stats ib ; s#iw_protocol_stats iw ; } 
e#ib_atomic_cap enum ib_atomic_cap { IB_ATOMIC_NONE , IB_ATOMIC_HCA , IB_ATOMIC_GLOB } 
s#ib_device_attr struct ib_device_attr { t#u64 fw_ver ; t#__be64 sys_image_guid ; t#u64 max_mr_size ; t#u64 page_size_cap ; t#u32 vendor_id ; t#u32 vendor_part_id ; t#u32 hw_ver ; int max_qp ; int max_qp_wr ; int device_cap_flags ; int max_sge ; int max_sge_rd ; int max_cq ; int max_cqe ; int max_mr ; int max_pd ; int max_qp_rd_atom ; int max_ee_rd_atom ; int max_res_rd_atom ; int max_qp_init_rd_atom ; int max_ee_init_rd_atom ; e#ib_atomic_cap atomic_cap ; int max_ee ; int max_rdd ; int max_mw ; int max_raw_ipv6_qp ; int max_raw_ethy_qp ; int max_mcast_grp ; int max_mcast_qp_attach ; int max_total_mcast_qp_attach ; int max_ah ; int max_fmr ; int max_map_per_fmr ; int max_srq ; int max_srq_wr ; int max_srq_sge ; unsigned int max_fast_reg_page_list_len ; t#u16 max_pkeys ; t#u8 local_ca_ack_delay ; } 
e#ib_port_state enum ib_port_state { IB_PORT_NOP = 0 , IB_PORT_DOWN = 1 , IB_PORT_INIT = 2 , IB_PORT_ARMED = 3 , IB_PORT_ACTIVE = 4 , IB_PORT_ACTIVE_DEFER = 5 } 
e#ib_mtu enum ib_mtu { IB_MTU_256 = 1 , IB_MTU_512 = 2 , IB_MTU_1024 = 3 , IB_MTU_2048 = 4 , IB_MTU_4096 = 5 } 
s#ib_port_attr struct ib_port_attr { e#ib_port_state state ; e#ib_mtu max_mtu ; e#ib_mtu active_mtu ; int gid_tbl_len ; t#u32 port_cap_flags ; t#u32 max_msg_sz ; t#u32 bad_pkey_cntr ; t#u32 qkey_viol_cntr ; t#u16 pkey_tbl_len ; t#u16 lid ; t#u16 sm_lid ; t#u8 lmc ; t#u8 max_vl_num ; t#u8 sm_sl ; t#u8 subnet_timeout ; t#u8 init_type_reply ; t#u8 active_width ; t#u8 active_speed ; t#u8 phys_state ; } 
s#ib_device_modify struct ib_device_modify { t#u64 sys_image_guid ; char node_desc [ 64 ] ; } 
s#ib_port_modify struct ib_port_modify { t#u32 set_port_cap_mask ; t#u32 clr_port_cap_mask ; t#u8 init_type ; } 
s#ib_udata struct ib_udata { void * inbuf ; void * outbuf ; t#size_t inlen ; t#size_t outlen ; } 
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s#ib_ah struct ib_ah { s#ib_device * device ; s#ib_pd * pd ; s#ib_uobject * uobject ; } 
s#ib_global_route struct ib_global_route { u#ib_gid dgid ; t#u32 flow_label ; t#u8 sgid_index ; t#u8 hop_limit ; t#u8 traffic_class ; } 
s#ib_ah_attr struct ib_ah_attr { s#ib_global_route grh ; t#u16 dlid ; t#u8 sl ; t#u8 src_path_bits ; t#u8 static_rate ; t#u8 ah_flags ; t#u8 port_num ; } 
s#ib_srq_attr struct ib_srq_attr { t#u32 max_wr ; t#u32 max_sge ; t#u32 srq_limit ; } 
s#ib_srq_init_attr struct ib_srq_init_attr { void ( * event_handler ) ( s#ib_event * , void * ) ; void * srq_context ; s#ib_srq_attr attr ; } 
e#ib_srq_attr_mask enum ib_srq_attr_mask { IB_SRQ_MAX_WR = 1 << 0 , IB_SRQ_LIMIT = 1 << 1 , } 
s#ib_sge struct ib_sge { t#u64 addr ; t#u32 length ; t#u32 lkey ; } 
s#ib_recv_wr struct ib_recv_wr { s#ib_recv_wr * next ; t#u64 wr_id ; s#ib_sge * sg_list ; int num_sge ; } 
s#ib_qp_cap struct ib_qp_cap { t#u32 max_send_wr ; t#u32 max_recv_wr ; t#u32 max_send_sge ; t#u32 max_recv_sge ; t#u32 max_inline_data ; } 
e#ib_sig_type enum ib_sig_type { IB_SIGNAL_ALL_WR , IB_SIGNAL_REQ_WR } 
e#ib_qp_create_flags enum ib_qp_create_flags { IB_QP_CREATE_IPOIB_UD_LSO = 1 << 0 , IB_QP_CREATE_BLOCK_MULTICAST_LOOPBACK = 1 << 1 , } 
s#ib_qp_init_attr struct ib_qp_init_attr { void ( * event_handler ) ( s#ib_event * , void * ) ; void * qp_context ; s#ib_cq * send_cq ; s#ib_cq * recv_cq ; s#ib_srq * srq ; s#ib_qp_cap cap ; e#ib_sig_type sq_sig_type ; e#ib_qp_type qp_type ; e#ib_qp_create_flags create_flags ; t#u8 port_num ; } 
e#ib_qp_state enum ib_qp_state { IB_QPS_RESET , IB_QPS_INIT , IB_QPS_RTR , IB_QPS_RTS , IB_QPS_SQD , IB_QPS_SQE , IB_QPS_ERR } 
e#ib_mig_state enum ib_mig_state { IB_MIG_MIGRATED , IB_MIG_REARM , IB_MIG_ARMED } 
s#ib_qp_attr struct ib_qp_attr { e#ib_qp_state qp_state ; e#ib_qp_state cur_qp_state ; e#ib_mtu path_mtu ; e#ib_mig_state path_mig_state ; t#u32 qkey ; t#u32 rq_psn ; t#u32 sq_psn ; t#u32 dest_qp_num ; int qp_access_flags ; s#ib_qp_cap cap ; s#ib_ah_attr ah_attr ; s#ib_ah_attr alt_ah_attr ; t#u16 pkey_index ; t#u16 alt_pkey_index ; t#u8 en_sqd_async_notify ; t#u8 sq_draining ; t#u8 max_rd_atomic ; t#u8 max_dest_rd_atomic ; t#u8 min_rnr_timer ; t#u8 port_num ; t#u8 timeout ; t#u8 retry_cnt ; t#u8 rnr_retry ; t#u8 alt_port_num ; t#u8 alt_timeout ; } 
e#ib_wr_opcode enum ib_wr_opcode { IB_WR_RDMA_WRITE , IB_WR_RDMA_WRITE_WITH_IMM , IB_WR_SEND , IB_WR_SEND_WITH_IMM , IB_WR_RDMA_READ , IB_WR_ATOMIC_CMP_AND_SWP , IB_WR_ATOMIC_FETCH_AND_ADD , IB_WR_LSO , IB_WR_SEND_WITH_INV , IB_WR_RDMA_READ_WITH_INV , IB_WR_LOCAL_INV , IB_WR_FAST_REG_MR , } 
s#ib_fast_reg_page_list struct ib_fast_reg_page_list { s#ib_device * device ; t#u64 * page_list ; unsigned int max_page_list_len ; } 
s#ib_send_wr struct ib_send_wr { s#ib_send_wr * next ; t#u64 wr_id ; s#ib_sge * sg_list ; int num_sge ; e#ib_wr_opcode opcode ; int send_flags ; union { t#__be32 imm_data ; t#u32 invalidate_rkey ; } ex ; union { struct { t#u64 remote_addr ; t#u32 rkey ; } rdma ; struct { t#u64 remote_addr ; t#u64 compare_add ; t#u64 swap ; t#u32 rkey ; } atomic ; struct { s#ib_ah * ah ; void * header ; int hlen ; int mss ; t#u32 remote_qpn ; t#u32 remote_qkey ; t#u16 pkey_index ; t#u8 port_num ; } ud ; struct { t#u64 iova_start ; s#ib_fast_reg_page_list * page_list ; unsigned int page_shift ; unsigned int page_list_len ; t#u32 length ; int access_flags ; t#u32 rkey ; } fast_reg ; } wr ; } 
e#ib_wc_status enum ib_wc_status { IB_WC_SUCCESS , IB_WC_LOC_LEN_ERR , IB_WC_LOC_QP_OP_ERR , IB_WC_LOC_EEC_OP_ERR , IB_WC_LOC_PROT_ERR , IB_WC_WR_FLUSH_ERR , IB_WC_MW_BIND_ERR , IB_WC_BAD_RESP_ERR , IB_WC_LOC_ACCESS_ERR , IB_WC_REM_INV_REQ_ERR , IB_WC_REM_ACCESS_ERR , IB_WC_REM_OP_ERR , IB_WC_RETRY_EXC_ERR , IB_WC_RNR_RETRY_EXC_ERR , IB_WC_LOC_RDD_VIOL_ERR , IB_WC_REM_INV_RD_REQ_ERR , IB_WC_REM_ABORT_ERR , IB_WC_INV_EECN_ERR , IB_WC_INV_EEC_STATE_ERR , IB_WC_FATAL_ERR , IB_WC_RESP_TIMEOUT_ERR , IB_WC_GENERAL_ERR } 
e#ib_wc_opcode enum ib_wc_opcode { IB_WC_SEND , IB_WC_RDMA_WRITE , IB_WC_RDMA_READ , IB_WC_COMP_SWAP , IB_WC_FETCH_ADD , IB_WC_BIND_MW , IB_WC_LSO , IB_WC_LOCAL_INV , IB_WC_FAST_REG_MR , IB_WC_RECV = 1 << 7 , IB_WC_RECV_RDMA_WITH_IMM } 
s#ib_wc struct ib_wc { t#u64 wr_id ; e#ib_wc_status status ; e#ib_wc_opcode opcode ; t#u32 vendor_err ; t#u32 byte_len ; s#ib_qp * qp ; union { t#__be32 imm_data ; t#u32 invalidate_rkey ; } ex ; t#u32 src_qp ; int wc_flags ; t#u16 pkey_index ; t#u16 slid ; t#u8 sl ; t#u8 dlid_path_bits ; t#u8 port_num ; int csum_ok ; } 
e#ib_cq_notify_flags enum ib_cq_notify_flags { IB_CQ_SOLICITED = 1 << 0 , IB_CQ_NEXT_COMP = 1 << 1 , IB_CQ_SOLICITED_MASK = IB_CQ_SOLICITED | IB_CQ_NEXT_COMP , IB_CQ_REPORT_MISSED_EVENTS = 1 << 2 , } 
s#ib_mr struct ib_mr { s#ib_device * device ; s#ib_pd * pd ; s#ib_uobject * uobject ; t#u32 lkey ; t#u32 rkey ; t#atomic_t usecnt ; } 
s#ib_phys_buf struct ib_phys_buf { t#u64 addr ; t#u64 size ; } 
s#ib_mr_attr struct ib_mr_attr { s#ib_pd * pd ; t#u64 device_virt_addr ; t#u64 size ; int mr_access_flags ; t#u32 lkey ; t#u32 rkey ; } 
s#ib_mw struct ib_mw { s#ib_device * device ; s#ib_pd * pd ; s#ib_uobject * uobject ; t#u32 rkey ; } 
s#ib_mw_bind struct ib_mw_bind { s#ib_mr * mr ; t#u64 wr_id ; t#u64 addr ; t#u32 length ; int send_flags ; int mw_access_flags ; } 
s#ib_fmr struct ib_fmr { s#ib_device * device ; s#ib_pd * pd ; s#list_head list ; t#u32 lkey ; t#u32 rkey ; } 
s#ib_fmr_attr struct ib_fmr_attr { int max_pages ; int max_maps ; t#u8 page_shift ; } 
s#ib_grh struct ib_grh { t#__be32 version_tclass_flow ; t#__be16 paylen ; t#u8 next_hdr ; t#u8 hop_limit ; u#ib_gid sgid ; u#ib_gid dgid ; } 
s##ib_mad
s#ib_dma_mapping_ops struct ib_dma_mapping_ops { int ( * mapping_error ) ( s#ib_device * , t#u64 ) ; t#u64 ( * map_single ) ( s#ib_device * , void * , t#size_t , e#dma_data_direction ) ; void ( * unmap_single ) ( s#ib_device * , t#u64 , t#size_t , e#dma_data_direction ) ; t#u64 ( * map_page ) ( s#ib_device * , s#page * , unsigned long , t#size_t , e#dma_data_direction ) ; void ( * unmap_page ) ( s#ib_device * , t#u64 , t#size_t , e#dma_data_direction ) ; int ( * map_sg ) ( s#ib_device * , s#scatterlist * , int , e#dma_data_direction ) ; void ( * unmap_sg ) ( s#ib_device * , s#scatterlist * , int , e#dma_data_direction ) ; t#u64 ( * dma_address ) ( s#ib_device * , s#scatterlist * ) ; unsigned int ( * dma_len ) ( s#ib_device * , s#scatterlist * ) ; void ( * sync_single_for_cpu ) ( s#ib_device * , t#u64 , t#size_t , e#dma_data_direction ) ; void ( * sync_single_for_device ) ( s#ib_device * , t#u64 , t#size_t , e#dma_data_direction ) ; void * ( * alloc_coherent ) ( s#ib_device * , t#size_t , t#u64 * , t#gfp_t ) ; void ( * free_coherent ) ( s#ib_device * , t#size_t , void * , t#u64 ) ; } 
s#ib_device struct ib_device { s#device * dma_device ; char name [ 64 ] ; s#list_head event_handler_list ; t#spinlock_t event_handler_lock ; s#list_head core_list ; s#list_head client_data_list ; t#spinlock_t client_data_lock ; s#ib_cache cache ; int * pkey_tbl_len ; int * gid_tbl_len ; int num_comp_vectors ; s#iw_cm_verbs * iwcm ; int ( * get_protocol_stats ) ( s#ib_device * , u#rdma_protocol_stats * ) ; int ( * query_device ) ( s#ib_device * , s#ib_device_attr * ) ; int ( * query_port ) ( s#ib_device * , t#u8 , s#ib_port_attr * ) ; int ( * query_gid ) ( s#ib_device * , t#u8 , int , u#ib_gid * ) ; int ( * query_pkey ) ( s#ib_device * , t#u8 , t#u16 , t#u16 * ) ; int ( * modify_device ) ( s#ib_device * , int , s#ib_device_modify * ) ; int ( * modify_port ) ( s#ib_device * , t#u8 , int , s#ib_port_modify * ) ; s#ib_ucontext * ( * alloc_ucontext ) ( s#ib_device * , s#ib_udata * ) ; int ( * dealloc_ucontext ) ( s#ib_ucontext * ) ; int ( * mmap ) ( s#ib_ucontext * , s#vm_area_struct * ) ; s#ib_pd * ( * alloc_pd ) ( s#ib_device * , s#ib_ucontext * , s#ib_udata * ) ; int ( * dealloc_pd ) ( s#ib_pd * ) ; s#ib_ah * ( * create_ah ) ( s#ib_pd * , s#ib_ah_attr * ) ; int ( * modify_ah ) ( s#ib_ah * , s#ib_ah_attr * ) ; int ( * query_ah ) ( s#ib_ah * , s#ib_ah_attr * ) ; int ( * destroy_ah ) ( s#ib_ah * ) ; s#ib_srq * ( * create_srq ) ( s#ib_pd * , s#ib_srq_init_attr * , s#ib_udata * ) ; int ( * modify_srq ) ( s#ib_srq * , s#ib_srq_attr * , e#ib_srq_attr_mask , s#ib_udata * ) ; int ( * query_srq ) ( s#ib_srq * , s#ib_srq_attr * ) ; int ( * destroy_srq ) ( s#ib_srq * ) ; int ( * post_srq_recv ) ( s#ib_srq * , s#ib_recv_wr * , s#ib_recv_wr * * ) ; s#ib_qp * ( * create_qp ) ( s#ib_pd * , s#ib_qp_init_attr * , s#ib_udata * ) ; int ( * modify_qp ) ( s#ib_qp * , s#ib_qp_attr * , int , s#ib_udata * ) ; int ( * query_qp ) ( s#ib_qp * , s#ib_qp_attr * , int , s#ib_qp_init_attr * ) ; int ( * destroy_qp ) ( s#ib_qp * ) ; int ( * post_send ) ( s#ib_qp * , s#ib_send_wr * , s#ib_send_wr * * ) ; int ( * post_recv ) ( s#ib_qp * , s#ib_recv_wr * , s#ib_recv_wr * * ) ; s#ib_cq * ( * create_cq ) ( s#ib_device * , int , int , s#ib_ucontext * , s#ib_udata * ) ; int ( * modify_cq ) ( s#ib_cq * , t#u16 , t#u16 ) ; int ( * destroy_cq ) ( s#ib_cq * ) ; int ( * resize_cq ) ( s#ib_cq * , int , s#ib_udata * ) ; int ( * poll_cq ) ( s#ib_cq * , int , s#ib_wc * ) ; int ( * peek_cq ) ( s#ib_cq * , int ) ; int ( * req_notify_cq ) ( s#ib_cq * , e#ib_cq_notify_flags ) ; int ( * req_ncomp_notif ) ( s#ib_cq * , int ) ; s#ib_mr * ( * get_dma_mr ) ( s#ib_pd * , int ) ; s#ib_mr * ( * reg_phys_mr ) ( s#ib_pd * , s#ib_phys_buf * , int , int , t#u64 * ) ; s#ib_mr * ( * reg_user_mr ) ( s#ib_pd * , t#u64 , t#u64 , t#u64 , int , s#ib_udata * ) ; int ( * query_mr ) ( s#ib_mr * , s#ib_mr_attr * ) ; int ( * dereg_mr ) ( s#ib_mr * ) ; s#ib_mr * ( * alloc_fast_reg_mr ) ( s#ib_pd * , int ) ; s#ib_fast_reg_page_list * ( * alloc_fast_reg_page_list ) ( s#ib_device * , int ) ; void ( * free_fast_reg_page_list ) ( s#ib_fast_reg_page_list * ) ; int ( * rereg_phys_mr ) ( s#ib_mr * , int , s#ib_pd * , s#ib_phys_buf * , int , int , t#u64 * ) ; s#ib_mw * ( * alloc_mw ) ( s#ib_pd * ) ; int ( * bind_mw ) ( s#ib_qp * , s#ib_mw * , s#ib_mw_bind * ) ; int ( * dealloc_mw ) ( s#ib_mw * ) ; s#ib_fmr * ( * alloc_fmr ) ( s#ib_pd * , int , s#ib_fmr_attr * ) ; int ( * map_phys_fmr ) ( s#ib_fmr * , t#u64 * , int , t#u64 ) ; int ( * unmap_fmr ) ( s#list_head * ) ; int ( * dealloc_fmr ) ( s#ib_fmr * ) ; int ( * attach_mcast ) ( s#ib_qp * , u#ib_gid * , t#u16 ) ; int ( * detach_mcast ) ( s#ib_qp * , u#ib_gid * , t#u16 ) ; int ( * process_mad ) ( s#ib_device * , int , t#u8 , s#ib_wc * , s#ib_grh * , s#ib_mad * , s#ib_mad * ) ; s#ib_dma_mapping_ops * dma_ops ; s#module * owner ; s#device dev ; s#kobject * ports_parent ; s#list_head port_list ; enum { IB_DEV_UNINITIALIZED , IB_DEV_REGISTERED , IB_DEV_UNREGISTERED } reg_state ; t#u64 uverbs_cmd_mask ; int uverbs_abi_ver ; char node_desc [ 64 ] ; t#__be64 node_guid ; t#u32 local_dma_lkey ; t#u8 node_type ; t#u8 phys_port_cnt ; } 
ib_get_cached_gid int ib_get_cached_gid ( s#ib_device * , t#u8 , int , u#ib_gid * ) 
ib_find_cached_gid int ib_find_cached_gid ( s#ib_device * , u#ib_gid * , t#u8 * , t#u16 * ) 
ib_get_cached_pkey int ib_get_cached_pkey ( s#ib_device * , t#u8 , int , t#u16 * ) 
ib_find_cached_pkey int ib_find_cached_pkey ( s#ib_device * , t#u8 , t#u16 , t#u16 * ) 
ib_get_cached_lmc int ib_get_cached_lmc ( s#ib_device * , t#u8 , t#u8 * ) 

/* drivers/infiniband/core/cm.o */
e#ib_cm_event_type enum ib_cm_event_type { IB_CM_REQ_ERROR , IB_CM_REQ_RECEIVED , IB_CM_REP_ERROR , IB_CM_REP_RECEIVED , IB_CM_RTU_RECEIVED , IB_CM_USER_ESTABLISHED , IB_CM_DREQ_ERROR , IB_CM_DREQ_RECEIVED , IB_CM_DREP_RECEIVED , IB_CM_TIMEWAIT_EXIT , IB_CM_MRA_RECEIVED , IB_CM_REJ_RECEIVED , IB_CM_LAP_ERROR , IB_CM_LAP_RECEIVED , IB_CM_APR_RECEIVED , IB_CM_SIDR_REQ_ERROR , IB_CM_SIDR_REQ_RECEIVED , IB_CM_SIDR_REP_RECEIVED } 
s#ib_sa_path_rec struct ib_sa_path_rec { t#__be64 service_id ; u#ib_gid dgid ; u#ib_gid sgid ; t#__be16 dlid ; t#__be16 slid ; int raw_traffic ; t#__be32 flow_label ; t#u8 hop_limit ; t#u8 traffic_class ; int reversible ; t#u8 numb_path ; t#__be16 pkey ; t#__be16 qos_class ; t#u8 sl ; t#u8 mtu_selector ; t#u8 mtu ; t#u8 rate_selector ; t#u8 rate ; t#u8 packet_life_time_selector ; t#u8 packet_life_time ; t#u8 preference ; } 
s#ib_cm_req_event_param struct ib_cm_req_event_param { s#ib_cm_id * listen_id ; t#u8 port ; s#ib_sa_path_rec * primary_path ; s#ib_sa_path_rec * alternate_path ; t#__be64 remote_ca_guid ; t#u32 remote_qkey ; t#u32 remote_qpn ; e#ib_qp_type qp_type ; t#u32 starting_psn ; t#u8 responder_resources ; t#u8 initiator_depth ; unsigned int local_cm_response_timeout : 5 ; unsigned int flow_control : 1 ; unsigned int remote_cm_response_timeout : 5 ; unsigned int retry_count : 3 ; unsigned int rnr_retry_count : 3 ; unsigned int srq : 1 ; } 
s#ib_cm_rep_event_param struct ib_cm_rep_event_param { t#__be64 remote_ca_guid ; t#u32 remote_qkey ; t#u32 remote_qpn ; t#u32 starting_psn ; t#u8 responder_resources ; t#u8 initiator_depth ; unsigned int target_ack_delay : 5 ; unsigned int failover_accepted : 2 ; unsigned int flow_control : 1 ; unsigned int rnr_retry_count : 3 ; unsigned int srq : 1 ; } 
e#ib_cm_rej_reason enum ib_cm_rej_reason { IB_CM_REJ_NO_QP = 1 , IB_CM_REJ_NO_EEC = 2 , IB_CM_REJ_NO_RESOURCES = 3 , IB_CM_REJ_TIMEOUT = 4 , IB_CM_REJ_UNSUPPORTED = 5 , IB_CM_REJ_INVALID_COMM_ID = 6 , IB_CM_REJ_INVALID_COMM_INSTANCE = 7 , IB_CM_REJ_INVALID_SERVICE_ID = 8 , IB_CM_REJ_INVALID_TRANSPORT_TYPE = 9 , IB_CM_REJ_STALE_CONN = 10 , IB_CM_REJ_RDC_NOT_EXIST = 11 , IB_CM_REJ_INVALID_GID = 12 , IB_CM_REJ_INVALID_LID = 13 , IB_CM_REJ_INVALID_SL = 14 , IB_CM_REJ_INVALID_TRAFFIC_CLASS = 15 , IB_CM_REJ_INVALID_HOP_LIMIT = 16 , IB_CM_REJ_INVALID_PACKET_RATE = 17 , IB_CM_REJ_INVALID_ALT_GID = 18 , IB_CM_REJ_INVALID_ALT_LID = 19 , IB_CM_REJ_INVALID_ALT_SL = 20 , IB_CM_REJ_INVALID_ALT_TRAFFIC_CLASS = 21 , IB_CM_REJ_INVALID_ALT_HOP_LIMIT = 22 , IB_CM_REJ_INVALID_ALT_PACKET_RATE = 23 , IB_CM_REJ_PORT_CM_REDIRECT = 24 , IB_CM_REJ_PORT_REDIRECT = 25 , IB_CM_REJ_INVALID_MTU = 26 , IB_CM_REJ_INSUFFICIENT_RESP_RESOURCES = 27 , IB_CM_REJ_CONSUMER_DEFINED = 28 , IB_CM_REJ_INVALID_RNR_RETRY = 29 , IB_CM_REJ_DUPLICATE_LOCAL_COMM_ID = 30 , IB_CM_REJ_INVALID_CLASS_VERSION = 31 , IB_CM_REJ_INVALID_FLOW_LABEL = 32 , IB_CM_REJ_INVALID_ALT_FLOW_LABEL = 33 } 
s#ib_cm_rej_event_param struct ib_cm_rej_event_param { e#ib_cm_rej_reason reason ; void * ari ; t#u8 ari_length ; } 
s#ib_cm_mra_event_param struct ib_cm_mra_event_param { t#u8 service_timeout ; } 
s#ib_cm_lap_event_param struct ib_cm_lap_event_param { s#ib_sa_path_rec * alternate_path ; } 
e#ib_cm_apr_status enum ib_cm_apr_status { IB_CM_APR_SUCCESS , IB_CM_APR_INVALID_COMM_ID , IB_CM_APR_UNSUPPORTED , IB_CM_APR_REJECT , IB_CM_APR_REDIRECT , IB_CM_APR_IS_CURRENT , IB_CM_APR_INVALID_QPN_EECN , IB_CM_APR_INVALID_LID , IB_CM_APR_INVALID_GID , IB_CM_APR_INVALID_FLOW_LABEL , IB_CM_APR_INVALID_TCLASS , IB_CM_APR_INVALID_HOP_LIMIT , IB_CM_APR_INVALID_PACKET_RATE , IB_CM_APR_INVALID_SL } 
s#ib_cm_apr_event_param struct ib_cm_apr_event_param { e#ib_cm_apr_status ap_status ; void * apr_info ; t#u8 info_len ; } 
s#ib_cm_sidr_req_event_param struct ib_cm_sidr_req_event_param { s#ib_cm_id * listen_id ; t#u8 port ; t#u16 pkey ; } 
e#ib_cm_sidr_status enum ib_cm_sidr_status { IB_SIDR_SUCCESS , IB_SIDR_UNSUPPORTED , IB_SIDR_REJECT , IB_SIDR_NO_QP , IB_SIDR_REDIRECT , IB_SIDR_UNSUPPORTED_VERSION } 
s#ib_cm_sidr_rep_event_param struct ib_cm_sidr_rep_event_param { e#ib_cm_sidr_status status ; t#u32 qkey ; t#u32 qpn ; void * info ; t#u8 info_len ; } 
s#ib_cm_event struct ib_cm_event { e#ib_cm_event_type event ; union { s#ib_cm_req_event_param req_rcvd ; s#ib_cm_rep_event_param rep_rcvd ; s#ib_cm_rej_event_param rej_rcvd ; s#ib_cm_mra_event_param mra_rcvd ; s#ib_cm_lap_event_param lap_rcvd ; s#ib_cm_apr_event_param apr_rcvd ; s#ib_cm_sidr_req_event_param sidr_req_rcvd ; s#ib_cm_sidr_rep_event_param sidr_rep_rcvd ; e#ib_wc_status send_status ; } param ; void * private_data ; } 
t#ib_cm_handler typedef int ( * ib_cm_handler ) ( s#ib_cm_id * , s#ib_cm_event * ) 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##ib_pkey_cache
s##ib_gid_cache
s##iw_cm_verbs
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s#ib_mad_hdr struct ib_mad_hdr { t#u8 base_version ; t#u8 mgmt_class ; t#u8 class_version ; t#u8 method ; t#__be16 status ; t#__be16 class_specific ; t#__be64 tid ; t#__be16 attr_id ; t#__be16 resv ; t#__be32 attr_mod ; } 
s#ib_mad struct ib_mad { s#ib_mad_hdr mad_hdr ; t#u8 data [ IB_MGMT_MAD_DATA ] ; } 
e#ib_cm_state enum ib_cm_state { IB_CM_IDLE , IB_CM_LISTEN , IB_CM_REQ_SENT , IB_CM_REQ_RCVD , IB_CM_MRA_REQ_SENT , IB_CM_MRA_REQ_RCVD , IB_CM_REP_SENT , IB_CM_REP_RCVD , IB_CM_MRA_REP_SENT , IB_CM_MRA_REP_RCVD , IB_CM_ESTABLISHED , IB_CM_DREQ_SENT , IB_CM_DREQ_RCVD , IB_CM_TIMEWAIT , IB_CM_SIDR_REQ_SENT , IB_CM_SIDR_REQ_RCVD } 
e#ib_cm_lap_state enum ib_cm_lap_state { IB_CM_LAP_UNINIT , IB_CM_LAP_IDLE , IB_CM_LAP_SENT , IB_CM_LAP_RCVD , IB_CM_MRA_LAP_SENT , IB_CM_MRA_LAP_RCVD , } 
s#ib_cm_id struct ib_cm_id { t#ib_cm_handler cm_handler ; void * context ; s#ib_device * device ; t#__be64 service_id ; t#__be64 service_mask ; e#ib_cm_state state ; e#ib_cm_lap_state lap_state ; t#__be32 local_id ; t#__be32 remote_id ; t#u32 remote_cm_qpn ; } 
ib_create_cm_id s#ib_cm_id * ib_create_cm_id ( s#ib_device * , t#ib_cm_handler , void * ) 
ib_destroy_cm_id void ib_destroy_cm_id ( s#ib_cm_id * ) 
s#ib_cm_compare_data struct ib_cm_compare_data { t#u8 data [ IB_CM_COMPARE_SIZE ] ; t#u8 mask [ IB_CM_COMPARE_SIZE ] ; } 
ib_cm_listen int ib_cm_listen ( s#ib_cm_id * , t#__be64 , t#__be64 , s#ib_cm_compare_data * ) 
s#ib_cm_req_param struct ib_cm_req_param { s#ib_sa_path_rec * primary_path ; s#ib_sa_path_rec * alternate_path ; t#__be64 service_id ; t#u32 qp_num ; e#ib_qp_type qp_type ; t#u32 starting_psn ; const void * private_data ; t#u8 private_data_len ; t#u8 peer_to_peer ; t#u8 responder_resources ; t#u8 initiator_depth ; t#u8 remote_cm_response_timeout ; t#u8 flow_control ; t#u8 local_cm_response_timeout ; t#u8 retry_count ; t#u8 rnr_retry_count ; t#u8 max_cm_retries ; t#u8 srq ; } 
ib_send_cm_req int ib_send_cm_req ( s#ib_cm_id * , s#ib_cm_req_param * ) 
s#ib_cm_rep_param struct ib_cm_rep_param { t#u32 qp_num ; t#u32 starting_psn ; const void * private_data ; t#u8 private_data_len ; t#u8 responder_resources ; t#u8 initiator_depth ; t#u8 failover_accepted ; t#u8 flow_control ; t#u8 rnr_retry_count ; t#u8 srq ; } 
ib_send_cm_rep int ib_send_cm_rep ( s#ib_cm_id * , s#ib_cm_rep_param * ) 
ib_send_cm_rtu int ib_send_cm_rtu ( s#ib_cm_id * , const void * , t#u8 ) 
ib_send_cm_dreq int ib_send_cm_dreq ( s#ib_cm_id * , const void * , t#u8 ) 
ib_send_cm_drep int ib_send_cm_drep ( s#ib_cm_id * , const void * , t#u8 ) 
ib_send_cm_rej int ib_send_cm_rej ( s#ib_cm_id * , e#ib_cm_rej_reason , void * , t#u8 , const void * , t#u8 ) 
ib_send_cm_mra int ib_send_cm_mra ( s#ib_cm_id * , t#u8 , const void * , t#u8 ) 
ib_send_cm_lap int ib_send_cm_lap ( s#ib_cm_id * , s#ib_sa_path_rec * , const void * , t#u8 ) 
ib_send_cm_apr int ib_send_cm_apr ( s#ib_cm_id * , e#ib_cm_apr_status , void * , t#u8 , const void * , t#u8 ) 
s#ib_cm_sidr_req_param struct ib_cm_sidr_req_param { s#ib_sa_path_rec * path ; t#__be64 service_id ; int timeout_ms ; const void * private_data ; t#u8 private_data_len ; t#u8 max_cm_retries ; } 
ib_send_cm_sidr_req int ib_send_cm_sidr_req ( s#ib_cm_id * , s#ib_cm_sidr_req_param * ) 
s#ib_cm_sidr_rep_param struct ib_cm_sidr_rep_param { t#u32 qp_num ; t#u32 qkey ; e#ib_cm_sidr_status status ; const void * info ; t#u8 info_length ; const void * private_data ; t#u8 private_data_len ; } 
ib_send_cm_sidr_rep int ib_send_cm_sidr_rep ( s#ib_cm_id * , s#ib_cm_sidr_rep_param * ) 
ib_cm_notify int ib_cm_notify ( s#ib_cm_id * , e#ib_event_type ) 
ib_cm_init_qp_attr int ib_cm_init_qp_attr ( s#ib_cm_id * , s#ib_qp_attr * , int * ) 
cm_class s#class cm_class 

/* drivers/infiniband/core/cma.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##ib_pkey_cache
s##ib_gid_cache
e#iw_cm_event_type enum iw_cm_event_type { IW_CM_EVENT_CONNECT_REQUEST = 1 , IW_CM_EVENT_CONNECT_REPLY , IW_CM_EVENT_ESTABLISHED , IW_CM_EVENT_DISCONNECT , IW_CM_EVENT_CLOSE } 
e#iw_cm_event_status enum iw_cm_event_status { IW_CM_EVENT_STATUS_OK = 0 , IW_CM_EVENT_STATUS_ACCEPTED = 0 , IW_CM_EVENT_STATUS_REJECTED , IW_CM_EVENT_STATUS_TIMEOUT , IW_CM_EVENT_STATUS_RESET , IW_CM_EVENT_STATUS_EINVAL , } 
s#in_addr struct in_addr { t#__be32 s_addr ; } 
s#sockaddr_in struct sockaddr_in { t#sa_family_t sin_family ; t#__be16 sin_port ; s#in_addr sin_addr ; unsigned char __pad [ 16 - sizeof ( short int ) - sizeof ( unsigned short int ) - sizeof ( struct in_addr ) ] ; } 
s#iw_cm_event struct iw_cm_event { e#iw_cm_event_type event ; e#iw_cm_event_status status ; s#sockaddr_in local_addr ; s#sockaddr_in remote_addr ; void * private_data ; t#u8 private_data_len ; void * provider_data ; } 
t#iw_cm_handler typedef int ( * iw_cm_handler ) ( s#iw_cm_id * , s#iw_cm_event * ) 
t#iw_event_handler typedef int ( * iw_event_handler ) ( s#iw_cm_id * , s#iw_cm_event * ) 
s#iw_cm_id struct iw_cm_id { t#iw_cm_handler cm_handler ; void * context ; s#ib_device * device ; s#sockaddr_in local_addr ; s#sockaddr_in remote_addr ; void * provider_data ; t#iw_event_handler event_handler ; void ( * add_ref ) ( s#iw_cm_id * ) ; void ( * rem_ref ) ( s#iw_cm_id * ) ; } 
s#iw_cm_conn_param struct iw_cm_conn_param { const void * private_data ; t#u16 private_data_len ; t#u32 ord ; t#u32 ird ; t#u32 qpn ; } 
s#iw_cm_verbs struct iw_cm_verbs { void ( * add_ref ) ( s#ib_qp * ) ; void ( * rem_ref ) ( s#ib_qp * ) ; s#ib_qp * ( * get_qp ) ( s#ib_device * , int ) ; int ( * connect ) ( s#iw_cm_id * , s#iw_cm_conn_param * ) ; int ( * accept ) ( s#iw_cm_id * , s#iw_cm_conn_param * ) ; int ( * reject ) ( s#iw_cm_id * , const void * , t#u8 ) ; int ( * create_listen ) ( s#iw_cm_id * , int ) ; int ( * destroy_listen ) ( s#iw_cm_id * ) ; } 
e#rdma_cm_event_type enum rdma_cm_event_type { RDMA_CM_EVENT_ADDR_RESOLVED , RDMA_CM_EVENT_ADDR_ERROR , RDMA_CM_EVENT_ROUTE_RESOLVED , RDMA_CM_EVENT_ROUTE_ERROR , RDMA_CM_EVENT_CONNECT_REQUEST , RDMA_CM_EVENT_CONNECT_RESPONSE , RDMA_CM_EVENT_CONNECT_ERROR , RDMA_CM_EVENT_UNREACHABLE , RDMA_CM_EVENT_REJECTED , RDMA_CM_EVENT_ESTABLISHED , RDMA_CM_EVENT_DISCONNECTED , RDMA_CM_EVENT_DEVICE_REMOVAL , RDMA_CM_EVENT_MULTICAST_JOIN , RDMA_CM_EVENT_MULTICAST_ERROR , RDMA_CM_EVENT_ADDR_CHANGE , RDMA_CM_EVENT_TIMEWAIT_EXIT } 
s#rdma_conn_param struct rdma_conn_param { const void * private_data ; t#u8 private_data_len ; t#u8 responder_resources ; t#u8 initiator_depth ; t#u8 flow_control ; t#u8 retry_count ; t#u8 rnr_retry_count ; t#u8 srq ; t#u32 qp_num ; } 
s#rdma_ud_param struct rdma_ud_param { const void * private_data ; t#u8 private_data_len ; s#ib_ah_attr ah_attr ; t#u32 qp_num ; t#u32 qkey ; } 
s#rdma_cm_event struct rdma_cm_event { e#rdma_cm_event_type event ; int status ; union { s#rdma_conn_param conn ; s#rdma_ud_param ud ; } param ; } 
t#rdma_cm_event_handler typedef int ( * rdma_cm_event_handler ) ( s#rdma_cm_id * , s#rdma_cm_event * ) 
s#__kernel_sockaddr_storage struct __kernel_sockaddr_storage { unsigned short ss_family ; char __data [ 128 - sizeof ( unsigned short ) ] ; } 
s##iw_handler_def
s##iw_public_data
s#inet_ehash_bucket struct inet_ehash_bucket { s#hlist_nulls_head chain ; s#hlist_nulls_head twchain ; } 
s#inet_bind_hashbucket struct inet_bind_hashbucket { t#spinlock_t lock ; s#hlist_head chain ; } 
s#inet_listen_hashbucket struct inet_listen_hashbucket { t#spinlock_t lock ; s#hlist_nulls_head head ; } 
s#inet_hashinfo struct inet_hashinfo { s#inet_ehash_bucket * ehash ; t#spinlock_t * ehash_locks ; unsigned int ehash_size ; unsigned int ehash_locks_mask ; s#inet_bind_hashbucket * bhash ; unsigned int bhash_size ; s#kmem_cache * bind_bucket_cachep ; s#inet_listen_hashbucket listening_hash [ 32 ] __attribute__ ( ( __aligned__ ( ( 1 << ( 7 ) ) ) ) ) ; t#atomic_t bsockets ; } 
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##ip_mc_list
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s#rdma_addr struct rdma_addr { s#__kernel_sockaddr_storage src_addr ; s#__kernel_sockaddr_storage dst_addr ; s#rdma_dev_addr dev_addr ; } 
s#rdma_route struct rdma_route { s#rdma_addr addr ; s#ib_sa_path_rec * path_rec ; int num_paths ; } 
e#rdma_port_space enum rdma_port_space { RDMA_PS_SDP = 0x0001 , RDMA_PS_IPOIB = 0x0002 , RDMA_PS_TCP = 0x0106 , RDMA_PS_UDP = 0x0111 , RDMA_PS_SCTP = 0x0183 } 
s#rdma_cm_id struct rdma_cm_id { s#ib_device * device ; void * context ; s#ib_qp * qp ; t#rdma_cm_event_handler event_handler ; s#rdma_route route ; e#rdma_port_space ps ; t#u8 port_num ; } 
rdma_create_id s#rdma_cm_id * rdma_create_id ( t#rdma_cm_event_handler , void * , e#rdma_port_space ) 
rdma_create_qp int rdma_create_qp ( s#rdma_cm_id * , s#ib_pd * , s#ib_qp_init_attr * ) 
rdma_destroy_qp void rdma_destroy_qp ( s#rdma_cm_id * ) 
rdma_init_qp_attr int rdma_init_qp_attr ( s#rdma_cm_id * , s#ib_qp_attr * , int * ) 
rdma_destroy_id void rdma_destroy_id ( s#rdma_cm_id * ) 
rdma_listen int rdma_listen ( s#rdma_cm_id * , int ) 
rdma_set_service_type void rdma_set_service_type ( s#rdma_cm_id * , int ) 
rdma_set_ib_paths int rdma_set_ib_paths ( s#rdma_cm_id * , s#ib_sa_path_rec * , int ) 
rdma_resolve_route int rdma_resolve_route ( s#rdma_cm_id * , int ) 
rdma_resolve_addr int rdma_resolve_addr ( s#rdma_cm_id * , s#sockaddr * , s#sockaddr * , int ) 
rdma_bind_addr int rdma_bind_addr ( s#rdma_cm_id * , s#sockaddr * ) 
rdma_connect int rdma_connect ( s#rdma_cm_id * , s#rdma_conn_param * ) 
rdma_accept int rdma_accept ( s#rdma_cm_id * , s#rdma_conn_param * ) 
rdma_notify int rdma_notify ( s#rdma_cm_id * , e#ib_event_type ) 
rdma_reject int rdma_reject ( s#rdma_cm_id * , const void * , t#u8 ) 
rdma_disconnect int rdma_disconnect ( s#rdma_cm_id * ) 
rdma_join_multicast int rdma_join_multicast ( s#rdma_cm_id * , s#sockaddr * , void * ) 
rdma_leave_multicast void rdma_leave_multicast ( s#rdma_cm_id * , s#sockaddr * ) 

/* drivers/infiniband/core/device.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##ib_pkey_cache
s##ib_gid_cache
s##iw_cm_verbs
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##ib_mad
ib_alloc_device s#ib_device * ib_alloc_device ( t#size_t ) 
ib_dealloc_device void ib_dealloc_device ( s#ib_device * ) 
ib_register_device int ib_register_device ( s#ib_device * ) 
ib_unregister_device void ib_unregister_device ( s#ib_device * ) 
s#ib_client struct ib_client { char * name ; void ( * add ) ( s#ib_device * ) ; void ( * remove ) ( s#ib_device * ) ; s#list_head list ; } 
ib_register_client int ib_register_client ( s#ib_client * ) 
ib_unregister_client void ib_unregister_client ( s#ib_client * ) 
ib_get_client_data void * ib_get_client_data ( s#ib_device * , s#ib_client * ) 
ib_set_client_data void ib_set_client_data ( s#ib_device * , s#ib_client * , void * ) 
ib_register_event_handler int ib_register_event_handler ( s#ib_event_handler * ) 
ib_unregister_event_handler int ib_unregister_event_handler ( s#ib_event_handler * ) 
ib_dispatch_event void ib_dispatch_event ( s#ib_event * ) 
ib_query_device int ib_query_device ( s#ib_device * , s#ib_device_attr * ) 
ib_query_port int ib_query_port ( s#ib_device * , t#u8 , s#ib_port_attr * ) 
ib_query_gid int ib_query_gid ( s#ib_device * , t#u8 , int , u#ib_gid * ) 
ib_query_pkey int ib_query_pkey ( s#ib_device * , t#u8 , t#u16 , t#u16 * ) 
ib_modify_device int ib_modify_device ( s#ib_device * , int , s#ib_device_modify * ) 
ib_modify_port int ib_modify_port ( s#ib_device * , t#u8 , int , s#ib_port_modify * ) 
ib_find_gid int ib_find_gid ( s#ib_device * , u#ib_gid * , t#u8 * , t#u16 * ) 
ib_find_pkey int ib_find_pkey ( s#ib_device * , t#u8 , t#u16 , t#u16 * ) 

/* drivers/infiniband/core/fmr_pool.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s#ib_fmr_pool struct ib_fmr_pool { t#spinlock_t pool_lock ; int pool_size ; int max_pages ; int max_remaps ; int dirty_watermark ; int dirty_len ; s#list_head free_list ; s#list_head dirty_list ; s#hlist_head * cache_bucket ; void ( * flush_function ) ( s#ib_fmr_pool * , void * ) ; void * flush_arg ; s#task_struct * thread ; t#atomic_t req_ser ; t#atomic_t flush_ser ; t#wait_queue_head_t force_wait ; } 
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##ib_pkey_cache
s##ib_gid_cache
s##iw_cm_verbs
s##ib_mad
e#ib_access_flags enum ib_access_flags { IB_ACCESS_LOCAL_WRITE = 1 , IB_ACCESS_REMOTE_WRITE = ( 1 << 1 ) , IB_ACCESS_REMOTE_READ = ( 1 << 2 ) , IB_ACCESS_REMOTE_ATOMIC = ( 1 << 3 ) , IB_ACCESS_MW_BIND = ( 1 << 4 ) } 
s#ib_fmr_pool_param struct ib_fmr_pool_param { int max_pages_per_fmr ; int page_shift ; e#ib_access_flags access ; int pool_size ; int dirty_watermark ; void ( * flush_function ) ( s#ib_fmr_pool * , void * ) ; void * flush_arg ; unsigned cache : 1 ; } 
ib_create_fmr_pool s#ib_fmr_pool * ib_create_fmr_pool ( s#ib_pd * , s#ib_fmr_pool_param * ) 
ib_destroy_fmr_pool void ib_destroy_fmr_pool ( s#ib_fmr_pool * ) 
ib_flush_fmr_pool int ib_flush_fmr_pool ( s#ib_fmr_pool * ) 
s#ib_pool_fmr struct ib_pool_fmr { s#ib_fmr * fmr ; s#ib_fmr_pool * pool ; s#list_head list ; s#hlist_node cache_node ; int ref_count ; int remap_count ; t#u64 io_virtual_address ; int page_list_len ; t#u64 page_list [ 0 ] ; } 
ib_fmr_pool_map_phys s#ib_pool_fmr * ib_fmr_pool_map_phys ( s#ib_fmr_pool * , t#u64 * , int , t#u64 ) 
ib_fmr_pool_unmap int ib_fmr_pool_unmap ( s#ib_pool_fmr * ) 

/* drivers/infiniband/core/iwcm.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##ib_pkey_cache
s##ib_gid_cache
iw_create_cm_id s#iw_cm_id * iw_create_cm_id ( s#ib_device * , t#iw_cm_handler , void * ) 
iw_cm_disconnect int iw_cm_disconnect ( s#iw_cm_id * , int ) 
iw_destroy_cm_id void iw_destroy_cm_id ( s#iw_cm_id * ) 
iw_cm_listen int iw_cm_listen ( s#iw_cm_id * , int ) 
iw_cm_reject int iw_cm_reject ( s#iw_cm_id * , const void * , t#u8 ) 
iw_cm_accept int iw_cm_accept ( s#iw_cm_id * , s#iw_cm_conn_param * ) 
iw_cm_connect int iw_cm_connect ( s#iw_cm_id * , s#iw_cm_conn_param * ) 
iw_cm_init_qp_attr int iw_cm_init_qp_attr ( s#iw_cm_id * , s#ib_qp_attr * , int * ) 

/* drivers/infiniband/core/mad.o */
ib_response_mad int ib_response_mad ( s#ib_mad * ) 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##ib_pkey_cache
s##ib_gid_cache
s##iw_cm_verbs
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s#ib_mad_recv_buf struct ib_mad_recv_buf { s#list_head list ; s#ib_grh * grh ; s#ib_mad * mad ; } 
s#ib_mad_recv_wc struct ib_mad_recv_wc { s#ib_wc * wc ; s#ib_mad_recv_buf recv_buf ; s#list_head rmpp_list ; int mad_len ; } 
t#ib_mad_recv_handler typedef void ( * ib_mad_recv_handler ) ( s#ib_mad_agent * , s#ib_mad_recv_wc * ) 
s#ib_mad_send_buf struct ib_mad_send_buf { s#ib_mad_send_buf * next ; void * mad ; s#ib_mad_agent * mad_agent ; s#ib_ah * ah ; void * context [ 2 ] ; int hdr_len ; int data_len ; int seg_count ; int seg_size ; int timeout_ms ; int retries ; } 
s#ib_mad_send_wc struct ib_mad_send_wc { s#ib_mad_send_buf * send_buf ; e#ib_wc_status status ; t#u32 vendor_err ; } 
t#ib_mad_send_handler typedef void ( * ib_mad_send_handler ) ( s#ib_mad_agent * , s#ib_mad_send_wc * ) 
t#ib_mad_snoop_handler typedef void ( * ib_mad_snoop_handler ) ( s#ib_mad_agent * , s#ib_mad_send_buf * , s#ib_mad_send_wc * ) 
s#ib_mad_agent struct ib_mad_agent { s#ib_device * device ; s#ib_qp * qp ; s#ib_mr * mr ; t#ib_mad_recv_handler recv_handler ; t#ib_mad_send_handler send_handler ; t#ib_mad_snoop_handler snoop_handler ; void * context ; t#u32 hi_tid ; t#u8 port_num ; t#u8 rmpp_version ; } 
s#ib_mad_reg_req struct ib_mad_reg_req { t#u8 mgmt_class ; t#u8 mgmt_class_version ; t#u8 oui [ 3 ] ; unsigned long method_mask [ ( ( ( 128 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } 
ib_register_mad_agent s#ib_mad_agent * ib_register_mad_agent ( s#ib_device * , t#u8 , e#ib_qp_type , s#ib_mad_reg_req * , t#u8 , t#ib_mad_send_handler , t#ib_mad_recv_handler , void * ) 
ib_register_mad_snoop s#ib_mad_agent * ib_register_mad_snoop ( s#ib_device * , t#u8 , e#ib_qp_type , int , t#ib_mad_snoop_handler , t#ib_mad_recv_handler , void * ) 
ib_unregister_mad_agent int ib_unregister_mad_agent ( s#ib_mad_agent * ) 
ib_create_send_mad s#ib_mad_send_buf * ib_create_send_mad ( s#ib_mad_agent * , t#u32 , t#u16 , int , int , int , t#gfp_t ) 
ib_get_mad_data_offset int ib_get_mad_data_offset ( t#u8 ) 
ib_is_mad_class_rmpp int ib_is_mad_class_rmpp ( t#u8 ) 
ib_get_rmpp_segment void * ib_get_rmpp_segment ( s#ib_mad_send_buf * , int ) 
ib_free_send_mad void ib_free_send_mad ( s#ib_mad_send_buf * ) 
ib_post_send_mad int ib_post_send_mad ( s#ib_mad_send_buf * , s#ib_mad_send_buf * * ) 
ib_free_recv_mad void ib_free_recv_mad ( s#ib_mad_recv_wc * ) 
ib_redirect_mad_qp s#ib_mad_agent * ib_redirect_mad_qp ( s#ib_qp * , t#u8 , t#ib_mad_send_handler , t#ib_mad_recv_handler , void * ) 
ib_process_mad_wc int ib_process_mad_wc ( s#ib_mad_agent * , s#ib_wc * ) 
ib_modify_mad int ib_modify_mad ( s#ib_mad_agent * , s#ib_mad_send_buf * , t#u32 ) 
ib_cancel_mad void ib_cancel_mad ( s#ib_mad_agent * , s#ib_mad_send_buf * ) 

/* drivers/infiniband/core/multicast.o */
s#ib_sa_mcmember_rec struct ib_sa_mcmember_rec { u#ib_gid mgid ; u#ib_gid port_gid ; t#__be32 qkey ; t#__be16 mlid ; t#u8 mtu_selector ; t#u8 mtu ; t#u8 traffic_class ; t#__be16 pkey ; t#u8 rate_selector ; t#u8 rate ; t#u8 packet_life_time_selector ; t#u8 packet_life_time ; t#u8 sl ; t#__be32 flow_label ; t#u8 hop_limit ; t#u8 scope ; t#u8 join_state ; int proxy_join ; } 
t#ib_sa_comp_mask typedef t#u64 ib_sa_comp_mask 
s#ib_sa_multicast struct ib_sa_multicast { s#ib_sa_mcmember_rec rec ; t#ib_sa_comp_mask comp_mask ; int ( * callback ) ( int , s#ib_sa_multicast * ) ; void * context ; } 
s#ib_sa_client struct ib_sa_client { t#atomic_t users ; s#completion comp ; } 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##ib_pkey_cache
s##ib_gid_cache
s##iw_cm_verbs
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
ib_sa_join_multicast s#ib_sa_multicast * ib_sa_join_multicast ( s#ib_sa_client * , s#ib_device * , t#u8 , s#ib_sa_mcmember_rec * , t#ib_sa_comp_mask , t#gfp_t , int ( * ) ( int , s#ib_sa_multicast * ) , void * ) 
ib_sa_free_multicast void ib_sa_free_multicast ( s#ib_sa_multicast * ) 
ib_sa_get_mcmember_rec int ib_sa_get_mcmember_rec ( s#ib_device * , t#u8 , u#ib_gid * , s#ib_sa_mcmember_rec * ) 
ib_init_ah_from_mcmember int ib_init_ah_from_mcmember ( s#ib_device * , t#u8 , s#ib_sa_mcmember_rec * , s#ib_ah_attr * ) 

/* drivers/infiniband/core/packer.o */
s#ib_field struct ib_field { t#size_t struct_offset_bytes ; t#size_t struct_size_bytes ; int offset_words ; int offset_bits ; int size_bits ; char * field_name ; } 
ib_pack void ib_pack ( const s#ib_field * , int , void * , void * ) 
ib_unpack void ib_unpack ( const s#ib_field * , int , void * , void * ) 

/* drivers/infiniband/core/sa_query.o */
ib_sa_register_client void ib_sa_register_client ( s#ib_sa_client * ) 
ib_sa_unregister_client void ib_sa_unregister_client ( s#ib_sa_client * ) 
s#ib_rmpp_hdr struct ib_rmpp_hdr { t#u8 rmpp_version ; t#u8 rmpp_type ; t#u8 rmpp_rtime_flags ; t#u8 rmpp_status ; t#__be32 seg_num ; t#__be32 paylen_newwin ; } 
s#ib_sa_hdr struct ib_sa_hdr { t#__be64 sm_key ; t#__be16 attr_offset ; t#__be16 reserved ; t#ib_sa_comp_mask comp_mask ; } 
s#ib_sa_mad struct ib_sa_mad { s#ib_mad_hdr mad_hdr ; s#ib_rmpp_hdr rmpp_hdr ; s#ib_sa_hdr sa_hdr ; t#u8 data [ IB_MGMT_SA_DATA ] ; } 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##ib_pkey_cache
s##ib_gid_cache
s##iw_cm_verbs
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s#ib_sa_sm_ah struct ib_sa_sm_ah { s#ib_ah * ah ; s#kref ref ; t#u16 pkey_index ; t#u8 src_path_mask ; } 
s#ib_sa_port struct ib_sa_port { s#ib_mad_agent * agent ; s#ib_sa_sm_ah * sm_ah ; s#work_struct update_task ; t#spinlock_t ah_lock ; t#u8 port_num ; } 
s#ib_sa_query struct ib_sa_query { void ( * callback ) ( s#ib_sa_query * , int , s#ib_sa_mad * ) ; void ( * release ) ( s#ib_sa_query * ) ; s#ib_sa_client * client ; s#ib_sa_port * port ; s#ib_mad_send_buf * mad_buf ; s#ib_sa_sm_ah * sm_ah ; int id ; } 
ib_sa_cancel_query void ib_sa_cancel_query ( int , s#ib_sa_query * ) 
ib_init_ah_from_path int ib_init_ah_from_path ( s#ib_device * , t#u8 , s#ib_sa_path_rec * , s#ib_ah_attr * ) 
ib_sa_path_rec_get int ib_sa_path_rec_get ( s#ib_sa_client * , s#ib_device * , t#u8 , s#ib_sa_path_rec * , t#ib_sa_comp_mask , int , t#gfp_t , void ( * ) ( int , s#ib_sa_path_rec * , void * ) , void * , s#ib_sa_query * * ) 
s#ib_sa_service_rec struct ib_sa_service_rec { t#u64 id ; u#ib_gid gid ; t#__be16 pkey ; t#u32 lease ; t#u8 key [ 16 ] ; t#u8 name [ 64 ] ; t#u8 data8 [ 16 ] ; t#u16 data16 [ 8 ] ; t#u32 data32 [ 4 ] ; t#u64 data64 [ 2 ] ; } 
ib_sa_service_rec_query int ib_sa_service_rec_query ( s#ib_sa_client * , s#ib_device * , t#u8 , t#u8 , s#ib_sa_service_rec * , t#ib_sa_comp_mask , int , t#gfp_t , void ( * ) ( int , s#ib_sa_service_rec * , void * ) , void * , s#ib_sa_query * * ) 

/* drivers/infiniband/core/ud_header.o */
s#ib_unpacked_lrh struct ib_unpacked_lrh { t#u8 virtual_lane ; t#u8 link_version ; t#u8 service_level ; t#u8 link_next_header ; t#__be16 destination_lid ; t#__be16 packet_length ; t#__be16 source_lid ; } 
s#ib_unpacked_grh struct ib_unpacked_grh { t#u8 ip_version ; t#u8 traffic_class ; t#__be32 flow_label ; t#__be16 payload_length ; t#u8 next_header ; t#u8 hop_limit ; u#ib_gid source_gid ; u#ib_gid destination_gid ; } 
s#ib_unpacked_bth struct ib_unpacked_bth { t#u8 opcode ; t#u8 solicited_event ; t#u8 mig_req ; t#u8 pad_count ; t#u8 transport_header_version ; t#__be16 pkey ; t#__be32 destination_qpn ; t#u8 ack_req ; t#__be32 psn ; } 
s#ib_unpacked_deth struct ib_unpacked_deth { t#__be32 qkey ; t#__be32 source_qpn ; } 
s#ib_ud_header struct ib_ud_header { s#ib_unpacked_lrh lrh ; int grh_present ; s#ib_unpacked_grh grh ; s#ib_unpacked_bth bth ; s#ib_unpacked_deth deth ; int immediate_present ; t#__be32 immediate_data ; } 
ib_ud_header_init void ib_ud_header_init ( int , int , s#ib_ud_header * ) 
ib_ud_header_pack int ib_ud_header_pack ( s#ib_ud_header * , void * ) 
ib_ud_header_unpack int ib_ud_header_unpack ( void * , s#ib_ud_header * ) 

/* drivers/infiniband/core/umem.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##ib_pkey_cache
s##ib_gid_cache
s##iw_cm_verbs
s##ib_mad
s#ib_umem struct ib_umem { s#ib_ucontext * context ; t#size_t length ; int offset ; int page_size ; int writable ; int hugetlb ; s#list_head chunk_list ; s#work_struct work ; s#mm_struct * mm ; unsigned long diff ; } 
ib_umem_get s#ib_umem * ib_umem_get ( s#ib_ucontext * , unsigned long , t#size_t , int , int ) 
ib_umem_release void ib_umem_release ( s#ib_umem * ) 
ib_umem_page_count int ib_umem_page_count ( s#ib_umem * ) 

/* drivers/infiniband/core/uverbs_marshall.o */
s#ib_uverbs_global_route struct ib_uverbs_global_route { t#__u8 dgid [ 16 ] ; t#__u32 flow_label ; t#__u8 sgid_index ; t#__u8 hop_limit ; t#__u8 traffic_class ; t#__u8 reserved ; } 
s#ib_uverbs_ah_attr struct ib_uverbs_ah_attr { s#ib_uverbs_global_route grh ; t#__u16 dlid ; t#__u8 sl ; t#__u8 src_path_bits ; t#__u8 static_rate ; t#__u8 is_global ; t#__u8 port_num ; t#__u8 reserved ; } 
ib_copy_ah_attr_to_user void ib_copy_ah_attr_to_user ( s#ib_uverbs_ah_attr * , s#ib_ah_attr * ) 
s#ib_uverbs_qp_attr struct ib_uverbs_qp_attr { t#__u32 qp_attr_mask ; t#__u32 qp_state ; t#__u32 cur_qp_state ; t#__u32 path_mtu ; t#__u32 path_mig_state ; t#__u32 qkey ; t#__u32 rq_psn ; t#__u32 sq_psn ; t#__u32 dest_qp_num ; t#__u32 qp_access_flags ; s#ib_uverbs_ah_attr ah_attr ; s#ib_uverbs_ah_attr alt_ah_attr ; t#__u32 max_send_wr ; t#__u32 max_recv_wr ; t#__u32 max_send_sge ; t#__u32 max_recv_sge ; t#__u32 max_inline_data ; t#__u16 pkey_index ; t#__u16 alt_pkey_index ; t#__u8 en_sqd_async_notify ; t#__u8 sq_draining ; t#__u8 max_rd_atomic ; t#__u8 max_dest_rd_atomic ; t#__u8 min_rnr_timer ; t#__u8 port_num ; t#__u8 timeout ; t#__u8 retry_cnt ; t#__u8 rnr_retry ; t#__u8 alt_port_num ; t#__u8 alt_timeout ; t#__u8 reserved [ 5 ] ; } 
ib_copy_qp_attr_to_user void ib_copy_qp_attr_to_user ( s#ib_uverbs_qp_attr * , s#ib_qp_attr * ) 
s#ib_user_path_rec struct ib_user_path_rec { t#__u8 dgid [ 16 ] ; t#__u8 sgid [ 16 ] ; t#__be16 dlid ; t#__be16 slid ; t#__u32 raw_traffic ; t#__be32 flow_label ; t#__u32 reversible ; t#__u32 mtu ; t#__be16 pkey ; t#__u8 hop_limit ; t#__u8 traffic_class ; t#__u8 numb_path ; t#__u8 sl ; t#__u8 mtu_selector ; t#__u8 rate_selector ; t#__u8 rate ; t#__u8 packet_life_time_selector ; t#__u8 packet_life_time ; t#__u8 preference ; } 
ib_copy_path_rec_to_user void ib_copy_path_rec_to_user ( s#ib_user_path_rec * , s#ib_sa_path_rec * ) 
ib_copy_path_rec_from_user void ib_copy_path_rec_from_user ( s#ib_sa_path_rec * , s#ib_user_path_rec * ) 

/* drivers/infiniband/core/verbs.o */
e#ib_rate enum ib_rate { IB_RATE_PORT_CURRENT = 0 , IB_RATE_2_5_GBPS = 2 , IB_RATE_5_GBPS = 5 , IB_RATE_10_GBPS = 3 , IB_RATE_20_GBPS = 6 , IB_RATE_30_GBPS = 4 , IB_RATE_40_GBPS = 7 , IB_RATE_60_GBPS = 8 , IB_RATE_80_GBPS = 9 , IB_RATE_120_GBPS = 10 } 
ib_rate_to_mult int ib_rate_to_mult ( e#ib_rate ) 
mult_to_ib_rate e#ib_rate mult_to_ib_rate ( int ) 
e#rdma_transport_type enum rdma_transport_type { RDMA_TRANSPORT_IB , RDMA_TRANSPORT_IWARP } 
rdma_node_get_transport e#rdma_transport_type rdma_node_get_transport ( e#rdma_node_type ) 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##ib_pkey_cache
s##ib_gid_cache
s##iw_cm_verbs
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##ib_mad
ib_alloc_pd s#ib_pd * ib_alloc_pd ( s#ib_device * ) 
ib_dealloc_pd int ib_dealloc_pd ( s#ib_pd * ) 
ib_create_ah s#ib_ah * ib_create_ah ( s#ib_pd * , s#ib_ah_attr * ) 
ib_init_ah_from_wc int ib_init_ah_from_wc ( s#ib_device * , t#u8 , s#ib_wc * , s#ib_grh * , s#ib_ah_attr * ) 
ib_create_ah_from_wc s#ib_ah * ib_create_ah_from_wc ( s#ib_pd * , s#ib_wc * , s#ib_grh * , t#u8 ) 
ib_modify_ah int ib_modify_ah ( s#ib_ah * , s#ib_ah_attr * ) 
ib_query_ah int ib_query_ah ( s#ib_ah * , s#ib_ah_attr * ) 
ib_destroy_ah int ib_destroy_ah ( s#ib_ah * ) 
ib_create_srq s#ib_srq * ib_create_srq ( s#ib_pd * , s#ib_srq_init_attr * ) 
ib_modify_srq int ib_modify_srq ( s#ib_srq * , s#ib_srq_attr * , e#ib_srq_attr_mask ) 
ib_query_srq int ib_query_srq ( s#ib_srq * , s#ib_srq_attr * ) 
ib_destroy_srq int ib_destroy_srq ( s#ib_srq * ) 
ib_create_qp s#ib_qp * ib_create_qp ( s#ib_pd * , s#ib_qp_init_attr * ) 
e#ib_qp_attr_mask enum ib_qp_attr_mask { IB_QP_STATE = 1 , IB_QP_CUR_STATE = ( 1 << 1 ) , IB_QP_EN_SQD_ASYNC_NOTIFY = ( 1 << 2 ) , IB_QP_ACCESS_FLAGS = ( 1 << 3 ) , IB_QP_PKEY_INDEX = ( 1 << 4 ) , IB_QP_PORT = ( 1 << 5 ) , IB_QP_QKEY = ( 1 << 6 ) , IB_QP_AV = ( 1 << 7 ) , IB_QP_PATH_MTU = ( 1 << 8 ) , IB_QP_TIMEOUT = ( 1 << 9 ) , IB_QP_RETRY_CNT = ( 1 << 10 ) , IB_QP_RNR_RETRY = ( 1 << 11 ) , IB_QP_RQ_PSN = ( 1 << 12 ) , IB_QP_MAX_QP_RD_ATOMIC = ( 1 << 13 ) , IB_QP_ALT_PATH = ( 1 << 14 ) , IB_QP_MIN_RNR_TIMER = ( 1 << 15 ) , IB_QP_SQ_PSN = ( 1 << 16 ) , IB_QP_MAX_DEST_RD_ATOMIC = ( 1 << 17 ) , IB_QP_PATH_MIG_STATE = ( 1 << 18 ) , IB_QP_CAP = ( 1 << 19 ) , IB_QP_DEST_QPN = ( 1 << 20 ) } 
ib_modify_qp_is_ok int ib_modify_qp_is_ok ( e#ib_qp_state , e#ib_qp_state , e#ib_qp_type , e#ib_qp_attr_mask ) 
ib_modify_qp int ib_modify_qp ( s#ib_qp * , s#ib_qp_attr * , int ) 
ib_query_qp int ib_query_qp ( s#ib_qp * , s#ib_qp_attr * , int , s#ib_qp_init_attr * ) 
ib_destroy_qp int ib_destroy_qp ( s#ib_qp * ) 
ib_create_cq s#ib_cq * ib_create_cq ( s#ib_device * , t#ib_comp_handler , void ( * ) ( s#ib_event * , void * ) , void * , int , int ) 
ib_modify_cq int ib_modify_cq ( s#ib_cq * , t#u16 , t#u16 ) 
ib_destroy_cq int ib_destroy_cq ( s#ib_cq * ) 
ib_resize_cq int ib_resize_cq ( s#ib_cq * , int ) 
ib_get_dma_mr s#ib_mr * ib_get_dma_mr ( s#ib_pd * , int ) 
ib_reg_phys_mr s#ib_mr * ib_reg_phys_mr ( s#ib_pd * , s#ib_phys_buf * , int , int , t#u64 * ) 
ib_rereg_phys_mr int ib_rereg_phys_mr ( s#ib_mr * , int , s#ib_pd * , s#ib_phys_buf * , int , int , t#u64 * ) 
ib_query_mr int ib_query_mr ( s#ib_mr * , s#ib_mr_attr * ) 
ib_dereg_mr int ib_dereg_mr ( s#ib_mr * ) 
ib_alloc_fast_reg_mr s#ib_mr * ib_alloc_fast_reg_mr ( s#ib_pd * , int ) 
ib_alloc_fast_reg_page_list s#ib_fast_reg_page_list * ib_alloc_fast_reg_page_list ( s#ib_device * , int ) 
ib_free_fast_reg_page_list void ib_free_fast_reg_page_list ( s#ib_fast_reg_page_list * ) 
ib_alloc_mw s#ib_mw * ib_alloc_mw ( s#ib_pd * ) 
ib_dealloc_mw int ib_dealloc_mw ( s#ib_mw * ) 
ib_alloc_fmr s#ib_fmr * ib_alloc_fmr ( s#ib_pd * , int , s#ib_fmr_attr * ) 
ib_unmap_fmr int ib_unmap_fmr ( s#list_head * ) 
ib_dealloc_fmr int ib_dealloc_fmr ( s#ib_fmr * ) 
ib_attach_mcast int ib_attach_mcast ( s#ib_qp * , u#ib_gid * , t#u16 ) 
ib_detach_mcast int ib_detach_mcast ( s#ib_qp * , u#ib_gid * , t#u16 ) 

/* drivers/infiniband/hw/ipath/ipath_driver.o */
ipath_debug extern unsigned ipath_debug 

/* drivers/input/ff-core.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
input_ff_upload int input_ff_upload ( s#input_dev * , s#ff_effect * , s#file * ) 
input_ff_erase int input_ff_erase ( s#input_dev * , int , s#file * ) 
input_ff_event int input_ff_event ( s#input_dev * , unsigned int , unsigned int , int ) 
input_ff_create int input_ff_create ( s#input_dev * , int ) 
input_ff_destroy void input_ff_destroy ( s#input_dev * ) 

/* drivers/input/ff-memless.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kiocb
s##iovec
s##poll_table_struct
s##vm_area_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##page
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##radix_tree_node
s##writeback_control
s##cdev
s##posix_acl
s##cred
s##tvec_base
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
input_ff_create_memless int input_ff_create_memless ( s#input_dev * , void * , int ( * ) ( s#input_dev * , void * , s#ff_effect * ) ) 

/* drivers/input/gameport/gameport.o */
s##tvec_base
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##bus_type_private
s##driver_private
s#gameport_driver struct gameport_driver { void * private ; char * description ; int ( * connect ) ( s#gameport * , s#gameport_driver * ) ; int ( * reconnect ) ( s#gameport * ) ; void ( * disconnect ) ( s#gameport * ) ; s#device_driver driver ; t#bool ignore ; } 
s#gameport struct gameport { void * port_data ; char name [ 32 ] ; char phys [ 32 ] ; int io ; int speed ; int fuzz ; void ( * trigger ) ( s#gameport * ) ; unsigned char ( * read ) ( s#gameport * ) ; int ( * cooked_read ) ( s#gameport * , int * , int * ) ; int ( * calibrate ) ( s#gameport * , int * , int * ) ; int ( * open ) ( s#gameport * , int ) ; void ( * close ) ( s#gameport * ) ; s#timer_list poll_timer ; unsigned int poll_interval ; t#spinlock_t timer_lock ; unsigned int poll_cnt ; void ( * poll_handler ) ( s#gameport * ) ; s#gameport * parent , * child ; s#gameport_driver * drv ; s#mutex drv_mutex ; s#device dev ; unsigned int registered ; s#list_head node ; } 
gameport_start_polling void gameport_start_polling ( s#gameport * ) 
gameport_stop_polling void gameport_stop_polling ( s#gameport * ) 
gameport_set_phys void gameport_set_phys ( s#gameport * , const char * , ... ) 
__gameport_register_port void __gameport_register_port ( s#gameport * , s#module * ) 
gameport_unregister_port void gameport_unregister_port ( s#gameport * ) 
__gameport_register_driver int __gameport_register_driver ( s#gameport_driver * , s#module * , const char * ) 
gameport_unregister_driver void gameport_unregister_driver ( s#gameport_driver * ) 
gameport_open int gameport_open ( s#gameport * , s#gameport_driver * , int ) 
gameport_close void gameport_close ( s#gameport * ) 

/* drivers/input/input.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
input_event void input_event ( s#input_dev * , unsigned int , unsigned int , int ) 
input_inject_event void input_inject_event ( s#input_handle * , unsigned int , unsigned int , int ) 
input_grab_device int input_grab_device ( s#input_handle * ) 
input_release_device void input_release_device ( s#input_handle * ) 
input_open_device int input_open_device ( s#input_handle * ) 
input_flush_device int input_flush_device ( s#input_handle * , s#file * ) 
input_close_device void input_close_device ( s#input_handle * ) 
input_get_keycode int input_get_keycode ( s#input_dev * , int , int * ) 
input_set_keycode int input_set_keycode ( s#input_dev * , int , int ) 
input_class extern s#class input_class 
input_allocate_device s#input_dev * input_allocate_device ( void ) 
input_free_device void input_free_device ( s#input_dev * ) 
input_set_capability void input_set_capability ( s#input_dev * , unsigned int , unsigned int ) 
input_register_device int __attribute__ ( ( warn_unused_result ) ) input_register_device ( s#input_dev * ) 
input_unregister_device void input_unregister_device ( s#input_dev * ) 
input_register_handler int __attribute__ ( ( warn_unused_result ) ) input_register_handler ( s#input_handler * ) 
input_unregister_handler void input_unregister_handler ( s#input_handler * ) 
input_register_handle int input_register_handle ( s#input_handle * ) 
input_unregister_handle void input_unregister_handle ( s#input_handle * ) 

/* drivers/input/input-compat.o */
t#__kernel_suseconds_t typedef long __kernel_suseconds_t 
s#timeval struct timeval { t#__kernel_time_t tv_sec ; t#__kernel_suseconds_t tv_usec ; } 
s#input_event struct input_event { s#timeval time ; t#__u16 type ; t#__u16 code ; t#__s32 value ; } 
input_event_from_user int input_event_from_user ( const char * , s#input_event * ) 
input_event_to_user int input_event_to_user ( char * , const s#input_event * ) 
input_ff_effect_from_user int input_ff_effect_from_user ( const char * , t#size_t , s#ff_effect * ) 

/* drivers/input/input-polldev.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kiocb
s##iovec
s##poll_table_struct
s##vm_area_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##page
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##radix_tree_node
s##writeback_control
s##cdev
s##posix_acl
s##cred
s##tvec_base
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
input_allocate_polled_device s#input_polled_dev * input_allocate_polled_device ( void ) 
input_free_polled_device void input_free_polled_device ( s#input_polled_dev * ) 
input_register_polled_device int input_register_polled_device ( s#input_polled_dev * ) 
input_unregister_polled_device void input_unregister_polled_device ( s#input_polled_dev * ) 

/* drivers/input/serio/i8042.o */
i8042_lock_chip void i8042_lock_chip ( void ) 
i8042_unlock_chip void i8042_unlock_chip ( void ) 
i8042_command int i8042_command ( unsigned char * , int ) 
s#serio_device_id struct serio_device_id { t#__u8 type ; t#__u8 extra ; t#__u8 id ; t#__u8 proto ; } 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##device_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##bus_type_private
s##driver_private
s#serio_driver struct serio_driver { void * private ; char * description ; s#serio_device_id * id_table ; t#bool manual_bind ; void ( * write_wakeup ) ( s#serio * ) ; t#irqreturn_t ( * interrupt ) ( s#serio * , unsigned char , unsigned int ) ; int ( * connect ) ( s#serio * , s#serio_driver * ) ; int ( * reconnect ) ( s#serio * ) ; void ( * disconnect ) ( s#serio * ) ; void ( * cleanup ) ( s#serio * ) ; s#device_driver driver ; } 
s##map_segment
s##compat_timespec
s##pollfd
s#serio struct serio { void * port_data ; char name [ 32 ] ; char phys [ 32 ] ; t#bool manual_bind ; t#bool registered ; s#serio_device_id id ; t#spinlock_t lock ; int ( * write ) ( s#serio * , unsigned char ) ; int ( * open ) ( s#serio * ) ; void ( * close ) ( s#serio * ) ; int ( * start ) ( s#serio * ) ; void ( * stop ) ( s#serio * ) ; s#serio * parent , * child ; unsigned int depth ; s#serio_driver * drv ; s#mutex drv_mutex ; s#device dev ; s#list_head node ; } 
i8042_check_port_owner t#bool i8042_check_port_owner ( const s#serio * ) 

/* drivers/input/serio/libps2.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##bus_type_private
s##driver_private
s#ps2dev struct ps2dev { s#serio * serio ; s#mutex cmd_mutex ; t#wait_queue_head_t wait ; unsigned long flags ; unsigned char cmdbuf [ 6 ] ; unsigned char cmdcnt ; unsigned char nak ; } 
ps2_sendbyte int ps2_sendbyte ( s#ps2dev * , unsigned char , int ) 
ps2_begin_command void ps2_begin_command ( s#ps2dev * ) 
ps2_end_command void ps2_end_command ( s#ps2dev * ) 
ps2_drain void ps2_drain ( s#ps2dev * , int , int ) 
ps2_is_keyboard_id int ps2_is_keyboard_id ( char ) 
__ps2_command int __ps2_command ( s#ps2dev * , unsigned char * , int ) 
ps2_command int ps2_command ( s#ps2dev * , unsigned char * , int ) 
ps2_init void ps2_init ( s#ps2dev * , s#serio * ) 
ps2_handle_ack int ps2_handle_ack ( s#ps2dev * , unsigned char ) 
ps2_handle_response int ps2_handle_response ( s#ps2dev * , unsigned char ) 
ps2_cmd_aborted void ps2_cmd_aborted ( s#ps2dev * ) 

/* drivers/input/serio/serio.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##bus_type_private
s##driver_private
serio_rescan void serio_rescan ( s#serio * ) 
serio_reconnect void serio_reconnect ( s#serio * ) 
__serio_register_port void __serio_register_port ( s#serio * , s#module * ) 
serio_unregister_port void serio_unregister_port ( s#serio * ) 
serio_unregister_child_port void serio_unregister_child_port ( s#serio * ) 
__serio_register_driver int __serio_register_driver ( s#serio_driver * , s#module * , const char * ) 
serio_unregister_driver void serio_unregister_driver ( s#serio_driver * ) 
serio_open int serio_open ( s#serio * , s#serio_driver * ) 
serio_close void serio_close ( s#serio * ) 
serio_interrupt t#irqreturn_t serio_interrupt ( s#serio * , unsigned char , unsigned int ) 

/* drivers/input/touchscreen/wm9705.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#snd_ac97_build_ops struct snd_ac97_build_ops { int ( * build_3d ) ( s#snd_ac97 * ) ; int ( * build_specific ) ( s#snd_ac97 * ) ; int ( * build_spdif ) ( s#snd_ac97 * ) ; int ( * build_post_spdif ) ( s#snd_ac97 * ) ; void ( * suspend ) ( s#snd_ac97 * ) ; void ( * resume ) ( s#snd_ac97 * ) ; void ( * update_jacks ) ( s#snd_ac97 * ) ; } 
s#snd_ac97_bus_ops struct snd_ac97_bus_ops { void ( * reset ) ( s#snd_ac97 * ) ; void ( * warm_reset ) ( s#snd_ac97 * ) ; void ( * write ) ( s#snd_ac97 * , unsigned short , unsigned short ) ; unsigned short ( * read ) ( s#snd_ac97 * , unsigned short ) ; void ( * wait ) ( s#snd_ac97 * ) ; void ( * init ) ( s#snd_ac97 * ) ; } 
s#snd_info_buffer struct snd_info_buffer { char * buffer ; unsigned int curr ; unsigned int size ; unsigned int len ; int stop ; int error ; } 
s#snd_info_entry_text struct snd_info_entry_text { void ( * read ) ( s#snd_info_entry * , s#snd_info_buffer * ) ; void ( * write ) ( s#snd_info_entry * , s#snd_info_buffer * ) ; } 
t#poll_table typedef s#poll_table_struct poll_table 
s#snd_info_entry_ops struct snd_info_entry_ops { int ( * open ) ( s#snd_info_entry * , unsigned short , void * * ) ; int ( * release ) ( s#snd_info_entry * , unsigned short , void * ) ; long ( * read ) ( s#snd_info_entry * , void * , s#file * , char * , unsigned long , unsigned long ) ; long ( * write ) ( s#snd_info_entry * , void * , s#file * , const char * , unsigned long , unsigned long ) ; long long ( * llseek ) ( s#snd_info_entry * , void * , s#file * , long long , int ) ; unsigned int ( * poll ) ( s#snd_info_entry * , void * , s#file * , t#poll_table * ) ; int ( * ioctl ) ( s#snd_info_entry * , void * , s#file * , unsigned int , unsigned long ) ; int ( * mmap ) ( s#snd_info_entry * , void * , s#inode * , s#file * , s#vm_area_struct * ) ; } 
s##proc_dir_entry
s#snd_info_entry struct snd_info_entry { const char * name ; t#mode_t mode ; long size ; unsigned short content ; union { s#snd_info_entry_text text ; s#snd_info_entry_ops * ops ; } c ; s#snd_info_entry * parent ; s#snd_card * card ; s#module * module ; void * private_data ; void ( * private_free ) ( s#snd_info_entry * ) ; s#proc_dir_entry * p ; s#mutex access ; s#list_head children ; s#list_head list ; } 
s##snd_shutdown_f_ops
s##snd_mixer_oss
s#snd_card struct snd_card { int number ; char id [ 16 ] ; char driver [ 16 ] ; char shortname [ 32 ] ; char longname [ 80 ] ; char mixername [ 80 ] ; char components [ 128 ] ; s#module * module ; void * private_data ; void ( * private_free ) ( s#snd_card * ) ; s#list_head devices ; unsigned int last_numid ; s#rw_semaphore controls_rwsem ; t#rwlock_t ctl_files_rwlock ; int controls_count ; int user_ctl_count ; s#list_head controls ; s#list_head ctl_files ; s#snd_info_entry * proc_root ; s#snd_info_entry * proc_id ; s#proc_dir_entry * proc_root_link ; s#list_head files_list ; s#snd_shutdown_f_ops * s_f_ops ; t#spinlock_t files_lock ; int shutdown ; int free_on_last_close ; t#wait_queue_head_t shutdown_sleep ; s#device * dev ; s#device * card_dev ; unsigned int power_state ; s#mutex power_lock ; t#wait_queue_head_t power_sleep ; s#snd_mixer_oss * mixer_oss ; int mixer_oss_change_count ; } 
s#ac97_pcm struct ac97_pcm { s#snd_ac97_bus * bus ; unsigned int stream : 1 , exclusive : 1 , copy_flag : 1 , spdif : 1 ; unsigned short aslots ; unsigned short cur_dbl ; unsigned int rates ; struct { unsigned short slots ; unsigned short rslots [ 4 ] ; unsigned char rate_table [ 4 ] ; s#snd_ac97 * codec [ 4 ] ; } r [ 2 ] ; unsigned long private_value ; } 
s#snd_ac97_bus struct snd_ac97_bus { s#snd_ac97_bus_ops * ops ; void * private_data ; void ( * private_free ) ( s#snd_ac97_bus * ) ; s#snd_card * card ; unsigned short num ; unsigned short no_vra : 1 , dra : 1 , isdin : 1 ; unsigned int clock ; t#spinlock_t bus_lock ; unsigned short used_slots [ 2 ] [ 4 ] ; unsigned short pcms_count ; s#ac97_pcm * pcms ; s#snd_ac97 * codec [ 4 ] ; s#snd_info_entry * proc ; } 
s##pci_dev
s#snd_ac97_res_table struct snd_ac97_res_table { unsigned short reg ; unsigned short bits ; } 
s#snd_ac97 struct snd_ac97 { s#snd_ac97_build_ops * build_ops ; void * private_data ; void ( * private_free ) ( s#snd_ac97 * ) ; s#snd_ac97_bus * bus ; s#pci_dev * pci ; s#snd_info_entry * proc ; s#snd_info_entry * proc_regs ; unsigned short subsystem_vendor ; unsigned short subsystem_device ; s#mutex reg_mutex ; s#mutex page_mutex ; unsigned short num ; unsigned short addr ; unsigned int id ; unsigned short caps ; unsigned short ext_id ; unsigned short ext_mid ; const s#snd_ac97_res_table * res_table ; unsigned int scaps ; unsigned int flags ; unsigned int rates [ 6 ] ; unsigned int spdif_status ; unsigned short regs [ 0x80 ] ; unsigned long reg_accessed [ ( ( ( 0x80 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; union { struct { unsigned short unchained [ 3 ] ; unsigned short chained [ 3 ] ; unsigned short id [ 3 ] ; unsigned short pcmreg [ 3 ] ; unsigned short codec_cfg [ 3 ] ; unsigned char swap_mic_linein ; unsigned char lo_as_master ; } ad18xx ; unsigned int dev_flags ; } spec ; unsigned char indep_surround ; unsigned char channel_mode ; unsigned int power_up ; s#delayed_work power_work ; s#device dev ; } 
s#wm97xx_mach_ops struct wm97xx_mach_ops { int acc_enabled ; void ( * acc_pen_up ) ( s#wm97xx * ) ; int ( * acc_pen_down ) ( s#wm97xx * ) ; int ( * acc_startup ) ( s#wm97xx * ) ; void ( * acc_shutdown ) ( s#wm97xx * ) ; void ( * irq_enable ) ( s#wm97xx * , int ) ; int irq_gpio ; void ( * pre_sample ) ( int ) ; void ( * post_sample ) ( int ) ; } 
s##workqueue_struct
s#wm97xx struct wm97xx { t#u16 dig [ 3 ] , id , gpio [ 6 ] , misc ; t#u16 dig_save [ 3 ] ; s#wm97xx_codec_drv * codec ; s#input_dev * input_dev ; s#snd_ac97 * ac97 ; s#device * dev ; s#platform_device * battery_dev ; s#platform_device * touch_dev ; s#wm97xx_mach_ops * mach_ops ; s#mutex codec_mutex ; s#delayed_work ts_reader ; unsigned long ts_reader_interval ; unsigned long ts_reader_min_interval ; unsigned int pen_irq ; s#workqueue_struct * ts_workq ; s#work_struct pen_event_work ; t#u16 acc_slot ; t#u16 acc_rate ; unsigned pen_is_down : 1 ; unsigned aux_waiting : 1 ; unsigned pen_probably_down : 1 ; t#u16 variant ; t#u16 suspend_mode ; } 
s#wm97xx_data struct wm97xx_data { int x ; int y ; int p ; } 
s#wm97xx_codec_drv struct wm97xx_codec_drv { t#u16 id ; char * name ; int ( * poll_sample ) ( s#wm97xx * , int , int * ) ; int ( * poll_touch ) ( s#wm97xx * , s#wm97xx_data * ) ; int ( * acc_enable ) ( s#wm97xx * , int ) ; void ( * phy_init ) ( s#wm97xx * ) ; void ( * dig_enable ) ( s#wm97xx * , int ) ; void ( * dig_restore ) ( s#wm97xx * ) ; void ( * aux_prepare ) ( s#wm97xx * ) ; } 
wm9705_codec extern s#wm97xx_codec_drv wm9705_codec 

/* drivers/input/touchscreen/wm9712.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##proc_dir_entry
s##snd_shutdown_f_ops
s##snd_mixer_oss
s##pci_dev
s##workqueue_struct
wm9712_codec extern s#wm97xx_codec_drv wm9712_codec 

/* drivers/input/touchscreen/wm9713.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##proc_dir_entry
s##snd_shutdown_f_ops
s##snd_mixer_oss
s##pci_dev
s##workqueue_struct
wm9713_codec extern s#wm97xx_codec_drv wm9713_codec 

/* drivers/input/touchscreen/wm97xx-core.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_shutdown_f_ops
s##snd_mixer_oss
s##pci_dev
s##workqueue_struct
wm97xx_reg_read int wm97xx_reg_read ( s#wm97xx * , t#u16 ) 
wm97xx_reg_write void wm97xx_reg_write ( s#wm97xx * , t#u16 , t#u16 ) 
wm97xx_read_aux_adc int wm97xx_read_aux_adc ( s#wm97xx * , t#u16 ) 
e#wm97xx_gpio_status enum wm97xx_gpio_status { WM97XX_GPIO_HIGH , WM97XX_GPIO_LOW } 
wm97xx_get_gpio e#wm97xx_gpio_status wm97xx_get_gpio ( s#wm97xx * , t#u32 ) 
wm97xx_set_gpio void wm97xx_set_gpio ( s#wm97xx * , t#u32 , e#wm97xx_gpio_status ) 
e#wm97xx_gpio_dir enum wm97xx_gpio_dir { WM97XX_GPIO_IN , WM97XX_GPIO_OUT } 
e#wm97xx_gpio_pol enum wm97xx_gpio_pol { WM97XX_GPIO_POL_HIGH , WM97XX_GPIO_POL_LOW } 
e#wm97xx_gpio_sticky enum wm97xx_gpio_sticky { WM97XX_GPIO_STICKY , WM97XX_GPIO_NOTSTICKY } 
e#wm97xx_gpio_wake enum wm97xx_gpio_wake { WM97XX_GPIO_WAKE , WM97XX_GPIO_NOWAKE } 
wm97xx_config_gpio void wm97xx_config_gpio ( s#wm97xx * , t#u32 , e#wm97xx_gpio_dir , e#wm97xx_gpio_pol , e#wm97xx_gpio_sticky , e#wm97xx_gpio_wake ) 
wm97xx_set_suspend_mode void wm97xx_set_suspend_mode ( s#wm97xx * , t#u16 ) 
wm97xx_register_mach_ops int wm97xx_register_mach_ops ( s#wm97xx * , s#wm97xx_mach_ops * ) 
wm97xx_unregister_mach_ops void wm97xx_unregister_mach_ops ( s#wm97xx * ) 

/* drivers/isdn/capi/capifs.o */
capifs_new_ncci void capifs_new_ncci ( unsigned int , t#dev_t ) 
capifs_free_ncci void capifs_free_ncci ( unsigned int ) 

/* drivers/isdn/capi/capilib.o */
capilib_new_ncci void capilib_new_ncci ( s#list_head * , t#u16 , t#u32 , t#u32 ) 
capilib_free_ncci void capilib_free_ncci ( s#list_head * , t#u16 , t#u32 ) 
capilib_release_appl void capilib_release_appl ( s#list_head * , t#u16 ) 
capilib_release void capilib_release ( s#list_head * ) 
capilib_data_b3_req t#u16 capilib_data_b3_req ( s#list_head * , t#u16 , t#u32 , t#u16 ) 
capilib_data_b3_conf void capilib_data_b3_conf ( s#list_head * , t#u16 , t#u32 , t#u16 ) 

/* drivers/isdn/capi/capiutil.o */
t#u_char typedef unsigned char u_char 
t#_cdebbuf typedef struct { t#u_char * buf ; t#u_char * p ; t#size_t size ; t#size_t pos ; } _cdebbuf 
cdebbuf_free void cdebbuf_free ( t#_cdebbuf * ) 
t#_cmstruct typedef enum { CAPI_COMPOSE , CAPI_DEFAULT } _cmstruct 
t#_cstruct typedef t#__u8 * _cstruct 
t#_cmsg typedef struct { t#__u16 ApplId ; t#__u8 Command ; t#__u8 Subcommand ; t#__u16 Messagenumber ; union { t#__u32 adrController ; t#__u32 adrPLCI ; t#__u32 adrNCCI ; } adr ; t#_cmstruct AdditionalInfo ; t#_cstruct B1configuration ; t#__u16 B1protocol ; t#_cstruct B2configuration ; t#__u16 B2protocol ; t#_cstruct B3configuration ; t#__u16 B3protocol ; t#_cstruct BC ; t#_cstruct BChannelinformation ; t#_cmstruct BProtocol ; t#_cstruct CalledPartyNumber ; t#_cstruct CalledPartySubaddress ; t#_cstruct CallingPartyNumber ; t#_cstruct CallingPartySubaddress ; t#__u32 CIPmask ; t#__u32 CIPmask2 ; t#__u16 CIPValue ; t#__u32 Class ; t#_cstruct ConnectedNumber ; t#_cstruct ConnectedSubaddress ; t#__u32 Data ; t#__u16 DataHandle ; t#__u16 DataLength ; t#_cstruct FacilityConfirmationParameter ; t#_cstruct Facilitydataarray ; t#_cstruct FacilityIndicationParameter ; t#_cstruct FacilityRequestParameter ; t#__u16 FacilitySelector ; t#__u16 Flags ; t#__u32 Function ; t#_cstruct HLC ; t#__u16 Info ; t#_cstruct InfoElement ; t#__u32 InfoMask ; t#__u16 InfoNumber ; t#_cstruct Keypadfacility ; t#_cstruct LLC ; t#_cstruct ManuData ; t#__u32 ManuID ; t#_cstruct NCPI ; t#__u16 Reason ; t#__u16 Reason_B3 ; t#__u16 Reject ; t#_cstruct Useruserdata ; unsigned l , p ; unsigned char * par ; t#__u8 * m ; t#__u8 buf [ 180 ] ; } _cmsg 
capi_cmsg2message unsigned capi_cmsg2message ( t#_cmsg * , t#__u8 * ) 
capi_message2cmsg unsigned capi_message2cmsg ( t#_cmsg * , t#__u8 * ) 
capi_cmsg_header unsigned capi_cmsg_header ( t#_cmsg * , t#__u16 , t#__u8 , t#__u8 , t#__u16 , t#__u32 ) 
capi_cmd2str char * capi_cmd2str ( t#__u8 , t#__u8 ) 
capi_cmsg2str t#_cdebbuf * capi_cmsg2str ( t#_cmsg * ) 
capi_message2str t#_cdebbuf * capi_message2str ( t#__u8 * ) 
capi_info2str char * capi_info2str ( t#__u16 ) 

/* drivers/isdn/capi/kcapi.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#capiloaddatapart struct capiloaddatapart { int user ; int len ; unsigned char * data ; } 
t#capiloaddatapart typedef s#capiloaddatapart capiloaddatapart 
s#capiloaddata struct capiloaddata { t#capiloaddatapart firmware ; t#capiloaddatapart configuration ; } 
t#capiloaddata typedef s#capiloaddata capiloaddata 
s#capi_register_params struct capi_register_params { t#__u32 level3cnt ; t#__u32 datablkcnt ; t#__u32 datablklen ; } 
t#capi_register_params typedef s#capi_register_params capi_register_params 
s##sock
s##net_device
s##sec_path
s#capi_version struct capi_version { t#__u32 majorversion ; t#__u32 minorversion ; t#__u32 majormanuversion ; t#__u32 minormanuversion ; } 
t#capi_version typedef s#capi_version capi_version 
s#capi_profile struct capi_profile { t#__u16 ncontroller ; t#__u16 nbchannel ; t#__u32 goptions ; t#__u32 support1 ; t#__u32 support2 ; t#__u32 support3 ; t#__u32 reserved [ 6 ] ; t#__u32 manu [ 5 ] ; } 
t#capi_profile typedef s#capi_profile capi_profile 
s#capi_ctr struct capi_ctr { s#module * owner ; void * driverdata ; char name [ 32 ] ; char * driver_name ; int ( * load_firmware ) ( s#capi_ctr * , t#capiloaddata * ) ; void ( * reset_ctr ) ( s#capi_ctr * ) ; void ( * register_appl ) ( s#capi_ctr * , t#u16 , t#capi_register_params * ) ; void ( * release_appl ) ( s#capi_ctr * , t#u16 ) ; t#u16 ( * send_message ) ( s#capi_ctr * , s#sk_buff * ) ; char * ( * procinfo ) ( s#capi_ctr * ) ; int ( * ctr_read_proc ) ( char * , char * * , t#off_t , int , int * , s#capi_ctr * ) ; t#u8 manu [ 64 ] ; t#capi_version version ; t#capi_profile profile ; t#u8 serial [ 8 ] ; unsigned long nrecvctlpkt ; unsigned long nrecvdatapkt ; unsigned long nsentctlpkt ; unsigned long nsentdatapkt ; int cnr ; volatile unsigned short cardstate ; volatile int blocked ; int traceflag ; s#proc_dir_entry * procent ; char procfn [ 128 ] ; } 
capi_ctr_handle_message void capi_ctr_handle_message ( s#capi_ctr * , t#u16 , s#sk_buff * ) 
capi_ctr_ready void capi_ctr_ready ( s#capi_ctr * ) 
capi_ctr_down void capi_ctr_down ( s#capi_ctr * ) 
capi_ctr_suspend_output void capi_ctr_suspend_output ( s#capi_ctr * ) 
capi_ctr_resume_output void capi_ctr_resume_output ( s#capi_ctr * ) 
attach_capi_ctr int attach_capi_ctr ( s#capi_ctr * ) 
detach_capi_ctr int detach_capi_ctr ( s#capi_ctr * ) 
s#capicardparams struct capicardparams { unsigned int port ; unsigned irq ; int cardtype ; int cardnr ; unsigned int membase ; } 
t#capicardparams typedef s#capicardparams capicardparams 
s#capi_driver struct capi_driver { char name [ 32 ] ; char revision [ 32 ] ; int ( * add_card ) ( s#capi_driver * , t#capicardparams * ) ; s#list_head list ; } 
register_capi_driver void register_capi_driver ( s#capi_driver * ) 
unregister_capi_driver void unregister_capi_driver ( s#capi_driver * ) 
capi20_isinstalled t#u16 capi20_isinstalled ( void ) 
s#capi20_appl struct capi20_appl { t#u16 applid ; t#capi_register_params rparam ; void ( * recv_message ) ( s#capi20_appl * , s#sk_buff * ) ; void * private ; unsigned long nrecvctlpkt ; unsigned long nrecvdatapkt ; unsigned long nsentctlpkt ; unsigned long nsentdatapkt ; s#mutex recv_mtx ; s#sk_buff_head recv_queue ; s#work_struct recv_work ; int release_in_progress ; void ( * callback ) ( unsigned int , t#__u32 , void * ) ; } 
capi20_register t#u16 capi20_register ( s#capi20_appl * ) 
capi20_release t#u16 capi20_release ( s#capi20_appl * ) 
capi20_put_message t#u16 capi20_put_message ( s#capi20_appl * , s#sk_buff * ) 
capi20_get_manufacturer t#u16 capi20_get_manufacturer ( t#u32 , t#u8 [ 64 ] ) 
capi20_get_version t#u16 capi20_get_version ( t#u32 , s#capi_version * ) 
capi20_get_serial t#u16 capi20_get_serial ( t#u32 , t#u8 [ 8 ] ) 
capi20_get_profile t#u16 capi20_get_profile ( t#u32 , s#capi_profile * ) 
capi20_manufacturer int capi20_manufacturer ( unsigned int , void * ) 
capi20_set_callback void capi20_set_callback ( s#capi20_appl * , void ( * ) ( unsigned int , t#__u32 , void * ) ) 

/* drivers/isdn/gigaset/asyncdata.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
s#reply_t struct reply_t { int resp_code ; int min_ConState ; int max_ConState ; int parameter ; int new_ConState ; int timeout ; int action [ 3 ] ; char * command ; } 
s#gigaset_ops struct gigaset_ops { int ( * write_cmd ) ( s#cardstate * , const unsigned char * , int , s#tasklet_struct * ) ; int ( * write_room ) ( s#cardstate * ) ; int ( * chars_in_buffer ) ( s#cardstate * ) ; int ( * brkchars ) ( s#cardstate * , const unsigned char [ 6 ] ) ; int ( * init_bchannel ) ( s#bc_state * ) ; int ( * close_bchannel ) ( s#bc_state * ) ; int ( * initbcshw ) ( s#bc_state * ) ; int ( * freebcshw ) ( s#bc_state * ) ; void ( * reinitbcshw ) ( s#bc_state * ) ; int ( * initcshw ) ( s#cardstate * ) ; void ( * freecshw ) ( s#cardstate * ) ; int ( * set_modem_ctrl ) ( s#cardstate * , unsigned , unsigned ) ; int ( * baud_rate ) ( s#cardstate * , unsigned ) ; int ( * set_line_ctrl ) ( s#cardstate * , unsigned ) ; int ( * send_skb ) ( s#bc_state * , s#sk_buff * ) ; void ( * handle_input ) ( s#inbuf_t * ) ; } 
s#gigaset_driver struct gigaset_driver { s#list_head list ; t#spinlock_t lock ; s#tty_driver * tty ; unsigned have_tty ; unsigned minor ; unsigned minors ; s#cardstate * cs ; int blocked ; const s#gigaset_ops * ops ; s#module * owner ; } 
s#cmdbuf_t struct cmdbuf_t { s#cmdbuf_t * next , * prev ; int len , offset ; s#tasklet_struct * wake_tasklet ; unsigned char buf [ 0 ] ; } 
t#ulong typedef unsigned long ulong 
s#setup_parm struct setup_parm { unsigned char phone [ 32 ] ; unsigned char eazmsn [ 32 ] ; unsigned char si1 ; unsigned char si2 ; unsigned char plan ; unsigned char screen ; } 
t#setup_parm typedef s#setup_parm setup_parm 
t#capi_msg typedef struct { t#__u16 Length ; t#__u16 ApplId ; t#__u8 Command ; t#__u8 Subcommand ; t#__u16 Messagenumber ; union { t#__u32 Controller ; t#__u32 PLCI ; t#__u32 NCCI ; } adr ; t#__u8 para [ 50 ] ; } capi_msg 
t#isdn_cmd_stat typedef struct { t#ulong ll_id ; int hl_id ; int proc ; int timeout ; int datalen ; t#u_char * data ; } isdn_cmd_stat 
t#aux_s typedef struct { t#__u8 cmd ; t#__u8 subcmd ; t#__u8 para [ 50 ] ; } aux_s 
s#T30_s struct T30_s { t#__u8 resolution ; t#__u8 rate ; t#__u8 width ; t#__u8 length ; t#__u8 compression ; t#__u8 ecm ; t#__u8 binary ; t#__u8 scantime ; t#__u8 id [ 21 ] ; t#__u8 phase ; t#__u8 direction ; t#__u8 code ; t#__u8 badlin ; t#__u8 badmul ; t#__u8 bor ; t#__u8 fet ; t#__u8 pollid [ 21 ] ; t#__u8 cq ; t#__u8 cr ; t#__u8 ctcrty ; t#__u8 minsp ; t#__u8 phcto ; t#__u8 rel ; t#__u8 nbc ; t#__u8 r_resolution ; t#__u8 r_rate ; t#__u8 r_width ; t#__u8 r_length ; t#__u8 r_compression ; t#__u8 r_ecm ; t#__u8 r_binary ; t#__u8 r_scantime ; t#__u8 r_id [ 21 ] ; t#__u8 r_code ; } 
t#T30_s typedef s#T30_s __attribute__ ( ( packed ) ) T30_s 
t#isdn_ctrl typedef struct { int driver ; int command ; t#ulong arg ; union { t#ulong errcode ; int length ; t#u_char num [ 50 ] ; t#setup_parm setup ; t#capi_msg cmsg ; char display [ 85 ] ; t#isdn_cmd_stat isdn_io ; t#aux_s aux ; t#T30_s * fax ; t#ulong userdata ; } parm ; } isdn_ctrl 
t#isdn_if typedef struct { s#module * owner ; int channels ; int maxbufsize ; unsigned long features ; unsigned short hl_hdrlen ; void ( * rcvcallb_skb ) ( int , int , s#sk_buff * ) ; int ( * statcallb ) ( t#isdn_ctrl * ) ; int ( * command ) ( t#isdn_ctrl * ) ; int ( * writebuf_skb ) ( int , int , int , s#sk_buff * ) ; int ( * writecmd ) ( const t#u_char * , int , int , int ) ; int ( * readstat ) ( t#u_char * , int , int , int ) ; char id [ 20 ] ; } isdn_if 
s#event_t struct event_t { int type ; void * ptr , * arg ; int parameter ; int cid ; s#at_state_t * at_state ; } 
s##usb_cardstate
s##ser_cardstate
s##bas_cardstate
s#cardstate struct cardstate { s#gigaset_driver * driver ; unsigned minor_index ; s#device * dev ; s#device * tty_dev ; unsigned flags ; const s#gigaset_ops * ops ; t#wait_queue_head_t waitqueue ; int waiting ; int mode ; int mstate ; int cmd_result ; int channels ; s#bc_state * bcs ; int onechannel ; t#spinlock_t lock ; s#at_state_t at_state ; s#list_head temp_at_states ; s#inbuf_t * inbuf ; s#cmdbuf_t * cmdbuf , * lastcmdbuf ; t#spinlock_t cmdlock ; unsigned curlen , cmdbytes ; unsigned open_count ; s#tty_struct * tty ; s#tasklet_struct if_wake_tasklet ; unsigned control_state ; unsigned fwver [ 4 ] ; int gotfwver ; unsigned running ; unsigned connected ; unsigned isdn_up ; unsigned cidmode ; int myid ; t#isdn_if iif ; s#reply_t * tabnocid ; s#reply_t * tabcid ; int cs_init ; int ignoreframes ; s#mutex mutex ; s#timer_list timer ; int retry_count ; int dle ; int cur_at_seq ; int curchannel ; int commands_pending ; s#tasklet_struct event_tasklet ; s#tasklet_struct write_tasklet ; s#event_t events [ 64 ] ; unsigned ev_tail , ev_head ; t#spinlock_t ev_lock ; unsigned char respdata [ 512 ] ; unsigned cbytes ; union { s#usb_cardstate * usb ; s#ser_cardstate * ser ; s#bas_cardstate * bas ; } hw ; } 
s#at_state_t struct at_state_t { s#list_head list ; int waiting ; int getstring ; unsigned timer_index ; unsigned long timer_expires ; int timer_active ; unsigned int ConState ; s#reply_t * replystruct ; int cid ; int int_var [ 4 ] ; char * str_var [ 5 ] ; unsigned pending_commands ; unsigned seq_index ; s#cardstate * cs ; s#bc_state * bcs ; } 
s##ser_bc_state
s##usb_bc_state
s##usb_tt
s##mon_bus
s##ep_device
s##wusb_dev
s#isow_urbctx_t struct isow_urbctx_t { s#urb * urb ; s#bc_state * bcs ; int limit ; int status ; } 
s#isowbuf_t struct isowbuf_t { int read ; int nextread ; int write ; t#atomic_t writesem ; int wbits ; unsigned char data [ 4096 + 16 ] ; unsigned char idle ; } 
s#bas_bc_state struct bas_bc_state { int running ; t#atomic_t corrbytes ; t#spinlock_t isooutlock ; s#isow_urbctx_t isoouturbs [ 3 ] ; s#isow_urbctx_t * isooutdone , * isooutfree , * isooutovfl ; s#isowbuf_t * isooutbuf ; unsigned numsub ; s#tasklet_struct sent_tasklet ; t#spinlock_t isoinlock ; s#urb * isoinurbs [ 3 ] ; unsigned char isoinbuf [ ( 16 * 8 ) * 3 ] ; s#urb * isoindone ; int isoinstatus ; int loststatus ; unsigned isoinlost ; unsigned seqlen ; unsigned inbyte , inbits ; unsigned goodbytes ; unsigned alignerrs ; unsigned fcserrs ; unsigned frameerrs ; unsigned giants ; unsigned runts ; unsigned aborts ; unsigned shared0s ; unsigned stolen0s ; s#tasklet_struct rcvd_tasklet ; } 
s#bc_state struct bc_state { s#sk_buff * tx_skb ; s#sk_buff_head squeue ; int corrupted ; int trans_down ; int trans_up ; s#at_state_t at_state ; t#__u16 fcs ; s#sk_buff * skb ; int inputstate ; int channel ; s#cardstate * cs ; unsigned chstate ; int ignore ; unsigned proto2 ; char * commands [ 7 ] ; int busy ; int use_count ; union { s#ser_bc_state * ser ; s#usb_bc_state * usb ; s#bas_bc_state * bas ; } hw ; } 
s#inbuf_t struct inbuf_t { unsigned char * rcvbuf ; s#bc_state * bcs ; s#cardstate * cs ; int inputstate ; int head , tail ; unsigned char data [ 8192 ] ; } 
gigaset_m10x_input void gigaset_m10x_input ( s#inbuf_t * ) 
gigaset_m10x_send_skb int gigaset_m10x_send_skb ( s#bc_state * , s#sk_buff * ) 

/* drivers/isdn/gigaset/common.o */
gigaset_debuglevel extern int gigaset_debuglevel 
e#debuglevel enum debuglevel { DEBUG_INTR = 0x00008 , DEBUG_CMD = 0x00020 , DEBUG_STREAM = 0x00040 , DEBUG_STREAM_DUMP = 0x00080 , DEBUG_LLDATA = 0x00100 , DEBUG_DRIVER = 0x00400 , DEBUG_HDLC = 0x00800 , DEBUG_WRITE = 0x01000 , DEBUG_TRANSCMD = 0x02000 , DEBUG_MCMD = 0x04000 , DEBUG_INIT = 0x08000 , DEBUG_SUSPEND = 0x10000 , DEBUG_OUTPUT = 0x20000 , DEBUG_ISO = 0x40000 , DEBUG_IF = 0x80000 , DEBUG_USBREQ = 0x100000 , DEBUG_LOCKCMD = 0x200000 , DEBUG_ANY = 0x3fffff , } 
gigaset_dbg_buffer void gigaset_dbg_buffer ( e#debuglevel , const unsigned char * , t#size_t , const unsigned char * ) 
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
s##ser_bc_state
s##usb_bc_state
s##usb_tt
s##mon_bus
s##ep_device
s##wusb_dev
s##usb_cardstate
s##ser_cardstate
s##bas_cardstate
gigaset_add_event s#event_t * gigaset_add_event ( s#cardstate * , s#at_state_t * , int , void * , int , void * ) 
gigaset_freecs void gigaset_freecs ( s#cardstate * ) 
gigaset_fill_inbuf int gigaset_fill_inbuf ( s#inbuf_t * , const unsigned char * , unsigned ) 
gigaset_initcs s#cardstate * gigaset_initcs ( s#gigaset_driver * , int , int , int , int , const char * ) 
gigaset_start int gigaset_start ( s#cardstate * ) 
gigaset_shutdown int gigaset_shutdown ( s#cardstate * ) 
gigaset_stop void gigaset_stop ( s#cardstate * ) 
gigaset_freedriver void gigaset_freedriver ( s#gigaset_driver * ) 
gigaset_initdriver s#gigaset_driver * gigaset_initdriver ( unsigned , unsigned , const char * , const char * , const s#gigaset_ops * , s#module * ) 
gigaset_blockdriver void gigaset_blockdriver ( s#gigaset_driver * ) 

/* drivers/isdn/gigaset/ev-layer.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
s##ser_bc_state
s##usb_bc_state
s##usb_tt
s##mon_bus
s##ep_device
s##wusb_dev
s##usb_cardstate
s##ser_cardstate
s##bas_cardstate
gigaset_handle_modem_response void gigaset_handle_modem_response ( s#cardstate * ) 

/* drivers/isdn/gigaset/i4l.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
s##usb_cardstate
s##ser_cardstate
s##bas_cardstate
s##ser_bc_state
s##usb_bc_state
s##usb_tt
s##mon_bus
s##ep_device
s##wusb_dev
gigaset_skb_sent void gigaset_skb_sent ( s#bc_state * , s#sk_buff * ) 

/* drivers/isdn/gigaset/interface.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
s##ser_bc_state
s##usb_bc_state
s##usb_tt
s##mon_bus
s##ep_device
s##wusb_dev
s##usb_cardstate
s##ser_cardstate
s##bas_cardstate
gigaset_if_receive void gigaset_if_receive ( s#cardstate * , unsigned char * , t#size_t ) 

/* drivers/isdn/hardware/avm/b1.o */
s#avmcard_dmabuf struct avmcard_dmabuf { long size ; t#u8 * dmabuf ; t#dma_addr_t dmaaddr ; } 
t#avmcard_dmabuf typedef s#avmcard_dmabuf avmcard_dmabuf 
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#avmcard_dmainfo struct avmcard_dmainfo { t#u32 recvlen ; t#avmcard_dmabuf recvbuf ; t#avmcard_dmabuf sendbuf ; s#sk_buff_head send_queue ; s#pci_dev * pcidev ; } 
t#avmcard_dmainfo typedef s#avmcard_dmainfo avmcard_dmainfo 
avmcard_dma_alloc t#avmcard_dmainfo * avmcard_dma_alloc ( char * , s#pci_dev * , long , long ) 
avmcard_dma_free void avmcard_dma_free ( t#avmcard_dmainfo * ) 
b1_irq_table extern int b1_irq_table [ 16 ] 
e#avmcardtype enum avmcardtype { avm_b1isa , avm_b1pci , avm_b1pcmcia , avm_m1 , avm_m2 , avm_t1isa , avm_t1pci , avm_c4 , avm_c2 } 
s#avmctrl_info struct avmctrl_info { char cardname [ 32 ] ; int versionlen ; char versionbuf [ 1024 ] ; char * version [ 8 ] ; char infobuf [ 128 ] ; s#avmcard * card ; s#capi_ctr capi_ctrl ; s#list_head ncci_head ; } 
t#u_int typedef unsigned int u_int 
s#avmcard struct avmcard { char name [ 32 ] ; t#spinlock_t lock ; unsigned int port ; unsigned irq ; unsigned long membase ; e#avmcardtype cardtype ; unsigned char revision ; unsigned char class ; int cardnr ; char msgbuf [ 128 ] ; char databuf [ 2048 ] ; void * mbase ; volatile t#u32 csr ; t#avmcard_dmainfo * dma ; s#avmctrl_info * ctrlinfo ; t#u_int nr_controllers ; t#u_int nlogcontr ; s#list_head list ; } 
t#avmcard typedef s#avmcard avmcard 
b1_alloc_card t#avmcard * b1_alloc_card ( int ) 
b1_free_card void b1_free_card ( t#avmcard * ) 
b1_detect int b1_detect ( unsigned int , e#avmcardtype ) 
b1_getrevision void b1_getrevision ( t#avmcard * ) 
b1_load_t4file int b1_load_t4file ( t#avmcard * , t#capiloaddatapart * ) 
b1_load_config int b1_load_config ( t#avmcard * , t#capiloaddatapart * ) 
b1_loaded int b1_loaded ( t#avmcard * ) 
b1_load_firmware int b1_load_firmware ( s#capi_ctr * , t#capiloaddata * ) 
b1_reset_ctr void b1_reset_ctr ( s#capi_ctr * ) 
b1_register_appl void b1_register_appl ( s#capi_ctr * , t#u16 , t#capi_register_params * ) 
b1_release_appl void b1_release_appl ( s#capi_ctr * , t#u16 ) 
b1_send_message t#u16 b1_send_message ( s#capi_ctr * , s#sk_buff * ) 
t#avmctrl_info typedef s#avmctrl_info avmctrl_info 
b1_parse_version void b1_parse_version ( t#avmctrl_info * ) 
b1_interrupt t#irqreturn_t b1_interrupt ( int , void * ) 
b1ctl_read_proc int b1ctl_read_proc ( char * , char * * , t#off_t , int , int * , s#capi_ctr * ) 

/* drivers/isdn/hardware/avm/b1dma.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
s##pci_dev
b1dma_reset void b1dma_reset ( t#avmcard * ) 
t1pci_detect int t1pci_detect ( t#avmcard * ) 
b1pciv4_detect int b1pciv4_detect ( t#avmcard * ) 
b1dma_interrupt t#irqreturn_t b1dma_interrupt ( int , void * ) 
b1dma_load_firmware int b1dma_load_firmware ( s#capi_ctr * , t#capiloaddata * ) 
b1dma_reset_ctr void b1dma_reset_ctr ( s#capi_ctr * ) 
b1dma_register_appl void b1dma_register_appl ( s#capi_ctr * , t#u16 , t#capi_register_params * ) 
b1dma_release_appl void b1dma_release_appl ( s#capi_ctr * , t#u16 ) 
b1dma_send_message t#u16 b1dma_send_message ( s#capi_ctr * , s#sk_buff * ) 
b1dmactl_read_proc int b1dmactl_read_proc ( char * , char * * , t#off_t , int , int * , s#capi_ctr * ) 

/* drivers/isdn/hardware/avm/b1pcmcia.o */
b1pcmcia_addcard_b1 int b1pcmcia_addcard_b1 ( unsigned int , unsigned ) 
b1pcmcia_addcard_m1 int b1pcmcia_addcard_m1 ( unsigned int , unsigned ) 
b1pcmcia_addcard_m2 int b1pcmcia_addcard_m2 ( unsigned int , unsigned ) 
b1pcmcia_delcard int b1pcmcia_delcard ( unsigned int , unsigned ) 

/* drivers/isdn/hardware/eicon/diva_didd.o */
DIVA_DIDD_Read extern void DIVA_DIDD_Read ( void * , int ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
proc_net_eicon s#proc_dir_entry * proc_net_eicon 

/* drivers/isdn/hardware/mISDN/mISDNipac.o */
t#u_long typedef unsigned long u_long 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s#mISDN_sock_list struct mISDN_sock_list { s#hlist_head head ; t#rwlock_t lock ; } 
s#mISDNstack struct mISDNstack { t#u_long status ; s#mISDNdevice * dev ; s#task_struct * thread ; s#completion * notify ; t#wait_queue_head_t workq ; s#sk_buff_head msgq ; s#list_head layer2 ; s#mISDNchannel * layer1 ; s#mISDNchannel own ; s#mutex lmutex ; s#mISDN_sock_list l1sock ; } 
t#send_func_t typedef int ( send_func_t ) ( s#mISDNchannel * , s#sk_buff * ) 
t#ctrl_func_t typedef int ( ctrl_func_t ) ( s#mISDNchannel * , t#u_int , void * ) 
s#mISDNchannel struct mISDNchannel { s#list_head list ; t#u_int protocol ; t#u_int nr ; t#u_long opt ; t#u_int addr ; s#mISDNstack * st ; s#mISDNchannel * peer ; t#send_func_t * send ; t#send_func_t * recv ; t#ctrl_func_t * ctrl ; } 
s#mISDNdevice struct mISDNdevice { s#mISDNchannel D ; t#u_int id ; t#u_int Dprotocols ; t#u_int Bprotocols ; t#u_int nrbchan ; t#u_char channelmap [ ( ( 127 + 1 ) >> 3 ) ] ; s#list_head bchannels ; s#mISDNchannel * teimgr ; s#device dev ; } 
s#dchannel struct dchannel { s#mISDNdevice dev ; t#u_long Flags ; s#work_struct workq ; void ( * phfunc ) ( s#dchannel * ) ; t#u_int state ; void * l1 ; void * hw ; int slot ; s#timer_list timer ; s#sk_buff * rx_skb ; int maxlen ; s#sk_buff_head squeue ; s#sk_buff_head rqueue ; s#sk_buff * tx_skb ; int tx_idx ; int debug ; int err_crc ; int err_tx ; int err_rx ; } 
t#read_reg_func typedef t#u8 ( read_reg_func ) ( void * , t#u8 ) 
t#write_reg_func typedef void ( write_reg_func ) ( void * , t#u8 , t#u8 ) 
t#fifo_func typedef void ( fifo_func ) ( void * , t#u8 , t#u8 * , int ) 
s#sockaddr_mISDN struct sockaddr_mISDN { t#sa_family_t family ; unsigned char dev ; unsigned char channel ; unsigned char sapi ; unsigned char tei ; } 
s#channel_req struct channel_req { t#u_int protocol ; s#sockaddr_mISDN adr ; s#mISDNchannel * ch ; } 
s##arcofi_msg
s#isac_hw struct isac_hw { s#dchannel dch ; t#u32 type ; t#u32 off ; char * name ; t#spinlock_t * hwlock ; t#read_reg_func * read_reg ; t#write_reg_func * write_reg ; t#fifo_func * read_fifo ; t#fifo_func * write_fifo ; int ( * monitor ) ( void * , t#u32 , t#u8 * , int ) ; void ( * release ) ( s#isac_hw * ) ; int ( * init ) ( s#isac_hw * ) ; int ( * ctrl ) ( s#isac_hw * , t#u32 , t#u_long ) ; int ( * open ) ( s#isac_hw * , s#channel_req * ) ; t#u8 * mon_tx ; t#u8 * mon_rx ; int mon_txp ; int mon_txc ; int mon_rxp ; s#arcofi_msg * arcofi_list ; s#timer_list arcofitimer ; t#wait_queue_head_t arcofi_wait ; t#u8 arcofi_bc ; t#u8 arcofi_state ; t#u8 mocr ; t#u8 adf2 ; t#u8 state ; } 
mISDNisac_irq extern t#irqreturn_t mISDNisac_irq ( s#isac_hw * , t#u8 ) 
mISDNisac_init extern int mISDNisac_init ( s#isac_hw * , void * ) 
s#bchannel struct bchannel { s#mISDNchannel ch ; int nr ; t#u_long Flags ; s#work_struct workq ; t#u_int state ; void * hw ; int slot ; s#timer_list timer ; s#sk_buff * rx_skb ; int maxlen ; s#sk_buff * next_skb ; s#sk_buff * tx_skb ; s#sk_buff_head rqueue ; int rcount ; int tx_idx ; int debug ; int err_crc ; int err_tx ; int err_rx ; } 
s#hscx_hw struct hscx_hw { s#bchannel bch ; s#ipac_hw * ip ; t#u8 fifo_size ; t#u8 off ; t#u8 slot ; char log [ 64 ] ; } 
s#ipac_hw struct ipac_hw { s#isac_hw isac ; s#hscx_hw hscx [ 2 ] ; char * name ; void * hw ; t#spinlock_t * hwlock ; s#module * owner ; t#u32 type ; t#read_reg_func * read_reg ; t#write_reg_func * write_reg ; t#fifo_func * read_fifo ; t#fifo_func * write_fifo ; void ( * release ) ( s#ipac_hw * ) ; int ( * init ) ( s#ipac_hw * ) ; int ( * ctrl ) ( s#ipac_hw * , t#u32 , t#u_long ) ; t#u8 conf ; } 
mISDNipac_irq extern t#irqreturn_t mISDNipac_irq ( s#ipac_hw * , int ) 
mISDNipac_init extern t#u32 mISDNipac_init ( s#ipac_hw * , void * ) 

/* drivers/isdn/hardware/mISDN/mISDNisar.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s#isar_ch struct isar_ch { s#bchannel bch ; s#isar_hw * is ; s#timer_list ftimer ; t#u8 nr ; t#u8 dpath ; t#u8 mml ; t#u8 state ; t#u8 cmd ; t#u8 mod ; t#u8 newcmd ; t#u8 newmod ; t#u8 try_mod ; t#u8 conmsg [ 16 ] ; } 
s#isar_hw struct isar_hw { s#isar_ch ch [ 2 ] ; void * hw ; t#spinlock_t * hwlock ; char * name ; s#module * owner ; t#read_reg_func * read_reg ; t#write_reg_func * write_reg ; t#fifo_func * read_fifo ; t#fifo_func * write_fifo ; int ( * ctrl ) ( void * , t#u32 , t#u_long ) ; void ( * release ) ( s#isar_hw * ) ; int ( * init ) ( s#isar_hw * ) ; int ( * open ) ( s#isar_hw * , s#channel_req * ) ; int ( * firmware ) ( s#isar_hw * , const t#u8 * , int ) ; unsigned long Flags ; int version ; t#u8 bstat ; t#u8 iis ; t#u8 cmsb ; t#u8 clsb ; t#u8 buf [ 256 ] ; t#u8 log [ 256 ] ; } 
mISDNisar_irq extern void mISDNisar_irq ( s#isar_hw * ) 
mISDNisar_init extern t#u32 mISDNisar_init ( s#isar_hw * , void * ) 

/* drivers/isdn/hisax/config.o */
s##pci_dev
s##tvec_base
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
t#FSMFNPTR typedef void ( * FSMFNPTR ) ( s#FsmInst * , int , void * ) 
s#Fsm struct Fsm { t#FSMFNPTR * jumpmatrix ; int state_count , event_count ; char * * strEvent , * * strState ; } 
s#FsmInst struct FsmInst { s#Fsm * fsm ; int state ; int debug ; void * userdata ; int userint ; void ( * printdebug ) ( s#FsmInst * , char * , ... ) ; } 
s#FsmTimer struct FsmTimer { s#FsmInst * fi ; s#timer_list tl ; int event ; void * arg ; } 
s#Layer1 struct Layer1 { void * hardware ; s#BCState * bcs ; s#PStack * * stlistp ; unsigned long Flags ; s#FsmInst l1m ; s#FsmTimer timer ; void ( * l1l2 ) ( s#PStack * , int , void * ) ; void ( * l1hw ) ( s#PStack * , int , void * ) ; void ( * l1tei ) ( s#PStack * , int , void * ) ; int mode , bc ; int delay ; } 
s#Layer2 struct Layer2 { int tei ; int sap ; int maxlen ; t#u_long flag ; t#spinlock_t lock ; t#u_int vs , va , vr ; int rc ; unsigned int window ; unsigned int sow ; s#sk_buff * windowar [ 8 ] ; s#sk_buff_head i_queue ; s#sk_buff_head ui_queue ; void ( * l2l1 ) ( s#PStack * , int , void * ) ; void ( * l2l3 ) ( s#PStack * , int , void * ) ; void ( * l2tei ) ( s#PStack * , int , void * ) ; s#FsmInst l2m ; s#FsmTimer t200 , t203 ; int T200 , N200 , T203 ; int debug ; char debug_id [ 16 ] ; } 
s#L3Timer struct L3Timer { s#l3_process * pc ; s#timer_list tl ; int event ; } 
s#Param struct Param { t#u_char cause ; t#u_char loc ; t#u_char diag [ 6 ] ; int bchannel ; int chargeinfo ; int spv ; t#setup_parm setup ; t#u_char moderate ; } 
s#Channel struct Channel { s#PStack * b_st , * d_st ; s#IsdnCardState * cs ; s#BCState * bcs ; int chan ; int incoming ; s#FsmInst fi ; s#FsmTimer drel_timer , dial_timer ; int debug ; int l2_protocol , l2_active_protocol ; int l3_protocol ; int data_open ; s#l3_process * proc ; t#setup_parm setup ; t#u_long Flags ; int leased ; } 
t#dss1_proc_priv typedef struct { unsigned char invoke_id ; t#ulong ll_id ; t#u8 remote_operation ; int proc ; t#ulong remote_result ; char uus1_data [ 35 ] ; } dss1_proc_priv 
t#ni1_proc_priv typedef struct { unsigned char invoke_id ; t#ulong ll_id ; t#u8 remote_operation ; int proc ; t#ulong remote_result ; char uus1_data [ 35 ] ; } ni1_proc_priv 
s#l3_process struct l3_process { int callref ; int state ; s#L3Timer timer ; int N303 ; int debug ; s#Param para ; s#Channel * chan ; s#PStack * st ; s#l3_process * next ; t#ulong redir_result ; union { t#u_char uuuu ; t#dss1_proc_priv dss1 ; t#ni1_proc_priv ni1 ; } prot ; } 
s#Layer3 struct Layer3 { void ( * l3l4 ) ( s#PStack * , int , void * ) ; void ( * l3ml3 ) ( s#PStack * , int , void * ) ; void ( * l3l2 ) ( s#PStack * , int , void * ) ; s#FsmInst l3m ; s#FsmTimer l3m_timer ; s#sk_buff_head squeue ; s#l3_process * proc ; s#l3_process * global ; int N303 ; int debug ; char debug_id [ 8 ] ; } 
s#LLInterface struct LLInterface { void ( * l4l3 ) ( s#PStack * , int , void * ) ; int ( * l4l3_proto ) ( s#PStack * , t#isdn_ctrl * ) ; void * userdata ; t#u_long flag ; } 
s#Management struct Management { int ri ; s#FsmInst tei_m ; s#FsmTimer t202 ; int T202 , N202 , debug ; void ( * layer ) ( s#PStack * , int , void * ) ; } 
t#dss1_stk_priv typedef struct { unsigned char last_invoke_id ; unsigned char invoke_used [ 32 ] ; } dss1_stk_priv 
t#ni1_stk_priv typedef struct { unsigned char last_invoke_id ; unsigned char invoke_used [ 32 ] ; } ni1_stk_priv 
s#PStack struct PStack { s#PStack * next ; s#Layer1 l1 ; s#Layer2 l2 ; s#Layer3 l3 ; s#LLInterface lli ; s#Management ma ; int protocol ; union { t#u_char uuuu ; t#dss1_stk_priv dss1 ; t#ni1_stk_priv ni1 ; } prot ; } 
s#hscx_hw struct hscx_hw { int hscx ; int rcvidx ; int count ; t#u_char * rcvbuf ; t#u_char tsaxr0 ; t#u_char tsaxr1 ; } 
s#hdlc_stat_reg struct hdlc_stat_reg { t#u_char cmd ; t#u_char xml ; t#u_char mode ; t#u_char fill ; } 
s#hdlc_hw struct hdlc_hw { union { t#u_int ctrl ; s#hdlc_stat_reg sr ; } ctrl ; t#u_int stat ; int rcvidx ; int count ; t#u_char * rcvbuf ; } 
s#isar_reg struct isar_reg { unsigned long Flags ; volatile t#u_char bstat ; volatile t#u_char iis ; volatile t#u_char cmsb ; volatile t#u_char clsb ; volatile t#u_char par [ 8 ] ; } 
s#isar_hw struct isar_hw { int dpath ; int rcvidx ; int txcnt ; int mml ; t#u_char state ; t#u_char cmd ; t#u_char mod ; t#u_char newcmd ; t#u_char newmod ; char try_mod ; s#timer_list ftimer ; t#u_char * rcvbuf ; t#u_char conmsg [ 16 ] ; s#isar_reg * reg ; } 
s#hfcB_hw struct hfcB_hw { unsigned int * send ; int f1 ; int f2 ; } 
s#tiger_hw struct tiger_hw { t#u_int * send ; t#u_int * s_irq ; t#u_int * s_end ; t#u_int * sendp ; t#u_int * rec ; int free ; t#u_char * rcvbuf ; t#u_char * sendbuf ; t#u_char * sp ; int sendcnt ; t#u_int s_tot ; t#u_int r_bitcnt ; t#u_int r_tot ; t#u_int r_err ; t#u_int r_fcs ; t#u_char r_state ; t#u_char r_one ; t#u_char r_val ; t#u_char s_state ; } 
s##hdlc_state
s#amd7930_hw struct amd7930_hw { t#u_char * tx_buff ; t#u_char * rv_buff ; int rv_buff_in ; int rv_buff_out ; s#sk_buff * rv_skb ; s#hdlc_state * hdlc_state ; s#work_struct tq_rcv ; s#work_struct tq_xmt ; } 
s#w6692B_hw struct w6692B_hw { int bchan ; int rcvidx ; int count ; t#u_char * rcvbuf ; } 
s##hisax_b_if
s#BCState struct BCState { int channel ; int mode ; t#u_long Flag ; s#IsdnCardState * cs ; int tx_cnt ; s#sk_buff * tx_skb ; s#sk_buff_head rqueue ; s#sk_buff_head squeue ; int ackcnt ; t#spinlock_t aclock ; s#PStack * st ; t#u_char * blog ; t#u_char * conmsg ; s#timer_list transbusy ; s#work_struct tqueue ; t#u_long event ; int ( * BC_SetStack ) ( s#PStack * , s#BCState * ) ; void ( * BC_Close ) ( s#BCState * ) ; int err_crc ; int err_tx ; int err_rdo ; int err_inv ; union { s#hscx_hw hscx ; s#hdlc_hw hdlc ; s#isar_hw isar ; s#hfcB_hw hfc ; s#tiger_hw tiger ; s#amd7930_hw amd7930 ; s#w6692B_hw w6692 ; s#hisax_b_if * b_if ; } hw ; } 
s#elsa_hw struct elsa_hw { s#pci_dev * dev ; unsigned long base ; unsigned int cfg ; unsigned int ctrl ; unsigned int ale ; unsigned int isac ; unsigned int itac ; unsigned int hscx ; unsigned int trig ; unsigned int timer ; unsigned int counter ; unsigned int status ; s#timer_list tl ; unsigned int MFlag ; s#BCState * bcs ; t#u_char * transbuf ; t#u_char * rcvbuf ; unsigned int transp ; unsigned int rcvp ; unsigned int transcnt ; unsigned int rcvcnt ; t#u_char IER ; t#u_char FCR ; t#u_char LCR ; t#u_char MCR ; t#u_char ctrl_reg ; } 
s#teles0_hw struct teles0_hw { unsigned int cfg_reg ; void * membase ; unsigned long phymem ; } 
s#teles3_hw struct teles3_hw { unsigned int cfg_reg ; signed int isac ; signed int hscx [ 2 ] ; signed int isacfifo ; signed int hscxfifo [ 2 ] ; } 
s#avm_hw struct avm_hw { unsigned int cfg_reg ; unsigned int isac ; unsigned int hscx [ 2 ] ; unsigned int isacfifo ; unsigned int hscxfifo [ 2 ] ; unsigned int counter ; s#pci_dev * dev ; } 
s#ix1_hw struct ix1_hw { unsigned int cfg_reg ; unsigned int isac_ale ; unsigned int isac ; unsigned int hscx_ale ; unsigned int hscx ; } 
s#diva_hw struct diva_hw { unsigned long cfg_reg ; unsigned long pci_cfg ; unsigned int ctrl ; unsigned long isac_adr ; unsigned int isac ; unsigned long hscx_adr ; unsigned int hscx ; unsigned int status ; s#timer_list tl ; t#u_char ctrl_reg ; s#pci_dev * dev ; } 
s#asus_hw struct asus_hw { unsigned int cfg_reg ; unsigned int adr ; unsigned int isac ; unsigned int hscx ; unsigned int u7 ; unsigned int pots ; } 
s#hfc_hw struct hfc_hw { unsigned int addr ; unsigned int fifosize ; unsigned char cirm ; unsigned char ctmt ; unsigned char cip ; t#u_char isac_spcr ; s#timer_list timer ; } 
s#sedl_hw struct sedl_hw { unsigned int cfg_reg ; unsigned int adr ; unsigned int isac ; unsigned int hscx ; unsigned int reset_on ; unsigned int reset_off ; s#isar_reg isar ; unsigned int chip ; unsigned int bus ; s#pci_dev * dev ; } 
s#spt_hw struct spt_hw { unsigned int cfg_reg ; unsigned int isac ; unsigned int hscx [ 2 ] ; unsigned char res_irq ; } 
s#mic_hw struct mic_hw { unsigned int cfg_reg ; unsigned int adr ; unsigned int isac ; unsigned int hscx ; } 
s#njet_hw struct njet_hw { unsigned long base ; unsigned int isac ; unsigned int auxa ; unsigned char auxd ; unsigned char dmactrl ; unsigned char ctrl_reg ; unsigned char irqmask0 ; unsigned char irqstat0 ; unsigned char last_is0 ; s#pci_dev * dev ; } 
s#hfcD_hw struct hfcD_hw { unsigned int addr ; unsigned int bfifosize ; unsigned int dfifosize ; unsigned char cirm ; unsigned char ctmt ; unsigned char cip ; unsigned char conn ; unsigned char mst_m ; unsigned char int_m1 ; unsigned char int_m2 ; unsigned char int_s1 ; unsigned char sctrl ; unsigned char stat ; unsigned char fifo ; unsigned char f1 ; unsigned char f2 ; unsigned int * send ; s#timer_list timer ; } 
s#hfcPCI_hw struct hfcPCI_hw { unsigned char cirm ; unsigned char ctmt ; unsigned char conn ; unsigned char mst_m ; unsigned char int_m1 ; unsigned char int_m2 ; unsigned char int_s1 ; unsigned char sctrl ; unsigned char sctrl_r ; unsigned char sctrl_e ; unsigned char trm ; unsigned char stat ; unsigned char fifo ; unsigned char fifo_en ; unsigned char bswapped ; unsigned char nt_mode ; int nt_timer ; s#pci_dev * dev ; unsigned char * pci_io ; t#dma_addr_t dma ; void * fifos ; int last_bfifo_cnt [ 2 ] ; s#timer_list timer ; } 
s#hfcSX_hw struct hfcSX_hw { unsigned long base ; unsigned char cirm ; unsigned char ctmt ; unsigned char conn ; unsigned char mst_m ; unsigned char int_m1 ; unsigned char int_m2 ; unsigned char int_s1 ; unsigned char sctrl ; unsigned char sctrl_r ; unsigned char sctrl_e ; unsigned char trm ; unsigned char stat ; unsigned char fifo ; unsigned char bswapped ; unsigned char nt_mode ; unsigned char chip ; int b_fifo_size ; unsigned char last_fifo ; void * extra ; int nt_timer ; s#timer_list timer ; } 
s#isurf_hw struct isurf_hw { unsigned int reset ; unsigned long phymem ; void * isac ; void * isar ; s#isar_reg isar_r ; } 
s#saphir_hw struct saphir_hw { s#pci_dev * dev ; unsigned int cfg_reg ; unsigned int ale ; unsigned int isac ; unsigned int hscx ; s#timer_list timer ; } 
s#bkm_hw struct bkm_hw { s#pci_dev * dev ; unsigned long base ; unsigned long isac_adr ; unsigned int isac_ale ; unsigned long jade_adr ; unsigned int jade_ale ; unsigned long plx_adr ; unsigned long data_adr ; } 
s#gazel_hw struct gazel_hw { s#pci_dev * dev ; unsigned int cfg_reg ; unsigned int pciaddr [ 2 ] ; signed int ipac ; signed int isac ; signed int hscx [ 2 ] ; signed int isacfifo ; signed int hscxfifo [ 2 ] ; unsigned char timeslot ; unsigned char iom2 ; } 
s#w6692_hw struct w6692_hw { s#pci_dev * dev ; unsigned int iobase ; s#timer_list timer ; } 
s##hisax_d_if
s#arcofi_msg struct arcofi_msg { s#arcofi_msg * next ; t#u_char receive ; t#u_char len ; t#u_char msg [ 10 ] ; } 
s#isac_chip struct isac_chip { int ph_state ; t#u_char * mon_tx ; t#u_char * mon_rx ; int mon_txp ; int mon_txc ; int mon_rxp ; s#arcofi_msg * arcofi_list ; s#timer_list arcofitimer ; t#wait_queue_head_t arcofi_wait ; t#u_char arcofi_bc ; t#u_char arcofi_state ; t#u_char mocr ; t#u_char adf2 ; } 
s#hfcd_chip struct hfcd_chip { int ph_state ; } 
s#hfcpci_chip struct hfcpci_chip { int ph_state ; } 
s#hfcsx_chip struct hfcsx_chip { int ph_state ; } 
s#w6692_chip struct w6692_chip { int ph_state ; } 
s#amd7930_chip struct amd7930_chip { t#u_char lmr1 ; t#u_char ph_state ; t#u_char old_state ; t#u_char flg_t3 ; unsigned int tx_xmtlen ; s#timer_list timer3 ; void ( * ph_command ) ( s#IsdnCardState * , t#u_char , char * ) ; void ( * setIrqMask ) ( s#IsdnCardState * , t#u_char ) ; } 
s#icc_chip struct icc_chip { int ph_state ; t#u_char * mon_tx ; t#u_char * mon_rx ; int mon_txp ; int mon_txc ; int mon_rxp ; s#arcofi_msg * arcofi_list ; s#timer_list arcofitimer ; t#wait_queue_head_t arcofi_wait ; t#u_char arcofi_bc ; t#u_char arcofi_state ; t#u_char mocr ; t#u_char adf2 ; } 
s#IsdnCardState struct IsdnCardState { t#spinlock_t lock ; t#u_char typ ; t#u_char subtyp ; int protocol ; t#u_int irq ; t#u_long irq_flags ; t#u_long HW_Flags ; int * busy_flag ; int chanlimit ; int logecho ; union { s#elsa_hw elsa ; s#teles0_hw teles0 ; s#teles3_hw teles3 ; s#avm_hw avm ; s#ix1_hw ix1 ; s#diva_hw diva ; s#asus_hw asus ; s#hfc_hw hfc ; s#sedl_hw sedl ; s#spt_hw spt ; s#mic_hw mic ; s#njet_hw njet ; s#hfcD_hw hfcD ; s#hfcPCI_hw hfcpci ; s#hfcSX_hw hfcsx ; s#ix1_hw niccy ; s#isurf_hw isurf ; s#saphir_hw saphir ; s#bkm_hw ax ; s#gazel_hw gazel ; s#w6692_hw w6692 ; s#hisax_d_if * hisax_d_if ; } hw ; int myid ; t#isdn_if iif ; t#spinlock_t statlock ; t#u_char * status_buf ; t#u_char * status_read ; t#u_char * status_write ; t#u_char * status_end ; t#u_char ( * readisac ) ( s#IsdnCardState * , t#u_char ) ; void ( * writeisac ) ( s#IsdnCardState * , t#u_char , t#u_char ) ; void ( * readisacfifo ) ( s#IsdnCardState * , t#u_char * , int ) ; void ( * writeisacfifo ) ( s#IsdnCardState * , t#u_char * , int ) ; t#u_char ( * BC_Read_Reg ) ( s#IsdnCardState * , int , t#u_char ) ; void ( * BC_Write_Reg ) ( s#IsdnCardState * , int , t#u_char , t#u_char ) ; void ( * BC_Send_Data ) ( s#BCState * ) ; int ( * cardmsg ) ( s#IsdnCardState * , int , void * ) ; void ( * setstack_d ) ( s#PStack * , s#IsdnCardState * ) ; void ( * DC_Close ) ( s#IsdnCardState * ) ; t#irq_handler_t irq_func ; int ( * auxcmd ) ( s#IsdnCardState * , t#isdn_ctrl * ) ; s#Channel channel [ 2 + 2 ] ; s#BCState bcs [ 2 + 2 ] ; s#PStack * stlist ; s#sk_buff_head rq , sq ; int cardnr ; char * dlog ; int debug ; union { s#isac_chip isac ; s#hfcd_chip hfcd ; s#hfcpci_chip hfcpci ; s#hfcsx_chip hfcsx ; s#w6692_chip w6692 ; s#amd7930_chip amd7930 ; s#icc_chip icc ; } dc ; t#u_char * rcvbuf ; int rcvidx ; s#sk_buff * tx_skb ; int tx_cnt ; t#u_long event ; s#work_struct tqueue ; s#timer_list dbusytimer ; int err_crc ; int err_tx ; int err_rx ; } 
t#IsdnCardState_t typedef s#IsdnCardState IsdnCardState_t 
s#IsdnCard struct IsdnCard { int typ ; int protocol ; unsigned long para [ 4 ] ; t#IsdnCardState_t * cs ; } 
t#IsdnCard_t typedef s#IsdnCard IsdnCard_t 
hisax_init_pcmcia extern int hisax_init_pcmcia ( void * , int * , t#IsdnCard_t * ) 
HiSax_closecard extern void HiSax_closecard ( int ) 
hisax_register int hisax_register ( s#hisax_d_if * , s#hisax_b_if * [ ] , char * , int ) 
hisax_unregister void hisax_unregister ( s#hisax_d_if * ) 
s#FsmNode struct FsmNode { int state , event ; void ( * routine ) ( s#FsmInst * , int , void * ) ; } 
FsmNew int FsmNew ( s#Fsm * , s#FsmNode * , int ) 
FsmFree void FsmFree ( s#Fsm * ) 
FsmEvent int FsmEvent ( s#FsmInst * , int , void * ) 
FsmChangeState void FsmChangeState ( s#FsmInst * , int ) 
FsmInitTimer void FsmInitTimer ( s#FsmInst * , s#FsmTimer * ) 
FsmDelTimer void FsmDelTimer ( s#FsmTimer * , int ) 
FsmRestartTimer void FsmRestartTimer ( s#FsmTimer * , int , int , void * , int ) 

/* drivers/isdn/hisax/hisax_isac.o */
s#hisax_if struct hisax_if { void * priv ; void ( * l1l2 ) ( s#hisax_if * , int , void * ) ; void ( * l2l1 ) ( s#hisax_if * , int , void * ) ; } 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##IsdnCardState
s##BCState
s#hisax_b_if struct hisax_b_if { s#hisax_if ifc ; s#BCState * bcs ; } 
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##map_segment
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
s#hisax_d_if struct hisax_d_if { s#hisax_if ifc ; s#module * owner ; s#IsdnCardState * cs ; s#hisax_b_if * b_if [ 2 ] ; s#sk_buff_head erq ; unsigned long ph_state ; } 
s#isac struct isac { void * priv ; t#u_long flags ; s#hisax_d_if hisax_d_if ; s#FsmInst l1m ; s#FsmTimer timer ; t#u_char mocr ; t#u_char adf2 ; int type ; t#u_char rcvbuf [ 300 ] ; int rcvidx ; s#sk_buff * tx_skb ; int tx_cnt ; t#u_char ( * read_isac ) ( s#isac * , t#u_char ) ; void ( * write_isac ) ( s#isac * , t#u_char , t#u_char ) ; void ( * read_isac_fifo ) ( s#isac * , t#u_char * , int ) ; void ( * write_isac_fifo ) ( s#isac * , t#u_char * , int ) ; } 
isac_init void isac_init ( s#isac * ) 
isac_d_l2l1 void isac_d_l2l1 ( s#hisax_if * , int , void * ) 
isacsx_setup void isacsx_setup ( s#isac * ) 
isacsx_irq void isacsx_irq ( s#isac * ) 
isac_setup void isac_setup ( s#isac * ) 
isac_irq void isac_irq ( s#isac * ) 

/* drivers/isdn/i4l/isdn_common.o */
t#isdn_divert_if typedef struct { t#ulong if_magic ; int cmd ; int ( * stat_callback ) ( t#isdn_ctrl * ) ; int ( * ll_cmd ) ( t#isdn_ctrl * ) ; char * ( * drv_to_name ) ( int ) ; int ( * name_to_drv ) ( char * ) ; } isdn_divert_if 
isdn_register_divert extern int isdn_register_divert ( t#isdn_divert_if * ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
register_isdn extern int register_isdn ( t#isdn_if * ) 
s#isdn_ppp_comp_data struct isdn_ppp_comp_data { int num ; unsigned char options [ 16 ] ; int optlen ; int flags ; } 
s#isdn_ppp_resetparams struct isdn_ppp_resetparams { unsigned char valid : 1 ; unsigned char rsend : 1 ; unsigned char idval : 1 ; unsigned char dtval : 1 ; unsigned char expra : 1 ; unsigned char id ; unsigned short maxdlen ; unsigned short dlen ; unsigned char * data ; } 
s#compstat struct compstat { t#__u32 unc_bytes ; t#__u32 unc_packets ; t#__u32 comp_bytes ; t#__u32 comp_packets ; t#__u32 inc_bytes ; t#__u32 inc_packets ; t#__u32 in_count ; t#__u32 bytes_out ; double ratio ; } 
s#isdn_ppp_compressor struct isdn_ppp_compressor { s#isdn_ppp_compressor * next , * prev ; s#module * owner ; int num ; void * ( * alloc ) ( s#isdn_ppp_comp_data * ) ; void ( * free ) ( void * ) ; int ( * init ) ( void * , s#isdn_ppp_comp_data * , int , int ) ; void ( * reset ) ( void * , unsigned char , unsigned char , unsigned char * , unsigned , s#isdn_ppp_resetparams * ) ; int ( * compress ) ( void * , s#sk_buff * , s#sk_buff * , int ) ; int ( * decompress ) ( void * , s#sk_buff * , s#sk_buff * , s#isdn_ppp_resetparams * ) ; void ( * incomp ) ( void * , s#sk_buff * , int ) ; void ( * stat ) ( void * , s#compstat * ) ; } 
isdn_ppp_register_compressor extern int isdn_ppp_register_compressor ( s#isdn_ppp_compressor * ) 
isdn_ppp_unregister_compressor extern int isdn_ppp_unregister_compressor ( s#isdn_ppp_compressor * ) 

/* drivers/isdn/i4l/isdnhdlc.o */
s#isdnhdlc_vars struct isdnhdlc_vars { int bit_shift ; int hdlc_bits1 ; int data_bits ; int ffbit_shift ; int state ; int dstpos ; t#u16 crc ; t#u8 cbin ; t#u8 shift_reg ; t#u8 ffvalue ; t#u32 data_received : 1 ; t#u32 dchannel : 1 ; t#u32 do_adapt56 : 1 ; t#u32 do_closing : 1 ; t#u32 do_bitreverse : 1 ; } 
isdnhdlc_out_init extern void isdnhdlc_out_init ( s#isdnhdlc_vars * , t#u32 ) 
isdnhdlc_rcv_init extern void isdnhdlc_rcv_init ( s#isdnhdlc_vars * , t#u32 ) 
isdnhdlc_decode extern int isdnhdlc_decode ( s#isdnhdlc_vars * , const t#u8 * , int , int * , t#u8 * , int ) 
isdnhdlc_encode extern int isdnhdlc_encode ( s#isdnhdlc_vars * , const t#u8 * , t#u16 , int * , t#u8 * , int ) 

/* drivers/isdn/mISDN/clock.o */
t#clockctl_func_t typedef int ( clockctl_func_t ) ( void * , int ) 
s#mISDNclock struct mISDNclock { s#list_head list ; char name [ 64 ] ; int pri ; t#clockctl_func_t * ctl ; void * priv ; } 
mISDN_register_clock extern s#mISDNclock * mISDN_register_clock ( char * , int , t#clockctl_func_t * , void * ) 
mISDN_unregister_clock extern void mISDN_unregister_clock ( s#mISDNclock * ) 
mISDN_clock_update extern void mISDN_clock_update ( s#mISDNclock * , int , s#timeval * ) 
mISDN_clock_get extern unsigned short mISDN_clock_get ( void ) 

/* drivers/isdn/mISDN/core.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
mISDN_register_device extern int mISDN_register_device ( s#mISDNdevice * , s#device * , char * ) 
mISDN_unregister_device extern void mISDN_unregister_device ( s#mISDNdevice * ) 
t#create_func_t typedef int ( create_func_t ) ( s#channel_req * ) 
s#Bprotocol struct Bprotocol { s#list_head list ; char * name ; t#u_int Bprotocols ; t#create_func_t * create ; } 
mISDN_register_Bprotocol extern int mISDN_register_Bprotocol ( s#Bprotocol * ) 
mISDN_unregister_Bprotocol extern void mISDN_unregister_Bprotocol ( s#Bprotocol * ) 

/* drivers/isdn/mISDN/dsp_audio.o */
dsp_audio_law_to_s32 extern t#s32 * dsp_audio_law_to_s32 
dsp_audio_s16_to_law extern t#u8 dsp_audio_s16_to_law [ 65536 ] 

/* drivers/isdn/mISDN/dsp_pipeline.o */
s#mISDN_dsp_element_arg struct mISDN_dsp_element_arg { char * name ; char * def ; char * desc ; } 
s#mISDN_dsp_element struct mISDN_dsp_element { char * name ; void * ( * new ) ( const char * ) ; void ( * free ) ( void * ) ; void ( * process_tx ) ( void * , unsigned char * , int ) ; void ( * process_rx ) ( void * , unsigned char * , int , unsigned int ) ; int num_args ; s#mISDN_dsp_element_arg * args ; } 
mISDN_dsp_element_register extern int mISDN_dsp_element_register ( s#mISDN_dsp_element * ) 
mISDN_dsp_element_unregister extern void mISDN_dsp_element_unregister ( s#mISDN_dsp_element * ) 

/* drivers/isdn/mISDN/fsm.o */
mISDN_FsmNew extern void mISDN_FsmNew ( s#Fsm * , s#FsmNode * , int ) 
mISDN_FsmFree extern void mISDN_FsmFree ( s#Fsm * ) 
mISDN_FsmEvent extern int mISDN_FsmEvent ( s#FsmInst * , int , void * ) 
mISDN_FsmChangeState extern void mISDN_FsmChangeState ( s#FsmInst * , int ) 
s##tvec_base
mISDN_FsmInitTimer extern void mISDN_FsmInitTimer ( s#FsmInst * , s#FsmTimer * ) 
mISDN_FsmDelTimer extern void mISDN_FsmDelTimer ( s#FsmTimer * , int ) 
mISDN_FsmAddTimer extern int mISDN_FsmAddTimer ( s#FsmTimer * , int , int , void * , int ) 
mISDN_FsmRestartTimer extern void mISDN_FsmRestartTimer ( s#FsmTimer * , int , int , void * , int ) 

/* drivers/isdn/mISDN/hwchannel.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
mISDN_initdchannel extern int mISDN_initdchannel ( s#dchannel * , int , void * ) 
mISDN_initbchannel extern int mISDN_initbchannel ( s#bchannel * , int ) 
mISDN_freedchannel extern int mISDN_freedchannel ( s#dchannel * ) 
mISDN_clear_bchannel extern void mISDN_clear_bchannel ( s#bchannel * ) 
mISDN_freebchannel extern int mISDN_freebchannel ( s#bchannel * ) 
recv_Dchannel extern void recv_Dchannel ( s#dchannel * ) 
recv_Echannel extern void recv_Echannel ( s#dchannel * , s#dchannel * ) 
recv_Bchannel extern void recv_Bchannel ( s#bchannel * , unsigned int ) 
recv_Dchannel_skb extern void recv_Dchannel_skb ( s#dchannel * , s#sk_buff * ) 
recv_Bchannel_skb extern void recv_Bchannel_skb ( s#bchannel * , s#sk_buff * ) 
get_next_dframe extern int get_next_dframe ( s#dchannel * ) 
confirm_Bsend extern void confirm_Bsend ( s#bchannel * ) 
get_next_bframe extern int get_next_bframe ( s#bchannel * ) 
queue_ch_frame extern void queue_ch_frame ( s#mISDNchannel * , t#u_int , int , s#sk_buff * ) 
dchannel_senddata extern int dchannel_senddata ( s#dchannel * , s#sk_buff * ) 
bchannel_senddata extern int bchannel_senddata ( s#bchannel * , s#sk_buff * ) 

/* drivers/isdn/mISDN/layer1.o */
s##tvec_base
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
t#dchannel_l1callback typedef int ( dchannel_l1callback ) ( s#dchannel * , t#u_int ) 
s#layer1 struct layer1 { t#u_long Flags ; s#FsmInst l1m ; s#FsmTimer timer ; int delay ; s#dchannel * dch ; t#dchannel_l1callback * dcb ; } 
l1_event extern int l1_event ( s#layer1 * , t#u_int ) 
create_l1 extern int create_l1 ( s#dchannel * , t#dchannel_l1callback * ) 

/* drivers/leds/led-class.o */
e#led_brightness enum led_brightness { LED_OFF = 0 , LED_HALF = 127 , LED_FULL = 255 , } 
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#led_trigger struct led_trigger { const char * name ; void ( * activate ) ( s#led_classdev * ) ; void ( * deactivate ) ( s#led_classdev * ) ; t#rwlock_t leddev_list_lock ; s#list_head led_cdevs ; s#list_head next_trig ; } 
s#led_classdev struct led_classdev { const char * name ; int brightness ; int max_brightness ; int flags ; void ( * brightness_set ) ( s#led_classdev * , e#led_brightness ) ; e#led_brightness ( * brightness_get ) ( s#led_classdev * ) ; int ( * blink_set ) ( s#led_classdev * , unsigned long * , unsigned long * ) ; s#device * dev ; s#list_head node ; const char * default_trigger ; s#rw_semaphore trigger_lock ; s#led_trigger * trigger ; s#list_head trig_list ; void * trigger_data ; } 
led_classdev_suspend extern void led_classdev_suspend ( s#led_classdev * ) 
led_classdev_resume extern void led_classdev_resume ( s#led_classdev * ) 
led_classdev_register extern int led_classdev_register ( s#device * , s#led_classdev * ) 
led_classdev_unregister extern void led_classdev_unregister ( s#led_classdev * ) 

/* drivers/leds/led-core.o */
leds_list_lock extern s#rw_semaphore leds_list_lock 
leds_list extern s#list_head leds_list 

/* drivers/leds/led-triggers.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
led_trigger_store t#ssize_t led_trigger_store ( s#device * , s#device_attribute * , const char * , t#size_t ) 
led_trigger_show t#ssize_t led_trigger_show ( s#device * , s#device_attribute * , char * ) 
led_trigger_set void led_trigger_set ( s#led_classdev * , s#led_trigger * ) 
led_trigger_remove void led_trigger_remove ( s#led_classdev * ) 
led_trigger_set_default void led_trigger_set_default ( s#led_classdev * ) 
led_trigger_register extern int led_trigger_register ( s#led_trigger * ) 
led_trigger_unregister extern void led_trigger_unregister ( s#led_trigger * ) 
led_trigger_event extern void led_trigger_event ( s#led_trigger * , e#led_brightness ) 
led_trigger_register_simple extern void led_trigger_register_simple ( const char * , s#led_trigger * * ) 
led_trigger_unregister_simple extern void led_trigger_unregister_simple ( s#led_trigger * ) 

/* drivers/leds/ledtrig-ide-disk.o */
ledtrig_ide_activity extern void ledtrig_ide_activity ( void ) 

/* drivers/md/bitmap.o */
s#bitmap_page struct bitmap_page { char * map ; unsigned int hijacked : 1 ; unsigned int count : 31 ; } 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##mnt_namespace
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#mdk_rdev_s struct mdk_rdev_s { s#list_head same_set ; t#sector_t sectors ; t#mddev_t * mddev ; int last_events ; s#block_device * bdev ; s#page * sb_page ; int sb_loaded ; t#__u64 sb_events ; t#sector_t data_offset ; t#sector_t sb_start ; int sb_size ; int preferred_minor ; s#kobject kobj ; unsigned long flags ; t#wait_queue_head_t blocked_wait ; int desc_nr ; int raid_disk ; int saved_raid_disk ; t#sector_t recovery_offset ; t#atomic_t nr_pending ; t#atomic_t read_errors ; t#atomic_t corrected_errors ; s#work_struct del_work ; s#sysfs_dirent * sysfs_state ; } 
t#mdk_rdev_t typedef s#mdk_rdev_s mdk_rdev_t 
s#mdk_personality struct mdk_personality { char * name ; int level ; s#list_head list ; s#module * owner ; int ( * make_request ) ( s#request_queue * , s#bio * ) ; int ( * run ) ( t#mddev_t * ) ; int ( * stop ) ( t#mddev_t * ) ; void ( * status ) ( s#seq_file * , t#mddev_t * ) ; void ( * error_handler ) ( t#mddev_t * , t#mdk_rdev_t * ) ; int ( * hot_add_disk ) ( t#mddev_t * , t#mdk_rdev_t * ) ; int ( * hot_remove_disk ) ( t#mddev_t * , int ) ; int ( * spare_active ) ( t#mddev_t * ) ; t#sector_t ( * sync_request ) ( t#mddev_t * , t#sector_t , int * , int ) ; int ( * resize ) ( t#mddev_t * , t#sector_t ) ; t#sector_t ( * size ) ( t#mddev_t * , t#sector_t , int ) ; int ( * check_reshape ) ( t#mddev_t * ) ; int ( * start_reshape ) ( t#mddev_t * ) ; void ( * finish_reshape ) ( t#mddev_t * ) ; void ( * quiesce ) ( t#mddev_t * , int ) ; void * ( * takeover ) ( t#mddev_t * ) ; } 
s#mdk_thread_s struct mdk_thread_s { void ( * run ) ( t#mddev_t * ) ; t#mddev_t * mddev ; t#wait_queue_head_t wqueue ; unsigned long flags ; s#task_struct * tsk ; unsigned long timeout ; } 
s#mddev_s struct mddev_s { void * private ; s#mdk_personality * pers ; t#dev_t unit ; int md_minor ; s#list_head disks ; unsigned long flags ; int suspended ; t#atomic_t active_io ; int ro ; s#gendisk * gendisk ; s#kobject kobj ; int hold_active ; int major_version , minor_version , patch_version ; int persistent ; int external ; char metadata_type [ 17 ] ; int chunk_sectors ; t#time_t ctime , utime ; int level , layout ; char clevel [ 16 ] ; int raid_disks ; int max_disks ; t#sector_t dev_sectors ; t#sector_t array_sectors ; int external_size ; t#__u64 events ; char uuid [ 16 ] ; t#sector_t reshape_position ; int delta_disks , new_level , new_layout ; int new_chunk_sectors ; s#mdk_thread_s * thread ; s#mdk_thread_s * sync_thread ; t#sector_t curr_resync ; t#sector_t curr_resync_completed ; unsigned long resync_mark ; t#sector_t resync_mark_cnt ; t#sector_t curr_mark_cnt ; t#sector_t resync_max_sectors ; t#sector_t resync_mismatches ; t#sector_t suspend_lo ; t#sector_t suspend_hi ; int sync_speed_min ; int sync_speed_max ; int parallel_resync ; int ok_start_degraded ; unsigned long recovery ; int recovery_disabled ; int in_sync ; s#mutex open_mutex ; s#mutex reconfig_mutex ; t#atomic_t active ; t#atomic_t openers ; int changed ; int degraded ; int barriers_work ; s#bio * biolist ; t#atomic_t recovery_active ; t#wait_queue_head_t recovery_wait ; t#sector_t recovery_cp ; t#sector_t resync_min ; t#sector_t resync_max ; s#sysfs_dirent * sysfs_state ; s#sysfs_dirent * sysfs_action ; s#work_struct del_work ; t#spinlock_t write_lock ; t#wait_queue_head_t sb_wait ; t#atomic_t pending_writes ; unsigned int safemode ; unsigned int safemode_delay ; s#timer_list safemode_timer ; t#atomic_t writes_pending ; s#request_queue * queue ; t#atomic_t write_behind ; unsigned int max_write_behind ; s#bitmap * bitmap ; s#file * bitmap_file ; long bitmap_offset ; long default_bitmap_offset ; s#mutex bitmap_mutex ; s#list_head all_mddevs ; } 
t#mddev_t typedef s#mddev_s mddev_t 
s#bitmap struct bitmap { s#bitmap_page * bp ; unsigned long pages ; unsigned long missing_pages ; t#mddev_t * mddev ; int counter_bits ; unsigned long chunksize ; unsigned long chunkshift ; unsigned long chunks ; unsigned long syncchunk ; t#__u64 events_cleared ; int need_sync ; t#spinlock_t lock ; long offset ; s#file * file ; s#page * sb_page ; s#page * * filemap ; unsigned long * filemap_attr ; unsigned long file_pages ; int last_page_size ; unsigned long flags ; int allclean ; unsigned long max_write_behind ; t#atomic_t behind_writes ; unsigned long daemon_lastrun ; unsigned long daemon_sleep ; unsigned long last_end_sync ; t#atomic_t pending_writes ; t#wait_queue_head_t write_wait ; t#wait_queue_head_t overflow_wait ; } 
bitmap_startwrite int bitmap_startwrite ( s#bitmap * , t#sector_t , unsigned long , int ) 
bitmap_endwrite void bitmap_endwrite ( s#bitmap * , t#sector_t , unsigned long , int , int ) 
bitmap_start_sync int bitmap_start_sync ( s#bitmap * , t#sector_t , int * , int ) 
bitmap_end_sync void bitmap_end_sync ( s#bitmap * , t#sector_t , int * , int ) 
bitmap_unplug void bitmap_unplug ( s#bitmap * ) 
bitmap_close_sync void bitmap_close_sync ( s#bitmap * ) 
bitmap_cond_end_sync void bitmap_cond_end_sync ( s#bitmap * , t#sector_t ) 

/* drivers/md/dm.o */
u#map_info union map_info { void * ptr ; unsigned long long ll ; unsigned flush_request ; } 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##timer_rand_state
dm_get_rq_mapinfo u#map_info * dm_get_rq_mapinfo ( s#request * ) 
dm_requeue_unmapped_request void dm_requeue_unmapped_request ( s#request * ) 
dm_kill_unmapped_request void dm_kill_unmapped_request ( s#request * , int ) 
dm_dispatch_request void dm_dispatch_request ( s#request * ) 
dm_underlying_device_busy int dm_underlying_device_busy ( s#request_queue * ) 
s##workqueue_struct
s##dm_table
s#mapped_device struct mapped_device { s#rw_semaphore io_lock ; s#mutex suspend_lock ; t#rwlock_t map_lock ; t#atomic_t holders ; t#atomic_t open_count ; unsigned long flags ; s#request_queue * queue ; s#gendisk * disk ; char name [ 16 ] ; void * interface_ptr ; t#atomic_t pending [ 2 ] ; t#wait_queue_head_t wait ; s#work_struct work ; s#bio_list deferred ; t#spinlock_t deferred_lock ; int barrier_error ; s#workqueue_struct * wq ; s#dm_table * map ; t#mempool_t * io_pool ; t#mempool_t * tio_pool ; s#bio_set * bs ; t#atomic_t event_nr ; t#wait_queue_head_t eventq ; t#atomic_t uevent_seq ; s#list_head uevent_list ; t#spinlock_t uevent_lock ; s#super_block * frozen_sb ; s#block_device * bdev ; s#hd_geometry geometry ; t#make_request_fn * saved_make_request_fn ; s#kobject kobj ; s#bio barrier_bio ; } 
dm_device_name const char * dm_device_name ( s#mapped_device * ) 
dm_put void dm_put ( s#mapped_device * ) 
dm_disk s#gendisk * dm_disk ( s#mapped_device * ) 
t#dm_ctr_fn typedef int ( * dm_ctr_fn ) ( s#dm_target * , unsigned int , char * * ) 
t#dm_dtr_fn typedef void ( * dm_dtr_fn ) ( s#dm_target * ) 
t#dm_map_fn typedef int ( * dm_map_fn ) ( s#dm_target * , s#bio * , u#map_info * ) 
t#dm_map_request_fn typedef int ( * dm_map_request_fn ) ( s#dm_target * , s#request * , u#map_info * ) 
t#dm_endio_fn typedef int ( * dm_endio_fn ) ( s#dm_target * , s#bio * , int , u#map_info * ) 
t#dm_request_endio_fn typedef int ( * dm_request_endio_fn ) ( s#dm_target * , s#request * , int , u#map_info * ) 
t#dm_flush_fn typedef void ( * dm_flush_fn ) ( s#dm_target * ) 
t#dm_presuspend_fn typedef void ( * dm_presuspend_fn ) ( s#dm_target * ) 
t#dm_postsuspend_fn typedef void ( * dm_postsuspend_fn ) ( s#dm_target * ) 
t#dm_preresume_fn typedef int ( * dm_preresume_fn ) ( s#dm_target * ) 
t#dm_resume_fn typedef void ( * dm_resume_fn ) ( s#dm_target * ) 
t#status_type_t typedef enum { STATUSTYPE_INFO , STATUSTYPE_TABLE } status_type_t 
t#dm_status_fn typedef int ( * dm_status_fn ) ( s#dm_target * , t#status_type_t , char * , unsigned int ) 
t#dm_message_fn typedef int ( * dm_message_fn ) ( s#dm_target * , unsigned , char * * ) 
t#dm_ioctl_fn typedef int ( * dm_ioctl_fn ) ( s#dm_target * , unsigned int , unsigned long ) 
t#dm_merge_fn typedef int ( * dm_merge_fn ) ( s#dm_target * , s#bvec_merge_data * , s#bio_vec * , int ) 
t#dm_busy_fn typedef int ( * dm_busy_fn ) ( s#dm_target * ) 
s#dm_dev struct dm_dev { s#block_device * bdev ; t#fmode_t mode ; char name [ 16 ] ; } 
t#iterate_devices_callout_fn typedef int ( * iterate_devices_callout_fn ) ( s#dm_target * , s#dm_dev * , t#sector_t , t#sector_t , void * ) 
t#dm_iterate_devices_fn typedef int ( * dm_iterate_devices_fn ) ( s#dm_target * , t#iterate_devices_callout_fn , void * ) 
t#dm_io_hints_fn typedef void ( * dm_io_hints_fn ) ( s#dm_target * , s#queue_limits * ) 
s#target_type struct target_type { t#uint64_t features ; const char * name ; s#module * module ; unsigned version [ 3 ] ; t#dm_ctr_fn ctr ; t#dm_dtr_fn dtr ; t#dm_map_fn map ; t#dm_map_request_fn map_rq ; t#dm_endio_fn end_io ; t#dm_request_endio_fn rq_end_io ; t#dm_flush_fn flush ; t#dm_presuspend_fn presuspend ; t#dm_postsuspend_fn postsuspend ; t#dm_preresume_fn preresume ; t#dm_resume_fn resume ; t#dm_status_fn status ; t#dm_message_fn message ; t#dm_ioctl_fn ioctl ; t#dm_merge_fn merge ; t#dm_busy_fn busy ; t#dm_iterate_devices_fn iterate_devices ; t#dm_io_hints_fn io_hints ; s#list_head list ; } 
s#dm_target struct dm_target { s#dm_table * table ; s#target_type * type ; t#sector_t begin ; t#sector_t len ; t#sector_t split_io ; unsigned num_flush_requests ; void * private ; char * error ; } 
dm_noflush_suspending int dm_noflush_suspending ( s#dm_target * ) 
dm_get_mapinfo u#map_info * dm_get_mapinfo ( s#bio * ) 

/* drivers/md/dm-exception-store.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##dm_table
s#dm_exception_store struct dm_exception_store { s#dm_exception_store_type * type ; s#dm_target * ti ; s#dm_dev * cow ; unsigned chunk_size ; unsigned chunk_mask ; unsigned chunk_shift ; void * context ; } 
t#chunk_t typedef t#sector_t chunk_t 
s#dm_snap_exception struct dm_snap_exception { s#list_head hash_list ; t#chunk_t old_chunk ; t#chunk_t new_chunk ; } 
s#dm_exception_store_type struct dm_exception_store_type { const char * name ; s#module * module ; int ( * ctr ) ( s#dm_exception_store * , unsigned , char * * ) ; void ( * dtr ) ( s#dm_exception_store * ) ; int ( * read_metadata ) ( s#dm_exception_store * , int ( * ) ( void * , t#chunk_t , t#chunk_t ) , void * ) ; int ( * prepare_exception ) ( s#dm_exception_store * , s#dm_snap_exception * ) ; void ( * commit_exception ) ( s#dm_exception_store * , s#dm_snap_exception * , void ( * ) ( void * , int ) , void * ) ; void ( * drop_snapshot ) ( s#dm_exception_store * ) ; unsigned ( * status ) ( s#dm_exception_store * , t#status_type_t , char * , unsigned ) ; void ( * fraction_full ) ( s#dm_exception_store * , t#sector_t * , t#sector_t * ) ; s#list_head list ; } 
dm_exception_store_type_register int dm_exception_store_type_register ( s#dm_exception_store_type * ) 
dm_exception_store_type_unregister int dm_exception_store_type_unregister ( s#dm_exception_store_type * ) 
dm_exception_store_create int dm_exception_store_create ( s#dm_target * , int , char * * , unsigned * , s#dm_exception_store * * ) 
dm_exception_store_destroy void dm_exception_store_destroy ( s#dm_exception_store * ) 

/* drivers/md/dm-io.o */
s##array_cache
s##kmem_list3
s#dm_io_client struct dm_io_client { t#mempool_t * pool ; s#bio_set * bios ; } 
dm_io_client_create s#dm_io_client * dm_io_client_create ( unsigned ) 
dm_io_client_resize int dm_io_client_resize ( unsigned , s#dm_io_client * ) 
dm_io_client_destroy void dm_io_client_destroy ( s#dm_io_client * ) 
e#dm_io_mem_type enum dm_io_mem_type { DM_IO_PAGE_LIST , DM_IO_BVEC , DM_IO_VMA , DM_IO_KMEM , } 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s#page_list struct page_list { s#page_list * next ; s#page * page ; } 
s#dm_io_memory struct dm_io_memory { e#dm_io_mem_type type ; union { s#page_list * pl ; s#bio_vec * bvec ; void * vma ; void * addr ; } ptr ; unsigned offset ; } 
t#io_notify_fn typedef void ( * io_notify_fn ) ( unsigned long , void * ) 
s#dm_io_notify struct dm_io_notify { t#io_notify_fn fn ; void * context ; } 
s#dm_io_request struct dm_io_request { int bi_rw ; s#dm_io_memory mem ; s#dm_io_notify notify ; s#dm_io_client * client ; } 
s#dm_io_region struct dm_io_region { s#block_device * bdev ; t#sector_t sector ; t#sector_t count ; } 
dm_io int dm_io ( s#dm_io_request * , unsigned , s#dm_io_region * , unsigned long * ) 

/* drivers/md/dm-kcopyd.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##dm_io_client
s##workqueue_struct
s#dm_kcopyd_client struct dm_kcopyd_client { t#spinlock_t lock ; s#page_list * pages ; unsigned int nr_pages ; unsigned int nr_free_pages ; s#dm_io_client * io_client ; t#wait_queue_head_t destroyq ; t#atomic_t nr_jobs ; t#mempool_t * job_pool ; s#workqueue_struct * kcopyd_wq ; s#work_struct kcopyd_work ; t#spinlock_t job_lock ; s#list_head complete_jobs ; s#list_head io_jobs ; s#list_head pages_jobs ; } 
t#dm_kcopyd_notify_fn typedef void ( * dm_kcopyd_notify_fn ) ( int , unsigned long , void * ) 
dm_kcopyd_copy int dm_kcopyd_copy ( s#dm_kcopyd_client * , s#dm_io_region * , unsigned , s#dm_io_region * , unsigned , t#dm_kcopyd_notify_fn , void * ) 
dm_kcopyd_client_create int dm_kcopyd_client_create ( unsigned , s#dm_kcopyd_client * * ) 
dm_kcopyd_client_destroy void dm_kcopyd_client_destroy ( s#dm_kcopyd_client * ) 

/* drivers/md/dm-log.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#dm_dirty_log struct dm_dirty_log { s#dm_dirty_log_type * type ; void * context ; } 
s##dm_table
t#region_t typedef t#sector_t region_t 
s#dm_dirty_log_type struct dm_dirty_log_type { const char * name ; s#module * module ; s#list_head list ; int ( * ctr ) ( s#dm_dirty_log * , s#dm_target * , unsigned , char * * ) ; void ( * dtr ) ( s#dm_dirty_log * ) ; int ( * presuspend ) ( s#dm_dirty_log * ) ; int ( * postsuspend ) ( s#dm_dirty_log * ) ; int ( * resume ) ( s#dm_dirty_log * ) ; t#uint32_t ( * get_region_size ) ( s#dm_dirty_log * ) ; int ( * is_clean ) ( s#dm_dirty_log * , t#region_t ) ; int ( * in_sync ) ( s#dm_dirty_log * , t#region_t , int ) ; int ( * flush ) ( s#dm_dirty_log * ) ; void ( * mark_region ) ( s#dm_dirty_log * , t#region_t ) ; void ( * clear_region ) ( s#dm_dirty_log * , t#region_t ) ; int ( * get_resync_work ) ( s#dm_dirty_log * , t#region_t * ) ; void ( * set_region_sync ) ( s#dm_dirty_log * , t#region_t , int ) ; t#region_t ( * get_sync_count ) ( s#dm_dirty_log * ) ; int ( * status ) ( s#dm_dirty_log * , t#status_type_t , char * , unsigned ) ; int ( * is_remote_recovering ) ( s#dm_dirty_log * , t#region_t ) ; } 
dm_dirty_log_type_register int dm_dirty_log_type_register ( s#dm_dirty_log_type * ) 
dm_dirty_log_type_unregister int dm_dirty_log_type_unregister ( s#dm_dirty_log_type * ) 
dm_dirty_log_create s#dm_dirty_log * dm_dirty_log_create ( const char * , s#dm_target * , unsigned , char * * ) 
dm_dirty_log_destroy void dm_dirty_log_destroy ( s#dm_dirty_log * ) 

/* drivers/md/dm-memcache.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s#dm_mem_cache_client struct dm_mem_cache_client { t#spinlock_t lock ; t#mempool_t * objs_pool ; s#page_list * free_list ; unsigned objects ; unsigned chunks ; unsigned pages_per_chunk ; unsigned free_pages ; unsigned total_pages ; } 
dm_mem_cache_client_create s#dm_mem_cache_client * dm_mem_cache_client_create ( unsigned , unsigned , unsigned ) 
dm_mem_cache_client_destroy void dm_mem_cache_client_destroy ( s#dm_mem_cache_client * ) 
dm_mem_cache_grow int dm_mem_cache_grow ( s#dm_mem_cache_client * , unsigned ) 
dm_mem_cache_shrink int dm_mem_cache_shrink ( s#dm_mem_cache_client * , unsigned ) 
s#dm_mem_cache_object struct dm_mem_cache_object { s#page_list * pl ; void * private ; } 
dm_mem_cache_alloc s#dm_mem_cache_object * dm_mem_cache_alloc ( s#dm_mem_cache_client * ) 
dm_mem_cache_free void dm_mem_cache_free ( s#dm_mem_cache_client * , s#dm_mem_cache_object * ) 

/* drivers/md/dm-path-selector.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#path_selector struct path_selector { s#path_selector_type * type ; void * context ; } 
s#dm_path struct dm_path { char pdev [ 16 ] ; s#dm_dev * dev ; void * pscontext ; } 
s#path_selector_type struct path_selector_type { char * name ; s#module * module ; unsigned int table_args ; unsigned int info_args ; int ( * create ) ( s#path_selector * , unsigned , char * * ) ; void ( * destroy ) ( s#path_selector * ) ; int ( * add_path ) ( s#path_selector * , s#dm_path * , int , char * * , char * * ) ; s#dm_path * ( * select_path ) ( s#path_selector * , unsigned * , t#size_t ) ; void ( * fail_path ) ( s#path_selector * , s#dm_path * ) ; int ( * reinstate_path ) ( s#path_selector * , s#dm_path * ) ; int ( * status ) ( s#path_selector * , s#dm_path * , t#status_type_t , char * , unsigned int ) ; int ( * start_io ) ( s#path_selector * , s#dm_path * , t#size_t ) ; int ( * end_io ) ( s#path_selector * , s#dm_path * , t#size_t ) ; } 
dm_register_path_selector int dm_register_path_selector ( s#path_selector_type * ) 
dm_unregister_path_selector int dm_unregister_path_selector ( s#path_selector_type * ) 

/* drivers/md/dm-region-hash.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##dm_table
s#dm_region_hash struct dm_region_hash { t#uint32_t region_size ; unsigned region_shift ; s#dm_dirty_log * log ; t#rwlock_t hash_lock ; t#mempool_t * region_pool ; unsigned mask ; unsigned nr_buckets ; unsigned prime ; unsigned shift ; s#list_head * buckets ; unsigned max_recovery ; t#spinlock_t region_lock ; t#atomic_t recovery_in_flight ; s#semaphore recovery_count ; s#list_head clean_regions ; s#list_head quiesced_regions ; s#list_head recovered_regions ; s#list_head failed_recovered_regions ; void * context ; t#sector_t target_begin ; void ( * dispatch_bios ) ( void * , s#bio_list * ) ; void ( * wakeup_workers ) ( void * ) ; void ( * wakeup_all_recovery_waiters ) ( void * ) ; } 
dm_rh_sector_to_region t#region_t dm_rh_sector_to_region ( s#dm_region_hash * , t#sector_t ) 
dm_rh_region_to_sector t#sector_t dm_rh_region_to_sector ( s#dm_region_hash * , t#region_t ) 
dm_rh_bio_to_region t#region_t dm_rh_bio_to_region ( s#dm_region_hash * , s#bio * ) 
s#dm_region struct dm_region { s#dm_region_hash * rh ; t#region_t key ; int state ; s#list_head hash_list ; s#list_head list ; t#atomic_t pending ; s#bio_list delayed_bios ; } 
dm_rh_region_context void * dm_rh_region_context ( s#dm_region * ) 
dm_rh_get_region_key t#region_t dm_rh_get_region_key ( s#dm_region * ) 
dm_rh_get_region_size t#sector_t dm_rh_get_region_size ( s#dm_region_hash * ) 
dm_region_hash_create s#dm_region_hash * dm_region_hash_create ( void * , void ( * ) ( void * , s#bio_list * ) , void ( * ) ( void * ) , void ( * ) ( void * ) , t#sector_t , unsigned , s#dm_dirty_log * , t#uint32_t , t#region_t ) 
dm_region_hash_destroy void dm_region_hash_destroy ( s#dm_region_hash * ) 
dm_rh_dirty_log s#dm_dirty_log * dm_rh_dirty_log ( s#dm_region_hash * ) 
dm_rh_get_state int dm_rh_get_state ( s#dm_region_hash * , t#region_t , int ) 
dm_rh_mark_nosync void dm_rh_mark_nosync ( s#dm_region_hash * , s#bio * , unsigned , int ) 
dm_rh_update_states void dm_rh_update_states ( s#dm_region_hash * , int ) 
dm_rh_inc void dm_rh_inc ( s#dm_region_hash * , t#region_t ) 
dm_rh_inc_pending void dm_rh_inc_pending ( s#dm_region_hash * , s#bio_list * ) 
dm_rh_dec void dm_rh_dec ( s#dm_region_hash * , t#region_t ) 
dm_rh_recovery_prepare void dm_rh_recovery_prepare ( s#dm_region_hash * ) 
dm_rh_recovery_start s#dm_region * dm_rh_recovery_start ( s#dm_region_hash * ) 
dm_rh_recovery_end void dm_rh_recovery_end ( s#dm_region * , int ) 
dm_rh_recovery_in_flight int dm_rh_recovery_in_flight ( s#dm_region_hash * ) 
dm_rh_flush int dm_rh_flush ( s#dm_region_hash * ) 
dm_rh_delay void dm_rh_delay ( s#dm_region_hash * , s#bio * ) 
dm_rh_delay_by_region void dm_rh_delay_by_region ( s#dm_region_hash * , s#bio * , t#region_t ) 
dm_rh_stop_recovery void dm_rh_stop_recovery ( s#dm_region_hash * ) 
dm_rh_start_recovery void dm_rh_start_recovery ( s#dm_region_hash * ) 

/* drivers/md/dm-table.o */
s##mapped_device
s##dm_md_mempools
s#dm_table struct dm_table { s#mapped_device * md ; t#atomic_t holders ; unsigned type ; unsigned int depth ; unsigned int counts [ 16 ] ; t#sector_t * index [ 16 ] ; unsigned int num_targets ; unsigned int num_allocated ; t#sector_t * highs ; s#dm_target * targets ; t#fmode_t mode ; s#list_head devices ; void ( * event_fn ) ( void * ) ; void * event_context ; s#dm_md_mempools * mempools ; } 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##vfsmount
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s#open_intent struct open_intent { int flags ; int create_mode ; s#file * file ; } 
s#nameidata struct nameidata { s#path path ; s#qstr last ; s#path root ; unsigned int flags ; int last_type ; unsigned depth ; char * saved_names [ MAX_NESTED_LINKS + 1 ] ; union { s#open_intent open ; } intent ; } 
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
dm_set_device_limits int dm_set_device_limits ( s#dm_target * , s#dm_dev * , t#sector_t , t#sector_t , void * ) 
dm_vcalloc void * dm_vcalloc ( unsigned long , unsigned long ) 
dm_get_device int dm_get_device ( s#dm_target * , const char * , t#sector_t , t#sector_t , t#fmode_t , s#dm_dev * * ) 
dm_put_device void dm_put_device ( s#dm_target * , s#dm_dev * ) 
dm_table_event void dm_table_event ( s#dm_table * ) 
dm_table_get_size t#sector_t dm_table_get_size ( s#dm_table * ) 
dm_table_get_mode t#fmode_t dm_table_get_mode ( s#dm_table * ) 
dm_table_get_md s#mapped_device * dm_table_get_md ( s#dm_table * ) 
dm_table_put void dm_table_put ( s#dm_table * ) 
dm_table_get void dm_table_get ( s#dm_table * ) 
dm_table_unplug_all void dm_table_unplug_all ( s#dm_table * ) 

/* drivers/md/dm-target.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##dm_table
dm_register_target int dm_register_target ( s#target_type * ) 
dm_unregister_target void dm_unregister_target ( s#target_type * ) 

/* drivers/md/dm-uevent.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
dm_send_uevents extern void dm_send_uevents ( s#list_head * , s#kobject * ) 
e#dm_uevent_type enum dm_uevent_type { DM_UEVENT_PATH_FAILED , DM_UEVENT_PATH_REINSTATED , } 
s##dm_table
dm_path_uevent extern void dm_path_uevent ( e#dm_uevent_type , s#dm_target * , const char * , unsigned ) 

/* drivers/md/md.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
md_new_event extern void md_new_event ( t#mddev_t * ) 
mddev_congested extern int mddev_congested ( t#mddev_t * , int ) 
sync_page_io extern int sync_page_io ( s#block_device * , t#sector_t , int , s#page * , int ) 
md_check_no_bitmap extern int md_check_no_bitmap ( t#mddev_t * ) 
md_integrity_register extern int md_integrity_register ( t#mddev_t * ) 
md_integrity_add_rdev void md_integrity_add_rdev ( t#mdk_rdev_t * , t#mddev_t * ) 
md_set_array_sectors extern void md_set_array_sectors ( t#mddev_t * , t#sector_t ) 
md_allow_write extern int md_allow_write ( t#mddev_t * ) 
md_do_sync extern void md_do_sync ( t#mddev_t * ) 
md_wait_for_blocked_rdev extern void md_wait_for_blocked_rdev ( t#mdk_rdev_t * , t#mddev_t * ) 
register_md_personality extern int register_md_personality ( s#mdk_personality * ) 
unregister_md_personality extern int unregister_md_personality ( s#mdk_personality * ) 
md_error extern void md_error ( t#mddev_t * , t#mdk_rdev_t * ) 
md_done_sync extern void md_done_sync ( t#mddev_t * , int , int ) 
md_write_start extern void md_write_start ( t#mddev_t * , s#bio * ) 
md_write_end extern void md_write_end ( t#mddev_t * ) 
t#mdk_thread_t typedef s#mdk_thread_s mdk_thread_t 
md_register_thread extern t#mdk_thread_t * md_register_thread ( void ( * ) ( t#mddev_t * ) , t#mddev_t * , const char * ) 
md_unregister_thread extern void md_unregister_thread ( t#mdk_thread_t * ) 
md_wakeup_thread extern void md_wakeup_thread ( t#mdk_thread_t * ) 
md_check_recovery extern void md_check_recovery ( t#mddev_t * ) 

/* drivers/md/raid6algos.o */
raid6_empty_zero_page extern const char raid6_empty_zero_page [ ( ( 1UL ) << 12 ) ] 
s#raid6_calls struct raid6_calls { void ( * gen_syndrome ) ( int , t#size_t , void * * ) ; int ( * valid ) ( void ) ; const char * name ; int prefer ; } 
raid6_call extern s#raid6_calls raid6_call 

/* drivers/md/raid6recov.o */
raid6_2data_recov void raid6_2data_recov ( int , t#size_t , int , int , void * * ) 
raid6_datap_recov void raid6_datap_recov ( int , t#size_t , int , void * * ) 

/* drivers/md/raid6tables.o */
raid6_gfmul extern const t#u8 raid6_gfmul [ 256 ] [ 256 ] 
raid6_gfexp extern const t#u8 raid6_gfexp [ 256 ] 
raid6_gfinv extern const t#u8 raid6_gfinv [ 256 ] 
raid6_gfexi extern const t#u8 raid6_gfexi [ 256 ] 

/* drivers/media/common/ir-functions.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kiocb
s##iovec
s##poll_table_struct
s##vm_area_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##page
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##radix_tree_node
s##writeback_control
s##cdev
s##posix_acl
s##cred
s##tvec_base
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#ir_input_state struct ir_input_state { int ir_type ; t#u32 ir_codes [ 128 ] ; t#u32 ir_raw ; t#u32 ir_key ; t#u32 keycode ; int keypressed ; } 
s#ir_scancode struct ir_scancode { t#u16 scancode ; t#u32 keycode ; } 
s#ir_scancode_table struct ir_scancode_table { s#ir_scancode * scan ; int size ; } 
ir_input_init void ir_input_init ( s#input_dev * , s#ir_input_state * , int , s#ir_scancode_table * ) 
ir_input_nokey void ir_input_nokey ( s#input_dev * , s#ir_input_state * ) 
ir_input_keydown void ir_input_keydown ( s#input_dev * , s#ir_input_state * , t#u32 , t#u32 ) 
ir_extract_bits t#u32 ir_extract_bits ( t#u32 , t#u32 ) 
ir_dump_samples int ir_dump_samples ( t#u32 * , int ) 
ir_decode_pulsedistance int ir_decode_pulsedistance ( t#u32 * , int , int , int ) 
ir_decode_biphase int ir_decode_biphase ( t#u32 * , int , int , int ) 
ir_rc5_timer_end void ir_rc5_timer_end ( unsigned long ) 
ir_rc5_timer_keyup void ir_rc5_timer_keyup ( unsigned long ) 

/* drivers/media/common/ir-keymaps.o */
ir_codes_empty_table extern s#ir_scancode_table ir_codes_empty_table 
ir_codes_proteus_2309_table extern s#ir_scancode_table ir_codes_proteus_2309_table 
ir_codes_avermedia_dvbt_table extern s#ir_scancode_table ir_codes_avermedia_dvbt_table 
ir_codes_avermedia_m135a_table extern s#ir_scancode_table ir_codes_avermedia_m135a_table 
ir_codes_avermedia_cardbus_table extern s#ir_scancode_table ir_codes_avermedia_cardbus_table 
ir_codes_apac_viewcomp_table extern s#ir_scancode_table ir_codes_apac_viewcomp_table 
ir_codes_pixelview_table extern s#ir_scancode_table ir_codes_pixelview_table 
ir_codes_pixelview_new_table extern s#ir_scancode_table ir_codes_pixelview_new_table 
ir_codes_nebula_table extern s#ir_scancode_table ir_codes_nebula_table 
ir_codes_dntv_live_dvb_t_table extern s#ir_scancode_table ir_codes_dntv_live_dvb_t_table 
ir_codes_iodata_bctv7e_table extern s#ir_scancode_table ir_codes_iodata_bctv7e_table 
ir_codes_adstech_dvb_t_pci_table extern s#ir_scancode_table ir_codes_adstech_dvb_t_pci_table 
ir_codes_msi_tvanywhere_table extern s#ir_scancode_table ir_codes_msi_tvanywhere_table 
ir_codes_msi_tvanywhere_plus_table extern s#ir_scancode_table ir_codes_msi_tvanywhere_plus_table 
ir_codes_cinergy_1400_table extern s#ir_scancode_table ir_codes_cinergy_1400_table 
ir_codes_avertv_303_table extern s#ir_scancode_table ir_codes_avertv_303_table 
ir_codes_dntv_live_dvbt_pro_table extern s#ir_scancode_table ir_codes_dntv_live_dvbt_pro_table 
ir_codes_em_terratec_table extern s#ir_scancode_table ir_codes_em_terratec_table 
ir_codes_pinnacle_grey_table extern s#ir_scancode_table ir_codes_pinnacle_grey_table 
ir_codes_flyvideo_table extern s#ir_scancode_table ir_codes_flyvideo_table 
ir_codes_flydvb_table extern s#ir_scancode_table ir_codes_flydvb_table 
ir_codes_cinergy_table extern s#ir_scancode_table ir_codes_cinergy_table 
ir_codes_eztv_table extern s#ir_scancode_table ir_codes_eztv_table 
ir_codes_avermedia_table extern s#ir_scancode_table ir_codes_avermedia_table 
ir_codes_videomate_tv_pvr_table extern s#ir_scancode_table ir_codes_videomate_tv_pvr_table 
ir_codes_manli_table extern s#ir_scancode_table ir_codes_manli_table 
ir_codes_gotview7135_table extern s#ir_scancode_table ir_codes_gotview7135_table 
ir_codes_purpletv_table extern s#ir_scancode_table ir_codes_purpletv_table 
ir_codes_pctv_sedna_table extern s#ir_scancode_table ir_codes_pctv_sedna_table 
ir_codes_pv951_table extern s#ir_scancode_table ir_codes_pv951_table 
ir_codes_rc5_tv_table extern s#ir_scancode_table ir_codes_rc5_tv_table 
ir_codes_winfast_table extern s#ir_scancode_table ir_codes_winfast_table 
ir_codes_pinnacle_color_table extern s#ir_scancode_table ir_codes_pinnacle_color_table 
ir_codes_hauppauge_new_table extern s#ir_scancode_table ir_codes_hauppauge_new_table 
ir_codes_npgtech_table extern s#ir_scancode_table ir_codes_npgtech_table 
ir_codes_norwood_table extern s#ir_scancode_table ir_codes_norwood_table 
ir_codes_budget_ci_old_table extern s#ir_scancode_table ir_codes_budget_ci_old_table 
ir_codes_asus_pc39_table extern s#ir_scancode_table ir_codes_asus_pc39_table 
ir_codes_encore_enltv_table extern s#ir_scancode_table ir_codes_encore_enltv_table 
ir_codes_encore_enltv2_table extern s#ir_scancode_table ir_codes_encore_enltv2_table 
ir_codes_tt_1500_table extern s#ir_scancode_table ir_codes_tt_1500_table 
ir_codes_fusionhdtv_mce_table extern s#ir_scancode_table ir_codes_fusionhdtv_mce_table 
ir_codes_pinnacle_pctv_hd_table extern s#ir_scancode_table ir_codes_pinnacle_pctv_hd_table 
ir_codes_behold_table extern s#ir_scancode_table ir_codes_behold_table 
ir_codes_behold_columbus_table extern s#ir_scancode_table ir_codes_behold_columbus_table 
ir_codes_genius_tvgo_a11mce_table extern s#ir_scancode_table ir_codes_genius_tvgo_a11mce_table 
ir_codes_powercolor_real_angel_table extern s#ir_scancode_table ir_codes_powercolor_real_angel_table 
ir_codes_kworld_plus_tv_analog_table extern s#ir_scancode_table ir_codes_kworld_plus_tv_analog_table 
ir_codes_kaiomy_table extern s#ir_scancode_table ir_codes_kaiomy_table 
ir_codes_avermedia_a16d_table extern s#ir_scancode_table ir_codes_avermedia_a16d_table 
ir_codes_encore_enltv_fm53_table extern s#ir_scancode_table ir_codes_encore_enltv_fm53_table 
ir_codes_real_audio_220_32_keys_table extern s#ir_scancode_table ir_codes_real_audio_220_32_keys_table 
ir_codes_ati_tv_wonder_hd_600_table extern s#ir_scancode_table ir_codes_ati_tv_wonder_hd_600_table 
ir_codes_dm1105_nec_table extern s#ir_scancode_table ir_codes_dm1105_nec_table 
ir_codes_terratec_cinergy_xs_table extern s#ir_scancode_table ir_codes_terratec_cinergy_xs_table 
ir_codes_evga_indtube_table extern s#ir_scancode_table ir_codes_evga_indtube_table 
ir_codes_videomate_s350_table extern s#ir_scancode_table ir_codes_videomate_s350_table 
ir_codes_gadmei_rm008z_table extern s#ir_scancode_table ir_codes_gadmei_rm008z_table 

/* drivers/media/common/saa7146_core.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#v4l2_dbg_match struct v4l2_dbg_match { t#__u32 type ; union { t#__u32 addr ; char name [ 32 ] ; } ; } 
s#v4l2_dbg_chip_ident struct v4l2_dbg_chip_ident { s#v4l2_dbg_match match ; t#__u32 ident ; t#__u32 revision ; } 
e#v4l2_ctrl_type enum v4l2_ctrl_type { V4L2_CTRL_TYPE_INTEGER = 1 , V4L2_CTRL_TYPE_BOOLEAN = 2 , V4L2_CTRL_TYPE_MENU = 3 , V4L2_CTRL_TYPE_BUTTON = 4 , V4L2_CTRL_TYPE_INTEGER64 = 5 , V4L2_CTRL_TYPE_CTRL_CLASS = 6 , V4L2_CTRL_TYPE_STRING = 7 , } 
s#v4l2_queryctrl struct v4l2_queryctrl { t#__u32 id ; e#v4l2_ctrl_type type ; t#__u8 name [ 32 ] ; t#__s32 minimum ; t#__s32 maximum ; t#__s32 step ; t#__s32 default_value ; t#__u32 flags ; t#__u32 reserved [ 2 ] ; } 
s#v4l2_control struct v4l2_control { t#__u32 id ; t#__s32 value ; } 
s#v4l2_ext_control struct v4l2_ext_control { t#__u32 id ; t#__u32 size ; t#__u32 reserved2 [ 1 ] ; union { t#__s32 value ; t#__s64 value64 ; char * string ; } ; } 
s#v4l2_ext_controls struct v4l2_ext_controls { t#__u32 ctrl_class ; t#__u32 count ; t#__u32 error_idx ; t#__u32 reserved [ 2 ] ; s#v4l2_ext_control * controls ; } 
s#v4l2_querymenu struct v4l2_querymenu { t#__u32 id ; t#__u32 index ; t#__u8 name [ 32 ] ; t#__u32 reserved ; } 
t#v4l2_std_id typedef t#__u64 v4l2_std_id 
s#v4l2_subdev_core_ops struct v4l2_subdev_core_ops { int ( * g_chip_ident ) ( s#v4l2_subdev * , s#v4l2_dbg_chip_ident * ) ; int ( * log_status ) ( s#v4l2_subdev * ) ; int ( * s_config ) ( s#v4l2_subdev * , int , void * ) ; int ( * init ) ( s#v4l2_subdev * , t#u32 ) ; int ( * load_fw ) ( s#v4l2_subdev * ) ; int ( * reset ) ( s#v4l2_subdev * , t#u32 ) ; int ( * s_gpio ) ( s#v4l2_subdev * , t#u32 ) ; int ( * queryctrl ) ( s#v4l2_subdev * , s#v4l2_queryctrl * ) ; int ( * g_ctrl ) ( s#v4l2_subdev * , s#v4l2_control * ) ; int ( * s_ctrl ) ( s#v4l2_subdev * , s#v4l2_control * ) ; int ( * g_ext_ctrls ) ( s#v4l2_subdev * , s#v4l2_ext_controls * ) ; int ( * s_ext_ctrls ) ( s#v4l2_subdev * , s#v4l2_ext_controls * ) ; int ( * try_ext_ctrls ) ( s#v4l2_subdev * , s#v4l2_ext_controls * ) ; int ( * querymenu ) ( s#v4l2_subdev * , s#v4l2_querymenu * ) ; int ( * s_std ) ( s#v4l2_subdev * , t#v4l2_std_id ) ; long ( * ioctl ) ( s#v4l2_subdev * , unsigned int , void * ) ; } 
e#v4l2_tuner_type enum v4l2_tuner_type { V4L2_TUNER_RADIO = 1 , V4L2_TUNER_ANALOG_TV = 2 , V4L2_TUNER_DIGITAL_TV = 3 , } 
s#v4l2_frequency struct v4l2_frequency { t#__u32 tuner ; e#v4l2_tuner_type type ; t#__u32 frequency ; t#__u32 reserved [ 8 ] ; } 
s#v4l2_tuner struct v4l2_tuner { t#__u32 index ; t#__u8 name [ 32 ] ; e#v4l2_tuner_type type ; t#__u32 capability ; t#__u32 rangelow ; t#__u32 rangehigh ; t#__u32 rxsubchans ; t#__u32 audmode ; t#__s32 signal ; t#__s32 afc ; t#__u32 reserved [ 4 ] ; } 
s#v4l2_modulator struct v4l2_modulator { t#__u32 index ; t#__u8 name [ 32 ] ; t#__u32 capability ; t#__u32 rangelow ; t#__u32 rangehigh ; t#__u32 txsubchans ; t#__u32 reserved [ 4 ] ; } 
s##tuner_setup
s#v4l2_priv_tun_config struct v4l2_priv_tun_config { int tuner ; void * priv ; } 
s#v4l2_subdev_tuner_ops struct v4l2_subdev_tuner_ops { int ( * s_mode ) ( s#v4l2_subdev * , e#v4l2_tuner_type ) ; int ( * s_radio ) ( s#v4l2_subdev * ) ; int ( * s_frequency ) ( s#v4l2_subdev * , s#v4l2_frequency * ) ; int ( * g_frequency ) ( s#v4l2_subdev * , s#v4l2_frequency * ) ; int ( * g_tuner ) ( s#v4l2_subdev * , s#v4l2_tuner * ) ; int ( * s_tuner ) ( s#v4l2_subdev * , s#v4l2_tuner * ) ; int ( * g_modulator ) ( s#v4l2_subdev * , s#v4l2_modulator * ) ; int ( * s_modulator ) ( s#v4l2_subdev * , s#v4l2_modulator * ) ; int ( * s_type_addr ) ( s#v4l2_subdev * , s#tuner_setup * ) ; int ( * s_config ) ( s#v4l2_subdev * , const s#v4l2_priv_tun_config * ) ; int ( * s_standby ) ( s#v4l2_subdev * ) ; } 
s#v4l2_subdev_audio_ops struct v4l2_subdev_audio_ops { int ( * s_clock_freq ) ( s#v4l2_subdev * , t#u32 ) ; int ( * s_i2s_clock_freq ) ( s#v4l2_subdev * , t#u32 ) ; int ( * s_routing ) ( s#v4l2_subdev * , t#u32 , t#u32 , t#u32 ) ; } 
s#v4l2_decode_vbi_line struct v4l2_decode_vbi_line { t#u32 is_second_field ; t#u8 * p ; t#u32 line ; t#u32 type ; } 
s#v4l2_sliced_vbi_data struct v4l2_sliced_vbi_data { t#__u32 id ; t#__u32 field ; t#__u32 line ; t#__u32 reserved ; t#__u8 data [ 48 ] ; } 
e#v4l2_buf_type enum v4l2_buf_type { V4L2_BUF_TYPE_VIDEO_CAPTURE = 1 , V4L2_BUF_TYPE_VIDEO_OUTPUT = 2 , V4L2_BUF_TYPE_VIDEO_OVERLAY = 3 , V4L2_BUF_TYPE_VBI_CAPTURE = 4 , V4L2_BUF_TYPE_VBI_OUTPUT = 5 , V4L2_BUF_TYPE_SLICED_VBI_CAPTURE = 6 , V4L2_BUF_TYPE_SLICED_VBI_OUTPUT = 7 , V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY = 8 , V4L2_BUF_TYPE_PRIVATE = 0x80 , } 
s#v4l2_sliced_vbi_cap struct v4l2_sliced_vbi_cap { t#__u16 service_set ; t#__u16 service_lines [ 2 ] [ 24 ] ; e#v4l2_buf_type type ; t#__u32 reserved [ 3 ] ; } 
s#v4l2_fmtdesc struct v4l2_fmtdesc { t#__u32 index ; e#v4l2_buf_type type ; t#__u32 flags ; t#__u8 description [ 32 ] ; t#__u32 pixelformat ; t#__u32 reserved [ 4 ] ; } 
e#v4l2_field enum v4l2_field { V4L2_FIELD_ANY = 0 , V4L2_FIELD_NONE = 1 , V4L2_FIELD_TOP = 2 , V4L2_FIELD_BOTTOM = 3 , V4L2_FIELD_INTERLACED = 4 , V4L2_FIELD_SEQ_TB = 5 , V4L2_FIELD_SEQ_BT = 6 , V4L2_FIELD_ALTERNATE = 7 , V4L2_FIELD_INTERLACED_TB = 8 , V4L2_FIELD_INTERLACED_BT = 9 , } 
e#v4l2_colorspace enum v4l2_colorspace { V4L2_COLORSPACE_SMPTE170M = 1 , V4L2_COLORSPACE_SMPTE240M = 2 , V4L2_COLORSPACE_REC709 = 3 , V4L2_COLORSPACE_BT878 = 4 , V4L2_COLORSPACE_470_SYSTEM_M = 5 , V4L2_COLORSPACE_470_SYSTEM_BG = 6 , V4L2_COLORSPACE_JPEG = 7 , V4L2_COLORSPACE_SRGB = 8 , } 
s#v4l2_pix_format struct v4l2_pix_format { t#__u32 width ; t#__u32 height ; t#__u32 pixelformat ; e#v4l2_field field ; t#__u32 bytesperline ; t#__u32 sizeimage ; e#v4l2_colorspace colorspace ; t#__u32 priv ; } 
s#v4l2_rect struct v4l2_rect { t#__s32 left ; t#__s32 top ; t#__s32 width ; t#__s32 height ; } 
s#v4l2_clip struct v4l2_clip { s#v4l2_rect c ; s#v4l2_clip * next ; } 
s#v4l2_window struct v4l2_window { s#v4l2_rect w ; e#v4l2_field field ; t#__u32 chromakey ; s#v4l2_clip * clips ; t#__u32 clipcount ; void * bitmap ; t#__u8 global_alpha ; } 
s#v4l2_vbi_format struct v4l2_vbi_format { t#__u32 sampling_rate ; t#__u32 offset ; t#__u32 samples_per_line ; t#__u32 sample_format ; t#__s32 start [ 2 ] ; t#__u32 count [ 2 ] ; t#__u32 flags ; t#__u32 reserved [ 2 ] ; } 
s#v4l2_sliced_vbi_format struct v4l2_sliced_vbi_format { t#__u16 service_set ; t#__u16 service_lines [ 2 ] [ 24 ] ; t#__u32 io_size ; t#__u32 reserved [ 2 ] ; } 
s#v4l2_format struct v4l2_format { e#v4l2_buf_type type ; union { s#v4l2_pix_format pix ; s#v4l2_window win ; s#v4l2_vbi_format vbi ; s#v4l2_sliced_vbi_format sliced ; t#__u8 raw_data [ 200 ] ; } fmt ; } 
s#v4l2_fract struct v4l2_fract { t#__u32 numerator ; t#__u32 denominator ; } 
s#v4l2_cropcap struct v4l2_cropcap { e#v4l2_buf_type type ; s#v4l2_rect bounds ; s#v4l2_rect defrect ; s#v4l2_fract pixelaspect ; } 
s#v4l2_crop struct v4l2_crop { e#v4l2_buf_type type ; s#v4l2_rect c ; } 
s#v4l2_captureparm struct v4l2_captureparm { t#__u32 capability ; t#__u32 capturemode ; s#v4l2_fract timeperframe ; t#__u32 extendedmode ; t#__u32 readbuffers ; t#__u32 reserved [ 4 ] ; } 
s#v4l2_outputparm struct v4l2_outputparm { t#__u32 capability ; t#__u32 outputmode ; s#v4l2_fract timeperframe ; t#__u32 extendedmode ; t#__u32 writebuffers ; t#__u32 reserved [ 4 ] ; } 
s#v4l2_streamparm struct v4l2_streamparm { e#v4l2_buf_type type ; union { s#v4l2_captureparm capture ; s#v4l2_outputparm output ; t#__u8 raw_data [ 200 ] ; } parm ; } 
s#v4l2_frmsize_discrete struct v4l2_frmsize_discrete { t#__u32 width ; t#__u32 height ; } 
s#v4l2_frmsize_stepwise struct v4l2_frmsize_stepwise { t#__u32 min_width ; t#__u32 max_width ; t#__u32 step_width ; t#__u32 min_height ; t#__u32 max_height ; t#__u32 step_height ; } 
s#v4l2_frmsizeenum struct v4l2_frmsizeenum { t#__u32 index ; t#__u32 pixel_format ; t#__u32 type ; union { s#v4l2_frmsize_discrete discrete ; s#v4l2_frmsize_stepwise stepwise ; } ; t#__u32 reserved [ 2 ] ; } 
s#v4l2_frmival_stepwise struct v4l2_frmival_stepwise { s#v4l2_fract min ; s#v4l2_fract max ; s#v4l2_fract step ; } 
s#v4l2_frmivalenum struct v4l2_frmivalenum { t#__u32 index ; t#__u32 pixel_format ; t#__u32 width ; t#__u32 height ; t#__u32 type ; union { s#v4l2_fract discrete ; s#v4l2_frmival_stepwise stepwise ; } ; t#__u32 reserved [ 2 ] ; } 
s#v4l2_subdev_video_ops struct v4l2_subdev_video_ops { int ( * s_routing ) ( s#v4l2_subdev * , t#u32 , t#u32 , t#u32 ) ; int ( * s_crystal_freq ) ( s#v4l2_subdev * , t#u32 , t#u32 ) ; int ( * decode_vbi_line ) ( s#v4l2_subdev * , s#v4l2_decode_vbi_line * ) ; int ( * s_vbi_data ) ( s#v4l2_subdev * , const s#v4l2_sliced_vbi_data * ) ; int ( * g_vbi_data ) ( s#v4l2_subdev * , s#v4l2_sliced_vbi_data * ) ; int ( * g_sliced_vbi_cap ) ( s#v4l2_subdev * , s#v4l2_sliced_vbi_cap * ) ; int ( * s_std_output ) ( s#v4l2_subdev * , t#v4l2_std_id ) ; int ( * querystd ) ( s#v4l2_subdev * , t#v4l2_std_id * ) ; int ( * g_input_status ) ( s#v4l2_subdev * , t#u32 * ) ; int ( * s_stream ) ( s#v4l2_subdev * , int ) ; int ( * enum_fmt ) ( s#v4l2_subdev * , s#v4l2_fmtdesc * ) ; int ( * g_fmt ) ( s#v4l2_subdev * , s#v4l2_format * ) ; int ( * try_fmt ) ( s#v4l2_subdev * , s#v4l2_format * ) ; int ( * s_fmt ) ( s#v4l2_subdev * , s#v4l2_format * ) ; int ( * cropcap ) ( s#v4l2_subdev * , s#v4l2_cropcap * ) ; int ( * g_crop ) ( s#v4l2_subdev * , s#v4l2_crop * ) ; int ( * s_crop ) ( s#v4l2_subdev * , s#v4l2_crop * ) ; int ( * g_parm ) ( s#v4l2_subdev * , s#v4l2_streamparm * ) ; int ( * s_parm ) ( s#v4l2_subdev * , s#v4l2_streamparm * ) ; int ( * enum_framesizes ) ( s#v4l2_subdev * , s#v4l2_frmsizeenum * ) ; int ( * enum_frameintervals ) ( s#v4l2_subdev * , s#v4l2_frmivalenum * ) ; } 
s#v4l2_subdev_ops struct v4l2_subdev_ops { const s#v4l2_subdev_core_ops * core ; const s#v4l2_subdev_tuner_ops * tuner ; const s#v4l2_subdev_audio_ops * audio ; const s#v4l2_subdev_video_ops * video ; } 
s#v4l2_subdev struct v4l2_subdev { s#list_head list ; s#module * owner ; t#u32 flags ; s#v4l2_device * v4l2_dev ; const s#v4l2_subdev_ops * ops ; char name [ 32 ] ; t#u32 grp_id ; void * priv ; } 
s#v4l2_device struct v4l2_device { s#device * dev ; s#list_head subdevs ; t#spinlock_t lock ; char name [ ( 20 + 16 ) ] ; void ( * notify ) ( s#v4l2_subdev * , unsigned int , void * ) ; } 
s##saa7146_ext_vv
s##saa7146_vv
s#saa7146_dma struct saa7146_dma { t#dma_addr_t dma_handle ; t#__le32 * cpu_addr ; } 
s#saa7146_dev struct saa7146_dev { s#module * module ; s#list_head item ; s#v4l2_device v4l2_dev ; t#spinlock_t slock ; s#mutex lock ; unsigned char * mem ; t#u32 revision ; char name [ 32 ] ; s#pci_dev * pci ; t#u32 int_todo ; t#spinlock_t int_slock ; s#saa7146_extension * ext ; void * ext_priv ; s#saa7146_ext_vv * ext_vv_data ; s#saa7146_vv * vv_data ; void ( * vv_callback ) ( s#saa7146_dev * , unsigned long ) ; s#mutex i2c_lock ; t#u32 i2c_bitrate ; s#saa7146_dma d_i2c ; t#wait_queue_head_t i2c_wq ; int i2c_op ; s#saa7146_dma d_rps0 ; s#saa7146_dma d_rps1 ; } 
s#saa7146_pci_extension_data struct saa7146_pci_extension_data { s#saa7146_extension * ext ; void * ext_priv ; } 
s#saa7146_extension struct saa7146_extension { char name [ 32 ] ; int flags ; s#module * module ; s#pci_driver driver ; s#pci_device_id * pci_tbl ; int ( * probe ) ( s#saa7146_dev * ) ; int ( * attach ) ( s#saa7146_dev * , s#saa7146_pci_extension_data * ) ; int ( * detach ) ( s#saa7146_dev * ) ; t#u32 irq_mask ; void ( * irq_func ) ( s#saa7146_dev * , t#u32 * ) ; } 
saa7146_register_extension int saa7146_register_extension ( s#saa7146_extension * ) 
saa7146_unregister_extension int saa7146_unregister_extension ( s#saa7146_extension * ) 
s#saa7146_pgtable struct saa7146_pgtable { unsigned int size ; t#__le32 * cpu ; t#dma_addr_t dma ; unsigned long offset ; s#scatterlist * slist ; int nents ; } 
saa7146_pgtable_alloc int saa7146_pgtable_alloc ( s#pci_dev * , s#saa7146_pgtable * ) 
saa7146_pgtable_free void saa7146_pgtable_free ( s#pci_dev * , s#saa7146_pgtable * ) 
saa7146_pgtable_build_single int saa7146_pgtable_build_single ( s#pci_dev * , s#saa7146_pgtable * , s#scatterlist * , int ) 
saa7146_vmalloc_build_pgtable void * saa7146_vmalloc_build_pgtable ( s#pci_dev * , long , s#saa7146_pgtable * ) 
saa7146_vfree_destroy_pgtable void saa7146_vfree_destroy_pgtable ( s#pci_dev * , void * , s#saa7146_pgtable * ) 
saa7146_wait_for_debi_done int saa7146_wait_for_debi_done ( s#saa7146_dev * , int ) 
saa7146_setgpio void saa7146_setgpio ( s#saa7146_dev * , int , t#u32 ) 
saa7146_i2c_adapter_prepare int saa7146_i2c_adapter_prepare ( s#saa7146_dev * , s#i2c_adapter * , t#u32 ) 
saa7146_debug extern unsigned int saa7146_debug 
saa7146_devices extern s#list_head saa7146_devices 
saa7146_devices_lock extern s#mutex saa7146_devices_lock 

/* drivers/media/common/saa7146_fops.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##tuner_setup
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#saa7146_standard struct saa7146_standard { char * name ; t#v4l2_std_id id ; int v_offset ; int v_field ; int h_offset ; int h_pixels ; int v_max_out ; int h_max_out ; } 
s#v4l2_capability struct v4l2_capability { t#__u8 driver [ 16 ] ; t#__u8 card [ 32 ] ; t#__u8 bus_info [ 32 ] ; t#__u32 version ; t#__u32 capabilities ; t#__u32 reserved [ 4 ] ; } 
e#v4l2_priority enum v4l2_priority { V4L2_PRIORITY_UNSET = 0 , V4L2_PRIORITY_BACKGROUND = 1 , V4L2_PRIORITY_INTERACTIVE = 2 , V4L2_PRIORITY_RECORD = 3 , V4L2_PRIORITY_DEFAULT = V4L2_PRIORITY_INTERACTIVE , } 
e#v4l2_memory enum v4l2_memory { V4L2_MEMORY_MMAP = 1 , V4L2_MEMORY_USERPTR = 2 , V4L2_MEMORY_OVERLAY = 3 , } 
s#v4l2_requestbuffers struct v4l2_requestbuffers { t#__u32 count ; e#v4l2_buf_type type ; e#v4l2_memory memory ; t#__u32 reserved [ 2 ] ; } 
s#v4l2_timecode struct v4l2_timecode { t#__u32 type ; t#__u32 flags ; t#__u8 frames ; t#__u8 seconds ; t#__u8 minutes ; t#__u8 hours ; t#__u8 userbits [ 4 ] ; } 
s#v4l2_buffer struct v4l2_buffer { t#__u32 index ; e#v4l2_buf_type type ; t#__u32 bytesused ; t#__u32 flags ; e#v4l2_field field ; s#timeval timestamp ; s#v4l2_timecode timecode ; t#__u32 sequence ; e#v4l2_memory memory ; union { t#__u32 offset ; unsigned long userptr ; } m ; t#__u32 length ; t#__u32 input ; t#__u32 reserved ; } 
s#video_mbuf struct video_mbuf { int size ; int frames ; int offsets [ 32 ] ; } 
s#v4l2_framebuffer struct v4l2_framebuffer { t#__u32 capability ; t#__u32 flags ; void * base ; s#v4l2_pix_format fmt ; } 
s#v4l2_input struct v4l2_input { t#__u32 index ; t#__u8 name [ 32 ] ; t#__u32 type ; t#__u32 audioset ; t#__u32 tuner ; t#v4l2_std_id std ; t#__u32 status ; t#__u32 reserved [ 4 ] ; } 
s#v4l2_output struct v4l2_output { t#__u32 index ; t#__u8 name [ 32 ] ; t#__u32 type ; t#__u32 audioset ; t#__u32 modulator ; t#v4l2_std_id std ; t#__u32 reserved [ 4 ] ; } 
s#v4l2_audio struct v4l2_audio { t#__u32 index ; t#__u8 name [ 32 ] ; t#__u32 capability ; t#__u32 mode ; t#__u32 reserved [ 2 ] ; } 
s#v4l2_audioout struct v4l2_audioout { t#__u32 index ; t#__u8 name [ 32 ] ; t#__u32 capability ; t#__u32 mode ; t#__u32 reserved [ 2 ] ; } 
s#v4l2_jpegcompression struct v4l2_jpegcompression { int quality ; int APPn ; int APP_len ; char APP_data [ 60 ] ; int COM_len ; char COM_data [ 60 ] ; t#__u32 jpeg_markers ; } 
s#v4l2_enc_idx_entry struct v4l2_enc_idx_entry { t#__u64 offset ; t#__u64 pts ; t#__u32 length ; t#__u32 flags ; t#__u32 reserved [ 2 ] ; } 
s#v4l2_enc_idx struct v4l2_enc_idx { t#__u32 entries ; t#__u32 entries_cap ; t#__u32 reserved [ 4 ] ; s#v4l2_enc_idx_entry entry [ ( 64 ) ] ; } 
s#v4l2_encoder_cmd struct v4l2_encoder_cmd { t#__u32 cmd ; t#__u32 flags ; union { struct { t#__u32 data [ 8 ] ; } raw ; } ; } 
s#v4l2_hw_freq_seek struct v4l2_hw_freq_seek { t#__u32 tuner ; e#v4l2_tuner_type type ; t#__u32 seek_upward ; t#__u32 wrap_around ; t#__u32 reserved [ 8 ] ; } 
s#v4l2_ioctl_ops struct v4l2_ioctl_ops { int ( * vidioc_querycap ) ( s#file * , void * , s#v4l2_capability * ) ; int ( * vidioc_g_priority ) ( s#file * , void * , e#v4l2_priority * ) ; int ( * vidioc_s_priority ) ( s#file * , void * , e#v4l2_priority ) ; int ( * vidioc_enum_fmt_vid_cap ) ( s#file * , void * , s#v4l2_fmtdesc * ) ; int ( * vidioc_enum_fmt_vid_overlay ) ( s#file * , void * , s#v4l2_fmtdesc * ) ; int ( * vidioc_enum_fmt_vid_out ) ( s#file * , void * , s#v4l2_fmtdesc * ) ; int ( * vidioc_enum_fmt_type_private ) ( s#file * , void * , s#v4l2_fmtdesc * ) ; int ( * vidioc_g_fmt_vid_cap ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_g_fmt_vid_overlay ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_g_fmt_vid_out ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_g_fmt_vid_out_overlay ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_g_fmt_vbi_cap ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_g_fmt_vbi_out ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_g_fmt_sliced_vbi_cap ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_g_fmt_sliced_vbi_out ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_g_fmt_type_private ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_s_fmt_vid_cap ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_s_fmt_vid_overlay ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_s_fmt_vid_out ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_s_fmt_vid_out_overlay ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_s_fmt_vbi_cap ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_s_fmt_vbi_out ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_s_fmt_sliced_vbi_cap ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_s_fmt_sliced_vbi_out ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_s_fmt_type_private ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_try_fmt_vid_cap ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_try_fmt_vid_overlay ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_try_fmt_vid_out ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_try_fmt_vid_out_overlay ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_try_fmt_vbi_cap ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_try_fmt_vbi_out ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_try_fmt_sliced_vbi_cap ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_try_fmt_sliced_vbi_out ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_try_fmt_type_private ) ( s#file * , void * , s#v4l2_format * ) ; int ( * vidioc_reqbufs ) ( s#file * , void * , s#v4l2_requestbuffers * ) ; int ( * vidioc_querybuf ) ( s#file * , void * , s#v4l2_buffer * ) ; int ( * vidioc_qbuf ) ( s#file * , void * , s#v4l2_buffer * ) ; int ( * vidioc_dqbuf ) ( s#file * , void * , s#v4l2_buffer * ) ; int ( * vidioc_overlay ) ( s#file * , void * , unsigned int ) ; int ( * vidiocgmbuf ) ( s#file * , void * , s#video_mbuf * ) ; int ( * vidioc_g_fbuf ) ( s#file * , void * , s#v4l2_framebuffer * ) ; int ( * vidioc_s_fbuf ) ( s#file * , void * , s#v4l2_framebuffer * ) ; int ( * vidioc_streamon ) ( s#file * , void * , e#v4l2_buf_type ) ; int ( * vidioc_streamoff ) ( s#file * , void * , e#v4l2_buf_type ) ; int ( * vidioc_g_std ) ( s#file * , void * , t#v4l2_std_id * ) ; int ( * vidioc_s_std ) ( s#file * , void * , t#v4l2_std_id * ) ; int ( * vidioc_querystd ) ( s#file * , void * , t#v4l2_std_id * ) ; int ( * vidioc_enum_input ) ( s#file * , void * , s#v4l2_input * ) ; int ( * vidioc_g_input ) ( s#file * , void * , unsigned int * ) ; int ( * vidioc_s_input ) ( s#file * , void * , unsigned int ) ; int ( * vidioc_enum_output ) ( s#file * , void * , s#v4l2_output * ) ; int ( * vidioc_g_output ) ( s#file * , void * , unsigned int * ) ; int ( * vidioc_s_output ) ( s#file * , void * , unsigned int ) ; int ( * vidioc_queryctrl ) ( s#file * , void * , s#v4l2_queryctrl * ) ; int ( * vidioc_g_ctrl ) ( s#file * , void * , s#v4l2_control * ) ; int ( * vidioc_s_ctrl ) ( s#file * , void * , s#v4l2_control * ) ; int ( * vidioc_g_ext_ctrls ) ( s#file * , void * , s#v4l2_ext_controls * ) ; int ( * vidioc_s_ext_ctrls ) ( s#file * , void * , s#v4l2_ext_controls * ) ; int ( * vidioc_try_ext_ctrls ) ( s#file * , void * , s#v4l2_ext_controls * ) ; int ( * vidioc_querymenu ) ( s#file * , void * , s#v4l2_querymenu * ) ; int ( * vidioc_enumaudio ) ( s#file * , void * , s#v4l2_audio * ) ; int ( * vidioc_g_audio ) ( s#file * , void * , s#v4l2_audio * ) ; int ( * vidioc_s_audio ) ( s#file * , void * , s#v4l2_audio * ) ; int ( * vidioc_enumaudout ) ( s#file * , void * , s#v4l2_audioout * ) ; int ( * vidioc_g_audout ) ( s#file * , void * , s#v4l2_audioout * ) ; int ( * vidioc_s_audout ) ( s#file * , void * , s#v4l2_audioout * ) ; int ( * vidioc_g_modulator ) ( s#file * , void * , s#v4l2_modulator * ) ; int ( * vidioc_s_modulator ) ( s#file * , void * , s#v4l2_modulator * ) ; int ( * vidioc_cropcap ) ( s#file * , void * , s#v4l2_cropcap * ) ; int ( * vidioc_g_crop ) ( s#file * , void * , s#v4l2_crop * ) ; int ( * vidioc_s_crop ) ( s#file * , void * , s#v4l2_crop * ) ; int ( * vidioc_g_jpegcomp ) ( s#file * , void * , s#v4l2_jpegcompression * ) ; int ( * vidioc_s_jpegcomp ) ( s#file * , void * , s#v4l2_jpegcompression * ) ; int ( * vidioc_g_enc_index ) ( s#file * , void * , s#v4l2_enc_idx * ) ; int ( * vidioc_encoder_cmd ) ( s#file * , void * , s#v4l2_encoder_cmd * ) ; int ( * vidioc_try_encoder_cmd ) ( s#file * , void * , s#v4l2_encoder_cmd * ) ; int ( * vidioc_g_parm ) ( s#file * , void * , s#v4l2_streamparm * ) ; int ( * vidioc_s_parm ) ( s#file * , void * , s#v4l2_streamparm * ) ; int ( * vidioc_g_tuner ) ( s#file * , void * , s#v4l2_tuner * ) ; int ( * vidioc_s_tuner ) ( s#file * , void * , s#v4l2_tuner * ) ; int ( * vidioc_g_frequency ) ( s#file * , void * , s#v4l2_frequency * ) ; int ( * vidioc_s_frequency ) ( s#file * , void * , s#v4l2_frequency * ) ; int ( * vidioc_g_sliced_vbi_cap ) ( s#file * , void * , s#v4l2_sliced_vbi_cap * ) ; int ( * vidioc_log_status ) ( s#file * , void * ) ; int ( * vidioc_s_hw_freq_seek ) ( s#file * , void * , s#v4l2_hw_freq_seek * ) ; int ( * vidioc_g_chip_ident ) ( s#file * , void * , s#v4l2_dbg_chip_ident * ) ; int ( * vidioc_enum_framesizes ) ( s#file * , void * , s#v4l2_frmsizeenum * ) ; int ( * vidioc_enum_frameintervals ) ( s#file * , void * , s#v4l2_frmivalenum * ) ; long ( * vidioc_default ) ( s#file * , void * , int , void * ) ; } 
s#v4l2_file_operations struct v4l2_file_operations { s#module * owner ; t#ssize_t ( * read ) ( s#file * , char * , t#size_t , t#loff_t * ) ; t#ssize_t ( * write ) ( s#file * , const char * , t#size_t , t#loff_t * ) ; unsigned int ( * poll ) ( s#file * , s#poll_table_struct * ) ; long ( * ioctl ) ( s#file * , unsigned int , unsigned long ) ; long ( * unlocked_ioctl ) ( s#file * , unsigned int , unsigned long ) ; unsigned long ( * get_unmapped_area ) ( s#file * , unsigned long , unsigned long , unsigned long , unsigned long ) ; int ( * mmap ) ( s#file * , s#vm_area_struct * ) ; int ( * open ) ( s#file * ) ; int ( * release ) ( s#file * ) ; } 
s#saa7146_ext_vv struct saa7146_ext_vv { int inputs ; int audios ; t#u32 capabilities ; int flags ; s#saa7146_standard * stds ; int num_stds ; int ( * std_callback ) ( s#saa7146_dev * , s#saa7146_standard * ) ; s#v4l2_ioctl_ops ops ; const s#v4l2_ioctl_ops * core_ops ; s#v4l2_file_operations vbi_fops ; } 
e#videobuf_state enum videobuf_state { VIDEOBUF_NEEDS_INIT = 0 , VIDEOBUF_PREPARED = 1 , VIDEOBUF_QUEUED = 2 , VIDEOBUF_ACTIVE = 3 , VIDEOBUF_DONE = 4 , VIDEOBUF_ERROR = 5 , VIDEOBUF_IDLE = 6 , } 
s#videobuf_queue_ops struct videobuf_queue_ops { int ( * buf_setup ) ( s#videobuf_queue * , unsigned int * , unsigned int * ) ; int ( * buf_prepare ) ( s#videobuf_queue * , s#videobuf_buffer * , e#v4l2_field ) ; void ( * buf_queue ) ( s#videobuf_queue * , s#videobuf_buffer * ) ; void ( * buf_release ) ( s#videobuf_queue * , s#videobuf_buffer * ) ; } 
s#videobuf_qtype_ops struct videobuf_qtype_ops { t#u32 magic ; void * ( * alloc ) ( t#size_t ) ; void * ( * vmalloc ) ( s#videobuf_buffer * ) ; int ( * iolock ) ( s#videobuf_queue * , s#videobuf_buffer * , s#v4l2_framebuffer * ) ; int ( * mmap ) ( s#videobuf_queue * , unsigned int * , unsigned int * , e#v4l2_memory ) ; int ( * sync ) ( s#videobuf_queue * , s#videobuf_buffer * ) ; int ( * video_copy_to_user ) ( s#videobuf_queue * , char * , t#size_t , int ) ; int ( * copy_stream ) ( s#videobuf_queue * , char * , t#size_t , t#size_t , int , int ) ; int ( * mmap_free ) ( s#videobuf_queue * ) ; int ( * mmap_mapper ) ( s#videobuf_queue * , s#vm_area_struct * ) ; } 
s#videobuf_queue struct videobuf_queue { s#mutex vb_lock ; t#spinlock_t * irqlock ; s#device * dev ; t#wait_queue_head_t wait ; e#v4l2_buf_type type ; unsigned int inputs ; unsigned int msize ; e#v4l2_field field ; e#v4l2_field last ; s#videobuf_buffer * bufs [ 32 ] ; s#videobuf_queue_ops * ops ; s#videobuf_qtype_ops * int_ops ; unsigned int streaming : 1 ; unsigned int reading : 1 ; unsigned int is_mmapped : 1 ; s#list_head stream ; unsigned int read_off ; s#videobuf_buffer * read_buf ; void * priv_data ; } 
s#videobuf_mapping struct videobuf_mapping { unsigned int count ; unsigned long start ; unsigned long end ; s#videobuf_queue * q ; } 
s#videobuf_buffer struct videobuf_buffer { unsigned int i ; t#u32 magic ; unsigned int width ; unsigned int height ; unsigned int bytesperline ; unsigned long size ; unsigned int input ; e#v4l2_field field ; e#videobuf_state state ; s#list_head stream ; s#list_head queue ; t#wait_queue_head_t done ; unsigned int field_count ; s#timeval ts ; e#v4l2_memory memory ; t#size_t bsize ; t#size_t boff ; unsigned long baddr ; s#videobuf_mapping * map ; int privsize ; void * priv ; } 
s#saa7146_buf struct saa7146_buf { s#videobuf_buffer vb ; s#v4l2_pix_format * fmt ; int ( * activate ) ( s#saa7146_dev * , s#saa7146_buf * , s#saa7146_buf * ) ; s#saa7146_pgtable pt [ 3 ] ; } 
s#saa7146_dmaqueue struct saa7146_dmaqueue { s#saa7146_dev * dev ; s#saa7146_buf * curr ; s#list_head queue ; s#timer_list timeout ; } 
s#saa7146_overlay struct saa7146_overlay { s#saa7146_fh * fh ; s#v4l2_window win ; s#v4l2_clip clips [ 16 ] ; int nclips ; } 
s#saa7146_fh struct saa7146_fh { s#saa7146_dev * dev ; e#v4l2_buf_type type ; s#saa7146_overlay ov ; s#videobuf_queue video_q ; s#v4l2_pix_format video_fmt ; s#videobuf_queue vbi_q ; s#v4l2_vbi_format vbi_fmt ; s#timer_list vbi_read_timeout ; unsigned int resources ; } 
s#saa7146_format struct saa7146_format { char * name ; t#u32 pixelformat ; t#u32 trans ; t#u8 depth ; t#u8 flags ; t#u8 swap ; } 
s#saa7146_vv struct saa7146_vv { int vbi_minor ; s#saa7146_dmaqueue vbi_q ; t#wait_queue_head_t vbi_wq ; int vbi_fieldcount ; s#saa7146_fh * vbi_streaming ; int video_minor ; int video_status ; s#saa7146_fh * video_fh ; s#v4l2_framebuffer ov_fb ; s#saa7146_format * ov_fmt ; s#saa7146_overlay * ov_data ; s#saa7146_fh * ov_suspend ; s#saa7146_dmaqueue video_q ; e#v4l2_field last_field ; s#saa7146_standard * standard ; int vflip ; int hflip ; int current_hps_source ; int current_hps_sync ; s#saa7146_dma d_clipping ; unsigned int resources ; } 
saa7146_vv_init int saa7146_vv_init ( s#saa7146_dev * , s#saa7146_ext_vv * ) 
saa7146_vv_release int saa7146_vv_release ( s#saa7146_dev * ) 
s#video_device struct video_device { const s#v4l2_file_operations * fops ; s#device dev ; s#cdev * cdev ; s#device * parent ; s#v4l2_device * v4l2_dev ; char name [ 32 ] ; int vfl_type ; int minor ; t#u16 num ; unsigned long flags ; int index ; int debug ; t#v4l2_std_id tvnorms ; t#v4l2_std_id current_norm ; void ( * release ) ( s#video_device * ) ; const s#v4l2_ioctl_ops * ioctl_ops ; } 
saa7146_register_device int saa7146_register_device ( s#video_device * * , s#saa7146_dev * , char * , int ) 
saa7146_unregister_device int saa7146_unregister_device ( s#video_device * * , s#saa7146_dev * ) 

/* drivers/media/common/saa7146_hlp.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##tuner_setup
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
saa7146_set_hps_source_and_sync void saa7146_set_hps_source_and_sync ( s#saa7146_dev * , int , int ) 

/* drivers/media/common/saa7146_video.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##tuner_setup
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
saa7146_start_preview int saa7146_start_preview ( s#saa7146_fh * ) 
saa7146_stop_preview int saa7146_stop_preview ( s#saa7146_fh * ) 

/* drivers/media/common/tuners/mc44s803.o */
e#fe_type enum fe_type { FE_QPSK , FE_QAM , FE_OFDM , FE_ATSC } 
t#fe_type_t typedef e#fe_type fe_type_t 
e#fe_caps enum fe_caps { FE_IS_STUPID = 0 , FE_CAN_INVERSION_AUTO = 0x1 , FE_CAN_FEC_1_2 = 0x2 , FE_CAN_FEC_2_3 = 0x4 , FE_CAN_FEC_3_4 = 0x8 , FE_CAN_FEC_4_5 = 0x10 , FE_CAN_FEC_5_6 = 0x20 , FE_CAN_FEC_6_7 = 0x40 , FE_CAN_FEC_7_8 = 0x80 , FE_CAN_FEC_8_9 = 0x100 , FE_CAN_FEC_AUTO = 0x200 , FE_CAN_QPSK = 0x400 , FE_CAN_QAM_16 = 0x800 , FE_CAN_QAM_32 = 0x1000 , FE_CAN_QAM_64 = 0x2000 , FE_CAN_QAM_128 = 0x4000 , FE_CAN_QAM_256 = 0x8000 , FE_CAN_QAM_AUTO = 0x10000 , FE_CAN_TRANSMISSION_MODE_AUTO = 0x20000 , FE_CAN_BANDWIDTH_AUTO = 0x40000 , FE_CAN_GUARD_INTERVAL_AUTO = 0x80000 , FE_CAN_HIERARCHY_AUTO = 0x100000 , FE_CAN_8VSB = 0x200000 , FE_CAN_16VSB = 0x400000 , FE_HAS_EXTENDED_CAPS = 0x800000 , FE_CAN_2G_MODULATION = 0x10000000 , FE_NEEDS_BENDING = 0x20000000 , FE_CAN_RECOVER = 0x40000000 , FE_CAN_MUTE_TS = 0x80000000 } 
t#fe_caps_t typedef e#fe_caps fe_caps_t 
s#dvb_frontend_info struct dvb_frontend_info { char name [ 128 ] ; t#fe_type_t type ; t#__u32 frequency_min ; t#__u32 frequency_max ; t#__u32 frequency_stepsize ; t#__u32 frequency_tolerance ; t#__u32 symbol_rate_min ; t#__u32 symbol_rate_max ; t#__u32 symbol_rate_tolerance ; t#__u32 notifier_delay ; t#fe_caps_t caps ; } 
e#fe_spectral_inversion enum fe_spectral_inversion { INVERSION_OFF , INVERSION_ON , INVERSION_AUTO } 
t#fe_spectral_inversion_t typedef e#fe_spectral_inversion fe_spectral_inversion_t 
e#fe_code_rate enum fe_code_rate { FEC_NONE = 0 , FEC_1_2 , FEC_2_3 , FEC_3_4 , FEC_4_5 , FEC_5_6 , FEC_6_7 , FEC_7_8 , FEC_8_9 , FEC_AUTO , FEC_3_5 , FEC_9_10 , } 
t#fe_code_rate_t typedef e#fe_code_rate fe_code_rate_t 
s#dvb_qpsk_parameters struct dvb_qpsk_parameters { t#__u32 symbol_rate ; t#fe_code_rate_t fec_inner ; } 
e#fe_modulation enum fe_modulation { QPSK , QAM_16 , QAM_32 , QAM_64 , QAM_128 , QAM_256 , QAM_AUTO , VSB_8 , VSB_16 , PSK_8 , APSK_16 , APSK_32 , DQPSK , } 
t#fe_modulation_t typedef e#fe_modulation fe_modulation_t 
s#dvb_qam_parameters struct dvb_qam_parameters { t#__u32 symbol_rate ; t#fe_code_rate_t fec_inner ; t#fe_modulation_t modulation ; } 
e#fe_bandwidth enum fe_bandwidth { BANDWIDTH_8_MHZ , BANDWIDTH_7_MHZ , BANDWIDTH_6_MHZ , BANDWIDTH_AUTO } 
t#fe_bandwidth_t typedef e#fe_bandwidth fe_bandwidth_t 
e#fe_transmit_mode enum fe_transmit_mode { TRANSMISSION_MODE_2K , TRANSMISSION_MODE_8K , TRANSMISSION_MODE_AUTO , TRANSMISSION_MODE_4K } 
t#fe_transmit_mode_t typedef e#fe_transmit_mode fe_transmit_mode_t 
e#fe_guard_interval enum fe_guard_interval { GUARD_INTERVAL_1_32 , GUARD_INTERVAL_1_16 , GUARD_INTERVAL_1_8 , GUARD_INTERVAL_1_4 , GUARD_INTERVAL_AUTO } 
t#fe_guard_interval_t typedef e#fe_guard_interval fe_guard_interval_t 
e#fe_hierarchy enum fe_hierarchy { HIERARCHY_NONE , HIERARCHY_1 , HIERARCHY_2 , HIERARCHY_4 , HIERARCHY_AUTO } 
t#fe_hierarchy_t typedef e#fe_hierarchy fe_hierarchy_t 
s#dvb_ofdm_parameters struct dvb_ofdm_parameters { t#fe_bandwidth_t bandwidth ; t#fe_code_rate_t code_rate_HP ; t#fe_code_rate_t code_rate_LP ; t#fe_modulation_t constellation ; t#fe_transmit_mode_t transmission_mode ; t#fe_guard_interval_t guard_interval ; t#fe_hierarchy_t hierarchy_information ; } 
s#dvb_vsb_parameters struct dvb_vsb_parameters { t#fe_modulation_t modulation ; } 
s#dvb_frontend_parameters struct dvb_frontend_parameters { t#__u32 frequency ; t#fe_spectral_inversion_t inversion ; union { s#dvb_qpsk_parameters qpsk ; s#dvb_qam_parameters qam ; s#dvb_ofdm_parameters ofdm ; s#dvb_vsb_parameters vsb ; } u ; } 
e#fe_status enum fe_status { FE_HAS_SIGNAL = 0x01 , FE_HAS_CARRIER = 0x02 , FE_HAS_VITERBI = 0x04 , FE_HAS_SYNC = 0x08 , FE_HAS_LOCK = 0x10 , FE_TIMEDOUT = 0x20 , FE_REINIT = 0x40 } 
t#fe_status_t typedef e#fe_status fe_status_t 
e#dvbfe_algo enum dvbfe_algo { DVBFE_ALGO_HW = ( 1 << 0 ) , DVBFE_ALGO_SW = ( 1 << 1 ) , DVBFE_ALGO_CUSTOM = ( 1 << 2 ) , DVBFE_ALGO_RECOVERY = ( 1 << 31 ) } 
s#dvb_frontend_tune_settings struct dvb_frontend_tune_settings { int min_delay_ms ; int step_size ; int max_drift ; s#dvb_frontend_parameters parameters ; } 
s#dvb_diseqc_master_cmd struct dvb_diseqc_master_cmd { t#__u8 msg [ 6 ] ; t#__u8 msg_len ; } 
s#dvb_diseqc_slave_reply struct dvb_diseqc_slave_reply { t#__u8 msg [ 4 ] ; t#__u8 msg_len ; int timeout ; } 
e#fe_sec_mini_cmd enum fe_sec_mini_cmd { SEC_MINI_A , SEC_MINI_B } 
t#fe_sec_mini_cmd_t typedef e#fe_sec_mini_cmd fe_sec_mini_cmd_t 
e#fe_sec_tone_mode enum fe_sec_tone_mode { SEC_TONE_ON , SEC_TONE_OFF } 
t#fe_sec_tone_mode_t typedef e#fe_sec_tone_mode fe_sec_tone_mode_t 
e#fe_sec_voltage enum fe_sec_voltage { SEC_VOLTAGE_13 , SEC_VOLTAGE_18 , SEC_VOLTAGE_OFF } 
t#fe_sec_voltage_t typedef e#fe_sec_voltage fe_sec_voltage_t 
e#dvbfe_search enum dvbfe_search { DVBFE_ALGO_SEARCH_SUCCESS = ( 1 << 0 ) , DVBFE_ALGO_SEARCH_ASLEEP = ( 1 << 1 ) , DVBFE_ALGO_SEARCH_FAILED = ( 1 << 2 ) , DVBFE_ALGO_SEARCH_INVALID = ( 1 << 3 ) , DVBFE_ALGO_SEARCH_AGAIN = ( 1 << 4 ) , DVBFE_ALGO_SEARCH_ERROR = ( 1 << 31 ) , } 
s#dvb_tuner_info struct dvb_tuner_info { char name [ 128 ] ; t#u32 frequency_min ; t#u32 frequency_max ; t#u32 frequency_step ; t#u32 bandwidth_min ; t#u32 bandwidth_max ; t#u32 bandwidth_step ; } 
s#analog_parameters struct analog_parameters { unsigned int frequency ; unsigned int mode ; unsigned int audmode ; t#u64 std ; } 
e#tuner_param enum tuner_param { DVBFE_TUNER_FREQUENCY = ( 1 << 0 ) , DVBFE_TUNER_TUNERSTEP = ( 1 << 1 ) , DVBFE_TUNER_IFFREQ = ( 1 << 2 ) , DVBFE_TUNER_BANDWIDTH = ( 1 << 3 ) , DVBFE_TUNER_REFCLOCK = ( 1 << 4 ) , DVBFE_TUNER_IQSENSE = ( 1 << 5 ) , DVBFE_TUNER_DUMMY = ( 1 << 31 ) } 
s#tuner_state struct tuner_state { t#u32 frequency ; t#u32 tunerstep ; t#u32 ifreq ; t#u32 bandwidth ; t#u32 iqsense ; t#u32 refclock ; } 
s#dvb_tuner_ops struct dvb_tuner_ops { s#dvb_tuner_info info ; int ( * release ) ( s#dvb_frontend * ) ; int ( * init ) ( s#dvb_frontend * ) ; int ( * sleep ) ( s#dvb_frontend * ) ; int ( * set_params ) ( s#dvb_frontend * , s#dvb_frontend_parameters * ) ; int ( * set_analog_params ) ( s#dvb_frontend * , s#analog_parameters * ) ; int ( * calc_regs ) ( s#dvb_frontend * , s#dvb_frontend_parameters * , t#u8 * , int ) ; int ( * set_config ) ( s#dvb_frontend * , void * ) ; int ( * get_frequency ) ( s#dvb_frontend * , t#u32 * ) ; int ( * get_bandwidth ) ( s#dvb_frontend * , t#u32 * ) ; int ( * get_status ) ( s#dvb_frontend * , t#u32 * ) ; int ( * get_rf_strength ) ( s#dvb_frontend * , t#u16 * ) ; int ( * set_frequency ) ( s#dvb_frontend * , t#u32 ) ; int ( * set_bandwidth ) ( s#dvb_frontend * , t#u32 ) ; int ( * set_state ) ( s#dvb_frontend * , e#tuner_param , s#tuner_state * ) ; int ( * get_state ) ( s#dvb_frontend * , e#tuner_param , s#tuner_state * ) ; } 
s#analog_demod_info struct analog_demod_info { char * name ; } 
s#analog_demod_ops struct analog_demod_ops { s#analog_demod_info info ; void ( * set_params ) ( s#dvb_frontend * , s#analog_parameters * ) ; int ( * has_signal ) ( s#dvb_frontend * ) ; int ( * is_stereo ) ( s#dvb_frontend * ) ; int ( * get_afc ) ( s#dvb_frontend * ) ; void ( * tuner_status ) ( s#dvb_frontend * ) ; void ( * standby ) ( s#dvb_frontend * ) ; void ( * release ) ( s#dvb_frontend * ) ; int ( * i2c_gate_ctrl ) ( s#dvb_frontend * , int ) ; int ( * set_config ) ( s#dvb_frontend * , void * ) ; } 
s#dtv_property struct dtv_property { t#__u32 cmd ; t#__u32 reserved [ 3 ] ; union { t#__u32 data ; struct { t#__u8 data [ 32 ] ; t#__u32 len ; t#__u32 reserved1 [ 3 ] ; void * reserved2 ; } buffer ; } u ; int result ; } 
s#dvb_frontend_ops struct dvb_frontend_ops { s#dvb_frontend_info info ; void ( * release ) ( s#dvb_frontend * ) ; void ( * release_sec ) ( s#dvb_frontend * ) ; int ( * init ) ( s#dvb_frontend * ) ; int ( * sleep ) ( s#dvb_frontend * ) ; int ( * write ) ( s#dvb_frontend * , t#u8 * , int ) ; int ( * tune ) ( s#dvb_frontend * , s#dvb_frontend_parameters * , unsigned int , unsigned int * , t#fe_status_t * ) ; e#dvbfe_algo ( * get_frontend_algo ) ( s#dvb_frontend * ) ; int ( * set_frontend ) ( s#dvb_frontend * , s#dvb_frontend_parameters * ) ; int ( * get_tune_settings ) ( s#dvb_frontend * , s#dvb_frontend_tune_settings * ) ; int ( * get_frontend ) ( s#dvb_frontend * , s#dvb_frontend_parameters * ) ; int ( * read_status ) ( s#dvb_frontend * , t#fe_status_t * ) ; int ( * read_ber ) ( s#dvb_frontend * , t#u32 * ) ; int ( * read_signal_strength ) ( s#dvb_frontend * , t#u16 * ) ; int ( * read_snr ) ( s#dvb_frontend * , t#u16 * ) ; int ( * read_ucblocks ) ( s#dvb_frontend * , t#u32 * ) ; int ( * diseqc_reset_overload ) ( s#dvb_frontend * ) ; int ( * diseqc_send_master_cmd ) ( s#dvb_frontend * , s#dvb_diseqc_master_cmd * ) ; int ( * diseqc_recv_slave_reply ) ( s#dvb_frontend * , s#dvb_diseqc_slave_reply * ) ; int ( * diseqc_send_burst ) ( s#dvb_frontend * , t#fe_sec_mini_cmd_t ) ; int ( * set_tone ) ( s#dvb_frontend * , t#fe_sec_tone_mode_t ) ; int ( * set_voltage ) ( s#dvb_frontend * , t#fe_sec_voltage_t ) ; int ( * enable_high_lnb_voltage ) ( s#dvb_frontend * , long ) ; int ( * dishnetwork_send_legacy_command ) ( s#dvb_frontend * , unsigned long ) ; int ( * i2c_gate_ctrl ) ( s#dvb_frontend * , int ) ; int ( * ts_bus_ctrl ) ( s#dvb_frontend * , int ) ; e#dvbfe_search ( * search ) ( s#dvb_frontend * , s#dvb_frontend_parameters * ) ; int ( * track ) ( s#dvb_frontend * , s#dvb_frontend_parameters * ) ; s#dvb_tuner_ops tuner_ops ; s#analog_demod_ops analog_ops ; int ( * set_property ) ( s#dvb_frontend * , s#dtv_property * ) ; int ( * get_property ) ( s#dvb_frontend * , s#dtv_property * ) ; } 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#dvb_device struct dvb_device { s#list_head list_head ; const s#file_operations * fops ; s#dvb_adapter * adapter ; int type ; int minor ; t#u32 id ; int readers ; int writers ; int users ; t#wait_queue_head_t wait_queue ; int ( * kernel_ioctl ) ( s#inode * , s#file * , unsigned int , void * ) ; void * priv ; } 
s#dvb_adapter struct dvb_adapter { int num ; s#list_head list_head ; s#list_head device_list ; const char * name ; t#u8 proposed_mac [ 6 ] ; void * priv ; s#device * device ; s#module * module ; int mfe_shared ; s#dvb_device * mfe_dvbdev ; s#mutex mfe_lock ; } 
e#fe_pilot enum fe_pilot { PILOT_ON , PILOT_OFF , PILOT_AUTO , } 
t#fe_pilot_t typedef e#fe_pilot fe_pilot_t 
e#fe_rolloff enum fe_rolloff { ROLLOFF_35 , ROLLOFF_20 , ROLLOFF_25 , ROLLOFF_AUTO , } 
t#fe_rolloff_t typedef e#fe_rolloff fe_rolloff_t 
e#fe_delivery_system enum fe_delivery_system { SYS_UNDEFINED , SYS_DVBC_ANNEX_AC , SYS_DVBC_ANNEX_B , SYS_DVBT , SYS_DSS , SYS_DVBS , SYS_DVBS2 , SYS_DVBH , SYS_ISDBT , SYS_ISDBS , SYS_ISDBC , SYS_ATSC , SYS_ATSCMH , SYS_DMBTH , SYS_CMMB , SYS_DAB , } 
t#fe_delivery_system_t typedef e#fe_delivery_system fe_delivery_system_t 
s#dtv_frontend_properties struct dtv_frontend_properties { t#u32 state ; t#u32 frequency ; t#fe_modulation_t modulation ; t#fe_sec_voltage_t voltage ; t#fe_sec_tone_mode_t sectone ; t#fe_spectral_inversion_t inversion ; t#fe_code_rate_t fec_inner ; t#fe_transmit_mode_t transmission_mode ; t#u32 bandwidth_hz ; t#fe_guard_interval_t guard_interval ; t#fe_hierarchy_t hierarchy ; t#u32 symbol_rate ; t#fe_code_rate_t code_rate_HP ; t#fe_code_rate_t code_rate_LP ; t#fe_pilot_t pilot ; t#fe_rolloff_t rolloff ; t#fe_delivery_system_t delivery_system ; t#u8 isdbt_partial_reception ; t#u8 isdbt_sb_mode ; t#u8 isdbt_sb_subchannel ; t#u32 isdbt_sb_segment_idx ; t#u32 isdbt_sb_segment_count ; t#u8 isdbt_layer_enabled ; struct { t#u8 segment_count ; t#fe_code_rate_t fec ; t#fe_modulation_t modulation ; t#u8 interleaving ; } layer [ 3 ] ; t#u32 isdbs_ts_id ; } 
s#dvb_frontend struct dvb_frontend { s#dvb_frontend_ops ops ; s#dvb_adapter * dvb ; void * demodulator_priv ; void * tuner_priv ; void * frontend_priv ; void * sec_priv ; void * analog_demod_priv ; s#dtv_frontend_properties dtv_property_cache ; int ( * callback ) ( void * , int , int , int ) ; int id ; } 
s#mc44s803_config struct mc44s803_config { t#u8 i2c_address ; t#u8 dig_out ; } 
mc44s803_attach extern s#dvb_frontend * mc44s803_attach ( s#dvb_frontend * , s#i2c_adapter * , s#mc44s803_config * ) 

/* drivers/media/common/tuners/mt2060.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#mt2060_config struct mt2060_config { t#u8 i2c_address ; t#u8 clock_out ; } 
mt2060_attach extern s#dvb_frontend * mt2060_attach ( s#dvb_frontend * , s#i2c_adapter * , s#mt2060_config * , t#u16 ) 

/* drivers/media/common/tuners/mt20xx.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
microtune_attach extern s#dvb_frontend * microtune_attach ( s#dvb_frontend * , s#i2c_adapter * , t#u8 ) 

/* drivers/media/common/tuners/mt2131.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#mt2131_config struct mt2131_config { t#u8 i2c_address ; t#u8 clock_out ; } 
mt2131_attach extern s#dvb_frontend * mt2131_attach ( s#dvb_frontend * , s#i2c_adapter * , s#mt2131_config * , t#u16 ) 

/* drivers/media/common/tuners/mt2266.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#mt2266_config struct mt2266_config { t#u8 i2c_address ; } 
mt2266_attach extern s#dvb_frontend * mt2266_attach ( s#dvb_frontend * , s#i2c_adapter * , s#mt2266_config * ) 

/* drivers/media/common/tuners/mxl5005s.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#mxl5005s_config struct mxl5005s_config { t#u8 i2c_address ; t#u32 if_freq ; t#u32 xtal_freq ; t#u8 agc_mode ; t#u8 tracking_filter ; t#u8 rssi_enable ; t#u8 cap_select ; t#u8 div_out ; t#u8 clock_out ; t#u32 output_load ; t#u32 top ; t#u8 mod_mode ; t#u8 if_mode ; t#u8 AgcMasterByte ; } 
mxl5005s_attach extern s#dvb_frontend * mxl5005s_attach ( s#dvb_frontend * , s#i2c_adapter * , s#mxl5005s_config * ) 

/* drivers/media/common/tuners/mxl5007t.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
e#mxl5007t_clkout_amp enum mxl5007t_clkout_amp { MxL_CLKOUT_AMP_0_94V = 0 , MxL_CLKOUT_AMP_0_53V = 1 , MxL_CLKOUT_AMP_0_37V = 2 , MxL_CLKOUT_AMP_0_28V = 3 , MxL_CLKOUT_AMP_0_23V = 4 , MxL_CLKOUT_AMP_0_20V = 5 , MxL_CLKOUT_AMP_0_17V = 6 , MxL_CLKOUT_AMP_0_15V = 7 , } 
e#mxl5007t_xtal_freq enum mxl5007t_xtal_freq { MxL_XTAL_16_MHZ , MxL_XTAL_20_MHZ , MxL_XTAL_20_25_MHZ , MxL_XTAL_20_48_MHZ , MxL_XTAL_24_MHZ , MxL_XTAL_25_MHZ , MxL_XTAL_25_14_MHZ , MxL_XTAL_27_MHZ , MxL_XTAL_28_8_MHZ , MxL_XTAL_32_MHZ , MxL_XTAL_40_MHZ , MxL_XTAL_44_MHZ , MxL_XTAL_48_MHZ , MxL_XTAL_49_3811_MHZ , } 
e#mxl5007t_if_freq enum mxl5007t_if_freq { MxL_IF_4_MHZ , MxL_IF_4_5_MHZ , MxL_IF_4_57_MHZ , MxL_IF_5_MHZ , MxL_IF_5_38_MHZ , MxL_IF_6_MHZ , MxL_IF_6_28_MHZ , MxL_IF_9_1915_MHZ , MxL_IF_35_25_MHZ , MxL_IF_36_15_MHZ , MxL_IF_44_MHZ , } 
s#mxl5007t_config struct mxl5007t_config { t#s32 if_diff_out_level ; e#mxl5007t_clkout_amp clk_out_amp ; e#mxl5007t_xtal_freq xtal_freq_hz ; e#mxl5007t_if_freq if_freq_hz ; unsigned int invert_if : 1 ; unsigned int loop_thru_enable : 1 ; unsigned int clk_out_enable : 1 ; } 
mxl5007t_attach extern s#dvb_frontend * mxl5007t_attach ( s#dvb_frontend * , s#i2c_adapter * , t#u8 , s#mxl5007t_config * ) 

/* drivers/media/common/tuners/qt1010.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#qt1010_config struct qt1010_config { t#u8 i2c_address ; } 
qt1010_attach extern s#dvb_frontend * qt1010_attach ( s#dvb_frontend * , s#i2c_adapter * , s#qt1010_config * ) 

/* drivers/media/common/tuners/tda18271-fe.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#tda18271_std_map_item struct tda18271_std_map_item { t#u16 if_freq ; unsigned int agc_mode : 2 ; unsigned int std : 3 ; unsigned int fm_rfn : 1 ; unsigned int if_lvl : 3 ; unsigned int rfagc_top : 7 ; } 
s#tda18271_std_map struct tda18271_std_map { s#tda18271_std_map_item fm_radio ; s#tda18271_std_map_item atv_b ; s#tda18271_std_map_item atv_dk ; s#tda18271_std_map_item atv_gh ; s#tda18271_std_map_item atv_i ; s#tda18271_std_map_item atv_l ; s#tda18271_std_map_item atv_lc ; s#tda18271_std_map_item atv_mn ; s#tda18271_std_map_item atsc_6 ; s#tda18271_std_map_item dvbt_6 ; s#tda18271_std_map_item dvbt_7 ; s#tda18271_std_map_item dvbt_8 ; s#tda18271_std_map_item qam_6 ; s#tda18271_std_map_item qam_8 ; } 
e#tda18271_role enum tda18271_role { TDA18271_MASTER = 0 , TDA18271_SLAVE , } 
e#tda18271_i2c_gate enum tda18271_i2c_gate { TDA18271_GATE_AUTO = 0 , TDA18271_GATE_ANALOG , TDA18271_GATE_DIGITAL , } 
e#tda18271_output_options enum tda18271_output_options { TDA18271_OUTPUT_LT_XT_ON = 0 , TDA18271_OUTPUT_LT_OFF = 1 , TDA18271_OUTPUT_XT_OFF = 2 , } 
s#tda18271_config struct tda18271_config { s#tda18271_std_map * std_map ; e#tda18271_role role ; e#tda18271_i2c_gate gate ; e#tda18271_output_options output_opt ; unsigned int rf_cal_on_startup : 1 ; unsigned int small_i2c : 1 ; unsigned int config ; } 
tda18271_attach extern s#dvb_frontend * tda18271_attach ( s#dvb_frontend * , t#u8 , s#i2c_adapter * , s#tda18271_config * ) 

/* drivers/media/common/tuners/tda827x.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#tda827x_config struct tda827x_config { int ( * init ) ( s#dvb_frontend * ) ; int ( * sleep ) ( s#dvb_frontend * ) ; unsigned int config ; int switch_addr ; void ( * agcf ) ( s#dvb_frontend * ) ; } 
tda827x_attach extern s#dvb_frontend * tda827x_attach ( s#dvb_frontend * , int , s#i2c_adapter * , s#tda827x_config * ) 

/* drivers/media/common/tuners/tda8290.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#tda829x_config struct tda829x_config { unsigned int lna_cfg ; unsigned int probe_tuner : 1 ; } 
tda829x_attach extern s#dvb_frontend * tda829x_attach ( s#dvb_frontend * , s#i2c_adapter * , t#u8 , s#tda829x_config * ) 
tda829x_probe extern int tda829x_probe ( s#i2c_adapter * , t#u8 ) 

/* drivers/media/common/tuners/tda9887.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
tda9887_attach extern s#dvb_frontend * tda9887_attach ( s#dvb_frontend * , s#i2c_adapter * , t#u8 ) 

/* drivers/media/common/tuners/tea5761.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
tea5761_attach extern s#dvb_frontend * tea5761_attach ( s#dvb_frontend * , s#i2c_adapter * , t#u8 ) 
tea5761_autodetection extern int tea5761_autodetection ( s#i2c_adapter * , t#u8 ) 

/* drivers/media/common/tuners/tea5767.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
tea5767_attach extern s#dvb_frontend * tea5767_attach ( s#dvb_frontend * , s#i2c_adapter * , t#u8 ) 
tea5767_autodetection extern int tea5767_autodetection ( s#i2c_adapter * , t#u8 ) 

/* drivers/media/common/tuners/tuner-simple.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
simple_tuner_attach extern s#dvb_frontend * simple_tuner_attach ( s#dvb_frontend * , s#i2c_adapter * , t#u8 , unsigned int ) 

/* drivers/media/common/tuners/tuner-types.o */
e#param_type enum param_type { TUNER_PARAM_TYPE_RADIO , TUNER_PARAM_TYPE_PAL , TUNER_PARAM_TYPE_SECAM , TUNER_PARAM_TYPE_NTSC , TUNER_PARAM_TYPE_DIGITAL , } 
s#tuner_range struct tuner_range { unsigned short limit ; unsigned char config ; unsigned char cb ; } 
s#tuner_params struct tuner_params { e#param_type type ; unsigned int cb_first_if_lower_freq : 1 ; unsigned int has_tda9887 : 1 ; unsigned int port1_fm_high_sensitivity : 1 ; unsigned int port2_fm_high_sensitivity : 1 ; unsigned int fm_gain_normal : 1 ; unsigned int intercarrier_mode : 1 ; unsigned int port1_active : 1 ; unsigned int port2_active : 1 ; unsigned int port1_invert_for_secam_lc : 1 ; unsigned int port2_invert_for_secam_lc : 1 ; unsigned int port1_set_for_fm_mono : 1 ; unsigned int default_pll_gating_18 : 1 ; unsigned int radio_if : 2 ; signed int default_top_low : 5 ; signed int default_top_mid : 5 ; signed int default_top_high : 5 ; signed int default_top_secam_low : 5 ; signed int default_top_secam_mid : 5 ; signed int default_top_secam_high : 5 ; t#u16 iffreq ; unsigned int count ; s#tuner_range * ranges ; } 
s#tunertype struct tunertype { char * name ; unsigned int count ; s#tuner_params * params ; t#u16 min ; t#u16 max ; t#u32 stepsize ; t#u8 * initdata ; t#u8 * sleepdata ; } 
tuners extern s#tunertype tuners [ ] 
tuner_count extern unsigned const int tuner_count 

/* drivers/media/common/tuners/tuner-xc2028.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
e#firmware_type enum firmware_type { XC2028_AUTO = 0 , XC2028_D2633 , XC2028_D2620 , } 
s#xc2028_ctrl struct xc2028_ctrl { char * fname ; int max_len ; unsigned int scode_table ; unsigned int mts : 1 ; unsigned int input1 : 1 ; unsigned int vhfbw7 : 1 ; unsigned int uhfbw8 : 1 ; unsigned int disable_power_mgmt : 1 ; unsigned int demod ; e#firmware_type type : 2 ; } 
s#xc2028_config struct xc2028_config { s#i2c_adapter * i2c_adap ; t#u8 i2c_addr ; s#xc2028_ctrl * ctrl ; } 
xc2028_attach extern s#dvb_frontend * xc2028_attach ( s#dvb_frontend * , s#xc2028_config * ) 

/* drivers/media/common/tuners/xc5000.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#xc5000_config struct xc5000_config { t#u8 i2c_address ; t#u32 if_khz ; } 
xc5000_attach extern s#dvb_frontend * xc5000_attach ( s#dvb_frontend * , s#i2c_adapter * , s#xc5000_config * ) 

/* drivers/media/dvb/b2c2/flexcop.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
t#flexcop_revision_t typedef enum { FLEXCOP_UNK = 0 , FLEXCOP_II , FLEXCOP_IIB , FLEXCOP_III , } flexcop_revision_t 
t#flexcop_device_type_t typedef enum { FC_UNK = 0 , FC_CABLE , FC_AIR_DVBT , FC_AIR_ATSC1 , FC_AIR_ATSC2 , FC_AIR_ATSC3 , FC_SKY_REV23 , FC_SKY_REV26 , FC_SKY_REV27 , FC_SKY_REV28 , } flexcop_device_type_t 
t#flexcop_bus_t typedef enum { FC_USB = 0 , FC_PCI , } flexcop_bus_t 
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
e#dmx_frontend_source enum dmx_frontend_source { DMX_MEMORY_FE , DMX_FRONTEND_0 , DMX_FRONTEND_1 , DMX_FRONTEND_2 , DMX_FRONTEND_3 , DMX_STREAM_0 , DMX_STREAM_1 , DMX_STREAM_2 , DMX_STREAM_3 } 
s#dmx_frontend struct dmx_frontend { s#list_head connectivity_list ; e#dmx_frontend_source source ; } 
e#dmx_ts_pes enum dmx_ts_pes { DMX_TS_PES_AUDIO0 , DMX_TS_PES_VIDEO0 , DMX_TS_PES_TELETEXT0 , DMX_TS_PES_SUBTITLE0 , DMX_TS_PES_PCR0 , DMX_TS_PES_AUDIO1 , DMX_TS_PES_VIDEO1 , DMX_TS_PES_TELETEXT1 , DMX_TS_PES_SUBTITLE1 , DMX_TS_PES_PCR1 , DMX_TS_PES_AUDIO2 , DMX_TS_PES_VIDEO2 , DMX_TS_PES_TELETEXT2 , DMX_TS_PES_SUBTITLE2 , DMX_TS_PES_PCR2 , DMX_TS_PES_AUDIO3 , DMX_TS_PES_VIDEO3 , DMX_TS_PES_TELETEXT3 , DMX_TS_PES_SUBTITLE3 , DMX_TS_PES_PCR3 , DMX_TS_PES_OTHER } 
s#dmx_ts_feed struct dmx_ts_feed { int is_filtering ; s#dmx_demux * parent ; void * priv ; int ( * set ) ( s#dmx_ts_feed * , t#u16 , int , e#dmx_ts_pes , t#size_t , s#timespec ) ; int ( * start_filtering ) ( s#dmx_ts_feed * ) ; int ( * stop_filtering ) ( s#dmx_ts_feed * ) ; } 
e#dmx_success enum dmx_success { DMX_OK = 0 , DMX_LENGTH_ERROR , DMX_OVERRUN_ERROR , DMX_CRC_ERROR , DMX_FRAME_ERROR , DMX_FIFO_ERROR , DMX_MISSED_ERROR } 
t#dmx_ts_cb typedef int ( * dmx_ts_cb ) ( const t#u8 * , t#size_t , const t#u8 * , t#size_t , s#dmx_ts_feed * , e#dmx_success ) 
s#dmx_section_filter struct dmx_section_filter { t#u8 filter_value [ 18 ] ; t#u8 filter_mask [ 18 ] ; t#u8 filter_mode [ 18 ] ; s#dmx_section_feed * parent ; void * priv ; } 
s#dmx_section_feed struct dmx_section_feed { int is_filtering ; s#dmx_demux * parent ; void * priv ; int check_crc ; t#u32 crc_val ; t#u8 * secbuf ; t#u8 secbuf_base [ ( 4096 + 188 ) ] ; t#u16 secbufp , seclen , tsfeedp ; int ( * set ) ( s#dmx_section_feed * , t#u16 , t#size_t , int ) ; int ( * allocate_filter ) ( s#dmx_section_feed * , s#dmx_section_filter * * ) ; int ( * release_filter ) ( s#dmx_section_feed * , s#dmx_section_filter * ) ; int ( * start_filtering ) ( s#dmx_section_feed * ) ; int ( * stop_filtering ) ( s#dmx_section_feed * ) ; } 
t#dmx_section_cb typedef int ( * dmx_section_cb ) ( const t#u8 * , t#size_t , const t#u8 * , t#size_t , s#dmx_section_filter * , e#dmx_success ) 
s#dmx_caps struct dmx_caps { t#__u32 caps ; int num_decoders ; } 
t#dmx_source_t typedef enum { DMX_SOURCE_FRONT0 = 0 , DMX_SOURCE_FRONT1 , DMX_SOURCE_FRONT2 , DMX_SOURCE_FRONT3 , DMX_SOURCE_DVR0 = 16 , DMX_SOURCE_DVR1 , DMX_SOURCE_DVR2 , DMX_SOURCE_DVR3 } dmx_source_t 
s#dmx_demux struct dmx_demux { t#u32 capabilities ; s#dmx_frontend * frontend ; void * priv ; int ( * open ) ( s#dmx_demux * ) ; int ( * close ) ( s#dmx_demux * ) ; int ( * write ) ( s#dmx_demux * , const char * , t#size_t ) ; int ( * allocate_ts_feed ) ( s#dmx_demux * , s#dmx_ts_feed * * , t#dmx_ts_cb ) ; int ( * release_ts_feed ) ( s#dmx_demux * , s#dmx_ts_feed * ) ; int ( * allocate_section_feed ) ( s#dmx_demux * , s#dmx_section_feed * * , t#dmx_section_cb ) ; int ( * release_section_feed ) ( s#dmx_demux * , s#dmx_section_feed * ) ; int ( * add_frontend ) ( s#dmx_demux * , s#dmx_frontend * ) ; int ( * remove_frontend ) ( s#dmx_demux * , s#dmx_frontend * ) ; s#list_head * ( * get_frontends ) ( s#dmx_demux * ) ; int ( * connect_frontend ) ( s#dmx_demux * , s#dmx_frontend * ) ; int ( * disconnect_frontend ) ( s#dmx_demux * ) ; int ( * get_pes_pids ) ( s#dmx_demux * , t#u16 * ) ; int ( * get_caps ) ( s#dmx_demux * , s#dmx_caps * ) ; int ( * set_source ) ( s#dmx_demux * , const t#dmx_source_t * ) ; int ( * get_stc ) ( s#dmx_demux * , unsigned int , t#u64 * , unsigned int * ) ; } 
s#dvb_net struct dvb_net { s#dvb_device * dvbdev ; s#net_device * device [ 10 ] ; int state [ 10 ] ; unsigned int exit : 1 ; s#dmx_demux * demux ; } 
s#dvb_demux_filter struct dvb_demux_filter { s#dmx_section_filter filter ; t#u8 maskandmode [ 18 ] ; t#u8 maskandnotmode [ 18 ] ; int doneq ; s#dvb_demux_filter * next ; s#dvb_demux_feed * feed ; int index ; int state ; int type ; t#u16 hw_handle ; s#timer_list timer ; } 
s#dvb_demux_feed struct dvb_demux_feed { union { s#dmx_ts_feed ts ; s#dmx_section_feed sec ; } feed ; union { t#dmx_ts_cb ts ; t#dmx_section_cb sec ; } cb ; s#dvb_demux * demux ; void * priv ; int type ; int state ; t#u16 pid ; t#u8 * buffer ; int buffer_size ; s#timespec timeout ; s#dvb_demux_filter * filter ; int ts_type ; e#dmx_ts_pes pes_type ; int cc ; int pusi_seen ; t#u16 peslen ; s#list_head list_head ; unsigned int index ; } 
t#uint8_t typedef t#__u8 uint8_t 
s#dvb_demux struct dvb_demux { s#dmx_demux dmx ; void * priv ; int filternum ; int feednum ; int ( * start_feed ) ( s#dvb_demux_feed * ) ; int ( * stop_feed ) ( s#dvb_demux_feed * ) ; int ( * write_to_decoder ) ( s#dvb_demux_feed * , const t#u8 * , t#size_t ) ; t#u32 ( * check_crc32 ) ( s#dvb_demux_feed * , const t#u8 * , t#size_t ) ; void ( * memcopy ) ( s#dvb_demux_feed * , t#u8 * , const t#u8 * , t#size_t ) ; int users ; s#dvb_demux_filter * filter ; s#dvb_demux_feed * feed ; s#list_head frontend_list ; s#dvb_demux_feed * pesfilter [ DMX_TS_PES_OTHER ] ; t#u16 pids [ DMX_TS_PES_OTHER ] ; int playing ; int recording ; s#list_head feed_list ; t#u8 tsbuf [ 204 ] ; int tsbufp ; s#mutex mutex ; t#spinlock_t lock ; t#uint8_t * cnt_storage ; } 
s#dmx_filter struct dmx_filter { t#__u8 filter [ 16 ] ; t#__u8 mask [ 16 ] ; t#__u8 mode [ 16 ] ; } 
t#dmx_filter_t typedef s#dmx_filter dmx_filter_t 
s#dmx_sct_filter_params struct dmx_sct_filter_params { t#__u16 pid ; t#dmx_filter_t filter ; t#__u32 timeout ; t#__u32 flags ; } 
t#dmx_input_t typedef enum { DMX_IN_FRONTEND , DMX_IN_DVR } dmx_input_t 
t#dmx_output_t typedef enum { DMX_OUT_DECODER , DMX_OUT_TAP , DMX_OUT_TS_TAP , DMX_OUT_TSDEMUX_TAP } dmx_output_t 
t#dmx_pes_type_t typedef enum { DMX_PES_AUDIO0 , DMX_PES_VIDEO0 , DMX_PES_TELETEXT0 , DMX_PES_SUBTITLE0 , DMX_PES_PCR0 , DMX_PES_AUDIO1 , DMX_PES_VIDEO1 , DMX_PES_TELETEXT1 , DMX_PES_SUBTITLE1 , DMX_PES_PCR1 , DMX_PES_AUDIO2 , DMX_PES_VIDEO2 , DMX_PES_TELETEXT2 , DMX_PES_SUBTITLE2 , DMX_PES_PCR2 , DMX_PES_AUDIO3 , DMX_PES_VIDEO3 , DMX_PES_TELETEXT3 , DMX_PES_SUBTITLE3 , DMX_PES_PCR3 , DMX_PES_OTHER } dmx_pes_type_t 
s#dmx_pes_filter_params struct dmx_pes_filter_params { t#__u16 pid ; t#dmx_input_t input ; t#dmx_output_t output ; t#dmx_pes_type_t pes_type ; t#__u32 flags ; } 
e#dmxdev_type enum dmxdev_type { DMXDEV_TYPE_NONE , DMXDEV_TYPE_SEC , DMXDEV_TYPE_PES , } 
e#dmxdev_state enum dmxdev_state { DMXDEV_STATE_FREE , DMXDEV_STATE_ALLOCATED , DMXDEV_STATE_SET , DMXDEV_STATE_GO , DMXDEV_STATE_DONE , DMXDEV_STATE_TIMEDOUT } 
s#dvb_ringbuffer struct dvb_ringbuffer { t#u8 * data ; t#ssize_t size ; t#ssize_t pread ; t#ssize_t pwrite ; int error ; t#wait_queue_head_t queue ; t#spinlock_t lock ; } 
s#dmxdev_filter struct dmxdev_filter { union { s#dmx_section_filter * sec ; } filter ; union { s#list_head ts ; s#dmx_section_feed * sec ; } feed ; union { s#dmx_sct_filter_params sec ; s#dmx_pes_filter_params pes ; } params ; e#dmxdev_type type ; e#dmxdev_state state ; s#dmxdev * dev ; s#dvb_ringbuffer buffer ; s#mutex mutex ; s#timer_list timer ; int todo ; t#u8 secheader [ 3 ] ; } 
s#dmxdev struct dmxdev { s#dvb_device * dvbdev ; s#dvb_device * dvr_dvbdev ; s#dmxdev_filter * filter ; s#dmx_demux * demux ; int filternum ; int capabilities ; unsigned int exit : 1 ; s#dmx_frontend * dvr_orig_fe ; s#dvb_ringbuffer dvr_buffer ; s#mutex mutex ; t#spinlock_t lock ; } 
t#flexcop_i2c_port_t typedef enum { FC_I2C_PORT_DEMOD = 1 , FC_I2C_PORT_EEPROM = 2 , FC_I2C_PORT_TUNER = 3 , } flexcop_i2c_port_t 
s#flexcop_i2c_adapter struct flexcop_i2c_adapter { s#flexcop_device * fc ; s#i2c_adapter i2c_adap ; t#u8 no_base_addr ; t#flexcop_i2c_port_t port ; } 
t#flexcop_ibi_value typedef union { t#u32 raw ; struct { t#u32 dma_0start : 1 ; t#u32 dma_0No_update : 1 ; t#u32 dma_address0 : 30 ; } dma_0x0 ; struct { t#u32 DMA_maxpackets : 8 ; t#u32 dma_addr_size : 24 ; } dma_0x4_remap ; struct { t#u32 dma1timer : 7 ; t#u32 unused : 1 ; t#u32 dma_addr_size : 24 ; } dma_0x4_read ; struct { t#u32 unused : 1 ; t#u32 dmatimer : 7 ; t#u32 dma_addr_size : 24 ; } dma_0x4_write ; struct { t#u32 unused : 2 ; t#u32 dma_cur_addr : 30 ; } dma_0x8 ; struct { t#u32 dma_1start : 1 ; t#u32 remap_enable : 1 ; t#u32 dma_address1 : 30 ; } dma_0xc ; struct { t#u32 chipaddr : 7 ; t#u32 reserved1 : 1 ; t#u32 baseaddr : 8 ; t#u32 data1_reg : 8 ; t#u32 working_start : 1 ; t#u32 twoWS_rw : 1 ; t#u32 total_bytes : 2 ; t#u32 twoWS_port_reg : 2 ; t#u32 no_base_addr_ack_error : 1 ; t#u32 st_done : 1 ; } tw_sm_c_100 ; struct { t#u32 data2_reg : 8 ; t#u32 data3_reg : 8 ; t#u32 data4_reg : 8 ; t#u32 exlicit_stops : 1 ; t#u32 force_stop : 1 ; t#u32 unused : 6 ; } tw_sm_c_104 ; struct { t#u32 thi1 : 6 ; t#u32 reserved1 : 2 ; t#u32 tlo1 : 5 ; t#u32 reserved2 : 19 ; } tw_sm_c_108 ; struct { t#u32 thi1 : 6 ; t#u32 reserved1 : 2 ; t#u32 tlo1 : 5 ; t#u32 reserved2 : 19 ; } tw_sm_c_10c ; struct { t#u32 thi1 : 6 ; t#u32 reserved1 : 2 ; t#u32 tlo1 : 5 ; t#u32 reserved2 : 19 ; } tw_sm_c_110 ; struct { t#u32 LNB_CTLHighCount_sig : 15 ; t#u32 LNB_CTLLowCount_sig : 15 ; t#u32 LNB_CTLPrescaler_sig : 2 ; } lnb_switch_freq_200 ; struct { t#u32 ACPI1_sig : 1 ; t#u32 ACPI3_sig : 1 ; t#u32 LNB_L_H_sig : 1 ; t#u32 Per_reset_sig : 1 ; t#u32 reserved : 20 ; t#u32 Rev_N_sig_revision_hi : 4 ; t#u32 Rev_N_sig_reserved1 : 2 ; t#u32 Rev_N_sig_caps : 1 ; t#u32 Rev_N_sig_reserved2 : 1 ; } misc_204 ; struct { t#u32 Stream1_filter_sig : 1 ; t#u32 Stream2_filter_sig : 1 ; t#u32 PCR_filter_sig : 1 ; t#u32 PMT_filter_sig : 1 ; t#u32 EMM_filter_sig : 1 ; t#u32 ECM_filter_sig : 1 ; t#u32 Null_filter_sig : 1 ; t#u32 Mask_filter_sig : 1 ; t#u32 WAN_Enable_sig : 1 ; t#u32 WAN_CA_Enable_sig : 1 ; t#u32 CA_Enable_sig : 1 ; t#u32 SMC_Enable_sig : 1 ; t#u32 Per_CA_Enable_sig : 1 ; t#u32 Multi2_Enable_sig : 1 ; t#u32 MAC_filter_Mode_sig : 1 ; t#u32 Rcv_Data_sig : 1 ; t#u32 DMA1_IRQ_Enable_sig : 1 ; t#u32 DMA1_Timer_Enable_sig : 1 ; t#u32 DMA2_IRQ_Enable_sig : 1 ; t#u32 DMA2_Timer_Enable_sig : 1 ; t#u32 DMA1_Size_IRQ_Enable_sig : 1 ; t#u32 DMA2_Size_IRQ_Enable_sig : 1 ; t#u32 Mailbox_from_V8_Enable_sig : 1 ; t#u32 unused : 9 ; } ctrl_208 ; struct { t#u32 DMA1_IRQ_Status : 1 ; t#u32 DMA1_Timer_Status : 1 ; t#u32 DMA2_IRQ_Status : 1 ; t#u32 DMA2_Timer_Status : 1 ; t#u32 DMA1_Size_IRQ_Status : 1 ; t#u32 DMA2_Size_IRQ_Status : 1 ; t#u32 Mailbox_from_V8_Status_sig : 1 ; t#u32 Data_receiver_error : 1 ; t#u32 Continuity_error_flag : 1 ; t#u32 LLC_SNAP_FLAG_set : 1 ; t#u32 Transport_Error : 1 ; t#u32 reserved : 21 ; } irq_20c ; struct { t#u32 reset_block_000 : 1 ; t#u32 reset_block_100 : 1 ; t#u32 reset_block_200 : 1 ; t#u32 reset_block_300 : 1 ; t#u32 reset_block_400 : 1 ; t#u32 reset_block_500 : 1 ; t#u32 reset_block_600 : 1 ; t#u32 reset_block_700 : 1 ; t#u32 Block_reset_enable : 8 ; t#u32 Special_controls : 16 ; } sw_reset_210 ; struct { t#u32 vuart_oe_sig : 1 ; t#u32 v2WS_oe_sig : 1 ; t#u32 halt_V8_sig : 1 ; t#u32 section_pkg_enable_sig : 1 ; t#u32 s2p_sel_sig : 1 ; t#u32 unused1 : 3 ; t#u32 polarity_PS_CLK_sig : 1 ; t#u32 polarity_PS_VALID_sig : 1 ; t#u32 polarity_PS_SYNC_sig : 1 ; t#u32 polarity_PS_ERR_sig : 1 ; t#u32 unused2 : 20 ; } misc_214 ; struct { t#u32 Mailbox_from_V8 : 32 ; } mbox_v8_to_host_218 ; struct { t#u32 sysramaccess_data : 8 ; t#u32 sysramaccess_addr : 15 ; t#u32 unused : 7 ; t#u32 sysramaccess_write : 1 ; t#u32 sysramaccess_busmuster : 1 ; } mbox_host_to_v8_21c ; struct { t#u32 Stream1_PID : 13 ; t#u32 Stream1_trans : 1 ; t#u32 MAC_Multicast_filter : 1 ; t#u32 debug_flag_pid_saved : 1 ; t#u32 Stream2_PID : 13 ; t#u32 Stream2_trans : 1 ; t#u32 debug_flag_write_status00 : 1 ; t#u32 debug_fifo_problem : 1 ; } pid_filter_300 ; struct { t#u32 PCR_PID : 13 ; t#u32 PCR_trans : 1 ; t#u32 debug_overrun3 : 1 ; t#u32 debug_overrun2 : 1 ; t#u32 PMT_PID : 13 ; t#u32 PMT_trans : 1 ; t#u32 reserved : 2 ; } pid_filter_304 ; struct { t#u32 EMM_PID : 13 ; t#u32 EMM_trans : 1 ; t#u32 EMM_filter_4 : 1 ; t#u32 EMM_filter_6 : 1 ; t#u32 ECM_PID : 13 ; t#u32 ECM_trans : 1 ; t#u32 reserved : 2 ; } pid_filter_308 ; struct { t#u32 Group_PID : 13 ; t#u32 Group_trans : 1 ; t#u32 unused1 : 2 ; t#u32 Group_mask : 13 ; t#u32 unused2 : 3 ; } pid_filter_30c_ext_ind_0_7 ; struct { t#u32 net_master_read : 17 ; t#u32 unused : 15 ; } pid_filter_30c_ext_ind_1 ; struct { t#u32 net_master_write : 17 ; t#u32 unused : 15 ; } pid_filter_30c_ext_ind_2 ; struct { t#u32 next_net_master_write : 17 ; t#u32 unused : 15 ; } pid_filter_30c_ext_ind_3 ; struct { t#u32 unused1 : 1 ; t#u32 state_write : 10 ; t#u32 reserved1 : 6 ; t#u32 stack_read : 10 ; t#u32 reserved2 : 5 ; } pid_filter_30c_ext_ind_4 ; struct { t#u32 stack_cnt : 10 ; t#u32 unused : 22 ; } pid_filter_30c_ext_ind_5 ; struct { t#u32 pid_fsm_save_reg0 : 2 ; t#u32 pid_fsm_save_reg1 : 2 ; t#u32 pid_fsm_save_reg2 : 2 ; t#u32 pid_fsm_save_reg3 : 2 ; t#u32 pid_fsm_save_reg4 : 2 ; t#u32 pid_fsm_save_reg300 : 2 ; t#u32 write_status1 : 2 ; t#u32 write_status4 : 2 ; t#u32 data_size_reg : 12 ; t#u32 unused : 4 ; } pid_filter_30c_ext_ind_6 ; struct { t#u32 index_reg : 5 ; t#u32 extra_index_reg : 3 ; t#u32 AB_select : 1 ; t#u32 pass_alltables : 1 ; t#u32 unused : 22 ; } index_reg_310 ; struct { t#u32 PID : 13 ; t#u32 PID_trans : 1 ; t#u32 PID_enable_bit : 1 ; t#u32 reserved : 17 ; } pid_n_reg_314 ; struct { t#u32 A4_byte : 8 ; t#u32 A5_byte : 8 ; t#u32 A6_byte : 8 ; t#u32 Enable_bit : 1 ; t#u32 HighAB_bit : 1 ; t#u32 reserved : 6 ; } mac_low_reg_318 ; struct { t#u32 A1_byte : 8 ; t#u32 A2_byte : 8 ; t#u32 A3_byte : 8 ; t#u32 reserved : 8 ; } mac_high_reg_31c ; struct { t#u32 reserved : 16 ; t#u32 data_Tag_ID : 16 ; } data_tag_400 ; struct { t#u32 Card_IDbyte6 : 8 ; t#u32 Card_IDbyte5 : 8 ; t#u32 Card_IDbyte4 : 8 ; t#u32 Card_IDbyte3 : 8 ; } card_id_408 ; struct { t#u32 Card_IDbyte2 : 8 ; t#u32 Card_IDbyte1 : 8 ; } card_id_40c ; struct { t#u32 MAC1 : 8 ; t#u32 MAC2 : 8 ; t#u32 MAC3 : 8 ; t#u32 MAC6 : 8 ; } mac_address_418 ; struct { t#u32 MAC7 : 8 ; t#u32 MAC8 : 8 ; t#u32 reserved : 16 ; } mac_address_41c ; struct { t#u32 transmitter_data_byte : 8 ; t#u32 ReceiveDataReady : 1 ; t#u32 ReceiveByteFrameError : 1 ; t#u32 txbuffempty : 1 ; t#u32 reserved : 21 ; } ci_600 ; struct { t#u32 pi_d : 8 ; t#u32 pi_ha : 20 ; t#u32 pi_rw : 1 ; t#u32 pi_component_reg : 3 ; } pi_604 ; struct { t#u32 serialReset : 1 ; t#u32 oncecycle_read : 1 ; t#u32 Timer_Read_req : 1 ; t#u32 Timer_Load_req : 1 ; t#u32 timer_data : 7 ; t#u32 unused : 1 ; t#u32 Timer_addr : 5 ; t#u32 reserved : 3 ; t#u32 pcmcia_a_mod_pwr_n : 1 ; t#u32 pcmcia_b_mod_pwr_n : 1 ; t#u32 config_Done_stat : 1 ; t#u32 config_Init_stat : 1 ; t#u32 config_Prog_n : 1 ; t#u32 config_wr_n : 1 ; t#u32 config_cs_n : 1 ; t#u32 config_cclk : 1 ; t#u32 pi_CiMax_IRQ_n : 1 ; t#u32 pi_timeout_status : 1 ; t#u32 pi_wait_n : 1 ; t#u32 pi_busy_n : 1 ; } pi_608 ; struct { t#u32 PID : 13 ; t#u32 key_enable : 1 ; t#u32 key_code : 2 ; t#u32 key_array_col : 3 ; t#u32 key_array_row : 5 ; t#u32 dvb_en : 1 ; t#u32 rw_flag : 1 ; t#u32 reserved : 6 ; } dvb_reg_60c ; struct { t#u32 sram_addr : 15 ; t#u32 sram_rw : 1 ; t#u32 sram_data : 8 ; t#u32 sc_xfer_bit : 1 ; t#u32 reserved1 : 3 ; t#u32 oe_pin_reg : 1 ; t#u32 ce_pin_reg : 1 ; t#u32 reserved2 : 1 ; t#u32 start_sram_ibi : 1 ; } sram_ctrl_reg_700 ; struct { t#u32 net_addr_read : 16 ; t#u32 net_addr_write : 16 ; } net_buf_reg_704 ; struct { t#u32 cai_read : 11 ; t#u32 reserved1 : 5 ; t#u32 cai_write : 11 ; t#u32 reserved2 : 6 ; t#u32 cai_cnt : 4 ; } cai_buf_reg_708 ; struct { t#u32 cao_read : 11 ; t#u32 reserved1 : 5 ; t#u32 cap_write : 11 ; t#u32 reserved2 : 6 ; t#u32 cao_cnt : 4 ; } cao_buf_reg_70c ; struct { t#u32 media_read : 11 ; t#u32 reserved1 : 5 ; t#u32 media_write : 11 ; t#u32 reserved2 : 6 ; t#u32 media_cnt : 4 ; } media_buf_reg_710 ; struct { t#u32 NET_Dest : 2 ; t#u32 CAI_Dest : 2 ; t#u32 CAO_Dest : 2 ; t#u32 MEDIA_Dest : 2 ; t#u32 net_ovflow_error : 1 ; t#u32 media_ovflow_error : 1 ; t#u32 cai_ovflow_error : 1 ; t#u32 cao_ovflow_error : 1 ; t#u32 ctrl_usb_wan : 1 ; t#u32 ctrl_sramdma : 1 ; t#u32 ctrl_maximumfill : 1 ; t#u32 reserved : 17 ; } sram_dest_reg_714 ; struct { t#u32 net_cnt : 12 ; t#u32 reserved1 : 4 ; t#u32 net_addr_read : 1 ; t#u32 reserved2 : 3 ; t#u32 net_addr_write : 1 ; t#u32 reserved3 : 11 ; } net_buf_reg_718 ; struct { t#u32 wan_speed_sig : 2 ; t#u32 reserved1 : 6 ; t#u32 wan_wait_state : 8 ; t#u32 sram_chip : 2 ; t#u32 sram_memmap : 2 ; t#u32 reserved2 : 4 ; t#u32 wan_pkt_frame : 4 ; t#u32 reserved3 : 4 ; } wan_ctrl_reg_71c ; } flexcop_ibi_value 
t#flexcop_ibi_register typedef enum { dma1_000 = 0x000 , dma1_004 = 0x004 , dma1_008 = 0x008 , dma1_00c = 0x00c , dma2_010 = 0x010 , dma2_014 = 0x014 , dma2_018 = 0x018 , dma2_01c = 0x01c , tw_sm_c_100 = 0x100 , tw_sm_c_104 = 0x104 , tw_sm_c_108 = 0x108 , tw_sm_c_10c = 0x10c , tw_sm_c_110 = 0x110 , lnb_switch_freq_200 = 0x200 , misc_204 = 0x204 , ctrl_208 = 0x208 , irq_20c = 0x20c , sw_reset_210 = 0x210 , misc_214 = 0x214 , mbox_v8_to_host_218 = 0x218 , mbox_host_to_v8_21c = 0x21c , pid_filter_300 = 0x300 , pid_filter_304 = 0x304 , pid_filter_308 = 0x308 , pid_filter_30c = 0x30c , index_reg_310 = 0x310 , pid_n_reg_314 = 0x314 , mac_low_reg_318 = 0x318 , mac_high_reg_31c = 0x31c , data_tag_400 = 0x400 , card_id_408 = 0x408 , card_id_40c = 0x40c , mac_address_418 = 0x418 , mac_address_41c = 0x41c , ci_600 = 0x600 , pi_604 = 0x604 , pi_608 = 0x608 , dvb_reg_60c = 0x60c , sram_ctrl_reg_700 = 0x700 , net_buf_reg_704 = 0x704 , cai_buf_reg_708 = 0x708 , cao_buf_reg_70c = 0x70c , media_buf_reg_710 = 0x710 , sram_dest_reg_714 = 0x714 , net_buf_reg_718 = 0x718 , wan_ctrl_reg_71c = 0x71c , } flexcop_ibi_register 
t#flexcop_access_op_t typedef enum { FC_WRITE = 0 , FC_READ = 1 , } flexcop_access_op_t 
s#flexcop_device struct flexcop_device { s#device * dev ; int init_state ; int has_32_hw_pid_filter ; t#flexcop_revision_t rev ; t#flexcop_device_type_t dev_type ; t#flexcop_bus_t bus_type ; s#dvb_adapter dvb_adapter ; s#dvb_frontend * fe ; s#dvb_net dvbnet ; s#dvb_demux demux ; s#dmxdev dmxdev ; s#dmx_frontend hw_frontend ; s#dmx_frontend mem_frontend ; int ( * fe_sleep ) ( s#dvb_frontend * ) ; s#flexcop_i2c_adapter fc_i2c_adap [ 3 ] ; s#mutex i2c_mutex ; s#module * owner ; int extra_feedcount ; int feedcount ; int pid_filtering ; int fullts_streaming_state ; t#flexcop_ibi_value ( * read_ibi_reg ) ( s#flexcop_device * , t#flexcop_ibi_register ) ; int ( * write_ibi_reg ) ( s#flexcop_device * , t#flexcop_ibi_register , t#flexcop_ibi_value ) ; int ( * i2c_request ) ( s#flexcop_i2c_adapter * , t#flexcop_access_op_t , t#u8 , t#u8 , t#u8 * , t#u16 ) ; int ( * stream_control ) ( s#flexcop_device * , int ) ; int ( * get_mac_addr ) ( s#flexcop_device * , int ) ; void * bus_specific ; } 
flexcop_pass_dmx_data void flexcop_pass_dmx_data ( s#flexcop_device * , t#u8 * , t#u32 ) 
flexcop_pass_dmx_packets void flexcop_pass_dmx_packets ( s#flexcop_device * , t#u8 * , t#u32 ) 
flexcop_device_kmalloc s#flexcop_device * flexcop_device_kmalloc ( t#size_t ) 
flexcop_device_kfree void flexcop_device_kfree ( s#flexcop_device * ) 
flexcop_device_initialize int flexcop_device_initialize ( s#flexcop_device * ) 
flexcop_device_exit void flexcop_device_exit ( s#flexcop_device * ) 

/* drivers/media/dvb/b2c2/flexcop-dma.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#flexcop_dma struct flexcop_dma { s#pci_dev * pdev ; t#u8 * cpu_addr0 ; t#dma_addr_t dma_addr0 ; t#u8 * cpu_addr1 ; t#dma_addr_t dma_addr1 ; t#u32 size ; } 
flexcop_dma_allocate int flexcop_dma_allocate ( s#pci_dev * , s#flexcop_dma * , t#u32 ) 
flexcop_dma_free void flexcop_dma_free ( s#flexcop_dma * ) 
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
t#flexcop_dma_index_t typedef enum { FC_DMA_1 = 1 , FC_DMA_2 = 2 , } flexcop_dma_index_t 
flexcop_dma_config int flexcop_dma_config ( s#flexcop_device * , s#flexcop_dma * , t#flexcop_dma_index_t ) 
t#flexcop_dma_addr_index_t typedef enum { FC_DMA_SUBADDR_0 = 1 , FC_DMA_SUBADDR_1 = 2 , } flexcop_dma_addr_index_t 
flexcop_dma_xfer_control int flexcop_dma_xfer_control ( s#flexcop_device * , t#flexcop_dma_index_t , t#flexcop_dma_addr_index_t , int ) 
flexcop_dma_control_size_irq int flexcop_dma_control_size_irq ( s#flexcop_device * , t#flexcop_dma_index_t , int ) 
flexcop_dma_control_timer_irq int flexcop_dma_control_timer_irq ( s#flexcop_device * , t#flexcop_dma_index_t , int ) 
flexcop_dma_config_timer int flexcop_dma_config_timer ( s#flexcop_device * , t#flexcop_dma_index_t , t#u8 ) 

/* drivers/media/dvb/b2c2/flexcop-eeprom.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
flexcop_eeprom_check_mac_addr int flexcop_eeprom_check_mac_addr ( s#flexcop_device * , int ) 

/* drivers/media/dvb/b2c2/flexcop-hw-filter.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
flexcop_pid_feed_control int flexcop_pid_feed_control ( s#flexcop_device * , s#dvb_demux_feed * , int ) 

/* drivers/media/dvb/b2c2/flexcop-i2c.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
flexcop_i2c_request int flexcop_i2c_request ( s#flexcop_i2c_adapter * , t#flexcop_access_op_t , t#u8 , t#u8 , t#u8 * , t#u16 ) 

/* drivers/media/dvb/b2c2/flexcop-misc.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
flexcop_dump_reg void flexcop_dump_reg ( s#flexcop_device * , t#flexcop_ibi_register , int ) 

/* drivers/media/dvb/b2c2/flexcop-sram.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
t#flexcop_sram_dest_t typedef enum { FC_SRAM_DEST_NET = 1 , FC_SRAM_DEST_CAI = 2 , FC_SRAM_DEST_CAO = 4 , FC_SRAM_DEST_MEDIA = 8 } flexcop_sram_dest_t 
t#flexcop_sram_dest_target_t typedef enum { FC_SRAM_DEST_TARGET_WAN_USB = 0 , FC_SRAM_DEST_TARGET_DMA1 = 1 , FC_SRAM_DEST_TARGET_DMA2 = 2 , FC_SRAM_DEST_TARGET_FC3_CA = 3 } flexcop_sram_dest_target_t 
flexcop_sram_set_dest int flexcop_sram_set_dest ( s#flexcop_device * , t#flexcop_sram_dest_t , t#flexcop_sram_dest_target_t ) 
t#flexcop_wan_speed_t typedef enum { FC_WAN_SPEED_4MBITS = 0 , FC_WAN_SPEED_8MBITS = 1 , FC_WAN_SPEED_12MBITS = 2 , FC_WAN_SPEED_16MBITS = 3 , } flexcop_wan_speed_t 
flexcop_wan_set_speed void flexcop_wan_set_speed ( s#flexcop_device * , t#flexcop_wan_speed_t ) 
flexcop_sram_ctrl void flexcop_sram_ctrl ( s#flexcop_device * , int , int , int ) 

/* drivers/media/dvb/bt8xx/bt878.o */
bt878_num extern int bt878_num 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#bt878 struct bt878 { s#mutex gpio_lock ; unsigned int nr ; unsigned int bttv_nr ; s#i2c_adapter * adapter ; s#pci_dev * dev ; unsigned int id ; unsigned int TS_Size ; unsigned char revision ; unsigned int irq ; unsigned long bt878_adr ; volatile void * bt878_mem ; volatile t#u32 finished_block ; volatile t#u32 last_block ; t#u32 block_count ; t#u32 block_bytes ; t#u32 line_bytes ; t#u32 line_count ; t#u32 buf_size ; t#u8 * buf_cpu ; t#dma_addr_t buf_dma ; t#u32 risc_size ; t#__le32 * risc_cpu ; t#dma_addr_t risc_dma ; t#u32 risc_pos ; s#tasklet_struct tasklet ; int shutdown ; } 
bt878 extern s#bt878 bt878 [ 4 ] 
bt878_start void bt878_start ( s#bt878 * , t#u32 , t#u32 , t#u32 ) 
bt878_stop void bt878_stop ( s#bt878 * ) 
s#dst_gpio_enable struct dst_gpio_enable { t#u32 mask ; t#u32 enable ; } 
s#dst_gpio_output struct dst_gpio_output { t#u32 mask ; t#u32 highvals ; } 
s#dst_gpio_read struct dst_gpio_read { unsigned long value ; } 
u#dst_gpio_packet union dst_gpio_packet { s#dst_gpio_enable enb ; s#dst_gpio_output outp ; s#dst_gpio_read rd ; int psize ; } 
bt878_device_control int bt878_device_control ( s#bt878 * , unsigned int , u#dst_gpio_packet * ) 

/* drivers/media/dvb/bt8xx/dst.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#dst_config struct dst_config { t#u8 demod_address ; } 
s#dst_state struct dst_state { s#i2c_adapter * i2c ; s#bt878 * bt ; const s#dst_config * config ; s#dvb_frontend frontend ; t#u8 tx_tuna [ 10 ] ; t#u8 rx_tuna [ 10 ] ; t#u8 rxbuffer [ 10 ] ; t#u8 diseq_flags ; t#u8 dst_type ; t#u32 type_flags ; t#u32 frequency ; t#fe_spectral_inversion_t inversion ; t#u32 symbol_rate ; t#fe_code_rate_t fec ; t#fe_sec_voltage_t voltage ; t#fe_sec_tone_mode_t tone ; t#u32 decode_freq ; t#u8 decode_lock ; t#u16 decode_strength ; t#u16 decode_snr ; unsigned long cur_jiff ; t#u8 k22 ; t#fe_bandwidth_t bandwidth ; t#u32 dst_hw_cap ; t#u8 dst_fw_version ; t#fe_sec_mini_cmd_t minicmd ; t#fe_modulation_t modulation ; t#u8 messages [ 256 ] ; t#u8 mac_address [ 8 ] ; t#u8 fw_version [ 8 ] ; t#u8 card_info [ 8 ] ; t#u8 vendor [ 8 ] ; t#u8 board_info [ 8 ] ; t#u32 tuner_type ; char * tuner_name ; s#mutex dst_mutex ; t#u8 fw_name [ 8 ] ; s#dvb_device * dst_ca ; } 
rdc_reset_state int rdc_reset_state ( s#dst_state * ) 
dst_pio_disable int dst_pio_disable ( s#dst_state * ) 
dst_wait_dst_ready int dst_wait_dst_ready ( s#dst_state * , t#u8 ) 
dst_error_recovery int dst_error_recovery ( s#dst_state * ) 
dst_error_bailout int dst_error_bailout ( s#dst_state * ) 
dst_comm_init int dst_comm_init ( s#dst_state * ) 
write_dst int write_dst ( s#dst_state * , t#u8 * , t#u8 ) 
read_dst int read_dst ( s#dst_state * , t#u8 * , t#u8 ) 
dst_check_sum t#u8 dst_check_sum ( t#u8 * , t#u32 ) 
dst_attach s#dst_state * dst_attach ( s#dst_state * , s#dvb_adapter * ) 

/* drivers/media/dvb/bt8xx/dst_ca.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
dst_ca_attach s#dvb_device * dst_ca_attach ( s#dst_state * , s#dvb_adapter * ) 

/* drivers/media/dvb/dvb-core/dmxdev.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##kstatfs
s##seq_file
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device
dvb_dmxdev_init int dvb_dmxdev_init ( s#dmxdev * , s#dvb_adapter * ) 
dvb_dmxdev_release void dvb_dmxdev_release ( s#dmxdev * ) 

/* drivers/media/dvb/dvb-core/dvb_ca_en50221.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#dvb_ca_en50221 struct dvb_ca_en50221 { s#module * owner ; int ( * read_attribute_mem ) ( s#dvb_ca_en50221 * , int , int ) ; int ( * write_attribute_mem ) ( s#dvb_ca_en50221 * , int , int , t#u8 ) ; int ( * read_cam_control ) ( s#dvb_ca_en50221 * , int , t#u8 ) ; int ( * write_cam_control ) ( s#dvb_ca_en50221 * , int , t#u8 , t#u8 ) ; int ( * slot_reset ) ( s#dvb_ca_en50221 * , int ) ; int ( * slot_shutdown ) ( s#dvb_ca_en50221 * , int ) ; int ( * slot_ts_enable ) ( s#dvb_ca_en50221 * , int ) ; int ( * poll_slot_status ) ( s#dvb_ca_en50221 * , int , int ) ; void * data ; void * private ; } 
dvb_ca_en50221_camchange_irq void dvb_ca_en50221_camchange_irq ( s#dvb_ca_en50221 * , int , int ) 
dvb_ca_en50221_camready_irq void dvb_ca_en50221_camready_irq ( s#dvb_ca_en50221 * , int ) 
dvb_ca_en50221_frda_irq void dvb_ca_en50221_frda_irq ( s#dvb_ca_en50221 * , int ) 
s##device
dvb_ca_en50221_init extern int dvb_ca_en50221_init ( s#dvb_adapter * , s#dvb_ca_en50221 * , int , int ) 
dvb_ca_en50221_release extern void dvb_ca_en50221_release ( s#dvb_ca_en50221 * ) 

/* drivers/media/dvb/dvb-core/dvb_demux.o */
s##tvec_base
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
dvb_dmx_swfilter_packets void dvb_dmx_swfilter_packets ( s#dvb_demux * , const t#u8 * , t#size_t ) 
dvb_dmx_swfilter void dvb_dmx_swfilter ( s#dvb_demux * , const t#u8 * , t#size_t ) 
dvb_dmx_swfilter_204 void dvb_dmx_swfilter_204 ( s#dvb_demux * , const t#u8 * , t#size_t ) 
dvb_dmx_init int dvb_dmx_init ( s#dvb_demux * ) 
dvb_dmx_release void dvb_dmx_release ( s#dvb_demux * ) 

/* drivers/media/dvb/dvb-core/dvb_filter.o */
s#dvb_audio_info struct dvb_audio_info { int layer ; t#u32 bit_rate ; t#u32 frequency ; t#u32 mode ; t#u32 mode_extension ; t#u32 emphasis ; t#u32 framesize ; t#u32 off ; } 
dvb_filter_get_ac3info int dvb_filter_get_ac3info ( t#u8 * , int , s#dvb_audio_info * , int ) 
t#dvb_filter_pes2ts_cb_t typedef int ( dvb_filter_pes2ts_cb_t ) ( void * , unsigned char * ) 
s#dvb_filter_pes2ts struct dvb_filter_pes2ts { unsigned char buf [ 188 ] ; unsigned char cc ; t#dvb_filter_pes2ts_cb_t * cb ; void * priv ; } 
dvb_filter_pes2ts_init void dvb_filter_pes2ts_init ( s#dvb_filter_pes2ts * , unsigned short , t#dvb_filter_pes2ts_cb_t * , void * ) 
dvb_filter_pes2ts int dvb_filter_pes2ts ( s#dvb_filter_pes2ts * , unsigned char * , int , int ) 

/* drivers/media/dvb/dvb-core/dvb_frontend.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
dvb_frontend_reinitialise extern void dvb_frontend_reinitialise ( s#dvb_frontend * ) 
timeval_usec_diff extern t#s32 timeval_usec_diff ( s#timeval , s#timeval ) 
dvb_frontend_sleep_until extern void dvb_frontend_sleep_until ( s#timeval * , t#u32 ) 
dvb_register_frontend extern int dvb_register_frontend ( s#dvb_adapter * , s#dvb_frontend * ) 
dvb_unregister_frontend extern int dvb_unregister_frontend ( s#dvb_frontend * ) 
dvb_frontend_detach extern void dvb_frontend_detach ( s#dvb_frontend * ) 

/* drivers/media/dvb/dvb-core/dvb_math.o */
intlog2 extern unsigned int intlog2 ( t#u32 ) 
intlog10 extern unsigned int intlog10 ( t#u32 ) 

/* drivers/media/dvb/dvb-core/dvb_net.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
dvb_net_release void dvb_net_release ( s#dvb_net * ) 
dvb_net_init int dvb_net_init ( s#dvb_adapter * , s#dvb_net * , s#dmx_demux * ) 

/* drivers/media/dvb/dvb-core/dvb_ringbuffer.o */
dvb_ringbuffer_init extern void dvb_ringbuffer_init ( s#dvb_ringbuffer * , void * , t#size_t ) 
dvb_ringbuffer_empty extern int dvb_ringbuffer_empty ( s#dvb_ringbuffer * ) 
dvb_ringbuffer_free extern t#ssize_t dvb_ringbuffer_free ( s#dvb_ringbuffer * ) 
dvb_ringbuffer_avail extern t#ssize_t dvb_ringbuffer_avail ( s#dvb_ringbuffer * ) 
dvb_ringbuffer_flush_spinlock_wakeup extern void dvb_ringbuffer_flush_spinlock_wakeup ( s#dvb_ringbuffer * ) 
dvb_ringbuffer_read_user extern t#ssize_t dvb_ringbuffer_read_user ( s#dvb_ringbuffer * , t#u8 * , t#size_t ) 
dvb_ringbuffer_read extern void dvb_ringbuffer_read ( s#dvb_ringbuffer * , t#u8 * , t#size_t ) 
dvb_ringbuffer_write extern t#ssize_t dvb_ringbuffer_write ( s#dvb_ringbuffer * , const t#u8 * , t#size_t ) 

/* drivers/media/dvb/dvb-core/dvbdev.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##posix_acl
dvb_generic_open extern int dvb_generic_open ( s#inode * , s#file * ) 
dvb_generic_release extern int dvb_generic_release ( s#inode * , s#file * ) 
dvb_generic_ioctl extern int dvb_generic_ioctl ( s#inode * , s#file * , unsigned int , unsigned long ) 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
dvb_register_device extern int dvb_register_device ( s#dvb_adapter * , s#dvb_device * * , const s#dvb_device * , void * , int ) 
dvb_unregister_device extern void dvb_unregister_device ( s#dvb_device * ) 
dvb_register_adapter extern int dvb_register_adapter ( s#dvb_adapter * , const char * , s#module * , s#device * , short * ) 
dvb_unregister_adapter extern int dvb_unregister_adapter ( s#dvb_adapter * ) 

/* drivers/media/dvb/dvb-usb/af9005-remote.o */
s#dvb_usb_rc_key struct dvb_usb_rc_key { t#u16 scan ; t#u32 event ; } 
af9005_rc_keys extern s#dvb_usb_rc_key af9005_rc_keys [ ] 
af9005_rc_keys_size extern int af9005_rc_keys_size 
s##usb_tt
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##mon_bus
s##ep_device
s##wusb_dev
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s#usb_data_stream_properties struct usb_data_stream_properties { int type ; int count ; int endpoint ; union { struct { int buffersize ; } bulk ; struct { int framesperurb ; int framesize ; int interval ; } isoc ; } u ; } 
s#usb_data_stream struct usb_data_stream { s#usb_device * udev ; s#usb_data_stream_properties props ; int state ; void ( * complete ) ( s#usb_data_stream * , t#u8 * , t#size_t ) ; s#urb * urb_list [ 10 ] ; int buf_num ; unsigned long buf_size ; t#u8 * buf_list [ 10 ] ; t#dma_addr_t dma_addr [ 10 ] ; int urbs_initialized ; int urbs_submitted ; void * user_priv ; } 
s#dvb_usb_adapter struct dvb_usb_adapter { s#dvb_usb_device * dev ; s#dvb_usb_adapter_properties props ; int state ; t#u8 id ; int feedcount ; int pid_filtering ; s#dvb_adapter dvb_adap ; s#dmxdev dmxdev ; s#dvb_demux demux ; s#dvb_net dvb_net ; s#dvb_frontend * fe ; int max_feed_count ; int ( * fe_init ) ( s#dvb_frontend * ) ; int ( * fe_sleep ) ( s#dvb_frontend * ) ; s#usb_data_stream stream ; void * priv ; } 
s#dvb_usb_adapter_properties struct dvb_usb_adapter_properties { int caps ; int pid_filter_count ; int ( * streaming_ctrl ) ( s#dvb_usb_adapter * , int ) ; int ( * pid_filter_ctrl ) ( s#dvb_usb_adapter * , int ) ; int ( * pid_filter ) ( s#dvb_usb_adapter * , int , t#u16 , int ) ; int ( * frontend_attach ) ( s#dvb_usb_adapter * ) ; int ( * tuner_attach ) ( s#dvb_usb_adapter * ) ; s#usb_data_stream_properties stream ; int size_of_priv ; } 
s#usb_device_id struct usb_device_id { t#__u16 match_flags ; t#__u16 idVendor ; t#__u16 idProduct ; t#__u16 bcdDevice_lo ; t#__u16 bcdDevice_hi ; t#__u8 bDeviceClass ; t#__u8 bDeviceSubClass ; t#__u8 bDeviceProtocol ; t#__u8 bInterfaceClass ; t#__u8 bInterfaceSubClass ; t#__u8 bInterfaceProtocol ; t#kernel_ulong_t driver_info ; } 
s#dvb_usb_device_description struct dvb_usb_device_description { const char * name ; s#usb_device_id * cold_ids [ 15 ] ; s#usb_device_id * warm_ids [ 15 ] ; } 
s#dvb_usb_device_properties struct dvb_usb_device_properties { int caps ; int usb_ctrl ; int ( * download_firmware ) ( s#usb_device * , const s#firmware * ) ; const char * firmware ; int no_reconnect ; int size_of_priv ; int num_adapters ; s#dvb_usb_adapter_properties adapter [ 2 ] ; int ( * power_ctrl ) ( s#dvb_usb_device * , int ) ; int ( * read_mac_address ) ( s#dvb_usb_device * , t#u8 [ ] ) ; int ( * identify_state ) ( s#usb_device * , s#dvb_usb_device_properties * , s#dvb_usb_device_description * * , int * ) ; s#dvb_usb_rc_key * rc_key_map ; int rc_key_map_size ; int ( * rc_query ) ( s#dvb_usb_device * , t#u32 * , int * ) ; int rc_interval ; s#i2c_algorithm * i2c_algo ; int generic_bulk_ctrl_endpoint ; int num_device_descs ; s#dvb_usb_device_description devices [ 12 ] ; } 
s#dvb_usb_device struct dvb_usb_device { s#dvb_usb_device_properties props ; s#dvb_usb_device_description * desc ; s#usb_device * udev ; int state ; int powered ; s#mutex usb_mutex ; s#mutex i2c_mutex ; s#i2c_adapter i2c_adap ; int num_adapters_initialized ; s#dvb_usb_adapter adapter [ 2 ] ; s#input_dev * rc_input_dev ; char rc_phys [ 64 ] ; s#delayed_work rc_query_work ; t#u32 last_event ; int last_state ; s#module * owner ; void * priv ; } 
af9005_rc_decode extern int af9005_rc_decode ( s#dvb_usb_device * , t#u8 * , int , t#u32 * , int * ) 

/* drivers/media/dvb/dvb-usb/dibusb-common.o */
s##usb_tt
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##mon_bus
s##ep_device
s##wusb_dev
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
dibusb_streaming_ctrl extern int dibusb_streaming_ctrl ( s#dvb_usb_adapter * , int ) 
dibusb_pid_filter extern int dibusb_pid_filter ( s#dvb_usb_adapter * , int , t#u16 , int ) 
dibusb_pid_filter_ctrl extern int dibusb_pid_filter_ctrl ( s#dvb_usb_adapter * , int ) 
dibusb_power_ctrl extern int dibusb_power_ctrl ( s#dvb_usb_device * , int ) 
dibusb2_0_streaming_ctrl extern int dibusb2_0_streaming_ctrl ( s#dvb_usb_adapter * , int ) 
dibusb2_0_power_ctrl extern int dibusb2_0_power_ctrl ( s#dvb_usb_device * , int ) 
dibusb_i2c_algo extern s#i2c_algorithm dibusb_i2c_algo 
dibusb_read_eeprom_byte extern int dibusb_read_eeprom_byte ( s#dvb_usb_device * , t#u8 , t#u8 * ) 
dibusb_dib3000mc_frontend_attach extern int dibusb_dib3000mc_frontend_attach ( s#dvb_usb_adapter * ) 
dibusb_dib3000mc_tuner_attach extern int dibusb_dib3000mc_tuner_attach ( s#dvb_usb_adapter * ) 
dibusb_rc_keys extern s#dvb_usb_rc_key dibusb_rc_keys [ ] 
dibusb_rc_query extern int dibusb_rc_query ( s#dvb_usb_device * , t#u32 * , int * ) 

/* drivers/media/dvb/dvb-usb/dvb-usb-firmware.o */
s##usb_tt
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##mon_bus
s##ep_device
s##wusb_dev
usb_cypress_load_firmware extern int usb_cypress_load_firmware ( s#usb_device * , const s#firmware * , int ) 
s#hexline struct hexline { t#u8 len ; t#u32 addr ; t#u8 type ; t#u8 data [ 255 ] ; t#u8 chk ; } 
dvb_usb_get_hexline extern int dvb_usb_get_hexline ( const s#firmware * , s#hexline * , int * ) 

/* drivers/media/dvb/dvb-usb/dvb-usb-init.o */
s##ep_device
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##usb_tt
s##mon_bus
s##wusb_dev
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
dvb_usb_device_init extern int dvb_usb_device_init ( s#usb_interface * , s#dvb_usb_device_properties * , s#module * , s#dvb_usb_device * * , short * ) 
dvb_usb_device_exit extern void dvb_usb_device_exit ( s#usb_interface * ) 

/* drivers/media/dvb/dvb-usb/dvb-usb-remote.o */
s##usb_tt
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##mon_bus
s##ep_device
s##wusb_dev
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
dvb_usb_nec_rc_key_to_event extern int dvb_usb_nec_rc_key_to_event ( s#dvb_usb_device * , t#u8 [ ] , t#u32 * , int * ) 

/* drivers/media/dvb/dvb-usb/dvb-usb-urb.o */
s##usb_tt
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##mon_bus
s##ep_device
s##wusb_dev
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
dvb_usb_generic_rw extern int dvb_usb_generic_rw ( s#dvb_usb_device * , t#u8 * , t#u16 , t#u8 * , t#u16 , int ) 
dvb_usb_generic_write extern int dvb_usb_generic_write ( s#dvb_usb_device * , t#u8 * , t#u16 ) 

/* drivers/media/dvb/frontends/af9013.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#af9013_config struct af9013_config { t#u8 demod_address ; t#u32 adc_clock ; t#u8 tuner ; t#u16 tuner_if ; t#u8 output_mode : 2 ; t#u8 rf_spec_inv : 1 ; t#u8 api_version [ 4 ] ; t#u8 gpio [ 4 ] ; } 
af9013_attach extern s#dvb_frontend * af9013_attach ( const s#af9013_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/au8522_dig.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#au8522_led_config struct au8522_led_config { t#u16 vsb8_strong ; t#u16 qam64_strong ; t#u16 qam256_strong ; t#u16 gpio_output ; t#u16 gpio_output_enable ; t#u16 gpio_output_disable ; t#u16 gpio_leds ; t#u8 * led_states ; unsigned int num_led_states ; } 
e#au8522_if_freq enum au8522_if_freq { AU8522_IF_6MHZ = 0 , AU8522_IF_4MHZ , AU8522_IF_3_25MHZ , } 
s#au8522_config struct au8522_config { t#u8 demod_address ; t#u8 status_mode ; s#au8522_led_config * led_cfg ; e#au8522_if_freq vsb_if ; e#au8522_if_freq qam_if ; } 
au8522_attach extern s#dvb_frontend * au8522_attach ( const s#au8522_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/bcm3510.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#bcm3510_config struct bcm3510_config { t#u8 demod_address ; int ( * request_firmware ) ( s#dvb_frontend * , const s#firmware * * , char * ) ; } 
bcm3510_attach extern s#dvb_frontend * bcm3510_attach ( const s#bcm3510_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/cx22700.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#cx22700_config struct cx22700_config { t#u8 demod_address ; } 
cx22700_attach extern s#dvb_frontend * cx22700_attach ( const s#cx22700_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/cx22702.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#cx22702_config struct cx22702_config { t#u8 demod_address ; t#u8 output_mode ; } 
cx22702_attach extern s#dvb_frontend * cx22702_attach ( const s#cx22702_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/cx24110.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#cx24110_config struct cx24110_config { t#u8 demod_address ; } 
cx24110_attach extern s#dvb_frontend * cx24110_attach ( const s#cx24110_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/cx24113.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
cx24113_agc_callback extern void cx24113_agc_callback ( s#dvb_frontend * ) 
s#cx24113_config struct cx24113_config { t#u8 i2c_addr ; t#u32 xtal_khz ; } 
cx24113_attach extern s#dvb_frontend * cx24113_attach ( s#dvb_frontend * , const s#cx24113_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/cx24116.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#cx24116_config struct cx24116_config { t#u8 demod_address ; int ( * set_ts_params ) ( s#dvb_frontend * , int ) ; int ( * reset_device ) ( s#dvb_frontend * ) ; t#u8 mpg_clk_pos_pol : 0x02 ; } 
cx24116_attach extern s#dvb_frontend * cx24116_attach ( const s#cx24116_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/cx24123.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
cx24123_get_tuner_i2c_adapter extern s#i2c_adapter * cx24123_get_tuner_i2c_adapter ( s#dvb_frontend * ) 
s#cx24123_config struct cx24123_config { t#u8 demod_address ; int ( * set_ts_params ) ( s#dvb_frontend * , int ) ; int lnb_polarity ; t#u8 dont_use_pll ; void ( * agc_callback ) ( s#dvb_frontend * ) ; } 
cx24123_attach extern s#dvb_frontend * cx24123_attach ( const s#cx24123_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/dib0070.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
dib0070_ctrl_agc_filter extern void dib0070_ctrl_agc_filter ( s#dvb_frontend * , t#u8 ) 
dib0070_wbd_offset extern t#u16 dib0070_wbd_offset ( s#dvb_frontend * ) 
s#dib0070_wbd_gain_cfg struct dib0070_wbd_gain_cfg { t#u16 freq ; t#u16 wbd_gain_val ; } 
s#dib0070_config struct dib0070_config { t#u8 i2c_address ; int ( * reset ) ( s#dvb_frontend * , int ) ; int ( * sleep ) ( s#dvb_frontend * , int ) ; int freq_offset_khz_uhf ; int freq_offset_khz_vhf ; t#u8 osc_buffer_state ; t#u32 clock_khz ; t#u8 clock_pad_drive ; t#u8 invert_iq ; t#u8 force_crystal_mode ; t#u8 flip_chip ; t#u8 enable_third_order_filter ; t#u8 charge_pump ; const s#dib0070_wbd_gain_cfg * wbd_gain ; t#u8 vga_filter ; } 
dib0070_attach extern s#dvb_frontend * dib0070_attach ( s#dvb_frontend * , s#i2c_adapter * , s#dib0070_config * ) 

/* drivers/media/dvb/frontends/dib3000mb.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#dib3000_config struct dib3000_config { t#u8 demod_address ; } 
s#dib_fe_xfer_ops struct dib_fe_xfer_ops { int ( * pid_parse ) ( s#dvb_frontend * , int ) ; int ( * fifo_ctrl ) ( s#dvb_frontend * , int ) ; int ( * pid_ctrl ) ( s#dvb_frontend * , int , int , int ) ; int ( * tuner_pass_ctrl ) ( s#dvb_frontend * , int , t#u8 ) ; } 
dib3000mb_attach extern s#dvb_frontend * dib3000mb_attach ( const s#dib3000_config * , s#i2c_adapter * , s#dib_fe_xfer_ops * ) 

/* drivers/media/dvb/frontends/dib3000mc.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
dib3000mc_get_tuner_i2c_master extern s#i2c_adapter * dib3000mc_get_tuner_i2c_master ( s#dvb_frontend * , int ) 
dib3000mc_pid_control extern int dib3000mc_pid_control ( s#dvb_frontend * , int , int , int ) 
dib3000mc_pid_parse extern int dib3000mc_pid_parse ( s#dvb_frontend * , int ) 
s#dibx000_agc_config struct dibx000_agc_config { t#u8 band_caps ; t#u16 setup ; t#u16 inv_gain ; t#u16 time_stabiliz ; t#u8 alpha_level ; t#u16 thlock ; t#u8 wbd_inv ; t#u16 wbd_ref ; t#u8 wbd_sel ; t#u8 wbd_alpha ; t#u16 agc1_max ; t#u16 agc1_min ; t#u16 agc2_max ; t#u16 agc2_min ; t#u8 agc1_pt1 ; t#u8 agc1_pt2 ; t#u8 agc1_pt3 ; t#u8 agc1_slope1 ; t#u8 agc1_slope2 ; t#u8 agc2_pt1 ; t#u8 agc2_pt2 ; t#u8 agc2_slope1 ; t#u8 agc2_slope2 ; t#u8 alpha_mant ; t#u8 alpha_exp ; t#u8 beta_mant ; t#u8 beta_exp ; t#u8 perform_agc_softsplit ; struct { t#u16 min ; t#u16 max ; t#u16 min_thres ; t#u16 max_thres ; } split ; } 
s#dib3000mc_config struct dib3000mc_config { s#dibx000_agc_config * agc ; t#u8 phase_noise_mode ; t#u8 impulse_noise_mode ; t#u8 pwm3_inversion ; t#u8 use_pwm3 ; t#u16 pwm3_value ; t#u16 max_time ; t#u16 ln_adc_level ; t#u8 agc_command1 : 1 ; t#u8 agc_command2 : 1 ; t#u8 mobile_mode ; t#u8 output_mpeg2_in_188_bytes ; } 
dib3000mc_set_config extern void dib3000mc_set_config ( s#dvb_frontend * , s#dib3000mc_config * ) 
dib3000mc_i2c_enumeration extern int dib3000mc_i2c_enumeration ( s#i2c_adapter * , int , t#u8 , s#dib3000mc_config [ ] ) 
dib3000mc_attach extern s#dvb_frontend * dib3000mc_attach ( s#i2c_adapter * , t#u8 , s#dib3000mc_config * ) 

/* drivers/media/dvb/frontends/dib7000m.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
e#dibx000_i2c_interface enum dibx000_i2c_interface { DIBX000_I2C_INTERFACE_TUNER = 0 , DIBX000_I2C_INTERFACE_GPIO_1_2 = 1 , DIBX000_I2C_INTERFACE_GPIO_3_4 = 2 } 
dib7000m_get_i2c_master extern s#i2c_adapter * dib7000m_get_i2c_master ( s#dvb_frontend * , e#dibx000_i2c_interface , int ) 
s#dibx000_bandwidth_config struct dibx000_bandwidth_config { t#u32 internal ; t#u32 sampling ; t#u8 pll_prediv ; t#u8 pll_ratio ; t#u8 pll_range ; t#u8 pll_reset ; t#u8 pll_bypass ; t#u8 enable_refdiv ; t#u8 bypclk_div ; t#u8 IO_CLK_en_core ; t#u8 ADClkSrc ; t#u8 modulo ; t#u16 sad_cfg ; t#u32 ifreq ; t#u32 timf ; t#u32 xtal_hz ; } 
s#dib7000m_config struct dib7000m_config { t#u8 dvbt_mode ; t#u8 output_mpeg2_in_188_bytes ; t#u8 hostbus_diversity ; t#u8 tuner_is_baseband ; t#u8 mobile_mode ; int ( * update_lna ) ( s#dvb_frontend * , t#u16 ) ; t#u8 agc_config_count ; s#dibx000_agc_config * agc ; s#dibx000_bandwidth_config * bw ; t#u16 gpio_dir ; t#u16 gpio_val ; t#u16 gpio_pwm_pos ; t#u16 pwm_freq_div ; t#u8 quartz_direct ; t#u8 input_clk_is_div_2 ; int ( * agc_control ) ( s#dvb_frontend * , t#u8 ) ; } 
dib7000m_attach extern s#dvb_frontend * dib7000m_attach ( s#i2c_adapter * , t#u8 , s#dib7000m_config * ) 

/* drivers/media/dvb/frontends/dib7000p.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
dib7000p_set_wbd_ref extern int dib7000p_set_wbd_ref ( s#dvb_frontend * , t#u16 ) 
dib7000p_set_gpio extern int dib7000p_set_gpio ( s#dvb_frontend * , t#u8 , t#u8 , t#u8 ) 
dib7000pc_detection extern int dib7000pc_detection ( s#i2c_adapter * ) 
dib7000p_get_i2c_master extern s#i2c_adapter * dib7000p_get_i2c_master ( s#dvb_frontend * , e#dibx000_i2c_interface , int ) 
s#dib7000p_config struct dib7000p_config { t#u8 output_mpeg2_in_188_bytes ; t#u8 hostbus_diversity ; t#u8 tuner_is_baseband ; int ( * update_lna ) ( s#dvb_frontend * , t#u16 ) ; t#u8 agc_config_count ; s#dibx000_agc_config * agc ; s#dibx000_bandwidth_config * bw ; t#u16 gpio_dir ; t#u16 gpio_val ; t#u16 gpio_pwm_pos ; t#u16 pwm_freq_div ; t#u8 quartz_direct ; t#u8 spur_protect ; int ( * agc_control ) ( s#dvb_frontend * , t#u8 ) ; t#u8 output_mode ; } 
dib7000p_i2c_enumeration extern int dib7000p_i2c_enumeration ( s#i2c_adapter * , int , t#u8 , s#dib7000p_config [ ] ) 
dib7000p_attach extern s#dvb_frontend * dib7000p_attach ( s#i2c_adapter * , t#u8 , s#dib7000p_config * ) 

/* drivers/media/dvb/frontends/dib8000.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
dib8000_set_wbd_ref extern int dib8000_set_wbd_ref ( s#dvb_frontend * , t#u16 ) 
dib8000_set_gpio extern int dib8000_set_gpio ( s#dvb_frontend * , t#u8 , t#u8 , t#u8 ) 
dib8000_i2c_enumeration extern int dib8000_i2c_enumeration ( s#i2c_adapter * , int , t#u8 , t#u8 ) 
dib8000_get_i2c_master extern s#i2c_adapter * dib8000_get_i2c_master ( s#dvb_frontend * , e#dibx000_i2c_interface , int ) 
s#dib8000_config struct dib8000_config { t#u8 output_mpeg2_in_188_bytes ; t#u8 hostbus_diversity ; t#u8 tuner_is_baseband ; int ( * update_lna ) ( s#dvb_frontend * , t#u16 ) ; t#u8 agc_config_count ; s#dibx000_agc_config * agc ; s#dibx000_bandwidth_config * pll ; t#u16 gpio_dir ; t#u16 gpio_val ; t#u16 gpio_pwm_pos ; t#u16 pwm_freq_div ; void ( * agc_control ) ( s#dvb_frontend * , t#u8 ) ; t#u16 drives ; t#u16 diversity_delay ; t#u8 div_cfg ; t#u8 output_mode ; t#u8 refclksel ; } 
dib8000_attach extern s#dvb_frontend * dib8000_attach ( s#i2c_adapter * , t#u8 , s#dib8000_config * ) 

/* drivers/media/dvb/frontends/dibx000_common.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#dibx000_i2c_master struct dibx000_i2c_master { t#u16 device_rev ; e#dibx000_i2c_interface selected_interface ; s#i2c_adapter gated_tuner_i2c_adap ; s#i2c_adapter * i2c_adap ; t#u8 i2c_addr ; t#u16 base_reg ; } 
dibx000_get_i2c_adapter extern s#i2c_adapter * dibx000_get_i2c_adapter ( s#dibx000_i2c_master * , e#dibx000_i2c_interface , int ) 
dibx000_reset_i2c_master extern void dibx000_reset_i2c_master ( s#dibx000_i2c_master * ) 
dibx000_init_i2c_master extern int dibx000_init_i2c_master ( s#dibx000_i2c_master * , t#u16 , s#i2c_adapter * , t#u8 ) 
dibx000_exit_i2c_master extern void dibx000_exit_i2c_master ( s#dibx000_i2c_master * ) 

/* drivers/media/dvb/frontends/dvb-pll.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
dvb_pll_attach extern s#dvb_frontend * dvb_pll_attach ( s#dvb_frontend * , int , s#i2c_adapter * , unsigned int ) 

/* drivers/media/dvb/frontends/isl6405.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
isl6405_attach extern s#dvb_frontend * isl6405_attach ( s#dvb_frontend * , s#i2c_adapter * , t#u8 , t#u8 , t#u8 ) 

/* drivers/media/dvb/frontends/isl6421.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
isl6421_attach extern s#dvb_frontend * isl6421_attach ( s#dvb_frontend * , s#i2c_adapter * , t#u8 , t#u8 , t#u8 ) 

/* drivers/media/dvb/frontends/itd1000.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#itd1000_config struct itd1000_config { t#u8 i2c_address ; } 
itd1000_attach extern s#dvb_frontend * itd1000_attach ( s#dvb_frontend * , s#i2c_adapter * , s#itd1000_config * ) 

/* drivers/media/dvb/frontends/l64781.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#l64781_config struct l64781_config { t#u8 demod_address ; } 
l64781_attach extern s#dvb_frontend * l64781_attach ( const s#l64781_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/lgdt3305.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
e#lgdt3305_mpeg_mode enum lgdt3305_mpeg_mode { LGDT3305_MPEG_PARALLEL = 0 , LGDT3305_MPEG_SERIAL = 1 , } 
e#lgdt3305_tp_clock_edge enum lgdt3305_tp_clock_edge { LGDT3305_TPCLK_RISING_EDGE = 0 , LGDT3305_TPCLK_FALLING_EDGE = 1 , } 
e#lgdt3305_tp_valid_polarity enum lgdt3305_tp_valid_polarity { LGDT3305_TP_VALID_LOW = 0 , LGDT3305_TP_VALID_HIGH = 1 , } 
s#lgdt3305_config struct lgdt3305_config { t#u8 i2c_addr ; t#u16 qam_if_khz ; t#u16 vsb_if_khz ; t#u16 usref_8vsb ; t#u16 usref_qam64 ; t#u16 usref_qam256 ; int deny_i2c_rptr : 1 ; int spectral_inversion : 1 ; int rf_agc_loop : 1 ; e#lgdt3305_mpeg_mode mpeg_mode ; e#lgdt3305_tp_clock_edge tpclk_edge ; e#lgdt3305_tp_valid_polarity tpvalid_polarity ; } 
lgdt3305_attach extern s#dvb_frontend * lgdt3305_attach ( const s#lgdt3305_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/lgdt330x.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
e#lg_chip_t enum lg_chip_t { UNDEFINED , LGDT3302 , LGDT3303 } 
t#lg_chip_type typedef e#lg_chip_t lg_chip_type 
s#lgdt330x_config struct lgdt330x_config { t#u8 demod_address ; t#lg_chip_type demod_chip ; int serial_mpeg ; int ( * pll_rf_set ) ( s#dvb_frontend * , int ) ; int ( * set_ts_params ) ( s#dvb_frontend * , int ) ; int clock_polarity_flip ; } 
lgdt330x_attach extern s#dvb_frontend * lgdt330x_attach ( const s#lgdt330x_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/lgs8gl5.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#lgs8gl5_config struct lgs8gl5_config { t#u8 demod_address ; } 
lgs8gl5_attach extern s#dvb_frontend * lgs8gl5_attach ( const s#lgs8gl5_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/lgs8gxx.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#lgs8gxx_config struct lgs8gxx_config { t#u8 prod ; t#u8 demod_address ; t#u8 serial_ts ; t#u8 ts_clk_pol ; t#u8 ts_clk_gated ; t#u32 if_clk_freq ; t#u32 if_freq ; t#u8 ext_adc ; t#u8 adc_signed ; t#u8 if_neg_edge ; t#u8 if_neg_center ; t#u8 adc_vpp ; t#u8 tuner_address ; } 
lgs8gxx_attach extern s#dvb_frontend * lgs8gxx_attach ( const s#lgs8gxx_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/lnbp21.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
lnbh24_attach extern s#dvb_frontend * lnbh24_attach ( s#dvb_frontend * , s#i2c_adapter * , t#u8 , t#u8 , t#u8 ) 
lnbp21_attach extern s#dvb_frontend * lnbp21_attach ( s#dvb_frontend * , s#i2c_adapter * , t#u8 , t#u8 ) 

/* drivers/media/dvb/frontends/mt312.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#mt312_config struct mt312_config { t#u8 demod_address ; unsigned int voltage_inverted : 1 ; } 
mt312_attach s#dvb_frontend * mt312_attach ( const s#mt312_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/mt352.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#mt352_config struct mt352_config { t#u8 demod_address ; int adc_clock ; int if2 ; int no_tuner ; int ( * demod_init ) ( s#dvb_frontend * ) ; } 
mt352_attach extern s#dvb_frontend * mt352_attach ( const s#mt352_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/nxt200x.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#nxt200x_config struct nxt200x_config { t#u8 demod_address ; int ( * set_ts_params ) ( s#dvb_frontend * , int ) ; } 
nxt200x_attach extern s#dvb_frontend * nxt200x_attach ( const s#nxt200x_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/nxt6000.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#nxt6000_config struct nxt6000_config { t#u8 demod_address ; t#u8 clock_inversion : 1 ; } 
nxt6000_attach extern s#dvb_frontend * nxt6000_attach ( const s#nxt6000_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/or51132.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#or51132_config struct or51132_config { t#u8 demod_address ; int ( * set_ts_params ) ( s#dvb_frontend * , int ) ; } 
or51132_attach extern s#dvb_frontend * or51132_attach ( const s#or51132_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/or51211.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#or51211_config struct or51211_config { t#u8 demod_address ; int ( * request_firmware ) ( s#dvb_frontend * , const s#firmware * * , char * ) ; void ( * setmode ) ( s#dvb_frontend * , int ) ; void ( * reset ) ( s#dvb_frontend * ) ; void ( * sleep ) ( s#dvb_frontend * ) ; } 
or51211_attach extern s#dvb_frontend * or51211_attach ( const s#or51211_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/s5h1409.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#s5h1409_config struct s5h1409_config { t#u8 demod_address ; t#u8 output_mode ; t#u8 gpio ; t#u16 qam_if ; t#u8 inversion ; t#u8 status_mode ; t#u16 mpeg_timing ; } 
s5h1409_attach extern s#dvb_frontend * s5h1409_attach ( const s#s5h1409_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/s5h1411.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#s5h1411_config struct s5h1411_config { t#u8 output_mode ; t#u8 gpio ; t#u16 mpeg_timing ; t#u16 qam_if ; t#u16 vsb_if ; t#u8 inversion ; t#u8 status_mode ; } 
s5h1411_attach extern s#dvb_frontend * s5h1411_attach ( const s#s5h1411_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/s5h1420.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s5h1420_get_tuner_i2c_adapter extern s#i2c_adapter * s5h1420_get_tuner_i2c_adapter ( s#dvb_frontend * ) 
s#s5h1420_config struct s5h1420_config { t#u8 demod_address ; t#u8 invert : 1 ; t#u8 repeated_start_workaround : 1 ; t#u8 cdclk_polarity : 1 ; t#u8 serial_mpeg : 1 ; } 
s5h1420_attach extern s#dvb_frontend * s5h1420_attach ( const s#s5h1420_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/si21xx.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#si21xx_config struct si21xx_config { t#u8 demod_address ; int min_delay_ms ; } 
si21xx_attach extern s#dvb_frontend * si21xx_attach ( const s#si21xx_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/sp8870.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#sp8870_config struct sp8870_config { t#u8 demod_address ; int ( * request_firmware ) ( s#dvb_frontend * , const s#firmware * * , char * ) ; } 
sp8870_attach extern s#dvb_frontend * sp8870_attach ( const s#sp8870_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/sp887x.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#sp887x_config struct sp887x_config { t#u8 demod_address ; int ( * request_firmware ) ( s#dvb_frontend * , const s#firmware * * , char * ) ; } 
sp887x_attach extern s#dvb_frontend * sp887x_attach ( const s#sp887x_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/stb0899_drv.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#stb0899_s1_reg struct stb0899_s1_reg { t#u16 address ; t#u8 data ; } 
s#stb0899_s2_reg struct stb0899_s2_reg { t#u16 offset ; t#u32 base_address ; t#u32 data ; } 
s#stb0899_postproc struct stb0899_postproc { t#u16 gpio ; t#u8 level ; } 
e#stb0899_inversion enum stb0899_inversion { IQ_SWAP_OFF = 0 , IQ_SWAP_ON , IQ_SWAP_AUTO } 
s#stb0899_config struct stb0899_config { const s#stb0899_s1_reg * init_dev ; const s#stb0899_s2_reg * init_s2_demod ; const s#stb0899_s1_reg * init_s1_demod ; const s#stb0899_s2_reg * init_s2_fec ; const s#stb0899_s1_reg * init_tst ; const s#stb0899_postproc * postproc ; e#stb0899_inversion inversion ; t#u32 xtal_freq ; t#u8 demod_address ; t#u8 ts_output_mode ; t#u8 block_sync_mode ; t#u8 ts_pfbit_toggle ; t#u8 clock_polarity ; t#u8 data_clk_parity ; t#u8 fec_mode ; t#u8 data_output_ctl ; t#u8 data_fifo_mode ; t#u8 out_rate_comp ; t#u8 i2c_repeater ; int lo_clk ; int hi_clk ; t#u32 esno_ave ; t#u32 esno_quant ; t#u32 avframes_coarse ; t#u32 avframes_fine ; t#u32 miss_threshold ; t#u32 uwp_threshold_acq ; t#u32 uwp_threshold_track ; t#u32 uwp_threshold_sof ; t#u32 sof_search_timeout ; t#u32 btr_nco_bits ; t#u32 btr_gain_shift_offset ; t#u32 crl_nco_bits ; t#u32 ldpc_max_iter ; int ( * tuner_set_frequency ) ( s#dvb_frontend * , t#u32 ) ; int ( * tuner_get_frequency ) ( s#dvb_frontend * , t#u32 * ) ; int ( * tuner_set_bandwidth ) ( s#dvb_frontend * , t#u32 ) ; int ( * tuner_get_bandwidth ) ( s#dvb_frontend * , t#u32 * ) ; int ( * tuner_set_rfsiggain ) ( s#dvb_frontend * , t#u32 ) ; } 
stb0899_attach extern s#dvb_frontend * stb0899_attach ( s#stb0899_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/stb6000.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
stb6000_attach extern s#dvb_frontend * stb6000_attach ( s#dvb_frontend * , int , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/stb6100.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#stb6100_config struct stb6100_config { t#u8 tuner_address ; t#u32 refclock ; } 
stb6100_attach extern s#dvb_frontend * stb6100_attach ( s#dvb_frontend * , s#stb6100_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/stv0288.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#stv0288_config struct stv0288_config { t#u8 demod_address ; t#u8 * inittab ; int min_delay_ms ; int ( * set_ts_params ) ( s#dvb_frontend * , int ) ; } 
stv0288_attach extern s#dvb_frontend * stv0288_attach ( const s#stv0288_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/stv0297.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#stv0297_config struct stv0297_config { t#u8 demod_address ; t#u8 * inittab ; t#u8 invert : 1 ; t#u8 stop_during_read : 1 ; } 
stv0297_attach extern s#dvb_frontend * stv0297_attach ( const s#stv0297_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/stv0299.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#stv0299_config struct stv0299_config { t#u8 demod_address ; t#u8 * inittab ; t#u32 mclk ; t#u8 invert : 1 ; t#u8 skip_reinit : 1 ; t#u8 lock_output : 2 ; t#u8 volt13_op0_op1 : 1 ; t#u8 op0_off : 1 ; int min_delay_ms ; int ( * set_symbol_rate ) ( s#dvb_frontend * , t#u32 , t#u32 ) ; int ( * set_ts_params ) ( s#dvb_frontend * , int ) ; } 
stv0299_attach extern s#dvb_frontend * stv0299_attach ( const s#stv0299_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/stv0900_core.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#stv0900_reg struct stv0900_reg { t#u16 addr ; t#u8 val ; } 
s#stv0900_config struct stv0900_config { t#u8 demod_address ; t#u32 xtal ; t#u8 clkmode ; t#u8 diseqc_mode ; t#u8 path1_mode ; t#u8 path2_mode ; s#stv0900_reg * ts_config_regs ; t#u8 tun1_maddress ; t#u8 tun2_maddress ; t#u8 tun1_adc ; t#u8 tun2_adc ; } 
stv0900_attach extern s#dvb_frontend * stv0900_attach ( const s#stv0900_config * , s#i2c_adapter * , int ) 

/* drivers/media/dvb/frontends/stv6110.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#stv6110_config struct stv6110_config { t#u8 i2c_address ; t#u32 mclk ; t#u8 clk_div ; } 
stv6110_attach extern s#dvb_frontend * stv6110_attach ( s#dvb_frontend * , const s#stv6110_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/tda10021.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#tda1002x_config struct tda1002x_config { t#u8 demod_address ; t#u8 invert ; } 
tda10021_attach extern s#dvb_frontend * tda10021_attach ( const s#tda1002x_config * , s#i2c_adapter * , t#u8 ) 

/* drivers/media/dvb/frontends/tda10023.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#tda10023_config struct tda10023_config { t#u8 demod_address ; t#u8 invert ; t#u32 xtal ; t#u8 pll_m ; t#u8 pll_p ; t#u8 pll_n ; t#u8 output_mode ; t#u16 deltaf ; } 
tda10023_attach extern s#dvb_frontend * tda10023_attach ( const s#tda10023_config * , s#i2c_adapter * , t#u8 ) 

/* drivers/media/dvb/frontends/tda10048.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#tda10048_config struct tda10048_config { t#u8 demod_address ; t#u8 output_mode ; t#u8 fwbulkwritelen ; t#u8 inversion ; t#u16 dtv6_if_freq_khz ; t#u16 dtv7_if_freq_khz ; t#u16 dtv8_if_freq_khz ; t#u16 clk_freq_khz ; t#u8 disable_gate_access ; } 
tda10048_attach extern s#dvb_frontend * tda10048_attach ( const s#tda10048_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/tda1004x.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
e#tda10046_tsout enum tda10046_tsout { TDA10046_TS_PARALLEL = 0x00 , TDA10046_TS_SERIAL = 0x01 , } 
e#tda10046_xtal enum tda10046_xtal { TDA10046_XTAL_4M , TDA10046_XTAL_16M , } 
e#tda10046_if enum tda10046_if { TDA10046_FREQ_3617 , TDA10046_FREQ_3613 , TDA10046_FREQ_045 , TDA10046_FREQ_052 , } 
e#tda10046_agc enum tda10046_agc { TDA10046_AGC_DEFAULT , TDA10046_AGC_IFO_AUTO_NEG , TDA10046_AGC_IFO_AUTO_POS , TDA10046_AGC_TDA827X , } 
e#tda10046_gpio enum tda10046_gpio { TDA10046_GPTRI = 0x00 , TDA10046_GP00 = 0x40 , TDA10046_GP01 = 0x42 , TDA10046_GP10 = 0x48 , TDA10046_GP11 = 0x4a , TDA10046_GP00_I = 0x80 , TDA10046_GP01_I = 0x82 , TDA10046_GP10_I = 0x88 , TDA10046_GP11_I = 0x8a , } 
s#tda1004x_config struct tda1004x_config { t#u8 demod_address ; t#u8 invert ; t#u8 invert_oclk ; e#tda10046_tsout ts_mode ; e#tda10046_xtal xtal_freq ; e#tda10046_if if_freq ; e#tda10046_agc agc_config ; e#tda10046_gpio gpio_config ; t#u8 tuner_address ; t#u8 antenna_switch ; t#u8 i2c_gate ; int ( * request_firmware ) ( s#dvb_frontend * , const s#firmware * * , char * ) ; } 
tda10045_attach extern s#dvb_frontend * tda10045_attach ( const s#tda1004x_config * , s#i2c_adapter * ) 
tda10046_attach extern s#dvb_frontend * tda10046_attach ( const s#tda1004x_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/tda10086.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
e#tda10086_xtal enum tda10086_xtal { TDA10086_XTAL_16M , TDA10086_XTAL_4M } 
s#tda10086_config struct tda10086_config { t#u8 demod_address ; t#u8 invert ; t#u8 diseqc_tone ; e#tda10086_xtal xtal_freq ; } 
tda10086_attach extern s#dvb_frontend * tda10086_attach ( const s#tda10086_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/tda8083.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#tda8083_config struct tda8083_config { t#u8 demod_address ; } 
tda8083_attach extern s#dvb_frontend * tda8083_attach ( const s#tda8083_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/tda8261.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
e#tda8261_step enum tda8261_step { TDA8261_STEP_2000 = 0 , TDA8261_STEP_1000 , TDA8261_STEP_500 , TDA8261_STEP_250 , TDA8261_STEP_125 } 
s#tda8261_config struct tda8261_config { t#u8 addr ; e#tda8261_step step_size ; } 
tda8261_attach extern s#dvb_frontend * tda8261_attach ( s#dvb_frontend * , const s#tda8261_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/tda826x.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
tda826x_attach extern s#dvb_frontend * tda826x_attach ( s#dvb_frontend * , int , s#i2c_adapter * , int ) 

/* drivers/media/dvb/frontends/tua6100.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
tua6100_attach extern s#dvb_frontend * tua6100_attach ( s#dvb_frontend * , int , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/ves1820.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#ves1820_config struct ves1820_config { t#u8 demod_address ; t#u32 xin ; t#u8 invert : 1 ; t#u8 selagc : 1 ; } 
ves1820_attach extern s#dvb_frontend * ves1820_attach ( const s#ves1820_config * , s#i2c_adapter * , t#u8 ) 

/* drivers/media/dvb/frontends/ves1x93.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#ves1x93_config struct ves1x93_config { t#u8 demod_address ; t#u32 xin ; t#u8 invert_pwm : 1 ; } 
ves1x93_attach extern s#dvb_frontend * ves1x93_attach ( const s#ves1x93_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/zl10036.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#zl10036_config struct zl10036_config { t#u8 tuner_address ; int rf_loop_enable ; } 
zl10036_attach extern s#dvb_frontend * zl10036_attach ( s#dvb_frontend * , const s#zl10036_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/zl10039.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
zl10039_attach s#dvb_frontend * zl10039_attach ( s#dvb_frontend * , t#u8 , s#i2c_adapter * ) 

/* drivers/media/dvb/frontends/zl10353.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#zl10353_config struct zl10353_config { t#u8 demod_address ; int adc_clock ; int if2 ; int no_tuner ; int parallel_ts ; t#u8 disable_i2c_gate_ctrl : 1 ; t#u8 clock_ctl_1 ; t#u8 pll_0 ; } 
zl10353_attach extern s#dvb_frontend * zl10353_attach ( const s#zl10353_config * , s#i2c_adapter * ) 

/* drivers/media/dvb/siano/sms-cards.o */
e#sms_device_type_st enum sms_device_type_st { SMS_STELLAR = 0 , SMS_NOVA_A0 , SMS_NOVA_B0 , SMS_VEGA , SMS_NUM_OF_DEVICE_TYPES } 
s#sms_board_gpio_cfg struct sms_board_gpio_cfg { int lna_vhf_exist ; int lna_vhf_ctrl ; int lna_uhf_exist ; int lna_uhf_ctrl ; int lna_uhf_d_ctrl ; int lna_sband_exist ; int lna_sband_ctrl ; int lna_sband_d_ctrl ; int foreign_lna0_ctrl ; int foreign_lna1_ctrl ; int foreign_lna2_ctrl ; int rf_switch_vhf ; int rf_switch_uhf ; int rf_switch_sband ; int leds_power ; int led0 ; int led1 ; int led2 ; int led3 ; int led4 ; int ir ; int eeprom_wp ; int mrc_sense ; int mrc_pdn_resetn ; int mrc_gp0 ; int mrc_gp1 ; int mrc_gp2 ; int mrc_gp3 ; int mrc_gp4 ; int host_spi_gsp_ts_int ; } 
e#ir_kb_type enum ir_kb_type { SMS_IR_KB_DEFAULT_TV , SMS_IR_KB_HCW_SILVER } 
s#sms_board struct sms_board { e#sms_device_type_st type ; char * name , * fw [ DEVICE_MODE_MAX ] ; s#sms_board_gpio_cfg board_cfg ; e#ir_kb_type ir_kb_type ; int led_power , led_hi , led_lo , lna_ctrl , rf_switch ; } 
sms_get_board s#sms_board * sms_get_board ( int ) 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
t#setmode_t typedef int ( * setmode_t ) ( void * , int ) 
t#detectmode_t typedef void ( * detectmode_t ) ( void * , int * ) 
t#sendrequest_t typedef int ( * sendrequest_t ) ( void * , void * , t#size_t ) 
t#preload_t typedef int ( * preload_t ) ( void * ) 
t#postload_t typedef int ( * postload_t ) ( void * ) 
s#ir_t struct ir_t { s#input_dev * input_dev ; e#ir_kb_type ir_kb_type ; char name [ 23 + 1 ] ; t#u16 * keyboard_layout_map ; t#u32 timeout ; t#u32 controller ; } 
s#smscore_device_t struct smscore_device_t { s#list_head entry ; s#list_head clients ; s#list_head subclients ; t#spinlock_t clientslock ; s#list_head buffers ; t#spinlock_t bufferslock ; int num_buffers ; void * common_buffer ; int common_buffer_size ; t#dma_addr_t common_buffer_phys ; void * context ; s#device * device ; char devpath [ 32 ] ; unsigned long device_flags ; t#setmode_t setmode_handler ; t#detectmode_t detectmode_handler ; t#sendrequest_t sendrequest_handler ; t#preload_t preload_handler ; t#postload_t postload_handler ; int mode , modes_supported ; s#completion version_ex_done , data_download_done , trigger_done ; s#completion init_device_done , reload_start_done , resume_done ; s#completion gpio_configuration_done , gpio_set_level_done ; s#completion gpio_get_level_done , ir_init_done ; t#wait_queue_head_t buffer_mng_waitq ; int gpio_get_res ; int board_id ; t#u8 * fw_buf ; t#u32 fw_buf_size ; s#ir_t ir ; int led_state ; } 
e#SMS_BOARD_EVENTS enum SMS_BOARD_EVENTS { BOARD_EVENT_POWER_INIT , BOARD_EVENT_POWER_SUSPEND , BOARD_EVENT_POWER_RESUME , BOARD_EVENT_BIND , BOARD_EVENT_SCAN_PROG , BOARD_EVENT_SCAN_COMP , BOARD_EVENT_EMERGENCY_WARNING_SIGNAL , BOARD_EVENT_FE_LOCK , BOARD_EVENT_FE_UNLOCK , BOARD_EVENT_DEMOD_LOCK , BOARD_EVENT_DEMOD_UNLOCK , BOARD_EVENT_RECEPTION_MAX_4 , BOARD_EVENT_RECEPTION_3 , BOARD_EVENT_RECEPTION_2 , BOARD_EVENT_RECEPTION_1 , BOARD_EVENT_RECEPTION_LOST_0 , BOARD_EVENT_MULTIPLEX_OK , BOARD_EVENT_MULTIPLEX_ERRORS } 
sms_board_event int sms_board_event ( s#smscore_device_t * , e#SMS_BOARD_EVENTS ) 
sms_board_setup int sms_board_setup ( s#smscore_device_t * ) 
sms_board_power int sms_board_power ( s#smscore_device_t * , int ) 
sms_board_led_feedback int sms_board_led_feedback ( s#smscore_device_t * , int ) 
sms_board_lna_control int sms_board_lna_control ( s#smscore_device_t * , int ) 
sms_board_load_modules extern int sms_board_load_modules ( int ) 

/* drivers/media/dvb/siano/smscoreapi.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
smscore_set_board_id void smscore_set_board_id ( s#smscore_device_t * , int ) 
smscore_get_board_id int smscore_get_board_id ( s#smscore_device_t * ) 
smscore_registry_getmode extern int smscore_registry_getmode ( char * ) 
t#hotplug_t typedef int ( * hotplug_t ) ( s#smscore_device_t * , s#device * , int ) 
smscore_register_hotplug extern int smscore_register_hotplug ( t#hotplug_t ) 
smscore_unregister_hotplug extern void smscore_unregister_hotplug ( t#hotplug_t ) 
s#smsdevice_params_t struct smsdevice_params_t { s#device * device ; int buffer_size ; int num_buffers ; char devpath [ 32 ] ; unsigned long flags ; t#setmode_t setmode_handler ; t#detectmode_t detectmode_handler ; t#sendrequest_t sendrequest_handler ; t#preload_t preload_handler ; t#postload_t postload_handler ; void * context ; e#sms_device_type_st device_type ; } 
smscore_register_device extern int smscore_register_device ( s#smsdevice_params_t * , s#smscore_device_t * * ) 
smscore_start_device extern int smscore_start_device ( s#smscore_device_t * ) 
smscore_unregister_device extern void smscore_unregister_device ( s#smscore_device_t * ) 
smscore_get_device_mode extern int smscore_get_device_mode ( s#smscore_device_t * ) 
s#smscore_buffer_t struct smscore_buffer_t { s#list_head entry ; int size ; int offset ; void * p ; t#dma_addr_t phys ; unsigned long offset_in_common ; } 
smscore_onresponse extern void smscore_onresponse ( s#smscore_device_t * , s#smscore_buffer_t * ) 
smscore_getbuffer extern s#smscore_buffer_t * smscore_getbuffer ( s#smscore_device_t * ) 
smscore_putbuffer extern void smscore_putbuffer ( s#smscore_device_t * , s#smscore_buffer_t * ) 
t#onresponse_t typedef int ( * onresponse_t ) ( void * , s#smscore_buffer_t * ) 
t#onremove_t typedef void ( * onremove_t ) ( void * ) 
s#smsclient_params_t struct smsclient_params_t { int initial_id ; int data_type ; t#onresponse_t onresponse_handler ; t#onremove_t onremove_handler ; void * context ; } 
s#smscore_client_t struct smscore_client_t { s#list_head entry ; s#smscore_device_t * coredev ; void * context ; s#list_head idlist ; t#onresponse_t onresponse_handler ; t#onremove_t onremove_handler ; } 
smscore_register_client extern int smscore_register_client ( s#smscore_device_t * , s#smsclient_params_t * , s#smscore_client_t * * ) 
smscore_unregister_client extern void smscore_unregister_client ( s#smscore_client_t * ) 
smsclient_sendrequest extern int smsclient_sendrequest ( s#smscore_client_t * , void * , t#size_t ) 

/* drivers/media/dvb/siano/smsendian.o */
smsendian_handle_tx_message extern void smsendian_handle_tx_message ( void * ) 
smsendian_handle_rx_message extern void smsendian_handle_rx_message ( void * ) 
smsendian_handle_message_header extern void smsendian_handle_message_header ( void * ) 

/* drivers/media/dvb/ttpci/budget-core.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##tuner_setup
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##saa7146_ext_vv
s##saa7146_vv
s#budget_info struct budget_info { char * name ; int type ; } 
s#budget struct budget { s#dvb_device dvb_dev ; s#dvb_net dvb_net ; s#saa7146_dev * dev ; s#i2c_adapter i2c_adap ; s#budget_info * card ; unsigned char * grabbing ; s#saa7146_pgtable pt ; s#tasklet_struct fidb_tasklet ; s#tasklet_struct vpe_tasklet ; s#dmxdev dmxdev ; s#dvb_demux demux ; s#dmx_frontend hw_frontend ; s#dmx_frontend mem_frontend ; int ci_present ; int video_port ; t#u32 buffer_width ; t#u32 buffer_height ; t#u32 buffer_size ; t#u32 buffer_warning_threshold ; t#u32 buffer_warnings ; unsigned long buffer_warning_time ; t#u32 ttbp ; int feeding ; t#spinlock_t feedlock ; t#spinlock_t debilock ; s#dvb_adapter dvb_adapter ; s#dvb_frontend * dvb_frontend ; int ( * read_fe_status ) ( s#dvb_frontend * , t#fe_status_t * ) ; int fe_synced ; void * priv ; } 
ttpci_budget_debiread extern int ttpci_budget_debiread ( s#budget * , t#u32 , int , int , int , int ) 
ttpci_budget_debiwrite extern int ttpci_budget_debiwrite ( s#budget * , t#u32 , int , int , t#u32 , int , int ) 
ttpci_budget_init extern int ttpci_budget_init ( s#budget * , s#saa7146_dev * , s#saa7146_pci_extension_data * , s#module * , short * ) 
ttpci_budget_init_hooks extern void ttpci_budget_init_hooks ( s#budget * ) 
ttpci_budget_deinit extern int ttpci_budget_deinit ( s#budget * ) 
ttpci_budget_irq10_handler extern void ttpci_budget_irq10_handler ( s#saa7146_dev * , t#u32 * ) 
ttpci_budget_set_video_port extern void ttpci_budget_set_video_port ( s#saa7146_dev * , int ) 
budget_debug extern int budget_debug 

/* drivers/media/dvb/ttpci/ttpci-eeprom.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
ttpci_eeprom_parse_mac extern int ttpci_eeprom_parse_mac ( s#i2c_adapter * , t#u8 * ) 

/* drivers/media/dvb/ttusb-dec/ttusbdecfe.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#ttusbdecfe_config struct ttusbdecfe_config { int ( * send_command ) ( s#dvb_frontend * , const t#u8 , int , const t#u8 [ ] , int * , t#u8 [ ] ) ; } 
ttusbdecfe_dvbt_attach extern s#dvb_frontend * ttusbdecfe_dvbt_attach ( const s#ttusbdecfe_config * ) 
ttusbdecfe_dvbs_attach extern s#dvb_frontend * ttusbdecfe_dvbs_attach ( const s#ttusbdecfe_config * ) 

/* drivers/media/video/bt8xx/bttv-gpio.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##dma_coherent_mem
s##class_private
s##bus_type_private
s##driver_private
s#tuner_setup struct tuner_setup { unsigned short addr ; unsigned int type ; unsigned int mode_mask ; unsigned int config ; int ( * tuner_callback ) ( void * , int , int , int ) ; } 
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#bttv_core struct bttv_core { s#v4l2_device v4l2_dev ; s#pci_dev * pci ; s#i2c_adapter i2c_adap ; s#list_head subs ; unsigned int nr ; unsigned int type ; } 
s#bttv_sub_device struct bttv_sub_device { s#device dev ; s#bttv_core * core ; s#list_head list ; } 
s#bttv_sub_driver struct bttv_sub_driver { s#device_driver drv ; char wanted [ 20 ] ; int ( * probe ) ( s#bttv_sub_device * ) ; void ( * remove ) ( s#bttv_sub_device * ) ; } 
bttv_sub_register int bttv_sub_register ( s#bttv_sub_driver * , char * ) 
bttv_sub_unregister int bttv_sub_unregister ( s#bttv_sub_driver * ) 

/* drivers/media/video/bt8xx/bttv-if.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
bttv_get_pcidev extern s#pci_dev * bttv_get_pcidev ( unsigned int ) 
bttv_gpio_enable extern int bttv_gpio_enable ( unsigned int , unsigned long , unsigned long ) 
bttv_read_gpio extern int bttv_read_gpio ( unsigned int , unsigned long * ) 
bttv_write_gpio extern int bttv_write_gpio ( unsigned int , unsigned long , unsigned long ) 

/* drivers/media/video/btcx-risc.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#btcx_riscmem struct btcx_riscmem { unsigned int size ; t#__le32 * cpu ; t#__le32 * jmp ; t#dma_addr_t dma ; } 
btcx_riscmem_alloc int btcx_riscmem_alloc ( s#pci_dev * , s#btcx_riscmem * , unsigned int ) 
btcx_riscmem_free void btcx_riscmem_free ( s#pci_dev * , s#btcx_riscmem * ) 
btcx_screen_clips int btcx_screen_clips ( int , int , s#v4l2_rect * , s#v4l2_clip * , unsigned int ) 
btcx_align int btcx_align ( s#v4l2_rect * , s#v4l2_clip * , unsigned int , int ) 
btcx_sort_clips void btcx_sort_clips ( s#v4l2_clip * , unsigned int ) 
s#btcx_skiplist struct btcx_skiplist { int start ; int end ; } 
btcx_calc_skips void btcx_calc_skips ( int , int , int * , s#btcx_skiplist * , unsigned int * , const s#v4l2_clip * , unsigned int ) 

/* drivers/media/video/cpia.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s#cpia_camera_ops struct cpia_camera_ops { int ( * open ) ( void * ) ; int ( * registerCallback ) ( void * , void ( * ) ( void * ) , void * ) ; int ( * transferCmd ) ( void * , t#u8 * , t#u8 * ) ; int ( * streamStart ) ( void * ) ; int ( * streamStop ) ( void * ) ; int ( * streamRead ) ( void * , t#u8 * , int ) ; int ( * close ) ( void * ) ; int wait_for_stream_ready ; s#module * owner ; } 
s#cpia_frame struct cpia_frame { t#u8 * data ; int count ; int width ; int height ; volatile int state ; } 
s#cam_params struct cam_params { struct { t#u8 firmwareVersion ; t#u8 firmwareRevision ; t#u8 vcVersion ; t#u8 vcRevision ; } version ; struct { t#u16 vendor ; t#u16 product ; t#u16 deviceRevision ; } pnpID ; struct { t#u8 vpVersion ; t#u8 vpRevision ; t#u16 cameraHeadID ; } vpVersion ; struct { t#u8 systemState ; t#u8 grabState ; t#u8 streamState ; t#u8 fatalError ; t#u8 cmdError ; t#u8 debugFlags ; t#u8 vpStatus ; t#u8 errorCode ; } status ; struct { t#u8 brightness ; t#u8 contrast ; t#u8 saturation ; } colourParams ; struct { t#u8 gainMode ; t#u8 expMode ; t#u8 compMode ; t#u8 centreWeight ; t#u8 gain ; t#u8 fineExp ; t#u8 coarseExpLo ; t#u8 coarseExpHi ; t#u8 redComp ; t#u8 green1Comp ; t#u8 green2Comp ; t#u8 blueComp ; } exposure ; struct { t#u8 balanceMode ; t#u8 redGain ; t#u8 greenGain ; t#u8 blueGain ; } colourBalance ; struct { t#u8 divisor ; t#u8 baserate ; } sensorFps ; struct { t#u8 gain1 ; t#u8 gain2 ; t#u8 gain4 ; t#u8 gain8 ; } apcor ; struct { t#u8 disabled ; t#u8 flickerMode ; t#u8 coarseJump ; int allowableOverExposure ; } flickerControl ; struct { t#u8 gain1 ; t#u8 gain2 ; t#u8 gain4 ; t#u8 gain8 ; } vlOffset ; struct { t#u8 mode ; t#u8 decimation ; } compression ; struct { t#u8 frTargeting ; t#u8 targetFR ; t#u8 targetQ ; } compressionTarget ; struct { t#u8 yThreshold ; t#u8 uvThreshold ; } yuvThreshold ; struct { t#u8 hysteresis ; t#u8 threshMax ; t#u8 smallStep ; t#u8 largeStep ; t#u8 decimationHysteresis ; t#u8 frDiffStepThresh ; t#u8 qDiffStepThresh ; t#u8 decimationThreshMod ; } compressionParams ; struct { t#u8 videoSize ; t#u8 subSample ; t#u8 yuvOrder ; } format ; struct { t#u8 qx3_detected ; t#u8 toplight ; t#u8 bottomlight ; t#u8 button ; t#u8 cradled ; } qx3 ; struct { t#u8 colStart ; t#u8 colEnd ; t#u8 rowStart ; t#u8 rowEnd ; } roi ; t#u8 ecpTiming ; t#u8 streamStartLine ; } 
e#v4l_camstates enum v4l_camstates { CPIA_V4L_IDLE = 0 , CPIA_V4L_ERROR , CPIA_V4L_COMMAND , CPIA_V4L_GRABBING , CPIA_V4L_STREAMING , CPIA_V4L_STREAMING_PAUSED , } 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##v4l2_device
s#video_picture struct video_picture { t#__u16 brightness ; t#__u16 hue ; t#__u16 colour ; t#__u16 contrast ; t#__u16 whiteness ; t#__u16 depth ; t#__u16 palette ; } 
s#video_clip struct video_clip { t#__s32 x , y ; t#__s32 width , height ; s#video_clip * next ; } 
s#video_window struct video_window { t#__u32 x , y ; t#__u32 width , height ; t#__u32 chromakey ; t#__u32 flags ; s#video_clip * clips ; int clipcount ; } 
s#video_capture struct video_capture { t#__u32 x , y ; t#__u32 width , height ; t#__u16 decimation ; t#__u16 flags ; } 
s#cam_data struct cam_data { s#list_head cam_data_list ; s#mutex busy_lock ; s#cpia_camera_ops * ops ; void * lowlevel_data ; t#u8 * raw_image ; s#cpia_frame decompressed_frame ; int image_size ; int open_count ; int fps ; int transfer_rate ; t#u8 mainsFreq ; s#mutex param_lock ; s#cam_params params ; s#proc_dir_entry * proc_entry ; int video_size ; volatile e#v4l_camstates camstate ; s#video_device vdev ; s#video_picture vp ; s#video_window vw ; s#video_capture vc ; int curframe ; t#u8 * frame_buf ; s#cpia_frame frame [ 2 ] ; int first_frame ; int mmap_kludge ; volatile t#u32 cmd_queue ; int exposure_status ; int exposure_count ; } 
cpia_register_camera s#cam_data * cpia_register_camera ( s#cpia_camera_ops * , void * ) 
cpia_unregister_camera void cpia_unregister_camera ( s#cam_data * ) 

/* drivers/media/video/cx18/cx18-gpio.o */
cx18_reset_ir_gpio void cx18_reset_ir_gpio ( void * ) 

/* drivers/media/video/cx231xx/cx231xx-avcore.o */
s#cx231xx_reg_seq struct cx231xx_reg_seq { unsigned char bit ; unsigned char val ; int sleep ; } 
e#cx231xx_decoder enum cx231xx_decoder { CX231XX_NODECODER , CX231XX_AVDECODER } 
e#cx231xx_itype enum cx231xx_itype { CX231XX_VMUX_COMPOSITE1 = 1 , CX231XX_VMUX_SVIDEO , CX231XX_VMUX_TELEVISION , CX231XX_VMUX_CABLE , CX231XX_RADIO , CX231XX_VMUX_DVB , CX231XX_VMUX_DEBUG } 
e#cx231xx_amux enum cx231xx_amux { CX231XX_AMUX_VIDEO , CX231XX_AMUX_LINE_IN , } 
s#cx231xx_input struct cx231xx_input { e#cx231xx_itype type ; unsigned int vmux ; e#cx231xx_amux amux ; s#cx231xx_reg_seq * gpio ; } 
s#cx231xx_board struct cx231xx_board { char * name ; int vchannels ; int tuner_type ; int tuner_addr ; t#v4l2_std_id norm ; int demod_addr ; t#u8 demod_xfer_mode ; s#cx231xx_reg_seq * dvb_gpio ; s#cx231xx_reg_seq * suspend_gpio ; s#cx231xx_reg_seq * tuner_gpio ; t#u8 tuner_sif_gpio ; t#u8 tuner_scl_gpio ; t#u8 tuner_sda_gpio ; t#u32 ctl_pin_status_mask ; t#u8 agc_analog_digital_select_gpio ; t#u32 gpio_pin_status_mask ; t#u8 tuner_i2c_master ; t#u8 demod_i2c_master ; unsigned int max_range_640_480 : 1 ; unsigned int has_dvb : 1 ; unsigned int valid : 1 ; unsigned char xclk , i2c_speed ; e#cx231xx_decoder decoder ; s#cx231xx_input input [ 4 ] ; s#cx231xx_input radio ; s#ir_scancode_table * ir_codes ; } 
s#cx231xx_fmt struct cx231xx_fmt { char * name ; t#u32 fourcc ; int depth ; int reg ; } 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##tuner_setup
s##cx231xx_IR
s#i2c_algo_bit_data struct i2c_algo_bit_data { void * data ; void ( * setsda ) ( void * , int ) ; void ( * setscl ) ( void * , int ) ; int ( * getsda ) ( void * ) ; int ( * getscl ) ( void * ) ; int udelay ; int timeout ; } 
s#cx231xx_i2c struct cx231xx_i2c { s#cx231xx * dev ; int nr ; s#i2c_adapter i2c_adap ; s#i2c_algo_bit_data i2c_algo ; s#i2c_client i2c_client ; t#u32 i2c_rc ; t#u8 i2c_period ; t#u8 i2c_nostop ; t#u8 i2c_reserve ; } 
s##usb_tt
s##mon_bus
s##ep_device
s##wusb_dev
s##snd_pcm_substream
s##snd_card
e#cx231xx_stream_state enum cx231xx_stream_state { STREAM_OFF , STREAM_INTERRUPT , STREAM_ON , } 
s#cx231xx_audio struct cx231xx_audio { char name [ 50 ] ; char * transfer_buffer [ 5 ] ; s#urb * urb [ 5 ] ; s#usb_device * udev ; unsigned int capture_transfer_done ; s#snd_pcm_substream * capture_pcm_substream ; unsigned int hwptr_done_capture ; s#snd_card * sndcard ; int users , shutdown ; e#cx231xx_stream_state capture_stream ; t#spinlock_t slock ; int alt ; int max_pkt_size ; int num_alt ; unsigned int * alt_max_pkt_size ; t#u16 end_point_addr ; } 
e#cx231xx_dev_state enum cx231xx_dev_state { DEV_INITIALIZED = 0x01 , DEV_DISCONNECTED = 0x02 , DEV_MISCONFIGURED = 0x04 , } 
s#cx231xx_dmaqueue struct cx231xx_dmaqueue { s#list_head active ; s#list_head queued ; t#wait_queue_head_t wq ; int pos ; t#u8 is_partial_line ; t#u8 partial_buf [ 8 ] ; t#u8 last_sav ; int current_field ; t#u32 bytes_left_in_line ; t#u32 lines_completed ; t#u8 field1_done ; t#u32 lines_per_field ; } 
s#cx231xx_buffer struct cx231xx_buffer { s#videobuf_buffer vb ; s#list_head frame ; int top_field ; int receiving ; } 
s#cx231xx_usb_isoc_ctl struct cx231xx_usb_isoc_ctl { int max_pkt_size ; int num_bufs ; s#urb * * urb ; char * * transfer_buffer ; t#u8 cmd ; int pos , size , pktsize ; int field ; t#u32 tmp_buf ; int tmp_buf_len ; s#cx231xx_buffer * buf ; int nfields ; int ( * isoc_copy ) ( s#cx231xx * , s#urb * ) ; } 
s#cx231xx_video_mode struct cx231xx_video_mode { s#cx231xx_dmaqueue vidq ; s#cx231xx_usb_isoc_ctl isoc_ctl ; t#spinlock_t slock ; int alt ; int max_pkt_size ; int num_alt ; unsigned int * alt_max_pkt_size ; t#u16 end_point_addr ; } 
s#cx231xx_i2c_xfer_data struct cx231xx_i2c_xfer_data { t#u8 dev_addr ; t#u8 direction ; t#u8 saddr_len ; t#u16 saddr_dat ; t#u8 buf_size ; t#u8 * p_buffer ; } 
e#cx231xx_mode enum cx231xx_mode { CX231XX_SUSPEND , CX231XX_ANALOG_MODE , CX231XX_DIGITAL_MODE , } 
s##cx231xx_dvb
s#INTERFACE_INFO struct INTERFACE_INFO { t#u8 interrupt_index ; t#u8 ts1_index ; t#u8 ts2_index ; t#u8 audio_index ; t#u8 video_index ; t#u8 vanc_index ; t#u8 hanc_index ; t#u8 ir_index ; } 
s#CONFIG_INFO struct CONFIG_INFO { t#u8 config_index ; s#INTERFACE_INFO interface_info ; } 
s#pcb_config struct pcb_config { t#u8 index ; t#u8 type ; t#u8 speed ; t#u8 mode ; t#u32 ts1_source ; t#u32 ts2_source ; t#u32 analog_source ; t#u8 digital_index ; t#u8 analog_index ; t#u8 dif_index ; t#u8 external_index ; t#u8 config_num ; s#CONFIG_INFO hs_config_info [ 3 ] ; s#CONFIG_INFO fs_config_info [ 3 ] ; } 
e#AFE_MODE enum AFE_MODE { AFE_MODE_LOW_IF , AFE_MODE_BASEBAND , AFE_MODE_EU_HI_IF , AFE_MODE_US_HI_IF , AFE_MODE_JAPAN_HI_IF } 
e#cx231xx_std_mode enum cx231xx_std_mode { CX231XX_TV_AIR = 0 , CX231XX_TV_CABLE } 
s#cx231xx struct cx231xx { char name [ 30 ] ; int model ; int devno ; s#cx231xx_board board ; unsigned int stream_on : 1 ; unsigned int vbi_stream_on : 1 ; unsigned int has_audio_class : 1 ; unsigned int has_alsa_audio : 1 ; s#cx231xx_fmt * format ; s#v4l2_device v4l2_dev ; s#v4l2_subdev * sd_cx25840 ; s#v4l2_subdev * sd_tuner ; s#cx231xx_IR * ir ; s#list_head devlist ; int tuner_type ; int tuner_addr ; s#cx231xx_i2c i2c_bus [ 3 ] ; unsigned int xc_fw_load_done : 1 ; s#mutex gpio_i2c_lock ; int users ; s#video_device * vdev ; t#v4l2_std_id norm ; int ctl_freq ; unsigned int ctl_ainput ; int mute ; int volume ; int width ; int height ; unsigned hscale ; unsigned vscale ; int interlaced ; s#cx231xx_audio adev ; e#cx231xx_dev_state state ; s#work_struct request_module_wk ; s#mutex lock ; s#mutex ctrl_urb_lock ; s#list_head inqueue , outqueue ; t#wait_queue_head_t open , wait_frame , wait_stream ; s#video_device * vbi_dev ; s#video_device * radio_dev ; unsigned char eedata [ 256 ] ; s#cx231xx_video_mode video_mode ; s#cx231xx_video_mode vbi_mode ; s#cx231xx_video_mode sliced_cc_mode ; s#cx231xx_video_mode ts1_mode ; s#usb_device * udev ; char urb_buf [ 80 ] ; int ( * cx231xx_read_ctrl_reg ) ( s#cx231xx * , t#u8 , t#u16 , char * , int ) ; int ( * cx231xx_write_ctrl_reg ) ( s#cx231xx * , t#u8 , t#u16 , char * , int ) ; int ( * cx231xx_send_usb_command ) ( s#cx231xx_i2c * , s#cx231xx_i2c_xfer_data * ) ; int ( * cx231xx_gpio_i2c_read ) ( s#cx231xx * , t#u8 , t#u8 * , t#u8 ) ; int ( * cx231xx_gpio_i2c_write ) ( s#cx231xx * , t#u8 , t#u8 * , t#u8 ) ; int ( * cx231xx_set_analog_freq ) ( s#cx231xx * , t#u32 ) ; int ( * cx231xx_reset_analog_tuner ) ( s#cx231xx * ) ; e#cx231xx_mode mode ; s#cx231xx_dvb * dvb ; s#pcb_config current_pcb_config ; t#u8 current_scenario_idx ; t#u8 interface_count ; t#u8 max_iad_interface_count ; t#u32 gpio_dir ; t#u32 gpio_val ; int power_mode ; e#AFE_MODE afe_mode ; t#u32 afe_ref_count ; t#u32 video_input ; t#u32 active_mode ; t#u8 vbi_or_sliced_cc_mode ; e#cx231xx_std_mode std_mode ; } 
cx231xx_capture_start int cx231xx_capture_start ( s#cx231xx * , int , t#u8 ) 

/* drivers/media/video/cx231xx/cx231xx-cards.o */
cx231xx_tuner_callback int cx231xx_tuner_callback ( void * , int , int , int ) 

/* drivers/media/video/cx231xx/cx231xx-core.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##tuner_setup
s##cx231xx_IR
s##v4l2_ioctl_ops
s##usb_tt
s##mon_bus
s##ep_device
s##wusb_dev
s##snd_pcm_substream
s##snd_card
s##cx231xx_dvb
s#cx231xx_ops struct cx231xx_ops { s#list_head next ; char * name ; int id ; int ( * init ) ( s#cx231xx * ) ; int ( * fini ) ( s#cx231xx * ) ; } 
cx231xx_register_extension int cx231xx_register_extension ( s#cx231xx_ops * ) 
cx231xx_unregister_extension void cx231xx_unregister_extension ( s#cx231xx_ops * ) 
cx231xx_send_usb_command int cx231xx_send_usb_command ( s#cx231xx_i2c * , s#cx231xx_i2c_xfer_data * ) 
cx231xx_set_alt_setting int cx231xx_set_alt_setting ( s#cx231xx * , t#u8 , t#u8 ) 
cx231xx_set_mode int cx231xx_set_mode ( s#cx231xx * , e#cx231xx_mode ) 
cx231xx_uninit_isoc void cx231xx_uninit_isoc ( s#cx231xx * ) 
cx231xx_init_isoc int cx231xx_init_isoc ( s#cx231xx * , int , int , int , int ( * ) ( s#cx231xx * , s#urb * ) ) 
cx231xx_dev_init int cx231xx_dev_init ( s#cx231xx * ) 
cx231xx_dev_uninit void cx231xx_dev_uninit ( s#cx231xx * ) 
cx231xx_send_gpio_cmd int cx231xx_send_gpio_cmd ( s#cx231xx * , t#u32 , t#u8 * , t#u8 , t#u8 , t#u8 ) 

/* drivers/media/video/cx231xx/cx231xx-vbi.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##cx231xx_IR
s##usb_tt
s##mon_bus
s##ep_device
s##wusb_dev
s##snd_pcm_substream
s##snd_card
s##cx231xx_dvb
cx231xx_uninit_vbi_isoc void cx231xx_uninit_vbi_isoc ( s#cx231xx * ) 
cx231xx_init_vbi_isoc int cx231xx_init_vbi_isoc ( s#cx231xx * , int , int , int , int ( * ) ( s#cx231xx * , s#urb * ) ) 

/* drivers/media/video/cx2341x.o */
cx2341x_mpeg_ctrls extern const t#u32 cx2341x_mpeg_ctrls [ ] 
e#cx2341x_port enum cx2341x_port { CX2341X_PORT_MEMORY = 0 , CX2341X_PORT_STREAMING = 1 , CX2341X_PORT_SERIAL = 2 } 
e#v4l2_mpeg_stream_type enum v4l2_mpeg_stream_type { V4L2_MPEG_STREAM_TYPE_MPEG2_PS = 0 , V4L2_MPEG_STREAM_TYPE_MPEG2_TS = 1 , V4L2_MPEG_STREAM_TYPE_MPEG1_SS = 2 , V4L2_MPEG_STREAM_TYPE_MPEG2_DVD = 3 , V4L2_MPEG_STREAM_TYPE_MPEG1_VCD = 4 , V4L2_MPEG_STREAM_TYPE_MPEG2_SVCD = 5 , } 
e#v4l2_mpeg_stream_vbi_fmt enum v4l2_mpeg_stream_vbi_fmt { V4L2_MPEG_STREAM_VBI_FMT_NONE = 0 , V4L2_MPEG_STREAM_VBI_FMT_IVTV = 1 , } 
e#v4l2_mpeg_audio_sampling_freq enum v4l2_mpeg_audio_sampling_freq { V4L2_MPEG_AUDIO_SAMPLING_FREQ_44100 = 0 , V4L2_MPEG_AUDIO_SAMPLING_FREQ_48000 = 1 , V4L2_MPEG_AUDIO_SAMPLING_FREQ_32000 = 2 , } 
e#v4l2_mpeg_audio_encoding enum v4l2_mpeg_audio_encoding { V4L2_MPEG_AUDIO_ENCODING_LAYER_1 = 0 , V4L2_MPEG_AUDIO_ENCODING_LAYER_2 = 1 , V4L2_MPEG_AUDIO_ENCODING_LAYER_3 = 2 , V4L2_MPEG_AUDIO_ENCODING_AAC = 3 , V4L2_MPEG_AUDIO_ENCODING_AC3 = 4 , } 
e#v4l2_mpeg_audio_l2_bitrate enum v4l2_mpeg_audio_l2_bitrate { V4L2_MPEG_AUDIO_L2_BITRATE_32K = 0 , V4L2_MPEG_AUDIO_L2_BITRATE_48K = 1 , V4L2_MPEG_AUDIO_L2_BITRATE_56K = 2 , V4L2_MPEG_AUDIO_L2_BITRATE_64K = 3 , V4L2_MPEG_AUDIO_L2_BITRATE_80K = 4 , V4L2_MPEG_AUDIO_L2_BITRATE_96K = 5 , V4L2_MPEG_AUDIO_L2_BITRATE_112K = 6 , V4L2_MPEG_AUDIO_L2_BITRATE_128K = 7 , V4L2_MPEG_AUDIO_L2_BITRATE_160K = 8 , V4L2_MPEG_AUDIO_L2_BITRATE_192K = 9 , V4L2_MPEG_AUDIO_L2_BITRATE_224K = 10 , V4L2_MPEG_AUDIO_L2_BITRATE_256K = 11 , V4L2_MPEG_AUDIO_L2_BITRATE_320K = 12 , V4L2_MPEG_AUDIO_L2_BITRATE_384K = 13 , } 
e#v4l2_mpeg_audio_ac3_bitrate enum v4l2_mpeg_audio_ac3_bitrate { V4L2_MPEG_AUDIO_AC3_BITRATE_32K = 0 , V4L2_MPEG_AUDIO_AC3_BITRATE_40K = 1 , V4L2_MPEG_AUDIO_AC3_BITRATE_48K = 2 , V4L2_MPEG_AUDIO_AC3_BITRATE_56K = 3 , V4L2_MPEG_AUDIO_AC3_BITRATE_64K = 4 , V4L2_MPEG_AUDIO_AC3_BITRATE_80K = 5 , V4L2_MPEG_AUDIO_AC3_BITRATE_96K = 6 , V4L2_MPEG_AUDIO_AC3_BITRATE_112K = 7 , V4L2_MPEG_AUDIO_AC3_BITRATE_128K = 8 , V4L2_MPEG_AUDIO_AC3_BITRATE_160K = 9 , V4L2_MPEG_AUDIO_AC3_BITRATE_192K = 10 , V4L2_MPEG_AUDIO_AC3_BITRATE_224K = 11 , V4L2_MPEG_AUDIO_AC3_BITRATE_256K = 12 , V4L2_MPEG_AUDIO_AC3_BITRATE_320K = 13 , V4L2_MPEG_AUDIO_AC3_BITRATE_384K = 14 , V4L2_MPEG_AUDIO_AC3_BITRATE_448K = 15 , V4L2_MPEG_AUDIO_AC3_BITRATE_512K = 16 , V4L2_MPEG_AUDIO_AC3_BITRATE_576K = 17 , V4L2_MPEG_AUDIO_AC3_BITRATE_640K = 18 , } 
e#v4l2_mpeg_audio_mode enum v4l2_mpeg_audio_mode { V4L2_MPEG_AUDIO_MODE_STEREO = 0 , V4L2_MPEG_AUDIO_MODE_JOINT_STEREO = 1 , V4L2_MPEG_AUDIO_MODE_DUAL = 2 , V4L2_MPEG_AUDIO_MODE_MONO = 3 , } 
e#v4l2_mpeg_audio_mode_extension enum v4l2_mpeg_audio_mode_extension { V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_4 = 0 , V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_8 = 1 , V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_12 = 2 , V4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_16 = 3 , } 
e#v4l2_mpeg_audio_emphasis enum v4l2_mpeg_audio_emphasis { V4L2_MPEG_AUDIO_EMPHASIS_NONE = 0 , V4L2_MPEG_AUDIO_EMPHASIS_50_DIV_15_uS = 1 , V4L2_MPEG_AUDIO_EMPHASIS_CCITT_J17 = 2 , } 
e#v4l2_mpeg_audio_crc enum v4l2_mpeg_audio_crc { V4L2_MPEG_AUDIO_CRC_NONE = 0 , V4L2_MPEG_AUDIO_CRC_CRC16 = 1 , } 
e#v4l2_mpeg_video_encoding enum v4l2_mpeg_video_encoding { V4L2_MPEG_VIDEO_ENCODING_MPEG_1 = 0 , V4L2_MPEG_VIDEO_ENCODING_MPEG_2 = 1 , V4L2_MPEG_VIDEO_ENCODING_MPEG_4_AVC = 2 , } 
e#v4l2_mpeg_video_aspect enum v4l2_mpeg_video_aspect { V4L2_MPEG_VIDEO_ASPECT_1x1 = 0 , V4L2_MPEG_VIDEO_ASPECT_4x3 = 1 , V4L2_MPEG_VIDEO_ASPECT_16x9 = 2 , V4L2_MPEG_VIDEO_ASPECT_221x100 = 3 , } 
e#v4l2_mpeg_video_bitrate_mode enum v4l2_mpeg_video_bitrate_mode { V4L2_MPEG_VIDEO_BITRATE_MODE_VBR = 0 , V4L2_MPEG_VIDEO_BITRATE_MODE_CBR = 1 , } 
e#v4l2_mpeg_cx2341x_video_spatial_filter_mode enum v4l2_mpeg_cx2341x_video_spatial_filter_mode { V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_MANUAL = 0 , V4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_AUTO = 1 , } 
e#v4l2_mpeg_cx2341x_video_luma_spatial_filter_type enum v4l2_mpeg_cx2341x_video_luma_spatial_filter_type { V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_OFF = 0 , V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_HOR = 1 , V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_VERT = 2 , V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_HV_SEPARABLE = 3 , V4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_SYM_NON_SEPARABLE = 4 , } 
e#v4l2_mpeg_cx2341x_video_chroma_spatial_filter_type enum v4l2_mpeg_cx2341x_video_chroma_spatial_filter_type { V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_OFF = 0 , V4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_1D_HOR = 1 , } 
e#v4l2_mpeg_cx2341x_video_temporal_filter_mode enum v4l2_mpeg_cx2341x_video_temporal_filter_mode { V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_MANUAL = 0 , V4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_AUTO = 1 , } 
e#v4l2_mpeg_cx2341x_video_median_filter_type enum v4l2_mpeg_cx2341x_video_median_filter_type { V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_OFF = 0 , V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR = 1 , V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_VERT = 2 , V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR_VERT = 3 , V4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_DIAG = 4 , } 
s#cx2341x_mpeg_params struct cx2341x_mpeg_params { t#u32 capabilities ; e#cx2341x_port port ; t#u16 width ; t#u16 height ; t#u16 is_50hz ; e#v4l2_mpeg_stream_type stream_type ; e#v4l2_mpeg_stream_vbi_fmt stream_vbi_fmt ; t#u16 stream_insert_nav_packets ; e#v4l2_mpeg_audio_sampling_freq audio_sampling_freq ; e#v4l2_mpeg_audio_encoding audio_encoding ; e#v4l2_mpeg_audio_l2_bitrate audio_l2_bitrate ; e#v4l2_mpeg_audio_ac3_bitrate audio_ac3_bitrate ; e#v4l2_mpeg_audio_mode audio_mode ; e#v4l2_mpeg_audio_mode_extension audio_mode_extension ; e#v4l2_mpeg_audio_emphasis audio_emphasis ; e#v4l2_mpeg_audio_crc audio_crc ; t#u32 audio_properties ; t#u16 audio_mute ; e#v4l2_mpeg_video_encoding video_encoding ; e#v4l2_mpeg_video_aspect video_aspect ; t#u16 video_b_frames ; t#u16 video_gop_size ; t#u16 video_gop_closure ; e#v4l2_mpeg_video_bitrate_mode video_bitrate_mode ; t#u32 video_bitrate ; t#u32 video_bitrate_peak ; t#u16 video_temporal_decimation ; t#u16 video_mute ; t#u32 video_mute_yuv ; e#v4l2_mpeg_cx2341x_video_spatial_filter_mode video_spatial_filter_mode ; t#u16 video_spatial_filter ; e#v4l2_mpeg_cx2341x_video_luma_spatial_filter_type video_luma_spatial_filter_type ; e#v4l2_mpeg_cx2341x_video_chroma_spatial_filter_type video_chroma_spatial_filter_type ; e#v4l2_mpeg_cx2341x_video_temporal_filter_mode video_temporal_filter_mode ; t#u16 video_temporal_filter ; e#v4l2_mpeg_cx2341x_video_median_filter_type video_median_filter_type ; t#u16 video_luma_median_filter_top ; t#u16 video_luma_median_filter_bottom ; t#u16 video_chroma_median_filter_top ; t#u16 video_chroma_median_filter_bottom ; } 
cx2341x_ctrl_query int cx2341x_ctrl_query ( const s#cx2341x_mpeg_params * , s#v4l2_queryctrl * ) 
cx2341x_ctrl_get_menu const char * * cx2341x_ctrl_get_menu ( const s#cx2341x_mpeg_params * , t#u32 ) 
cx2341x_ext_ctrls int cx2341x_ext_ctrls ( s#cx2341x_mpeg_params * , int , s#v4l2_ext_controls * , unsigned int ) 
cx2341x_fill_defaults void cx2341x_fill_defaults ( s#cx2341x_mpeg_params * ) 
t#cx2341x_mbox_func typedef int ( * cx2341x_mbox_func ) ( void * , t#u32 , int , int , t#u32 [ 16 ] ) 
cx2341x_update int cx2341x_update ( void * , t#cx2341x_mbox_func , const s#cx2341x_mpeg_params * , const s#cx2341x_mpeg_params * ) 
cx2341x_log_status void cx2341x_log_status ( const s#cx2341x_mpeg_params * , const char * ) 

/* drivers/media/video/cx88/cx88-cards.o */
cx88_tuner_callback extern int cx88_tuner_callback ( void * , int , int , int ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
e#cx88_itype enum cx88_itype { CX88_VMUX_COMPOSITE1 = 1 , CX88_VMUX_COMPOSITE2 , CX88_VMUX_COMPOSITE3 , CX88_VMUX_COMPOSITE4 , CX88_VMUX_SVIDEO , CX88_VMUX_TELEVISION , CX88_VMUX_CABLE , CX88_VMUX_DVB , CX88_VMUX_DEBUG , CX88_RADIO , } 
s#cx88_input struct cx88_input { e#cx88_itype type ; t#u32 gpio0 , gpio1 , gpio2 , gpio3 ; unsigned int vmux : 2 ; unsigned int audioroute : 4 ; } 
e#cx88_board_type enum cx88_board_type { CX88_BOARD_NONE = 0 , CX88_MPEG_DVB , CX88_MPEG_BLACKBIRD } 
s#cx88_board struct cx88_board { char * name ; unsigned int tuner_type ; unsigned int radio_type ; unsigned char tuner_addr ; unsigned char radio_addr ; int tda9887_conf ; s#cx88_input input [ 8 ] ; s#cx88_input radio ; e#cx88_board_type mpeg ; unsigned int audio_chip ; int num_frontends ; } 
s##cx88_IR
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#cx88_dmaqueue struct cx88_dmaqueue { s#list_head active ; s#list_head queued ; s#timer_list timeout ; s#btcx_riscmem stopper ; t#u32 count ; } 
s#cx8802_suspend_state struct cx8802_suspend_state { int disabled ; } 
s##v4l2_ioctl_ops
s#videobuf_dvb_frontends struct videobuf_dvb_frontends { s#list_head felist ; s#mutex lock ; s#dvb_adapter adapter ; int active_fe_id ; int gate ; } 
s##vp3054_i2c_state
s#cx8802_dev struct cx8802_dev { s#cx88_core * core ; t#spinlock_t slock ; s#pci_dev * pci ; unsigned char pci_rev , pci_lat ; s#cx88_dmaqueue mpegq ; t#u32 ts_packet_size ; t#u32 ts_packet_count ; s#cx8802_suspend_state state ; s#list_head devlist ; s#video_device * mpeg_dev ; t#u32 mailbox ; int width ; int height ; unsigned char mpeg_active ; s#cx2341x_mpeg_params params ; s#videobuf_dvb_frontends frontends ; s#vp3054_i2c_state * vp3054 ; unsigned char ts_gen_cntrl ; s#list_head drvlist ; s#work_struct request_module_wk ; } 
s#cx88_core struct cx88_core { s#list_head devlist ; t#atomic_t refcount ; int nr ; char name [ 32 ] ; int pci_bus ; int pci_slot ; t#u32 * lmmio ; t#u8 * bmmio ; t#u32 shadow [ 3 ] ; int pci_irqmask ; s#i2c_adapter i2c_adap ; s#i2c_algo_bit_data i2c_algo ; s#i2c_client i2c_client ; t#u32 i2c_state , i2c_rc ; s#v4l2_device v4l2_dev ; s#i2c_client * i2c_rtc ; unsigned int boardnr ; s#cx88_board board ; unsigned int tuner_formats ; int ( * prev_set_voltage ) ( s#dvb_frontend * , t#fe_sec_voltage_t ) ; void ( * gate_ctrl ) ( s#cx88_core * , int ) ; s#task_struct * kthread ; t#v4l2_std_id tvnorm ; t#u32 tvaudio ; t#u32 audiomode_manual ; t#u32 audiomode_current ; t#u32 input ; t#u32 astat ; t#u32 use_nicam ; unsigned long last_change ; s#cx88_IR * ir ; s#mutex lock ; t#u32 freq ; t#atomic_t users ; t#atomic_t mpeg_users ; s#cx8802_dev * dvbdev ; e#cx88_board_type active_type_id ; int active_ref ; int active_fe_id ; } 
cx88_setup_xc3028 extern void cx88_setup_xc3028 ( s#cx88_core * , s#xc2028_ctrl * ) 

/* drivers/media/video/cx88/cx88-core.o */
cx88_print_irqbits extern void cx88_print_irqbits ( char * , char * , char * * , int , t#u32 , t#u32 ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##cx88_IR
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##vp3054_i2c_state
cx88_core_irq extern int cx88_core_irq ( s#cx88_core * , t#u32 ) 
cx88_wakeup extern void cx88_wakeup ( s#cx88_core * , s#cx88_dmaqueue * , t#u32 ) 
cx88_reset extern int cx88_reset ( s#cx88_core * ) 
cx88_shutdown extern void cx88_shutdown ( s#cx88_core * ) 
cx88_risc_buffer extern int cx88_risc_buffer ( s#pci_dev * , s#btcx_riscmem * , s#scatterlist * , unsigned int , unsigned int , unsigned int , unsigned int , unsigned int ) 
cx88_risc_databuffer extern int cx88_risc_databuffer ( s#pci_dev * , s#btcx_riscmem * , s#scatterlist * , unsigned int , unsigned int , unsigned int ) 
cx88_risc_stopper extern int cx88_risc_stopper ( s#pci_dev * , s#btcx_riscmem * , t#u32 , t#u32 , t#u32 ) 
s#cx8800_fmt struct cx8800_fmt { char * name ; t#u32 fourcc ; int depth ; int flags ; t#u32 cxformat ; } 
s#cx88_buffer struct cx88_buffer { s#videobuf_buffer vb ; unsigned int bpl ; s#btcx_riscmem risc ; s#cx8800_fmt * fmt ; t#u32 count ; } 
cx88_free_buffer extern void cx88_free_buffer ( s#videobuf_queue * , s#cx88_buffer * ) 
s#sram_channel struct sram_channel { char * name ; t#u32 cmds_start ; t#u32 ctrl_start ; t#u32 cdt ; t#u32 fifo_start ; t#u32 fifo_size ; t#u32 ptr1_reg ; t#u32 ptr2_reg ; t#u32 cnt1_reg ; t#u32 cnt2_reg ; } 
cx88_sram_channels extern s#sram_channel cx88_sram_channels [ ] 
cx88_sram_channel_setup extern int cx88_sram_channel_setup ( s#cx88_core * , s#sram_channel * , unsigned int , t#u32 ) 
cx88_sram_channel_dump extern void cx88_sram_channel_dump ( s#cx88_core * , s#sram_channel * ) 
cx88_set_tvnorm extern int cx88_set_tvnorm ( s#cx88_core * , t#v4l2_std_id ) 
cx88_set_scale extern int cx88_set_scale ( s#cx88_core * , unsigned int , unsigned int , e#v4l2_field ) 
cx88_vdev_init extern s#video_device * cx88_vdev_init ( s#cx88_core * , s#pci_dev * , s#video_device * , char * ) 
cx88_core_get extern s#cx88_core * cx88_core_get ( s#pci_dev * ) 
cx88_core_put extern void cx88_core_put ( s#cx88_core * , s#pci_dev * ) 
cx88_ir_start void cx88_ir_start ( s#cx88_core * , s#cx88_IR * ) 
cx88_ir_stop void cx88_ir_stop ( s#cx88_core * , s#cx88_IR * ) 

/* drivers/media/video/cx88/cx88-dsp.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##cx88_IR
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##v4l2_ioctl_ops
s##vp3054_i2c_state
cx88_dsp_detect_stereo_sap t#s32 cx88_dsp_detect_stereo_sap ( s#cx88_core * ) 

/* drivers/media/video/cx88/cx88-mpeg.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##cx88_IR
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##v4l2_ioctl_ops
s##vp3054_i2c_state
cx8802_get_device s#cx8802_dev * cx8802_get_device ( int ) 
cx8802_buf_prepare int cx8802_buf_prepare ( s#videobuf_queue * , s#cx8802_dev * , s#cx88_buffer * , e#v4l2_field ) 
cx8802_buf_queue void cx8802_buf_queue ( s#cx8802_dev * , s#cx88_buffer * ) 
cx8802_cancel_buffers void cx8802_cancel_buffers ( s#cx8802_dev * ) 
e#cx8802_board_access enum cx8802_board_access { CX8802_DRVCTL_SHARED = 1 , CX8802_DRVCTL_EXCLUSIVE = 2 , } 
s#cx8802_driver struct cx8802_driver { s#cx88_core * core ; s#list_head drvlist ; e#cx88_board_type type_id ; e#cx8802_board_access hw_access ; int ( * suspend ) ( s#pci_dev * , t#pm_message_t ) ; int ( * resume ) ( s#pci_dev * ) ; int ( * probe ) ( s#cx8802_driver * ) ; int ( * remove ) ( s#cx8802_driver * ) ; int ( * advise_acquire ) ( s#cx8802_driver * ) ; int ( * advise_release ) ( s#cx8802_driver * ) ; int ( * request_acquire ) ( s#cx8802_driver * ) ; int ( * request_release ) ( s#cx8802_driver * ) ; } 
cx8802_register_driver int cx8802_register_driver ( s#cx8802_driver * ) 
cx8802_unregister_driver int cx8802_unregister_driver ( s#cx8802_driver * ) 
cx8802_get_driver s#cx8802_driver * cx8802_get_driver ( s#cx8802_dev * , e#cx88_board_type ) 

/* drivers/media/video/cx88/cx88-tvaudio.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##cx88_IR
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##v4l2_ioctl_ops
s##vp3054_i2c_state
cx88_set_tvaudio void cx88_set_tvaudio ( s#cx88_core * ) 
cx88_newstation void cx88_newstation ( s#cx88_core * ) 
cx88_set_stereo void cx88_set_stereo ( s#cx88_core * , t#u32 , int ) 
cx88_get_stereo void cx88_get_stereo ( s#cx88_core * , s#v4l2_tuner * ) 
cx88_audio_thread int cx88_audio_thread ( void * ) 

/* drivers/media/video/cx88/cx88-video.o */
cx88_user_ctrls extern const t#u32 cx88_user_ctrls [ ] 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##cx88_IR
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##vp3054_i2c_state
cx8800_ctrl_query extern int cx8800_ctrl_query ( s#cx88_core * , s#v4l2_queryctrl * ) 
cx88_video_mux int cx88_video_mux ( s#cx88_core * , unsigned int ) 
cx88_get_control int cx88_get_control ( s#cx88_core * , s#v4l2_control * ) 
cx88_set_control int cx88_set_control ( s#cx88_core * , s#v4l2_control * ) 
cx88_enum_input int cx88_enum_input ( s#cx88_core * , s#v4l2_input * ) 
cx88_set_freq int cx88_set_freq ( s#cx88_core * , s#v4l2_frequency * ) 

/* drivers/media/video/cx88/cx88-vp3054-i2c.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##cx88_IR
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##v4l2_ioctl_ops
s#vp3054_i2c_state struct vp3054_i2c_state { s#i2c_adapter adap ; s#i2c_algo_bit_data algo ; t#u32 state ; } 
vp3054_i2c_probe int vp3054_i2c_probe ( s#cx8802_dev * ) 
vp3054_i2c_remove void vp3054_i2c_remove ( s#cx8802_dev * ) 

/* drivers/media/video/em28xx/em28xx-cards.o */
em28xx_tuner_callback int em28xx_tuner_callback ( void * , int , int , int ) 

/* drivers/media/video/em28xx/em28xx-core.o */
e#em28xx_chip_id enum em28xx_chip_id { CHIP_ID_EM2710 = 17 , CHIP_ID_EM2820 = 18 , CHIP_ID_EM2840 = 20 , CHIP_ID_EM2750 = 33 , CHIP_ID_EM2860 = 34 , CHIP_ID_EM2870 = 35 , CHIP_ID_EM2883 = 36 , CHIP_ID_EM2874 = 65 , } 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##tuner_setup
s#em28xx_reg_seq struct em28xx_reg_seq { int reg ; unsigned char val , mask ; int sleep ; } 
e#em28xx_decoder enum em28xx_decoder { EM28XX_NODECODER = 0 , EM28XX_TVP5150 , EM28XX_SAA711X , } 
e#em28xx_adecoder enum em28xx_adecoder { EM28XX_NOADECODER = 0 , EM28XX_TVAUDIO , } 
e#enum28xx_itype enum enum28xx_itype { EM28XX_VMUX_COMPOSITE1 = 1 , EM28XX_VMUX_COMPOSITE2 , EM28XX_VMUX_COMPOSITE3 , EM28XX_VMUX_COMPOSITE4 , EM28XX_VMUX_SVIDEO , EM28XX_VMUX_TELEVISION , EM28XX_VMUX_CABLE , EM28XX_VMUX_DVB , EM28XX_VMUX_DEBUG , EM28XX_RADIO , } 
e#em28xx_amux enum em28xx_amux { EM28XX_AMUX_VIDEO , EM28XX_AMUX_LINE_IN , EM28XX_AMUX_VIDEO2 , EM28XX_AMUX_PHONE , EM28XX_AMUX_MIC , EM28XX_AMUX_CD , EM28XX_AMUX_AUX , EM28XX_AMUX_PCM_OUT , } 
e#em28xx_aout enum em28xx_aout { EM28XX_AOUT_MASTER = 1 << 0 , EM28XX_AOUT_LINE = 1 << 1 , EM28XX_AOUT_MONO = 1 << 2 , EM28XX_AOUT_LFE = 1 << 3 , EM28XX_AOUT_SURR = 1 << 4 , EM28XX_AOUT_PCM_IN = 1 << 7 , EM28XX_AOUT_PCM_MIC_PCM = 0 << 8 , EM28XX_AOUT_PCM_CD = 1 << 8 , EM28XX_AOUT_PCM_VIDEO = 2 << 8 , EM28XX_AOUT_PCM_AUX = 3 << 8 , EM28XX_AOUT_PCM_LINE = 4 << 8 , EM28XX_AOUT_PCM_STEREO = 5 << 8 , EM28XX_AOUT_PCM_MONO = 6 << 8 , EM28XX_AOUT_PCM_PHONE = 7 << 8 , } 
s#em28xx_input struct em28xx_input { e#enum28xx_itype type ; unsigned int vmux ; e#em28xx_amux amux ; e#em28xx_aout aout ; s#em28xx_reg_seq * gpio ; } 
s#em28xx_board struct em28xx_board { char * name ; int vchannels ; int tuner_type ; int tuner_addr ; unsigned int tda9887_conf ; s#em28xx_reg_seq * dvb_gpio ; s#em28xx_reg_seq * suspend_gpio ; s#em28xx_reg_seq * tuner_gpio ; s#em28xx_reg_seq * mute_gpio ; unsigned int is_em2800 : 1 ; unsigned int has_msp34xx : 1 ; unsigned int mts_firmware : 1 ; unsigned int max_range_640_480 : 1 ; unsigned int has_dvb : 1 ; unsigned int has_snapshot_button : 1 ; unsigned int is_webcam : 1 ; unsigned int valid : 1 ; unsigned int has_ir_i2c : 1 ; unsigned char xclk , i2c_speed ; unsigned char radio_addr ; unsigned short tvaudio_addr ; e#em28xx_decoder decoder ; e#em28xx_adecoder adecoder ; s#em28xx_input input [ 4 ] ; s#em28xx_input radio ; s#ir_scancode_table * ir_codes ; } 
e#em28xx_sensor enum em28xx_sensor { EM28XX_NOSENSOR = 0 , EM28XX_MT9V011 , EM28XX_MT9M001 , EM28XX_MT9M111 , } 
s#em28xx_fmt struct em28xx_fmt { char * name ; t#u32 fourcc ; int depth ; int reg ; } 
s##em28xx_IR
e#em28xx_ac97_mode enum em28xx_ac97_mode { EM28XX_NO_AC97 = 0 , EM28XX_AC97_EM202 , EM28XX_AC97_SIGMATEL , EM28XX_AC97_OTHER , } 
s#em28xx_audio_mode struct em28xx_audio_mode { e#em28xx_ac97_mode ac97 ; t#u16 ac97_feat ; t#u32 ac97_vendor_id ; unsigned int has_audio : 1 ; unsigned int i2s_3rates : 1 ; unsigned int i2s_5rates : 1 ; } 
s##v4l2_ioctl_ops
s##usb_tt
s##mon_bus
s##ep_device
s##wusb_dev
s##snd_pcm_substream
s##snd_card
e#em28xx_stream_state enum em28xx_stream_state { STREAM_OFF , STREAM_INTERRUPT , STREAM_ON , } 
s#em28xx_audio struct em28xx_audio { char name [ 50 ] ; char * transfer_buffer [ 5 ] ; s#urb * urb [ 5 ] ; s#usb_device * udev ; unsigned int capture_transfer_done ; s#snd_pcm_substream * capture_pcm_substream ; unsigned int hwptr_done_capture ; s#snd_card * sndcard ; int users ; e#em28xx_stream_state capture_stream ; t#spinlock_t slock ; } 
e#em28xx_dev_state enum em28xx_dev_state { DEV_INITIALIZED = 0x01 , DEV_DISCONNECTED = 0x02 , DEV_MISCONFIGURED = 0x04 , } 
e#em28xx_io_method enum em28xx_io_method { IO_NONE , IO_READ , IO_MMAP , } 
s#em28xx_dmaqueue struct em28xx_dmaqueue { s#list_head active ; s#list_head queued ; t#wait_queue_head_t wq ; int pos ; } 
s#em28xx_buffer struct em28xx_buffer { s#videobuf_buffer vb ; s#list_head frame ; int top_field ; int receiving ; } 
s#em28xx_usb_isoc_ctl struct em28xx_usb_isoc_ctl { int max_pkt_size ; int num_bufs ; s#urb * * urb ; char * * transfer_buffer ; t#u8 cmd ; int pos , size , pktsize ; int field ; t#u32 tmp_buf ; int tmp_buf_len ; s#em28xx_buffer * vid_buf ; s#em28xx_buffer * vbi_buf ; int nfields ; int ( * isoc_copy ) ( s#em28xx * , s#urb * ) ; } 
e#em28xx_mode enum em28xx_mode { EM28XX_SUSPEND , EM28XX_ANALOG_MODE , EM28XX_DIGITAL_MODE , } 
s##em28xx_dvb
s#IR_i2c struct IR_i2c { s#ir_scancode_table * ir_codes ; s#i2c_client * c ; s#input_dev * input ; s#ir_input_state ir ; unsigned char old ; s#delayed_work work ; char name [ 32 ] ; char phys [ 32 ] ; int ( * get_key ) ( s#IR_i2c * , t#u32 * , t#u32 * ) ; } 
e#ir_kbd_get_key_fn enum ir_kbd_get_key_fn { IR_KBD_GET_KEY_CUSTOM = 0 , IR_KBD_GET_KEY_PIXELVIEW , IR_KBD_GET_KEY_PV951 , IR_KBD_GET_KEY_HAUP , IR_KBD_GET_KEY_KNC1 , IR_KBD_GET_KEY_FUSIONHDTV , IR_KBD_GET_KEY_HAUP_XVR , IR_KBD_GET_KEY_AVERMEDIA_CARDBUS , } 
s#IR_i2c_init_data struct IR_i2c_init_data { s#ir_scancode_table * ir_codes ; const char * name ; int type ; int ( * get_key ) ( s#IR_i2c * , t#u32 * , t#u32 * ) ; e#ir_kbd_get_key_fn internal_get_key_func ; } 
s#em28xx struct em28xx { char name [ 30 ] ; int model ; int devno ; e#em28xx_chip_id chip_id ; s#v4l2_device v4l2_dev ; s#em28xx_board board ; e#em28xx_sensor em28xx_sensor ; int sensor_xres , sensor_yres ; int sensor_xtal ; int progressive ; int vinmode , vinctl ; unsigned int has_audio_class : 1 ; unsigned int has_alsa_audio : 1 ; s#em28xx_fmt * format ; s#em28xx_IR * ir ; unsigned int wait_after_write ; s#list_head devlist ; t#u32 i2s_speed ; s#em28xx_audio_mode audio_mode ; int tuner_type ; int tuner_addr ; int tda9887_conf ; s#i2c_adapter i2c_adap ; s#i2c_client i2c_client ; int users ; s#video_device * vdev ; t#v4l2_std_id norm ; int ctl_freq ; unsigned int ctl_input ; unsigned int ctl_ainput ; unsigned int ctl_aoutput ; int mute ; int volume ; int width ; int height ; unsigned hscale ; unsigned vscale ; int interlaced ; unsigned int video_bytesread ; unsigned long hash ; unsigned long i2c_hash ; s#em28xx_audio adev ; e#em28xx_dev_state state ; e#em28xx_io_method io ; int capture_type ; int vbi_read ; unsigned char cur_field ; s#work_struct request_module_wk ; s#mutex lock ; s#mutex ctrl_urb_lock ; s#list_head inqueue , outqueue ; t#wait_queue_head_t open , wait_frame , wait_stream ; s#video_device * vbi_dev ; s#video_device * radio_dev ; unsigned int resources ; unsigned char eedata [ 256 ] ; s#em28xx_dmaqueue vidq ; s#em28xx_dmaqueue vbiq ; s#em28xx_usb_isoc_ctl isoc_ctl ; t#spinlock_t slock ; s#usb_device * udev ; int alt ; int max_pkt_size ; int num_alt ; unsigned int * alt_max_pkt_size ; s#urb * urb [ 5 ] ; char * transfer_buffer [ 5 ] ; char urb_buf [ 80 ] ; int ( * em28xx_write_regs ) ( s#em28xx * , t#u16 , char * , int ) ; int ( * em28xx_read_reg ) ( s#em28xx * , t#u16 ) ; int ( * em28xx_read_reg_req_len ) ( s#em28xx * , t#u8 , t#u16 , char * , int ) ; int ( * em28xx_write_regs_req ) ( s#em28xx * , t#u8 , t#u16 , char * , int ) ; int ( * em28xx_read_reg_req ) ( s#em28xx * , t#u8 , t#u16 ) ; e#em28xx_mode mode ; t#u16 reg_gpo_num , reg_gpio_num ; unsigned char reg_gpo , reg_gpio ; char snapshot_button_path [ 30 ] ; s#input_dev * sbutton_input_dev ; s#delayed_work sbutton_query_work ; s#em28xx_dvb * dvb ; s#i2c_board_info info ; s#IR_i2c_init_data init_data ; } 
em28xx_audio_analog_set int em28xx_audio_analog_set ( s#em28xx * ) 
em28xx_audio_setup int em28xx_audio_setup ( s#em28xx * ) 
em28xx_set_mode int em28xx_set_mode ( s#em28xx * , e#em28xx_mode ) 
em28xx_uninit_isoc void em28xx_uninit_isoc ( s#em28xx * ) 
em28xx_init_isoc int em28xx_init_isoc ( s#em28xx * , int , int , int , int ( * ) ( s#em28xx * , s#urb * ) ) 
em28xx_isoc_dvb_max_packetsize int em28xx_isoc_dvb_max_packetsize ( s#em28xx * ) 
s#em28xx_ops struct em28xx_ops { s#list_head next ; char * name ; int id ; int ( * init ) ( s#em28xx * ) ; int ( * fini ) ( s#em28xx * ) ; } 
em28xx_register_extension int em28xx_register_extension ( s#em28xx_ops * ) 
em28xx_unregister_extension void em28xx_unregister_extension ( s#em28xx_ops * ) 

/* drivers/media/video/gspca/gspca.o */
gspca_debug extern int gspca_debug 
s#gspca_frame struct gspca_frame { t#__u8 * data ; t#__u8 * data_end ; int vma_use_count ; s#v4l2_buffer v4l2_buf ; } 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##v4l2_device
s##usb_tt
s##mon_bus
s##ep_device
s##wusb_dev
s#cam struct cam { int bulk_size ; const s#v4l2_pix_format * cam_mode ; char nmodes ; t#__u8 bulk_nurbs ; t#u8 bulk ; t#u8 npkt ; t#u32 input_flags ; } 
s#ctrl struct ctrl { s#v4l2_queryctrl qctrl ; int ( * set ) ( s#gspca_dev * , t#__s32 ) ; int ( * get ) ( s#gspca_dev * , t#__s32 * ) ; } 
t#cam_cf_op typedef int ( * cam_cf_op ) ( s#gspca_dev * , const s#usb_device_id * ) 
t#cam_op typedef int ( * cam_op ) ( s#gspca_dev * ) 
t#cam_pkt_op typedef void ( * cam_pkt_op ) ( s#gspca_dev * , s#gspca_frame * , t#__u8 * , int ) 
t#cam_v_op typedef void ( * cam_v_op ) ( s#gspca_dev * ) 
t#cam_jpg_op typedef int ( * cam_jpg_op ) ( s#gspca_dev * , s#v4l2_jpegcompression * ) 
t#cam_qmnu_op typedef int ( * cam_qmnu_op ) ( s#gspca_dev * , s#v4l2_querymenu * ) 
t#cam_streamparm_op typedef int ( * cam_streamparm_op ) ( s#gspca_dev * , s#v4l2_streamparm * ) 
t#cam_ident_op typedef int ( * cam_ident_op ) ( s#gspca_dev * , s#v4l2_dbg_chip_ident * ) 
s#sd_desc struct sd_desc { const char * name ; const s#ctrl * ctrls ; int nctrls ; t#cam_cf_op config ; t#cam_op init ; t#cam_op start ; t#cam_pkt_op pkt_scan ; t#cam_op isoc_init ; t#cam_op isoc_nego ; t#cam_v_op stopN ; t#cam_v_op stop0 ; t#cam_v_op dq_callback ; t#cam_jpg_op get_jcomp ; t#cam_jpg_op set_jcomp ; t#cam_qmnu_op querymenu ; t#cam_streamparm_op get_streamparm ; t#cam_streamparm_op set_streamparm ; t#cam_ident_op get_chip_ident ; } 
s##scatterlist
s#gspca_dev struct gspca_dev { s#video_device vdev ; s#module * module ; s#usb_device * dev ; s#file * capt_file ; s#cam cam ; const s#sd_desc * sd_desc ; unsigned ctrl_dis ; t#__u8 * usb_buf ; s#urb * urb [ 4 ] ; t#__u8 * frbuf ; s#gspca_frame frame [ 16 ] ; t#__u32 frsz ; char nframes ; char fr_i ; char fr_q ; char fr_o ; signed char fr_queue [ 16 ] ; t#__u8 last_packet_type ; t#__s8 empty_packet ; t#__u8 streaming ; t#__u8 curr_mode ; t#__u32 pixfmt ; t#__u16 width ; t#__u16 height ; t#__u32 sequence ; t#wait_queue_head_t wq ; s#mutex usb_lock ; s#mutex read_lock ; s#mutex queue_lock ; char frozen ; char users ; char present ; char nbufread ; char nurbs ; char memory ; t#__u8 iface ; t#__u8 alt ; t#__u8 nbalt ; t#u16 pkt_size ; } 
gspca_get_i_frame s#gspca_frame * gspca_get_i_frame ( s#gspca_dev * ) 
e#gspca_packet_type enum gspca_packet_type { DISCARD_PACKET , FIRST_PACKET , INTER_PACKET , LAST_PACKET } 
gspca_frame_add s#gspca_frame * gspca_frame_add ( s#gspca_dev * , e#gspca_packet_type , s#gspca_frame * , const t#__u8 * , int ) 
gspca_dev_probe int gspca_dev_probe ( s#usb_interface * , const s#usb_device_id * , const s#sd_desc * , int , s#module * ) 
gspca_disconnect void gspca_disconnect ( s#usb_interface * ) 
gspca_suspend int gspca_suspend ( s#usb_interface * , t#pm_message_t ) 
gspca_resume int gspca_resume ( s#usb_interface * ) 
gspca_auto_gain_n_exposure int gspca_auto_gain_n_exposure ( s#gspca_dev * , int , int , int , int , int ) 

/* drivers/media/video/ivtv/ivtv-driver.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#ivtv_card_video_input struct ivtv_card_video_input { t#u8 video_type ; t#u8 audio_index ; t#u16 video_input ; } 
s#ivtv_card_audio_input struct ivtv_card_audio_input { t#u8 audio_type ; t#u32 audio_input ; t#u16 muxer_input ; } 
s#ivtv_card_output struct ivtv_card_output { t#u8 name [ 32 ] ; t#u16 video_output ; } 
s#ivtv_gpio_init struct ivtv_gpio_init { t#u16 direction ; t#u16 initial_value ; } 
s#ivtv_gpio_video_input struct ivtv_gpio_video_input { t#u16 mask ; t#u16 tuner ; t#u16 composite ; t#u16 svideo ; } 
s#ivtv_gpio_audio_input struct ivtv_gpio_audio_input { t#u16 mask ; t#u16 tuner ; t#u16 linein ; t#u16 radio ; } 
s#ivtv_gpio_audio_mute struct ivtv_gpio_audio_mute { t#u16 mask ; t#u16 mute ; } 
s#ivtv_gpio_audio_mode struct ivtv_gpio_audio_mode { t#u16 mask ; t#u16 mono ; t#u16 stereo ; t#u16 lang1 ; t#u16 lang2 ; t#u16 both ; } 
s#ivtv_gpio_audio_freq struct ivtv_gpio_audio_freq { t#u16 mask ; t#u16 f32000 ; t#u16 f44100 ; t#u16 f48000 ; } 
s#ivtv_gpio_audio_detect struct ivtv_gpio_audio_detect { t#u16 mask ; t#u16 stereo ; } 
s#ivtv_card_tuner struct ivtv_card_tuner { t#v4l2_std_id std ; int tuner ; } 
s#ivtv_card_tuner_i2c struct ivtv_card_tuner_i2c { unsigned short radio [ 2 ] ; unsigned short demod [ 2 ] ; unsigned short tv [ 4 ] ; } 
s#ivtv_card_pci_info struct ivtv_card_pci_info { t#u16 device ; t#u16 subsystem_vendor ; t#u16 subsystem_device ; } 
s#ivtv_card struct ivtv_card { int type ; char * name ; char * comment ; t#u32 v4l2_capabilities ; t#u32 hw_video ; t#u32 hw_audio ; t#u32 hw_audio_ctrl ; t#u32 hw_muxer ; t#u32 hw_all ; s#ivtv_card_video_input video_inputs [ 6 ] ; s#ivtv_card_audio_input audio_inputs [ 3 ] ; s#ivtv_card_audio_input radio_input ; int nof_outputs ; const s#ivtv_card_output * video_outputs ; t#u8 gr_config ; t#u8 xceive_pin ; s#ivtv_gpio_init gpio_init ; s#ivtv_gpio_video_input gpio_video_input ; s#ivtv_gpio_audio_input gpio_audio_input ; s#ivtv_gpio_audio_mute gpio_audio_mute ; s#ivtv_gpio_audio_mode gpio_audio_mode ; s#ivtv_gpio_audio_freq gpio_audio_freq ; s#ivtv_gpio_audio_detect gpio_audio_detect ; s#ivtv_card_tuner tuners [ 3 ] ; s#ivtv_card_tuner_i2c * i2c ; const s#ivtv_card_pci_info * pci_list ; } 
s#ivtv_options struct ivtv_options { int kilobytes [ 9 ] ; int cardtype ; int tuner ; int radio ; int newi2c ; } 
s#ivtv_queue struct ivtv_queue { s#list_head list ; t#u32 buffers ; t#u32 length ; t#u32 bytesused ; } 
s#ivtv_sg_host_element struct ivtv_sg_host_element { t#u32 src ; t#u32 dst ; t#u32 size ; } 
s#ivtv_sg_element struct ivtv_sg_element { t#__le32 src ; t#__le32 dst ; t#__le32 size ; } 
s#ivtv_stream struct ivtv_stream { s#video_device * vdev ; s#ivtv * itv ; const char * name ; int type ; t#u32 id ; t#spinlock_t qlock ; unsigned long s_flags ; int dma ; t#u32 pending_offset ; t#u32 pending_backup ; t#u64 pending_pts ; t#u32 dma_offset ; t#u32 dma_backup ; t#u64 dma_pts ; int subtype ; t#wait_queue_head_t waitq ; t#u32 dma_last_offset ; t#u32 buffers ; t#u32 buf_size ; t#u32 buffers_stolen ; s#ivtv_queue q_free ; s#ivtv_queue q_full ; s#ivtv_queue q_io ; s#ivtv_queue q_dma ; s#ivtv_queue q_predma ; t#u16 dma_xfer_cnt ; s#ivtv_sg_host_element * sg_pending ; s#ivtv_sg_host_element * sg_processing ; s#ivtv_sg_element * sg_dma ; t#dma_addr_t sg_handle ; int sg_pending_size ; int sg_processing_size ; int sg_processed ; s#scatterlist * SGlist ; } 
s##workqueue_struct
s#ivtv_user_dma struct ivtv_user_dma { s#mutex lock ; int page_count ; s#page * map [ ( 2883584 / ( ( 1UL ) << 12 ) ) ] ; s#page * bouncemap [ ( 2883584 / ( ( 1UL ) << 12 ) ) ] ; s#ivtv_sg_element SGarray [ ( 2883584 / ( ( 1UL ) << 12 ) ) ] ; t#dma_addr_t SG_handle ; int SG_length ; s#scatterlist SGlist [ ( 2883584 / ( ( 1UL ) << 12 ) ) ] ; } 
s#ivtv_mailbox struct ivtv_mailbox { t#u32 flags ; t#u32 cmd ; t#u32 retval ; t#u32 timeout ; t#u32 data [ 16 ] ; } 
s#ivtv_mailbox_data struct ivtv_mailbox_data { volatile s#ivtv_mailbox * mbox ; unsigned long busy ; t#u8 max_mbox ; } 
s#ivtv_api_cache struct ivtv_api_cache { unsigned long last_jiffies ; t#u32 data [ 16 ] ; } 
s#v4l2_prio_state struct v4l2_prio_state { t#atomic_t prios [ 4 ] ; } 
s#vbi_cc struct vbi_cc { t#u8 odd [ 2 ] ; t#u8 even [ 2 ] ; ; } 
s#vbi_vps struct vbi_vps { t#u8 data [ 5 ] ; } 
s#ivtv_buffer struct ivtv_buffer { s#list_head list ; t#dma_addr_t dma_handle ; unsigned short b_flags ; unsigned short dma_xfer_cnt ; char * buf ; t#u32 bytesused ; t#u32 readpos ; } 
s#vbi_info struct vbi_info { t#u32 raw_decoder_line_size ; t#u8 raw_decoder_sav_odd_field ; t#u8 raw_decoder_sav_even_field ; t#u32 sliced_decoder_line_size ; t#u8 sliced_decoder_sav_odd_field ; t#u8 sliced_decoder_sav_even_field ; t#u32 start [ 2 ] ; t#u32 count ; t#u32 raw_size ; t#u32 sliced_size ; t#u32 dec_start ; t#u32 enc_start ; t#u32 enc_size ; int fpi ; s#v4l2_format in ; s#v4l2_sliced_vbi_format * sliced_in ; int insert_mpeg ; t#u32 frame ; s#vbi_cc cc_payload [ 256 ] ; int cc_payload_idx ; t#u8 cc_missing_cnt ; int wss_payload ; t#u8 wss_missing_cnt ; s#vbi_vps vps_payload ; s#v4l2_sliced_vbi_data sliced_data [ 36 ] ; s#v4l2_sliced_vbi_data sliced_dec_data [ 36 ] ; t#u8 * sliced_mpeg_data [ 32 ] ; t#u32 sliced_mpeg_size [ 32 ] ; s#ivtv_buffer sliced_mpeg_buf ; t#u32 inserted_frame ; } 
s#yuv_frame_info struct yuv_frame_info { t#u32 update ; t#s32 src_x ; t#s32 src_y ; t#u32 src_w ; t#u32 src_h ; t#s32 dst_x ; t#s32 dst_y ; t#u32 dst_w ; t#u32 dst_h ; t#s32 pan_x ; t#s32 pan_y ; t#u32 vis_w ; t#u32 vis_h ; t#u32 interlaced_y ; t#u32 interlaced_uv ; t#s32 tru_x ; t#u32 tru_w ; t#u32 tru_h ; t#u32 offset_y ; t#s32 lace_mode ; t#u32 sync_field ; t#u32 delay ; t#u32 interlaced ; } 
s#yuv_playback_info struct yuv_playback_info { t#u32 reg_2834 ; t#u32 reg_2838 ; t#u32 reg_283c ; t#u32 reg_2840 ; t#u32 reg_2844 ; t#u32 reg_2848 ; t#u32 reg_2854 ; t#u32 reg_285c ; t#u32 reg_2864 ; t#u32 reg_2870 ; t#u32 reg_2874 ; t#u32 reg_2890 ; t#u32 reg_2898 ; t#u32 reg_289c ; t#u32 reg_2918 ; t#u32 reg_291c ; t#u32 reg_2920 ; t#u32 reg_2924 ; t#u32 reg_2928 ; t#u32 reg_292c ; t#u32 reg_2930 ; t#u32 reg_2934 ; t#u32 reg_2938 ; t#u32 reg_293c ; t#u32 reg_2940 ; t#u32 reg_2944 ; t#u32 reg_2948 ; t#u32 reg_294c ; t#u32 reg_2950 ; t#u32 reg_2954 ; t#u32 reg_2958 ; t#u32 reg_295c ; t#u32 reg_2960 ; t#u32 reg_2964 ; t#u32 reg_2968 ; t#u32 reg_296c ; t#u32 reg_2970 ; int v_filter_1 ; int v_filter_2 ; int h_filter ; t#u8 track_osd ; t#u32 osd_x_offset ; t#u32 osd_y_offset ; t#u32 osd_x_pan ; t#u32 osd_y_pan ; t#u32 osd_vis_w ; t#u32 osd_vis_h ; t#u32 osd_full_w ; t#u32 osd_full_h ; int decode_height ; int lace_mode ; int lace_threshold ; int lace_sync_field ; t#atomic_t next_dma_frame ; t#atomic_t next_fill_frame ; t#u32 yuv_forced_update ; int update_frame ; t#u8 fields_lapsed ; s#yuv_frame_info new_frame_info [ 8 ] ; s#yuv_frame_info old_frame_info ; s#yuv_frame_info old_frame_info_args ; void * blanking_ptr ; t#dma_addr_t blanking_dmaptr ; int stream_size ; t#u8 draw_frame ; t#u8 max_frames_buffered ; s#v4l2_rect main_rect ; t#u32 v4l2_src_w ; t#u32 v4l2_src_h ; t#u8 running ; } 
s##osd_info
s#ivtv struct ivtv { s#pci_dev * pdev ; const s#ivtv_card * card ; const char * card_name ; const s#ivtv_card_tuner_i2c * card_i2c ; t#u8 has_cx23415 ; t#u8 pvr150_workaround ; t#u8 nof_inputs ; t#u8 nof_audio_inputs ; t#u32 v4l2_cap ; t#u32 hw_flags ; t#v4l2_std_id tuner_std ; s#v4l2_subdev * sd_video ; s#v4l2_subdev * sd_audio ; s#v4l2_subdev * sd_muxer ; t#u32 base_addr ; volatile void * enc_mem ; volatile void * dec_mem ; volatile void * reg_mem ; s#ivtv_options options ; s#v4l2_device v4l2_dev ; s#v4l2_subdev sd_gpio ; t#u16 instance ; unsigned long i_flags ; t#u8 is_50hz ; t#u8 is_60hz ; t#u8 is_out_50hz ; t#u8 is_out_60hz ; int output_mode ; t#u32 audio_input ; t#u32 active_input ; t#u32 active_output ; t#v4l2_std_id std ; t#v4l2_std_id std_out ; t#u8 audio_stereo_mode ; t#u8 audio_bilingual_mode ; s#cx2341x_mpeg_params params ; t#spinlock_t lock ; s#mutex serialize_lock ; int stream_buf_size [ 9 ] ; s#ivtv_stream streams [ 9 ] ; t#atomic_t capturing ; t#atomic_t decoding ; t#u32 irqmask ; t#u32 irq_rr_idx ; s#workqueue_struct * irq_work_queues ; s#work_struct irq_work_queue ; t#spinlock_t dma_reg_lock ; int cur_dma_stream ; int cur_pio_stream ; t#u32 dma_data_req_offset ; t#u32 dma_data_req_size ; int dma_retries ; s#ivtv_user_dma udma ; s#timer_list dma_timer ; t#u32 last_vsync_field ; t#wait_queue_head_t dma_waitq ; t#wait_queue_head_t eos_waitq ; t#wait_queue_head_t event_waitq ; t#wait_queue_head_t vsync_waitq ; s#ivtv_mailbox_data enc_mbox ; s#ivtv_mailbox_data dec_mbox ; s#ivtv_api_cache api_cache [ 256 ] ; s#i2c_adapter i2c_adap ; s#i2c_algo_bit_data i2c_algo ; s#i2c_client i2c_client ; int i2c_state ; s#mutex i2c_bus_lock ; t#u32 pgm_info_offset ; t#u32 pgm_info_num ; t#u32 pgm_info_write_idx ; t#u32 pgm_info_read_idx ; s#v4l2_enc_idx_entry pgm_info [ ( 400 ) ] ; t#u32 open_id ; s#v4l2_prio_state prio ; int search_pack_header ; int speed ; t#u8 speed_mute_audio ; t#u64 mpg_data_received ; t#u64 vbi_data_inserted ; t#u32 last_dec_timing [ 3 ] ; unsigned long dualwatch_jiffies ; t#u32 dualwatch_stereo_mode ; s#vbi_info vbi ; s#yuv_playback_info yuv_info ; unsigned long osd_video_pbase ; int osd_global_alpha_state ; int osd_local_alpha_state ; int osd_chroma_key_state ; t#u8 osd_global_alpha ; t#u32 osd_chroma_key ; s#v4l2_rect osd_rect ; s#v4l2_rect main_rect ; s#osd_info * osd_info ; } 
ivtv_set_irq_mask void ivtv_set_irq_mask ( s#ivtv * , t#u32 ) 
ivtv_api int ivtv_api ( s#ivtv * , int , int , t#u32 [ ] ) 
ivtv_vapi int ivtv_vapi ( s#ivtv * , int , int , ... ) 
ivtv_vapi_result int ivtv_vapi_result ( s#ivtv * , t#u32 [ 16 ] , int , int , ... ) 
ivtv_clear_irq_mask void ivtv_clear_irq_mask ( s#ivtv * , t#u32 ) 
ivtv_debug extern int ivtv_debug 
ivtv_reset_ir_gpio void ivtv_reset_ir_gpio ( s#ivtv * ) 
ivtv_udma_setup int ivtv_udma_setup ( s#ivtv * , unsigned long , void * , int ) 
ivtv_udma_unmap void ivtv_udma_unmap ( s#ivtv * ) 
ivtv_udma_alloc void ivtv_udma_alloc ( s#ivtv * ) 
ivtv_udma_prepare void ivtv_udma_prepare ( s#ivtv * ) 
ivtv_init_on_first_open int ivtv_init_on_first_open ( s#ivtv * ) 

/* drivers/media/video/saa7134/saa7134-cards.o */
saa7134_tuner_callback int saa7134_tuner_callback ( void * , int , int , int ) 

/* drivers/media/video/saa7134/saa7134-core.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
saa7134_devlist_lock extern s#mutex saa7134_devlist_lock 
saa7134_devlist extern s#list_head saa7134_devlist 
e#saa7134_mpeg_type enum saa7134_mpeg_type { SAA7134_MPEG_UNUSED , SAA7134_MPEG_EMPRESS , SAA7134_MPEG_DVB , } 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
e#saa7134_audio_in enum saa7134_audio_in { TV = 1 , LINE1 = 2 , LINE2 = 3 , LINE2_LEFT , } 
s#saa7134_pgtable struct saa7134_pgtable { unsigned int size ; t#__le32 * cpu ; t#dma_addr_t dma ; } 
s#videobuf_dmabuf struct videobuf_dmabuf { t#u32 magic ; int offset ; s#page * * pages ; void * vmalloc ; t#dma_addr_t bus_addr ; s#scatterlist * sglist ; int sglen ; int nr_pages ; int direction ; } 
s##snd_info_entry
s##snd_shutdown_f_ops
s##snd_mixer_oss
s#snd_pcm_oss_setup struct snd_pcm_oss_setup { char * task_name ; unsigned int disable : 1 , direct : 1 , block : 1 , nonblock : 1 , partialfrag : 1 , nosilence : 1 , buggyptr : 1 ; unsigned int periods ; unsigned int period_size ; s#snd_pcm_oss_setup * next ; } 
s#snd_pcm_oss_stream struct snd_pcm_oss_stream { s#snd_pcm_oss_setup * setup_list ; s#mutex setup_mutex ; s#snd_info_entry * proc_entry ; } 
s#snd_pcm_str struct snd_pcm_str { int stream ; s#snd_pcm * pcm ; unsigned int substream_count ; unsigned int substream_opened ; s#snd_pcm_substream * substream ; s#snd_pcm_oss_stream oss ; s#snd_info_entry * proc_root ; s#snd_info_entry * proc_info_entry ; unsigned int xrun_debug ; s#snd_info_entry * proc_xrun_debug_entry ; } 
s#snd_pcm_oss struct snd_pcm_oss { int reg ; unsigned int reg_mask ; } 
s#snd_pcm struct snd_pcm { s#snd_card * card ; s#list_head list ; int device ; unsigned int info_flags ; unsigned short dev_class ; unsigned short dev_subclass ; char id [ 64 ] ; char name [ 80 ] ; s#snd_pcm_str streams [ 2 ] ; s#mutex open_mutex ; t#wait_queue_head_t open_wait ; void * private_data ; void ( * private_free ) ( s#snd_pcm * ) ; s#device * dev ; s#snd_pcm_oss oss ; } 
s#snd_dma_device struct snd_dma_device { int type ; s#device * dev ; } 
s#snd_dma_buffer struct snd_dma_buffer { s#snd_dma_device dev ; unsigned char * area ; t#dma_addr_t addr ; t#size_t bytes ; void * private_data ; } 
s#snd_mask struct snd_mask { t#__u32 bits [ ( 256 + 31 ) / 32 ] ; } 
s#snd_interval struct snd_interval { unsigned int min , max ; unsigned int openmin : 1 , openmax : 1 , integer : 1 , empty : 1 ; } 
t#snd_pcm_uframes_t typedef unsigned long snd_pcm_uframes_t 
s#snd_pcm_hw_params struct snd_pcm_hw_params { unsigned int flags ; s#snd_mask masks [ 2 - 0 + 1 ] ; s#snd_mask mres [ 5 ] ; s#snd_interval intervals [ 19 - 8 + 1 ] ; s#snd_interval ires [ 9 ] ; unsigned int rmask ; unsigned int cmask ; unsigned int info ; unsigned int msbits ; unsigned int rate_num ; unsigned int rate_den ; t#snd_pcm_uframes_t fifo_size ; unsigned char reserved [ 64 ] ; } 
s#snd_pcm_ops struct snd_pcm_ops { int ( * open ) ( s#snd_pcm_substream * ) ; int ( * close ) ( s#snd_pcm_substream * ) ; int ( * ioctl ) ( s#snd_pcm_substream * , unsigned int , void * ) ; int ( * hw_params ) ( s#snd_pcm_substream * , s#snd_pcm_hw_params * ) ; int ( * hw_free ) ( s#snd_pcm_substream * ) ; int ( * prepare ) ( s#snd_pcm_substream * ) ; int ( * trigger ) ( s#snd_pcm_substream * , int ) ; t#snd_pcm_uframes_t ( * pointer ) ( s#snd_pcm_substream * ) ; int ( * copy ) ( s#snd_pcm_substream * , int , t#snd_pcm_uframes_t , void * , t#snd_pcm_uframes_t ) ; int ( * silence ) ( s#snd_pcm_substream * , int , t#snd_pcm_uframes_t , t#snd_pcm_uframes_t ) ; s#page * ( * page ) ( s#snd_pcm_substream * , unsigned long ) ; int ( * mmap ) ( s#snd_pcm_substream * , s#vm_area_struct * ) ; int ( * ack ) ( s#snd_pcm_substream * ) ; } 
t#snd_pcm_sframes_t typedef signed long snd_pcm_sframes_t 
t#snd_pcm_access_t typedef int snd_pcm_access_t 
t#snd_pcm_format_t typedef int snd_pcm_format_t 
t#snd_pcm_subformat_t typedef int snd_pcm_subformat_t 
u#snd_pcm_sync_id union snd_pcm_sync_id { unsigned char id [ 16 ] ; unsigned short id16 [ 8 ] ; unsigned int id32 [ 4 ] ; } 
t#snd_pcm_state_t typedef int snd_pcm_state_t 
s#snd_pcm_mmap_status struct snd_pcm_mmap_status { t#snd_pcm_state_t state ; int pad1 ; t#snd_pcm_uframes_t hw_ptr ; s#timespec tstamp ; t#snd_pcm_state_t suspended_state ; } 
s#snd_pcm_mmap_control struct snd_pcm_mmap_control { t#snd_pcm_uframes_t appl_ptr ; t#snd_pcm_uframes_t avail_min ; } 
s#snd_pcm_hardware struct snd_pcm_hardware { unsigned int info ; t#u64 formats ; unsigned int rates ; unsigned int rate_min ; unsigned int rate_max ; unsigned int channels_min ; unsigned int channels_max ; t#size_t buffer_bytes_max ; t#size_t period_bytes_min ; t#size_t period_bytes_max ; unsigned int periods_min ; unsigned int periods_max ; t#size_t fifo_size ; } 
t#snd_pcm_hw_rule_func_t typedef int ( * snd_pcm_hw_rule_func_t ) ( s#snd_pcm_hw_params * , s#snd_pcm_hw_rule * ) 
s#snd_pcm_hw_rule struct snd_pcm_hw_rule { unsigned int cond ; t#snd_pcm_hw_rule_func_t func ; int var ; int deps [ 4 ] ; void * private ; } 
s#snd_pcm_hw_constraints struct snd_pcm_hw_constraints { s#snd_mask masks [ 2 - 0 + 1 ] ; s#snd_interval intervals [ 19 - 8 + 1 ] ; unsigned int rules_num ; unsigned int rules_all ; s#snd_pcm_hw_rule * rules ; } 
s##snd_pcm_plugin
s#snd_pcm_oss_runtime struct snd_pcm_oss_runtime { unsigned params : 1 , prepare : 1 , trigger : 1 , sync_trigger : 1 ; int rate ; int format ; unsigned int channels ; unsigned int fragshift ; unsigned int maxfrags ; unsigned int subdivision ; t#size_t period_bytes ; t#size_t period_frames ; t#size_t period_ptr ; unsigned int periods ; t#size_t buffer_bytes ; t#size_t bytes ; t#size_t mmap_bytes ; char * buffer ; t#size_t buffer_used ; s#mutex params_lock ; s#snd_pcm_plugin * plugin_first ; s#snd_pcm_plugin * plugin_last ; unsigned int prev_hw_ptr_interrupt ; } 
s#snd_pcm_runtime struct snd_pcm_runtime { s#snd_pcm_substream * trigger_master ; s#timespec trigger_tstamp ; int overrange ; t#snd_pcm_uframes_t avail_max ; t#snd_pcm_uframes_t hw_ptr_base ; t#snd_pcm_uframes_t hw_ptr_interrupt ; unsigned long hw_ptr_jiffies ; t#snd_pcm_sframes_t delay ; t#snd_pcm_access_t access ; t#snd_pcm_format_t format ; t#snd_pcm_subformat_t subformat ; unsigned int rate ; unsigned int channels ; t#snd_pcm_uframes_t period_size ; unsigned int periods ; t#snd_pcm_uframes_t buffer_size ; t#snd_pcm_uframes_t min_align ; t#size_t byte_align ; unsigned int frame_bits ; unsigned int sample_bits ; unsigned int info ; unsigned int rate_num ; unsigned int rate_den ; int tstamp_mode ; unsigned int period_step ; t#snd_pcm_uframes_t start_threshold ; t#snd_pcm_uframes_t stop_threshold ; t#snd_pcm_uframes_t silence_threshold ; t#snd_pcm_uframes_t silence_size ; t#snd_pcm_uframes_t boundary ; t#snd_pcm_uframes_t silence_start ; t#snd_pcm_uframes_t silence_filled ; u#snd_pcm_sync_id sync ; s#snd_pcm_mmap_status * status ; s#snd_pcm_mmap_control * control ; t#wait_queue_head_t sleep ; s#fasync_struct * fasync ; void * private_data ; void ( * private_free ) ( s#snd_pcm_runtime * ) ; s#snd_pcm_hardware hw ; s#snd_pcm_hw_constraints hw_constraints ; void ( * transfer_ack_begin ) ( s#snd_pcm_substream * ) ; void ( * transfer_ack_end ) ( s#snd_pcm_substream * ) ; unsigned int timer_resolution ; int tstamp_type ; unsigned char * dma_area ; t#dma_addr_t dma_addr ; t#size_t dma_bytes ; s#snd_dma_buffer * dma_buffer_p ; s#snd_pcm_oss_runtime oss ; } 
s##snd_timer
s#snd_pcm_group struct snd_pcm_group { t#spinlock_t lock ; s#list_head substreams ; int count ; } 
s#snd_pcm_oss_substream struct snd_pcm_oss_substream { unsigned oss : 1 ; s#snd_pcm_oss_setup setup ; } 
s#snd_pcm_substream struct snd_pcm_substream { s#snd_pcm * pcm ; s#snd_pcm_str * pstr ; void * private_data ; int number ; char name [ 32 ] ; int stream ; char latency_id [ 20 ] ; t#size_t buffer_bytes_max ; s#snd_dma_buffer dma_buffer ; unsigned int dma_buf_id ; t#size_t dma_max ; s#snd_pcm_ops * ops ; s#snd_pcm_runtime * runtime ; s#snd_timer * timer ; unsigned timer_running : 1 ; s#snd_pcm_substream * next ; s#list_head link_list ; s#snd_pcm_group self_group ; s#snd_pcm_group * group ; void * file ; int ref_count ; t#atomic_t mmap_count ; unsigned int f_flags ; void ( * pcm_release ) ( s#snd_pcm_substream * ) ; s#snd_pcm_oss_substream oss ; s#snd_info_entry * proc_root ; s#snd_info_entry * proc_info_entry ; s#snd_info_entry * proc_hw_params_entry ; s#snd_info_entry * proc_sw_params_entry ; s#snd_info_entry * proc_status_entry ; s#snd_info_entry * proc_prealloc_entry ; s#snd_info_entry * proc_prealloc_max_entry ; unsigned int hw_opened : 1 ; } 
s#saa7134_dmasound struct saa7134_dmasound { s#mutex lock ; int minor_mixer ; int minor_dsp ; unsigned int users_dsp ; e#saa7134_audio_in input ; unsigned int count ; unsigned int line1 ; unsigned int line2 ; unsigned int afmt ; unsigned int rate ; unsigned int channels ; unsigned int recording_on ; unsigned int dma_running ; unsigned int blocks ; unsigned int blksize ; unsigned int bufsize ; s#saa7134_pgtable pt ; s#videobuf_dmabuf dma ; unsigned int dma_blk ; unsigned int read_offset ; unsigned int read_count ; void * priv_data ; s#snd_pcm_substream * substream ; } 
s#card_ir struct card_ir { s#input_dev * dev ; s#ir_input_state ir ; char name [ 32 ] ; char phys [ 32 ] ; t#u32 mask_keycode ; t#u32 mask_keydown ; t#u32 mask_keyup ; t#u32 polling ; t#u32 last_gpio ; int shift_by ; int start ; int addr ; int rc5_key_timeout ; int rc5_remote_gap ; s#work_struct work ; s#timer_list timer ; t#u32 rc5_gpio ; s#timer_list timer_end ; s#timer_list timer_keyup ; t#u32 last_rc5 ; t#u32 last_bit ; t#u32 code ; s#timeval base_time ; int active ; t#u32 nec_gpio ; s#tasklet_struct tlet ; } 
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#saa7134_format struct saa7134_format { char * name ; unsigned int fourcc ; unsigned int depth ; unsigned int pm ; unsigned int vshift ; unsigned int hshift ; unsigned int bswap : 1 ; unsigned int wswap : 1 ; unsigned int yuv : 1 ; unsigned int planar : 1 ; unsigned int uvswap : 1 ; } 
s#saa7134_buf struct saa7134_buf { s#videobuf_buffer vb ; s#saa7134_format * fmt ; unsigned int top_seen ; int ( * activate ) ( s#saa7134_dev * , s#saa7134_buf * , s#saa7134_buf * ) ; s#saa7134_pgtable * pt ; } 
s#saa7134_dmaqueue struct saa7134_dmaqueue { s#saa7134_dev * dev ; s#saa7134_buf * curr ; s#list_head queue ; s#timer_list timeout ; unsigned int need_two ; } 
s#saa7134_tvnorm struct saa7134_tvnorm { char * name ; t#v4l2_std_id id ; unsigned int sync_control ; unsigned int luma_control ; unsigned int chroma_ctrl1 ; unsigned int chroma_gain ; unsigned int chroma_ctrl2 ; unsigned int vgate_misc ; unsigned int h_start ; unsigned int h_stop ; unsigned int video_v_start ; unsigned int video_v_stop ; unsigned int vbi_v_start_0 ; unsigned int vbi_v_stop_0 ; unsigned int src_timing ; unsigned int vbi_v_start_1 ; } 
e#saa7134_tvaudio_mode enum saa7134_tvaudio_mode { TVAUDIO_FM_MONO = 1 , TVAUDIO_FM_BG_STEREO = 2 , TVAUDIO_FM_SAT_STEREO = 3 , TVAUDIO_FM_K_STEREO = 4 , TVAUDIO_NICAM_AM = 5 , TVAUDIO_NICAM_FM = 6 , } 
s#saa7134_tvaudio struct saa7134_tvaudio { char * name ; t#v4l2_std_id std ; e#saa7134_tvaudio_mode mode ; int carr1 ; int carr2 ; } 
s#saa7134_thread struct saa7134_thread { s#task_struct * thread ; unsigned int scan1 ; unsigned int scan2 ; unsigned int mode ; unsigned int stopped ; } 
s#saa7134_input struct saa7134_input { char * name ; unsigned int vmux ; e#saa7134_audio_in amux ; unsigned int gpio ; unsigned int tv : 1 ; } 
s#saa7134_ts struct saa7134_ts { s#saa7134_pgtable pt_ts ; int nr_packets ; int nr_bufs ; } 
s#saa7134_dev struct saa7134_dev { s#list_head devlist ; s#mutex lock ; t#spinlock_t slock ; s#v4l2_prio_state prio ; s#v4l2_device v4l2_dev ; s#work_struct request_module_wk ; int autodetected ; unsigned int resources ; s#video_device * video_dev ; s#video_device * radio_dev ; s#video_device * vbi_dev ; s#saa7134_dmasound dmasound ; int has_remote ; s#card_ir * remote ; char name [ 32 ] ; int nr ; s#pci_dev * pci ; unsigned char pci_rev , pci_lat ; t#__u32 * lmmio ; t#__u8 * bmmio ; unsigned int board ; unsigned int tuner_type ; unsigned int radio_type ; unsigned char tuner_addr ; unsigned char radio_addr ; unsigned int tda9887_conf ; unsigned int gpio_value ; s#i2c_adapter i2c_adap ; s#i2c_client i2c_client ; unsigned char eedata [ 256 ] ; int has_rds ; s#v4l2_framebuffer ovbuf ; s#saa7134_format * ovfmt ; unsigned int ovenable ; e#v4l2_field ovfield ; s#saa7134_dmaqueue video_q ; s#saa7134_dmaqueue vbi_q ; unsigned int video_fieldcount ; unsigned int vbi_fieldcount ; s#saa7134_tvnorm * tvnorm ; s#saa7134_tvaudio * tvaudio ; unsigned int ctl_input ; int ctl_bright ; int ctl_contrast ; int ctl_hue ; int ctl_saturation ; int ctl_freq ; int ctl_mute ; int ctl_volume ; int ctl_invert ; int ctl_mirror ; int ctl_y_odd ; int ctl_y_even ; int ctl_automute ; s#v4l2_rect crop_bounds ; s#v4l2_rect crop_defrect ; s#v4l2_rect crop_current ; unsigned int automute ; s#saa7134_thread thread ; s#saa7134_input * input ; s#saa7134_input * hw_input ; unsigned int hw_mute ; int last_carrier ; int nosignal ; unsigned int insuspend ; s#i2c_board_info info ; s#IR_i2c_init_data init_data ; s#saa7134_ts ts ; s#saa7134_dmaqueue ts_q ; int ts_started ; s#saa7134_mpeg_ops * mops ; s#video_device * empress_dev ; s#videobuf_queue empress_tsq ; t#atomic_t empress_users ; s#work_struct empress_workqueue ; int empress_started ; s#videobuf_dvb_frontends frontends ; int ( * original_demod_sleep ) ( s#dvb_frontend * ) ; int ( * original_set_voltage ) ( s#dvb_frontend * , t#fe_sec_voltage_t ) ; int ( * original_set_high_voltage ) ( s#dvb_frontend * , long ) ; void ( * gate_ctrl ) ( s#saa7134_dev * , int ) ; } 
s#saa7134_mpeg_ops struct saa7134_mpeg_ops { e#saa7134_mpeg_type type ; s#list_head next ; int ( * init ) ( s#saa7134_dev * ) ; int ( * fini ) ( s#saa7134_dev * ) ; void ( * signal_change ) ( s#saa7134_dev * ) ; } 
saa7134_ts_register int saa7134_ts_register ( s#saa7134_mpeg_ops * ) 
saa7134_ts_unregister void saa7134_ts_unregister ( s#saa7134_mpeg_ops * ) 
saa7134_set_gpio void saa7134_set_gpio ( s#saa7134_dev * , int , int ) 
e#saa7134_video_out enum saa7134_video_out { CCIR656 = 1 , } 
e#saa7134_mpeg_ts_type enum saa7134_mpeg_ts_type { SAA7134_MPEG_TS_PARALLEL = 0 , SAA7134_MPEG_TS_SERIAL , } 
s#saa7134_board struct saa7134_board { char * name ; unsigned int audio_clock ; unsigned int gpiomask ; s#saa7134_input inputs [ 8 ] ; s#saa7134_input radio ; s#saa7134_input mute ; unsigned int tuner_type ; unsigned int radio_type ; unsigned char tuner_addr ; unsigned char radio_addr ; unsigned char empress_addr ; unsigned char rds_addr ; unsigned int tda9887_conf ; unsigned int tuner_config ; e#saa7134_video_out video_out ; e#saa7134_mpeg_type mpeg ; e#saa7134_mpeg_ts_type ts_type ; unsigned int vid_port_opts ; unsigned int ts_force_val : 1 ; } 
saa7134_boards extern s#saa7134_board saa7134_boards [ ] 
saa7134_dmasound_init extern int ( * saa7134_dmasound_init ) ( s#saa7134_dev * ) 
saa7134_dmasound_exit extern int ( * saa7134_dmasound_exit ) ( s#saa7134_dev * ) 
saa7134_pgtable_free void saa7134_pgtable_free ( s#pci_dev * , s#saa7134_pgtable * ) 
saa7134_pgtable_build int saa7134_pgtable_build ( s#pci_dev * , s#saa7134_pgtable * , s#scatterlist * , unsigned int , unsigned int ) 
saa7134_pgtable_alloc int saa7134_pgtable_alloc ( s#pci_dev * , s#saa7134_pgtable * ) 
saa7134_set_dmabits int saa7134_set_dmabits ( s#saa7134_dev * ) 

/* drivers/media/video/saa7134/saa7134-ts.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
saa7134_ts_qops extern s#videobuf_queue_ops saa7134_ts_qops 

/* drivers/media/video/saa7134/saa7134-tvaudio.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##snd_info_entry
s##snd_shutdown_f_ops
s##snd_mixer_oss
s##snd_pcm_plugin
s##snd_timer
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
saa_dsp_writel int saa_dsp_writel ( s#saa7134_dev * , int , t#u32 ) 
saa7134_tvaudio_setmute void saa7134_tvaudio_setmute ( s#saa7134_dev * ) 

/* drivers/media/video/saa7134/saa7134-video.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##snd_info_entry
s##snd_shutdown_f_ops
s##snd_mixer_oss
s##snd_pcm_plugin
s##snd_timer
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#saa7134_fh struct saa7134_fh { s#saa7134_dev * dev ; unsigned int radio ; e#v4l2_buf_type type ; unsigned int resources ; e#v4l2_priority prio ; s#v4l2_window win ; s#v4l2_clip clips [ 8 ] ; unsigned int nclips ; s#saa7134_format * fmt ; unsigned int width , height ; s#videobuf_queue cap ; s#saa7134_pgtable pt_cap ; s#videobuf_queue vbi ; s#saa7134_pgtable pt_vbi ; } 
saa7134_g_ctrl_internal int saa7134_g_ctrl_internal ( s#saa7134_dev * , s#saa7134_fh * , s#v4l2_control * ) 
saa7134_s_ctrl_internal int saa7134_s_ctrl_internal ( s#saa7134_dev * , s#saa7134_fh * , s#v4l2_control * ) 
saa7134_queryctrl int saa7134_queryctrl ( s#file * , void * , s#v4l2_queryctrl * ) 
saa7134_s_std_internal int saa7134_s_std_internal ( s#saa7134_dev * , s#saa7134_fh * , t#v4l2_std_id * ) 

/* drivers/media/video/soc_camera.o */
s#soc_camera_data_format struct soc_camera_data_format { const char * name ; unsigned int depth ; t#__u32 fourcc ; e#v4l2_colorspace colorspace ; } 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#soc_camera_sense struct soc_camera_sense { unsigned long flags ; unsigned long master_clock ; unsigned long pixel_clock_max ; unsigned long pixel_clock ; } 
s#soc_camera_ops struct soc_camera_ops { int ( * suspend ) ( s#soc_camera_device * , t#pm_message_t ) ; int ( * resume ) ( s#soc_camera_device * ) ; unsigned long ( * query_bus_param ) ( s#soc_camera_device * ) ; int ( * set_bus_param ) ( s#soc_camera_device * , unsigned long ) ; int ( * enum_input ) ( s#soc_camera_device * , s#v4l2_input * ) ; const s#v4l2_queryctrl * controls ; int num_controls ; } 
s##tuner_setup
s#soc_camera_format_xlate struct soc_camera_format_xlate { const s#soc_camera_data_format * cam_fmt ; const s#soc_camera_data_format * host_fmt ; unsigned char buswidth ; } 
s#soc_camera_device struct soc_camera_device { s#list_head list ; s#device dev ; s#device * pdev ; t#s32 user_width ; t#s32 user_height ; unsigned short width_min ; unsigned short height_min ; unsigned short y_skip_top ; unsigned char iface ; unsigned char devnum ; unsigned char buswidth ; s#soc_camera_sense * sense ; s#soc_camera_ops * ops ; s#video_device * vdev ; const s#soc_camera_data_format * current_fmt ; const s#soc_camera_data_format * formats ; int num_formats ; s#soc_camera_format_xlate * user_formats ; int num_user_formats ; e#v4l2_field field ; void * host_priv ; int use_count ; s#mutex video_lock ; } 
soc_camera_format_by_fourcc const s#soc_camera_data_format * soc_camera_format_by_fourcc ( s#soc_camera_device * , unsigned int ) 
soc_camera_xlate_by_fourcc const s#soc_camera_format_xlate * soc_camera_xlate_by_fourcc ( s#soc_camera_device * , unsigned int ) 
s#soc_camera_link struct soc_camera_link { int bus_id ; unsigned long flags ; int i2c_adapter_id ; s#i2c_board_info * board_info ; const char * module_name ; int ( * add_device ) ( s#soc_camera_link * , s#device * ) ; void ( * del_device ) ( s#soc_camera_link * ) ; int ( * power ) ( s#device * , int ) ; int ( * reset ) ( s#device * ) ; int ( * set_bus_param ) ( s#soc_camera_link * , unsigned long ) ; unsigned long ( * query_bus_param ) ( s#soc_camera_link * ) ; void ( * free_bus ) ( s#soc_camera_link * ) ; } 
soc_camera_apply_sensor_flags extern unsigned long soc_camera_apply_sensor_flags ( s#soc_camera_link * , unsigned long ) 
s#soc_camera_file struct soc_camera_file { s#soc_camera_device * icd ; s#videobuf_queue vb_vidq ; } 
s#soc_camera_host_ops struct soc_camera_host_ops { s#module * owner ; int ( * add ) ( s#soc_camera_device * ) ; void ( * remove ) ( s#soc_camera_device * ) ; int ( * suspend ) ( s#soc_camera_device * , t#pm_message_t ) ; int ( * resume ) ( s#soc_camera_device * ) ; int ( * get_formats ) ( s#soc_camera_device * , int , s#soc_camera_format_xlate * ) ; void ( * put_formats ) ( s#soc_camera_device * ) ; int ( * cropcap ) ( s#soc_camera_device * , s#v4l2_cropcap * ) ; int ( * get_crop ) ( s#soc_camera_device * , s#v4l2_crop * ) ; int ( * set_crop ) ( s#soc_camera_device * , s#v4l2_crop * ) ; int ( * set_fmt ) ( s#soc_camera_device * , s#v4l2_format * ) ; int ( * try_fmt ) ( s#soc_camera_device * , s#v4l2_format * ) ; void ( * init_videobuf ) ( s#videobuf_queue * , s#soc_camera_device * ) ; int ( * reqbufs ) ( s#soc_camera_file * , s#v4l2_requestbuffers * ) ; int ( * querycap ) ( s#soc_camera_host * , s#v4l2_capability * ) ; int ( * set_bus_param ) ( s#soc_camera_device * , t#__u32 ) ; int ( * get_ctrl ) ( s#soc_camera_device * , s#v4l2_control * ) ; int ( * set_ctrl ) ( s#soc_camera_device * , s#v4l2_control * ) ; unsigned int ( * poll ) ( s#file * , t#poll_table * ) ; const s#v4l2_queryctrl * controls ; int num_controls ; } 
s#soc_camera_host struct soc_camera_host { s#v4l2_device v4l2_dev ; s#list_head list ; unsigned char nr ; void * priv ; const char * drv_name ; s#soc_camera_host_ops * ops ; } 
soc_camera_host_register int soc_camera_host_register ( s#soc_camera_host * ) 
soc_camera_host_unregister void soc_camera_host_unregister ( s#soc_camera_host * ) 

/* drivers/media/video/tveeprom.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#tveeprom struct tveeprom { t#u32 has_radio ; t#u32 has_ir ; t#u32 has_MAC_address ; t#u32 tuner_type ; t#u32 tuner_formats ; t#u32 tuner_hauppauge_model ; t#u32 tuner2_type ; t#u32 tuner2_formats ; t#u32 tuner2_hauppauge_model ; t#u32 digitizer ; t#u32 digitizer_formats ; t#u32 audio_processor ; t#u32 decoder_processor ; t#u32 model ; t#u32 revision ; t#u32 serial_number ; char rev_str [ 5 ] ; t#u8 MAC_address [ 6 ] ; } 
tveeprom_hauppauge_analog void tveeprom_hauppauge_analog ( s#i2c_client * , s#tveeprom * , unsigned char * ) 
tveeprom_read int tveeprom_read ( s#i2c_client * , unsigned char * , int ) 

/* drivers/media/video/usbvideo/usbvideo.o */
s#RingQueue struct RingQueue { unsigned char * queue ; int length ; int wi ; int ri ; t#wait_queue_head_t wqh ; } 
RingQueue_Dequeue int RingQueue_Dequeue ( s#RingQueue * , unsigned char * , int ) 
RingQueue_Enqueue int RingQueue_Enqueue ( s#RingQueue * , const unsigned char * , int ) 
RingQueue_WakeUpInterruptible void RingQueue_WakeUpInterruptible ( s#RingQueue * ) 
RingQueue_Flush void RingQueue_Flush ( s#RingQueue * ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##v4l2_device
s##usb_tt
s##mon_bus
s##ep_device
s##wusb_dev
s#usb_dynids struct usb_dynids { t#spinlock_t lock ; s#list_head list ; } 
s#usbdrv_wrap struct usbdrv_wrap { s#device_driver driver ; int for_devices ; } 
s#usb_driver struct usb_driver { const char * name ; int ( * probe ) ( s#usb_interface * , const s#usb_device_id * ) ; void ( * disconnect ) ( s#usb_interface * ) ; int ( * ioctl ) ( s#usb_interface * , unsigned int , void * ) ; int ( * suspend ) ( s#usb_interface * , t#pm_message_t ) ; int ( * resume ) ( s#usb_interface * ) ; int ( * reset_resume ) ( s#usb_interface * ) ; int ( * pre_reset ) ( s#usb_interface * ) ; int ( * post_reset ) ( s#usb_interface * ) ; const s#usb_device_id * id_table ; s#usb_dynids dynids ; s#usbdrv_wrap drvwrap ; unsigned int no_dynamic_id : 1 ; unsigned int supports_autosuspend : 1 ; unsigned int soft_unbind : 1 ; } 
t#videosize_t typedef unsigned long videosize_t 
e#FrameState enum FrameState { FrameState_Unused , FrameState_Ready , FrameState_Grabbing , FrameState_Done , FrameState_Done_Hold , FrameState_Error , } 
e#ScanState enum ScanState { ScanState_Scanning , ScanState_Lines } 
e#Deinterlace enum Deinterlace { Deinterlace_None = 0 , Deinterlace_FillOddLines , Deinterlace_FillEvenLines } 
s#usbvideo_frame struct usbvideo_frame { char * data ; unsigned long header ; t#videosize_t canvas ; t#videosize_t request ; unsigned short palette ; e#FrameState frameState ; e#ScanState scanstate ; e#Deinterlace deinterlace ; int flags ; int curline ; long seqRead_Length ; long seqRead_Index ; void * user ; } 
s#usbvideo_cb struct usbvideo_cb { int ( * probe ) ( s#usb_interface * , const s#usb_device_id * ) ; void ( * userFree ) ( s#uvd * ) ; void ( * disconnect ) ( s#usb_interface * ) ; int ( * setupOnOpen ) ( s#uvd * ) ; void ( * videoStart ) ( s#uvd * ) ; void ( * videoStop ) ( s#uvd * ) ; void ( * processData ) ( s#uvd * , s#usbvideo_frame * ) ; void ( * postProcess ) ( s#uvd * , s#usbvideo_frame * ) ; void ( * adjustPicture ) ( s#uvd * ) ; int ( * getFPS ) ( s#uvd * ) ; int ( * overlayHook ) ( s#uvd * , s#usbvideo_frame * ) ; int ( * getFrame ) ( s#uvd * , int ) ; int ( * startDataPump ) ( s#uvd * ) ; void ( * stopDataPump ) ( s#uvd * ) ; int ( * setVideoMode ) ( s#uvd * , s#video_window * ) ; } 
s#usbvideo struct usbvideo { int num_cameras ; s#usb_driver usbdrv ; char drvName [ 80 ] ; s#mutex lock ; s#usbvideo_cb cb ; s#video_device vdt ; s#uvd * cam ; s#module * md_module ; } 
s##scatterlist
s#usbvideo_sbuf struct usbvideo_sbuf { char * data ; s#urb * urb ; } 
s#video_capability struct video_capability { char name [ 32 ] ; int type ; int channels ; int audios ; int maxwidth ; int maxheight ; int minwidth ; int minheight ; } 
s#video_channel struct video_channel { int channel ; char name [ 32 ] ; int tuners ; t#__u32 flags ; t#__u16 type ; t#__u16 norm ; } 
s#usbvideo_statistics struct usbvideo_statistics { unsigned long frame_num ; unsigned long urb_count ; unsigned long urb_length ; unsigned long data_count ; unsigned long header_count ; unsigned long iso_skip_count ; unsigned long iso_err_count ; } 
s#uvd struct uvd { s#video_device vdev ; s#usb_device * dev ; s#usbvideo * handle ; void * user_data ; int user_size ; int debug ; unsigned char iface ; unsigned char video_endp ; unsigned char ifaceAltActive ; unsigned char ifaceAltInactive ; unsigned long flags ; unsigned long paletteBits ; unsigned short defaultPalette ; s#mutex lock ; int user ; t#videosize_t videosize ; t#videosize_t canvas ; int max_frame_size ; int uvd_used ; int streaming ; int grabbing ; int settingsAdjusted ; int last_error ; char * fbuf ; int fbuf_size ; int curframe ; int iso_packet_len ; s#RingQueue dp ; s#usbvideo_frame frame [ 2 ] ; s#usbvideo_sbuf sbuf [ 2 ] ; volatile int remove_pending ; s#video_picture vpic , vpic_old ; s#video_capability vcap ; s#video_channel vchan ; s#usbvideo_statistics stats ; char videoName [ 32 ] ; } 
usbvideo_TestPattern void usbvideo_TestPattern ( s#uvd * , int , int ) 
usbvideo_register int usbvideo_register ( s#usbvideo * * , const int , const int , const char * , const s#usbvideo_cb * , s#module * , const s#usb_device_id * ) 
usbvideo_Deregister void usbvideo_Deregister ( s#usbvideo * * ) 
usbvideo_AllocateDevice s#uvd * usbvideo_AllocateDevice ( s#usbvideo * ) 
usbvideo_RegisterVideoDevice int usbvideo_RegisterVideoDevice ( s#uvd * ) 
usbvideo_DeinterlaceFrame void usbvideo_DeinterlaceFrame ( s#uvd * , s#usbvideo_frame * ) 

/* drivers/media/video/v4l1-compat.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
t#v4l2_kioctl typedef long ( * v4l2_kioctl ) ( s#file * , unsigned int , void * ) 
v4l_compat_translate_ioctl long v4l_compat_translate_ioctl ( s#file * , int , void * , t#v4l2_kioctl ) 

/* drivers/media/video/v4l2-common.o */
v4l2_prio_init int v4l2_prio_init ( s#v4l2_prio_state * ) 
v4l2_prio_change int v4l2_prio_change ( s#v4l2_prio_state * , e#v4l2_priority * , e#v4l2_priority ) 
v4l2_prio_open int v4l2_prio_open ( s#v4l2_prio_state * , e#v4l2_priority * ) 
v4l2_prio_close int v4l2_prio_close ( s#v4l2_prio_state * , e#v4l2_priority * ) 
v4l2_prio_max e#v4l2_priority v4l2_prio_max ( s#v4l2_prio_state * ) 
v4l2_prio_check int v4l2_prio_check ( s#v4l2_prio_state * , e#v4l2_priority * ) 
v4l2_ctrl_check int v4l2_ctrl_check ( s#v4l2_ext_control * , s#v4l2_queryctrl * , const char * * ) 
v4l2_ctrl_get_menu const char * * v4l2_ctrl_get_menu ( t#u32 ) 
v4l2_ctrl_get_name const char * v4l2_ctrl_get_name ( t#u32 ) 
v4l2_ctrl_query_fill int v4l2_ctrl_query_fill ( s#v4l2_queryctrl * , t#s32 , t#s32 , t#s32 , t#s32 ) 
v4l2_ctrl_query_menu int v4l2_ctrl_query_menu ( s#v4l2_querymenu * , s#v4l2_queryctrl * , const char * * ) 
v4l2_ctrl_query_menu_valid_items int v4l2_ctrl_query_menu_valid_items ( s#v4l2_querymenu * , const t#u32 * ) 
v4l2_ctrl_next t#u32 v4l2_ctrl_next ( const t#u32 * const * , t#u32 ) 
v4l2_chip_match_host int v4l2_chip_match_host ( const s#v4l2_dbg_match * ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
v4l2_chip_match_i2c_client int v4l2_chip_match_i2c_client ( s#i2c_client * , const s#v4l2_dbg_match * ) 
v4l2_chip_ident_i2c_client int v4l2_chip_ident_i2c_client ( s#i2c_client * , s#v4l2_dbg_chip_ident * , t#u32 , t#u32 ) 
s##tuner_setup
v4l2_i2c_subdev_init void v4l2_i2c_subdev_init ( s#v4l2_subdev * , s#i2c_client * , const s#v4l2_subdev_ops * ) 
v4l2_i2c_new_subdev_board s#v4l2_subdev * v4l2_i2c_new_subdev_board ( s#v4l2_device * , s#i2c_adapter * , const char * , s#i2c_board_info * , const unsigned short * ) 
v4l2_i2c_new_subdev_cfg s#v4l2_subdev * v4l2_i2c_new_subdev_cfg ( s#v4l2_device * , s#i2c_adapter * , const char * , const char * , int , void * , t#u8 , const unsigned short * ) 
v4l2_i2c_subdev_addr unsigned short v4l2_i2c_subdev_addr ( s#v4l2_subdev * ) 
e#v4l2_i2c_tuner_type enum v4l2_i2c_tuner_type { ADDRS_RADIO , ADDRS_DEMOD , ADDRS_TV , ADDRS_TV_WITH_DEMOD , } 
v4l2_i2c_tuner_addrs const unsigned short * v4l2_i2c_tuner_addrs ( e#v4l2_i2c_tuner_type ) 
v4l_bound_align_image void v4l_bound_align_image ( unsigned int * , unsigned int , unsigned int , unsigned int , unsigned int * , unsigned int , unsigned int , unsigned int , unsigned int ) 

/* drivers/media/video/v4l2-compat-ioctl32.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##nameidata
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##nlm_lockowner
s##nfs4_lock_state
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
v4l2_compat_ioctl32 extern long v4l2_compat_ioctl32 ( s#file * , unsigned int , unsigned long ) 

/* drivers/media/video/v4l2-dev.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##kiocb
s##iovec
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##cred
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##tuner_setup
video_device_alloc s#video_device * __attribute__ ( ( warn_unused_result ) ) video_device_alloc ( void ) 
video_device_release void video_device_release ( s#video_device * ) 
video_device_release_empty void video_device_release_empty ( s#video_device * ) 
video_devdata s#video_device * video_devdata ( s#file * ) 
video_register_device int __attribute__ ( ( warn_unused_result ) ) video_register_device ( s#video_device * , int , int ) 
video_register_device_no_warn int __attribute__ ( ( warn_unused_result ) ) video_register_device_no_warn ( s#video_device * , int , int ) 
video_unregister_device void video_unregister_device ( s#video_device * ) 

/* drivers/media/video/v4l2-device.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##tuner_setup
v4l2_device_register int __attribute__ ( ( warn_unused_result ) ) v4l2_device_register ( s#device * , s#v4l2_device * ) 
v4l2_device_set_name int v4l2_device_set_name ( s#v4l2_device * , const char * , t#atomic_t * ) 
v4l2_device_disconnect void v4l2_device_disconnect ( s#v4l2_device * ) 
v4l2_device_unregister void v4l2_device_unregister ( s#v4l2_device * ) 
v4l2_device_register_subdev int __attribute__ ( ( warn_unused_result ) ) v4l2_device_register_subdev ( s#v4l2_device * , s#v4l2_subdev * ) 
v4l2_device_unregister_subdev void v4l2_device_unregister_subdev ( s#v4l2_subdev * ) 

/* drivers/media/video/v4l2-int-device.o */
v4l2_int_device_try_attach_all void v4l2_int_device_try_attach_all ( void ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
e#v4l2_int_type enum v4l2_int_type { v4l2_int_type_master = 1 , v4l2_int_type_slave } 
s#v4l2_int_master struct v4l2_int_master { int ( * attach ) ( s#v4l2_int_device * ) ; void ( * detach ) ( s#v4l2_int_device * ) ; } 
t#v4l2_int_ioctl_func typedef int ( v4l2_int_ioctl_func ) ( s#v4l2_int_device * ) 
s#v4l2_int_ioctl_desc struct v4l2_int_ioctl_desc { int num ; t#v4l2_int_ioctl_func * func ; } 
s#v4l2_int_slave struct v4l2_int_slave { s#v4l2_int_device * master ; char attach_to [ 32 ] ; int num_ioctls ; s#v4l2_int_ioctl_desc * ioctls ; } 
s#v4l2_int_device struct v4l2_int_device { s#list_head head ; s#module * module ; char name [ 32 ] ; e#v4l2_int_type type ; union { s#v4l2_int_master * master ; s#v4l2_int_slave * slave ; } u ; void * priv ; } 
v4l2_int_device_register int v4l2_int_device_register ( s#v4l2_int_device * ) 
v4l2_int_device_unregister void v4l2_int_device_unregister ( s#v4l2_int_device * ) 
v4l2_int_ioctl_0 int v4l2_int_ioctl_0 ( s#v4l2_int_device * , int ) 
v4l2_int_ioctl_1 int v4l2_int_ioctl_1 ( s#v4l2_int_device * , int , void * ) 

/* drivers/media/video/v4l2-ioctl.o */
v4l2_norm_to_name extern const char * v4l2_norm_to_name ( t#v4l2_std_id ) 
v4l2_video_std_frame_period extern void v4l2_video_std_frame_period ( int , s#v4l2_fract * ) 
s#v4l2_standard struct v4l2_standard { t#__u32 index ; t#v4l2_std_id id ; t#__u8 name [ 24 ] ; s#v4l2_fract frameperiod ; t#__u32 framelines ; t#__u32 reserved [ 4 ] ; } 
v4l2_video_std_construct extern int v4l2_video_std_construct ( s#v4l2_standard * , int , const char * ) 
v4l2_field_names extern const char * v4l2_field_names [ ] 
v4l2_type_names extern const char * v4l2_type_names [ ] 
v4l_printk_ioctl extern void v4l_printk_ioctl ( unsigned int ) 
s##vfsmount
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##nameidata
s##kiocb
s##iovec
s##vm_area_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##page
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##radix_tree_node
s##writeback_control
s##posix_acl
s##cred
video_usercopy extern long video_usercopy ( s#file * , unsigned int , unsigned long , t#v4l2_kioctl ) 
video_ioctl2 extern long video_ioctl2 ( s#file * , unsigned int , unsigned long ) 

/* drivers/media/video/videobuf-core.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##device
videobuf_queue_to_vmalloc void * videobuf_queue_to_vmalloc ( s#videobuf_queue * , s#videobuf_buffer * ) 
videobuf_cgmbuf int videobuf_cgmbuf ( s#videobuf_queue * , s#video_mbuf * , int ) 
videobuf_waiton int videobuf_waiton ( s#videobuf_buffer * , int , int ) 
videobuf_iolock int videobuf_iolock ( s#videobuf_queue * , s#videobuf_buffer * , s#v4l2_framebuffer * ) 
videobuf_alloc void * videobuf_alloc ( s#videobuf_queue * ) 
videobuf_queue_core_init void videobuf_queue_core_init ( s#videobuf_queue * , s#videobuf_queue_ops * , s#device * , t#spinlock_t * , e#v4l2_buf_type , e#v4l2_field , unsigned int , void * , s#videobuf_qtype_ops * ) 
videobuf_queue_cancel void videobuf_queue_cancel ( s#videobuf_queue * ) 
videobuf_queue_is_busy int videobuf_queue_is_busy ( s#videobuf_queue * ) 
videobuf_next_field e#v4l2_field videobuf_next_field ( s#videobuf_queue * ) 
videobuf_reqbufs int videobuf_reqbufs ( s#videobuf_queue * , s#v4l2_requestbuffers * ) 
videobuf_querybuf int videobuf_querybuf ( s#videobuf_queue * , s#v4l2_buffer * ) 
videobuf_qbuf int videobuf_qbuf ( s#videobuf_queue * , s#v4l2_buffer * ) 
videobuf_dqbuf int videobuf_dqbuf ( s#videobuf_queue * , s#v4l2_buffer * , int ) 
videobuf_streamon int videobuf_streamon ( s#videobuf_queue * ) 
videobuf_streamoff int videobuf_streamoff ( s#videobuf_queue * ) 
videobuf_read_start int videobuf_read_start ( s#videobuf_queue * ) 
videobuf_read_stop void videobuf_read_stop ( s#videobuf_queue * ) 
videobuf_stop void videobuf_stop ( s#videobuf_queue * ) 
videobuf_read_stream t#ssize_t videobuf_read_stream ( s#videobuf_queue * , char * , t#size_t , t#loff_t * , int , int ) 
videobuf_read_one t#ssize_t videobuf_read_one ( s#videobuf_queue * , char * , t#size_t , t#loff_t * , int ) 
videobuf_poll_stream unsigned int videobuf_poll_stream ( s#file * , s#videobuf_queue * , t#poll_table * ) 
__videobuf_mmap_setup int __videobuf_mmap_setup ( s#videobuf_queue * , unsigned int , unsigned int , e#v4l2_memory ) 
videobuf_mmap_setup int videobuf_mmap_setup ( s#videobuf_queue * , unsigned int , unsigned int , e#v4l2_memory ) 
videobuf_mmap_free int videobuf_mmap_free ( s#videobuf_queue * ) 
videobuf_mmap_mapper int videobuf_mmap_mapper ( s#videobuf_queue * , s#vm_area_struct * ) 

/* drivers/media/video/videobuf-dma-sg.o */
videobuf_vmalloc_to_sg s#scatterlist * videobuf_vmalloc_to_sg ( unsigned char * , int ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
videobuf_to_dma s#videobuf_dmabuf * videobuf_to_dma ( s#videobuf_buffer * ) 
videobuf_dma_init void videobuf_dma_init ( s#videobuf_dmabuf * ) 
videobuf_dma_init_user int videobuf_dma_init_user ( s#videobuf_dmabuf * , int , unsigned long , unsigned long ) 
videobuf_dma_init_kernel int videobuf_dma_init_kernel ( s#videobuf_dmabuf * , int , int ) 
videobuf_dma_init_overlay int videobuf_dma_init_overlay ( s#videobuf_dmabuf * , int , t#dma_addr_t , int ) 
videobuf_dma_map int videobuf_dma_map ( s#videobuf_queue * , s#videobuf_dmabuf * ) 
videobuf_dma_sync int videobuf_dma_sync ( s#videobuf_queue * , s#videobuf_dmabuf * ) 
videobuf_dma_unmap int videobuf_dma_unmap ( s#videobuf_queue * , s#videobuf_dmabuf * ) 
videobuf_dma_free int videobuf_dma_free ( s#videobuf_dmabuf * ) 
videobuf_sg_dma_map int videobuf_sg_dma_map ( s#device * , s#videobuf_dmabuf * ) 
videobuf_sg_dma_unmap int videobuf_sg_dma_unmap ( s#device * , s#videobuf_dmabuf * ) 
videobuf_sg_alloc void * videobuf_sg_alloc ( t#size_t ) 
videobuf_queue_sg_init void videobuf_queue_sg_init ( s#videobuf_queue * , s#videobuf_queue_ops * , s#device * , t#spinlock_t * , e#v4l2_buf_type , e#v4l2_field , unsigned int , void * ) 

/* drivers/media/video/videobuf-dvb.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
videobuf_dvb_register_bus int videobuf_dvb_register_bus ( s#videobuf_dvb_frontends * , s#module * , void * , s#device * , short * , int ) 
videobuf_dvb_unregister_bus void videobuf_dvb_unregister_bus ( s#videobuf_dvb_frontends * ) 
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s#videobuf_dvb struct videobuf_dvb { char * name ; s#dvb_frontend * frontend ; s#videobuf_queue dvbq ; s#mutex lock ; s#task_struct * thread ; int nfeeds ; s#dvb_demux demux ; s#dmxdev dmxdev ; s#dmx_frontend fe_hw ; s#dmx_frontend fe_mem ; s#dvb_net net ; } 
s#videobuf_dvb_frontend struct videobuf_dvb_frontend { s#list_head felist ; int id ; s#videobuf_dvb dvb ; } 
videobuf_dvb_get_frontend s#videobuf_dvb_frontend * videobuf_dvb_get_frontend ( s#videobuf_dvb_frontends * , int ) 
videobuf_dvb_find_frontend int videobuf_dvb_find_frontend ( s#videobuf_dvb_frontends * , s#dvb_frontend * ) 
videobuf_dvb_alloc_frontend s#videobuf_dvb_frontend * videobuf_dvb_alloc_frontend ( s#videobuf_dvb_frontends * , int ) 
videobuf_dvb_dealloc_frontends void videobuf_dvb_dealloc_frontends ( s#videobuf_dvb_frontends * ) 

/* drivers/media/video/videobuf-vmalloc.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
videobuf_queue_vmalloc_init void videobuf_queue_vmalloc_init ( s#videobuf_queue * , s#videobuf_queue_ops * , void * , t#spinlock_t * , e#v4l2_buf_type , e#v4l2_field , unsigned int , void * ) 
videobuf_to_vmalloc void * videobuf_to_vmalloc ( s#videobuf_buffer * ) 
videobuf_vmalloc_free void videobuf_vmalloc_free ( s#videobuf_buffer * ) 

/* drivers/media/video/zoran/videocodec.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s#videocodec_master struct videocodec_master { char name [ 32 ] ; unsigned long magic ; unsigned long flags ; unsigned int type ; void * data ; t#__u32 ( * readreg ) ( s#videocodec * , t#__u16 ) ; void ( * writereg ) ( s#videocodec * , t#__u16 , t#__u32 ) ; } 
s#tvnorm struct tvnorm { t#u16 Wt , Wa , HStart , HSyncStart , Ht , Ha , VStart ; } 
s#vfe_settings struct vfe_settings { t#__u32 x , y ; t#__u32 width , height ; t#__u16 decimation ; t#__u16 flags ; t#__u16 quality ; } 
s#vfe_polarity struct vfe_polarity { unsigned int vsync_pol : 1 ; unsigned int hsync_pol : 1 ; unsigned int field_pol : 1 ; unsigned int blank_pol : 1 ; unsigned int subimg_pol : 1 ; unsigned int poe_pol : 1 ; unsigned int pvalid_pol : 1 ; unsigned int vclk_pol : 1 ; } 
s#videocodec struct videocodec { s#module * owner ; char name [ 32 ] ; unsigned long magic ; unsigned long flags ; unsigned int type ; s#videocodec_master * master_data ; void * data ; int ( * setup ) ( s#videocodec * ) ; int ( * unset ) ( s#videocodec * ) ; int ( * set_mode ) ( s#videocodec * , int ) ; int ( * set_video ) ( s#videocodec * , s#tvnorm * , s#vfe_settings * , s#vfe_polarity * ) ; int ( * control ) ( s#videocodec * , int , int , void * ) ; int ( * setup_interrupt ) ( s#videocodec * , long ) ; int ( * handle_interrupt ) ( s#videocodec * , int , long ) ; long ( * put_image ) ( s#videocodec * , int , int , long * , long * , long , void * ) ; long ( * get_image ) ( s#videocodec * , int , int , long * , long * , long , void * ) ; } 
videocodec_attach extern s#videocodec * videocodec_attach ( s#videocodec_master * ) 
videocodec_detach extern int videocodec_detach ( s#videocodec * ) 
videocodec_register extern int videocodec_register ( const s#videocodec * ) 
videocodec_unregister extern int videocodec_unregister ( const s#videocodec * ) 

/* drivers/memstick/core/memstick.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#memstick_device_id struct memstick_device_id { unsigned char match_flags ; unsigned char type ; unsigned char category ; unsigned char class ; } 
s#ms_register_addr struct ms_register_addr { unsigned char r_offset ; unsigned char r_length ; unsigned char w_offset ; unsigned char w_length ; } 
s#memstick_request struct memstick_request { unsigned char tpc ; unsigned char data_dir : 1 , need_card_int : 1 , long_data : 1 ; unsigned char int_reg ; int error ; union { s#scatterlist sg ; struct { unsigned char data_len ; unsigned char data [ 15 ] ; } ; } ; } 
s#memstick_dev struct memstick_dev { s#memstick_device_id id ; s#memstick_host * host ; s#ms_register_addr reg_addr ; s#completion mrq_complete ; s#memstick_request current_mrq ; int ( * check ) ( s#memstick_dev * ) ; int ( * next_request ) ( s#memstick_dev * , s#memstick_request * * ) ; void ( * stop ) ( s#memstick_dev * ) ; void ( * start ) ( s#memstick_dev * ) ; s#device dev ; } 
e#memstick_param enum memstick_param { MEMSTICK_POWER = 1 , MEMSTICK_INTERFACE } 
s#memstick_host struct memstick_host { s#mutex lock ; unsigned int id ; unsigned int caps ; s#work_struct media_checker ; s#device dev ; s#memstick_dev * card ; unsigned int retries ; void ( * request ) ( s#memstick_host * ) ; int ( * set_param ) ( s#memstick_host * , e#memstick_param , int ) ; unsigned long private [ 0 ] __attribute__ ( ( __aligned__ ( ( 1 << ( 7 ) ) ) ) ) ; } 
memstick_detect_change void memstick_detect_change ( s#memstick_host * ) 
memstick_next_req int memstick_next_req ( s#memstick_host * , s#memstick_request * * ) 
memstick_new_req void memstick_new_req ( s#memstick_host * ) 
memstick_init_req_sg void memstick_init_req_sg ( s#memstick_request * , unsigned char , const s#scatterlist * ) 
memstick_init_req void memstick_init_req ( s#memstick_request * , unsigned char , const void * , t#size_t ) 
memstick_set_rw_addr int memstick_set_rw_addr ( s#memstick_dev * ) 
memstick_alloc_host s#memstick_host * memstick_alloc_host ( unsigned int , s#device * ) 
memstick_add_host int memstick_add_host ( s#memstick_host * ) 
memstick_remove_host void memstick_remove_host ( s#memstick_host * ) 
memstick_free_host void memstick_free_host ( s#memstick_host * ) 
memstick_suspend_host void memstick_suspend_host ( s#memstick_host * ) 
memstick_resume_host void memstick_resume_host ( s#memstick_host * ) 
s#memstick_driver struct memstick_driver { s#memstick_device_id * id_table ; int ( * probe ) ( s#memstick_dev * ) ; void ( * remove ) ( s#memstick_dev * ) ; int ( * suspend ) ( s#memstick_dev * , t#pm_message_t ) ; int ( * resume ) ( s#memstick_dev * ) ; s#device_driver driver ; } 
memstick_register_driver int memstick_register_driver ( s#memstick_driver * ) 
memstick_unregister_driver void memstick_unregister_driver ( s#memstick_driver * ) 

/* drivers/message/fusion/mptbase.o */
mpt_debug_level extern int mpt_debug_level 
mpt_fwfault_debug extern int mpt_fwfault_debug 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##blk_trace
s##timer_rand_state
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
mpt_attach extern int mpt_attach ( s#pci_dev * , const s#pci_device_id * ) 
mpt_detach extern void mpt_detach ( s#pci_dev * ) 
mpt_resume extern int mpt_resume ( s#pci_dev * ) 
mpt_suspend extern int mpt_suspend ( s#pci_dev * , t#pm_message_t ) 
ioc_list extern s#list_head ioc_list 
mpt_proc_root_dir extern s#proc_dir_entry * mpt_proc_root_dir 
s#_SYSIF_REGS struct _SYSIF_REGS { t#u32 Doorbell ; t#u32 WriteSequence ; t#u32 Diagnostic ; t#u32 TestBase ; t#u32 DiagRwData ; t#u32 DiagRwAddress ; t#u32 Reserved1 [ 6 ] ; t#u32 IntStatus ; t#u32 IntMask ; t#u32 Reserved2 [ 2 ] ; t#u32 RequestFifo ; t#u32 ReplyFifo ; t#u32 RequestHiPriFifo ; t#u32 Reserved3 ; t#u32 HostIndex ; t#u32 Reserved4 [ 15 ] ; t#u32 Fubar ; t#u32 Reserved5 [ 1050 ] ; t#u32 Reset_1078 ; } 
t#SYSIF_REGS typedef s#_SYSIF_REGS SYSIF_REGS 
t#U8 typedef unsigned char U8 
t#U32 typedef unsigned int U32 
s#_MSG_REQUEST_HEADER struct _MSG_REQUEST_HEADER { t#U8 Reserved [ 2 ] ; t#U8 ChainOffset ; t#U8 Function ; t#U8 Reserved1 [ 3 ] ; t#U8 MsgFlags ; t#U32 MsgContext ; } 
t#MPIHeader_t typedef s#_MSG_REQUEST_HEADER MPIHeader_t 
s#_U64 struct _U64 { t#U32 Low ; t#U32 High ; } 
t#U64 typedef s#_U64 U64 
s#_SGE_SIMPLE_UNION struct _SGE_SIMPLE_UNION { t#U32 FlagsLength ; union { t#U32 Address32 ; t#U64 Address64 ; } u ; } 
t#SGE_SIMPLE_UNION typedef s#_SGE_SIMPLE_UNION SGE_SIMPLE_UNION 
t#U16 typedef unsigned short U16 
s#_SGE_CHAIN_UNION struct _SGE_CHAIN_UNION { t#U16 Length ; t#U8 NextChainOffset ; t#U8 Flags ; union { t#U32 Address32 ; t#U64 Address64 ; } u ; } 
t#SGE_CHAIN_UNION typedef s#_SGE_CHAIN_UNION SGE_CHAIN_UNION 
s#_SGE_IO_UNION struct _SGE_IO_UNION { union { t#SGE_SIMPLE_UNION Simple ; t#SGE_CHAIN_UNION Chain ; } u ; } 
t#SGE_IO_UNION typedef s#_SGE_IO_UNION SGE_IO_UNION 
s#_MSG_SCSI_IO_REQUEST struct _MSG_SCSI_IO_REQUEST { t#U8 TargetID ; t#U8 Bus ; t#U8 ChainOffset ; t#U8 Function ; t#U8 CDBLength ; t#U8 SenseBufferLength ; t#U8 Reserved ; t#U8 MsgFlags ; t#U32 MsgContext ; t#U8 LUN [ 8 ] ; t#U32 Control ; t#U8 CDB [ 16 ] ; t#U32 DataLength ; t#U32 SenseBufferLowAddr ; t#SGE_IO_UNION SGL ; } 
t#SCSIIORequest_t typedef s#_MSG_SCSI_IO_REQUEST SCSIIORequest_t 
s#_MSG_SCSI_IO_REPLY struct _MSG_SCSI_IO_REPLY { t#U8 TargetID ; t#U8 Bus ; t#U8 MsgLength ; t#U8 Function ; t#U8 CDBLength ; t#U8 SenseBufferLength ; t#U8 Reserved ; t#U8 MsgFlags ; t#U32 MsgContext ; t#U8 SCSIStatus ; t#U8 SCSIState ; t#U16 IOCStatus ; t#U32 IOCLogInfo ; t#U32 TransferCount ; t#U32 SenseCount ; t#U32 ResponseInfo ; t#U16 TaskTag ; t#U16 Reserved1 ; } 
t#SCSIIOReply_t typedef s#_MSG_SCSI_IO_REPLY SCSIIOReply_t 
s#_CONFIG_PAGE_HEADER struct _CONFIG_PAGE_HEADER { t#U8 PageVersion ; t#U8 PageLength ; t#U8 PageNumber ; t#U8 PageType ; } 
t#CONFIG_PAGE_HEADER typedef s#_CONFIG_PAGE_HEADER CONFIG_PAGE_HEADER 
s#_MSG_CONFIG_REPLY struct _MSG_CONFIG_REPLY { t#U8 Action ; t#U8 Reserved ; t#U8 MsgLength ; t#U8 Function ; t#U16 ExtPageLength ; t#U8 ExtPageType ; t#U8 MsgFlags ; t#U32 MsgContext ; t#U8 Reserved2 [ 2 ] ; t#U16 IOCStatus ; t#U32 IOCLogInfo ; t#CONFIG_PAGE_HEADER Header ; } 
t#ConfigReply_t typedef s#_MSG_CONFIG_REPLY ConfigReply_t 
s#_MSG_DEFAULT_REPLY struct _MSG_DEFAULT_REPLY { t#U8 Reserved [ 2 ] ; t#U8 MsgLength ; t#U8 Function ; t#U8 Reserved1 [ 3 ] ; t#U8 MsgFlags ; t#U32 MsgContext ; t#U8 Reserved2 [ 2 ] ; t#U16 IOCStatus ; t#U32 IOCLogInfo ; } 
t#MPIDefaultReply_t typedef s#_MSG_DEFAULT_REPLY MPIDefaultReply_t 
u#_MPT_FRAME_TRACKER union _MPT_FRAME_TRACKER { struct { s#list_head list ; t#u32 arg1 ; t#u32 pad ; void * argp1 ; } linkage ; struct { t#u32 __hdr [ 2 ] ; union { t#u32 MsgContext ; struct { t#u16 req_idx ; t#u8 cb_idx ; t#u8 rsvd ; } fld ; } msgctxu ; } hwhdr ; } 
t#MPT_FRAME_TRACKER typedef u#_MPT_FRAME_TRACKER MPT_FRAME_TRACKER 
s#_MPT_FRAME_HDR struct _MPT_FRAME_HDR { union { t#MPIHeader_t hdr ; t#SCSIIORequest_t scsireq ; t#SCSIIOReply_t sreply ; t#ConfigReply_t configreply ; t#MPIDefaultReply_t reply ; t#MPT_FRAME_TRACKER frame ; } u ; } 
t#MPT_FRAME_HDR typedef s#_MPT_FRAME_HDR MPT_FRAME_HDR 
t#MPT_ADD_SGE typedef void ( * MPT_ADD_SGE ) ( void * , t#u32 , t#dma_addr_t ) 
t#MPT_ADD_CHAIN typedef void ( * MPT_ADD_CHAIN ) ( void * , t#u8 , t#u16 , t#dma_addr_t ) 
s##Scsi_Host
s#_IOC_4_SEP struct _IOC_4_SEP { t#U8 SEPTargetID ; t#U8 SEPBus ; t#U16 Reserved ; } 
t#IOC_4_SEP typedef s#_IOC_4_SEP IOC_4_SEP 
s#_CONFIG_PAGE_IOC_4 struct _CONFIG_PAGE_IOC_4 { t#CONFIG_PAGE_HEADER Header ; t#U8 ActiveSEP ; t#U8 MaxSEP ; t#U16 Reserved1 ; t#IOC_4_SEP SEP [ ( 1 ) ] ; } 
t#IOCPage4_t typedef s#_CONFIG_PAGE_IOC_4 IOCPage4_t 
s#_SpiCfgData struct _SpiCfgData { t#u32 PortFlags ; int * nvram ; t#IOCPage4_t * pIocPg4 ; t#dma_addr_t IocPg4_dma ; int IocPg4Sz ; t#u8 minSyncFactor ; t#u8 maxSyncOffset ; t#u8 maxBusWidth ; t#u8 busType ; t#u8 sdp1version ; t#u8 sdp1length ; t#u8 sdp0version ; t#u8 sdp0length ; t#u8 dvScheduled ; t#u8 noQas ; t#u8 Saf_Te ; t#u8 bus_reset ; t#u8 rsvd [ 1 ] ; } 
t#SpiCfgData typedef s#_SpiCfgData SpiCfgData 
s#_CONFIG_PAGE_IOC_2_RAID_VOL struct _CONFIG_PAGE_IOC_2_RAID_VOL { t#U8 VolumeID ; t#U8 VolumeBus ; t#U8 VolumeIOC ; t#U8 VolumePageNumber ; t#U8 VolumeType ; t#U8 Flags ; t#U16 Reserved3 ; } 
t#CONFIG_PAGE_IOC_2_RAID_VOL typedef s#_CONFIG_PAGE_IOC_2_RAID_VOL CONFIG_PAGE_IOC_2_RAID_VOL 
s#_CONFIG_PAGE_IOC_2 struct _CONFIG_PAGE_IOC_2 { t#CONFIG_PAGE_HEADER Header ; t#U32 CapabilitiesFlags ; t#U8 NumActiveVolumes ; t#U8 MaxVolumes ; t#U8 NumActivePhysDisks ; t#U8 MaxPhysDisks ; t#CONFIG_PAGE_IOC_2_RAID_VOL RaidVolume [ ( 1 ) ] ; } 
t#IOCPage2_t typedef s#_CONFIG_PAGE_IOC_2 IOCPage2_t 
s#_IOC_3_PHYS_DISK struct _IOC_3_PHYS_DISK { t#U8 PhysDiskID ; t#U8 PhysDiskBus ; t#U8 PhysDiskIOC ; t#U8 PhysDiskNum ; } 
t#IOC_3_PHYS_DISK typedef s#_IOC_3_PHYS_DISK IOC_3_PHYS_DISK 
s#_CONFIG_PAGE_IOC_3 struct _CONFIG_PAGE_IOC_3 { t#CONFIG_PAGE_HEADER Header ; t#U8 NumPhysDisks ; t#U8 Reserved1 ; t#U16 Reserved2 ; t#IOC_3_PHYS_DISK PhysDisk [ ( 1 ) ] ; } 
t#IOCPage3_t typedef s#_CONFIG_PAGE_IOC_3 IOCPage3_t 
s#_CONFIG_PAGE_IOC_6 struct _CONFIG_PAGE_IOC_6 { t#CONFIG_PAGE_HEADER Header ; t#U32 CapabilitiesFlags ; t#U8 MaxDrivesIS ; t#U8 MaxDrivesIM ; t#U8 MaxDrivesIME ; t#U8 Reserved1 ; t#U8 MinDrivesIS ; t#U8 MinDrivesIM ; t#U8 MinDrivesIME ; t#U8 Reserved2 ; t#U8 MaxGlobalHotSpares ; t#U8 Reserved3 ; t#U16 Reserved4 ; t#U32 Reserved5 ; t#U32 SupportedStripeSizeMapIS ; t#U32 SupportedStripeSizeMapIME ; t#U32 Reserved6 ; t#U8 MetadataSize ; t#U8 Reserved7 ; t#U16 Reserved8 ; t#U16 MaxBadBlockTableEntries ; t#U16 Reserved9 ; t#U16 IRNvsramUsage ; t#U16 Reserved10 ; t#U32 IRNvsramVersion ; t#U32 Reserved11 ; t#U32 Reserved12 ; } 
t#IOCPage6_t typedef s#_CONFIG_PAGE_IOC_6 IOCPage6_t 
s#_RaidCfgData struct _RaidCfgData { t#IOCPage2_t * pIocPg2 ; t#IOCPage3_t * pIocPg3 ; t#IOCPage6_t * pIocPg6 ; s#semaphore inactive_list_mutex ; s#list_head inactive_list ; } 
t#RaidCfgData typedef s#_RaidCfgData RaidCfgData 
s#_SasCfgData struct _SasCfgData { t#u8 ptClear ; } 
t#SasCfgData typedef s#_SasCfgData SasCfgData 
s#_CONFIG_PAGE_FC_PORT_1 struct _CONFIG_PAGE_FC_PORT_1 { t#CONFIG_PAGE_HEADER Header ; t#U32 Flags ; t#U64 NoSEEPROMWWNN ; t#U64 NoSEEPROMWWPN ; t#U8 HardALPA ; t#U8 LinkConfig ; t#U8 TopologyConfig ; t#U8 AltConnector ; t#U8 NumRequestedAliases ; t#U8 RR_TOV ; t#U8 InitiatorDeviceTimeout ; t#U8 InitiatorIoPendTimeout ; } 
t#FCPortPage1_t typedef s#_CONFIG_PAGE_FC_PORT_1 FCPortPage1_t 
s#_FcCfgData struct _FcCfgData { struct { t#FCPortPage1_t * data ; t#dma_addr_t dma ; int pg_sz ; } fc_port_page1 [ 2 ] ; } 
t#FcCfgData typedef s#_FcCfgData FcCfgData 
s#_mpt_ioctl_events struct _mpt_ioctl_events { t#u32 event ; t#u32 eventContext ; t#u32 data [ 2 ] ; } 
s#_MPI_FW_VERSION_STRUCT struct _MPI_FW_VERSION_STRUCT { t#U8 Dev ; t#U8 Unit ; t#U8 Minor ; t#U8 Major ; } 
t#MPI_FW_VERSION_STRUCT typedef s#_MPI_FW_VERSION_STRUCT MPI_FW_VERSION_STRUCT 
u#_MPI_FW_VERSION union _MPI_FW_VERSION { t#MPI_FW_VERSION_STRUCT Struct ; t#U32 Word ; } 
t#MPI_FW_VERSION typedef u#_MPI_FW_VERSION MPI_FW_VERSION 
s#_MSG_IOC_FACTS_REPLY struct _MSG_IOC_FACTS_REPLY { t#U16 MsgVersion ; t#U8 MsgLength ; t#U8 Function ; t#U16 HeaderVersion ; t#U8 IOCNumber ; t#U8 MsgFlags ; t#U32 MsgContext ; t#U16 IOCExceptions ; t#U16 IOCStatus ; t#U32 IOCLogInfo ; t#U8 MaxChainDepth ; t#U8 WhoInit ; t#U8 BlockSize ; t#U8 Flags ; t#U16 ReplyQueueDepth ; t#U16 RequestFrameSize ; t#U16 Reserved_0101_FWVersion ; t#U16 ProductID ; t#U32 CurrentHostMfaHighAddr ; t#U16 GlobalCredits ; t#U8 NumberOfPorts ; t#U8 EventState ; t#U32 CurrentSenseBufferHighAddr ; t#U16 CurReplyFrameSize ; t#U8 MaxDevices ; t#U8 MaxBuses ; t#U32 FWImageSize ; t#U32 IOCCapabilities ; t#MPI_FW_VERSION FWVersion ; t#U16 HighPriorityQueueDepth ; t#U16 Reserved2 ; t#SGE_SIMPLE_UNION HostPageBufferSGE ; t#U32 ReplyFifoHostSignalingAddr ; } 
t#IOCFactsReply_t typedef s#_MSG_IOC_FACTS_REPLY IOCFactsReply_t 
s#_MSG_PORT_FACTS_REPLY struct _MSG_PORT_FACTS_REPLY { t#U16 Reserved ; t#U8 MsgLength ; t#U8 Function ; t#U16 Reserved1 ; t#U8 PortNumber ; t#U8 MsgFlags ; t#U32 MsgContext ; t#U16 Reserved2 ; t#U16 IOCStatus ; t#U32 IOCLogInfo ; t#U8 Reserved3 ; t#U8 PortType ; t#U16 MaxDevices ; t#U16 PortSCSIID ; t#U16 ProtocolFlags ; t#U16 MaxPostedCmdBuffers ; t#U16 MaxPersistentIDs ; t#U16 MaxLanBuckets ; t#U8 MaxInitiators ; t#U8 Reserved4 ; t#U32 Reserved5 ; } 
t#PortFactsReply_t typedef s#_MSG_PORT_FACTS_REPLY PortFactsReply_t 
s#_CONFIG_PAGE_FC_PORT_0 struct _CONFIG_PAGE_FC_PORT_0 { t#CONFIG_PAGE_HEADER Header ; t#U32 Flags ; t#U8 MPIPortNumber ; t#U8 LinkType ; t#U8 PortState ; t#U8 Reserved ; t#U32 PortIdentifier ; t#U64 WWNN ; t#U64 WWPN ; t#U32 SupportedServiceClass ; t#U32 SupportedSpeeds ; t#U32 CurrentSpeed ; t#U32 MaxFrameSize ; t#U64 FabricWWNN ; t#U64 FabricWWPN ; t#U32 DiscoveredPortsCount ; t#U32 MaxInitiators ; t#U8 MaxAliasesSupported ; t#U8 MaxHardAliasesSupported ; t#U8 NumCurrentAliases ; t#U8 Reserved1 ; } 
t#FCPortPage0_t typedef s#_CONFIG_PAGE_FC_PORT_0 FCPortPage0_t 
t#ConfigPageHeader_t typedef s#_CONFIG_PAGE_HEADER ConfigPageHeader_t 
s#_CONFIG_PAGE_LAN_0 struct _CONFIG_PAGE_LAN_0 { t#ConfigPageHeader_t Header ; t#U16 TxRxModes ; t#U16 Reserved ; t#U32 PacketPrePad ; } 
t#LANPage0_t typedef s#_CONFIG_PAGE_LAN_0 LANPage0_t 
s#_CONFIG_PAGE_LAN_1 struct _CONFIG_PAGE_LAN_1 { t#ConfigPageHeader_t Header ; t#U16 Reserved ; t#U8 CurrentDeviceState ; t#U8 Reserved1 ; t#U32 MinPacketSize ; t#U32 MaxPacketSize ; t#U32 HardwareAddressLow ; t#U32 HardwareAddressHigh ; t#U32 MaxWireSpeedLow ; t#U32 MaxWireSpeedHigh ; t#U32 BucketsRemaining ; t#U32 MaxReplySize ; t#U32 NegWireSpeedLow ; t#U32 NegWireSpeedHigh ; } 
t#LANPage1_t typedef s#_CONFIG_PAGE_LAN_1 LANPage1_t 
s##net_device
s##workqueue_struct
s##mptsas_portinfo
s#_MPT_MGMT struct _MPT_MGMT { s#mutex mutex ; s#completion done ; t#u8 reply [ 128 ] ; t#u8 sense [ 64 ] ; t#u8 status ; int completion_code ; t#u32 msg_context ; } 
t#MPT_MGMT typedef s#_MPT_MGMT MPT_MGMT 
t#MPT_SCHEDULE_TARGET_RESET typedef void ( * MPT_SCHEDULE_TARGET_RESET ) ( void * ) 
s##scsi_cmnd
s#_MPT_ADAPTER struct _MPT_ADAPTER { int id ; int pci_irq ; char name [ 32 ] ; char prod_name [ 32 ] ; char evStr [ 100 ] ; char board_name [ 16 ] ; char board_assembly [ 16 ] ; char board_tracer [ 16 ] ; t#u16 nvdata_version_persistent ; t#u16 nvdata_version_default ; int debug_level ; t#u8 io_missing_delay ; t#u8 device_missing_delay ; t#SYSIF_REGS * chip ; t#SYSIF_REGS * pio_chip ; t#u8 bus_type ; unsigned long mem_phys ; unsigned long pio_mem_phys ; int mem_size ; int number_of_buses ; int devices_per_bus ; int alloc_total ; t#u32 last_state ; int active ; t#u8 * alloc ; t#dma_addr_t alloc_dma ; t#u32 alloc_sz ; t#MPT_FRAME_HDR * reply_frames ; t#u32 reply_frames_low_dma ; int reply_depth ; int reply_sz ; int num_chain ; t#MPT_ADD_SGE add_sge ; t#MPT_ADD_CHAIN add_chain ; int * ReqToChain ; int * RequestNB ; int * ChainToChain ; t#u8 * ChainBuffer ; t#dma_addr_t ChainBufferDMA ; s#list_head FreeChainQ ; t#spinlock_t FreeChainQlock ; t#dma_addr_t req_frames_dma ; t#MPT_FRAME_HDR * req_frames ; t#u32 req_frames_low_dma ; int req_depth ; int req_sz ; t#spinlock_t FreeQlock ; s#list_head FreeQ ; t#u8 * sense_buf_pool ; t#dma_addr_t sense_buf_pool_dma ; t#u32 sense_buf_low_dma ; t#u8 * HostPageBuffer ; t#u32 HostPageBuffer_sz ; t#dma_addr_t HostPageBuffer_dma ; int mtrr_reg ; s#pci_dev * pcidev ; int bars ; int msi_enable ; t#u8 * memmap ; s#Scsi_Host * sh ; t#SpiCfgData spi_data ; t#RaidCfgData raid_data ; t#SasCfgData sas_data ; t#FcCfgData fc_data ; s#proc_dir_entry * ioc_dentry ; s#_MPT_ADAPTER * alt_ioc ; t#u32 biosVersion ; int eventTypes ; int eventContext ; int eventLogSize ; s#_mpt_ioctl_events * events ; t#u8 * cached_fw ; t#dma_addr_t cached_fw_dma ; int hs_reply_idx ; t#u32 pad0 ; t#u32 NB_for_64_byte_frame ; t#u32 hs_req [ 128 / sizeof ( u32 ) ] ; t#u16 hs_reply [ 128 / sizeof ( u16 ) ] ; t#IOCFactsReply_t facts ; t#PortFactsReply_t pfacts [ 2 ] ; t#FCPortPage0_t fc_port_page0 [ 2 ] ; t#LANPage0_t lan_cnfg_page0 ; t#LANPage1_t lan_cnfg_page1 ; t#u32 csmi_change_count ; t#u8 pci_slot_number ; t#u8 ir_firmware ; int errata_flag_1064 ; int aen_event_read_flag ; t#u8 FirstWhoInit ; t#u8 upload_fw ; t#u8 NBShiftFactor ; t#u8 DoneCtx ; t#u8 TaskCtx ; t#u8 InternalCtx ; s#list_head list ; s#net_device * netdev ; s#list_head sas_topology ; s#mutex sas_topology_mutex ; t#u8 disable_hotplug_remove ; s#workqueue_struct * fw_event_q ; s#list_head fw_event_list ; t#spinlock_t fw_event_lock ; t#u8 fw_events_off ; char fw_event_q_name [ 20 ] ; s#mptsas_portinfo * hba_port_info ; t#u64 hba_port_sas_addr ; t#u16 hba_port_num_phy ; s#list_head sas_device_info_list ; s#semaphore sas_device_info_mutex ; t#u8 old_sas_discovery_protocal ; t#u8 sas_discovery_quiesce_io ; int sas_index ; t#MPT_MGMT sas_mgmt ; t#MPT_MGMT internal_cmds ; t#MPT_MGMT mptbase_cmds ; t#MPT_MGMT taskmgmt_cmds ; t#MPT_MGMT ioctl_cmds ; t#spinlock_t taskmgmt_lock ; int taskmgmt_in_progress ; t#u8 taskmgmt_quiesce_io ; t#u8 ioc_reset_in_progress ; t#MPT_SCHEDULE_TARGET_RESET schedule_target_reset ; t#u8 num_ports ; char reset_work_q_name [ 20 ] ; s#workqueue_struct * reset_work_q ; s#delayed_work fault_reset_work ; s#work_struct fc_setup_reset_work ; s#list_head fc_rports ; s#work_struct fc_lsc_work ; t#u8 fc_link_speed [ 2 ] ; t#spinlock_t fc_rescan_work_lock ; s#work_struct fc_rescan_work ; char fc_rescan_work_q_name [ 20 ] ; s#workqueue_struct * fc_rescan_work_q ; unsigned long hard_resets ; unsigned long soft_resets ; unsigned long timeouts ; s#scsi_cmnd * * ScsiLookup ; t#spinlock_t scsi_lookup_lock ; int sdev_queue_depth ; t#u64 dma_mask ; t#u32 broadcast_aen_busy ; t#u8 * DiagBuffer [ ( 0x03 ) ] ; t#u32 DataSize [ ( 0x03 ) ] ; t#u32 DiagBuffer_sz [ ( 0x03 ) ] ; t#dma_addr_t DiagBuffer_dma [ ( 0x03 ) ] ; t#u8 TraceLevel [ ( 0x03 ) ] ; t#u8 DiagBuffer_Status [ ( 0x03 ) ] ; t#u32 UniqueId [ ( 0x03 ) ] ; t#u32 ExtendedType [ ( 0x03 ) ] ; t#u32 ProductSpecific [ ( 0x03 ) ] [ 4 ] ; t#u8 sg_addr_size ; t#u8 SGE_size ; t#u8 in_rescan ; t#u8 is_fault ; t#u32 ring_buffer_offset ; t#u32 ring_buffer_sz ; } 
t#MPT_ADAPTER typedef s#_MPT_ADAPTER MPT_ADAPTER 
t#MPT_CALLBACK typedef int ( * MPT_CALLBACK ) ( t#MPT_ADAPTER * , t#MPT_FRAME_HDR * , t#MPT_FRAME_HDR * ) 
t#MPT_DRIVER_CLASS typedef enum { MPTBASE_DRIVER , MPTCTL_DRIVER , MPTSPI_DRIVER , MPTFC_DRIVER , MPTSAS_DRIVER , MPTLAN_DRIVER , MPTSTM_DRIVER , MPTUNKNOWN_DRIVER } MPT_DRIVER_CLASS 
mpt_register extern t#u8 mpt_register ( t#MPT_CALLBACK , t#MPT_DRIVER_CLASS ) 
mpt_deregister extern void mpt_deregister ( t#u8 ) 
s#_MSG_EVENT_NOTIFY_REPLY struct _MSG_EVENT_NOTIFY_REPLY { t#U16 EventDataLength ; t#U8 MsgLength ; t#U8 Function ; t#U8 Reserved1 [ 2 ] ; t#U8 AckRequired ; t#U8 MsgFlags ; t#U32 MsgContext ; t#U8 Reserved2 [ 2 ] ; t#U16 IOCStatus ; t#U32 IOCLogInfo ; t#U32 Event ; t#U32 EventContext ; t#U32 Data [ 1 ] ; } 
t#EventNotificationReply_t typedef s#_MSG_EVENT_NOTIFY_REPLY EventNotificationReply_t 
t#MPT_EVHANDLER typedef int ( * MPT_EVHANDLER ) ( t#MPT_ADAPTER * , t#EventNotificationReply_t * ) 
mpt_event_register extern int mpt_event_register ( t#u8 , t#MPT_EVHANDLER ) 
mpt_event_deregister extern void mpt_event_deregister ( t#u8 ) 
t#MPT_RESETHANDLER typedef int ( * MPT_RESETHANDLER ) ( t#MPT_ADAPTER * , int ) 
mpt_reset_register extern int mpt_reset_register ( t#u8 , t#MPT_RESETHANDLER ) 
mpt_reset_deregister extern void mpt_reset_deregister ( t#u8 ) 
s#mpt_pci_driver struct mpt_pci_driver { int ( * probe ) ( s#pci_dev * , const s#pci_device_id * ) ; void ( * remove ) ( s#pci_dev * ) ; } 
mpt_device_driver_register extern int mpt_device_driver_register ( s#mpt_pci_driver * , t#u8 ) 
mpt_device_driver_deregister extern void mpt_device_driver_deregister ( t#u8 ) 
mpt_get_msg_frame extern t#MPT_FRAME_HDR * mpt_get_msg_frame ( t#u8 , t#MPT_ADAPTER * ) 
mpt_put_msg_frame extern void mpt_put_msg_frame ( t#u8 , t#MPT_ADAPTER * , t#MPT_FRAME_HDR * ) 
mpt_put_msg_frame_hi_pri extern void mpt_put_msg_frame_hi_pri ( t#u8 , t#MPT_ADAPTER * , t#MPT_FRAME_HDR * ) 
mpt_free_msg_frame extern void mpt_free_msg_frame ( t#MPT_ADAPTER * , t#MPT_FRAME_HDR * ) 
mpt_send_handshake_request extern int mpt_send_handshake_request ( t#u8 , t#MPT_ADAPTER * , int , t#u32 * , int ) 
mpt_verify_adapter extern int mpt_verify_adapter ( int , t#MPT_ADAPTER * * ) 
mpt_GetIocState extern t#u32 mpt_GetIocState ( t#MPT_ADAPTER * , int ) 
mpt_print_ioc_summary extern void mpt_print_ioc_summary ( t#MPT_ADAPTER * , char * , int * , int , int ) 
mpt_HardResetHandler extern int mpt_HardResetHandler ( t#MPT_ADAPTER * , int ) 
mpt_SoftResetHandler extern int mpt_SoftResetHandler ( t#MPT_ADAPTER * , int ) 
s#_CONFIG_EXTENDED_PAGE_HEADER struct _CONFIG_EXTENDED_PAGE_HEADER { t#U8 PageVersion ; t#U8 Reserved1 ; t#U8 PageNumber ; t#U8 PageType ; t#U16 ExtPageLength ; t#U8 ExtPageType ; t#U8 Reserved2 ; } 
t#ConfigExtendedPageHeader_t typedef s#_CONFIG_EXTENDED_PAGE_HEADER ConfigExtendedPageHeader_t 
s#_x_config_parms struct _x_config_parms { union { t#ConfigExtendedPageHeader_t * ehdr ; t#ConfigPageHeader_t * hdr ; } cfghdr ; t#dma_addr_t physAddr ; t#u32 pageAddr ; t#u16 status ; t#u8 action ; t#u8 dir ; t#u8 timeout ; } 
t#CONFIGPARMS typedef s#_x_config_parms CONFIGPARMS 
mpt_config extern int mpt_config ( t#MPT_ADAPTER * , t#CONFIGPARMS * ) 
mpt_findImVolumes extern int mpt_findImVolumes ( t#MPT_ADAPTER * ) 
mpt_alloc_fw_memory extern int mpt_alloc_fw_memory ( t#MPT_ADAPTER * , int ) 
mpt_free_fw_memory extern void mpt_free_fw_memory ( t#MPT_ADAPTER * ) 
mptbase_sas_persist_operation extern int mptbase_sas_persist_operation ( t#MPT_ADAPTER * , t#u8 ) 
s#_RAID_PHYS_DISK0_SETTINGS struct _RAID_PHYS_DISK0_SETTINGS { t#U8 SepID ; t#U8 SepBus ; t#U8 HotSparePool ; t#U8 PhysDiskSettings ; } 
t#RAID_PHYS_DISK0_SETTINGS typedef s#_RAID_PHYS_DISK0_SETTINGS RAID_PHYS_DISK0_SETTINGS 
s#_RAID_PHYS_DISK_INQUIRY_DATA struct _RAID_PHYS_DISK_INQUIRY_DATA { t#U8 VendorID [ 8 ] ; t#U8 ProductID [ 16 ] ; t#U8 ProductRevLevel [ 4 ] ; t#U8 Info [ 32 ] ; } 
t#RAID_PHYS_DISK0_INQUIRY_DATA typedef s#_RAID_PHYS_DISK_INQUIRY_DATA RAID_PHYS_DISK0_INQUIRY_DATA 
s#_RAID_PHYS_DISK0_STATUS struct _RAID_PHYS_DISK0_STATUS { t#U8 Flags ; t#U8 State ; t#U16 Reserved ; } 
t#RAID_PHYS_DISK0_STATUS typedef s#_RAID_PHYS_DISK0_STATUS RAID_PHYS_DISK0_STATUS 
s#_RAID_PHYS_DISK0_ERROR_DATA struct _RAID_PHYS_DISK0_ERROR_DATA { t#U8 ErrorCdbByte ; t#U8 ErrorSenseKey ; t#U16 Reserved ; t#U16 ErrorCount ; t#U8 ErrorASC ; t#U8 ErrorASCQ ; t#U16 SmartCount ; t#U8 SmartASC ; t#U8 SmartASCQ ; } 
t#RAID_PHYS_DISK0_ERROR_DATA typedef s#_RAID_PHYS_DISK0_ERROR_DATA RAID_PHYS_DISK0_ERROR_DATA 
s#_CONFIG_PAGE_RAID_PHYS_DISK_0 struct _CONFIG_PAGE_RAID_PHYS_DISK_0 { t#CONFIG_PAGE_HEADER Header ; t#U8 PhysDiskID ; t#U8 PhysDiskBus ; t#U8 PhysDiskIOC ; t#U8 PhysDiskNum ; t#RAID_PHYS_DISK0_SETTINGS PhysDiskSettings ; t#U32 Reserved1 ; t#U8 ExtDiskIdentifier [ 8 ] ; t#U8 DiskIdentifier [ 16 ] ; t#RAID_PHYS_DISK0_INQUIRY_DATA InquiryData ; t#RAID_PHYS_DISK0_STATUS PhysDiskStatus ; t#U32 MaxLBA ; t#RAID_PHYS_DISK0_ERROR_DATA ErrorData ; } 
t#pRaidPhysDiskPage0_t typedef s#_CONFIG_PAGE_RAID_PHYS_DISK_0 * pRaidPhysDiskPage0_t 
mpt_raid_phys_disk_pg0 extern int mpt_raid_phys_disk_pg0 ( t#MPT_ADAPTER * , t#u8 , t#pRaidPhysDiskPage0_t ) 
s#_RAID_PHYS_DISK1_PATH struct _RAID_PHYS_DISK1_PATH { t#U8 PhysDiskID ; t#U8 PhysDiskBus ; t#U16 Reserved1 ; t#U64 WWID ; t#U64 OwnerWWID ; t#U8 OwnerIdentifier ; t#U8 Reserved2 ; t#U16 Flags ; } 
t#RAID_PHYS_DISK1_PATH typedef s#_RAID_PHYS_DISK1_PATH RAID_PHYS_DISK1_PATH 
s#_CONFIG_PAGE_RAID_PHYS_DISK_1 struct _CONFIG_PAGE_RAID_PHYS_DISK_1 { t#CONFIG_PAGE_HEADER Header ; t#U8 NumPhysDiskPaths ; t#U8 PhysDiskNum ; t#U16 Reserved2 ; t#U32 Reserved1 ; t#RAID_PHYS_DISK1_PATH Path [ ( 1 ) ] ; } 
t#pRaidPhysDiskPage1_t typedef s#_CONFIG_PAGE_RAID_PHYS_DISK_1 * pRaidPhysDiskPage1_t 
mpt_raid_phys_disk_pg1 extern int mpt_raid_phys_disk_pg1 ( t#MPT_ADAPTER * , t#u8 , t#pRaidPhysDiskPage1_t ) 
mpt_raid_phys_disk_get_num_paths extern int mpt_raid_phys_disk_get_num_paths ( t#MPT_ADAPTER * , t#u8 ) 
mpt_set_taskmgmt_in_progress_flag extern int mpt_set_taskmgmt_in_progress_flag ( t#MPT_ADAPTER * ) 
mpt_clear_taskmgmt_in_progress_flag extern void mpt_clear_taskmgmt_in_progress_flag ( t#MPT_ADAPTER * ) 
mpt_halt_firmware extern void mpt_halt_firmware ( t#MPT_ADAPTER * ) 

/* drivers/message/fusion/mptscsih.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##blk_trace
s##timer_rand_state
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##scsi_host_cmd_pool
s##scsi_sense_hdr
s##scsi_transport_template
s##workqueue_struct
s##net_device
s##mptsas_portinfo
mptscsih_is_phys_disk extern int mptscsih_is_phys_disk ( t#MPT_ADAPTER * , t#u8 , t#u8 ) 
mptscsih_raid_id_to_num extern t#u8 mptscsih_raid_id_to_num ( t#MPT_ADAPTER * , t#u8 , t#u8 ) 
mptscsih_host_attrs extern s#device_attribute * mptscsih_host_attrs [ ] 
mptscsih_remove extern void mptscsih_remove ( s#pci_dev * ) 
mptscsih_shutdown extern void mptscsih_shutdown ( s#pci_dev * ) 
mptscsih_suspend extern int mptscsih_suspend ( s#pci_dev * , t#pm_message_t ) 
mptscsih_resume extern int mptscsih_resume ( s#pci_dev * ) 
mptscsih_proc_info extern int mptscsih_proc_info ( s#Scsi_Host * , char * , char * * , t#off_t , int , int ) 
mptscsih_info extern const char * mptscsih_info ( s#Scsi_Host * ) 
mptscsih_qcmd extern int mptscsih_qcmd ( s#scsi_cmnd * , void ( * ) ( s#scsi_cmnd * ) ) 
mptscsih_slave_destroy extern void mptscsih_slave_destroy ( s#scsi_device * ) 
mptscsih_slave_configure extern int mptscsih_slave_configure ( s#scsi_device * ) 
mptscsih_abort extern int mptscsih_abort ( s#scsi_cmnd * ) 
mptscsih_dev_reset extern int mptscsih_dev_reset ( s#scsi_cmnd * ) 
mptscsih_bus_reset extern int mptscsih_bus_reset ( s#scsi_cmnd * ) 
mptscsih_host_reset extern int mptscsih_host_reset ( s#scsi_cmnd * ) 
mptscsih_bios_param extern int mptscsih_bios_param ( s#scsi_device * , s#block_device * , t#sector_t , int [ ] ) 
mptscsih_io_done extern int mptscsih_io_done ( t#MPT_ADAPTER * , t#MPT_FRAME_HDR * , t#MPT_FRAME_HDR * ) 
mptscsih_taskmgmt_complete extern int mptscsih_taskmgmt_complete ( t#MPT_ADAPTER * , t#MPT_FRAME_HDR * , t#MPT_FRAME_HDR * ) 
mptscsih_scandv_complete extern int mptscsih_scandv_complete ( t#MPT_ADAPTER * , t#MPT_FRAME_HDR * , t#MPT_FRAME_HDR * ) 
mptscsih_event_process extern int mptscsih_event_process ( t#MPT_ADAPTER * , t#EventNotificationReply_t * ) 
mptscsih_ioc_reset extern int mptscsih_ioc_reset ( t#MPT_ADAPTER * , int ) 
mptscsih_change_queue_depth extern int mptscsih_change_queue_depth ( s#scsi_device * , int , int ) 
t#ushort typedef unsigned short ushort 
s#_MPT_SCSI_HOST struct _MPT_SCSI_HOST { t#MPT_ADAPTER * ioc ; t#ushort sel_timeout [ 255 ] ; char * info_kbuf ; long last_queue_full ; t#u16 spi_pending ; s#list_head target_reset_list ; } 
t#MPT_SCSI_HOST typedef s#_MPT_SCSI_HOST MPT_SCSI_HOST 
mptscsih_IssueTaskMgmt extern int mptscsih_IssueTaskMgmt ( t#MPT_SCSI_HOST * , t#u8 , t#u8 , t#u8 , int , int , t#ulong ) 
s#_internal_cmd struct _internal_cmd { char * data ; t#dma_addr_t data_dma ; int size ; t#u8 cmd ; t#u8 channel ; t#u8 id ; int lun ; t#u8 flags ; t#u8 physDiskNum ; t#u8 rsvd2 ; t#u8 rsvd ; } 
t#INTERNAL_CMD typedef s#_internal_cmd INTERNAL_CMD 
mptscsih_do_cmd extern int mptscsih_do_cmd ( t#MPT_SCSI_HOST * , t#INTERNAL_CMD * ) 
mptscsih_quiesce_raid extern int mptscsih_quiesce_raid ( t#MPT_SCSI_HOST * , int , t#u8 , t#u8 ) 
mptscsih_get_scsi_lookup extern s#scsi_cmnd * mptscsih_get_scsi_lookup ( t#MPT_ADAPTER * , int ) 
mptscsih_taskmgmt_response_code extern void mptscsih_taskmgmt_response_code ( t#MPT_ADAPTER * , t#u8 ) 

/* drivers/message/i2o/debug.o */
s#i2o_message struct i2o_message { union { struct { t#u8 version_offset ; t#u8 flags ; t#u16 size ; t#u32 target_tid : 12 ; t#u32 init_tid : 12 ; t#u32 function : 8 ; t#u32 icntxt ; t#u32 tcntxt ; } s ; t#u32 head [ 4 ] ; } u ; t#u32 body [ 0 ] ; } 
i2o_dump_message extern void i2o_dump_message ( s#i2o_message * ) 

/* drivers/message/i2o/device.o */
s#_i2o_lct_entry struct _i2o_lct_entry { t#__u32 entry_size : 16 ; t#__u32 tid : 12 ; t#__u32 reserved : 4 ; t#__u32 change_ind ; t#__u32 device_flags ; t#__u32 class_id : 12 ; t#__u32 version : 4 ; t#__u32 vendor_id : 16 ; t#__u32 sub_class ; t#__u32 user_tid : 12 ; t#__u32 parent_tid : 12 ; t#__u32 bios_info : 8 ; t#__u8 identity_tag [ 8 ] ; t#__u32 event_capabilities ; } 
t#i2o_lct_entry typedef s#_i2o_lct_entry i2o_lct_entry 
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#i2o_dma struct i2o_dma { void * virt ; t#dma_addr_t phys ; t#size_t len ; } 
s#_i2o_lct struct _i2o_lct { t#__u32 table_size : 16 ; t#__u32 boot_tid : 12 ; t#__u32 lct_ver : 4 ; t#__u32 iop_flags ; t#__u32 change_ind ; t#i2o_lct_entry lct_entry [ 1 ] ; } 
t#i2o_lct typedef s#_i2o_lct i2o_lct 
s#i2o_io struct i2o_io { void * virt ; unsigned long phys ; unsigned long len ; } 
s#i2o_pool struct i2o_pool { char * name ; s#kmem_cache * slab ; t#mempool_t * mempool ; } 
s#i2o_controller struct i2o_controller { char name [ 16 ] ; int unit ; int type ; s#pci_dev * pdev ; unsigned int promise : 1 ; unsigned int adaptec : 1 ; unsigned int raptor : 1 ; unsigned int no_quiesce : 1 ; unsigned int short_req : 1 ; unsigned int limit_sectors : 1 ; unsigned int pae_support : 1 ; s#list_head devices ; s#list_head list ; void * in_port ; void * out_port ; void * irq_status ; void * irq_mask ; s#i2o_dma status ; s#i2o_dma hrt ; t#i2o_lct * lct ; s#i2o_dma dlct ; s#mutex lct_lock ; s#i2o_dma status_block ; s#i2o_io base ; s#i2o_io in_queue ; s#i2o_dma out_queue ; s#i2o_pool in_msg ; unsigned int battery : 1 ; unsigned int io_alloc : 1 ; unsigned int mem_alloc : 1 ; s#resource io_resource ; s#resource mem_resource ; s#device device ; s#i2o_device * exec ; t#spinlock_t context_list_lock ; t#atomic_t context_list_counter ; s#list_head context_list ; t#spinlock_t lock ; void * driver_data [ 8 ] ; } 
s#i2o_device struct i2o_device { t#i2o_lct_entry lct_data ; s#i2o_controller * iop ; s#list_head list ; s#device device ; s#mutex lock ; } 
i2o_device_claim extern int i2o_device_claim ( s#i2o_device * ) 
i2o_device_claim_release extern int i2o_device_claim_release ( s#i2o_device * ) 
i2o_parm_field_get extern int i2o_parm_field_get ( s#i2o_device * , int , int , void * , int ) 
i2o_parm_table_get extern int i2o_parm_table_get ( s#i2o_device * , int , int , int , void * , int , void * , int ) 
i2o_parm_issue int i2o_parm_issue ( s#i2o_device * , int , void * , int , void * , int ) 

/* drivers/message/i2o/driver.o */
s#i2o_class_id struct i2o_class_id { t#u16 class_id : 12 ; } 
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##workqueue_struct
s#i2o_driver struct i2o_driver { char * name ; int context ; s#i2o_class_id * classes ; int ( * reply ) ( s#i2o_controller * , t#u32 , s#i2o_message * ) ; t#work_func_t event ; s#workqueue_struct * event_queue ; s#device_driver driver ; void ( * notify_controller_add ) ( s#i2o_controller * ) ; void ( * notify_controller_remove ) ( s#i2o_controller * ) ; void ( * notify_device_add ) ( s#i2o_device * ) ; void ( * notify_device_remove ) ( s#i2o_device * ) ; s#semaphore lock ; } 
i2o_driver_register extern int i2o_driver_register ( s#i2o_driver * ) 
i2o_driver_unregister extern void i2o_driver_unregister ( s#i2o_driver * ) 
i2o_driver_notify_controller_add_all extern void i2o_driver_notify_controller_add_all ( s#i2o_controller * ) 
i2o_driver_notify_controller_remove_all extern void i2o_driver_notify_controller_remove_all ( s#i2o_controller * ) 
i2o_driver_notify_device_add_all extern void i2o_driver_notify_device_add_all ( s#i2o_device * ) 
i2o_driver_notify_device_remove_all extern void i2o_driver_notify_device_remove_all ( s#i2o_device * ) 

/* drivers/message/i2o/exec-osm.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
i2o_msg_post_wait_mem extern int i2o_msg_post_wait_mem ( s#i2o_controller * , s#i2o_message * , unsigned long , s#i2o_dma * ) 
i2o_exec_lct_get extern int i2o_exec_lct_get ( s#i2o_controller * ) 

/* drivers/message/i2o/iop.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
i2o_cntxt_list_add extern t#u32 i2o_cntxt_list_add ( s#i2o_controller * , void * ) 
i2o_cntxt_list_get extern void * i2o_cntxt_list_get ( s#i2o_controller * , t#u32 ) 
i2o_cntxt_list_remove extern t#u32 i2o_cntxt_list_remove ( s#i2o_controller * , void * ) 
i2o_cntxt_list_get_ptr extern t#u32 i2o_cntxt_list_get_ptr ( s#i2o_controller * , void * ) 
i2o_msg_get_wait extern s#i2o_message * i2o_msg_get_wait ( s#i2o_controller * , int ) 
i2o_find_iop extern s#i2o_controller * i2o_find_iop ( int ) 
i2o_iop_find_device extern s#i2o_device * i2o_iop_find_device ( s#i2o_controller * , t#u16 ) 
s##workqueue_struct
i2o_event_register extern int i2o_event_register ( s#i2o_device * , s#i2o_driver * , int , t#u32 ) 
i2o_status_get extern int i2o_status_get ( s#i2o_controller * ) 
i2o_controllers extern s#list_head i2o_controllers 

/* drivers/message/i2o/memory.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
i2o_sg_tablesize extern t#u16 i2o_sg_tablesize ( s#i2o_controller * , t#u16 ) 
i2o_dma_map_single extern t#dma_addr_t i2o_dma_map_single ( s#i2o_controller * , void * , t#size_t , e#dma_data_direction , t#u32 * * ) 
i2o_dma_map_sg extern int i2o_dma_map_sg ( s#i2o_controller * , s#scatterlist * , int , e#dma_data_direction , t#u32 * * ) 
i2o_dma_alloc extern int i2o_dma_alloc ( s#device * , s#i2o_dma * , t#size_t ) 
i2o_dma_free extern void i2o_dma_free ( s#device * , s#i2o_dma * ) 
i2o_dma_realloc extern int i2o_dma_realloc ( s#device * , s#i2o_dma * , t#size_t ) 
i2o_pool_alloc extern int i2o_pool_alloc ( s#i2o_pool * , const char * , t#size_t , int ) 
i2o_pool_free extern void i2o_pool_free ( s#i2o_pool * ) 

/* drivers/mfd/ab3100-core.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#ab3100 struct ab3100 { s#mutex access_mutex ; s#device * dev ; s#i2c_client * i2c_client ; s#i2c_client * testreg_client ; char chip_name [ 32 ] ; t#u8 chip_id ; s#work_struct work ; s#blocking_notifier_head event_subscribers ; t#u32 startup_events ; t#bool startup_events_read ; } 
ab3100_get_chip_type t#u8 ab3100_get_chip_type ( s#ab3100 * ) 
ab3100_set_register_interruptible int ab3100_set_register_interruptible ( s#ab3100 * , t#u8 , t#u8 ) 
ab3100_get_register_interruptible int ab3100_get_register_interruptible ( s#ab3100 * , t#u8 , t#u8 * ) 
ab3100_get_register_page_interruptible int ab3100_get_register_page_interruptible ( s#ab3100 * , t#u8 , t#u8 * , t#u8 ) 
ab3100_mask_and_set_register_interruptible int ab3100_mask_and_set_register_interruptible ( s#ab3100 * , t#u8 , t#u8 , t#u8 ) 
ab3100_event_register int ab3100_event_register ( s#ab3100 * , s#notifier_block * ) 
ab3100_event_unregister int ab3100_event_unregister ( s#ab3100 * , s#notifier_block * ) 
ab3100_event_registers_startup_state_get int ab3100_event_registers_startup_state_get ( s#ab3100 * , t#u32 * ) 

/* drivers/mfd/ezx-pcap.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#spi_message struct spi_message { s#list_head transfers ; s#spi_device * spi ; unsigned is_dma_mapped : 1 ; void ( * complete ) ( void * ) ; void * context ; unsigned actual_length ; int status ; s#list_head queue ; void * state ; } 
s#spi_master struct spi_master { s#device dev ; t#s16 bus_num ; t#u16 num_chipselect ; t#u16 dma_alignment ; t#u16 mode_bits ; t#u16 flags ; int ( * setup ) ( s#spi_device * ) ; int ( * transfer ) ( s#spi_device * , s#spi_message * ) ; void ( * cleanup ) ( s#spi_device * ) ; } 
s#spi_device struct spi_device { s#device dev ; s#spi_master * master ; t#u32 max_speed_hz ; t#u8 chip_select ; t#u8 mode ; t#u8 bits_per_word ; int irq ; void * controller_state ; void * controller_data ; char modalias [ 32 ] ; } 
s##map_segment
s##compat_timespec
s##pollfd
s##workqueue_struct
s#pcap_adc_request struct pcap_adc_request { t#u8 bank ; t#u8 ch [ 2 ] ; t#u32 flags ; void ( * callback ) ( void * , t#u16 [ ] ) ; void * data ; } 
s#pcap_chip struct pcap_chip { s#spi_device * spi ; t#u32 buf ; s#mutex io_mutex ; unsigned int irq_base ; t#u32 msr ; s#work_struct isr_work ; s#work_struct msr_work ; s#workqueue_struct * workqueue ; s#pcap_adc_request * adc_queue [ 8 ] ; t#u8 adc_head ; t#u8 adc_tail ; s#mutex adc_mutex ; } 
ezx_pcap_write int ezx_pcap_write ( s#pcap_chip * , t#u8 , t#u32 ) 
ezx_pcap_read int ezx_pcap_read ( s#pcap_chip * , t#u8 , t#u32 * ) 
ezx_pcap_set_bits int ezx_pcap_set_bits ( s#pcap_chip * , t#u8 , t#u32 , t#u32 ) 
irq_to_pcap int irq_to_pcap ( s#pcap_chip * , int ) 
pcap_to_irq int pcap_to_irq ( s#pcap_chip * , int ) 
pcap_set_ts_bits void pcap_set_ts_bits ( s#pcap_chip * , t#u32 ) 
pcap_adc_async int pcap_adc_async ( s#pcap_chip * , t#u8 , t#u32 , t#u8 [ ] , void * , void * ) 
pcap_adc_sync int pcap_adc_sync ( s#pcap_chip * , t#u8 , t#u32 , t#u8 [ ] , t#u16 [ ] ) 

/* drivers/mfd/htc-pasic3.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
pasic3_write_register extern void pasic3_write_register ( s#device * , t#u32 , t#u8 ) 
pasic3_read_register extern t#u8 pasic3_read_register ( s#device * , t#u32 ) 

/* drivers/mfd/mc13783-core.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##map_segment
s##compat_timespec
s##pollfd
s#mc13783_irq struct mc13783_irq { void ( * handler ) ( int , void * ) ; void * data ; } 
s##regulator_init_data
s#mc13783_regulator_init_data struct mc13783_regulator_init_data { int id ; s#regulator_init_data * init_data ; } 
s#mc13783 struct mc13783 { int revision ; s#device * dev ; s#spi_device * spi_device ; int ( * read_dev ) ( void * , char , int , t#u32 * ) ; int ( * write_dev ) ( void * , char , int , const t#u32 * ) ; s#mutex io_lock ; void * io_data ; int irq ; unsigned int flags ; s#mc13783_irq irq_handler [ 2 ] ; s#work_struct work ; s#completion adc_done ; unsigned int ts_active ; s#mutex adc_conv_lock ; s#mc13783_regulator_init_data * regulators ; int num_regulators ; } 
mc13783_reg_read int mc13783_reg_read ( s#mc13783 * , int , t#u32 * ) 
mc13783_reg_write int mc13783_reg_write ( s#mc13783 * , int , t#u32 ) 
mc13783_set_bits int mc13783_set_bits ( s#mc13783 * , int , t#u32 , t#u32 ) 
mc13783_register_irq int mc13783_register_irq ( s#mc13783 * , int , void ( * ) ( int , void * ) , void * ) 
mc13783_free_irq int mc13783_free_irq ( s#mc13783 * , int ) 
mc13783_adc_do_conversion int mc13783_adc_do_conversion ( s#mc13783 * , unsigned int , unsigned int , unsigned int * ) 
mc13783_adc_set_ts_status void mc13783_adc_set_ts_status ( s#mc13783 * , unsigned int ) 

/* drivers/mfd/mfd-core.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#mfd_cell struct mfd_cell { const char * name ; int id ; int ( * enable ) ( s#platform_device * ) ; int ( * disable ) ( s#platform_device * ) ; int ( * suspend ) ( s#platform_device * ) ; int ( * resume ) ( s#platform_device * ) ; void * driver_data ; void * platform_data ; t#size_t data_size ; int num_resources ; const s#resource * resources ; } 
mfd_add_devices extern int mfd_add_devices ( s#device * , int , const s#mfd_cell * , int , s#resource * , int ) 
mfd_remove_devices extern void mfd_remove_devices ( s#device * ) 

/* drivers/mfd/sm501.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##proc_dir_entry
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
sm501_misc_control extern int sm501_misc_control ( s#device * , unsigned long , unsigned long ) 
sm501_modify_reg extern unsigned long sm501_modify_reg ( s#device * , unsigned long , unsigned long , unsigned long ) 
sm501_unit_power extern int sm501_unit_power ( s#device * , unsigned int , unsigned int ) 
sm501_set_clock extern unsigned long sm501_set_clock ( s#device * , int , unsigned long ) 
sm501_find_clock extern unsigned long sm501_find_clock ( s#device * , int , unsigned long ) 

/* drivers/mfd/tps65010.o */
tps65010_set_vbus_draw extern int tps65010_set_vbus_draw ( unsigned ) 
tps65010_set_gpio_out_value extern int tps65010_set_gpio_out_value ( unsigned , unsigned ) 
tps65010_set_led extern int tps65010_set_led ( unsigned , unsigned ) 
tps65010_set_vib extern int tps65010_set_vib ( unsigned ) 
tps65010_set_low_pwr extern int tps65010_set_low_pwr ( unsigned ) 
tps65010_config_vregs1 extern int tps65010_config_vregs1 ( unsigned ) 
tps65013_set_low_pwr extern int tps65013_set_low_pwr ( unsigned ) 

/* drivers/mfd/ucb1400_core.o */
s##snd_card
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##proc_dir_entry
s##pci_dev
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
ucb1400_adc_read unsigned int ucb1400_adc_read ( s#snd_ac97 * , t#u16 , int ) 

/* drivers/mfd/wm8400-core.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##backing_dev_info
s##io_context
s##dentry
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#wm8400 struct wm8400 { s#device * dev ; int ( * read_dev ) ( void * , char , int , t#u16 * ) ; int ( * write_dev ) ( void * , char , int , const t#u16 * ) ; s#mutex io_lock ; void * io_data ; t#u16 reg_cache [ 0x55 ] ; s#platform_device regulators [ 6 ] ; } 
wm8400_reg_read t#u16 wm8400_reg_read ( s#wm8400 * , t#u8 ) 
wm8400_block_read int wm8400_block_read ( s#wm8400 * , t#u8 , int , t#u16 * ) 
wm8400_set_bits int wm8400_set_bits ( s#wm8400 * , t#u8 , t#u16 , t#u16 ) 
wm8400_reset_codec_reg_cache void wm8400_reset_codec_reg_cache ( s#wm8400 * ) 

/* drivers/misc/c2port/core.o */
s#c2port_ops struct c2port_ops { unsigned short block_size ; unsigned short blocks_num ; void ( * access ) ( s#c2port_device * , int ) ; void ( * c2d_dir ) ( s#c2port_device * , int ) ; int ( * c2d_get ) ( s#c2port_device * ) ; void ( * c2d_set ) ( s#c2port_device * , int ) ; void ( * c2ck_set ) ( s#c2port_device * , int ) ; } 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#c2port_device struct c2port_device { int flags_begin [ 0 ] ; ; unsigned int access : 1 ; unsigned int flash_access : 1 ; int flags_end [ 0 ] ; ; int id ; char name [ 32 ] ; s#c2port_ops * ops ; s#mutex mutex ; s#device * dev ; void * private_data ; } 
c2port_device_register extern s#c2port_device * c2port_device_register ( char * , s#c2port_ops * , void * ) 
c2port_device_unregister extern void c2port_device_unregister ( s#c2port_device * ) 

/* drivers/misc/cb710/core.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
cb710_pci_update_config_reg void cb710_pci_update_config_reg ( s#pci_dev * , int , t#uint32_t , t#uint32_t ) 
t#cb710_irq_handler_t typedef int ( * cb710_irq_handler_t ) ( s#cb710_slot * ) 
s#cb710_slot struct cb710_slot { s#platform_device pdev ; void * iobase ; t#cb710_irq_handler_t irq_handler ; } 
cb710_set_irq_handler void cb710_set_irq_handler ( s#cb710_slot * , t#cb710_irq_handler_t ) 

/* drivers/misc/cb710/sgbuf2.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s#sg_mapping_iter struct sg_mapping_iter { s#page * page ; void * addr ; t#size_t length ; t#size_t consumed ; s#scatterlist * __sg ; unsigned int __nents ; unsigned int __offset ; unsigned int __flags ; } 
cb710_sg_dwiter_read_next_block t#uint32_t cb710_sg_dwiter_read_next_block ( s#sg_mapping_iter * ) 
cb710_sg_dwiter_write_next_block void cb710_sg_dwiter_write_next_block ( s#sg_mapping_iter * , t#uint32_t ) 

/* drivers/misc/eeprom/eeprom_93cx6.o */
s#eeprom_93cx6 struct eeprom_93cx6 { void * data ; void ( * register_read ) ( s#eeprom_93cx6 * ) ; void ( * register_write ) ( s#eeprom_93cx6 * ) ; int width ; char reg_data_in ; char reg_data_out ; char reg_data_clock ; char reg_chip_select ; } 
eeprom_93cx6_read extern void eeprom_93cx6_read ( s#eeprom_93cx6 * , const t#u8 , t#u16 * ) 
eeprom_93cx6_multiread extern void eeprom_93cx6_multiread ( s#eeprom_93cx6 * , const t#u8 , t#__le16 * , const t#u16 ) 

/* drivers/misc/enclosure.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
e#enclosure_component_type enum enclosure_component_type { ENCLOSURE_COMPONENT_DEVICE = 0x01 , ENCLOSURE_COMPONENT_ARRAY_DEVICE = 0x17 , } 
e#enclosure_status enum enclosure_status { ENCLOSURE_STATUS_UNSUPPORTED = 0 , ENCLOSURE_STATUS_OK , ENCLOSURE_STATUS_CRITICAL , ENCLOSURE_STATUS_NON_CRITICAL , ENCLOSURE_STATUS_UNRECOVERABLE , ENCLOSURE_STATUS_NOT_INSTALLED , ENCLOSURE_STATUS_UNKNOWN , ENCLOSURE_STATUS_UNAVAILABLE , ENCLOSURE_STATUS_MAX } 
s#enclosure_component struct enclosure_component { void * scratch ; s#device cdev ; s#device * dev ; e#enclosure_component_type type ; int number ; int fault ; int active ; int locate ; e#enclosure_status status ; } 
e#enclosure_component_setting enum enclosure_component_setting { ENCLOSURE_SETTING_DISABLED = 0 , ENCLOSURE_SETTING_ENABLED = 1 , ENCLOSURE_SETTING_BLINK_A_ON_OFF = 2 , ENCLOSURE_SETTING_BLINK_A_OFF_ON = 3 , ENCLOSURE_SETTING_BLINK_B_ON_OFF = 6 , ENCLOSURE_SETTING_BLINK_B_OFF_ON = 7 , } 
s#enclosure_component_callbacks struct enclosure_component_callbacks { void ( * get_status ) ( s#enclosure_device * , s#enclosure_component * ) ; int ( * set_status ) ( s#enclosure_device * , s#enclosure_component * , e#enclosure_status ) ; void ( * get_fault ) ( s#enclosure_device * , s#enclosure_component * ) ; int ( * set_fault ) ( s#enclosure_device * , s#enclosure_component * , e#enclosure_component_setting ) ; void ( * get_active ) ( s#enclosure_device * , s#enclosure_component * ) ; int ( * set_active ) ( s#enclosure_device * , s#enclosure_component * , e#enclosure_component_setting ) ; void ( * get_locate ) ( s#enclosure_device * , s#enclosure_component * ) ; int ( * set_locate ) ( s#enclosure_device * , s#enclosure_component * , e#enclosure_component_setting ) ; } 
s#enclosure_device struct enclosure_device { void * scratch ; s#list_head node ; s#device edev ; s#enclosure_component_callbacks * cb ; int components ; s#enclosure_component component [ 0 ] ; } 
enclosure_find s#enclosure_device * enclosure_find ( s#device * , s#enclosure_device * ) 
enclosure_for_each_device int enclosure_for_each_device ( int ( * ) ( s#enclosure_device * , void * ) , void * ) 
enclosure_register s#enclosure_device * enclosure_register ( s#device * , const char * , int , s#enclosure_component_callbacks * ) 
enclosure_unregister void enclosure_unregister ( s#enclosure_device * ) 
enclosure_component_register s#enclosure_component * enclosure_component_register ( s#enclosure_device * , unsigned int , e#enclosure_component_type , const char * ) 
enclosure_add_device int enclosure_add_device ( s#enclosure_device * , int , s#device * ) 
enclosure_remove_device int enclosure_remove_device ( s#enclosure_device * , s#device * ) 

/* drivers/misc/ioc4.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##proc_dir_entry
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
u#ioc4_pci_err_addr_l union ioc4_pci_err_addr_l { t#uint32_t raw ; struct { t#uint32_t valid : 1 ; t#uint32_t master_id : 4 ; t#uint32_t mul_err : 1 ; t#uint32_t addr : 26 ; } fields ; } 
u#ioc4_sio_int union ioc4_sio_int { t#uint32_t raw ; struct { t#uint8_t tx_mt : 1 ; t#uint8_t rx_full : 1 ; t#uint8_t rx_high : 1 ; t#uint8_t rx_timer : 1 ; t#uint8_t delta_dcd : 1 ; t#uint8_t delta_cts : 1 ; t#uint8_t intr_pass : 1 ; t#uint8_t tx_explicit : 1 ; } fields [ 4 ] ; } 
u#ioc4_other_int union ioc4_other_int { t#uint32_t raw ; struct { t#uint32_t ata_int : 1 ; t#uint32_t ata_memerr : 1 ; t#uint32_t memerr : 4 ; t#uint32_t kbd_int : 1 ; t#uint32_t reserved : 16 ; t#uint32_t rt_int : 1 ; t#uint32_t gen_int : 8 ; } fields ; } 
u#ioc4_sio_cr union ioc4_sio_cr { t#uint32_t raw ; struct { t#uint32_t cmd_pulse : 4 ; t#uint32_t arb_diag : 3 ; t#uint32_t sio_diag_idle : 1 ; t#uint32_t ata_diag_idle : 1 ; t#uint32_t ata_diag_active : 1 ; t#uint32_t reserved : 22 ; } fields ; } 
u#ioc4_int_out union ioc4_int_out { t#uint32_t raw ; struct { t#uint32_t count : 16 ; t#uint32_t mode : 3 ; t#uint32_t reserved : 11 ; t#uint32_t diag : 1 ; t#uint32_t int_out : 1 ; } fields ; } 
u#ioc4_gpcr union ioc4_gpcr { t#uint32_t raw ; struct { t#uint32_t dir : 8 ; t#uint32_t edge : 8 ; t#uint32_t reserved1 : 4 ; t#uint32_t int_out_en : 1 ; t#uint32_t reserved2 : 11 ; } fields ; } 
u#ioc4_gpdr union ioc4_gpdr { t#uint32_t raw ; struct { t#uint32_t gen_pin : 8 ; t#uint32_t reserved : 24 ; } fields ; } 
u#ioc4_gppr union ioc4_gppr { t#uint32_t raw ; struct { t#uint32_t gen_pin : 1 ; t#uint32_t reserved : 31 ; } fields ; } 
s#ioc4_misc_regs struct ioc4_misc_regs { u#ioc4_pci_err_addr_l pci_err_addr_l ; t#uint32_t pci_err_addr_h ; u#ioc4_sio_int sio_ir ; u#ioc4_other_int other_ir ; u#ioc4_sio_int sio_ies ; u#ioc4_other_int other_ies ; u#ioc4_sio_int sio_iec ; u#ioc4_other_int other_iec ; u#ioc4_sio_cr sio_cr ; t#uint32_t unused1 ; u#ioc4_int_out int_out ; t#uint32_t unused2 ; u#ioc4_gpcr gpcr_s ; u#ioc4_gpcr gpcr_c ; u#ioc4_gpdr gpdr ; t#uint32_t unused3 ; u#ioc4_gppr gppr [ 8 ] ; } 
s#ioc4_driver_data struct ioc4_driver_data { s#list_head idd_list ; unsigned long idd_bar0 ; s#pci_dev * idd_pdev ; const s#pci_device_id * idd_pci_id ; s#ioc4_misc_regs * idd_misc_regs ; unsigned long count_period ; void * idd_serial_data ; unsigned int idd_variant ; } 
s#ioc4_submodule struct ioc4_submodule { s#list_head is_list ; char * is_name ; s#module * is_owner ; int ( * is_probe ) ( s#ioc4_driver_data * ) ; int ( * is_remove ) ( s#ioc4_driver_data * ) ; } 
ioc4_register_submodule extern int ioc4_register_submodule ( s#ioc4_submodule * ) 
ioc4_unregister_submodule extern void ioc4_unregister_submodule ( s#ioc4_submodule * ) 

/* drivers/misc/sgi-gru/grukservices.o */
s#gru_message_queue_desc struct gru_message_queue_desc { void * mq ; unsigned long mq_gpa ; int qlines ; int interrupt_vector ; int interrupt_pnode ; int interrupt_apicid ; } 
gru_create_message_queue extern int gru_create_message_queue ( s#gru_message_queue_desc * , void * , unsigned int , int , int , int ) 
gru_send_message_gpa extern int gru_send_message_gpa ( s#gru_message_queue_desc * , void * , unsigned int ) 
gru_free_message extern void gru_free_message ( s#gru_message_queue_desc * , void * ) 
gru_get_next_message extern void * gru_get_next_message ( s#gru_message_queue_desc * ) 
gru_read_gpa int gru_read_gpa ( unsigned long * , unsigned long ) 
gru_copy_gpa extern int gru_copy_gpa ( unsigned long , unsigned long , unsigned int ) 

/* drivers/misc/sgi-xp/xp_main.o */
xp_max_npartitions extern short xp_max_npartitions 
xp_partition_id extern short xp_partition_id 
xp_region_size extern t#u8 xp_region_size 
xp_pa extern unsigned long ( * xp_pa ) ( void * ) 
xp_socket_pa extern unsigned long ( * xp_socket_pa ) ( unsigned long ) 
e#xp_retval enum xp_retval { xpSuccess = 0 , xpNotConnected , xpConnected , xpRETIRED1 , xpMsgReceived , xpMsgDelivered , xpRETIRED2 , xpNoWait , xpRetry , xpTimeout , xpInterrupted , xpUnequalMsgSizes , xpInvalidAddress , xpNoMemory , xpLackOfResources , xpUnregistered , xpAlreadyRegistered , xpPartitionDown , xpNotLoaded , xpUnloading , xpBadMagic , xpReactivating , xpUnregistering , xpOtherUnregistering , xpCloneKThread , xpCloneKThreadFailed , xpNoHeartbeat , xpPioReadError , xpPhysAddrRegFailed , xpRETIRED3 , xpRETIRED4 , xpRETIRED5 , xpRETIRED6 , xpRETIRED7 , xpRETIRED8 , xpRETIRED9 , xpRETIRED10 , xpRETIRED11 , xpRETIRED12 , xpBadVersion , xpVarsNotSet , xpNoRsvdPageAddr , xpInvalidPartid , xpLocalPartid , xpOtherGoingDown , xpSystemGoingDown , xpSystemHalt , xpSystemReboot , xpSystemPoweroff , xpDisconnecting , xpOpenCloseError , xpDisconnected , xpBteCopyError , xpSalError , xpRsvdPageNotSet , xpPayloadTooBig , xpUnsupported , xpNeedMoreInfo , xpGruCopyError , xpGruSendMqError , xpBadChannelNumber , xpBadMsgType , xpBiosError , xpUnknownReason } 
xp_remote_memcpy extern e#xp_retval ( * xp_remote_memcpy ) ( unsigned long , const unsigned long , t#size_t ) 
xp_cpu_to_nasid extern int ( * xp_cpu_to_nasid ) ( int ) 
xp_expand_memprotect extern e#xp_retval ( * xp_expand_memprotect ) ( unsigned long , unsigned long ) 
xp_restrict_memprotect extern e#xp_retval ( * xp_restrict_memprotect ) ( unsigned long , unsigned long ) 
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
t#xpc_channel_func typedef void ( * xpc_channel_func ) ( e#xp_retval , short , int , void * , void * ) 
s#xpc_registration struct xpc_registration { s#mutex mutex ; t#xpc_channel_func func ; void * key ; t#u16 nentries ; t#u16 entry_size ; t#u32 assigned_limit ; t#u32 idle_limit ; } 
xpc_registrations s#xpc_registration xpc_registrations [ 2 ] 
t#xpc_notify_func typedef void ( * xpc_notify_func ) ( e#xp_retval , short , int , void * ) 
s#xpc_interface struct xpc_interface { void ( * connect ) ( int ) ; void ( * disconnect ) ( int ) ; e#xp_retval ( * send ) ( short , int , t#u32 , void * , t#u16 ) ; e#xp_retval ( * send_notify ) ( short , int , t#u32 , void * , t#u16 , t#xpc_notify_func , void * ) ; void ( * received ) ( short , int , void * ) ; e#xp_retval ( * partid_to_nasids ) ( short , void * ) ; } 
xpc_interface extern s#xpc_interface xpc_interface 
xpc_set_interface extern void xpc_set_interface ( void ( * ) ( int ) , void ( * ) ( int ) , e#xp_retval ( * ) ( short , int , t#u32 , void * , t#u16 ) , e#xp_retval ( * ) ( short , int , t#u32 , void * , t#u16 , t#xpc_notify_func , void * ) , void ( * ) ( short , int , void * ) , e#xp_retval ( * ) ( short , void * ) ) 
xpc_clear_interface extern void xpc_clear_interface ( void ) 
xpc_connect extern e#xp_retval xpc_connect ( int , t#xpc_channel_func , void * , t#u16 , t#u16 , t#u32 , t#u32 ) 
xpc_disconnect extern void xpc_disconnect ( int ) 

/* drivers/misc/tifm_core.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s#tifm_dev struct tifm_dev { char * addr ; t#spinlock_t lock ; unsigned char type ; unsigned int socket_id ; void ( * card_event ) ( s#tifm_dev * ) ; void ( * data_event ) ( s#tifm_dev * ) ; s#device dev ; } 
s#tifm_adapter struct tifm_adapter { char * addr ; t#spinlock_t lock ; unsigned int irq_status ; unsigned int socket_change_set ; unsigned int id ; unsigned int num_sockets ; s#completion * finish_me ; s#work_struct media_switcher ; s#device dev ; void ( * eject ) ( s#tifm_adapter * , s#tifm_dev * ) ; int ( * has_ms_pif ) ( s#tifm_adapter * , s#tifm_dev * ) ; s#tifm_dev * sockets [ 0 ] ; } 
tifm_alloc_adapter s#tifm_adapter * tifm_alloc_adapter ( unsigned int , s#device * ) 
tifm_add_adapter int tifm_add_adapter ( s#tifm_adapter * ) 
tifm_remove_adapter void tifm_remove_adapter ( s#tifm_adapter * ) 
tifm_free_adapter void tifm_free_adapter ( s#tifm_adapter * ) 
tifm_free_device void tifm_free_device ( s#device * ) 
tifm_alloc_device s#tifm_dev * tifm_alloc_device ( s#tifm_adapter * , unsigned int , unsigned char ) 
tifm_eject void tifm_eject ( s#tifm_dev * ) 
tifm_has_ms_pif int tifm_has_ms_pif ( s#tifm_dev * ) 
tifm_map_sg int tifm_map_sg ( s#tifm_dev * , s#scatterlist * , int , int ) 
tifm_unmap_sg void tifm_unmap_sg ( s#tifm_dev * , s#scatterlist * , int , int ) 
tifm_queue_work void tifm_queue_work ( s#work_struct * ) 
s#tifm_device_id struct tifm_device_id { unsigned char type ; } 
s#tifm_driver struct tifm_driver { s#tifm_device_id * id_table ; int ( * probe ) ( s#tifm_dev * ) ; void ( * remove ) ( s#tifm_dev * ) ; int ( * suspend ) ( s#tifm_dev * , t#pm_message_t ) ; int ( * resume ) ( s#tifm_dev * ) ; s#device_driver driver ; } 
tifm_register_driver int tifm_register_driver ( s#tifm_driver * ) 
tifm_unregister_driver void tifm_unregister_driver ( s#tifm_driver * ) 

/* drivers/mmc/card/queue.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#mmc_data struct mmc_data { unsigned int timeout_ns ; unsigned int timeout_clks ; unsigned int blksz ; unsigned int blocks ; unsigned int error ; unsigned int flags ; unsigned int bytes_xfered ; s#mmc_command * stop ; s#mmc_request * mrq ; unsigned int sg_len ; s#scatterlist * sg ; } 
s#mmc_command struct mmc_command { t#u32 opcode ; t#u32 arg ; t#u32 resp [ 4 ] ; unsigned int flags ; unsigned int retries ; unsigned int error ; s#mmc_data * data ; s#mmc_request * mrq ; } 
s#mmc_request struct mmc_request { s#mmc_command * cmd ; s#mmc_data * data ; s#mmc_command * stop ; void * done_data ; void ( * done ) ( s#mmc_request * ) ; } 
s#mmc_ios struct mmc_ios { unsigned int clock ; unsigned short vdd ; unsigned char bus_mode ; unsigned char chip_select ; unsigned char power_mode ; unsigned char bus_width ; unsigned char timing ; } 
s#mmc_host_ops struct mmc_host_ops { int ( * enable ) ( s#mmc_host * ) ; int ( * disable ) ( s#mmc_host * , int ) ; void ( * request ) ( s#mmc_host * , s#mmc_request * ) ; void ( * set_ios ) ( s#mmc_host * , s#mmc_ios * ) ; int ( * get_ro ) ( s#mmc_host * ) ; int ( * get_cd ) ( s#mmc_host * ) ; void ( * enable_sdio_irq ) ( s#mmc_host * , int ) ; } 
s##mmc_bus_ops
s#mmc_host struct mmc_host { s#device * parent ; s#device class_dev ; int index ; const s#mmc_host_ops * ops ; unsigned int f_min ; unsigned int f_max ; t#u32 ocr_avail ; unsigned long caps ; unsigned int max_seg_size ; unsigned short max_hw_segs ; unsigned short max_phys_segs ; unsigned short unused ; unsigned int max_req_size ; unsigned int max_blk_size ; unsigned int max_blk_count ; t#spinlock_t lock ; s#mmc_ios ios ; t#u32 ocr ; unsigned int use_spi_crc : 1 ; unsigned int claimed : 1 ; unsigned int bus_dead : 1 ; int enabled ; int nesting_cnt ; int en_dis_recurs ; unsigned int disable_delay ; s#delayed_work disable ; s#mmc_card * card ; t#wait_queue_head_t wq ; s#task_struct * claimer ; int claim_cnt ; s#delayed_work detect ; const s#mmc_bus_ops * bus_ops ; unsigned int bus_refs ; unsigned int sdio_irqs ; s#task_struct * sdio_irq_thread ; t#atomic_t sdio_irq_thread_abort ; s#led_trigger * led ; s#dentry * debugfs_root ; unsigned long private [ 0 ] __attribute__ ( ( __aligned__ ( ( 1 << ( 7 ) ) ) ) ) ; } 
s#mmc_cid struct mmc_cid { unsigned int manfid ; char prod_name [ 8 ] ; unsigned int serial ; unsigned short oemid ; unsigned short year ; unsigned char hwrev ; unsigned char fwrev ; unsigned char month ; } 
s#mmc_csd struct mmc_csd { unsigned char mmca_vsn ; unsigned short cmdclass ; unsigned short tacc_clks ; unsigned int tacc_ns ; unsigned int r2w_factor ; unsigned int max_dtr ; unsigned int read_blkbits ; unsigned int write_blkbits ; unsigned int capacity ; unsigned int read_partial : 1 , read_misalign : 1 , write_partial : 1 , write_misalign : 1 ; } 
s#mmc_ext_csd struct mmc_ext_csd { t#u8 rev ; unsigned int sa_timeout ; unsigned int hs_max_dtr ; unsigned int sectors ; } 
s#sd_scr struct sd_scr { unsigned char sda_vsn ; unsigned char bus_widths ; } 
s#sd_switch_caps struct sd_switch_caps { unsigned int hs_max_dtr ; } 
s#sdio_cccr struct sdio_cccr { unsigned int sdio_vsn ; unsigned int sd_vsn ; unsigned int multi_block : 1 , low_speed : 1 , wide_bus : 1 , high_power : 1 , high_speed : 1 , disable_cd : 1 ; } 
s#sdio_cis struct sdio_cis { unsigned short vendor ; unsigned short device ; unsigned short blksize ; unsigned int max_dtr ; } 
s##sdio_func
s##sdio_func_tuple
s#mmc_card struct mmc_card { s#mmc_host * host ; s#device dev ; unsigned int rca ; unsigned int type ; unsigned int state ; unsigned int quirks ; t#u32 raw_cid [ 4 ] ; t#u32 raw_csd [ 4 ] ; t#u32 raw_scr [ 2 ] ; s#mmc_cid cid ; s#mmc_csd csd ; s#mmc_ext_csd ext_csd ; s#sd_scr scr ; s#sd_switch_caps sw_caps ; unsigned int sdio_funcs ; s#sdio_cccr cccr ; s#sdio_cis cis ; s#sdio_func * sdio_func [ 7 ] ; unsigned num_info ; const char * * info ; s#sdio_func_tuple * tuples ; s#dentry * debugfs_root ; } 
s#mmc_queue struct mmc_queue { s#mmc_card * card ; s#task_struct * thread ; s#semaphore thread_sem ; unsigned int flags ; s#request * req ; int ( * issue_fn ) ( s#mmc_queue * , s#request * ) ; void * data ; s#request_queue * queue ; s#scatterlist * sg ; char * bounce_buf ; s#scatterlist * bounce_sg ; unsigned int bounce_sg_len ; } 
mmc_cleanup_queue extern void mmc_cleanup_queue ( s#mmc_queue * ) 

/* drivers/mmc/core/bus.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##bus_type_private
s##driver_private
s##scatterlist
s#mmc_bus_ops struct mmc_bus_ops { int ( * awake ) ( s#mmc_host * ) ; int ( * sleep ) ( s#mmc_host * ) ; void ( * remove ) ( s#mmc_host * ) ; void ( * detect ) ( s#mmc_host * ) ; int ( * suspend ) ( s#mmc_host * ) ; int ( * resume ) ( s#mmc_host * ) ; void ( * power_save ) ( s#mmc_host * ) ; void ( * power_restore ) ( s#mmc_host * ) ; } 
s##dentry
s##sdio_func
s##sdio_func_tuple
s#mmc_driver struct mmc_driver { s#device_driver drv ; int ( * probe ) ( s#mmc_card * ) ; void ( * remove ) ( s#mmc_card * ) ; int ( * suspend ) ( s#mmc_card * , t#pm_message_t ) ; int ( * resume ) ( s#mmc_card * ) ; } 
mmc_register_driver extern int mmc_register_driver ( s#mmc_driver * ) 
mmc_unregister_driver extern void mmc_unregister_driver ( s#mmc_driver * ) 

/* drivers/mmc/core/core.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##sdio_func
s##sdio_func_tuple
mmc_request_done extern void mmc_request_done ( s#mmc_host * , s#mmc_request * ) 
mmc_wait_for_req extern void mmc_wait_for_req ( s#mmc_host * , s#mmc_request * ) 
mmc_wait_for_cmd extern int mmc_wait_for_cmd ( s#mmc_host * , s#mmc_command * , int ) 
mmc_set_data_timeout extern void mmc_set_data_timeout ( s#mmc_data * , const s#mmc_card * ) 
mmc_align_data_size extern unsigned int mmc_align_data_size ( s#mmc_card * , unsigned int ) 
mmc_host_enable int mmc_host_enable ( s#mmc_host * ) 
mmc_host_disable int mmc_host_disable ( s#mmc_host * ) 
__mmc_claim_host extern int __mmc_claim_host ( s#mmc_host * , t#atomic_t * ) 
mmc_try_claim_host extern int mmc_try_claim_host ( s#mmc_host * ) 
mmc_host_lazy_disable int mmc_host_lazy_disable ( s#mmc_host * ) 
mmc_release_host extern void mmc_release_host ( s#mmc_host * ) 
mmc_vddrange_to_ocrmask extern t#u32 mmc_vddrange_to_ocrmask ( int , int ) 
s##regulator
mmc_regulator_get_ocrmask int mmc_regulator_get_ocrmask ( s#regulator * ) 
mmc_regulator_set_ocr int mmc_regulator_set_ocr ( s#regulator * , unsigned short ) 
mmc_detect_change extern void mmc_detect_change ( s#mmc_host * , unsigned long ) 
mmc_power_save_host extern void mmc_power_save_host ( s#mmc_host * ) 
mmc_power_restore_host extern void mmc_power_restore_host ( s#mmc_host * ) 
mmc_card_awake int mmc_card_awake ( s#mmc_host * ) 
mmc_card_sleep int mmc_card_sleep ( s#mmc_host * ) 
mmc_card_can_sleep int mmc_card_can_sleep ( s#mmc_host * ) 
mmc_suspend_host extern int mmc_suspend_host ( s#mmc_host * , t#pm_message_t ) 
mmc_resume_host extern int mmc_resume_host ( s#mmc_host * ) 

/* drivers/mmc/core/host.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##scatterlist
s##mmc_card
mmc_alloc_host extern s#mmc_host * mmc_alloc_host ( int , s#device * ) 
mmc_add_host extern int mmc_add_host ( s#mmc_host * ) 
mmc_remove_host extern void mmc_remove_host ( s#mmc_host * ) 
mmc_free_host extern void mmc_free_host ( s#mmc_host * ) 

/* drivers/mmc/core/sd_ops.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##sdio_func
s##sdio_func_tuple
s##dentry
mmc_wait_for_app_cmd extern int mmc_wait_for_app_cmd ( s#mmc_host * , s#mmc_card * , s#mmc_command * , int ) 

/* drivers/mmc/core/sdio_bus.o */
s#sdio_device_id struct sdio_device_id { t#__u8 class ; t#__u16 vendor ; t#__u16 device ; t#kernel_ulong_t driver_data __attribute__ ( ( aligned ( sizeof ( kernel_ulong_t ) ) ) ) ; } 
s##mmc_host
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#sdio_func_tuple struct sdio_func_tuple { s#sdio_func_tuple * next ; unsigned char code ; unsigned char size ; unsigned char data [ 0 ] ; } 
s##dentry
t#sdio_irq_handler_t typedef void ( sdio_irq_handler_t ) ( s#sdio_func * ) 
s#sdio_func struct sdio_func { s#mmc_card * card ; s#device dev ; t#sdio_irq_handler_t * irq_handler ; unsigned int num ; unsigned char class ; unsigned short vendor ; unsigned short device ; unsigned max_blksize ; unsigned cur_blksize ; unsigned enable_timeout ; unsigned int state ; t#u8 tmpbuf [ 4 ] ; unsigned num_info ; const char * * info ; s#sdio_func_tuple * tuples ; } 
s#sdio_driver struct sdio_driver { char * name ; const s#sdio_device_id * id_table ; int ( * probe ) ( s#sdio_func * , const s#sdio_device_id * ) ; void ( * remove ) ( s#sdio_func * ) ; s#device_driver drv ; } 
sdio_register_driver extern int sdio_register_driver ( s#sdio_driver * ) 
sdio_unregister_driver extern void sdio_unregister_driver ( s#sdio_driver * ) 

/* drivers/mmc/core/sdio_io.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##scatterlist
s##mmc_bus_ops
s##dentry
sdio_claim_host extern void sdio_claim_host ( s#sdio_func * ) 
sdio_release_host extern void sdio_release_host ( s#sdio_func * ) 
sdio_enable_func extern int sdio_enable_func ( s#sdio_func * ) 
sdio_disable_func extern int sdio_disable_func ( s#sdio_func * ) 
sdio_set_block_size extern int sdio_set_block_size ( s#sdio_func * , unsigned ) 
sdio_align_size extern unsigned int sdio_align_size ( s#sdio_func * , unsigned int ) 
sdio_readb extern t#u8 sdio_readb ( s#sdio_func * , unsigned int , int * ) 
sdio_writeb extern void sdio_writeb ( s#sdio_func * , t#u8 , unsigned int , int * ) 
sdio_memcpy_fromio extern int sdio_memcpy_fromio ( s#sdio_func * , void * , unsigned int , int ) 
sdio_memcpy_toio extern int sdio_memcpy_toio ( s#sdio_func * , unsigned int , void * , int ) 
sdio_readsb extern int sdio_readsb ( s#sdio_func * , void * , unsigned int , int ) 
sdio_writesb extern int sdio_writesb ( s#sdio_func * , unsigned int , void * , int ) 
sdio_readw extern t#u16 sdio_readw ( s#sdio_func * , unsigned int , int * ) 
sdio_writew extern void sdio_writew ( s#sdio_func * , t#u16 , unsigned int , int * ) 
sdio_readl extern t#u32 sdio_readl ( s#sdio_func * , unsigned int , int * ) 
sdio_writel extern void sdio_writel ( s#sdio_func * , t#u32 , unsigned int , int * ) 
sdio_f0_readb extern unsigned char sdio_f0_readb ( s#sdio_func * , unsigned int , int * ) 
sdio_f0_writeb extern void sdio_f0_writeb ( s#sdio_func * , unsigned char , unsigned int , int * ) 

/* drivers/mmc/core/sdio_irq.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##scatterlist
s##mmc_bus_ops
s##dentry
sdio_claim_irq extern int sdio_claim_irq ( s#sdio_func * , t#sdio_irq_handler_t * ) 
sdio_release_irq extern int sdio_release_irq ( s#sdio_func * ) 

/* drivers/mmc/host/sdhci.o */
s#sdhci_ops struct sdhci_ops { void ( * set_clock ) ( s#sdhci_host * , unsigned int ) ; int ( * enable_dma ) ( s#sdhci_host * ) ; unsigned int ( * get_max_clock ) ( s#sdhci_host * ) ; unsigned int ( * get_min_clock ) ( s#sdhci_host * ) ; unsigned int ( * get_timeout_clock ) ( s#sdhci_host * ) ; } 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##mmc_card
s##mmc_bus_ops
s#sdhci_host struct sdhci_host { const char * hw_name ; unsigned int quirks ; int irq ; void * ioaddr ; const s#sdhci_ops * ops ; s#mmc_host * mmc ; t#u64 dma_mask ; s#led_classdev led ; char led_name [ 32 ] ; t#spinlock_t lock ; int flags ; unsigned int version ; unsigned int max_clk ; unsigned int timeout_clk ; unsigned int clock ; t#u8 pwr ; s#mmc_request * mrq ; s#mmc_command * cmd ; s#mmc_data * data ; unsigned int data_early : 1 ; s#sg_mapping_iter sg_miter ; unsigned int blocks ; int sg_count ; t#u8 * adma_desc ; t#u8 * align_buffer ; t#dma_addr_t adma_addr ; t#dma_addr_t align_addr ; s#tasklet_struct card_tasklet ; s#tasklet_struct finish_tasklet ; s#timer_list timer ; unsigned long private [ 0 ] __attribute__ ( ( __aligned__ ( ( 1 << ( 7 ) ) ) ) ) ; } 
sdhci_suspend_host extern int sdhci_suspend_host ( s#sdhci_host * , t#pm_message_t ) 
sdhci_resume_host extern int sdhci_resume_host ( s#sdhci_host * ) 
sdhci_alloc_host extern s#sdhci_host * sdhci_alloc_host ( s#device * , t#size_t ) 
sdhci_add_host extern int sdhci_add_host ( s#sdhci_host * ) 
sdhci_remove_host extern void sdhci_remove_host ( s#sdhci_host * , int ) 
sdhci_free_host extern void sdhci_free_host ( s#sdhci_host * ) 

/* drivers/mtd/chips/cfi_cmdset_0001.o */
s#nand_oobfree struct nand_oobfree { t#__u32 offset ; t#__u32 length ; } 
s#nand_ecclayout struct nand_ecclayout { t#__u32 eccbytes ; t#__u32 eccpos [ 64 ] ; t#__u32 oobavail ; s#nand_oobfree oobfree [ 8 ] ; } 
s#mtd_erase_region_info struct mtd_erase_region_info { t#uint64_t offset ; t#uint32_t erasesize ; t#uint32_t numblocks ; unsigned long * lockmap ; } 
s#erase_info struct erase_info { s#mtd_info * mtd ; t#uint64_t addr ; t#uint64_t len ; t#uint64_t fail_addr ; t#u_long time ; t#u_long retries ; unsigned dev ; unsigned cell ; void ( * callback ) ( s#erase_info * ) ; t#u_long priv ; t#u_char state ; s#erase_info * next ; } 
s##backing_dev_info
t#mtd_oob_mode_t typedef enum { MTD_OOB_PLACE , MTD_OOB_AUTO , MTD_OOB_RAW , } mtd_oob_mode_t 
s#mtd_oob_ops struct mtd_oob_ops { t#mtd_oob_mode_t mode ; t#size_t len ; t#size_t retlen ; t#size_t ooblen ; t#size_t oobretlen ; t#uint32_t ooboffs ; t#uint8_t * datbuf ; t#uint8_t * oobbuf ; } 
s#otp_info struct otp_info { t#__u32 start ; t#__u32 length ; t#__u32 locked ; } 
s#kvec struct kvec { void * iov_base ; t#size_t iov_len ; } 
s#mtd_ecc_stats struct mtd_ecc_stats { t#__u32 corrected ; t#__u32 failed ; t#__u32 badblocks ; t#__u32 bbtblocks ; } 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#mtd_info struct mtd_info { t#u_char type ; t#uint32_t flags ; t#uint64_t size ; t#uint32_t erasesize ; t#uint32_t writesize ; t#uint32_t oobsize ; t#uint32_t oobavail ; unsigned int erasesize_shift ; unsigned int writesize_shift ; unsigned int erasesize_mask ; unsigned int writesize_mask ; const char * name ; int index ; s#nand_ecclayout * ecclayout ; int numeraseregions ; s#mtd_erase_region_info * eraseregions ; int ( * erase ) ( s#mtd_info * , s#erase_info * ) ; int ( * point ) ( s#mtd_info * , t#loff_t , t#size_t , t#size_t * , void * * , t#resource_size_t * ) ; void ( * unpoint ) ( s#mtd_info * , t#loff_t , t#size_t ) ; unsigned long ( * get_unmapped_area ) ( s#mtd_info * , unsigned long , unsigned long , unsigned long ) ; s#backing_dev_info * backing_dev_info ; int ( * read ) ( s#mtd_info * , t#loff_t , t#size_t , t#size_t * , t#u_char * ) ; int ( * write ) ( s#mtd_info * , t#loff_t , t#size_t , t#size_t * , const t#u_char * ) ; int ( * panic_write ) ( s#mtd_info * , t#loff_t , t#size_t , t#size_t * , const t#u_char * ) ; int ( * read_oob ) ( s#mtd_info * , t#loff_t , s#mtd_oob_ops * ) ; int ( * write_oob ) ( s#mtd_info * , t#loff_t , s#mtd_oob_ops * ) ; int ( * get_fact_prot_info ) ( s#mtd_info * , s#otp_info * , t#size_t ) ; int ( * read_fact_prot_reg ) ( s#mtd_info * , t#loff_t , t#size_t , t#size_t * , t#u_char * ) ; int ( * get_user_prot_info ) ( s#mtd_info * , s#otp_info * , t#size_t ) ; int ( * read_user_prot_reg ) ( s#mtd_info * , t#loff_t , t#size_t , t#size_t * , t#u_char * ) ; int ( * write_user_prot_reg ) ( s#mtd_info * , t#loff_t , t#size_t , t#size_t * , t#u_char * ) ; int ( * lock_user_prot_reg ) ( s#mtd_info * , t#loff_t , t#size_t ) ; int ( * writev ) ( s#mtd_info * , const s#kvec * , unsigned long , t#loff_t , t#size_t * ) ; void ( * sync ) ( s#mtd_info * ) ; int ( * lock ) ( s#mtd_info * , t#loff_t , t#uint64_t ) ; int ( * unlock ) ( s#mtd_info * , t#loff_t , t#uint64_t ) ; int ( * suspend ) ( s#mtd_info * ) ; void ( * resume ) ( s#mtd_info * ) ; int ( * block_isbad ) ( s#mtd_info * , t#loff_t ) ; int ( * block_markbad ) ( s#mtd_info * , t#loff_t ) ; s#notifier_block reboot_notifier ; s#mtd_ecc_stats ecc_stats ; int subpage_sft ; void * priv ; s#module * owner ; s#device dev ; int usecount ; int ( * get_device ) ( s#mtd_info * ) ; void ( * put_device ) ( s#mtd_info * ) ; } 
t#map_word typedef union { unsigned long x [ ( ( ( 32 * 8 ) + 64 - 1 ) / 64 ) ] ; } map_word 
s#mtd_chip_driver struct mtd_chip_driver { s#mtd_info * ( * probe ) ( s#map_info * ) ; void ( * destroy ) ( s#mtd_info * ) ; s#module * module ; char * name ; s#list_head list ; } 
s#map_info struct map_info { const char * name ; unsigned long size ; t#resource_size_t phys ; void * virt ; void * cached ; int bankwidth ; t#map_word ( * read ) ( s#map_info * , unsigned long ) ; void ( * copy_from ) ( s#map_info * , void * , unsigned long , t#ssize_t ) ; void ( * write ) ( s#map_info * , const t#map_word , unsigned long ) ; void ( * copy_to ) ( s#map_info * , unsigned long , const void * , t#ssize_t ) ; void ( * inval_cache ) ( s#map_info * , unsigned long , t#ssize_t ) ; void ( * set_vpp ) ( s#map_info * , int ) ; unsigned long pfow_base ; unsigned long map_priv_1 ; unsigned long map_priv_2 ; void * fldrv_priv ; s#mtd_chip_driver * fldrv ; } 
cfi_cmdset_0001 s#mtd_info * cfi_cmdset_0001 ( s#map_info * , int ) 
cfi_cmdset_0003 s#mtd_info * cfi_cmdset_0003 ( s#map_info * , int ) 
cfi_cmdset_0200 s#mtd_info * cfi_cmdset_0200 ( s#map_info * , int ) 

/* drivers/mtd/chips/cfi_cmdset_0002.o */
s##backing_dev_info
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
cfi_cmdset_0002 s#mtd_info * cfi_cmdset_0002 ( s#map_info * , int ) 

/* drivers/mtd/chips/cfi_cmdset_0020.o */
s##backing_dev_info
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
cfi_cmdset_0020 s#mtd_info * cfi_cmdset_0020 ( s#map_info * , int ) 

/* drivers/mtd/chips/cfi_util.o */
s##backing_dev_info
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#cfi_ident struct cfi_ident { t#uint8_t qry [ 3 ] ; t#uint16_t P_ID ; t#uint16_t P_ADR ; t#uint16_t A_ID ; t#uint16_t A_ADR ; t#uint8_t VccMin ; t#uint8_t VccMax ; t#uint8_t VppMin ; t#uint8_t VppMax ; t#uint8_t WordWriteTimeoutTyp ; t#uint8_t BufWriteTimeoutTyp ; t#uint8_t BlockEraseTimeoutTyp ; t#uint8_t ChipEraseTimeoutTyp ; t#uint8_t WordWriteTimeoutMax ; t#uint8_t BufWriteTimeoutMax ; t#uint8_t BlockEraseTimeoutMax ; t#uint8_t ChipEraseTimeoutMax ; t#uint8_t DevSize ; t#uint16_t InterfaceDesc ; t#uint16_t MaxBufWriteSize ; t#uint8_t NumEraseRegions ; t#uint32_t EraseRegionInfo [ 0 ] ; } 
t#flstate_t typedef enum { FL_READY , FL_STATUS , FL_CFI_QUERY , FL_JEDEC_QUERY , FL_ERASING , FL_ERASE_SUSPENDING , FL_ERASE_SUSPENDED , FL_WRITING , FL_WRITING_TO_BUFFER , FL_OTP_WRITE , FL_WRITE_SUSPENDING , FL_WRITE_SUSPENDED , FL_PM_SUSPENDED , FL_SYNCING , FL_UNLOADING , FL_LOCKING , FL_UNLOCKING , FL_POINT , FL_XIP_WHILE_ERASING , FL_XIP_WHILE_WRITING , FL_SHUTDOWN , FL_UNKNOWN } flstate_t 
s#flchip struct flchip { unsigned long start ; int ref_point_counter ; t#flstate_t state ; t#flstate_t oldstate ; unsigned int write_suspended : 1 ; unsigned int erase_suspended : 1 ; unsigned long in_progress_block_addr ; t#spinlock_t * mutex ; t#spinlock_t _spinlock ; t#wait_queue_head_t wq ; int word_write_time ; int buffer_write_time ; int erase_time ; int word_write_time_max ; int buffer_write_time_max ; int erase_time_max ; void * priv ; } 
s#cfi_private struct cfi_private { t#uint16_t cmdset ; void * cmdset_priv ; int interleave ; int device_type ; int cfi_mode ; int addr_unlock1 ; int addr_unlock2 ; s#mtd_info * ( * cmdset_setup ) ( s#map_info * ) ; s#cfi_ident * cfiq ; int mfr , id ; int numchips ; unsigned long chipshift ; const char * im_name ; s#flchip chips [ 0 ] ; } 
cfi_qry_present int cfi_qry_present ( s#map_info * , t#__u32 , s#cfi_private * ) 
cfi_qry_mode_on int cfi_qry_mode_on ( t#uint32_t , s#map_info * , s#cfi_private * ) 
cfi_qry_mode_off void cfi_qry_mode_off ( t#uint32_t , s#map_info * , s#cfi_private * ) 
s#cfi_extquery struct cfi_extquery { t#uint8_t pri [ 3 ] ; t#uint8_t MajorVersion ; t#uint8_t MinorVersion ; } 
cfi_read_pri s#cfi_extquery * cfi_read_pri ( s#map_info * , t#uint16_t , t#uint16_t , const char * ) 
s#cfi_fixup struct cfi_fixup { t#uint16_t mfr ; t#uint16_t id ; void ( * fixup ) ( s#mtd_info * , void * ) ; void * param ; } 
cfi_fixup void cfi_fixup ( s#mtd_info * , s#cfi_fixup * ) 
t#varsize_frob_t typedef int ( * varsize_frob_t ) ( s#map_info * , s#flchip * , unsigned long , int , void * ) 
cfi_varsize_frob int cfi_varsize_frob ( s#mtd_info * , t#varsize_frob_t , t#loff_t , t#size_t , void * ) 

/* drivers/mtd/chips/chipreg.o */
s##backing_dev_info
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
register_mtd_chip_driver void register_mtd_chip_driver ( s#mtd_chip_driver * ) 
unregister_mtd_chip_driver void unregister_mtd_chip_driver ( s#mtd_chip_driver * ) 
do_map_probe s#mtd_info * do_map_probe ( const char * , s#map_info * ) 
map_destroy void map_destroy ( s#mtd_info * ) 

/* drivers/mtd/chips/gen_probe.o */
s##backing_dev_info
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#chip_probe struct chip_probe { char * name ; int ( * probe_chip ) ( s#map_info * , t#__u32 , unsigned long * , s#cfi_private * ) ; } 
mtd_do_chip_probe s#mtd_info * mtd_do_chip_probe ( s#map_info * , s#chip_probe * ) 

/* drivers/mtd/devices/doc2000.o */
s##backing_dev_info
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
DoC2k_init void DoC2k_init ( s#mtd_info * ) 

/* drivers/mtd/devices/doc2001.o */
s##backing_dev_info
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
DoCMil_init void DoCMil_init ( s#mtd_info * ) 

/* drivers/mtd/devices/doc2001plus.o */
s##backing_dev_info
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
DoCMilPlus_init void DoCMilPlus_init ( s#mtd_info * ) 

/* drivers/mtd/devices/docecc.o */
doc_decode_ecc int doc_decode_ecc ( unsigned char [ 512 ] , unsigned char [ 6 ] ) 

/* drivers/mtd/lpddr/lpddr_cmds.o */
s##backing_dev_info
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
lpddr_cmdset s#mtd_info * lpddr_cmdset ( s#map_info * ) 

/* drivers/mtd/maps/map_funcs.o */
s##mtd_info
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
simple_map_init extern void simple_map_init ( s#map_info * ) 

/* drivers/mtd/mtd_blkdevs.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s#mtd_blktrans_dev struct mtd_blktrans_dev { s#mtd_blktrans_ops * tr ; s#list_head list ; s#mtd_info * mtd ; s#mutex lock ; int devnum ; unsigned long size ; int readonly ; void * blkcore_priv ; } 
s#mtd_blkcore_priv struct mtd_blkcore_priv { s#task_struct * thread ; s#request_queue * rq ; t#spinlock_t queue_lock ; } 
s#mtd_blktrans_ops struct mtd_blktrans_ops { char * name ; int major ; int part_bits ; int blksize ; int blkshift ; int ( * readsect ) ( s#mtd_blktrans_dev * , unsigned long , char * ) ; int ( * writesect ) ( s#mtd_blktrans_dev * , unsigned long , char * ) ; int ( * discard ) ( s#mtd_blktrans_dev * , unsigned long , unsigned ) ; int ( * getgeo ) ( s#mtd_blktrans_dev * , s#hd_geometry * ) ; int ( * flush ) ( s#mtd_blktrans_dev * ) ; int ( * open ) ( s#mtd_blktrans_dev * ) ; int ( * release ) ( s#mtd_blktrans_dev * ) ; void ( * add_mtd ) ( s#mtd_blktrans_ops * , s#mtd_info * ) ; void ( * remove_dev ) ( s#mtd_blktrans_dev * ) ; s#list_head devs ; s#list_head list ; s#module * owner ; s#mtd_blkcore_priv * blkcore_priv ; } 
register_mtd_blktrans extern int register_mtd_blktrans ( s#mtd_blktrans_ops * ) 
deregister_mtd_blktrans extern int deregister_mtd_blktrans ( s#mtd_blktrans_ops * ) 
add_mtd_blktrans_dev extern int add_mtd_blktrans_dev ( s#mtd_blktrans_dev * ) 
del_mtd_blktrans_dev extern int del_mtd_blktrans_dev ( s#mtd_blktrans_dev * ) 

/* drivers/mtd/mtdconcat.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##array_cache
s##kmem_list3
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
mtd_concat_create s#mtd_info * mtd_concat_create ( s#mtd_info * [ ] , int , const char * ) 
mtd_concat_destroy void mtd_concat_destroy ( s#mtd_info * ) 

/* drivers/mtd/mtdcore.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
mtd_table_mutex extern s#mutex mtd_table_mutex 
mtd_table extern s#mtd_info * mtd_table [ 32 ] 
add_mtd_device extern int add_mtd_device ( s#mtd_info * ) 
del_mtd_device extern int del_mtd_device ( s#mtd_info * ) 
get_mtd_device extern s#mtd_info * get_mtd_device ( s#mtd_info * , int ) 
get_mtd_device_nm extern s#mtd_info * get_mtd_device_nm ( const char * ) 
put_mtd_device extern void put_mtd_device ( s#mtd_info * ) 
s#mtd_notifier struct mtd_notifier { void ( * add ) ( s#mtd_info * ) ; void ( * remove ) ( s#mtd_info * ) ; s#list_head list ; } 
register_mtd_user extern void register_mtd_user ( s#mtd_notifier * ) 
unregister_mtd_user extern int unregister_mtd_user ( s#mtd_notifier * ) 
default_mtd_writev int default_mtd_writev ( s#mtd_info * , const s#kvec * , unsigned long , t#loff_t , t#size_t * ) 

/* drivers/mtd/mtdpart.o */
s##backing_dev_info
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
mtd_erase_callback void mtd_erase_callback ( s#erase_info * ) 
del_mtd_partitions int del_mtd_partitions ( s#mtd_info * ) 
s#mtd_partition struct mtd_partition { char * name ; t#uint64_t size ; t#uint64_t offset ; t#uint32_t mask_flags ; s#nand_ecclayout * ecclayout ; } 
add_mtd_partitions int add_mtd_partitions ( s#mtd_info * , const s#mtd_partition * , int ) 
s#mtd_part_parser struct mtd_part_parser { s#list_head list ; s#module * owner ; const char * name ; int ( * parse_fn ) ( s#mtd_info * , s#mtd_partition * * , unsigned long ) ; } 
register_mtd_parser extern int register_mtd_parser ( s#mtd_part_parser * ) 
deregister_mtd_parser extern int deregister_mtd_parser ( s#mtd_part_parser * ) 
parse_mtd_partitions extern int parse_mtd_partitions ( s#mtd_info * , const char * * , s#mtd_partition * * , unsigned long ) 

/* drivers/mtd/mtdsuper.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##kiocb
s##poll_table_struct
s##vm_area_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##page
s##pipe_inode_info
s##cred
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##cdev
s##posix_acl
s##mnt_namespace
get_sb_mtd extern int get_sb_mtd ( s#file_system_type * , int , const char * , void * , int ( * ) ( s#super_block * , void * , int ) , s#vfsmount * ) 
kill_mtd_super extern void kill_mtd_super ( s#super_block * ) 

/* drivers/mtd/nand/nand_base.o */
s##backing_dev_info
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
nand_wait_ready extern void nand_wait_ready ( s#mtd_info * ) 
nand_scan extern int nand_scan ( s#mtd_info * , int ) 
nand_scan_ident extern int nand_scan_ident ( s#mtd_info * , int ) 
nand_scan_tail extern int nand_scan_tail ( s#mtd_info * ) 
nand_release extern void nand_release ( s#mtd_info * ) 

/* drivers/mtd/nand/nand_bbt.o */
s##backing_dev_info
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#nand_bbt_descr struct nand_bbt_descr { int options ; int pages [ 8 ] ; int offs ; int veroffs ; t#uint8_t version [ 8 ] ; int len ; int maxblocks ; int reserved_block_code ; t#uint8_t * pattern ; } 
nand_scan_bbt extern int nand_scan_bbt ( s#mtd_info * , s#nand_bbt_descr * ) 
nand_default_bbt extern int nand_default_bbt ( s#mtd_info * ) 

/* drivers/mtd/nand/nand_ecc.o */
s##backing_dev_info
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
nand_calculate_ecc int nand_calculate_ecc ( s#mtd_info * , const t#u_char * , t#u_char * ) 
__nand_correct_data int __nand_correct_data ( t#u_char * , t#u_char * , t#u_char * , unsigned int ) 
nand_correct_data int nand_correct_data ( s#mtd_info * , t#u_char * , t#u_char * , t#u_char * ) 

/* drivers/mtd/nand/nand_ids.o */
s#nand_manufacturers struct nand_manufacturers { int id ; char * name ; } 
nand_manuf_ids extern s#nand_manufacturers nand_manuf_ids [ ] 
s#nand_flash_dev struct nand_flash_dev { char * name ; int id ; unsigned long pagesize ; unsigned long chipsize ; unsigned long erasesize ; unsigned long options ; } 
nand_flash_ids extern s#nand_flash_dev nand_flash_ids [ ] 

/* drivers/mtd/onenand/onenand_base.o */
s#onenand_bufferram struct onenand_bufferram { int blockpage ; } 
s##backing_dev_info
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
t#onenand_state_t typedef enum { FL_READY , FL_READING , FL_WRITING , FL_ERASING , FL_SYNCING , FL_LOCKING , FL_RESETING , FL_OTPING , FL_PM_SUSPENDED , } onenand_state_t 
s#onenand_chip struct onenand_chip { void * base ; unsigned dies ; unsigned boundary [ 2 ] ; t#loff_t diesize [ 2 ] ; unsigned int chipsize ; unsigned int device_id ; unsigned int version_id ; unsigned int technology ; unsigned int density_mask ; unsigned int options ; unsigned int erase_shift ; unsigned int page_shift ; unsigned int page_mask ; unsigned int writesize ; unsigned int bufferram_index ; s#onenand_bufferram bufferram [ 2 ] ; int ( * command ) ( s#mtd_info * , int , t#loff_t , t#size_t ) ; int ( * wait ) ( s#mtd_info * , int ) ; int ( * bbt_wait ) ( s#mtd_info * , int ) ; void ( * unlock_all ) ( s#mtd_info * ) ; int ( * read_bufferram ) ( s#mtd_info * , int , unsigned char * , int , t#size_t ) ; int ( * write_bufferram ) ( s#mtd_info * , int , const unsigned char * , int , t#size_t ) ; unsigned short ( * read_word ) ( void * ) ; void ( * write_word ) ( unsigned short , void * ) ; void ( * mmcontrol ) ( s#mtd_info * , int ) ; int ( * block_markbad ) ( s#mtd_info * , t#loff_t ) ; int ( * scan_bbt ) ( s#mtd_info * ) ; s#completion complete ; int irq ; t#spinlock_t chip_lock ; t#wait_queue_head_t wq ; t#onenand_state_t state ; unsigned char * page_buf ; unsigned char * oob_buf ; int subpagesize ; s#nand_ecclayout * ecclayout ; void * bbm ; void * priv ; } 
onenand_addr t#loff_t onenand_addr ( s#onenand_chip * , int ) 
flexonenand_region int flexonenand_region ( s#mtd_info * , t#loff_t ) 
onenand_scan extern int onenand_scan ( s#mtd_info * , int ) 
onenand_release extern void onenand_release ( s#mtd_info * ) 

/* drivers/mtd/onenand/onenand_bbt.o */
s##backing_dev_info
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
onenand_scan_bbt extern int onenand_scan_bbt ( s#mtd_info * , s#nand_bbt_descr * ) 
onenand_default_bbt extern int onenand_default_bbt ( s#mtd_info * ) 

/* drivers/mtd/ubi/kapi.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s#ubi_volume struct ubi_volume { s#device dev ; s#cdev cdev ; s#ubi_device * ubi ; int vol_id ; int ref_count ; int readers ; int writers ; int exclusive ; int reserved_pebs ; int vol_type ; int usable_leb_size ; int used_ebs ; int last_eb_bytes ; long long used_bytes ; int alignment ; int data_pad ; int name_len ; char name [ 127 + 1 ] ; int upd_ebs ; int ch_lnum ; int ch_dtype ; long long upd_bytes ; long long upd_received ; void * upd_buf ; int * eba_tbl ; unsigned int checked : 1 ; unsigned int corrupted : 1 ; unsigned int upd_marker : 1 ; unsigned int updating : 1 ; unsigned int changing_leb : 1 ; unsigned int direct_writes : 1 ; } 
s#ubi_vtbl_record struct ubi_vtbl_record { t#__be32 reserved_pebs ; t#__be32 alignment ; t#__be32 data_pad ; t#__u8 vol_type ; t#__u8 upd_marker ; t#__be16 name_len ; t#__u8 name [ 127 + 1 ] ; t#__u8 flags ; t#__u8 padding [ 23 ] ; t#__be32 crc ; } 
s#ubi_wl_entry struct ubi_wl_entry { union { s#rb_node rb ; s#list_head list ; } u ; int ec ; int pnum ; } 
s#ubi_device struct ubi_device { s#cdev cdev ; s#device dev ; int ubi_num ; char ubi_name [ sizeof ( "ubi" ) + 5 ] ; int vol_count ; s#ubi_volume * volumes [ 128 + 1 ] ; t#spinlock_t volumes_lock ; int ref_count ; int image_seq ; int rsvd_pebs ; int avail_pebs ; int beb_rsvd_pebs ; int beb_rsvd_level ; int autoresize_vol_id ; int vtbl_slots ; int vtbl_size ; s#ubi_vtbl_record * vtbl ; s#mutex device_mutex ; int max_ec ; int mean_ec ; unsigned long long global_sqnum ; t#spinlock_t ltree_lock ; s#rb_root ltree ; s#mutex alc_mutex ; s#rb_root used ; s#rb_root erroneous ; s#rb_root free ; s#rb_root scrub ; s#list_head pq [ 10 ] ; int pq_head ; t#spinlock_t wl_lock ; s#mutex move_mutex ; s#rw_semaphore work_sem ; int wl_scheduled ; s#ubi_wl_entry * * lookuptbl ; s#ubi_wl_entry * move_from ; s#ubi_wl_entry * move_to ; int move_to_put ; s#list_head works ; int works_count ; s#task_struct * bgt_thread ; int thread_enabled ; char bgt_name [ sizeof ( "ubi_bgt%dd" ) + 2 ] ; s#notifier_block reboot_notifier ; long long flash_size ; int peb_count ; int peb_size ; int bad_peb_count ; int good_peb_count ; int erroneous_peb_count ; int max_erroneous ; int min_io_size ; int hdrs_min_io_size ; int ro_mode ; int leb_size ; int leb_start ; int ec_hdr_alsize ; int vid_hdr_alsize ; int vid_hdr_offset ; int vid_hdr_aloffset ; int vid_hdr_shift ; unsigned int bad_allowed : 1 ; unsigned int nor_flash : 1 ; s#mtd_info * mtd ; void * peb_buf1 ; void * peb_buf2 ; s#mutex buf_mutex ; s#mutex ckvol_mutex ; } 
s#ubi_device_info struct ubi_device_info { int ubi_num ; int leb_size ; int min_io_size ; int ro_mode ; t#dev_t cdev ; } 
ubi_do_get_device_info void ubi_do_get_device_info ( s#ubi_device * , s#ubi_device_info * ) 
ubi_get_device_info int ubi_get_device_info ( int , s#ubi_device_info * ) 
s#ubi_volume_desc struct ubi_volume_desc { s#ubi_volume * vol ; int mode ; } 
s#ubi_volume_info struct ubi_volume_info { int ubi_num ; int vol_id ; int size ; long long used_bytes ; int used_ebs ; int vol_type ; int corrupted ; int upd_marker ; int alignment ; int usable_leb_size ; int name_len ; const char * name ; t#dev_t cdev ; } 
ubi_get_volume_info void ubi_get_volume_info ( s#ubi_volume_desc * , s#ubi_volume_info * ) 
ubi_open_volume s#ubi_volume_desc * ubi_open_volume ( int , int , int ) 
ubi_open_volume_nm s#ubi_volume_desc * ubi_open_volume_nm ( int , const char * , int ) 
ubi_close_volume void ubi_close_volume ( s#ubi_volume_desc * ) 
ubi_leb_read int ubi_leb_read ( s#ubi_volume_desc * , int , char * , int , int , int ) 
ubi_leb_write int ubi_leb_write ( s#ubi_volume_desc * , int , const void * , int , int , int ) 
ubi_leb_change int ubi_leb_change ( s#ubi_volume_desc * , int , const void * , int , int ) 
ubi_leb_erase int ubi_leb_erase ( s#ubi_volume_desc * , int ) 
ubi_leb_unmap int ubi_leb_unmap ( s#ubi_volume_desc * , int ) 
ubi_leb_map int ubi_leb_map ( s#ubi_volume_desc * , int , int ) 
ubi_is_mapped int ubi_is_mapped ( s#ubi_volume_desc * , int ) 
ubi_sync int ubi_sync ( int ) 
ubi_register_volume_notifier int ubi_register_volume_notifier ( s#notifier_block * , int ) 
ubi_unregister_volume_notifier int ubi_unregister_volume_notifier ( s#notifier_block * ) 

/* drivers/net/8390.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
ei_open extern int ei_open ( s#net_device * ) 
ei_close extern int ei_close ( s#net_device * ) 
ei_start_xmit extern t#netdev_tx_t ei_start_xmit ( s#sk_buff * , s#net_device * ) 
ei_get_stats extern s#net_device_stats * ei_get_stats ( s#net_device * ) 
ei_set_multicast_list extern void ei_set_multicast_list ( s#net_device * ) 
ei_tx_timeout extern void ei_tx_timeout ( s#net_device * ) 
ei_interrupt extern t#irqreturn_t ei_interrupt ( int , void * ) 
ei_poll extern void ei_poll ( s#net_device * ) 
ei_netdev_ops extern const s#net_device_ops ei_netdev_ops 
__alloc_ei_netdev extern s#net_device * __alloc_ei_netdev ( int ) 
NS8390_init extern void NS8390_init ( s#net_device * , int ) 

/* drivers/net/arcnet/arcnet.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##tvec_base
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s#arc_hardware struct arc_hardware { t#__u8 source , dest , offset [ 2 ] ; } 
s#arc_rfc1201 struct arc_rfc1201 { t#__u8 proto ; t#__u8 split_flag ; t#__be16 sequence ; t#__u8 payload [ 0 ] ; } 
s#arc_rfc1051 struct arc_rfc1051 { t#__u8 proto ; t#__u8 payload [ 0 ] ; } 
s#ethhdr struct ethhdr { unsigned char h_dest [ 6 ] ; unsigned char h_source [ 6 ] ; t#__be16 h_proto ; } 
s#arc_eth_encap struct arc_eth_encap { t#__u8 proto ; s#ethhdr eth ; t#__u8 payload [ 0 ] ; } 
s#arc_cap struct arc_cap { t#__u8 proto ; t#__u8 cookie [ sizeof ( int ) ] ; union { t#__u8 ack ; t#__u8 raw [ 0 ] ; } mes ; } 
s#archdr struct archdr { s#arc_hardware hard ; union { s#arc_rfc1201 rfc1201 ; s#arc_rfc1051 rfc1051 ; s#arc_eth_encap eth_encap ; s#arc_cap cap ; t#__u8 raw [ 0 ] ; } soft ; } 
s#ArcProto struct ArcProto { char suffix ; int mtu ; int is_ip ; void ( * rx ) ( s#net_device * , int , s#archdr * , int ) ; int ( * build_header ) ( s#sk_buff * , s#net_device * , unsigned short , t#uint8_t ) ; int ( * prepare_tx ) ( s#net_device * , s#archdr * , int , int ) ; int ( * continue_tx ) ( s#net_device * , int ) ; int ( * ack_tx ) ( s#net_device * , int ) ; } 
arc_proto_map extern s#ArcProto * arc_proto_map [ 256 ] 
arc_proto_default extern s#ArcProto * arc_proto_default 
arc_bcast_proto extern s#ArcProto * arc_bcast_proto 
arc_raw_proto extern s#ArcProto * arc_raw_proto 
arcnet_unregister_proto void arcnet_unregister_proto ( s#ArcProto * ) 
arcnet_debug extern int arcnet_debug 
alloc_arcdev s#net_device * alloc_arcdev ( const char * ) 
arcnet_interrupt t#irqreturn_t arcnet_interrupt ( int , void * ) 
arcnet_open int arcnet_open ( s#net_device * ) 
arcnet_close int arcnet_close ( s#net_device * ) 
arcnet_send_packet t#netdev_tx_t arcnet_send_packet ( s#sk_buff * , s#net_device * ) 
arcnet_timeout void arcnet_timeout ( s#net_device * ) 

/* drivers/net/bnx2.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#cnic_irq struct cnic_irq { unsigned int vector ; void * status_blk ; t#u32 status_blk_num ; t#u32 irq_flags ; } 
s##iw_handler_def
s##iw_public_data
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s#vlan_group struct vlan_group { s#net_device * real_dev ; unsigned int nr_vlans ; s#hlist_node hlist ; s#net_device * * vlan_devices_arrays [ 8 ] ; s#rcu_head rcu ; } 
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s#cnic_ctl_completion struct cnic_ctl_completion { t#u32 cid ; } 
s#cnic_ctl_info struct cnic_ctl_info { int cmd ; union { s#cnic_ctl_completion comp ; char bytes [ 64 ] ; } data ; } 
s#cnic_ops struct cnic_ops { s#module * cnic_owner ; int ( * cnic_handler ) ( void * , void * ) ; int ( * cnic_ctl ) ( void * , s#cnic_ctl_info * ) ; } 
s#kwqe struct kwqe { t#u32 kwqe_op_flag ; t#u32 kwqe_info0 ; t#u32 kwqe_info1 ; t#u32 kwqe_info2 ; t#u32 kwqe_info3 ; t#u32 kwqe_info4 ; t#u32 kwqe_info5 ; t#u32 kwqe_info6 ; } 
s#kwqe_16 struct kwqe_16 { t#u32 kwqe_info0 ; t#u32 kwqe_info1 ; t#u32 kwqe_info2 ; t#u32 kwqe_info3 ; } 
s#drv_ctl_completion struct drv_ctl_completion { t#u32 comp_count ; } 
s#drv_ctl_io struct drv_ctl_io { t#u32 cid_addr ; t#u32 offset ; t#u32 data ; t#dma_addr_t dma_addr ; } 
s#drv_ctl_l2_ring struct drv_ctl_l2_ring { t#u32 client_id ; t#u32 cid ; } 
s#drv_ctl_info struct drv_ctl_info { int cmd ; union { s#drv_ctl_completion comp ; s#drv_ctl_io io ; s#drv_ctl_l2_ring ring ; char bytes [ 64 ] ; } data ; } 
s#cnic_eth_dev struct cnic_eth_dev { s#module * drv_owner ; t#u32 drv_state ; t#u32 chip_id ; t#u32 max_kwqe_pending ; s#pci_dev * pdev ; void * io_base ; void * io_base2 ; t#u32 ctx_tbl_offset ; t#u32 ctx_tbl_len ; int ctx_blk_size ; t#u32 starting_cid ; t#u32 max_iscsi_conn ; t#u32 max_fcoe_conn ; t#u32 max_rdma_conn ; t#u32 reserved0 [ 2 ] ; int num_irq ; s#cnic_irq irq_arr [ 8 ] ; int ( * drv_register_cnic ) ( s#net_device * , s#cnic_ops * , void * ) ; int ( * drv_unregister_cnic ) ( s#net_device * ) ; int ( * drv_submit_kwqes_32 ) ( s#net_device * , s#kwqe * [ ] , t#u32 ) ; int ( * drv_submit_kwqes_16 ) ( s#net_device * , s#kwqe_16 * [ ] , t#u32 ) ; int ( * drv_ctl ) ( s#net_device * , s#drv_ctl_info * ) ; unsigned long reserved1 [ 2 ] ; } 
bnx2_cnic_probe extern s#cnic_eth_dev * bnx2_cnic_probe ( s#net_device * ) 

/* drivers/net/bnx2x_main.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##iw_handler_def
s##iw_public_data
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
bnx2x_cnic_probe extern s#cnic_eth_dev * bnx2x_cnic_probe ( s#net_device * ) 

/* drivers/net/bonding_ipv6_ops.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s#icmpv6_echo struct icmpv6_echo { t#__be16 identifier ; t#__be16 sequence ; } 
s#icmpv6_nd_advt struct icmpv6_nd_advt { t#__u32 reserved : 5 , override : 1 , solicited : 1 , router : 1 , reserved2 : 24 ; } 
s#icmpv6_nd_ra struct icmpv6_nd_ra { t#__u8 hop_limit ; t#__u8 reserved : 3 , router_pref : 2 , home_agent : 1 , other : 1 , managed : 1 ; t#__be16 rt_lifetime ; } 
s#icmp6hdr struct icmp6hdr { t#__u8 icmp6_type ; t#__u8 icmp6_code ; t#__sum16 icmp6_cksum ; union { t#__be32 un_data32 [ 1 ] ; t#__be16 un_data16 [ 2 ] ; t#__u8 un_data8 [ 4 ] ; s#icmpv6_echo u_echo ; s#icmpv6_nd_advt u_nd_advt ; s#icmpv6_nd_ra u_nd_ra ; } icmp6_dataun ; } 
s#bonding_ipv6_ops struct bonding_ipv6_ops { s#sk_buff * ( * ndisc_build_skb ) ( s#net_device * , const s#in6_addr * , const s#in6_addr * , s#icmp6hdr * , const s#in6_addr * , int ) ; void ( * ndisc_send_skb ) ( s#sk_buff * , s#net_device * , s#neighbour * , const s#in6_addr * , const s#in6_addr * , s#icmp6hdr * ) ; void ( * in6_dev_put ) ( s#inet6_dev * ) ; int ( * register_inet6addr_notifier ) ( s#notifier_block * ) ; int ( * unregister_inet6addr_notifier ) ( s#notifier_block * ) ; } 
bonding_ipv6_ops extern s#bonding_ipv6_ops * bonding_ipv6_ops 
bonding_ipv6_ops_dummy extern s#bonding_ipv6_ops bonding_ipv6_ops_dummy 
bonding_ipv6_ops_sem extern s#rw_semaphore bonding_ipv6_ops_sem 

/* drivers/net/can/dev.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
can_put_echo_skb void can_put_echo_skb ( s#sk_buff * , s#net_device * , int ) 
can_get_echo_skb void can_get_echo_skb ( s#net_device * , int ) 
can_free_echo_skb void can_free_echo_skb ( s#net_device * , int ) 
can_bus_off void can_bus_off ( s#net_device * ) 
alloc_candev s#net_device * alloc_candev ( int ) 
free_candev void free_candev ( s#net_device * ) 
open_candev int open_candev ( s#net_device * ) 
close_candev void close_candev ( s#net_device * ) 
register_candev int register_candev ( s#net_device * ) 
unregister_candev void unregister_candev ( s#net_device * ) 

/* drivers/net/can/sja1000/sja1000.o */
sja1000_interrupt t#irqreturn_t sja1000_interrupt ( int , void * ) 
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
alloc_sja1000dev s#net_device * alloc_sja1000dev ( int ) 
free_sja1000dev void free_sja1000dev ( s#net_device * ) 
register_sja1000dev int register_sja1000dev ( s#net_device * ) 
unregister_sja1000dev void unregister_sja1000dev ( s#net_device * ) 

/* drivers/net/cnic.o */
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#cnic_sock struct cnic_sock { s#cnic_dev * dev ; void * context ; t#u32 src_ip [ 4 ] ; t#u32 dst_ip [ 4 ] ; t#u16 src_port ; t#u16 dst_port ; t#u16 vlan_id ; unsigned char old_ha [ 6 ] ; unsigned char ha [ 6 ] ; t#u32 mtu ; t#u32 cid ; t#u32 l5_cid ; t#u32 pg_cid ; int ulp_type ; t#u32 ka_timeout ; t#u32 ka_interval ; t#u8 ka_max_probe_count ; t#u8 tos ; t#u8 ttl ; t#u8 snd_seq_scale ; t#u32 rcv_buf ; t#u32 snd_buf ; t#u32 seed ; unsigned long tcp_flags ; unsigned long flags ; t#atomic_t ref_count ; t#u32 state ; s#kwqe kwqe1 ; s#kwqe kwqe2 ; s#kwqe kwqe3 ; } 
s#sockaddr_in6 struct sockaddr_in6 { unsigned short int sin6_family ; t#__be16 sin6_port ; t#__be32 sin6_flowinfo ; s#in6_addr sin6_addr ; t#__u32 sin6_scope_id ; } 
s#cnic_sockaddr struct cnic_sockaddr { union { s#sockaddr_in v4 ; s#sockaddr_in6 v6 ; } local ; union { s#sockaddr_in v4 ; s#sockaddr_in6 v6 ; } remote ; } 
s#cnic_dev struct cnic_dev { s#net_device * netdev ; s#pci_dev * pcidev ; void * regview ; s#list_head list ; int ( * register_device ) ( s#cnic_dev * , int , void * ) ; int ( * unregister_device ) ( s#cnic_dev * , int ) ; int ( * submit_kwqes ) ( s#cnic_dev * , s#kwqe * [ ] , t#u32 ) ; int ( * submit_kwqes_16 ) ( s#cnic_dev * , s#kwqe_16 * [ ] , t#u32 ) ; int ( * cm_create ) ( s#cnic_dev * , int , t#u32 , t#u32 , s#cnic_sock * * , void * ) ; int ( * cm_destroy ) ( s#cnic_sock * ) ; int ( * cm_connect ) ( s#cnic_sock * , s#cnic_sockaddr * ) ; int ( * cm_abort ) ( s#cnic_sock * ) ; int ( * cm_close ) ( s#cnic_sock * ) ; s#cnic_dev * ( * cm_select_dev ) ( s#sockaddr_in * , int ) ; int ( * iscsi_nl_msg_recv ) ( s#cnic_dev * , t#u32 , char * , t#u16 ) ; unsigned long flags ; t#atomic_t ref_count ; t#u8 mac_addr [ 6 ] ; int max_iscsi_conn ; int max_fcoe_conn ; int max_rdma_conn ; void * cnic_priv ; } 
s#kcqe struct kcqe { t#u32 kcqe_info0 ; t#u32 kcqe_info1 ; t#u32 kcqe_info2 ; t#u32 kcqe_info3 ; t#u32 kcqe_info4 ; t#u32 kcqe_info5 ; t#u32 kcqe_info6 ; t#u32 kcqe_op_flag ; } 
s#cnic_ulp_ops struct cnic_ulp_ops { void ( * cnic_init ) ( s#cnic_dev * ) ; void ( * cnic_exit ) ( s#cnic_dev * ) ; void ( * cnic_start ) ( void * ) ; void ( * cnic_stop ) ( void * ) ; void ( * indicate_kcqes ) ( void * , s#kcqe * [ ] , t#u32 ) ; void ( * indicate_netevent ) ( void * , unsigned long ) ; void ( * cm_connect_complete ) ( s#cnic_sock * ) ; void ( * cm_close_complete ) ( s#cnic_sock * ) ; void ( * cm_abort_complete ) ( s#cnic_sock * ) ; void ( * cm_remote_close ) ( s#cnic_sock * ) ; void ( * cm_remote_abort ) ( s#cnic_sock * ) ; void ( * iscsi_nl_send_msg ) ( s#cnic_dev * , t#u32 , char * , t#u16 ) ; s#module * owner ; t#atomic_t ref_count ; } 
cnic_register_driver extern int cnic_register_driver ( int , s#cnic_ulp_ops * ) 
cnic_unregister_driver extern int cnic_unregister_driver ( int ) 

/* drivers/net/cxgb3/cxgb3_offload.o */
e#t3ctype enum t3ctype { T3A = 0 , T3B , T3C , } 
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s#t3cdev struct t3cdev { char name [ 16 ] ; e#t3ctype type ; s#list_head ofld_dev_list ; s#net_device * lldev ; s#proc_dir_entry * proc_dir ; int ( * send ) ( s#t3cdev * , s#sk_buff * ) ; int ( * recv ) ( s#t3cdev * , s#sk_buff * * , int ) ; int ( * ctl ) ( s#t3cdev * , unsigned int , void * ) ; void ( * neigh_update ) ( s#t3cdev * , s#neighbour * ) ; void * priv ; void * l2opt ; void * l3opt ; void * l4opt ; void * ulp ; void * ulp_iscsi ; } 
t#cxgb3_cpl_handler_func typedef int ( * cxgb3_cpl_handler_func ) ( s#t3cdev * , s#sk_buff * , void * ) 
s#l2t_entry struct l2t_entry { t#u16 state ; t#u16 idx ; t#u32 addr ; int ifindex ; t#u16 smt_idx ; t#u16 vlan ; s#neighbour * neigh ; s#l2t_entry * first ; s#l2t_entry * next ; s#sk_buff_head arpq ; t#spinlock_t lock ; t#atomic_t refcnt ; t#u8 dmac [ 6 ] ; } 
s#cxgb3_client struct cxgb3_client { char * name ; void ( * add ) ( s#t3cdev * ) ; void ( * remove ) ( s#t3cdev * ) ; t#cxgb3_cpl_handler_func * handlers ; int ( * redirect ) ( void * , s#dst_entry * , s#dst_entry * , s#l2t_entry * ) ; s#list_head client_list ; void ( * event_handler ) ( s#t3cdev * , t#u32 , t#u32 ) ; } 
cxgb3_register_client void cxgb3_register_client ( s#cxgb3_client * ) 
cxgb3_unregister_client void cxgb3_unregister_client ( s#cxgb3_client * ) 
cxgb3_free_atid void * cxgb3_free_atid ( s#t3cdev * , int ) 
cxgb3_free_stid void cxgb3_free_stid ( s#t3cdev * , int ) 
cxgb3_insert_tid void cxgb3_insert_tid ( s#t3cdev * , s#cxgb3_client * , void * , unsigned int ) 
cxgb3_queue_tid_release void cxgb3_queue_tid_release ( s#t3cdev * , unsigned int ) 
cxgb3_remove_tid void cxgb3_remove_tid ( s#t3cdev * , void * , unsigned int ) 
cxgb3_alloc_atid int cxgb3_alloc_atid ( s#t3cdev * , s#cxgb3_client * , void * ) 
cxgb3_alloc_stid int cxgb3_alloc_stid ( s#t3cdev * , s#cxgb3_client * , void * ) 
dev2t3cdev s#t3cdev * dev2t3cdev ( s#net_device * ) 
t#cpl_handler_func typedef int ( * cpl_handler_func ) ( s#t3cdev * , s#sk_buff * ) 
t3_register_cpl_handler void t3_register_cpl_handler ( unsigned int , t#cpl_handler_func ) 
cxgb3_ofld_send int cxgb3_ofld_send ( s#t3cdev * , s#sk_buff * ) 

/* drivers/net/cxgb3/l2t.o */
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
t3_l2t_send_slow int t3_l2t_send_slow ( s#t3cdev * , s#sk_buff * , s#l2t_entry * ) 
t3_l2t_send_event void t3_l2t_send_event ( s#t3cdev * , s#l2t_entry * ) 
s#l2t_data struct l2t_data { unsigned int nentries ; s#l2t_entry * rover ; t#atomic_t nfree ; t#rwlock_t lock ; s#l2t_entry l2tab [ 0 ] ; } 
t3_l2e_free void t3_l2e_free ( s#l2t_data * , s#l2t_entry * ) 
t3_l2t_get s#l2t_entry * t3_l2t_get ( s#t3cdev * , s#neighbour * , s#net_device * ) 

/* drivers/net/hamradio/hdlcdrv.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s#hdlcdrv_params struct hdlcdrv_params { int iobase ; int irq ; int dma ; int dma2 ; int seriobase ; int pariobase ; int midiiobase ; } 
s#hdlcdrv_channel_params struct hdlcdrv_channel_params { int tx_delay ; int tx_tail ; int slottime ; int ppersist ; int fulldup ; } 
s#hdlcdrv_channel_state struct hdlcdrv_channel_state { int ptt ; int dcd ; int ptt_keyed ; unsigned long tx_packets ; unsigned long tx_errors ; unsigned long rx_packets ; unsigned long rx_errors ; } 
s#hdlcdrv_old_channel_state struct hdlcdrv_old_channel_state { int ptt ; int dcd ; int ptt_keyed ; } 
s#hdlcdrv_ioctl struct hdlcdrv_ioctl { int cmd ; union { s#hdlcdrv_params mp ; s#hdlcdrv_channel_params cp ; s#hdlcdrv_channel_state cs ; s#hdlcdrv_old_channel_state ocs ; unsigned int calibrate ; unsigned char bits ; char modename [ 128 ] ; char drivername [ 32 ] ; } data ; } 
s#hdlcdrv_ops struct hdlcdrv_ops { const char * drvname ; const char * drvinfo ; int ( * open ) ( s#net_device * ) ; int ( * close ) ( s#net_device * ) ; int ( * ioctl ) ( s#net_device * , s#ifreq * , s#hdlcdrv_ioctl * , int ) ; } 
s#hdlcdrv_pttoutput struct hdlcdrv_pttoutput { int dma2 ; int seriobase ; int pariobase ; int midiiobase ; unsigned int flags ; } 
s#hdlcdrv_hdlcbuffer struct hdlcdrv_hdlcbuffer { t#spinlock_t lock ; unsigned rd , wr ; unsigned short buf [ 32 ] ; } 
s#hdlcdrv_hdlcrx struct hdlcdrv_hdlcrx { s#hdlcdrv_hdlcbuffer hbuf ; unsigned long in_hdlc_rx ; int rx_state ; unsigned int bitstream ; unsigned int bitbuf ; int numbits ; unsigned char dcd ; int len ; unsigned char * bp ; unsigned char buffer [ 400 + 2 ] ; } 
s#hdlcdrv_hdlctx struct hdlcdrv_hdlctx { s#hdlcdrv_hdlcbuffer hbuf ; unsigned long in_hdlc_tx ; int tx_state ; int numflags ; unsigned int bitstream ; unsigned char ptt ; int calibrate ; int slotcnt ; unsigned int bitbuf ; int numbits ; int len ; unsigned char * bp ; unsigned char buffer [ 400 + 2 ] ; } 
s#hdlcdrv_bitbuffer struct hdlcdrv_bitbuffer { unsigned int rd ; unsigned int wr ; unsigned int shreg ; unsigned char buffer [ 256 ] ; } 
s#hdlcdrv_state struct hdlcdrv_state { int magic ; int opened ; const s#hdlcdrv_ops * ops ; struct { int bitrate ; } par ; s#hdlcdrv_pttoutput ptt_out ; s#hdlcdrv_channel_params ch_params ; s#hdlcdrv_hdlcrx hdlcrx ; s#hdlcdrv_hdlctx hdlctx ; s#hdlcdrv_bitbuffer bitbuf_channel ; s#hdlcdrv_bitbuffer bitbuf_hdlc ; int ptt_keyed ; s#sk_buff * skb ; } 
hdlcdrv_receiver void hdlcdrv_receiver ( s#net_device * , s#hdlcdrv_state * ) 
hdlcdrv_transmitter void hdlcdrv_transmitter ( s#net_device * , s#hdlcdrv_state * ) 
hdlcdrv_arbitrate void hdlcdrv_arbitrate ( s#net_device * , s#hdlcdrv_state * ) 
hdlcdrv_register s#net_device * hdlcdrv_register ( const s#hdlcdrv_ops * , unsigned int , const char * , unsigned int , unsigned int , unsigned int ) 
hdlcdrv_unregister void hdlcdrv_unregister ( s#net_device * ) 

/* drivers/net/irda/sir_dev.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s#tcmsg struct tcmsg { unsigned char tcm_family ; unsigned char tcm__pad1 ; unsigned short tcm__pad2 ; int tcm_ifindex ; t#__u32 tcm_handle ; t#__u32 tcm_parent ; t#__u32 tcm_info ; } 
s#qdisc_walker struct qdisc_walker { int stop ; int skip ; int count ; int ( * fn ) ( s#Qdisc * , unsigned long , s#qdisc_walker * ) ; } 
s#tcf_result struct tcf_result { unsigned long class ; t#u32 classid ; } 
s##tcf_walker
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s#tcf_proto_ops struct tcf_proto_ops { s#tcf_proto_ops * next ; char kind [ 16 ] ; int ( * classify ) ( s#sk_buff * , s#tcf_proto * , s#tcf_result * ) ; int ( * init ) ( s#tcf_proto * ) ; void ( * destroy ) ( s#tcf_proto * ) ; unsigned long ( * get ) ( s#tcf_proto * , t#u32 ) ; void ( * put ) ( s#tcf_proto * , unsigned long ) ; int ( * change ) ( s#tcf_proto * , unsigned long , t#u32 , s#nlattr * * , unsigned long * ) ; int ( * delete ) ( s#tcf_proto * , unsigned long ) ; void ( * walk ) ( s#tcf_proto * , s#tcf_walker * ) ; int ( * dump ) ( s#tcf_proto * , unsigned long , s#sk_buff * , s#tcmsg * ) ; s#module * owner ; } 
s#tcf_proto struct tcf_proto { s#tcf_proto * next ; void * root ; int ( * classify ) ( s#sk_buff * , s#tcf_proto * , s#tcf_result * ) ; t#__be16 protocol ; t#u32 prio ; t#u32 classid ; s#Qdisc * q ; void * data ; s#tcf_proto_ops * ops ; } 
s#tc_stats struct tc_stats { t#__u64 bytes ; t#__u32 packets ; t#__u32 drops ; t#__u32 overlimits ; t#__u32 bps ; t#__u32 pps ; t#__u32 qlen ; t#__u32 backlog ; } 
s#gnet_dump struct gnet_dump { t#spinlock_t * lock ; s#sk_buff * skb ; s#nlattr * tail ; int compat_tc_stats ; int compat_xstats ; void * xstats ; int xstats_len ; s#tc_stats tc_stats ; } 
s#Qdisc_class_ops struct Qdisc_class_ops { s#netdev_queue * ( * select_queue ) ( s#Qdisc * , s#tcmsg * ) ; int ( * graft ) ( s#Qdisc * , unsigned long , s#Qdisc * , s#Qdisc * * ) ; s#Qdisc * ( * leaf ) ( s#Qdisc * , unsigned long ) ; void ( * qlen_notify ) ( s#Qdisc * , unsigned long ) ; unsigned long ( * get ) ( s#Qdisc * , t#u32 ) ; void ( * put ) ( s#Qdisc * , unsigned long ) ; int ( * change ) ( s#Qdisc * , t#u32 , t#u32 , s#nlattr * * , unsigned long * ) ; int ( * delete ) ( s#Qdisc * , unsigned long ) ; void ( * walk ) ( s#Qdisc * , s#qdisc_walker * ) ; s#tcf_proto * * ( * tcf_chain ) ( s#Qdisc * , unsigned long ) ; unsigned long ( * bind_tcf ) ( s#Qdisc * , unsigned long , t#u32 ) ; void ( * unbind_tcf ) ( s#Qdisc * , unsigned long ) ; int ( * dump ) ( s#Qdisc * , unsigned long , s#sk_buff * , s#tcmsg * ) ; int ( * dump_stats ) ( s#Qdisc * , unsigned long , s#gnet_dump * ) ; } 
s#Qdisc_ops struct Qdisc_ops { s#Qdisc_ops * next ; const s#Qdisc_class_ops * cl_ops ; char id [ 16 ] ; int priv_size ; int ( * enqueue ) ( s#sk_buff * , s#Qdisc * ) ; s#sk_buff * ( * dequeue ) ( s#Qdisc * ) ; s#sk_buff * ( * peek ) ( s#Qdisc * ) ; unsigned int ( * drop ) ( s#Qdisc * ) ; int ( * init ) ( s#Qdisc * , s#nlattr * ) ; void ( * reset ) ( s#Qdisc * ) ; void ( * destroy ) ( s#Qdisc * ) ; int ( * change ) ( s#Qdisc * , s#nlattr * ) ; void ( * attach ) ( s#Qdisc * ) ; int ( * dump ) ( s#Qdisc * , s#sk_buff * ) ; int ( * dump_stats ) ( s#Qdisc * , s#gnet_dump * ) ; s#module * owner ; } 
s#tc_sizespec struct tc_sizespec { unsigned char cell_log ; unsigned char size_log ; short cell_align ; int overhead ; unsigned int linklayer ; unsigned int mpu ; unsigned int mtu ; unsigned int tsize ; } 
s#qdisc_size_table struct qdisc_size_table { s#list_head list ; s#tc_sizespec szopts ; int refcnt ; t#u16 data [ ] ; } 
s#gnet_stats_rate_est struct gnet_stats_rate_est { t#__u32 bps ; t#__u32 pps ; } 
s#gnet_stats_basic_packed struct gnet_stats_basic_packed { t#__u64 bytes ; t#__u32 packets ; } 
s#gnet_stats_queue struct gnet_stats_queue { t#__u32 qlen ; t#__u32 backlog ; t#__u32 drops ; t#__u32 requeues ; t#__u32 overlimits ; } 
s#Qdisc struct Qdisc { int ( * enqueue ) ( s#sk_buff * , s#Qdisc * ) ; s#sk_buff * ( * dequeue ) ( s#Qdisc * ) ; unsigned flags ; int padded ; s#Qdisc_ops * ops ; s#qdisc_size_table * stab ; s#list_head list ; t#u32 handle ; t#u32 parent ; t#atomic_t refcnt ; s#gnet_stats_rate_est rate_est ; int ( * reshape_fail ) ( s#sk_buff * , s#Qdisc * ) ; void * u32_node ; s#Qdisc * __parent ; s#netdev_queue * dev_queue ; s#Qdisc * next_sched ; s#sk_buff * gso_skb ; unsigned long state ; s#sk_buff_head q ; s#gnet_stats_basic_packed bstats ; s#gnet_stats_queue qstats ; } 
s##tvec_base
s##netpoll_info
s##map_segment
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##irlap_cb
t#magic_t typedef t#__u32 magic_t 
t#qos_value_t typedef struct { t#__u32 value ; t#__u16 bits ; } qos_value_t 
s#qos_info struct qos_info { t#magic_t magic ; t#qos_value_t baud_rate ; t#qos_value_t max_turn_time ; t#qos_value_t data_size ; t#qos_value_t window_size ; t#qos_value_t additional_bofs ; t#qos_value_t min_turn_time ; t#qos_value_t link_disc_time ; t#qos_value_t power ; } 
s#sir_fsm struct sir_fsm { s#semaphore sem ; s#delayed_work work ; unsigned state , substate ; int param ; int result ; } 
t#iobuff_t typedef struct { int state ; int in_frame ; t#__u8 * head ; t#__u8 * data ; int len ; int truesize ; t#__u16 fcs ; s#sk_buff * skb ; } iobuff_t 
t#IRDA_DONGLE typedef enum { IRDA_TEKRAM_DONGLE = 0 , IRDA_ESI_DONGLE = 1 , IRDA_ACTISYS_DONGLE = 2 , IRDA_ACTISYS_PLUS_DONGLE = 3 , IRDA_GIRBIL_DONGLE = 4 , IRDA_LITELINK_DONGLE = 5 , IRDA_AIRPORT_DONGLE = 6 , IRDA_OLD_BELKIN_DONGLE = 7 , IRDA_EP7211_IR = 8 , IRDA_MCP2120_DONGLE = 9 , IRDA_ACT200L_DONGLE = 10 , IRDA_MA600_DONGLE = 11 , IRDA_TOIM3232_DONGLE = 12 , IRDA_EP7211_DONGLE = 13 , } IRDA_DONGLE 
s#dongle_driver struct dongle_driver { s#module * owner ; const char * driver_name ; t#IRDA_DONGLE type ; int ( * open ) ( s#sir_dev * ) ; int ( * close ) ( s#sir_dev * ) ; int ( * reset ) ( s#sir_dev * ) ; int ( * set_speed ) ( s#sir_dev * , unsigned ) ; s#list_head dongle_list ; } 
s#sir_driver struct sir_driver { s#module * owner ; const char * driver_name ; int qos_mtt_bits ; int ( * chars_in_buffer ) ( s#sir_dev * ) ; void ( * wait_until_sent ) ( s#sir_dev * ) ; int ( * set_speed ) ( s#sir_dev * , unsigned ) ; int ( * set_dtr_rts ) ( s#sir_dev * , int , int ) ; int ( * do_write ) ( s#sir_dev * , const unsigned char * , t#size_t ) ; int ( * start_dev ) ( s#sir_dev * ) ; int ( * stop_dev ) ( s#sir_dev * ) ; } 
s#sir_dev struct sir_dev { s#net_device * netdev ; s#irlap_cb * irlap ; s#qos_info qos ; char hwname [ 32 ] ; s#sir_fsm fsm ; t#atomic_t enable_rx ; int raw_tx ; t#spinlock_t tx_lock ; t#u32 new_speed ; t#u32 flags ; unsigned speed ; t#iobuff_t tx_buff ; t#iobuff_t rx_buff ; s#sk_buff * tx_skb ; const s#dongle_driver * dongle_drv ; const s#sir_driver * drv ; void * priv ; } 
sirdev_set_dongle extern int sirdev_set_dongle ( s#sir_dev * , t#IRDA_DONGLE ) 
sirdev_raw_write extern int sirdev_raw_write ( s#sir_dev * , const char * , int ) 
sirdev_raw_read extern int sirdev_raw_read ( s#sir_dev * , char * , int ) 
sirdev_set_dtr_rts extern int sirdev_set_dtr_rts ( s#sir_dev * , int , int ) 
sirdev_write_complete extern void sirdev_write_complete ( s#sir_dev * ) 
sirdev_receive extern int sirdev_receive ( s#sir_dev * , const unsigned char * , t#size_t ) 
sirdev_get_instance extern s#sir_dev * sirdev_get_instance ( const s#sir_driver * , const char * ) 
sirdev_put_instance extern int sirdev_put_instance ( s#sir_dev * ) 

/* drivers/net/irda/sir_dongle.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##tcf_walker
s##tvec_base
s##netpoll_info
s##map_segment
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##irlap_cb
irda_register_dongle extern int irda_register_dongle ( s#dongle_driver * ) 
irda_unregister_dongle extern int irda_unregister_dongle ( s#dongle_driver * ) 

/* drivers/net/mdio.o */
s##net_device
s#mdio_if_info struct mdio_if_info { int prtad ; t#u32 mmds ; unsigned mode_support ; s#net_device * dev ; int ( * mdio_read ) ( s#net_device * , int , int , t#u16 ) ; int ( * mdio_write ) ( s#net_device * , int , int , t#u16 , t#u16 ) ; } 
mdio45_probe extern int mdio45_probe ( s#mdio_if_info * , int ) 
mdio_set_flag extern int mdio_set_flag ( const s#mdio_if_info * , int , int , t#u16 , int , t#bool ) 
mdio45_links_ok extern int mdio45_links_ok ( const s#mdio_if_info * , t#u32 ) 
mdio45_nway_restart extern int mdio45_nway_restart ( const s#mdio_if_info * ) 
mdio45_ethtool_gset_npage extern void mdio45_ethtool_gset_npage ( const s#mdio_if_info * , s#ethtool_cmd * , t#u32 , t#u32 ) 
mdio45_ethtool_spauseparam_an extern void mdio45_ethtool_spauseparam_an ( const s#mdio_if_info * , const s#ethtool_pauseparam * ) 
s#mii_ioctl_data struct mii_ioctl_data { t#__u16 phy_id ; t#__u16 reg_num ; t#__u16 val_in ; t#__u16 val_out ; } 
mdio_mii_ioctl extern int mdio_mii_ioctl ( const s#mdio_if_info * , s#mii_ioctl_data * , int ) 

/* drivers/net/mii.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s#mii_if_info struct mii_if_info { int phy_id ; int advertising ; int phy_id_mask ; int reg_num_mask ; unsigned int full_duplex : 1 ; unsigned int force_media : 1 ; unsigned int supports_gmii : 1 ; s#net_device * dev ; int ( * mdio_read ) ( s#net_device * , int , int ) ; void ( * mdio_write ) ( s#net_device * , int , int , int ) ; } 
mii_link_ok extern int mii_link_ok ( s#mii_if_info * ) 
mii_nway_restart extern int mii_nway_restart ( s#mii_if_info * ) 
mii_ethtool_gset extern int mii_ethtool_gset ( s#mii_if_info * , s#ethtool_cmd * ) 
mii_ethtool_sset extern int mii_ethtool_sset ( s#mii_if_info * , s#ethtool_cmd * ) 
mii_check_link extern void mii_check_link ( s#mii_if_info * ) 
mii_check_media extern unsigned int mii_check_media ( s#mii_if_info * , unsigned int , unsigned int ) 
mii_check_gmii_support extern int mii_check_gmii_support ( s#mii_if_info * ) 
generic_mii_ioctl extern int generic_mii_ioctl ( s#mii_if_info * , s#mii_ioctl_data * , int , unsigned int * ) 

/* drivers/net/mlx4/alloc.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
e#mlx4_port_type enum mlx4_port_type { MLX4_PORT_TYPE_IB = 1 , MLX4_PORT_TYPE_ETH = 2 , MLX4_PORT_TYPE_AUTO = 3 } 
s#mlx4_caps struct mlx4_caps { t#u64 fw_ver ; int num_ports ; int vl_cap [ MLX4_MAX_PORTS + 1 ] ; int ib_mtu_cap [ MLX4_MAX_PORTS + 1 ] ; t#__be32 ib_port_def_cap [ MLX4_MAX_PORTS + 1 ] ; t#u64 def_mac [ MLX4_MAX_PORTS + 1 ] ; int eth_mtu_cap [ MLX4_MAX_PORTS + 1 ] ; int gid_table_len [ MLX4_MAX_PORTS + 1 ] ; int pkey_table_len [ MLX4_MAX_PORTS + 1 ] ; int local_ca_ack_delay ; int num_uars ; int bf_reg_size ; int bf_regs_per_page ; int max_sq_sg ; int max_rq_sg ; int num_qps ; int max_wqes ; int max_sq_desc_sz ; int max_rq_desc_sz ; int max_qp_init_rdma ; int max_qp_dest_rdma ; int sqp_start ; int num_srqs ; int max_srq_wqes ; int max_srq_sge ; int reserved_srqs ; int num_cqs ; int max_cqes ; int reserved_cqs ; int num_eqs ; int reserved_eqs ; int num_comp_vectors ; int num_mpts ; int num_mtt_segs ; int mtts_per_seg ; int fmr_reserved_mtts ; int reserved_mtts ; int reserved_mrws ; int reserved_uars ; int num_mgms ; int num_amgms ; int reserved_mcgs ; int num_qp_per_mgm ; int num_pds ; int reserved_pds ; int mtt_entry_sz ; t#u32 max_msg_sz ; t#u32 page_size_cap ; t#u32 flags ; t#u32 bmme_flags ; t#u32 reserved_lkey ; t#u16 stat_rate_support ; t#u8 port_width_cap [ MLX4_MAX_PORTS + 1 ] ; int max_gso_sz ; int reserved_qps_cnt [ MLX4_NUM_QP_REGION ] ; int reserved_qps ; int reserved_qps_base [ MLX4_NUM_QP_REGION ] ; int log_num_macs ; int log_num_vlans ; int log_num_prios ; e#mlx4_port_type port_type [ MLX4_MAX_PORTS + 1 ] ; t#u8 supported_type [ MLX4_MAX_PORTS + 1 ] ; t#u32 port_mask ; e#mlx4_port_type possible_type [ MLX4_MAX_PORTS + 1 ] ; } 
s##radix_tree_node
s#mlx4_dev struct mlx4_dev { s#pci_dev * pdev ; unsigned long flags ; s#mlx4_caps caps ; s#radix_tree_root qp_table_tree ; t#u32 rev_id ; char board_id [ MLX4_BOARD_ID_LEN ] ; } 
s#mlx4_buf_list struct mlx4_buf_list { void * buf ; t#dma_addr_t map ; } 
s#mlx4_buf struct mlx4_buf { s#mlx4_buf_list direct ; s#mlx4_buf_list * page_list ; int nbufs ; int npages ; int page_shift ; } 
mlx4_buf_alloc int mlx4_buf_alloc ( s#mlx4_dev * , int , int , s#mlx4_buf * ) 
mlx4_buf_free void mlx4_buf_free ( s#mlx4_dev * , int , s#mlx4_buf * ) 
s#mlx4_db_pgdir struct mlx4_db_pgdir { s#list_head list ; unsigned long order0 [ ( ( ( MLX4_DB_PER_PAGE ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long order1 [ ( ( ( MLX4_DB_PER_PAGE / 2 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long * bits [ 2 ] ; t#__be32 * db_page ; t#dma_addr_t db_dma ; } 
s##mlx4_ib_user_db_page
s#mlx4_db struct mlx4_db { t#__be32 * db ; union { s#mlx4_db_pgdir * pgdir ; s#mlx4_ib_user_db_page * user_page ; } u ; t#dma_addr_t dma ; int index ; int order ; } 
mlx4_db_alloc int mlx4_db_alloc ( s#mlx4_dev * , s#mlx4_db * , int ) 
mlx4_db_free void mlx4_db_free ( s#mlx4_dev * , s#mlx4_db * ) 
s#mlx4_mtt struct mlx4_mtt { t#u32 first_seg ; int order ; int page_shift ; } 
s#mlx4_hwq_resources struct mlx4_hwq_resources { s#mlx4_db db ; s#mlx4_mtt mtt ; s#mlx4_buf buf ; } 
mlx4_alloc_hwq_res int mlx4_alloc_hwq_res ( s#mlx4_dev * , s#mlx4_hwq_resources * , int , int ) 
mlx4_free_hwq_res void mlx4_free_hwq_res ( s#mlx4_dev * , s#mlx4_hwq_resources * , int ) 

/* drivers/net/mlx4/cmd.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##radix_tree_node
__mlx4_cmd int __mlx4_cmd ( s#mlx4_dev * , t#u64 , t#u64 * , int , t#u32 , t#u8 , t#u16 , unsigned long ) 
s#mlx4_cmd_mailbox struct mlx4_cmd_mailbox { void * buf ; t#dma_addr_t dma ; } 
mlx4_alloc_cmd_mailbox s#mlx4_cmd_mailbox * mlx4_alloc_cmd_mailbox ( s#mlx4_dev * ) 
mlx4_free_cmd_mailbox void mlx4_free_cmd_mailbox ( s#mlx4_dev * , s#mlx4_cmd_mailbox * ) 

/* drivers/net/mlx4/cq.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##radix_tree_node
e#mlx4_event enum mlx4_event { MLX4_EVENT_TYPE_COMP = 0x00 , MLX4_EVENT_TYPE_PATH_MIG = 0x01 , MLX4_EVENT_TYPE_COMM_EST = 0x02 , MLX4_EVENT_TYPE_SQ_DRAINED = 0x03 , MLX4_EVENT_TYPE_SRQ_QP_LAST_WQE = 0x13 , MLX4_EVENT_TYPE_SRQ_LIMIT = 0x14 , MLX4_EVENT_TYPE_CQ_ERROR = 0x04 , MLX4_EVENT_TYPE_WQ_CATAS_ERROR = 0x05 , MLX4_EVENT_TYPE_EEC_CATAS_ERROR = 0x06 , MLX4_EVENT_TYPE_PATH_MIG_FAILED = 0x07 , MLX4_EVENT_TYPE_WQ_INVAL_REQ_ERROR = 0x10 , MLX4_EVENT_TYPE_WQ_ACCESS_ERROR = 0x11 , MLX4_EVENT_TYPE_SRQ_CATAS_ERROR = 0x12 , MLX4_EVENT_TYPE_LOCAL_CATAS_ERROR = 0x08 , MLX4_EVENT_TYPE_PORT_CHANGE = 0x09 , MLX4_EVENT_TYPE_EQ_OVERFLOW = 0x0f , MLX4_EVENT_TYPE_ECC_DETECT = 0x0e , MLX4_EVENT_TYPE_CMD = 0x0a } 
s#mlx4_uar struct mlx4_uar { unsigned long pfn ; int index ; } 
s#mlx4_cq struct mlx4_cq { void ( * comp ) ( s#mlx4_cq * ) ; void ( * event ) ( s#mlx4_cq * , e#mlx4_event ) ; s#mlx4_uar * uar ; t#u32 cons_index ; t#__be32 * set_ci_db ; t#__be32 * arm_db ; int arm_sn ; int cqn ; unsigned vector ; t#atomic_t refcount ; s#completion free ; } 
mlx4_cq_modify int mlx4_cq_modify ( s#mlx4_dev * , s#mlx4_cq * , t#u16 , t#u16 ) 
mlx4_cq_resize int mlx4_cq_resize ( s#mlx4_dev * , s#mlx4_cq * , int , s#mlx4_mtt * ) 
mlx4_cq_alloc int mlx4_cq_alloc ( s#mlx4_dev * , int , s#mlx4_mtt * , s#mlx4_uar * , t#u64 , s#mlx4_cq * , unsigned , int ) 
mlx4_cq_free void mlx4_cq_free ( s#mlx4_dev * , s#mlx4_cq * ) 

/* drivers/net/mlx4/fw.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##radix_tree_node
mlx4_INIT_PORT int mlx4_INIT_PORT ( s#mlx4_dev * , int ) 
mlx4_CLOSE_PORT int mlx4_CLOSE_PORT ( s#mlx4_dev * , int ) 

/* drivers/net/mlx4/intf.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##radix_tree_node
e#mlx4_dev_event enum mlx4_dev_event { MLX4_DEV_EVENT_CATASTROPHIC_ERROR , MLX4_DEV_EVENT_PORT_UP , MLX4_DEV_EVENT_PORT_DOWN , MLX4_DEV_EVENT_PORT_REINIT , } 
s#mlx4_interface struct mlx4_interface { void * ( * add ) ( s#mlx4_dev * ) ; void ( * remove ) ( s#mlx4_dev * , void * ) ; void ( * event ) ( s#mlx4_dev * , void * , e#mlx4_dev_event , int ) ; s#list_head list ; } 
mlx4_register_interface int mlx4_register_interface ( s#mlx4_interface * ) 
mlx4_unregister_interface void mlx4_unregister_interface ( s#mlx4_interface * ) 

/* drivers/net/mlx4/mcg.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##radix_tree_node
s#mlx4_qp struct mlx4_qp { void ( * event ) ( s#mlx4_qp * , e#mlx4_event ) ; int qpn ; t#atomic_t refcount ; s#completion free ; } 
mlx4_multicast_attach int mlx4_multicast_attach ( s#mlx4_dev * , s#mlx4_qp * , t#u8 [ 16 ] , int ) 
mlx4_multicast_detach int mlx4_multicast_detach ( s#mlx4_dev * , s#mlx4_qp * , t#u8 [ 16 ] ) 

/* drivers/net/mlx4/mr.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##radix_tree_node
mlx4_mtt_init int mlx4_mtt_init ( s#mlx4_dev * , int , int , s#mlx4_mtt * ) 
mlx4_mtt_cleanup void mlx4_mtt_cleanup ( s#mlx4_dev * , s#mlx4_mtt * ) 
mlx4_mtt_addr t#u64 mlx4_mtt_addr ( s#mlx4_dev * , s#mlx4_mtt * ) 
s#mlx4_mr struct mlx4_mr { s#mlx4_mtt mtt ; t#u64 iova ; t#u64 size ; t#u32 key ; t#u32 pd ; t#u32 access ; int enabled ; } 
mlx4_mr_alloc int mlx4_mr_alloc ( s#mlx4_dev * , t#u32 , t#u64 , t#u64 , t#u32 , int , int , s#mlx4_mr * ) 
mlx4_mr_free void mlx4_mr_free ( s#mlx4_dev * , s#mlx4_mr * ) 
mlx4_mr_enable int mlx4_mr_enable ( s#mlx4_dev * , s#mlx4_mr * ) 
mlx4_write_mtt int mlx4_write_mtt ( s#mlx4_dev * , s#mlx4_mtt * , int , int , t#u64 * ) 
mlx4_buf_write_mtt int mlx4_buf_write_mtt ( s#mlx4_dev * , s#mlx4_mtt * , s#mlx4_buf * ) 
s#mlx4_mpt_entry struct mlx4_mpt_entry { t#__be32 flags ; t#__be32 qpn ; t#__be32 key ; t#__be32 pd_flags ; t#__be64 start ; t#__be64 length ; t#__be32 lkey ; t#__be32 win_cnt ; t#u8 reserved1 [ 3 ] ; t#u8 mtt_rep ; t#__be64 mtt_seg ; t#__be32 mtt_sz ; t#__be32 entity_size ; t#__be32 first_byte_offset ; } 
s#mlx4_fmr struct mlx4_fmr { s#mlx4_mr mr ; s#mlx4_mpt_entry * mpt ; t#__be64 * mtts ; t#dma_addr_t dma_handle ; int max_pages ; int max_maps ; int maps ; t#u8 page_shift ; } 
mlx4_map_phys_fmr int mlx4_map_phys_fmr ( s#mlx4_dev * , s#mlx4_fmr * , t#u64 * , int , t#u64 , t#u32 * , t#u32 * ) 
mlx4_fmr_alloc int mlx4_fmr_alloc ( s#mlx4_dev * , t#u32 , t#u32 , int , int , t#u8 , s#mlx4_fmr * ) 
mlx4_fmr_enable int mlx4_fmr_enable ( s#mlx4_dev * , s#mlx4_fmr * ) 
mlx4_fmr_unmap void mlx4_fmr_unmap ( s#mlx4_dev * , s#mlx4_fmr * , t#u32 * , t#u32 * ) 
mlx4_fmr_free int mlx4_fmr_free ( s#mlx4_dev * , s#mlx4_fmr * ) 
mlx4_SYNC_TPT int mlx4_SYNC_TPT ( s#mlx4_dev * ) 

/* drivers/net/mlx4/pd.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##radix_tree_node
mlx4_pd_alloc int mlx4_pd_alloc ( s#mlx4_dev * , t#u32 * ) 
mlx4_pd_free void mlx4_pd_free ( s#mlx4_dev * , t#u32 ) 
mlx4_uar_alloc int mlx4_uar_alloc ( s#mlx4_dev * , s#mlx4_uar * ) 
mlx4_uar_free void mlx4_uar_free ( s#mlx4_dev * , s#mlx4_uar * ) 

/* drivers/net/mlx4/port.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##radix_tree_node
mlx4_register_mac int mlx4_register_mac ( s#mlx4_dev * , t#u8 , t#u64 , int * ) 
mlx4_unregister_mac void mlx4_unregister_mac ( s#mlx4_dev * , t#u8 , int ) 
mlx4_register_vlan int mlx4_register_vlan ( s#mlx4_dev * , t#u8 , t#u16 , int * ) 
mlx4_unregister_vlan void mlx4_unregister_vlan ( s#mlx4_dev * , t#u8 , int ) 

/* drivers/net/mlx4/qp.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##radix_tree_node
e#mlx4_qp_state enum mlx4_qp_state { MLX4_QP_STATE_RST = 0 , MLX4_QP_STATE_INIT = 1 , MLX4_QP_STATE_RTR = 2 , MLX4_QP_STATE_RTS = 3 , MLX4_QP_STATE_SQER = 4 , MLX4_QP_STATE_SQD = 5 , MLX4_QP_STATE_ERR = 6 , MLX4_QP_STATE_SQ_DRAINING = 7 , MLX4_QP_NUM_STATE } 
s#mlx4_qp_path struct mlx4_qp_path { t#u8 fl ; t#u8 reserved1 [ 2 ] ; t#u8 pkey_index ; t#u8 reserved2 ; t#u8 grh_mylmc ; t#__be16 rlid ; t#u8 ackto ; t#u8 mgid_index ; t#u8 static_rate ; t#u8 hop_limit ; t#__be32 tclass_flowlabel ; t#u8 rgid [ 16 ] ; t#u8 sched_queue ; t#u8 snooper_flags ; t#u8 reserved3 [ 2 ] ; t#u8 counter_index ; t#u8 reserved4 [ 7 ] ; } 
s#mlx4_qp_context struct mlx4_qp_context { t#__be32 flags ; t#__be32 pd ; t#u8 mtu_msgmax ; t#u8 rq_size_stride ; t#u8 sq_size_stride ; t#u8 rlkey ; t#__be32 usr_page ; t#__be32 local_qpn ; t#__be32 remote_qpn ; s#mlx4_qp_path pri_path ; s#mlx4_qp_path alt_path ; t#__be32 params1 ; t#u32 reserved1 ; t#__be32 next_send_psn ; t#__be32 cqn_send ; t#u32 reserved2 [ 2 ] ; t#__be32 last_acked_psn ; t#__be32 ssn ; t#__be32 params2 ; t#__be32 rnr_nextrecvpsn ; t#__be32 srcd ; t#__be32 cqn_recv ; t#__be64 db_rec_addr ; t#__be32 qkey ; t#__be32 srqn ; t#__be32 msn ; t#__be16 rq_wqe_counter ; t#__be16 sq_wqe_counter ; t#u32 reserved3 [ 2 ] ; t#__be32 param3 ; t#__be32 nummmcpeers_basemkey ; t#u8 log_page_size ; t#u8 reserved4 [ 2 ] ; t#u8 mtt_base_addr_h ; t#__be32 mtt_base_addr_l ; t#u32 reserved5 [ 10 ] ; } 
e#mlx4_qp_optpar enum mlx4_qp_optpar { MLX4_QP_OPTPAR_ALT_ADDR_PATH = 1 << 0 , MLX4_QP_OPTPAR_RRE = 1 << 1 , MLX4_QP_OPTPAR_RAE = 1 << 2 , MLX4_QP_OPTPAR_RWE = 1 << 3 , MLX4_QP_OPTPAR_PKEY_INDEX = 1 << 4 , MLX4_QP_OPTPAR_Q_KEY = 1 << 5 , MLX4_QP_OPTPAR_RNR_TIMEOUT = 1 << 6 , MLX4_QP_OPTPAR_PRIMARY_ADDR_PATH = 1 << 7 , MLX4_QP_OPTPAR_SRA_MAX = 1 << 8 , MLX4_QP_OPTPAR_RRA_MAX = 1 << 9 , MLX4_QP_OPTPAR_PM_STATE = 1 << 10 , MLX4_QP_OPTPAR_RETRY_COUNT = 1 << 12 , MLX4_QP_OPTPAR_RNR_RETRY = 1 << 13 , MLX4_QP_OPTPAR_ACK_TIMEOUT = 1 << 14 , MLX4_QP_OPTPAR_SCHED_QUEUE = 1 << 16 } 
mlx4_qp_modify int mlx4_qp_modify ( s#mlx4_dev * , s#mlx4_mtt * , e#mlx4_qp_state , e#mlx4_qp_state , s#mlx4_qp_context * , e#mlx4_qp_optpar , int , s#mlx4_qp * ) 
mlx4_qp_reserve_range int mlx4_qp_reserve_range ( s#mlx4_dev * , int , int , int * ) 
mlx4_qp_release_range void mlx4_qp_release_range ( s#mlx4_dev * , int , int ) 
mlx4_qp_alloc int mlx4_qp_alloc ( s#mlx4_dev * , int , s#mlx4_qp * ) 
mlx4_qp_remove void mlx4_qp_remove ( s#mlx4_dev * , s#mlx4_qp * ) 
mlx4_qp_free void mlx4_qp_free ( s#mlx4_dev * , s#mlx4_qp * ) 
mlx4_qp_query int mlx4_qp_query ( s#mlx4_dev * , s#mlx4_qp * , s#mlx4_qp_context * ) 
mlx4_qp_to_ready int mlx4_qp_to_ready ( s#mlx4_dev * , s#mlx4_mtt * , s#mlx4_qp_context * , s#mlx4_qp * , e#mlx4_qp_state * ) 

/* drivers/net/mlx4/srq.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##radix_tree_node
s#mlx4_srq struct mlx4_srq { void ( * event ) ( s#mlx4_srq * , e#mlx4_event ) ; int srqn ; int max ; int max_gs ; int wqe_shift ; t#atomic_t refcount ; s#completion free ; } 
mlx4_srq_alloc int mlx4_srq_alloc ( s#mlx4_dev * , t#u32 , s#mlx4_mtt * , t#u64 , s#mlx4_srq * ) 
mlx4_srq_free void mlx4_srq_free ( s#mlx4_dev * , s#mlx4_srq * ) 
mlx4_srq_arm int mlx4_srq_arm ( s#mlx4_dev * , s#mlx4_srq * , int ) 
mlx4_srq_query int mlx4_srq_query ( s#mlx4_dev * , s#mlx4_srq * , int * ) 

/* drivers/net/phy/fixed.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##device_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##bus_type_private
s##driver_private
s#phy_driver struct phy_driver { t#u32 phy_id ; char * name ; unsigned int phy_id_mask ; t#u32 features ; t#u32 flags ; int ( * config_init ) ( s#phy_device * ) ; int ( * probe ) ( s#phy_device * ) ; int ( * suspend ) ( s#phy_device * ) ; int ( * resume ) ( s#phy_device * ) ; int ( * config_aneg ) ( s#phy_device * ) ; int ( * read_status ) ( s#phy_device * ) ; int ( * ack_interrupt ) ( s#phy_device * ) ; int ( * config_intr ) ( s#phy_device * ) ; int ( * did_interrupt ) ( s#phy_device * ) ; void ( * remove ) ( s#phy_device * ) ; s#device_driver driver ; } 
s##map_segment
s##compat_timespec
s##pollfd
s#mii_bus struct mii_bus { const char * name ; char id [ ( 20 - 3 ) ] ; void * priv ; int ( * read ) ( s#mii_bus * , int , int ) ; int ( * write ) ( s#mii_bus * , int , int , t#u16 ) ; int ( * reset ) ( s#mii_bus * ) ; s#mutex mdio_lock ; s#device * parent ; enum { MDIOBUS_ALLOCATED = 1 , MDIOBUS_REGISTERED , MDIOBUS_UNREGISTERED , MDIOBUS_RELEASED , } state ; s#device dev ; s#phy_device * phy_map [ 32 ] ; t#u32 phy_mask ; int * irq ; } 
e#phy_state enum phy_state { PHY_DOWN = 0 , PHY_STARTING , PHY_READY , PHY_PENDING , PHY_UP , PHY_AN , PHY_RUNNING , PHY_NOLINK , PHY_FORCING , PHY_CHANGELINK , PHY_HALTED , PHY_RESUMING } 
t#phy_interface_t typedef enum { PHY_INTERFACE_MODE_MII , PHY_INTERFACE_MODE_GMII , PHY_INTERFACE_MODE_SGMII , PHY_INTERFACE_MODE_TBI , PHY_INTERFACE_MODE_RMII , PHY_INTERFACE_MODE_RGMII , PHY_INTERFACE_MODE_RGMII_ID , PHY_INTERFACE_MODE_RGMII_RXID , PHY_INTERFACE_MODE_RGMII_TXID , PHY_INTERFACE_MODE_RTBI } phy_interface_t 
s##net_device
s#phy_device struct phy_device { s#phy_driver * drv ; s#mii_bus * bus ; s#device dev ; t#u32 phy_id ; e#phy_state state ; t#u32 dev_flags ; t#phy_interface_t interface ; int addr ; int speed ; int duplex ; int pause ; int asym_pause ; int link ; t#u32 interrupts ; t#u32 supported ; t#u32 advertising ; int autoneg ; int link_timeout ; int irq ; void * priv ; s#work_struct phy_queue ; s#delayed_work state_queue ; t#atomic_t irq_disable ; s#mutex lock ; s#net_device * attached_dev ; void ( * adjust_link ) ( s#net_device * ) ; void ( * adjust_state ) ( s#net_device * ) ; } 
s#fixed_phy_status struct fixed_phy_status { int link ; int speed ; int duplex ; int pause ; int asym_pause ; } 
fixed_phy_set_link_update extern int fixed_phy_set_link_update ( s#phy_device * , int ( * ) ( s#net_device * , s#fixed_phy_status * ) ) 
fixed_phy_add extern int fixed_phy_add ( unsigned int , int , s#fixed_phy_status * ) 

/* drivers/net/phy/mdio-bitbang.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##net_device
s#mdiobb_ops struct mdiobb_ops { s#module * owner ; void ( * set_mdc ) ( s#mdiobb_ctrl * , int ) ; void ( * set_mdio_dir ) ( s#mdiobb_ctrl * , int ) ; void ( * set_mdio_data ) ( s#mdiobb_ctrl * , int ) ; int ( * get_mdio_data ) ( s#mdiobb_ctrl * ) ; } 
s#mdiobb_ctrl struct mdiobb_ctrl { const s#mdiobb_ops * ops ; } 
alloc_mdio_bitbang s#mii_bus * alloc_mdio_bitbang ( s#mdiobb_ctrl * ) 
free_mdio_bitbang void free_mdio_bitbang ( s#mii_bus * ) 

/* drivers/net/phy/mdio_bus.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##nameidata
s##vfsmount
s##kstatfs
s##kiocb
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##class_private
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
mdiobus_alloc s#mii_bus * mdiobus_alloc ( void ) 
mdiobus_register int mdiobus_register ( s#mii_bus * ) 
mdiobus_unregister void mdiobus_unregister ( s#mii_bus * ) 
mdiobus_free void mdiobus_free ( s#mii_bus * ) 
mdiobus_scan s#phy_device * mdiobus_scan ( s#mii_bus * , int ) 
mdiobus_read int mdiobus_read ( s#mii_bus * , int , t#u16 ) 
mdiobus_write int mdiobus_write ( s#mii_bus * , int , t#u16 , t#u16 ) 
mdio_bus_type extern s#bus_type mdio_bus_type 

/* drivers/net/phy/phy.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##device_private
s##tvec_base
s##dma_coherent_mem
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##kiocb
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##class_private
s##bus_type_private
s##driver_private
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
phy_print_status void phy_print_status ( s#phy_device * ) 
phy_sanitize_settings void phy_sanitize_settings ( s#phy_device * ) 
phy_ethtool_sset int phy_ethtool_sset ( s#phy_device * , s#ethtool_cmd * ) 
phy_ethtool_gset int phy_ethtool_gset ( s#phy_device * , s#ethtool_cmd * ) 
phy_mii_ioctl int phy_mii_ioctl ( s#phy_device * , s#mii_ioctl_data * , int ) 
phy_start_aneg int phy_start_aneg ( s#phy_device * ) 
phy_enable_interrupts int phy_enable_interrupts ( s#phy_device * ) 
phy_disable_interrupts int phy_disable_interrupts ( s#phy_device * ) 
phy_start_interrupts int phy_start_interrupts ( s#phy_device * ) 
phy_stop_interrupts int phy_stop_interrupts ( s#phy_device * ) 
phy_stop void phy_stop ( s#phy_device * ) 
phy_start void phy_start ( s#phy_device * ) 

/* drivers/net/phy/phy_device.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##device_private
s##tvec_base
s##dma_coherent_mem
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##kiocb
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##class_private
s##bus_type_private
s##driver_private
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
phy_device_free void phy_device_free ( s#phy_device * ) 
phy_register_fixup int phy_register_fixup ( const char * , t#u32 , t#u32 , int ( * ) ( s#phy_device * ) ) 
phy_register_fixup_for_uid int phy_register_fixup_for_uid ( t#u32 , t#u32 , int ( * ) ( s#phy_device * ) ) 
phy_register_fixup_for_id int phy_register_fixup_for_id ( const char * , int ( * ) ( s#phy_device * ) ) 
phy_scan_fixups int phy_scan_fixups ( s#phy_device * ) 
phy_device_create s#phy_device * phy_device_create ( s#mii_bus * , int , int ) 
get_phy_id int get_phy_id ( s#mii_bus * , int , t#u32 * ) 
get_phy_device s#phy_device * get_phy_device ( s#mii_bus * , int ) 
phy_device_register int phy_device_register ( s#phy_device * ) 
phy_connect_direct int phy_connect_direct ( s#net_device * , s#phy_device * , void ( * ) ( s#net_device * ) , t#u32 , t#phy_interface_t ) 
phy_connect s#phy_device * phy_connect ( s#net_device * , const char * , void ( * ) ( s#net_device * ) , t#u32 , t#phy_interface_t ) 
phy_disconnect void phy_disconnect ( s#phy_device * ) 
phy_attach_direct int phy_attach_direct ( s#net_device * , s#phy_device * , t#u32 , t#phy_interface_t ) 
phy_attach s#phy_device * phy_attach ( s#net_device * , const char * , t#u32 , t#phy_interface_t ) 
phy_detach void phy_detach ( s#phy_device * ) 
genphy_config_advert int genphy_config_advert ( s#phy_device * ) 
genphy_restart_aneg int genphy_restart_aneg ( s#phy_device * ) 
genphy_config_aneg int genphy_config_aneg ( s#phy_device * ) 
genphy_update_link int genphy_update_link ( s#phy_device * ) 
genphy_read_status int genphy_read_status ( s#phy_device * ) 
genphy_suspend int genphy_suspend ( s#phy_device * ) 
genphy_resume int genphy_resume ( s#phy_device * ) 
phy_driver_register int phy_driver_register ( s#phy_driver * ) 
phy_driver_unregister void phy_driver_unregister ( s#phy_driver * ) 

/* drivers/net/ppp_generic.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##rtable
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s#net_generic struct net_generic { unsigned int len ; s#rcu_head rcu ; void * ptr [ 0 ] ; } 
s#ppp_channel_ops struct ppp_channel_ops { int ( * start_xmit ) ( s#ppp_channel * , s#sk_buff * ) ; int ( * ioctl ) ( s#ppp_channel * , unsigned int , unsigned long ) ; } 
s#ppp_channel struct ppp_channel { void * private ; s#ppp_channel_ops * ops ; int mtu ; int hdrlen ; void * ppp ; int speed ; int latency ; } 
ppp_register_net_channel extern int ppp_register_net_channel ( s#net * , s#ppp_channel * ) 
ppp_register_channel extern int ppp_register_channel ( s#ppp_channel * ) 
ppp_unregister_channel extern void ppp_unregister_channel ( s#ppp_channel * ) 
ppp_channel_index extern int ppp_channel_index ( s#ppp_channel * ) 
ppp_unit_number extern int ppp_unit_number ( s#ppp_channel * ) 
ppp_input extern void ppp_input ( s#ppp_channel * , s#sk_buff * ) 
ppp_input_error extern void ppp_input_error ( s#ppp_channel * , int ) 
ppp_output_wakeup extern void ppp_output_wakeup ( s#ppp_channel * ) 
s#compressor struct compressor { int compress_proto ; void * ( * comp_alloc ) ( unsigned char * , int ) ; void ( * comp_free ) ( void * ) ; int ( * comp_init ) ( void * , unsigned char * , int , int , int , int ) ; void ( * comp_reset ) ( void * ) ; int ( * compress ) ( void * , unsigned char * , unsigned char * , int , int ) ; void ( * comp_stat ) ( void * , s#compstat * ) ; void * ( * decomp_alloc ) ( unsigned char * , int ) ; void ( * decomp_free ) ( void * ) ; int ( * decomp_init ) ( void * , unsigned char * , int , int , int , int , int ) ; void ( * decomp_reset ) ( void * ) ; int ( * decompress ) ( void * , unsigned char * , int , unsigned char * , int ) ; void ( * incomp ) ( void * , unsigned char * , int ) ; void ( * decomp_stat ) ( void * , s#compstat * ) ; s#module * owner ; unsigned int comp_extra ; } 
ppp_register_compressor extern int ppp_register_compressor ( s#compressor * ) 
ppp_unregister_compressor extern void ppp_unregister_compressor ( s#compressor * ) 

/* drivers/net/pppox.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##rtable
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s#pppox_proto struct pppox_proto { int ( * create ) ( s#net * , s#socket * ) ; int ( * ioctl ) ( s#socket * , unsigned int , unsigned long ) ; s#module * owner ; } 
register_pppox_proto extern int register_pppox_proto ( int , s#pppox_proto * ) 
unregister_pppox_proto extern void unregister_pppox_proto ( int ) 
pppox_unbind_sock extern void pppox_unbind_sock ( s#sock * ) 
pppox_ioctl extern int pppox_ioctl ( s#socket * , unsigned int , unsigned long ) 

/* drivers/net/slhc.o */
t#byte_t typedef t#__u8 byte_t 
s#iphdr struct iphdr { t#__u8 ihl : 4 , version : 4 ; t#__u8 tos ; t#__be16 tot_len ; t#__be16 id ; t#__be16 frag_off ; t#__u8 ttl ; t#__u8 protocol ; t#__sum16 check ; t#__be32 saddr ; t#__be32 daddr ; } 
s#tcphdr struct tcphdr { t#__be16 source ; t#__be16 dest ; t#__be32 seq ; t#__be32 ack_seq ; t#__u16 res1 : 4 , doff : 4 , fin : 1 , syn : 1 , rst : 1 , psh : 1 , ack : 1 , urg : 1 , ece : 1 , cwr : 1 ; t#__be16 window ; t#__sum16 check ; t#__be16 urg_ptr ; } 
s#cstate struct cstate { t#byte_t cs_this ; s#cstate * next ; s#iphdr cs_ip ; s#tcphdr cs_tcp ; unsigned char cs_ipopt [ 64 ] ; unsigned char cs_tcpopt [ 64 ] ; int cs_hsize ; } 
t#int32 typedef t#__u32 int32 
s#slcompress struct slcompress { s#cstate * tstate ; s#cstate * rstate ; t#byte_t tslot_limit ; t#byte_t rslot_limit ; t#byte_t xmit_oldest ; t#byte_t xmit_current ; t#byte_t recv_current ; t#byte_t flags ; t#int32 sls_o_nontcp ; t#int32 sls_o_tcp ; t#int32 sls_o_uncompressed ; t#int32 sls_o_compressed ; t#int32 sls_o_searches ; t#int32 sls_o_misses ; t#int32 sls_i_uncompressed ; t#int32 sls_i_compressed ; t#int32 sls_i_error ; t#int32 sls_i_tossed ; t#int32 sls_i_runt ; t#int32 sls_i_badcheck ; } 
slhc_init s#slcompress * slhc_init ( int , int ) 
slhc_free void slhc_free ( s#slcompress * ) 
slhc_remember int slhc_remember ( s#slcompress * , unsigned char * , int ) 
slhc_compress int slhc_compress ( s#slcompress * , unsigned char * , int , unsigned char * , unsigned char * * , int ) 
slhc_uncompress int slhc_uncompress ( s#slcompress * , unsigned char * , int ) 
slhc_toss int slhc_toss ( s#slcompress * ) 

/* drivers/net/sungem_phy.o */
s#mii_phy_ops struct mii_phy_ops { int ( * init ) ( s#mii_phy * ) ; int ( * suspend ) ( s#mii_phy * ) ; int ( * setup_aneg ) ( s#mii_phy * , t#u32 ) ; int ( * setup_forced ) ( s#mii_phy * , int , int ) ; int ( * poll_link ) ( s#mii_phy * ) ; int ( * read_link ) ( s#mii_phy * ) ; int ( * enable_fiber ) ( s#mii_phy * , int ) ; } 
s#mii_phy_def struct mii_phy_def { t#u32 phy_id ; t#u32 phy_id_mask ; t#u32 features ; int magic_aneg ; const char * name ; const s#mii_phy_ops * ops ; } 
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s#mii_phy struct mii_phy { s#mii_phy_def * def ; t#u32 advertising ; int mii_id ; int autoneg ; int speed ; int duplex ; int pause ; s#net_device * dev ; int ( * mdio_read ) ( s#net_device * , int , int ) ; void ( * mdio_write ) ( s#net_device * , int , int , int ) ; void * platform_data ; } 
mii_phy_probe extern int mii_phy_probe ( s#mii_phy * , int ) 

/* drivers/net/tokenring/tms380tr.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##neigh_parms
s##vlan_group
tms380tr_netdev_ops extern const s#net_device_ops tms380tr_netdev_ops 
tms380tr_open int tms380tr_open ( s#net_device * ) 
tms380tr_close int tms380tr_close ( s#net_device * ) 
tms380tr_interrupt t#irqreturn_t tms380tr_interrupt ( int , void * ) 
tmsdev_init int tmsdev_init ( s#net_device * , s#device * ) 
tmsdev_term void tmsdev_term ( s#net_device * ) 
tms380tr_wait void tms380tr_wait ( unsigned long ) 

/* drivers/net/usb/cdc_ether.o */
s##usb_tt
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##mon_bus
s##ep_device
s##wusb_dev
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##sec_path
s#driver_info struct driver_info { char * description ; int flags ; int ( * bind ) ( s#usbnet * , s#usb_interface * ) ; void ( * unbind ) ( s#usbnet * , s#usb_interface * ) ; int ( * reset ) ( s#usbnet * ) ; int ( * stop ) ( s#usbnet * ) ; int ( * check_connect ) ( s#usbnet * ) ; void ( * status ) ( s#usbnet * , s#urb * ) ; int ( * link_reset ) ( s#usbnet * ) ; int ( * rx_fixup ) ( s#usbnet * , s#sk_buff * ) ; s#sk_buff * ( * tx_fixup ) ( s#usbnet * , s#sk_buff * , t#gfp_t ) ; int ( * early_init ) ( s#usbnet * ) ; void ( * indication ) ( s#usbnet * , void * , int ) ; int in ; int out ; unsigned long data ; } 
s#usbnet struct usbnet { s#usb_device * udev ; s#usb_interface * intf ; s#driver_info * driver_info ; const char * driver_name ; void * driver_priv ; t#wait_queue_head_t * wait ; s#mutex phy_mutex ; unsigned char suspend_count ; unsigned in , out ; s#usb_host_endpoint * status ; unsigned maxpacket ; s#timer_list delay ; s#net_device * net ; int msg_enable ; unsigned long data [ 5 ] ; t#u32 xid ; t#u32 hard_mtu ; t#size_t rx_urb_size ; s#mii_if_info mii ; s#sk_buff_head rxq ; s#sk_buff_head txq ; s#sk_buff_head done ; s#sk_buff_head rxq_pause ; s#urb * interrupt ; s#tasklet_struct bh ; s#work_struct kevent ; unsigned long flags ; } 
usbnet_generic_cdc_bind extern int usbnet_generic_cdc_bind ( s#usbnet * , s#usb_interface * ) 
usbnet_cdc_unbind extern void usbnet_cdc_unbind ( s#usbnet * , s#usb_interface * ) 

/* drivers/net/usb/rndis_host.o */
s##usb_tt
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##mon_bus
s##ep_device
s##wusb_dev
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##sec_path
rndis_status extern void rndis_status ( s#usbnet * , s#urb * ) 
s#rndis_msg_hdr struct rndis_msg_hdr { t#__le32 msg_type ; t#__le32 msg_len ; t#__le32 request_id ; t#__le32 status ; } 
rndis_command extern int rndis_command ( s#usbnet * , s#rndis_msg_hdr * , int ) 
generic_rndis_bind extern int generic_rndis_bind ( s#usbnet * , s#usb_interface * , int ) 
rndis_unbind extern void rndis_unbind ( s#usbnet * , s#usb_interface * ) 
rndis_rx_fixup extern int rndis_rx_fixup ( s#usbnet * , s#sk_buff * ) 
rndis_tx_fixup extern s#sk_buff * rndis_tx_fixup ( s#usbnet * , s#sk_buff * , t#gfp_t ) 

/* drivers/net/usb/usbnet.o */
s##usb_tt
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##mon_bus
s##ep_device
s##wusb_dev
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##sec_path
usbnet_get_endpoints extern int usbnet_get_endpoints ( s#usbnet * , s#usb_interface * ) 
usbnet_get_ethernet_addr extern int usbnet_get_ethernet_addr ( s#usbnet * , int ) 
usbnet_skb_return extern void usbnet_skb_return ( s#usbnet * , s#sk_buff * ) 
usbnet_change_mtu extern int usbnet_change_mtu ( s#net_device * , int ) 
usbnet_defer_kevent extern void usbnet_defer_kevent ( s#usbnet * , int ) 
usbnet_pause_rx extern void usbnet_pause_rx ( s#usbnet * ) 
usbnet_resume_rx extern void usbnet_resume_rx ( s#usbnet * ) 
usbnet_purge_paused_rxq extern void usbnet_purge_paused_rxq ( s#usbnet * ) 
usbnet_unlink_rx_urbs extern void usbnet_unlink_rx_urbs ( s#usbnet * ) 
usbnet_stop extern int usbnet_stop ( s#net_device * ) 
usbnet_open extern int usbnet_open ( s#net_device * ) 
usbnet_get_settings extern int usbnet_get_settings ( s#net_device * , s#ethtool_cmd * ) 
usbnet_set_settings extern int usbnet_set_settings ( s#net_device * , s#ethtool_cmd * ) 
usbnet_get_link extern t#u32 usbnet_get_link ( s#net_device * ) 
usbnet_nway_reset extern int usbnet_nway_reset ( s#net_device * ) 
usbnet_get_drvinfo extern void usbnet_get_drvinfo ( s#net_device * , s#ethtool_drvinfo * ) 
usbnet_get_msglevel extern t#u32 usbnet_get_msglevel ( s#net_device * ) 
usbnet_set_msglevel extern void usbnet_set_msglevel ( s#net_device * , t#u32 ) 
usbnet_tx_timeout extern void usbnet_tx_timeout ( s#net_device * ) 
usbnet_start_xmit extern t#netdev_tx_t usbnet_start_xmit ( s#sk_buff * , s#net_device * ) 
usbnet_disconnect extern void usbnet_disconnect ( s#usb_interface * ) 
usbnet_probe extern int usbnet_probe ( s#usb_interface * , const s#usb_device_id * ) 
usbnet_suspend extern int usbnet_suspend ( s#usb_interface * , t#pm_message_t ) 
usbnet_resume extern int usbnet_resume ( s#usb_interface * ) 

/* drivers/net/wan/hdlc.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
hdlc_change_mtu int hdlc_change_mtu ( s#net_device * , int ) 
hdlc_start_xmit t#netdev_tx_t hdlc_start_xmit ( s#sk_buff * , s#net_device * ) 
hdlc_open int hdlc_open ( s#net_device * ) 
hdlc_close void hdlc_close ( s#net_device * ) 
hdlc_ioctl int hdlc_ioctl ( s#net_device * , s#ifreq * , int ) 
alloc_hdlcdev s#net_device * alloc_hdlcdev ( void * ) 
unregister_hdlc_device void unregister_hdlc_device ( s#net_device * ) 
s#hdlc_proto struct hdlc_proto { int ( * open ) ( s#net_device * ) ; void ( * close ) ( s#net_device * ) ; void ( * start ) ( s#net_device * ) ; void ( * stop ) ( s#net_device * ) ; void ( * detach ) ( s#net_device * ) ; int ( * ioctl ) ( s#net_device * , s#ifreq * ) ; t#__be16 ( * type_trans ) ( s#sk_buff * , s#net_device * ) ; int ( * netif_rx ) ( s#sk_buff * ) ; t#netdev_tx_t ( * xmit ) ( s#sk_buff * , s#net_device * ) ; s#module * module ; s#hdlc_proto * next ; } 
register_hdlc_protocol void register_hdlc_protocol ( s#hdlc_proto * ) 
unregister_hdlc_protocol void unregister_hdlc_protocol ( s#hdlc_proto * ) 
attach_hdlc_protocol int attach_hdlc_protocol ( s#net_device * , s#hdlc_proto * , t#size_t ) 
detach_hdlc_protocol void detach_hdlc_protocol ( s#net_device * ) 

/* drivers/net/wimax/i2400m/control.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
e#wimax_st enum wimax_st { __WIMAX_ST_NULL = 0 , WIMAX_ST_DOWN , __WIMAX_ST_QUIESCING , WIMAX_ST_UNINITIALIZED , WIMAX_ST_RADIO_OFF , WIMAX_ST_READY , WIMAX_ST_SCANNING , WIMAX_ST_CONNECTING , WIMAX_ST_CONNECTED , __WIMAX_ST_INVALID } 
s#nlmsghdr struct nlmsghdr { t#__u32 nlmsg_len ; t#__u16 nlmsg_type ; t#__u16 nlmsg_flags ; t#__u32 nlmsg_seq ; t#__u32 nlmsg_pid ; } 
s#genlmsghdr struct genlmsghdr { t#__u8 cmd ; t#__u8 version ; t#__u16 reserved ; } 
s#genl_info struct genl_info { t#u32 snd_seq ; t#u32 snd_pid ; s#nlmsghdr * nlhdr ; s#genlmsghdr * genlhdr ; void * userhdr ; s#nlattr * * attrs ; s#net * _net ; } 
e#wimax_rf_state enum wimax_rf_state { WIMAX_RF_OFF = 0 , WIMAX_RF_ON = 1 , WIMAX_RF_QUERY = 2 , } 
s##rfkill
s##input_dev
s#wimax_dev struct wimax_dev { s#net_device * net_dev ; s#list_head id_table_node ; s#mutex mutex ; s#mutex mutex_reset ; e#wimax_st state ; int ( * op_msg_from_user ) ( s#wimax_dev * , const char * , const void * , t#size_t , const s#genl_info * ) ; int ( * op_rfkill_sw_toggle ) ( s#wimax_dev * , e#wimax_rf_state ) ; int ( * op_reset ) ( s#wimax_dev * ) ; s#rfkill * rfkill ; s#input_dev * rfkill_input ; unsigned rf_hw ; unsigned rf_sw ; char name [ 32 ] ; s#dentry * debugfs_dentry ; } 
e#i2400m_system_state enum i2400m_system_state { I2400M_SS_UNINITIALIZED = 1 , I2400M_SS_INIT , I2400M_SS_READY , I2400M_SS_SCAN , I2400M_SS_STANDBY , I2400M_SS_CONNECTING , I2400M_SS_WIMAX_CONNECTED , I2400M_SS_DATA_PATH_CONNECTED , I2400M_SS_IDLE , I2400M_SS_DISCONNECTING , I2400M_SS_OUT_OF_ZONE , I2400M_SS_SLEEPACTIVE , I2400M_SS_PRODUCTION , I2400M_SS_CONFIG , I2400M_SS_RF_OFF , I2400M_SS_RF_SHUTDOWN , I2400M_SS_DEVICE_DISCONNECT , I2400M_SS_MAX , } 
e#i2400m_reset_type enum i2400m_reset_type { I2400M_RT_WARM , I2400M_RT_COLD , I2400M_RT_BUS , } 
s#i2400m_bootrom_header struct i2400m_bootrom_header { t#__le32 command ; t#__le32 target_addr ; t#__le32 data_size ; t#__le32 block_checksum ; char payload [ 0 ] ; } 
s#i2400m_poke_table struct i2400m_poke_table { t#__le32 address ; t#__le32 data ; } 
s#i2400m_pld struct i2400m_pld { t#__le32 val ; } 
s#i2400m_msg_hdr struct i2400m_msg_hdr { union { t#__le32 barker ; t#__u32 size ; } ; union { t#__le32 sequence ; t#__u32 offset ; } ; t#__le16 num_pls ; t#__le16 rsv1 ; t#__le16 padding ; t#__le16 rsv2 ; s#i2400m_pld pld [ 0 ] ; } 
s##i2400m_roq
s##workqueue_struct
s##i2400m_reset_ctx
s#i2400m struct i2400m { s#wimax_dev wimax_dev ; unsigned updown : 1 ; unsigned boot_mode : 1 ; unsigned sboot : 1 ; unsigned ready : 1 ; unsigned rx_reorder : 1 ; t#u8 trace_msg_from_user ; e#i2400m_system_state state ; t#wait_queue_head_t state_wq ; t#size_t bus_tx_block_size ; t#size_t bus_pl_size_max ; unsigned bus_bm_retries ; int ( * bus_dev_start ) ( s#i2400m * ) ; void ( * bus_dev_stop ) ( s#i2400m * ) ; void ( * bus_tx_kick ) ( s#i2400m * ) ; int ( * bus_reset ) ( s#i2400m * , e#i2400m_reset_type ) ; t#ssize_t ( * bus_bm_cmd_send ) ( s#i2400m * , const s#i2400m_bootrom_header * , t#size_t , int ) ; t#ssize_t ( * bus_bm_wait_for_ack ) ( s#i2400m * , s#i2400m_bootrom_header * , t#size_t ) ; const char * * bus_fw_names ; unsigned bus_bm_mac_addr_impaired : 1 ; const s#i2400m_poke_table * bus_bm_pokes_table ; t#spinlock_t tx_lock ; void * tx_buf ; t#size_t tx_in , tx_out ; s#i2400m_msg_hdr * tx_msg ; t#size_t tx_sequence , tx_msg_size ; unsigned tx_pl_num , tx_pl_max , tx_pl_min , tx_num , tx_size_acc , tx_size_min , tx_size_max ; t#spinlock_t rx_lock ; unsigned rx_pl_num , rx_pl_max , rx_pl_min , rx_num , rx_size_acc , rx_size_min , rx_size_max ; s#i2400m_roq * rx_roq ; t#u8 src_mac_addr [ 14 ] ; s#mutex msg_mutex ; s#completion msg_completion ; s#sk_buff * ack_skb ; void * bm_ack_buf ; void * bm_cmd_buf ; s#workqueue_struct * work_queue ; s#mutex init_mutex ; s#i2400m_reset_ctx * reset_ctx ; s#work_struct wake_tx_ws ; s#sk_buff * wake_tx_skb ; s#dentry * debugfs_dentry ; const char * fw_name ; unsigned long fw_version ; } 
i2400m_cmd_enter_powersave extern int i2400m_cmd_enter_powersave ( s#i2400m * ) 
i2400m_cmd_get_state extern int i2400m_cmd_get_state ( s#i2400m * ) 
s#i2400m_tlv_hdr struct i2400m_tlv_hdr { t#__le16 type ; t#__le16 length ; t#__u8 pl [ 0 ] ; } 
i2400m_set_init_config extern int i2400m_set_init_config ( s#i2400m * , const s#i2400m_tlv_hdr * * , t#size_t ) 

/* drivers/net/wimax/i2400m/driver.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##rfkill
s##input_dev
s##i2400m_roq
s##workqueue_struct
s##i2400m_reset_ctx
i2400m_queue_work extern int i2400m_queue_work ( s#i2400m * , void ( * ) ( s#work_struct * ) , t#gfp_t , const void * , t#size_t ) 
i2400m_dev_reset_handle extern int i2400m_dev_reset_handle ( s#i2400m * ) 
e#i2400m_bri enum i2400m_bri { I2400M_BRI_SOFT = 1 << 1 , I2400M_BRI_NO_REBOOT = 1 << 2 , I2400M_BRI_MAC_REINIT = 1 << 3 , } 
i2400m_setup extern int i2400m_setup ( s#i2400m * , e#i2400m_bri ) 
i2400m_release extern void i2400m_release ( s#i2400m * ) 

/* drivers/net/wimax/i2400m/fw.o */
i2400m_bm_cmd_prepare extern void i2400m_bm_cmd_prepare ( s#i2400m_bootrom_header * ) 
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##rfkill
s##input_dev
s##i2400m_roq
s##workqueue_struct
s##i2400m_reset_ctx
i2400m_dev_bootstrap extern int i2400m_dev_bootstrap ( s#i2400m * , e#i2400m_bri ) 

/* drivers/net/wimax/i2400m/netdev.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
i2400m_netdev_setup extern void i2400m_netdev_setup ( s#net_device * ) 

/* drivers/net/wimax/i2400m/rx.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##rfkill
s##input_dev
e#i2400m_ro_type enum i2400m_ro_type { I2400M_RO_TYPE_RESET = 0 , I2400M_RO_TYPE_PACKET , I2400M_RO_TYPE_WS , I2400M_RO_TYPE_PACKET_WS , } 
s#i2400m_roq_log_entry struct i2400m_roq_log_entry { e#i2400m_ro_type type ; unsigned ws , count , sn , nsn , new_ws ; } 
s#i2400m_roq_log struct i2400m_roq_log { s#i2400m_roq_log_entry entry [ I2400M_ROQ_LOG_LENGTH ] ; unsigned in , out ; } 
s#i2400m_roq struct i2400m_roq { unsigned ws ; s#sk_buff_head queue ; s#i2400m_roq_log * log ; } 
s##workqueue_struct
s##i2400m_reset_ctx
i2400m_rx extern int i2400m_rx ( s#i2400m * , s#sk_buff * ) 

/* drivers/net/wimax/i2400m/tx.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##rfkill
s##input_dev
s##i2400m_roq
s##workqueue_struct
s##i2400m_reset_ctx
e#i2400m_pt enum i2400m_pt { I2400M_PT_DATA = 0 , I2400M_PT_CTRL , I2400M_PT_TRACE , I2400M_PT_RESET_WARM , I2400M_PT_RESET_COLD , I2400M_PT_EDATA , I2400M_PT_ILLEGAL } 
i2400m_tx extern int i2400m_tx ( s#i2400m * , const void * , t#size_t , e#i2400m_pt ) 
i2400m_tx_msg_get extern s#i2400m_msg_hdr * i2400m_tx_msg_get ( s#i2400m * , t#size_t * ) 
i2400m_tx_msg_sent extern void i2400m_tx_msg_sent ( s#i2400m * ) 

/* drivers/net/wireless/airo.o */
s#iw_request_info struct iw_request_info { t#__u16 cmd ; t#__u16 flags ; } 
s#iw_point struct iw_point { void * pointer ; t#__u16 length ; t#__u16 flags ; } 
s#iw_param struct iw_param { t#__s32 value ; t#__u8 fixed ; t#__u8 disabled ; t#__u16 flags ; } 
s#iw_freq struct iw_freq { t#__s32 m ; t#__s16 e ; t#__u8 i ; t#__u8 flags ; } 
s#iw_quality struct iw_quality { t#__u8 qual ; t#__u8 level ; t#__u8 noise ; t#__u8 updated ; } 
u#iwreq_data union iwreq_data { char name [ 16 ] ; s#iw_point essid ; s#iw_param nwid ; s#iw_freq freq ; s#iw_param sens ; s#iw_param bitrate ; s#iw_param txpower ; s#iw_param rts ; s#iw_param frag ; t#__u32 mode ; s#iw_param retry ; s#iw_point encoding ; s#iw_param power ; s#iw_quality qual ; s#sockaddr ap_addr ; s#sockaddr addr ; s#iw_param param ; s#iw_point data ; } 
t#iw_handler typedef int ( * iw_handler ) ( s#net_device * , s#iw_request_info * , u#iwreq_data * , char * ) 
s#iw_priv_args struct iw_priv_args { t#__u32 cmd ; t#__u16 set_args ; t#__u16 get_args ; char name [ 16 ] ; } 
s#iw_discarded struct iw_discarded { t#__u32 nwid ; t#__u32 code ; t#__u32 fragment ; t#__u32 retries ; t#__u32 misc ; } 
s#iw_missed struct iw_missed { t#__u32 beacon ; } 
s#iw_statistics struct iw_statistics { t#__u16 status ; s#iw_quality qual ; s#iw_discarded discard ; s#iw_missed miss ; } 
s#iw_handler_def struct iw_handler_def { t#__u16 num_standard ; t#__u16 num_private ; t#__u16 num_private_args ; const t#iw_handler * standard ; const t#iw_handler * private ; const s#iw_priv_args * private_args ; s#iw_statistics * ( * get_wireless_stats ) ( s#net_device * ) ; } 
s#iw_spy_data struct iw_spy_data { int spy_number ; t#u_char spy_address [ 8 ] [ 6 ] ; s#iw_quality spy_stat [ 8 ] ; s#iw_quality spy_thr_low ; s#iw_quality spy_thr_high ; t#u_char spy_thr_under [ 8 ] ; } 
s##libipw_device
s#iw_public_data struct iw_public_data { s#iw_spy_data * spy_data ; s#libipw_device * libipw ; } 
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
stop_airo_card void stop_airo_card ( s#net_device * , int ) 
init_airo_card s#net_device * init_airo_card ( unsigned short , int , int , s#device * ) 
reset_airo_card int reset_airo_card ( s#net_device * ) 

/* drivers/net/wireless/ath/main.o */
s##sock
s##net_device
s##sec_path
t#int16_t typedef t#__s16 int16_t 
s#reg_dmn_pair_mapping struct reg_dmn_pair_mapping { t#u16 regDmnEnum ; t#u16 reg_5ghz_ctl ; t#u16 reg_2ghz_ctl ; } 
s#ath_regulatory struct ath_regulatory { char alpha2 [ 2 ] ; t#u16 country_code ; t#u16 max_power_level ; t#u32 tp_scale ; t#u16 current_rd ; t#u16 current_rd_ext ; t#int16_t power_limit ; s#reg_dmn_pair_mapping * regpair ; } 
s#ath_common struct ath_common { t#u16 cachelsz ; s#ath_regulatory regulatory ; } 
ath_rxbuf_alloc s#sk_buff * ath_rxbuf_alloc ( s#ath_common * , t#u32 , t#gfp_t ) 

/* drivers/net/wireless/ath/regd.o */
ath_is_world_regd t#bool ath_is_world_regd ( s#ath_regulatory * ) 
e#cfg80211_signal_type enum cfg80211_signal_type { CFG80211_SIGNAL_TYPE_NONE , CFG80211_SIGNAL_TYPE_MBM , CFG80211_SIGNAL_TYPE_UNSPEC , } 
e#ieee80211_band enum ieee80211_band { IEEE80211_BAND_2GHZ , IEEE80211_BAND_5GHZ , IEEE80211_NUM_BANDS } 
s#ieee80211_channel struct ieee80211_channel { e#ieee80211_band band ; t#u16 center_freq ; t#u16 hw_value ; t#u32 flags ; int max_antenna_gain ; int max_power ; t#bool beacon_found ; t#u32 orig_flags ; int orig_mag , orig_mpwr ; } 
s#ieee80211_rate struct ieee80211_rate { t#u32 flags ; t#u16 bitrate ; t#u16 hw_value , hw_value_short ; } 
s#ieee80211_mcs_info struct ieee80211_mcs_info { t#u8 rx_mask [ 10 ] ; t#__le16 rx_highest ; t#u8 tx_params ; t#u8 reserved [ 3 ] ; } 
s#ieee80211_sta_ht_cap struct ieee80211_sta_ht_cap { t#u16 cap ; t#bool ht_supported ; t#u8 ampdu_factor ; t#u8 ampdu_density ; s#ieee80211_mcs_info mcs ; } 
s#ieee80211_supported_band struct ieee80211_supported_band { s#ieee80211_channel * channels ; s#ieee80211_rate * bitrates ; e#ieee80211_band band ; int n_channels ; int n_bitrates ; s#ieee80211_sta_ht_cap ht_cap ; } 
e#nl80211_reg_initiator enum nl80211_reg_initiator { NL80211_REGDOM_SET_BY_CORE , NL80211_REGDOM_SET_BY_USER , NL80211_REGDOM_SET_BY_DRIVER , NL80211_REGDOM_SET_BY_COUNTRY_IE , } 
e#environment_cap enum environment_cap { ENVIRON_ANY , ENVIRON_INDOOR , ENVIRON_OUTDOOR , } 
s#regulatory_request struct regulatory_request { int wiphy_idx ; e#nl80211_reg_initiator initiator ; char alpha2 [ 2 ] ; t#bool intersect ; t#u32 country_ie_checksum ; e#environment_cap country_ie_env ; s#list_head list ; } 
s#ieee80211_freq_range struct ieee80211_freq_range { t#u32 start_freq_khz ; t#u32 end_freq_khz ; t#u32 max_bandwidth_khz ; } 
s#ieee80211_power_rule struct ieee80211_power_rule { t#u32 max_antenna_gain ; t#u32 max_eirp ; } 
s#ieee80211_reg_rule struct ieee80211_reg_rule { s#ieee80211_freq_range freq_range ; s#ieee80211_power_rule power_rule ; t#u32 flags ; } 
s#ieee80211_regdomain struct ieee80211_regdomain { t#u32 n_reg_rules ; char alpha2 [ 2 ] ; s#ieee80211_reg_rule reg_rules [ ] ; } 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
e#nl80211_iftype enum nl80211_iftype { NL80211_IFTYPE_UNSPECIFIED , NL80211_IFTYPE_ADHOC , NL80211_IFTYPE_STATION , NL80211_IFTYPE_AP , NL80211_IFTYPE_AP_VLAN , NL80211_IFTYPE_WDS , NL80211_IFTYPE_MONITOR , NL80211_IFTYPE_MESH_POINT , __NL80211_IFTYPE_AFTER_LAST , NL80211_IFTYPE_MAX = __NL80211_IFTYPE_AFTER_LAST - 1 } 
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s#cfg80211_ibss_params struct cfg80211_ibss_params { t#u8 * ssid ; t#u8 * bssid ; s#ieee80211_channel * channel ; t#u8 * ie ; t#u8 ssid_len , ie_len ; t#u16 beacon_interval ; t#bool channel_fixed ; t#bool privacy ; } 
e#nl80211_auth_type enum nl80211_auth_type { NL80211_AUTHTYPE_OPEN_SYSTEM , NL80211_AUTHTYPE_SHARED_KEY , NL80211_AUTHTYPE_FT , NL80211_AUTHTYPE_NETWORK_EAP , __NL80211_AUTHTYPE_NUM , NL80211_AUTHTYPE_MAX = __NL80211_AUTHTYPE_NUM - 1 , NL80211_AUTHTYPE_AUTOMATIC } 
s#cfg80211_crypto_settings struct cfg80211_crypto_settings { t#u32 wpa_versions ; t#u32 cipher_group ; int n_ciphers_pairwise ; t#u32 ciphers_pairwise [ 5 ] ; int n_akm_suites ; t#u32 akm_suites [ 2 ] ; t#bool control_port ; } 
s#cfg80211_connect_params struct cfg80211_connect_params { s#ieee80211_channel * channel ; t#u8 * bssid ; t#u8 * ssid ; t#size_t ssid_len ; e#nl80211_auth_type auth_type ; t#u8 * ie ; t#size_t ie_len ; t#bool privacy ; s#cfg80211_crypto_settings crypto ; const t#u8 * key ; t#u8 key_len , key_idx ; } 
s#wireless_dev struct wireless_dev { s#wiphy * wiphy ; e#nl80211_iftype iftype ; s#list_head list ; s#net_device * netdev ; s#mutex mtx ; s#work_struct cleanup_work ; t#u8 ssid [ 32 ] ; t#u8 ssid_len ; enum { CFG80211_SME_IDLE , CFG80211_SME_CONNECTING , CFG80211_SME_CONNECTED , } sme_state ; s#cfg80211_conn * conn ; s#cfg80211_cached_keys * connect_keys ; s#list_head event_list ; t#spinlock_t event_lock ; s#cfg80211_internal_bss * authtry_bsses [ 4 ] ; s#cfg80211_internal_bss * auth_bsses [ 4 ] ; s#cfg80211_internal_bss * current_bss ; struct { s#cfg80211_ibss_params ibss ; s#cfg80211_connect_params connect ; s#cfg80211_cached_keys * keys ; t#u8 * ie ; t#size_t ie_len ; t#u8 bssid [ 6 ] , prev_bssid [ 6 ] ; t#u8 ssid [ 32 ] ; t#s8 default_key , default_mgmt_key ; t#bool ps , prev_bssid_valid ; int ps_timeout ; } wext ; } 
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s#wiphy struct wiphy { t#u8 perm_addr [ 6 ] ; t#u16 interface_modes ; t#bool custom_regulatory ; t#bool strict_regulatory ; t#bool disable_beacon_hints ; t#bool netnsok ; t#bool ps_default ; e#cfg80211_signal_type signal_type ; int bss_priv_size ; t#u8 max_scan_ssids ; t#u16 max_scan_ie_len ; int n_cipher_suites ; const t#u32 * cipher_suites ; t#u8 retry_short ; t#u8 retry_long ; t#u32 frag_threshold ; t#u32 rts_threshold ; const void * privid ; s#ieee80211_supported_band * bands [ IEEE80211_NUM_BANDS ] ; int ( * reg_notifier ) ( s#wiphy * , s#regulatory_request * ) ; const s#ieee80211_regdomain * regd ; s#device dev ; s#dentry * debugfsdir ; s#net * _net ; char priv [ 0 ] __attribute__ ( ( __aligned__ ( 32 ) ) ) ; } 
ath_reg_notifier_apply int ath_reg_notifier_apply ( s#wiphy * , s#regulatory_request * , s#ath_regulatory * ) 
ath_regd_init int ath_regd_init ( s#ath_regulatory * , s#wiphy * , int ( * ) ( s#wiphy * , s#regulatory_request * ) ) 
ath_regd_get_band_ctl t#u32 ath_regd_get_band_ctl ( s#ath_regulatory * , e#ieee80211_band ) 

/* drivers/net/wireless/atmel.o */
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
atmel_open int atmel_open ( s#net_device * ) 
t#AtmelFWType typedef enum { ATMEL_FW_TYPE_NONE = 0 , ATMEL_FW_TYPE_502 , ATMEL_FW_TYPE_502D , ATMEL_FW_TYPE_502E , ATMEL_FW_TYPE_502_3COM , ATMEL_FW_TYPE_504 , ATMEL_FW_TYPE_504_2958 , ATMEL_FW_TYPE_504A_2958 , ATMEL_FW_TYPE_506 } AtmelFWType 
init_atmel_card s#net_device * init_atmel_card ( unsigned short , unsigned long , const t#AtmelFWType , s#device * , int ( * ) ( void * ) , void * ) 
stop_atmel_card void stop_atmel_card ( s#net_device * ) 

/* drivers/net/wireless/hostap/hostap_80211_rx.o */
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s#hostap_80211_rx_status struct hostap_80211_rx_status { t#u32 mac_time ; t#u8 signal ; t#u8 noise ; t#u16 rate ; } 
hostap_80211_rx void hostap_80211_rx ( s#net_device * , s#sk_buff * , s#hostap_80211_rx_status * ) 

/* drivers/net/wireless/hostap/hostap_80211_tx.o */
s##sock
s##libipw_device
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
hostap_master_start_xmit t#netdev_tx_t hostap_master_start_xmit ( s#sk_buff * , s#net_device * ) 

/* drivers/net/wireless/hostap/hostap_ap.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s#lib80211_crypto_ops struct lib80211_crypto_ops { const char * name ; s#list_head list ; void * ( * init ) ( int ) ; void ( * deinit ) ( void * ) ; int ( * build_iv ) ( s#sk_buff * , int , t#u8 * , int , void * ) ; int ( * encrypt_mpdu ) ( s#sk_buff * , int , void * ) ; int ( * decrypt_mpdu ) ( s#sk_buff * , int , void * ) ; int ( * encrypt_msdu ) ( s#sk_buff * , int , void * ) ; int ( * decrypt_msdu ) ( s#sk_buff * , int , int , void * ) ; int ( * set_key ) ( void * , int , t#u8 * , void * ) ; int ( * get_key ) ( void * , int , t#u8 * , void * ) ; char * ( * print_stats ) ( char * , void * ) ; unsigned long ( * get_flags ) ( void * ) ; unsigned long ( * set_flags ) ( unsigned long , void * ) ; int extra_mpdu_prefix_len , extra_mpdu_postfix_len ; int extra_msdu_prefix_len , extra_msdu_postfix_len ; s#module * owner ; } 
s#lib80211_crypt_data struct lib80211_crypt_data { s#list_head list ; s#lib80211_crypto_ops * ops ; void * priv ; t#atomic_t refcnt ; } 
s#sta_info struct sta_info { s#list_head list ; s#sta_info * hnext ; t#atomic_t users ; s#proc_dir_entry * proc ; t#u8 addr [ 6 ] ; t#u16 aid ; t#u32 flags ; t#u16 capability ; t#u16 listen_interval ; t#u8 supported_rates [ 32 ] ; unsigned long last_auth ; unsigned long last_assoc ; unsigned long last_rx ; unsigned long last_tx ; unsigned long rx_packets , tx_packets ; unsigned long rx_bytes , tx_bytes ; s#sk_buff_head tx_buf ; t#s8 last_rx_silence ; t#s8 last_rx_signal ; t#u8 last_rx_rate ; t#u8 last_rx_updated ; t#u8 tx_supp_rates ; t#u8 tx_rate ; t#u8 tx_rate_idx ; t#u8 tx_max_rate ; t#u32 tx_count [ 4 ] ; t#u32 rx_count [ 4 ] ; t#u32 tx_since_last_failure ; t#u32 tx_consecutive_exc ; s#lib80211_crypt_data * crypt ; int ap ; t#local_info_t * local ; union { struct { char * challenge ; } sta ; struct { int ssid_len ; unsigned char ssid [ 32 + 1 ] ; int channel ; unsigned long last_beacon ; } ap ; } u ; s#timer_list timer ; enum { STA_NULLFUNC = 0 , STA_DISASSOC , STA_DEAUTH } timeout_next ; } 
t#ap_policy_enum typedef enum { AP_OTHER_AP_SKIP_ALL = 0 , AP_OTHER_AP_SAME_SSID = 1 , AP_OTHER_AP_ALL = 2 , AP_OTHER_AP_EVEN_IBSS = 3 } ap_policy_enum 
s#mac_restrictions struct mac_restrictions { enum { MAC_POLICY_OPEN = 0 , MAC_POLICY_ALLOW , MAC_POLICY_DENY } policy ; unsigned int entries ; s#list_head mac_list ; t#spinlock_t lock ; } 
s#add_sta_proc_data struct add_sta_proc_data { t#u8 addr [ 6 ] ; s#add_sta_proc_data * next ; } 
t#wds_oper_type typedef enum { WDS_ADD , WDS_DEL } wds_oper_type 
s#wds_oper_data struct wds_oper_data { t#wds_oper_type type ; t#u8 addr [ 6 ] ; s#wds_oper_data * next ; } 
s#ap_data struct ap_data { int initialized ; t#local_info_t * local ; int bridge_packets ; unsigned int bridged_unicast ; unsigned int bridged_multicast ; unsigned int tx_drop_nonassoc ; int nullfunc_ack ; t#spinlock_t sta_table_lock ; int num_sta ; s#list_head sta_list ; s#sta_info * sta_hash [ 256 ] ; s#proc_dir_entry * proc ; t#ap_policy_enum ap_policy ; unsigned int max_inactivity ; int autom_ap_wds ; s#mac_restrictions mac_restrictions ; int last_tx_rate ; s#work_struct add_sta_proc_queue ; s#add_sta_proc_data * add_sta_proc_entries ; s#work_struct wds_oper_queue ; s#wds_oper_data * wds_oper_entries ; t#u16 tx_callback_idx ; s#sta_info * sta_aid [ 128 ] ; t#u16 tx_callback_auth , tx_callback_assoc , tx_callback_poll ; s#lib80211_crypto_ops * crypt ; void * crypt_priv ; } 
s#comm_tallies_sums struct comm_tallies_sums { unsigned int tx_unicast_frames ; unsigned int tx_multicast_frames ; unsigned int tx_fragments ; unsigned int tx_unicast_octets ; unsigned int tx_multicast_octets ; unsigned int tx_deferred_transmissions ; unsigned int tx_single_retry_frames ; unsigned int tx_multiple_retry_frames ; unsigned int tx_retry_limit_exceeded ; unsigned int tx_discards ; unsigned int rx_unicast_frames ; unsigned int rx_multicast_frames ; unsigned int rx_fragments ; unsigned int rx_unicast_octets ; unsigned int rx_multicast_octets ; unsigned int rx_fcs_errors ; unsigned int rx_discards_no_buffer ; unsigned int tx_discards_wrong_sa ; unsigned int rx_discards_wep_undecryptable ; unsigned int rx_message_in_msg_fragments ; unsigned int rx_message_in_bad_msg_fragments ; } 
s#lib80211_crypt_info struct lib80211_crypt_info { char * name ; t#spinlock_t * lock ; s#lib80211_crypt_data * crypt [ 4 ] ; int tx_keyidx ; s#list_head crypt_deinit_list ; s#timer_list crypt_deinit_timer ; int crypt_quiesced ; } 
s#prism2_frag_entry struct prism2_frag_entry { unsigned long first_frag_time ; unsigned int seq ; unsigned int last_frag ; s#sk_buff * skb ; t#u8 src_addr [ 6 ] ; t#u8 dst_addr [ 6 ] ; } 
s#hfa384x_regs struct hfa384x_regs { t#u16 cmd ; t#u16 evstat ; t#u16 offset0 ; t#u16 offset1 ; t#u16 swsupport0 ; } 
s#prism2_download_area struct prism2_download_area { t#u32 addr ; t#u32 len ; void * ptr ; } 
s#prism2_download_param struct prism2_download_param { t#u32 dl_cmd ; t#u32 start_addr ; t#u32 num_areas ; s#prism2_download_area data [ 0 ] ; } 
s#prism2_helper_functions struct prism2_helper_functions { int ( * card_present ) ( t#local_info_t * ) ; void ( * cor_sreset ) ( t#local_info_t * ) ; void ( * genesis_reset ) ( t#local_info_t * , int ) ; int ( * cmd ) ( s#net_device * , t#u16 , t#u16 , t#u16 * , t#u16 * ) ; void ( * read_regs ) ( s#net_device * , s#hfa384x_regs * ) ; int ( * get_rid ) ( s#net_device * , t#u16 , void * , int , int ) ; int ( * set_rid ) ( s#net_device * , t#u16 , void * , int ) ; int ( * hw_enable ) ( s#net_device * , int ) ; int ( * hw_config ) ( s#net_device * , int ) ; void ( * hw_reset ) ( s#net_device * ) ; void ( * hw_shutdown ) ( s#net_device * , int ) ; int ( * reset_port ) ( s#net_device * ) ; void ( * schedule_reset ) ( t#local_info_t * ) ; int ( * download ) ( t#local_info_t * , s#prism2_download_param * ) ; int ( * tx ) ( s#sk_buff * , s#net_device * ) ; int ( * set_tim ) ( s#net_device * , int , int ) ; int ( * read_aux ) ( s#net_device * , unsigned , int , t#u8 * ) ; int need_tx_headroom ; enum { HOSTAP_HW_PCCARD , HOSTAP_HW_PLX , HOSTAP_HW_PCI } hw_type ; } 
s#hostap_tx_callback_info struct hostap_tx_callback_info { t#u16 idx ; void ( * func ) ( s#sk_buff * , int , void * ) ; void * data ; s#hostap_tx_callback_info * next ; } 
s#hfa384x_hostscan_result struct hfa384x_hostscan_result { t#__le16 chid ; t#__le16 anl ; t#__le16 sl ; t#u8 bssid [ 6 ] ; t#__le16 beacon_interval ; t#__le16 capability ; t#__le16 ssid_len ; t#u8 ssid [ 32 ] ; t#u8 sup_rates [ 10 ] ; t#__le16 rate ; t#__le16 atim ; } 
s#prism2_download_data_area struct prism2_download_data_area { t#u32 addr ; t#u32 len ; t#u8 * data ; } 
s#prism2_download_data struct prism2_download_data { t#u32 dl_cmd ; t#u32 start_addr ; t#u32 num_areas ; s#prism2_download_data_area data [ 0 ] ; } 
s#local_info struct local_info { s#module * hw_module ; int card_idx ; int dev_enabled ; int master_dev_auto_open ; int num_dev_open ; s#net_device * dev ; s#net_device * ddev ; s#list_head hostap_interfaces ; t#rwlock_t iface_lock ; t#spinlock_t cmdlock , baplock , lock ; s#mutex rid_bap_mtx ; t#u16 infofid ; t#spinlock_t txfidlock ; int txfid_len ; t#u16 txfid [ 8 ] ; t#u16 intransmitfid [ 8 ] ; int next_txfid ; int next_alloc ; unsigned long bits ; s#ap_data * ap ; char essid [ 32 + 1 ] ; char name [ 32 + 1 ] ; int name_set ; t#u16 channel_mask ; t#u16 scan_channel_mask ; s#comm_tallies_sums comm_tallies ; s#proc_dir_entry * proc ; int iw_mode ; int pseudo_adhoc ; char bssid [ 6 ] ; int channel ; int beacon_int ; int dtim_period ; int mtu ; int frame_dump ; int fw_tx_rate_control ; t#u16 tx_rate_control ; t#u16 basic_rates ; int hw_resetting ; int hw_ready ; int hw_reset_tries ; int hw_downloading ; int shutdown ; int pri_only ; int no_pri ; int sram_type ; enum { PRISM2_TXPOWER_AUTO = 0 , PRISM2_TXPOWER_OFF , PRISM2_TXPOWER_FIXED , PRISM2_TXPOWER_UNKNOWN } txpower_type ; int txpower ; s#list_head cmd_queue ; int cmd_queue_len ; s#work_struct reset_queue ; int is_promisc ; s#work_struct set_multicast_list_queue ; s#work_struct set_tim_queue ; s#list_head set_tim_list ; t#spinlock_t set_tim_lock ; int wds_max_connections ; int wds_connections ; t#u32 wds_type ; t#u16 tx_control ; int manual_retry_count ; s#iw_statistics wstats ; unsigned long scan_timestamp ; enum { PRISM2_MONITOR_80211 = 0 , PRISM2_MONITOR_PRISM = 1 , PRISM2_MONITOR_CAPHDR = 2 , PRISM2_MONITOR_RADIOTAP = 3 } monitor_type ; int monitor_allow_fcserr ; int hostapd ; int hostapd_sta ; s#net_device * apdev ; s#net_device_stats apdevstats ; char assoc_ap_addr [ 6 ] ; s#net_device * stadev ; s#net_device_stats stadevstats ; s#lib80211_crypt_info crypt_info ; int open_wep ; int host_encrypt ; int host_decrypt ; int privacy_invoked ; int fw_encrypt_ok ; int bcrx_sta_key ; s#prism2_frag_entry frag_cache [ 4 ] ; unsigned int frag_next_idx ; int ieee_802_1x ; int antsel_tx , antsel_rx ; int rts_threshold ; int fragm_threshold ; int auth_algs ; int enh_sec ; int tallies32 ; s#prism2_helper_functions * func ; t#u8 * pda ; int fw_ap ; t#u32 sta_fw_ver ; s#tasklet_struct bap_tasklet ; s#tasklet_struct info_tasklet ; s#sk_buff_head info_list ; s#hostap_tx_callback_info * tx_callback ; s#tasklet_struct rx_tasklet ; s#sk_buff_head rx_list ; s#tasklet_struct sta_tx_exc_tasklet ; s#sk_buff_head sta_tx_exc_list ; int host_roaming ; unsigned long last_join_time ; s#hfa384x_hostscan_result * last_scan_results ; int last_scan_results_count ; enum { PRISM2_SCAN , PRISM2_HOSTSCAN } last_scan_type ; s#work_struct info_queue ; unsigned long pending_info ; int prev_link_status ; int prev_linkstatus_connected ; t#u8 preferred_ap [ 6 ] ; t#wait_queue_head_t hostscan_wq ; s#timer_list passive_scan_timer ; int passive_scan_interval ; int passive_scan_channel ; enum { PASSIVE_SCAN_WAIT , PASSIVE_SCAN_LISTEN } passive_scan_state ; s#timer_list tick_timer ; unsigned long last_tick_timer ; unsigned int sw_tick_stuck ; unsigned long last_comms_qual_update ; int comms_qual ; int avg_signal ; int avg_noise ; s#work_struct comms_qual_update ; int rssi_to_dBm ; s#list_head bss_list ; int num_bss_info ; int wpa ; int tkip_countermeasures ; int drop_unencrypted ; t#u8 * generic_elem ; t#size_t generic_elem_len ; s#prism2_download_data * dl_pri ; s#prism2_download_data * dl_sec ; void * hw_priv ; } 
t#local_info_t typedef s#local_info local_info_t 
hostap_init_data void hostap_init_data ( t#local_info_t * ) 
hostap_init_ap_proc void hostap_init_ap_proc ( t#local_info_t * ) 
hostap_free_data void hostap_free_data ( s#ap_data * ) 
hostap_check_sta_fw_version void hostap_check_sta_fw_version ( s#ap_data * , int ) 
hostap_handle_sta_tx_exc void hostap_handle_sta_tx_exc ( t#local_info_t * , s#sk_buff * ) 

/* drivers/net/wireless/hostap/hostap_info.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
hostap_info_init void hostap_info_init ( t#local_info_t * ) 
hostap_info_process void hostap_info_process ( t#local_info_t * , s#sk_buff * ) 

/* drivers/net/wireless/hostap/hostap_main.o */
s##sock
s##libipw_device
s##neigh_parms
s##vlan_group
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
s##neighbour
hostap_80211_ops extern const s#header_ops hostap_80211_ops 
hostap_set_word int hostap_set_word ( s#net_device * , int , t#u16 ) 
hostap_set_string int hostap_set_string ( s#net_device * , int , const char * ) 
hostap_get_porttype t#u16 hostap_get_porttype ( t#local_info_t * ) 
hostap_set_encryption int hostap_set_encryption ( t#local_info_t * ) 
hostap_set_antsel int hostap_set_antsel ( t#local_info_t * ) 
hostap_set_roaming int hostap_set_roaming ( t#local_info_t * ) 
hostap_set_auth_algs int hostap_set_auth_algs ( t#local_info_t * ) 
s#hfa384x_rx_frame struct hfa384x_rx_frame { t#__le16 status ; t#__le32 time ; t#u8 silence ; t#u8 signal ; t#u8 rate ; t#u8 rxflow ; t#__le32 reserved ; t#__le16 frame_control ; t#__le16 duration_id ; t#u8 addr1 [ 6 ] ; t#u8 addr2 [ 6 ] ; t#u8 addr3 [ 6 ] ; t#__le16 seq_ctrl ; t#u8 addr4 [ 6 ] ; t#__le16 data_len ; t#u8 dst_addr [ 6 ] ; t#u8 src_addr [ 6 ] ; t#__be16 len ; } 
hostap_dump_rx_header void hostap_dump_rx_header ( const char * , const s#hfa384x_rx_frame * ) 
s#hfa384x_tx_frame struct hfa384x_tx_frame { t#__le16 status ; t#__le16 reserved1 ; t#__le16 reserved2 ; t#__le32 sw_support ; t#u8 retry_count ; t#u8 tx_rate ; t#__le16 tx_control ; t#__le16 frame_control ; t#__le16 duration_id ; t#u8 addr1 [ 6 ] ; t#u8 addr2 [ 6 ] ; t#u8 addr3 [ 6 ] ; t#__le16 seq_ctrl ; t#u8 addr4 [ 6 ] ; t#__le16 data_len ; t#u8 dst_addr [ 6 ] ; t#u8 src_addr [ 6 ] ; t#__be16 len ; } 
hostap_dump_tx_header void hostap_dump_tx_header ( const char * , const s#hfa384x_tx_frame * ) 
hostap_80211_get_hdrlen int hostap_80211_get_hdrlen ( t#__le16 ) 
hostap_setup_dev void hostap_setup_dev ( s#net_device * , t#local_info_t * , int ) 
hostap_set_multicast_list_queue void hostap_set_multicast_list_queue ( s#work_struct * ) 
hostap_set_hostapd int hostap_set_hostapd ( t#local_info_t * , int , int ) 
hostap_set_hostapd_sta int hostap_set_hostapd_sta ( t#local_info_t * , int , int ) 
hostap_add_interface s#net_device * hostap_add_interface ( s#local_info * , int , int , const char * , const char * ) 
hostap_remove_interface void hostap_remove_interface ( s#net_device * , int , int ) 
prism2_update_comms_qual int prism2_update_comms_qual ( s#net_device * ) 

/* drivers/net/wireless/hostap/hostap_proc.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
hostap_init_proc void hostap_init_proc ( t#local_info_t * ) 
hostap_remove_proc void hostap_remove_proc ( t#local_info_t * ) 

/* drivers/net/wireless/ipw2x00/libipw_geo.o */
s#libipw_channel struct libipw_channel { t#u32 freq ; t#u8 channel ; t#u8 flags ; t#u8 max_power ; } 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s#libipw_security struct libipw_security { t#u16 active_key : 2 , enabled : 1 , unicast_uses_group : 1 , encrypt : 1 ; t#u8 auth_mode ; t#u8 encode_alg [ 4 ] ; t#u8 key_sizes [ 4 ] ; t#u8 keys [ 4 ] [ 32 ] ; t#u8 level ; t#u16 flags ; } 
s#libipw_stats struct libipw_stats { unsigned int tx_unicast_frames ; unsigned int tx_multicast_frames ; unsigned int tx_fragments ; unsigned int tx_unicast_octets ; unsigned int tx_multicast_octets ; unsigned int tx_deferred_transmissions ; unsigned int tx_single_retry_frames ; unsigned int tx_multiple_retry_frames ; unsigned int tx_retry_limit_exceeded ; unsigned int tx_discards ; unsigned int rx_unicast_frames ; unsigned int rx_multicast_frames ; unsigned int rx_fragments ; unsigned int rx_unicast_octets ; unsigned int rx_multicast_octets ; unsigned int rx_fcs_errors ; unsigned int rx_discards_no_buffer ; unsigned int tx_discards_wrong_sa ; unsigned int rx_discards_undecryptable ; unsigned int rx_message_in_msg_fragments ; unsigned int rx_message_in_bad_msg_fragments ; } 
s#libipw_geo struct libipw_geo { t#u8 name [ 4 ] ; t#u8 bg_channels ; t#u8 a_channels ; s#libipw_channel bg [ ( 14 - 1 + 1 ) ] ; s#libipw_channel a [ ( 165 - 34 + 1 ) ] ; } 
s#libipw_qos_parameters struct libipw_qos_parameters { t#__le16 cw_min [ 4 ] ; t#__le16 cw_max [ 4 ] ; t#u8 aifs [ 4 ] ; t#u8 flag [ 4 ] ; t#__le16 tx_op_limit [ 4 ] ; } 
s#libipw_qos_data struct libipw_qos_data { s#libipw_qos_parameters parameters ; int active ; int supported ; t#u8 param_count ; t#u8 old_param_count ; } 
s#libipw_rx_stats struct libipw_rx_stats { t#u32 mac_time ; t#s8 rssi ; t#u8 signal ; t#u8 noise ; t#u16 rate ; t#u8 received_channel ; t#u8 control ; t#u8 mask ; t#u8 freq ; t#u16 len ; t#u64 tsf ; t#u32 beacon_time ; } 
s#libipw_tim_parameters struct libipw_tim_parameters { t#u8 tim_count ; t#u8 tim_period ; } 
s#libipw_tpc_report struct libipw_tpc_report { t#u8 transmit_power ; t#u8 link_margin ; } 
s#libipw_info_element struct libipw_info_element { t#u8 id ; t#u8 len ; t#u8 data [ 0 ] ; } 
s#libipw_channel_map struct libipw_channel_map { t#u8 channel ; t#u8 map ; } 
s#libipw_ibss_dfs struct libipw_ibss_dfs { s#libipw_info_element ie ; t#u8 owner [ 6 ] ; t#u8 recovery_interval ; s#libipw_channel_map channel_map [ 0 ] ; } 
s#libipw_csa struct libipw_csa { t#u8 mode ; t#u8 channel ; t#u8 count ; } 
s#libipw_quiet struct libipw_quiet { t#u8 count ; t#u8 period ; t#u8 duration ; t#u8 offset ; } 
s#libipw_network struct libipw_network { t#u8 bssid [ 6 ] ; t#u8 channel ; t#u8 ssid [ 32 + 1 ] ; t#u8 ssid_len ; s#libipw_qos_data qos_data ; s#libipw_rx_stats stats ; t#u16 capability ; t#u8 rates [ ( ( u8 ) 12 ) ] ; t#u8 rates_len ; t#u8 rates_ex [ ( ( u8 ) 16 ) ] ; t#u8 rates_ex_len ; unsigned long last_scanned ; t#u8 mode ; t#u32 flags ; t#u32 last_associate ; t#u32 time_stamp [ 2 ] ; t#u16 beacon_interval ; t#u16 listen_interval ; t#u16 atim_window ; t#u8 erp_value ; t#u8 wpa_ie [ 64 ] ; t#size_t wpa_ie_len ; t#u8 rsn_ie [ 64 ] ; t#size_t rsn_ie_len ; s#libipw_tim_parameters tim ; t#u8 power_constraint ; s#libipw_tpc_report tpc_report ; s#libipw_ibss_dfs * ibss_dfs ; s#libipw_csa csa ; s#libipw_quiet quiet ; s#list_head list ; } 
s#libipw_frag_entry struct libipw_frag_entry { unsigned long first_frag_time ; unsigned int seq ; unsigned int last_frag ; s#sk_buff * skb ; t#u8 src_addr [ 6 ] ; t#u8 dst_addr [ 6 ] ; } 
e#libipw_state enum libipw_state { LIBIPW_UNINITIALIZED = 0 , LIBIPW_INITIALIZED , LIBIPW_ASSOCIATING , LIBIPW_ASSOCIATED , LIBIPW_AUTHENTICATING , LIBIPW_AUTHENTICATED , LIBIPW_SHUTDOWN } 
s#libipw_txb struct libipw_txb { t#u8 nr_frags ; t#u8 encrypted ; t#u8 rts_included ; t#u8 reserved ; t#u16 frag_size ; t#u16 payload_size ; s#sk_buff * fragments [ 0 ] ; } 
s#libipw_hdr_3addr struct libipw_hdr_3addr { t#__le16 frame_ctl ; t#__le16 duration_id ; t#u8 addr1 [ 6 ] ; t#u8 addr2 [ 6 ] ; t#u8 addr3 [ 6 ] ; t#__le16 seq_ctl ; t#u8 payload [ 0 ] ; } 
s#libipw_auth struct libipw_auth { s#libipw_hdr_3addr header ; t#__le16 algorithm ; t#__le16 transaction ; t#__le16 status ; s#libipw_info_element info_element [ 0 ] ; } 
s#libipw_disassoc struct libipw_disassoc { s#libipw_hdr_3addr header ; t#__le16 reason ; } 
s#libipw_action_exchange struct libipw_action_exchange { t#u8 token ; s#libipw_info_element info_element [ 0 ] ; } 
s#libipw_channel_switch struct libipw_channel_switch { t#u8 id ; t#u8 len ; t#u8 mode ; t#u8 channel ; t#u8 count ; } 
s#libipw_action struct libipw_action { s#libipw_hdr_3addr header ; t#u8 category ; t#u8 action ; union { s#libipw_action_exchange exchange ; s#libipw_channel_switch channel_switch ; } format ; } 
s#libipw_probe_response struct libipw_probe_response { s#libipw_hdr_3addr header ; t#__le32 time_stamp [ 2 ] ; t#__le16 beacon_interval ; t#__le16 capability ; s#libipw_info_element info_element [ 0 ] ; } 
s#libipw_probe_request struct libipw_probe_request { s#libipw_hdr_3addr header ; s#libipw_info_element info_element [ 0 ] ; } 
s#libipw_assoc_response struct libipw_assoc_response { s#libipw_hdr_3addr header ; t#__le16 capability ; t#__le16 status ; t#__le16 aid ; s#libipw_info_element info_element [ 0 ] ; } 
s#libipw_reassoc_request struct libipw_reassoc_request { s#libipw_hdr_3addr header ; t#__le16 capability ; t#__le16 listen_interval ; t#u8 current_ap [ 6 ] ; s#libipw_info_element info_element [ 0 ] ; } 
s#libipw_device struct libipw_device { s#net_device * dev ; s#libipw_security sec ; s#libipw_stats ieee_stats ; s#libipw_geo geo ; s#list_head network_free_list ; s#list_head network_list ; s#libipw_network * networks ; int scans ; int scan_age ; int iw_mode ; s#iw_spy_data spy_data ; t#spinlock_t lock ; int tx_headroom ; t#u32 config ; int open_wep ; int reset_on_keychange ; int host_encrypt ; int host_encrypt_msdu ; int host_decrypt ; int host_mc_decrypt ; int host_strip_iv_icv ; int host_open_frag ; int host_build_iv ; int ieee802_1x ; int wpa_enabled ; int drop_unencrypted ; int privacy_invoked ; t#size_t wpa_ie_len ; t#u8 * wpa_ie ; s#lib80211_crypt_info crypt_info ; int bcrx_sta_key ; s#libipw_frag_entry frag_cache [ 4 ] ; unsigned int frag_next_idx ; t#u16 fts ; t#u16 rts ; t#u8 bssid [ 6 ] ; e#libipw_state state ; int mode ; int modulation ; int freq_band ; int abg_true ; int perfect_rssi ; int worst_rssi ; t#u16 prev_seq_ctl ; void ( * set_security ) ( s#net_device * , s#libipw_security * ) ; t#netdev_tx_t ( * hard_start_xmit ) ( s#libipw_txb * , s#net_device * , int ) ; int ( * reset_port ) ( s#net_device * ) ; int ( * is_queue_full ) ( s#net_device * , int ) ; int ( * handle_management ) ( s#net_device * , s#libipw_network * , t#u16 ) ; int ( * is_qos_active ) ( s#net_device * , s#sk_buff * ) ; int ( * handle_auth ) ( s#net_device * , s#libipw_auth * ) ; int ( * handle_deauth ) ( s#net_device * , s#libipw_disassoc * ) ; int ( * handle_action ) ( s#net_device * , s#libipw_action * , s#libipw_rx_stats * ) ; int ( * handle_disassoc ) ( s#net_device * , s#libipw_disassoc * ) ; int ( * handle_beacon ) ( s#net_device * , s#libipw_probe_response * , s#libipw_network * ) ; int ( * handle_probe_response ) ( s#net_device * , s#libipw_probe_response * , s#libipw_network * ) ; int ( * handle_probe_request ) ( s#net_device * , s#libipw_probe_request * , s#libipw_rx_stats * ) ; int ( * handle_assoc_response ) ( s#net_device * , s#libipw_assoc_response * , s#libipw_network * ) ; int ( * handle_assoc_request ) ( s#net_device * ) ; int ( * handle_reassoc_request ) ( s#net_device * , s#libipw_reassoc_request * ) ; t#u8 priv [ 0 ] ; } 
libipw_get_channel extern const s#libipw_channel * libipw_get_channel ( s#libipw_device * , t#u8 ) 
libipw_get_channel_flags extern t#u8 libipw_get_channel_flags ( s#libipw_device * , t#u8 ) 
libipw_is_valid_channel extern int libipw_is_valid_channel ( s#libipw_device * , t#u8 ) 
libipw_freq_to_channel extern t#u8 libipw_freq_to_channel ( s#libipw_device * , t#u32 ) 
libipw_channel_to_freq extern t#u32 libipw_channel_to_freq ( s#libipw_device * , t#u8 ) 
libipw_channel_to_index extern int libipw_channel_to_index ( s#libipw_device * , t#u8 ) 
libipw_set_geo extern int libipw_set_geo ( s#libipw_device * , const s#libipw_geo * ) 
libipw_get_geo extern const s#libipw_geo * libipw_get_geo ( s#libipw_device * ) 

/* drivers/net/wireless/ipw2x00/libipw_module.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
libipw_networks_age extern void libipw_networks_age ( s#libipw_device * , unsigned long ) 
libipw_change_mtu extern int libipw_change_mtu ( s#net_device * , int ) 
libipw_debug_level extern t#u32 libipw_debug_level 
alloc_ieee80211 extern s#net_device * alloc_ieee80211 ( int ) 
free_ieee80211 extern void free_ieee80211 ( s#net_device * ) 

/* drivers/net/wireless/ipw2x00/libipw_rx.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
libipw_rx_any extern void libipw_rx_any ( s#libipw_device * , s#sk_buff * , s#libipw_rx_stats * ) 
s#libipw_hdr_4addr struct libipw_hdr_4addr { t#__le16 frame_ctl ; t#__le16 duration_id ; t#u8 addr1 [ 6 ] ; t#u8 addr2 [ 6 ] ; t#u8 addr3 [ 6 ] ; t#__le16 seq_ctl ; t#u8 addr4 [ 6 ] ; t#u8 payload [ 0 ] ; } 
libipw_rx_mgt extern void libipw_rx_mgt ( s#libipw_device * , s#libipw_hdr_4addr * , s#libipw_rx_stats * ) 
libipw_rx extern int libipw_rx ( s#libipw_device * , s#sk_buff * , s#libipw_rx_stats * ) 

/* drivers/net/wireless/ipw2x00/libipw_tx.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
libipw_xmit extern t#netdev_tx_t libipw_xmit ( s#sk_buff * , s#net_device * ) 
libipw_txb_free extern void libipw_txb_free ( s#libipw_txb * ) 

/* drivers/net/wireless/ipw2x00/libipw_wx.o */
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
libipw_wx_set_encodeext extern int libipw_wx_set_encodeext ( s#libipw_device * , s#iw_request_info * , u#iwreq_data * , char * ) 
libipw_wx_get_encodeext extern int libipw_wx_get_encodeext ( s#libipw_device * , s#iw_request_info * , u#iwreq_data * , char * ) 
libipw_wx_get_scan extern int libipw_wx_get_scan ( s#libipw_device * , s#iw_request_info * , u#iwreq_data * , char * ) 
libipw_wx_set_encode extern int libipw_wx_set_encode ( s#libipw_device * , s#iw_request_info * , u#iwreq_data * , char * ) 
libipw_wx_get_encode extern int libipw_wx_get_encode ( s#libipw_device * , s#iw_request_info * , u#iwreq_data * , char * ) 

/* drivers/net/wireless/iwlwifi/iwl-calib.o */
e#nl80211_channel_type enum nl80211_channel_type { NL80211_CHAN_NO_HT , NL80211_CHAN_HT20 , NL80211_CHAN_HT40MINUS , NL80211_CHAN_HT40PLUS } 
s#ieee80211_conf struct ieee80211_conf { t#u32 flags ; int power_level , dynamic_ps_timeout ; int max_sleep_period ; t#u16 listen_interval ; t#u8 long_frame_max_tx_count , short_frame_max_tx_count ; s#ieee80211_channel * channel ; e#nl80211_channel_type channel_type ; } 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s#ieee80211_hw struct ieee80211_hw { s#ieee80211_conf conf ; s#wiphy * wiphy ; const char * rate_control_algorithm ; void * priv ; t#u32 flags ; unsigned int extra_tx_headroom ; int channel_change_time ; int vif_data_size ; int sta_data_size ; t#u16 queues ; t#u16 max_listen_interval ; t#s8 max_signal ; t#u8 max_rates ; t#u8 max_rate_tries ; } 
s#iwl_ucode_header struct iwl_ucode_header { t#__le32 ver ; union { struct { t#__le32 inst_size ; t#__le32 data_size ; t#__le32 init_size ; t#__le32 init_data_size ; t#__le32 boot_size ; t#u8 data [ 0 ] ; } v1 ; struct { t#__le32 build ; t#__le32 inst_size ; t#__le32 data_size ; t#__le32 init_size ; t#__le32 init_data_size ; t#__le32 boot_size ; t#u8 data [ 0 ] ; } v2 ; } u ; } 
s#iwl_ucode_ops struct iwl_ucode_ops { t#u32 ( * get_header_size ) ( t#u32 ) ; t#u32 ( * get_build ) ( const s#iwl_ucode_header * , t#u32 ) ; t#u32 ( * get_inst_size ) ( const s#iwl_ucode_header * , t#u32 ) ; t#u32 ( * get_data_size ) ( const s#iwl_ucode_header * , t#u32 ) ; t#u32 ( * get_init_size ) ( const s#iwl_ucode_header * , t#u32 ) ; t#u32 ( * get_init_data_size ) ( const s#iwl_ucode_header * , t#u32 ) ; t#u32 ( * get_boot_size ) ( const s#iwl_ucode_header * , t#u32 ) ; t#u8 * ( * get_data ) ( const s#iwl_ucode_header * , t#u32 ) ; } 
s#iwl_queue struct iwl_queue { int n_bd ; int write_ptr ; int read_ptr ; t#dma_addr_t dma_addr ; int n_window ; t#u32 id ; int low_mark ; int high_mark ; } 
s#iwl_cmd_header struct iwl_cmd_header { t#u8 cmd ; t#u8 flags ; t#__le16 sequence ; t#u8 data [ 0 ] ; } 
s#iwl_dram_scratch struct iwl_dram_scratch { t#u8 try_cnt ; t#u8 bt_kill_cnt ; t#__le16 reserved ; } 
s#ieee80211_hdr struct ieee80211_hdr { t#__le16 frame_control ; t#__le16 duration_id ; t#u8 addr1 [ 6 ] ; t#u8 addr2 [ 6 ] ; t#u8 addr3 [ 6 ] ; t#__le16 seq_ctrl ; t#u8 addr4 [ 6 ] ; } 
s#iwl_tx_cmd struct iwl_tx_cmd { t#__le16 len ; t#__le16 next_frame_len ; t#__le32 tx_flags ; s#iwl_dram_scratch scratch ; t#__le32 rate_n_flags ; t#u8 sta_id ; t#u8 sec_ctl ; t#u8 initial_rate_index ; t#u8 reserved ; t#u8 key [ 16 ] ; t#__le16 next_frame_flags ; t#__le16 reserved2 ; union { t#__le32 life_time ; t#__le32 attempt ; } stop_time ; t#__le32 dram_lsb_ptr ; t#u8 dram_msb_ptr ; t#u8 rts_retry_limit ; t#u8 data_retry_limit ; t#u8 tid_tspec ; union { t#__le16 pm_frame_timeout ; t#__le16 attempt_duration ; } timeout ; t#__le16 driver_txop ; t#u8 payload [ 0 ] ; s#ieee80211_hdr hdr [ 0 ] ; } 
s#iwl_device_cmd struct iwl_device_cmd { s#iwl_cmd_header hdr ; union { t#u32 flags ; t#u8 val8 ; t#u16 val16 ; t#u32 val32 ; s#iwl_tx_cmd tx ; t#u8 payload [ 320 ] ; } __attribute__ ( ( packed ) ) cmd ; } 
s#iwl_host_cmd struct iwl_host_cmd { const void * data ; s#sk_buff * reply_skb ; void ( * callback ) ( s#iwl_priv * , s#iwl_device_cmd * , s#sk_buff * ) ; t#u32 flags ; t#u16 len ; t#u8 id ; } 
s#iwl_cmd_meta struct iwl_cmd_meta { s#iwl_host_cmd * source ; void ( * callback ) ( s#iwl_priv * , s#iwl_device_cmd * , s#sk_buff * ) ; t#u32 flags ; t#dma_addr_t mapping ; t#__u32 len ; } 
s#iwl_tx_info struct iwl_tx_info { s#sk_buff * skb [ 20 - 1 ] ; } 
s#iwl_tx_queue struct iwl_tx_queue { s#iwl_queue q ; void * tfds ; s#iwl_device_cmd * * cmd ; s#iwl_cmd_meta * meta ; s#iwl_tx_info * txb ; t#u8 need_update ; t#u8 sched_retry ; t#u8 active ; t#u8 swq_id ; } 
e#iwl_pwr_src enum iwl_pwr_src { IWL_PWR_SRC_VMAIN , IWL_PWR_SRC_VAUX , } 
s#iwl_apm_ops struct iwl_apm_ops { int ( * init ) ( s#iwl_priv * ) ; int ( * reset ) ( s#iwl_priv * ) ; void ( * stop ) ( s#iwl_priv * ) ; void ( * config ) ( s#iwl_priv * ) ; int ( * set_pwr_src ) ( s#iwl_priv * , e#iwl_pwr_src ) ; } 
s#iwl_eeprom_ops struct iwl_eeprom_ops { const t#u32 regulatory_bands [ 7 ] ; int ( * verify_signature ) ( s#iwl_priv * ) ; int ( * acquire_semaphore ) ( s#iwl_priv * ) ; void ( * release_semaphore ) ( s#iwl_priv * ) ; t#u16 ( * calib_version ) ( s#iwl_priv * ) ; const t#u8 * ( * query_addr ) ( const s#iwl_priv * , t#size_t ) ; void ( * update_enhanced_txpower ) ( s#iwl_priv * ) ; } 
s#iwl_temp_ops struct iwl_temp_ops { void ( * temperature ) ( s#iwl_priv * ) ; void ( * set_ct_kill ) ( s#iwl_priv * ) ; } 
s#iwl_lib_ops struct iwl_lib_ops { int ( * set_hw_params ) ( s#iwl_priv * ) ; void ( * txq_update_byte_cnt_tbl ) ( s#iwl_priv * , s#iwl_tx_queue * , t#u16 ) ; void ( * txq_inval_byte_cnt_tbl ) ( s#iwl_priv * , s#iwl_tx_queue * ) ; void ( * txq_set_sched ) ( s#iwl_priv * , t#u32 ) ; int ( * txq_attach_buf_to_tfd ) ( s#iwl_priv * , s#iwl_tx_queue * , t#dma_addr_t , t#u16 , t#u8 , t#u8 ) ; void ( * txq_free_tfd ) ( s#iwl_priv * , s#iwl_tx_queue * ) ; int ( * txq_init ) ( s#iwl_priv * , s#iwl_tx_queue * ) ; int ( * txq_agg_enable ) ( s#iwl_priv * , int , int , int , int , t#u16 ) ; int ( * txq_agg_disable ) ( s#iwl_priv * , t#u16 , t#u16 , t#u8 ) ; void ( * rx_handler_setup ) ( s#iwl_priv * ) ; void ( * setup_deferred_work ) ( s#iwl_priv * ) ; void ( * cancel_deferred_work ) ( s#iwl_priv * ) ; void ( * init_alive_start ) ( s#iwl_priv * ) ; int ( * alive_notify ) ( s#iwl_priv * ) ; int ( * is_valid_rtc_data_addr ) ( t#u32 ) ; int ( * load_ucode ) ( s#iwl_priv * ) ; void ( * dump_nic_event_log ) ( s#iwl_priv * ) ; void ( * dump_nic_error_log ) ( s#iwl_priv * ) ; s#iwl_apm_ops apm_ops ; int ( * send_tx_power ) ( s#iwl_priv * ) ; void ( * update_chain_flags ) ( s#iwl_priv * ) ; void ( * post_associate ) ( s#iwl_priv * ) ; void ( * config_ap ) ( s#iwl_priv * ) ; t#irqreturn_t ( * isr ) ( int , void * ) ; s#iwl_eeprom_ops eeprom_ops ; s#iwl_temp_ops temp_ops ; } 
s#iwl_hcmd_ops struct iwl_hcmd_ops { int ( * rxon_assoc ) ( s#iwl_priv * ) ; int ( * commit_rxon ) ( s#iwl_priv * ) ; void ( * set_rxon_chain ) ( s#iwl_priv * ) ; } 
s#sta_id_modify struct sta_id_modify { t#u8 addr [ 6 ] ; t#__le16 reserved1 ; t#u8 sta_id ; t#u8 modify_mask ; t#__le16 reserved2 ; } 
t#__le64 typedef t#__u64 __le64 
s#iwl_keyinfo struct iwl_keyinfo { t#__le16 key_flags ; t#u8 tkip_rx_tsc_byte2 ; t#u8 reserved1 ; t#__le16 tkip_rx_ttak [ 5 ] ; t#u8 key_offset ; t#u8 reserved2 ; t#u8 key [ 16 ] ; t#__le64 tx_secur_seq_cnt ; t#__le64 hw_tkip_mic_rx_key ; t#__le64 hw_tkip_mic_tx_key ; } 
s#iwl_addsta_cmd struct iwl_addsta_cmd { t#u8 mode ; t#u8 reserved [ 3 ] ; s#sta_id_modify sta ; s#iwl_keyinfo key ; t#__le32 station_flags ; t#__le32 station_flags_msk ; t#__le16 tid_disable_tx ; t#__le16 rate_n_flags ; t#u8 add_immediate_ba_tid ; t#u8 remove_immediate_ba_tid ; t#__le16 add_immediate_ba_ssn ; t#__le32 reserved2 ; } 
s#ieee80211_tx_rate struct ieee80211_tx_rate { t#s8 idx ; t#u8 count ; t#u8 flags ; } 
s#ieee80211_bss_conf struct ieee80211_bss_conf { const t#u8 * bssid ; t#bool assoc ; t#u16 aid ; t#bool use_cts_prot ; t#bool use_short_preamble ; t#bool use_short_slot ; t#bool enable_beacon ; t#u8 dtim_period ; t#u16 beacon_int ; t#u16 assoc_capability ; t#u64 timestamp ; t#u32 basic_rates ; t#u16 ht_operation_mode ; } 
s#ieee80211_vif struct ieee80211_vif { e#nl80211_iftype type ; s#ieee80211_bss_conf bss_conf ; t#u8 drv_priv [ 0 ] __attribute__ ( ( __aligned__ ( sizeof ( void * ) ) ) ) ; } 
e#ieee80211_key_alg enum ieee80211_key_alg { ALG_WEP , ALG_TKIP , ALG_CCMP , ALG_AES_CMAC , } 
s#ieee80211_key_conf struct ieee80211_key_conf { e#ieee80211_key_alg alg ; t#u8 icv_len ; t#u8 iv_len ; t#u8 hw_key_idx ; t#u8 flags ; t#s8 keyidx ; t#u8 keylen ; t#u8 key [ 0 ] ; } 
s#ieee80211_sta struct ieee80211_sta { t#u32 supp_rates [ IEEE80211_NUM_BANDS ] ; t#u8 addr [ 6 ] ; t#u16 aid ; s#ieee80211_sta_ht_cap ht_cap ; t#u8 drv_priv [ 0 ] __attribute__ ( ( __aligned__ ( sizeof ( void * ) ) ) ) ; } 
s#ieee80211_tx_info struct ieee80211_tx_info { t#u32 flags ; t#u8 band ; t#u8 antenna_sel_tx ; t#u8 pad [ 2 ] ; union { struct { union { struct { s#ieee80211_tx_rate rates [ 5 ] ; t#s8 rts_cts_rate_idx ; } ; unsigned long jiffies ; } ; s#ieee80211_vif * vif ; s#ieee80211_key_conf * hw_key ; s#ieee80211_sta * sta ; } control ; struct { s#ieee80211_tx_rate rates [ 5 ] ; t#u8 ampdu_ack_len ; t#u64 ampdu_ack_map ; int ack_signal ; } status ; struct { s#ieee80211_tx_rate driver_rates [ 5 ] ; void * rate_driver_data [ 24 / sizeof ( void * ) ] ; } ; void * driver_data [ 40 / sizeof ( void * ) ] ; } ; } 
s#iwl_rx_phy_res struct iwl_rx_phy_res { t#u8 non_cfg_phy_cnt ; t#u8 cfg_phy_cnt ; t#u8 stat_id ; t#u8 reserved1 ; t#__le64 timestamp ; t#__le32 beacon_time_stamp ; t#__le16 phy_flags ; t#__le16 channel ; t#u8 non_cfg_phy_buf [ 32 ] ; t#__le32 rate_n_flags ; t#__le16 byte_count ; t#__le16 reserved3 ; } 
s#iwl_hcmd_utils_ops struct iwl_hcmd_utils_ops { t#u16 ( * get_hcmd_size ) ( t#u8 , t#u16 ) ; t#u16 ( * build_addsta_hcmd ) ( const s#iwl_addsta_cmd * , t#u8 * ) ; void ( * gain_computation ) ( s#iwl_priv * , t#u32 * , t#u16 , t#u32 ) ; void ( * chain_noise_reset ) ( s#iwl_priv * ) ; void ( * rts_tx_cmd_flag ) ( s#ieee80211_tx_info * , t#__le32 * ) ; int ( * calc_rssi ) ( s#iwl_priv * , s#iwl_rx_phy_res * ) ; } 
s#iwl_ops struct iwl_ops { const s#iwl_ucode_ops * ucode ; const s#iwl_lib_ops * lib ; const s#iwl_hcmd_ops * hcmd ; const s#iwl_hcmd_utils_ops * utils ; } 
s#iwl_mod_params struct iwl_mod_params { int sw_crypto ; int disable_hw_scan ; int num_of_queues ; int num_of_ampdu_queues ; int disable_11n ; int amsdu_size_8K ; int antenna ; int restart_fw ; } 
e#iwl_pa_type enum iwl_pa_type { IWL_PA_SYSTEM = 0 , IWL_PA_HYBRID = 1 , IWL_PA_INTERNAL = 2 , } 
s#iwl_cfg struct iwl_cfg { const char * name ; const char * fw_name_pre ; const unsigned int ucode_api_max ; const unsigned int ucode_api_min ; unsigned int sku ; int eeprom_size ; t#u16 eeprom_ver ; t#u16 eeprom_calib_ver ; const s#iwl_ops * ops ; const s#iwl_mod_params * mod_params ; t#u8 valid_tx_ant ; t#u8 valid_rx_ant ; t#bool need_pll_cfg ; t#bool use_isr_legacy ; e#iwl_pa_type pa_type ; const t#u16 max_ll_items ; const t#bool shadow_ram_support ; const t#bool ht_greenfield_support ; const t#bool broken_powersave ; t#bool use_rts_for_ht ; } 
s#iwl_rx_mem_buffer struct iwl_rx_mem_buffer { t#dma_addr_t real_dma_addr ; t#dma_addr_t aligned_dma_addr ; s#sk_buff * skb ; s#list_head list ; } 
s#iwl_measurement_histogram struct iwl_measurement_histogram { t#__le32 ofdm [ 8 ] ; t#__le32 cck [ 8 ] ; } 
s#iwl_spectrum_notification struct iwl_spectrum_notification { t#u8 id ; t#u8 token ; t#u8 channel_index ; t#u8 state ; t#__le32 start_time ; t#u8 band ; t#u8 channel ; t#u8 type ; t#u8 reserved1 ; t#__le32 cca_ofdm ; t#__le32 cca_cck ; t#__le32 cca_time ; t#u8 basic_type ; t#u8 reserved2 [ 3 ] ; s#iwl_measurement_histogram histogram ; t#__le32 stop_time ; t#__le32 status ; } 
s#iwl4965_channel_tgd_info struct iwl4965_channel_tgd_info { t#u8 type ; t#s8 max_power ; } 
s#iwl4965_channel_tgh_info struct iwl4965_channel_tgh_info { t#s64 last_radar_time ; } 
s#iwl_eeprom_channel struct iwl_eeprom_channel { t#u8 flags ; t#s8 max_power_avg ; } 
s#iwl3945_tx_power struct iwl3945_tx_power { t#u8 tx_gain ; t#u8 dsp_atten ; } 
s#iwl3945_channel_power_info struct iwl3945_channel_power_info { s#iwl3945_tx_power tpc ; t#s8 power_table_index ; t#s8 base_power_index ; t#s8 requested_power ; } 
s#iwl3945_scan_power_info struct iwl3945_scan_power_info { s#iwl3945_tx_power tpc ; t#s8 power_table_index ; t#s8 requested_power ; } 
s#iwl_channel_info struct iwl_channel_info { s#iwl4965_channel_tgd_info tgd ; s#iwl4965_channel_tgh_info tgh ; s#iwl_eeprom_channel eeprom ; s#iwl_eeprom_channel ht40_eeprom ; t#u8 channel ; t#u8 flags ; t#s8 max_power_avg ; t#s8 curr_txpow ; t#s8 min_power ; t#s8 scan_power ; t#u8 group_index ; t#u8 band_index ; e#ieee80211_band band ; t#s8 ht40_max_power_avg ; t#s8 ht40_curr_txpow ; t#s8 ht40_min_power ; t#s8 ht40_scan_power ; t#u8 ht40_flags ; t#u8 ht40_extension_channel ; s#iwl3945_channel_power_info power_info [ ( 33 ) ] ; s#iwl3945_scan_power_info scan_pwr_info [ ( 2 ) ] ; } 
s#iwl3945_clip_group struct iwl3945_clip_group { const t#s8 clip_powers [ ( 4 + 8 ) ] ; } 
s#iwl_calib_result struct iwl_calib_result { void * buf ; t#size_t buf_len ; } 
s#cfg80211_ssid struct cfg80211_ssid { t#u8 ssid [ 32 ] ; t#u8 ssid_len ; } 
s#cfg80211_scan_request struct cfg80211_scan_request { s#cfg80211_ssid * ssids ; int n_ssids ; t#u32 n_channels ; const t#u8 * ie ; t#size_t ie_len ; s#wiphy * wiphy ; s#net_device * dev ; t#bool aborted ; s#ieee80211_channel * channels [ 0 ] ; } 
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#fw_desc struct fw_desc { void * v_addr ; t#dma_addr_t p_addr ; t#u32 len ; } 
e#ucode_type enum ucode_type { UCODE_NONE = 0 , UCODE_INIT , UCODE_RT } 
s#iwl_rxon_time_cmd struct iwl_rxon_time_cmd { t#__le64 timestamp ; t#__le16 beacon_interval ; t#__le16 atim_window ; t#__le32 beacon_init_val ; t#__le16 listen_interval ; t#__le16 reserved ; } 
s#iwl_rxon_cmd struct iwl_rxon_cmd { t#u8 node_addr [ 6 ] ; t#__le16 reserved1 ; t#u8 bssid_addr [ 6 ] ; t#__le16 reserved2 ; t#u8 wlap_bssid_addr [ 6 ] ; t#__le16 reserved3 ; t#u8 dev_type ; t#u8 air_propagation ; t#__le16 rx_chain ; t#u8 ofdm_basic_rates ; t#u8 cck_basic_rates ; t#__le16 assoc_id ; t#__le32 flags ; t#__le32 filter_flags ; t#__le16 channel ; t#u8 ofdm_ht_single_stream_basic_rates ; t#u8 ofdm_ht_dual_stream_basic_rates ; t#u8 ofdm_ht_triple_stream_basic_rates ; t#u8 reserved5 ; t#__le16 acquisition_data ; t#__le16 reserved6 ; } 
s#iwl_init_alive_resp struct iwl_init_alive_resp { t#u8 ucode_minor ; t#u8 ucode_major ; t#__le16 reserved1 ; t#u8 sw_rev [ 8 ] ; t#u8 ver_type ; t#u8 ver_subtype ; t#__le16 reserved2 ; t#__le32 log_event_table_ptr ; t#__le32 error_event_table_ptr ; t#__le32 timestamp ; t#__le32 is_valid ; t#__le32 voltage ; t#__le32 therm_r1 [ 2 ] ; t#__le32 therm_r2 [ 2 ] ; t#__le32 therm_r3 [ 2 ] ; t#__le32 therm_r4 [ 2 ] ; t#__le32 tx_atten [ 5 ] [ 2 ] ; } 
s#iwl_alive_resp struct iwl_alive_resp { t#u8 ucode_minor ; t#u8 ucode_major ; t#__le16 reserved1 ; t#u8 sw_rev [ 8 ] ; t#u8 ver_type ; t#u8 ver_subtype ; t#__le16 reserved2 ; t#__le32 log_event_table_ptr ; t#__le32 error_event_table_ptr ; t#__le32 timestamp ; t#__le32 is_valid ; } 
e#led_type enum led_type { IWL_LED_TRG_TX , IWL_LED_TRG_RX , IWL_LED_TRG_ASSOC , IWL_LED_TRG_RADIO , IWL_LED_TRG_MAX , } 
s#iwl_led struct iwl_led { s#iwl_priv * priv ; s#led_classdev led_dev ; char name [ 32 ] ; int ( * led_on ) ( s#iwl_priv * , int ) ; int ( * led_off ) ( s#iwl_priv * , int ) ; int ( * led_pattern ) ( s#iwl_priv * , int , unsigned int ) ; e#led_type type ; unsigned int registered ; } 
s#iwl_sensitivity_data struct iwl_sensitivity_data { t#u32 auto_corr_ofdm ; t#u32 auto_corr_ofdm_mrc ; t#u32 auto_corr_ofdm_x1 ; t#u32 auto_corr_ofdm_mrc_x1 ; t#u32 auto_corr_cck ; t#u32 auto_corr_cck_mrc ; t#u32 last_bad_plcp_cnt_ofdm ; t#u32 last_fa_cnt_ofdm ; t#u32 last_bad_plcp_cnt_cck ; t#u32 last_fa_cnt_cck ; t#u32 nrg_curr_state ; t#u32 nrg_prev_state ; t#u32 nrg_value [ 10 ] ; t#u8 nrg_silence_rssi [ 20 ] ; t#u32 nrg_silence_ref ; t#u32 nrg_energy_idx ; t#u32 nrg_silence_idx ; t#u32 nrg_th_cck ; t#s32 nrg_auto_corr_silence_diff ; t#u32 num_in_cck_no_fa ; t#u32 nrg_th_ofdm ; } 
s#iwl_chain_noise_data struct iwl_chain_noise_data { t#u32 active_chains ; t#u32 chain_noise_a ; t#u32 chain_noise_b ; t#u32 chain_noise_c ; t#u32 chain_signal_a ; t#u32 chain_signal_b ; t#u32 chain_signal_c ; t#u16 beacon_count ; t#u8 disconn_array [ 3 ] ; t#u8 delta_gain_code [ 3 ] ; t#u8 radio_write ; t#u8 state ; } 
s#iwl_ht_info struct iwl_ht_info { t#u8 is_ht ; t#u8 supported_chan_width ; t#u8 sm_ps ; s#ieee80211_mcs_info mcs ; t#u8 extension_chan_offset ; t#u8 ht_protection ; t#u8 non_GF_STA_present ; } 
s#iwl_rb_status struct iwl_rb_status { t#__le16 closed_rb_num ; t#__le16 closed_fr_num ; t#__le16 finished_rb_num ; t#__le16 finished_fr_nam ; t#__le32 __unused ; } 
s#iwl_rx_queue struct iwl_rx_queue { t#__le32 * bd ; t#dma_addr_t dma_addr ; s#iwl_rx_mem_buffer pool [ 256 + 64 ] ; s#iwl_rx_mem_buffer * queue [ 256 ] ; t#u32 read ; t#u32 write ; t#u32 free_count ; t#u32 write_actual ; s#list_head rx_free ; s#list_head rx_used ; int need_update ; s#iwl_rb_status * rb_stts ; t#dma_addr_t rb_stts_dma ; t#spinlock_t lock ; } 
s#iwl_dma_ptr struct iwl_dma_ptr { t#dma_addr_t dma ; void * addr ; t#size_t size ; } 
s#traffic_stats struct traffic_stats { t#u32 mgmt [ MANAGEMENT_MAX ] ; t#u32 ctrl [ CONTROL_MAX ] ; t#u32 data_cnt ; t#u64 data_bytes ; } 
s#isr_statistics struct isr_statistics { t#u32 hw ; t#u32 sw ; t#u32 sw_err ; t#u32 sch ; t#u32 alive ; t#u32 rfkill ; t#u32 ctkill ; t#u32 wakeup ; t#u32 rx ; t#u32 rx_handlers [ REPLY_MAX ] ; t#u32 tx ; t#u32 unhandled ; } 
s#iwl_powertable_cmd struct iwl_powertable_cmd { t#__le16 flags ; t#u8 keep_alive_seconds ; t#u8 debug_flags ; t#__le32 rx_data_timeout ; t#__le32 tx_data_timeout ; t#__le32 sleep_interval [ 5 ] ; t#__le32 keep_alive_beacons ; } 
s#iwl_power_mgr struct iwl_power_mgr { s#iwl_powertable_cmd sleep_cmd ; int debug_sleep_level_override ; t#bool pci_pm ; } 
e#iwl_tt_state enum iwl_tt_state { IWL_TI_0 , IWL_TI_1 , IWL_TI_2 , IWL_TI_CT_KILL , IWL_TI_STATE_MAX } 
e#iwl_antenna_ok enum iwl_antenna_ok { IWL_ANT_OK_NONE , IWL_ANT_OK_SINGLE , IWL_ANT_OK_MULTI , } 
s#iwl_tt_restriction struct iwl_tt_restriction { e#iwl_antenna_ok tx_stream ; e#iwl_antenna_ok rx_stream ; t#bool is_ht ; } 
s#iwl_tt_trans struct iwl_tt_trans { e#iwl_tt_state next_state ; t#u32 tt_low ; t#u32 tt_high ; } 
s#iwl_tt_mgmt struct iwl_tt_mgmt { e#iwl_tt_state state ; t#bool advanced_tt ; t#u8 tt_power_mode ; t#bool ct_kill_toggle ; t#s32 tt_previous_temp ; s#iwl_tt_restriction * restriction ; s#iwl_tt_trans * transaction ; s#timer_list ct_kill_exit_tm ; } 
s#statistics_rx_phy struct statistics_rx_phy { t#__le32 ina_cnt ; t#__le32 fina_cnt ; t#__le32 plcp_err ; t#__le32 crc32_err ; t#__le32 overrun_err ; t#__le32 early_overrun_err ; t#__le32 crc32_good ; t#__le32 false_alarm_cnt ; t#__le32 fina_sync_err_cnt ; t#__le32 sfd_timeout ; t#__le32 fina_timeout ; t#__le32 unresponded_rts ; t#__le32 rxe_frame_limit_overrun ; t#__le32 sent_ack_cnt ; t#__le32 sent_cts_cnt ; t#__le32 sent_ba_rsp_cnt ; t#__le32 dsp_self_kill ; t#__le32 mh_format_err ; t#__le32 re_acq_main_rssi_sum ; t#__le32 reserved3 ; } 
s#statistics_rx_non_phy struct statistics_rx_non_phy { t#__le32 bogus_cts ; t#__le32 bogus_ack ; t#__le32 non_bssid_frames ; t#__le32 filtered_frames ; t#__le32 non_channel_beacons ; t#__le32 channel_beacons ; t#__le32 num_missed_bcon ; t#__le32 adc_rx_saturation_time ; t#__le32 ina_detection_search_time ; t#__le32 beacon_silence_rssi_a ; t#__le32 beacon_silence_rssi_b ; t#__le32 beacon_silence_rssi_c ; t#__le32 interference_data_flag ; t#__le32 channel_load ; t#__le32 dsp_false_alarms ; t#__le32 beacon_rssi_a ; t#__le32 beacon_rssi_b ; t#__le32 beacon_rssi_c ; t#__le32 beacon_energy_a ; t#__le32 beacon_energy_b ; t#__le32 beacon_energy_c ; } 
s#statistics_rx_ht_phy struct statistics_rx_ht_phy { t#__le32 plcp_err ; t#__le32 overrun_err ; t#__le32 early_overrun_err ; t#__le32 crc32_good ; t#__le32 crc32_err ; t#__le32 mh_format_err ; t#__le32 agg_crc32_good ; t#__le32 agg_mpdu_cnt ; t#__le32 agg_cnt ; t#__le32 reserved2 ; } 
s#statistics_rx struct statistics_rx { s#statistics_rx_phy ofdm ; s#statistics_rx_phy cck ; s#statistics_rx_non_phy general ; s#statistics_rx_ht_phy ofdm_ht ; } 
s#statistics_tx_non_phy_agg struct statistics_tx_non_phy_agg { t#__le32 ba_timeout ; t#__le32 ba_reschedule_frames ; t#__le32 scd_query_agg_frame_cnt ; t#__le32 scd_query_no_agg ; t#__le32 scd_query_agg ; t#__le32 scd_query_mismatch ; t#__le32 frame_not_ready ; t#__le32 underrun ; t#__le32 bt_prio_kill ; t#__le32 rx_ba_rsp_cnt ; } 
s#statistics_tx_power struct statistics_tx_power { t#u8 ant_a ; t#u8 ant_b ; t#u8 ant_c ; t#u8 reserved ; } 
s#statistics_tx struct statistics_tx { t#__le32 preamble_cnt ; t#__le32 rx_detected_cnt ; t#__le32 bt_prio_defer_cnt ; t#__le32 bt_prio_kill_cnt ; t#__le32 few_bytes_cnt ; t#__le32 cts_timeout ; t#__le32 ack_timeout ; t#__le32 expected_ack_cnt ; t#__le32 actual_ack_cnt ; t#__le32 dump_msdu_cnt ; t#__le32 burst_abort_next_frame_mismatch_cnt ; t#__le32 burst_abort_missing_next_frame_cnt ; t#__le32 cts_timeout_collision ; t#__le32 ack_or_ba_timeout_collision ; s#statistics_tx_non_phy_agg agg ; s#statistics_tx_power tx_power ; t#__le32 reserved1 ; } 
s#statistics_dbg struct statistics_dbg { t#__le32 burst_check ; t#__le32 burst_count ; t#__le32 reserved [ 4 ] ; } 
s#statistics_div struct statistics_div { t#__le32 tx_on_a ; t#__le32 tx_on_b ; t#__le32 exec_time ; t#__le32 probe_time ; t#__le32 reserved1 ; t#__le32 reserved2 ; } 
s#statistics_general struct statistics_general { t#__le32 temperature ; t#__le32 temperature_m ; s#statistics_dbg dbg ; t#__le32 sleep_time ; t#__le32 slots_out ; t#__le32 slots_idle ; t#__le32 ttl_timestamp ; s#statistics_div div ; t#__le32 rx_enable_counter ; t#__le32 reserved1 ; t#__le32 reserved2 ; t#__le32 reserved3 ; } 
s#iwl_notif_statistics struct iwl_notif_statistics { t#__le32 flag ; s#statistics_rx rx ; s#statistics_tx tx ; s#statistics_general general ; } 
s#iwl_ht_agg struct iwl_ht_agg { t#u16 txq_id ; t#u16 frame_count ; t#u16 wait_for_ba ; t#u16 start_idx ; t#u64 bitmap ; t#u32 rate_n_flags ; t#u8 state ; } 
s#iwl_tid_data struct iwl_tid_data { t#u16 seq_number ; t#u16 tfds_in_queue ; s#iwl_ht_agg agg ; } 
s#iwl_hw_key struct iwl_hw_key { e#ieee80211_key_alg alg ; int keylen ; t#u8 keyidx ; t#u8 key [ 32 ] ; } 
s#iwl_station_entry struct iwl_station_entry { s#iwl_addsta_cmd sta ; s#iwl_tid_data tid [ 9 ] ; t#u8 used ; t#u8 ps_status ; s#iwl_hw_key keyinfo ; } 
s#iwl_wep_key struct iwl_wep_key { t#u8 key_index ; t#u8 key_offset ; t#u8 reserved1 [ 2 ] ; t#u8 key_size ; t#u8 reserved2 [ 3 ] ; t#u8 key [ 16 ] ; } 
s#iwl_eeprom_calib_measure struct iwl_eeprom_calib_measure { t#u8 temperature ; t#u8 gain_idx ; t#u8 actual_pow ; t#s8 pa_det ; } 
s#iwl_eeprom_calib_ch_info struct iwl_eeprom_calib_ch_info { t#u8 ch_num ; s#iwl_eeprom_calib_measure measurements [ ( 2 ) ] [ ( 3 ) ] ; } 
s#iwl_eeprom_calib_subband_info struct iwl_eeprom_calib_subband_info { t#u8 ch_from ; t#u8 ch_to ; s#iwl_eeprom_calib_ch_info ch1 ; s#iwl_eeprom_calib_ch_info ch2 ; } 
s#iwl_eeprom_calib_info struct iwl_eeprom_calib_info { t#u8 saturation_power24 ; t#u8 saturation_power52 ; t#__le16 voltage ; s#iwl_eeprom_calib_subband_info band_info [ ( 8 ) ] ; } 
s#iwl_sensitivity_ranges struct iwl_sensitivity_ranges { t#u16 min_nrg_cck ; t#u16 max_nrg_cck ; t#u16 nrg_th_cck ; t#u16 nrg_th_ofdm ; t#u16 auto_corr_min_ofdm ; t#u16 auto_corr_min_ofdm_mrc ; t#u16 auto_corr_min_ofdm_x1 ; t#u16 auto_corr_min_ofdm_mrc_x1 ; t#u16 auto_corr_max_ofdm ; t#u16 auto_corr_max_ofdm_mrc ; t#u16 auto_corr_max_ofdm_x1 ; t#u16 auto_corr_max_ofdm_mrc_x1 ; t#u16 auto_corr_max_cck ; t#u16 auto_corr_max_cck_mrc ; t#u16 auto_corr_min_cck ; t#u16 auto_corr_min_cck_mrc ; } 
s#iwl_hw_params struct iwl_hw_params { t#u8 max_txq_num ; t#u8 dma_chnl_num ; t#u16 scd_bc_tbls_size ; t#u32 tfd_size ; t#u8 tx_chains_num ; t#u8 rx_chains_num ; t#u8 valid_tx_ant ; t#u8 valid_rx_ant ; t#u16 max_rxq_size ; t#u16 max_rxq_log ; t#u32 rx_buf_size ; t#u32 rx_wrt_ptr_reg ; t#u32 max_pkt_size ; t#u8 max_stations ; t#u8 bcast_sta_id ; t#u8 ht40_channel ; t#u8 max_beacon_itrvl ; t#u32 max_inst_size ; t#u32 max_data_size ; t#u32 max_bsm_size ; t#u32 ct_kill_threshold ; t#u32 ct_kill_exit_threshold ; t#u32 calib_init_cfg ; const s#iwl_sensitivity_ranges * sens ; } 
u#iwl_qos_capabity union iwl_qos_capabity { struct { t#u8 edca_count : 4 ; t#u8 q_ack : 1 ; t#u8 queue_request : 1 ; t#u8 txop_request : 1 ; t#u8 reserved : 1 ; } q_AP ; struct { t#u8 acvo_APSD : 1 ; t#u8 acvi_APSD : 1 ; t#u8 ac_bk_APSD : 1 ; t#u8 ac_be_APSD : 1 ; t#u8 q_ack : 1 ; t#u8 max_len : 2 ; t#u8 more_data_ack : 1 ; } q_STA ; t#u8 val ; } 
s#iwl_ac_qos struct iwl_ac_qos { t#__le16 cw_min ; t#__le16 cw_max ; t#u8 aifsn ; t#u8 reserved1 ; t#__le16 edca_txop ; } 
s#iwl_qosparam_cmd struct iwl_qosparam_cmd { t#__le32 qos_flags ; s#iwl_ac_qos ac [ 4 ] ; } 
s#iwl_qos_info struct iwl_qos_info { int qos_active ; u#iwl_qos_capabity qos_cap ; s#iwl_qosparam_cmd def_qos_parm ; } 
s##workqueue_struct
s#dir_data_files struct dir_data_files { s#dentry * file_sram ; s#dentry * file_nvm ; s#dentry * file_stations ; s#dentry * file_log_event ; s#dentry * file_channels ; s#dentry * file_status ; s#dentry * file_interrupt ; s#dentry * file_qos ; s#dentry * file_thermal_throttling ; s#dentry * file_led ; s#dentry * file_disable_ht40 ; s#dentry * file_sleep_level_override ; s#dentry * file_current_sleep_command ; } 
s#dir_rf_files struct dir_rf_files { s#dentry * file_disable_sensitivity ; s#dentry * file_disable_chain_noise ; s#dentry * file_disable_tx_power ; } 
s#dir_debug_files struct dir_debug_files { s#dentry * file_rx_statistics ; s#dentry * file_tx_statistics ; s#dentry * file_traffic_log ; s#dentry * file_rx_queue ; s#dentry * file_tx_queue ; s#dentry * file_ucode_rx_stats ; s#dentry * file_ucode_tx_stats ; s#dentry * file_ucode_general_stats ; s#dentry * file_sensitivity ; s#dentry * file_chain_noise ; s#dentry * file_tx_power ; } 
s#iwl_debugfs struct iwl_debugfs { const char * name ; s#dentry * dir_drv ; s#dentry * dir_data ; s#dentry * dir_debug ; s#dentry * dir_rf ; s#dir_data_files dbgfs_data_files ; s#dir_rf_files dbgfs_rf_files ; s#dir_debug_files dbgfs_debug_files ; t#u32 sram_offset ; t#u32 sram_len ; } 
s#iwl39_statistics_rx_phy struct iwl39_statistics_rx_phy { t#__le32 ina_cnt ; t#__le32 fina_cnt ; t#__le32 plcp_err ; t#__le32 crc32_err ; t#__le32 overrun_err ; t#__le32 early_overrun_err ; t#__le32 crc32_good ; t#__le32 false_alarm_cnt ; t#__le32 fina_sync_err_cnt ; t#__le32 sfd_timeout ; t#__le32 fina_timeout ; t#__le32 unresponded_rts ; t#__le32 rxe_frame_limit_overrun ; t#__le32 sent_ack_cnt ; t#__le32 sent_cts_cnt ; } 
s#iwl39_statistics_rx_non_phy struct iwl39_statistics_rx_non_phy { t#__le32 bogus_cts ; t#__le32 bogus_ack ; t#__le32 non_bssid_frames ; t#__le32 filtered_frames ; t#__le32 non_channel_beacons ; } 
s#iwl39_statistics_rx struct iwl39_statistics_rx { s#iwl39_statistics_rx_phy ofdm ; s#iwl39_statistics_rx_phy cck ; s#iwl39_statistics_rx_non_phy general ; } 
s#iwl39_statistics_tx struct iwl39_statistics_tx { t#__le32 preamble_cnt ; t#__le32 rx_detected_cnt ; t#__le32 bt_prio_defer_cnt ; t#__le32 bt_prio_kill_cnt ; t#__le32 few_bytes_cnt ; t#__le32 cts_timeout ; t#__le32 ack_timeout ; t#__le32 expected_ack_cnt ; t#__le32 actual_ack_cnt ; } 
s#iwl39_statistics_div struct iwl39_statistics_div { t#__le32 tx_on_a ; t#__le32 tx_on_b ; t#__le32 exec_time ; t#__le32 probe_time ; } 
s#iwl39_statistics_general struct iwl39_statistics_general { t#__le32 temperature ; s#statistics_dbg dbg ; t#__le32 sleep_time ; t#__le32 slots_out ; t#__le32 slots_idle ; t#__le32 ttl_timestamp ; s#iwl39_statistics_div div ; } 
s#iwl3945_notif_statistics struct iwl3945_notif_statistics { t#__le32 flag ; s#iwl39_statistics_rx rx ; s#iwl39_statistics_tx tx ; s#iwl39_statistics_general general ; } 
s#iwl_priv struct iwl_priv { s#ieee80211_hw * hw ; s#ieee80211_channel * ieee_channels ; s#ieee80211_rate * ieee_rates ; s#iwl_cfg * cfg ; s#list_head free_frames ; int frames_count ; e#ieee80211_band band ; int alloc_rxb_skb ; void ( * rx_handlers [ REPLY_MAX ] ) ( s#iwl_priv * , s#iwl_rx_mem_buffer * ) ; s#ieee80211_supported_band bands [ IEEE80211_NUM_BANDS ] ; s#iwl_spectrum_notification measure_report ; t#u8 measurement_status ; t#u32 ucode_beacon_time ; s#iwl_channel_info * channel_info ; t#u8 channel_count ; const s#iwl3945_clip_group clip39_groups [ 5 ] ; t#s32 temperature ; t#s32 last_temperature ; s#iwl_calib_result calib_results [ IWL_CALIB_MAX ] ; unsigned long last_scan_jiffies ; unsigned long next_scan_jiffies ; unsigned long scan_start ; unsigned long scan_pass_start ; unsigned long scan_start_tsf ; void * scan ; int scan_bands ; s#cfg80211_scan_request * scan_request ; t#u8 scan_tx_ant [ IEEE80211_NUM_BANDS ] ; t#u8 mgmt_tx_ant ; t#spinlock_t lock ; t#spinlock_t hcmd_lock ; t#spinlock_t reg_lock ; s#mutex mutex ; s#pci_dev * pci_dev ; void * hw_base ; t#u32 hw_rev ; t#u32 hw_wa_rev ; t#u8 rev_id ; t#u32 ucode_ver ; s#fw_desc ucode_code ; s#fw_desc ucode_data ; s#fw_desc ucode_data_backup ; s#fw_desc ucode_init ; s#fw_desc ucode_init_data ; s#fw_desc ucode_boot ; e#ucode_type ucode_type ; t#u8 ucode_write_complete ; s#iwl_rxon_time_cmd rxon_timing ; const s#iwl_rxon_cmd active_rxon ; s#iwl_rxon_cmd staging_rxon ; s#iwl_rxon_cmd recovery_rxon ; s#iwl_init_alive_resp card_alive_init ; s#iwl_alive_resp card_alive ; unsigned long last_blink_time ; t#u8 last_blink_rate ; t#u8 allow_blinking ; t#u64 led_tpt ; s#iwl_led led [ IWL_LED_TRG_MAX ] ; unsigned int rxtxpackets ; t#u16 active_rate ; t#u16 active_rate_basic ; t#u8 assoc_station_added ; t#u8 start_calib ; s#iwl_sensitivity_data sensitivity_data ; s#iwl_chain_noise_data chain_noise_data ; t#__le16 sensitivity_tbl [ ( 11 ) ] ; s#iwl_ht_info current_ht_config ; t#u8 last_phy_res [ 100 ] ; t#s8 data_retry_limit ; t#u8 retry_rate ; t#wait_queue_head_t wait_command_queue ; int activity_timer_active ; s#iwl_rx_queue rxq ; s#iwl_tx_queue txq [ 20 ] ; unsigned long txq_ctx_active_msk ; s#iwl_dma_ptr kw ; s#iwl_dma_ptr scd_bc_tbls ; t#u32 scd_base_addr ; unsigned long status ; int last_rx_rssi ; int last_rx_noise ; s#traffic_stats tx_stats ; s#traffic_stats rx_stats ; s#isr_statistics isr_stats ; s#iwl_power_mgr power_data ; s#iwl_tt_mgmt thermal_throttle ; s#iwl_notif_statistics statistics ; unsigned long last_statistics_time ; t#u16 rates_mask ; t#u8 bssid [ 6 ] ; t#u16 rts_threshold ; t#u8 mac_addr [ 6 ] ; t#spinlock_t sta_lock ; int num_stations ; s#iwl_station_entry stations [ 32 ] ; s#iwl_wep_key wep_keys [ 4 ] ; t#u8 default_wep_key ; t#u8 key_mapping_key ; unsigned long ucode_key_table ; unsigned long queue_stopped [ ( ( ( 32 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; t#atomic_t queue_stop_count [ 4 ] ; t#u8 is_open ; t#u8 mac80211_registered ; t#u32 last_beacon_time ; t#u64 last_tsf ; t#u8 * eeprom ; int nvm_device_type ; s#iwl_eeprom_calib_info * calib_info ; e#nl80211_iftype iw_mode ; s#sk_buff * ibss_beacon ; t#u64 timestamp ; t#u16 beacon_int ; s#ieee80211_vif * vif ; void * shared_virt ; t#dma_addr_t shared_phys ; s#iwl_hw_params hw_params ; t#__le32 * ict_tbl ; t#dma_addr_t ict_tbl_dma ; t#dma_addr_t aligned_ict_tbl_dma ; int ict_index ; void * ict_tbl_vir ; t#u32 inta ; t#bool use_ict ; t#u32 inta_mask ; t#u16 assoc_id ; t#u16 assoc_capability ; s#iwl_qos_info qos_data ; s#workqueue_struct * workqueue ; s#work_struct up ; s#work_struct restart ; s#work_struct calibrated_work ; s#work_struct scan_completed ; s#work_struct rx_replenish ; s#work_struct abort_scan ; s#work_struct update_link_led ; s#work_struct auth_work ; s#work_struct report_work ; s#work_struct request_scan ; s#work_struct beacon_update ; s#work_struct tt_work ; s#work_struct ct_enter ; s#work_struct ct_exit ; s#tasklet_struct irq_tasklet ; s#delayed_work init_alive_start ; s#delayed_work alive_start ; s#delayed_work scan_check ; s#delayed_work thermal_periodic ; s#delayed_work rfkill_poll ; t#s8 tx_power_user_lmt ; t#s8 tx_power_device_lmt ; t#u32 debug_level ; t#u32 framecnt_to_us ; t#atomic_t restrict_refcnt ; t#bool disable_ht40 ; t#u16 tx_traffic_idx ; t#u16 rx_traffic_idx ; t#u8 * tx_traffic ; t#u8 * rx_traffic ; s#iwl_debugfs * dbgfs ; s#work_struct txpower_work ; t#u32 disable_sens_cal ; t#u32 disable_chain_noise_cal ; t#u32 disable_tx_power_cal ; s#work_struct run_time_calib_work ; s#timer_list statistics_periodic ; t#bool hw_ready ; s#iwl3945_notif_statistics statistics_39 ; t#u32 sta_supp_rates ; } 
iwl_send_calib_results int iwl_send_calib_results ( s#iwl_priv * ) 
iwl_calib_set int iwl_calib_set ( s#iwl_calib_result * , const t#u8 * , int ) 
iwl_init_sensitivity void iwl_init_sensitivity ( s#iwl_priv * ) 
iwl_sensitivity_calibration void iwl_sensitivity_calibration ( s#iwl_priv * , s#iwl_notif_statistics * ) 
iwl_chain_noise_calibration void iwl_chain_noise_calibration ( s#iwl_priv * , s#iwl_notif_statistics * ) 
iwl_reset_run_time_calib void iwl_reset_run_time_calib ( s#iwl_priv * ) 

/* drivers/net/wireless/iwlwifi/iwl-core.o */
iwl_debug_level extern t#u32 iwl_debug_level 
s#iwl_rate_info struct iwl_rate_info { t#u8 plcp ; t#u8 plcp_siso ; t#u8 plcp_mimo2 ; t#u8 plcp_mimo3 ; t#u8 ieee ; t#u8 prev_ieee ; t#u8 next_ieee ; t#u8 prev_rs ; t#u8 next_rs ; t#u8 prev_rs_tgg ; t#u8 next_rs_tgg ; } 
iwl_rates extern const s#iwl_rate_info iwl_rates [ IWL_RATE_COUNT ] 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##workqueue_struct
iwl_hwrate_to_tx_control void iwl_hwrate_to_tx_control ( s#iwl_priv * , t#u32 , s#ieee80211_tx_info * ) 
iwl_hwrate_to_plcp_idx int iwl_hwrate_to_plcp_idx ( t#u32 ) 
iwl_bcast_addr extern const t#u8 iwl_bcast_addr [ 6 ] 
s#ieee80211_if_init_conf struct ieee80211_if_init_conf { e#nl80211_iftype type ; s#ieee80211_vif * vif ; void * mac_addr ; } 
e#set_key_cmd enum set_key_cmd { SET_KEY , DISABLE_KEY , } 
s#ieee80211_low_level_stats struct ieee80211_low_level_stats { unsigned int dot11ACKFailureCount ; unsigned int dot11RTSFailureCount ; unsigned int dot11FCSErrorCount ; unsigned int dot11RTSSuccessCount ; } 
e#sta_notify_cmd enum sta_notify_cmd { STA_NOTIFY_ADD , STA_NOTIFY_REMOVE , STA_NOTIFY_SLEEP , STA_NOTIFY_AWAKE , } 
s#ieee80211_tx_queue_params struct ieee80211_tx_queue_params { t#u16 txop ; t#u16 cw_min ; t#u16 cw_max ; t#u8 aifs ; } 
s#ieee80211_tx_queue_stats struct ieee80211_tx_queue_stats { unsigned int len ; unsigned int limit ; unsigned int count ; } 
e#ieee80211_ampdu_mlme_action enum ieee80211_ampdu_mlme_action { IEEE80211_AMPDU_RX_START , IEEE80211_AMPDU_RX_STOP , IEEE80211_AMPDU_TX_START , IEEE80211_AMPDU_TX_STOP , IEEE80211_AMPDU_TX_OPERATIONAL , } 
s#ieee80211_ops struct ieee80211_ops { int ( * tx ) ( s#ieee80211_hw * , s#sk_buff * ) ; int ( * start ) ( s#ieee80211_hw * ) ; void ( * stop ) ( s#ieee80211_hw * ) ; int ( * add_interface ) ( s#ieee80211_hw * , s#ieee80211_if_init_conf * ) ; void ( * remove_interface ) ( s#ieee80211_hw * , s#ieee80211_if_init_conf * ) ; int ( * config ) ( s#ieee80211_hw * , t#u32 ) ; void ( * bss_info_changed ) ( s#ieee80211_hw * , s#ieee80211_vif * , s#ieee80211_bss_conf * , t#u32 ) ; t#u64 ( * prepare_multicast ) ( s#ieee80211_hw * , int , s#dev_addr_list * ) ; void ( * configure_filter ) ( s#ieee80211_hw * , unsigned int , unsigned int * , t#u64 ) ; int ( * set_tim ) ( s#ieee80211_hw * , s#ieee80211_sta * , t#bool ) ; int ( * set_key ) ( s#ieee80211_hw * , e#set_key_cmd , s#ieee80211_vif * , s#ieee80211_sta * , s#ieee80211_key_conf * ) ; void ( * update_tkip_key ) ( s#ieee80211_hw * , s#ieee80211_key_conf * , const t#u8 * , t#u32 , t#u16 * ) ; int ( * hw_scan ) ( s#ieee80211_hw * , s#cfg80211_scan_request * ) ; void ( * sw_scan_start ) ( s#ieee80211_hw * ) ; void ( * sw_scan_complete ) ( s#ieee80211_hw * ) ; int ( * get_stats ) ( s#ieee80211_hw * , s#ieee80211_low_level_stats * ) ; void ( * get_tkip_seq ) ( s#ieee80211_hw * , t#u8 , t#u32 * , t#u16 * ) ; int ( * set_rts_threshold ) ( s#ieee80211_hw * , t#u32 ) ; void ( * sta_notify ) ( s#ieee80211_hw * , s#ieee80211_vif * , e#sta_notify_cmd , s#ieee80211_sta * ) ; int ( * conf_tx ) ( s#ieee80211_hw * , t#u16 , const s#ieee80211_tx_queue_params * ) ; int ( * get_tx_stats ) ( s#ieee80211_hw * , s#ieee80211_tx_queue_stats * ) ; t#u64 ( * get_tsf ) ( s#ieee80211_hw * ) ; void ( * set_tsf ) ( s#ieee80211_hw * , t#u64 ) ; void ( * reset_tsf ) ( s#ieee80211_hw * ) ; int ( * tx_last_beacon ) ( s#ieee80211_hw * ) ; int ( * ampdu_action ) ( s#ieee80211_hw * , e#ieee80211_ampdu_mlme_action , s#ieee80211_sta * , t#u16 , t#u16 * ) ; void ( * rfkill_poll ) ( s#ieee80211_hw * ) ; } 
iwl_alloc_all s#ieee80211_hw * iwl_alloc_all ( s#iwl_cfg * , s#ieee80211_ops * ) 
iwl_hw_detect void iwl_hw_detect ( s#iwl_priv * ) 
iwl_hw_nic_init int iwl_hw_nic_init ( s#iwl_priv * ) 
iwl_activate_qos void iwl_activate_qos ( s#iwl_priv * , t#u8 ) 
iwl_reset_qos void iwl_reset_qos ( s#iwl_priv * ) 
iwlcore_init_geos int iwlcore_init_geos ( s#iwl_priv * ) 
iwlcore_free_geos void iwlcore_free_geos ( s#iwl_priv * ) 
iwl_is_ht40_tx_allowed t#u8 iwl_is_ht40_tx_allowed ( s#iwl_priv * , s#ieee80211_sta_ht_cap * ) 
iwl_setup_rxon_timing void iwl_setup_rxon_timing ( s#iwl_priv * ) 
iwl_set_rxon_hwcrypto void iwl_set_rxon_hwcrypto ( s#iwl_priv * , int ) 
iwl_check_rxon_cmd int iwl_check_rxon_cmd ( s#iwl_priv * ) 
iwl_full_rxon_required int iwl_full_rxon_required ( s#iwl_priv * ) 
iwl_rate_get_lowest_plcp t#u8 iwl_rate_get_lowest_plcp ( s#iwl_priv * ) 
iwl_set_rxon_ht void iwl_set_rxon_ht ( s#iwl_priv * , s#iwl_ht_info * ) 
iwl_is_monitor_mode t#bool iwl_is_monitor_mode ( s#iwl_priv * ) 
iwl_set_rxon_chain void iwl_set_rxon_chain ( s#iwl_priv * ) 
iwl_set_rxon_channel int iwl_set_rxon_channel ( s#iwl_priv * , s#ieee80211_channel * ) 
iwl_connection_init_rx_config void iwl_connection_init_rx_config ( s#iwl_priv * , int ) 
iwl_rx_csa void iwl_rx_csa ( s#iwl_priv * , s#iwl_rx_mem_buffer * ) 
iwl_irq_handle_error void iwl_irq_handle_error ( s#iwl_priv * ) 
iwl_configure_filter void iwl_configure_filter ( s#ieee80211_hw * , unsigned int , unsigned int * , t#u64 ) 
iwl_setup_mac int iwl_setup_mac ( s#iwl_priv * ) 
iwl_set_hw_params int iwl_set_hw_params ( s#iwl_priv * ) 
iwl_init_drv int iwl_init_drv ( s#iwl_priv * ) 
iwl_set_tx_power int iwl_set_tx_power ( s#iwl_priv * , t#s8 , t#bool ) 
iwl_uninit_drv void iwl_uninit_drv ( s#iwl_priv * ) 
iwl_free_isr_ict void iwl_free_isr_ict ( s#iwl_priv * ) 
iwl_alloc_isr_ict int iwl_alloc_isr_ict ( s#iwl_priv * ) 
iwl_reset_ict int iwl_reset_ict ( s#iwl_priv * ) 
iwl_disable_ict void iwl_disable_ict ( s#iwl_priv * ) 
iwl_isr_ict t#irqreturn_t iwl_isr_ict ( int , void * ) 
iwl_isr_legacy t#irqreturn_t iwl_isr_legacy ( int , void * ) 
iwl_send_bt_config extern int iwl_send_bt_config ( s#iwl_priv * ) 
iwl_send_statistics_request extern int iwl_send_statistics_request ( s#iwl_priv * , t#u8 ) 
iwl_verify_ucode extern int iwl_verify_ucode ( s#iwl_priv * ) 
iwl_rf_kill_ct_config extern void iwl_rf_kill_ct_config ( s#iwl_priv * ) 
iwl_rx_pm_sleep_notif void iwl_rx_pm_sleep_notif ( s#iwl_priv * , s#iwl_rx_mem_buffer * ) 
iwl_rx_pm_debug_statistics_notif void iwl_rx_pm_debug_statistics_notif ( s#iwl_priv * , s#iwl_rx_mem_buffer * ) 
iwl_rx_reply_error void iwl_rx_reply_error ( s#iwl_priv * , s#iwl_rx_mem_buffer * ) 
iwl_mac_conf_tx int iwl_mac_conf_tx ( s#ieee80211_hw * , t#u16 , const s#ieee80211_tx_queue_params * ) 
iwl_bss_info_changed void iwl_bss_info_changed ( s#ieee80211_hw * , s#ieee80211_vif * , s#ieee80211_bss_conf * , t#u32 ) 
iwl_mac_beacon_update int iwl_mac_beacon_update ( s#ieee80211_hw * , s#sk_buff * ) 
iwl_set_mode int iwl_set_mode ( s#iwl_priv * , int ) 
iwl_mac_add_interface int iwl_mac_add_interface ( s#ieee80211_hw * , s#ieee80211_if_init_conf * ) 
iwl_mac_remove_interface void iwl_mac_remove_interface ( s#ieee80211_hw * , s#ieee80211_if_init_conf * ) 
iwl_mac_config int iwl_mac_config ( s#ieee80211_hw * , t#u32 ) 
iwl_mac_get_tx_stats int iwl_mac_get_tx_stats ( s#ieee80211_hw * , s#ieee80211_tx_queue_stats * ) 
iwl_mac_reset_tsf void iwl_mac_reset_tsf ( s#ieee80211_hw * ) 
iwl_alloc_traffic_mem int iwl_alloc_traffic_mem ( s#iwl_priv * ) 
iwl_free_traffic_mem void iwl_free_traffic_mem ( s#iwl_priv * ) 
iwl_dbg_log_tx_data_frame void iwl_dbg_log_tx_data_frame ( s#iwl_priv * , t#u16 , s#ieee80211_hdr * ) 
iwl_dbg_log_rx_data_frame void iwl_dbg_log_rx_data_frame ( s#iwl_priv * , t#u16 , s#ieee80211_hdr * ) 
iwl_update_stats void iwl_update_stats ( s#iwl_priv * , t#bool , t#__le16 , t#u16 ) 
iwl_pci_suspend int iwl_pci_suspend ( s#pci_dev * , t#pm_message_t ) 
iwl_pci_resume int iwl_pci_resume ( s#pci_dev * ) 

/* drivers/net/wireless/iwlwifi/iwl-debugfs.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##workqueue_struct
iwl_dbgfs_register int iwl_dbgfs_register ( s#iwl_priv * , const char * ) 
iwl_dbgfs_unregister void iwl_dbgfs_unregister ( s#iwl_priv * ) 

/* drivers/net/wireless/iwlwifi/iwl-eeprom.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##workqueue_struct
iwlcore_eeprom_verify_signature int iwlcore_eeprom_verify_signature ( s#iwl_priv * ) 
iwlcore_eeprom_acquire_semaphore int iwlcore_eeprom_acquire_semaphore ( s#iwl_priv * ) 
iwlcore_eeprom_release_semaphore void iwlcore_eeprom_release_semaphore ( s#iwl_priv * ) 
iwlcore_eeprom_query_addr const t#u8 * iwlcore_eeprom_query_addr ( const s#iwl_priv * , t#size_t ) 
iwl_eeprom_init int iwl_eeprom_init ( s#iwl_priv * ) 
iwl_eeprom_free void iwl_eeprom_free ( s#iwl_priv * ) 
iwl_eeprom_check_version int iwl_eeprom_check_version ( s#iwl_priv * ) 
iwl_eeprom_query_addr const t#u8 * iwl_eeprom_query_addr ( const s#iwl_priv * , t#size_t ) 
iwl_eeprom_query16 t#u16 iwl_eeprom_query16 ( const s#iwl_priv * , t#size_t ) 
iwl_eeprom_get_mac void iwl_eeprom_get_mac ( const s#iwl_priv * , t#u8 * ) 
iwlcore_eeprom_enhanced_txpower void iwlcore_eeprom_enhanced_txpower ( s#iwl_priv * ) 
iwl_init_channel_map int iwl_init_channel_map ( s#iwl_priv * ) 
iwl_free_channel_map void iwl_free_channel_map ( s#iwl_priv * ) 
iwl_get_channel_info const s#iwl_channel_info * iwl_get_channel_info ( const s#iwl_priv * , e#ieee80211_band , t#u16 ) 

/* drivers/net/wireless/iwlwifi/iwl-hcmd.o */
get_cmd_string const char * get_cmd_string ( t#u8 ) 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##workqueue_struct
iwl_send_cmd_sync int __attribute__ ( ( warn_unused_result ) ) iwl_send_cmd_sync ( s#iwl_priv * , s#iwl_host_cmd * ) 
iwl_send_cmd int iwl_send_cmd ( s#iwl_priv * , s#iwl_host_cmd * ) 
iwl_send_cmd_pdu int __attribute__ ( ( warn_unused_result ) ) iwl_send_cmd_pdu ( s#iwl_priv * , t#u8 , t#u16 , const void * ) 
iwl_send_cmd_pdu_async int iwl_send_cmd_pdu_async ( s#iwl_priv * , t#u8 , t#u16 , const void * , void ( * ) ( s#iwl_priv * , s#iwl_device_cmd * , s#sk_buff * ) ) 

/* drivers/net/wireless/iwlwifi/iwl-led.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##workqueue_struct
iwl_leds_register int iwl_leds_register ( s#iwl_priv * ) 
iwl_leds_unregister void iwl_leds_unregister ( s#iwl_priv * ) 

/* drivers/net/wireless/iwlwifi/iwl-power.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##workqueue_struct
iwl_power_update_mode int iwl_power_update_mode ( s#iwl_priv * , t#bool ) 
iwl_ht_enabled t#bool iwl_ht_enabled ( s#iwl_priv * ) 
iwl_tx_ant_restriction e#iwl_antenna_ok iwl_tx_ant_restriction ( s#iwl_priv * ) 
iwl_tt_enter_ct_kill void iwl_tt_enter_ct_kill ( s#iwl_priv * ) 
iwl_tt_exit_ct_kill void iwl_tt_exit_ct_kill ( s#iwl_priv * ) 
iwl_tt_handler void iwl_tt_handler ( s#iwl_priv * ) 
iwl_tt_initialize void iwl_tt_initialize ( s#iwl_priv * ) 
iwl_tt_exit void iwl_tt_exit ( s#iwl_priv * ) 
iwl_power_initialize void iwl_power_initialize ( s#iwl_priv * ) 

/* drivers/net/wireless/iwlwifi/iwl-rx.o */
s##sock
s##libipw_device
s##neigh_parms
s##vlan_group
s##neighbour
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##sec_path
iwl_rx_queue_space int iwl_rx_queue_space ( const s#iwl_rx_queue * ) 
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##workqueue_struct
iwl_rx_queue_update_write_ptr int iwl_rx_queue_update_write_ptr ( s#iwl_priv * , s#iwl_rx_queue * ) 
iwl_rx_queue_restock int iwl_rx_queue_restock ( s#iwl_priv * ) 
iwl_rx_replenish void iwl_rx_replenish ( s#iwl_priv * ) 
iwl_rx_replenish_now void iwl_rx_replenish_now ( s#iwl_priv * ) 
iwl_rx_queue_free void iwl_rx_queue_free ( s#iwl_priv * , s#iwl_rx_queue * ) 
iwl_rx_queue_alloc int iwl_rx_queue_alloc ( s#iwl_priv * ) 
iwl_rxq_stop extern int iwl_rxq_stop ( s#iwl_priv * ) 
iwl_rx_missed_beacon_notif void iwl_rx_missed_beacon_notif ( s#iwl_priv * , s#iwl_rx_mem_buffer * ) 
iwl_rx_statistics void iwl_rx_statistics ( s#iwl_priv * , s#iwl_rx_mem_buffer * ) 
s#ieee80211_rx_status struct ieee80211_rx_status { t#u64 mactime ; e#ieee80211_band band ; int freq ; int signal ; int noise ; int qual ; int antenna ; int rate_idx ; int flag ; } 
iwl_set_decrypted_flag int iwl_set_decrypted_flag ( s#iwl_priv * , s#ieee80211_hdr * , t#u32 , s#ieee80211_rx_status * ) 
iwl_rx_reply_rx extern void iwl_rx_reply_rx ( s#iwl_priv * , s#iwl_rx_mem_buffer * ) 
iwl_rx_reply_rx_phy extern void iwl_rx_reply_rx_phy ( s#iwl_priv * , s#iwl_rx_mem_buffer * ) 

/* drivers/net/wireless/iwlwifi/iwl-scan.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##workqueue_struct
iwl_scan_cancel int iwl_scan_cancel ( s#iwl_priv * ) 
iwl_scan_cancel_timeout int iwl_scan_cancel_timeout ( s#iwl_priv * , unsigned long ) 
iwl_setup_rx_scan_handlers void iwl_setup_rx_scan_handlers ( s#iwl_priv * ) 
iwl_get_active_dwell_time t#u16 iwl_get_active_dwell_time ( s#iwl_priv * , e#ieee80211_band , t#u8 ) 
iwl_get_passive_dwell_time t#u16 iwl_get_passive_dwell_time ( s#iwl_priv * , e#ieee80211_band ) 
iwl_mac_hw_scan int iwl_mac_hw_scan ( s#ieee80211_hw * , s#cfg80211_scan_request * ) 
iwl_bg_scan_check void iwl_bg_scan_check ( s#work_struct * ) 
s#ieee80211_channel_sw_ie struct ieee80211_channel_sw_ie { t#u8 mode ; t#u8 new_ch_num ; t#u8 count ; } 
s#ieee80211_msrment_ie struct ieee80211_msrment_ie { t#u8 token ; t#u8 mode ; t#u8 type ; t#u8 request [ 0 ] ; } 
s#ieee80211_mgmt struct ieee80211_mgmt { t#__le16 frame_control ; t#__le16 duration ; t#u8 da [ 6 ] ; t#u8 sa [ 6 ] ; t#u8 bssid [ 6 ] ; t#__le16 seq_ctrl ; union { struct { t#__le16 auth_alg ; t#__le16 auth_transaction ; t#__le16 status_code ; t#u8 variable [ 0 ] ; } __attribute__ ( ( packed ) ) auth ; struct { t#__le16 reason_code ; } __attribute__ ( ( packed ) ) deauth ; struct { t#__le16 capab_info ; t#__le16 listen_interval ; t#u8 variable [ 0 ] ; } __attribute__ ( ( packed ) ) assoc_req ; struct { t#__le16 capab_info ; t#__le16 status_code ; t#__le16 aid ; t#u8 variable [ 0 ] ; } __attribute__ ( ( packed ) ) assoc_resp , reassoc_resp ; struct { t#__le16 capab_info ; t#__le16 listen_interval ; t#u8 current_ap [ 6 ] ; t#u8 variable [ 0 ] ; } __attribute__ ( ( packed ) ) reassoc_req ; struct { t#__le16 reason_code ; } __attribute__ ( ( packed ) ) disassoc ; struct { t#__le64 timestamp ; t#__le16 beacon_int ; t#__le16 capab_info ; t#u8 variable [ 0 ] ; } __attribute__ ( ( packed ) ) beacon ; struct { t#u8 variable [ 0 ] ; } __attribute__ ( ( packed ) ) probe_req ; struct { t#__le64 timestamp ; t#__le16 beacon_int ; t#__le16 capab_info ; t#u8 variable [ 0 ] ; } __attribute__ ( ( packed ) ) probe_resp ; struct { t#u8 category ; union { struct { t#u8 action_code ; t#u8 dialog_token ; t#u8 status_code ; t#u8 variable [ 0 ] ; } __attribute__ ( ( packed ) ) wme_action ; struct { t#u8 action_code ; t#u8 element_id ; t#u8 length ; s#ieee80211_channel_sw_ie sw_elem ; } __attribute__ ( ( packed ) ) chan_switch ; struct { t#u8 action_code ; t#u8 dialog_token ; t#u8 element_id ; t#u8 length ; s#ieee80211_msrment_ie msr_elem ; } __attribute__ ( ( packed ) ) measurement ; struct { t#u8 action_code ; t#u8 dialog_token ; t#__le16 capab ; t#__le16 timeout ; t#__le16 start_seq_num ; } __attribute__ ( ( packed ) ) addba_req ; struct { t#u8 action_code ; t#u8 dialog_token ; t#__le16 status ; t#__le16 capab ; t#__le16 timeout ; } __attribute__ ( ( packed ) ) addba_resp ; struct { t#u8 action_code ; t#__le16 params ; t#__le16 reason_code ; } __attribute__ ( ( packed ) ) delba ; struct { t#u8 action_code ; t#__le16 aux ; t#u8 variable [ 0 ] ; } __attribute__ ( ( packed ) ) plink_action ; struct { t#u8 action_code ; t#u8 variable [ 0 ] ; } __attribute__ ( ( packed ) ) mesh_action ; struct { t#u8 action ; t#u8 trans_id [ 2 ] ; } __attribute__ ( ( packed ) ) sa_query ; } u ; } __attribute__ ( ( packed ) ) action ; } u ; } 
iwl_fill_probe_req t#u16 iwl_fill_probe_req ( s#iwl_priv * , s#ieee80211_mgmt * , const t#u8 * , int , int ) 
iwl_bg_abort_scan void iwl_bg_abort_scan ( s#work_struct * ) 
iwl_bg_scan_completed void iwl_bg_scan_completed ( s#work_struct * ) 
iwl_setup_scan_deferred_work void iwl_setup_scan_deferred_work ( s#iwl_priv * ) 

/* drivers/net/wireless/iwlwifi/iwl-spectrum.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##workqueue_struct
iwl_setup_spectrum_handlers void iwl_setup_spectrum_handlers ( s#iwl_priv * ) 

/* drivers/net/wireless/iwlwifi/iwl-sta.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##workqueue_struct
iwl_find_station t#u8 iwl_find_station ( s#iwl_priv * , const t#u8 * ) 
iwl_get_ra_sta_id int iwl_get_ra_sta_id ( s#iwl_priv * , s#ieee80211_hdr * ) 
iwl_send_add_sta int iwl_send_add_sta ( s#iwl_priv * , s#iwl_addsta_cmd * , t#u8 ) 
iwl_add_station t#u8 iwl_add_station ( s#iwl_priv * , const t#u8 * , t#bool , t#u8 , s#ieee80211_sta_ht_cap * ) 
iwl_clear_stations_table void iwl_clear_stations_table ( s#iwl_priv * ) 
iwl_get_free_ucode_key_index int iwl_get_free_ucode_key_index ( s#iwl_priv * ) 
iwl_send_static_wepkey_cmd int iwl_send_static_wepkey_cmd ( s#iwl_priv * , t#u8 ) 
iwl_remove_default_wep_key int iwl_remove_default_wep_key ( s#iwl_priv * , s#ieee80211_key_conf * ) 
iwl_set_default_wep_key int iwl_set_default_wep_key ( s#iwl_priv * , s#ieee80211_key_conf * ) 
iwl_update_tkip_key void iwl_update_tkip_key ( s#iwl_priv * , s#ieee80211_key_conf * , const t#u8 * , t#u32 , t#u16 * ) 
iwl_remove_dynamic_key int iwl_remove_dynamic_key ( s#iwl_priv * , s#ieee80211_key_conf * , t#u8 ) 
iwl_set_dynamic_key int iwl_set_dynamic_key ( s#iwl_priv * , s#ieee80211_key_conf * , t#u8 ) 
s#iwl_link_qual_general_params struct iwl_link_qual_general_params { t#u8 flags ; t#u8 mimo_delimiter ; t#u8 single_stream_ant_msk ; t#u8 dual_stream_ant_msk ; t#u8 start_rate_index [ 4 ] ; } 
s#iwl_link_qual_agg_params struct iwl_link_qual_agg_params { t#__le16 agg_time_limit ; t#u8 agg_dis_start_th ; t#u8 agg_frame_cnt_limit ; t#__le32 reserved ; } 
s#iwl_link_quality_cmd struct iwl_link_quality_cmd { t#u8 sta_id ; t#u8 reserved1 ; t#__le16 control ; s#iwl_link_qual_general_params general_params ; s#iwl_link_qual_agg_params agg_params ; struct { t#__le32 rate_n_flags ; } rs_table [ 16 ] ; t#__le32 reserved2 ; } 
iwl_send_lq_cmd extern int iwl_send_lq_cmd ( s#iwl_priv * , s#iwl_link_quality_cmd * , t#u8 ) 
iwl_rxon_add_station int iwl_rxon_add_station ( s#iwl_priv * , const t#u8 * , t#bool ) 
iwl_get_sta_id int iwl_get_sta_id ( s#iwl_priv * , s#ieee80211_hdr * ) 
iwl_sta_tx_modify_enable_tid void iwl_sta_tx_modify_enable_tid ( s#iwl_priv * , int , int ) 
iwl_sta_rx_agg_start int iwl_sta_rx_agg_start ( s#iwl_priv * , const t#u8 * , int , t#u16 ) 
iwl_sta_rx_agg_stop int iwl_sta_rx_agg_stop ( s#iwl_priv * , const t#u8 * , int ) 

/* drivers/net/wireless/iwlwifi/iwl-tx.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##workqueue_struct
iwl_txq_update_write_ptr int iwl_txq_update_write_ptr ( s#iwl_priv * , s#iwl_tx_queue * ) 
iwl_free_tfds_in_queue void iwl_free_tfds_in_queue ( s#iwl_priv * , int , int , int ) 
iwl_tx_queue_free void iwl_tx_queue_free ( s#iwl_priv * , int ) 
iwl_cmd_queue_free void iwl_cmd_queue_free ( s#iwl_priv * ) 
iwl_queue_space extern int iwl_queue_space ( const s#iwl_queue * ) 
iwl_tx_queue_init int iwl_tx_queue_init ( s#iwl_priv * , s#iwl_tx_queue * , int , t#u32 ) 
iwl_hw_txq_ctx_free void iwl_hw_txq_ctx_free ( s#iwl_priv * ) 
iwl_txq_ctx_stop extern void iwl_txq_ctx_stop ( s#iwl_priv * ) 
iwl_tx_skb int iwl_tx_skb ( s#iwl_priv * , s#sk_buff * ) 
iwl_tx_queue_reclaim int iwl_tx_queue_reclaim ( s#iwl_priv * , int , int ) 
iwl_tx_cmd_complete void iwl_tx_cmd_complete ( s#iwl_priv * , s#iwl_rx_mem_buffer * ) 
iwl_tx_agg_start int iwl_tx_agg_start ( s#iwl_priv * , const t#u8 * , t#u16 , t#u16 * ) 
iwl_tx_agg_stop int iwl_tx_agg_stop ( s#iwl_priv * , const t#u8 * , t#u16 ) 
iwl_txq_check_empty int iwl_txq_check_empty ( s#iwl_priv * , int , t#u8 , int ) 
iwl_rx_reply_compressed_ba void iwl_rx_reply_compressed_ba ( s#iwl_priv * , s#iwl_rx_mem_buffer * ) 
iwl_get_tx_fail_reason const char * iwl_get_tx_fail_reason ( t#u32 ) 

/* drivers/net/wireless/libertas/cmd.o */
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s#lbs_mesh_stats struct lbs_mesh_stats { t#u32 fwd_bcast_cnt ; t#u32 fwd_unicast_cnt ; t#u32 fwd_drop_ttl ; t#u32 fwd_drop_rbt ; t#u32 fwd_drop_noroute ; t#u32 fwd_drop_nobuf ; t#u32 drop_blind ; t#u32 tx_failed_cnt ; } 
s##workqueue_struct
s#cmd_header struct cmd_header { t#__le16 command ; t#__le16 size ; t#__le16 seqnum ; t#__le16 result ; } 
s#cmd_ctrl_node struct cmd_ctrl_node { s#list_head list ; int result ; int ( * callback ) ( s#lbs_private * , unsigned long , s#cmd_header * ) ; unsigned long callback_arg ; s#cmd_header * cmdbuf ; t#u16 cmdwaitqwoken ; t#wait_queue_head_t cmdwait_q ; } 
s#kfifo struct kfifo { unsigned char * buffer ; unsigned int size ; unsigned int in ; unsigned int out ; t#spinlock_t * lock ; } 
s#current_bss_params struct current_bss_params { t#u8 bssid [ 6 ] ; t#u8 ssid [ 32 + 1 ] ; t#u8 ssid_len ; t#u8 band ; t#u8 channel ; t#u8 rates [ 14 + 1 ] ; } 
s#ieee_ie_header struct ieee_ie_header { t#u8 id ; t#u8 len ; } 
s#ieee_ie_fh_param_set struct ieee_ie_fh_param_set { s#ieee_ie_header header ; t#__le16 dwelltime ; t#u8 hopset ; t#u8 hoppattern ; t#u8 hopindex ; } 
s#ieee_ie_ds_param_set struct ieee_ie_ds_param_set { s#ieee_ie_header header ; t#u8 channel ; } 
u#ieee_phy_param_set union ieee_phy_param_set { s#ieee_ie_fh_param_set fh ; s#ieee_ie_ds_param_set ds ; } 
s#ieee_ie_cf_param_set struct ieee_ie_cf_param_set { s#ieee_ie_header header ; t#u8 cfpcnt ; t#u8 cfpperiod ; t#__le16 cfpmaxduration ; t#__le16 cfpdurationremaining ; } 
s#ieee_ie_ibss_param_set struct ieee_ie_ibss_param_set { s#ieee_ie_header header ; t#__le16 atimwindow ; } 
u#ieee_ss_param_set union ieee_ss_param_set { s#ieee_ie_cf_param_set cf ; s#ieee_ie_ibss_param_set ibss ; } 
s#ieee_subbandset struct ieee_subbandset { t#u8 firstchan ; t#u8 nrchan ; t#u8 maxtxpwr ; } 
s#ieee_ie_country_info_full_set struct ieee_ie_country_info_full_set { s#ieee_ie_header header ; t#u8 countrycode [ 3 ] ; s#ieee_subbandset subband [ 83 ] ; } 
s#bss_descriptor struct bss_descriptor { t#u8 bssid [ 6 ] ; t#u8 ssid [ 32 + 1 ] ; t#u8 ssid_len ; t#u16 capability ; t#u32 rssi ; t#u32 channel ; t#u16 beaconperiod ; t#__le16 atimwindow ; t#u8 mode ; t#u8 rates [ 14 + 1 ] ; unsigned long last_scanned ; u#ieee_phy_param_set phy ; u#ieee_ss_param_set ss ; s#ieee_ie_country_info_full_set countryinfo ; t#u8 wpa_ie [ 64 ] ; t#size_t wpa_ie_len ; t#u8 rsn_ie [ 64 ] ; t#size_t rsn_ie_len ; t#u8 mesh ; s#list_head list ; } 
s#enc_key struct enc_key { t#u16 len ; t#u16 flags ; t#u16 type ; t#u8 key [ 32 ] ; } 
s#lbs_802_11_security struct lbs_802_11_security { t#u8 WPAenabled ; t#u8 WPA2enabled ; t#u8 wep_enabled ; t#u8 auth_mode ; t#u32 key_mgmt ; } 
s#assoc_request struct assoc_request { unsigned long flags ; t#u8 ssid [ 32 + 1 ] ; t#u8 ssid_len ; t#u8 channel ; t#u8 band ; t#u8 mode ; t#u8 bssid [ 6 ] __attribute__ ( ( aligned ( 2 ) ) ) ; s#enc_key wep_keys [ 4 ] ; t#u16 wep_tx_keyidx ; s#enc_key wpa_mcast_key ; s#enc_key wpa_unicast_key ; s#lbs_802_11_security secinfo ; t#u8 wpa_ie [ 64 ] ; t#u8 wpa_ie_len ; s#bss_descriptor bss ; } 
s#chan_freq_power struct chan_freq_power { t#u16 channel ; t#u32 freq ; t#u16 maxtxpower ; t#u8 unsupported ; } 
s#region_channel struct region_channel { t#u8 valid ; t#u8 region ; t#u8 band ; t#u8 nrcfp ; s#chan_freq_power * CFP ; } 
s#lbs_802_11d_domain_reg struct lbs_802_11d_domain_reg { t#u8 countrycode [ 3 ] ; t#u8 nr_subband ; s#ieee_subbandset subband [ 83 ] ; } 
s#chan_power_11d struct chan_power_11d { t#u8 chan ; t#u8 pwr ; } 
s#parsed_region_chan_11d struct parsed_region_chan_11d { t#u8 band ; t#u8 region ; t#s8 countrycode [ 3 ] ; s#chan_power_11d chanpwr [ 40 ] ; t#u8 nr_chan ; } 
s#lbs_offset_value struct lbs_offset_value { t#u32 offset ; t#u32 value ; } 
s#lbs_private struct lbs_private { int mesh_open ; int mesh_fw_ver ; int infra_open ; int mesh_autostart_enabled ; char name [ 32 ] ; void * card ; s#net_device * dev ; s#net_device * mesh_dev ; s#net_device * rtap_net_dev ; s#iw_statistics wstats ; s#lbs_mesh_stats mstats ; s#dentry * debugfs_dir ; s#dentry * debugfs_debug ; s#dentry * debugfs_files [ 6 ] ; s#dentry * events_dir ; s#dentry * debugfs_events_files [ 6 ] ; s#dentry * regs_dir ; s#dentry * debugfs_regs_files [ 6 ] ; t#u32 mac_offset ; t#u32 bbp_offset ; t#u32 rf_offset ; t#u8 dnld_sent ; s#task_struct * main_thread ; t#wait_queue_head_t waitq ; s#workqueue_struct * work_thread ; s#work_struct mcast_work ; s#delayed_work scan_work ; s#delayed_work assoc_work ; s#work_struct sync_channel ; int scan_channel ; t#u8 scan_ssid [ 32 + 1 ] ; t#u8 scan_ssid_len ; int ( * hw_host_to_card ) ( s#lbs_private * , t#u8 , t#u8 * , t#u16 ) ; void ( * reset_card ) ( s#lbs_private * ) ; t#uint32_t wol_criteria ; t#uint8_t wol_gpio ; t#uint8_t wol_gap ; t#u32 fwrelease ; t#u32 fwcapinfo ; s#mutex lock ; int tx_pending_len ; t#u8 tx_pending_buf [ 2312 ] ; t#u16 seqnum ; s#cmd_ctrl_node * cmd_array ; s#cmd_ctrl_node * cur_cmd ; int cur_cmd_retcode ; s#list_head cmdfreeq ; s#list_head cmdpendingq ; t#wait_queue_head_t cmd_pending ; t#u8 resp_idx ; t#u8 resp_buf [ 2 ] [ 2312 ] ; t#u32 resp_len [ 2 ] ; s#kfifo * event_fifo ; t#u8 nodename [ 16 ] ; t#spinlock_t driver_lock ; s#timer_list command_timer ; int nr_retries ; int cmd_timed_out ; s#current_bss_params curbssparams ; t#uint16_t mesh_tlv ; t#u8 mesh_ssid [ 32 + 1 ] ; t#u8 mesh_ssid_len ; t#u8 mode ; s#list_head network_list ; s#list_head network_free_list ; s#bss_descriptor * networks ; t#u16 beacon_period ; t#u8 beacon_enable ; t#u8 adhoccreate ; t#u16 capability ; t#u8 current_addr [ 6 ] ; t#u8 multicastlist [ 32 ] [ 6 ] ; t#u32 nr_of_multicastmacaddr ; t#uint16_t enablehwauto ; t#uint16_t ratebitmap ; t#u8 txretrycount ; s#sk_buff * currenttxskb ; t#u16 mac_control ; t#u32 connect_status ; t#u32 mesh_connect_status ; t#u16 regioncode ; t#s16 txpower_cur ; t#s16 txpower_min ; t#s16 txpower_max ; t#u8 surpriseremoved ; t#u16 psmode ; t#u32 psstate ; t#u8 needtowakeup ; s#assoc_request * pending_assoc_req ; s#assoc_request * in_progress_assoc_req ; s#lbs_802_11_security secinfo ; s#enc_key wep_keys [ 4 ] ; t#u16 wep_tx_keyidx ; s#enc_key wpa_mcast_key ; s#enc_key wpa_unicast_key ; t#u8 wpa_ie [ 64 ] ; t#u8 wpa_ie_len ; t#u16 SNR [ MAX_TYPE_B ] [ MAX_TYPE_AVG ] ; t#u16 NF [ MAX_TYPE_B ] [ MAX_TYPE_AVG ] ; t#u8 RSSI [ MAX_TYPE_B ] [ MAX_TYPE_AVG ] ; t#u8 rawSNR [ 8 ] ; t#u8 rawNF [ 8 ] ; t#u16 nextSNRNF ; t#u16 numSNRNF ; t#u8 radio_on ; t#u8 cur_rate ; s#region_channel region_channel [ 2 ] ; s#region_channel universal_channel [ 2 ] ; s#lbs_802_11d_domain_reg domainreg ; s#parsed_region_chan_11d parsed_region_chan ; t#u32 enable11d ; s#lbs_offset_value offsetvalue ; t#u32 monitormode ; t#u8 fw_ready ; } 
lbs_cmd_copyback int lbs_cmd_copyback ( s#lbs_private * , unsigned long , s#cmd_header * ) 
s#host_wol_rule struct host_wol_rule { t#uint8_t rule_no ; t#uint8_t rule_ops ; t#__le16 sig_offset ; t#__le16 sig_length ; t#__le16 reserve ; t#__be32 sig_mask ; t#__be32 signature ; } 
s#wol_config struct wol_config { t#uint8_t action ; t#uint8_t pattern ; t#uint8_t no_rules_in_cmd ; t#uint8_t result ; s#host_wol_rule rule [ 16 ] ; } 
lbs_host_sleep_cfg int lbs_host_sleep_cfg ( s#lbs_private * , t#uint32_t , s#wol_config * ) 
lbs_cmd_802_11_rate_adapt_rateset int lbs_cmd_802_11_rate_adapt_rateset ( s#lbs_private * , t#uint16_t ) 
__lbs_cmd int __lbs_cmd ( s#lbs_private * , t#uint16_t , s#cmd_header * , int , int ( * ) ( s#lbs_private * , unsigned long , s#cmd_header * ) , unsigned long ) 

/* drivers/net/wireless/libertas/main.o */
lbs_debug extern unsigned int lbs_debug 
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##workqueue_struct
lbs_host_to_card_done void lbs_host_to_card_done ( s#lbs_private * ) 
lbs_suspend int lbs_suspend ( s#lbs_private * ) 
lbs_resume void lbs_resume ( s#lbs_private * ) 
lbs_add_card s#lbs_private * lbs_add_card ( void * , s#device * ) 
lbs_remove_card void lbs_remove_card ( s#lbs_private * ) 
lbs_start_card int lbs_start_card ( s#lbs_private * ) 
lbs_stop_card void lbs_stop_card ( s#lbs_private * ) 
lbs_queue_event void lbs_queue_event ( s#lbs_private * , t#u32 ) 
lbs_notify_command_response void lbs_notify_command_response ( s#lbs_private * , t#u8 ) 

/* drivers/net/wireless/libertas/rx.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##workqueue_struct
s##kfifo
lbs_process_rxed_packet int lbs_process_rxed_packet ( s#lbs_private * , s#sk_buff * ) 

/* drivers/net/wireless/libertas/tx.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##workqueue_struct
s##kfifo
lbs_send_tx_feedback void lbs_send_tx_feedback ( s#lbs_private * , t#u32 ) 

/* drivers/net/wireless/libertas_tf/cmd.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##if_usb_card
s#cmd_ctrl_node struct cmd_ctrl_node { s#list_head list ; int result ; int ( * callback ) ( s#lbtf_private * , unsigned long , s#cmd_header * ) ; unsigned long callback_arg ; s#cmd_header * cmdbuf ; t#u16 cmdwaitqwoken ; t#wait_queue_head_t cmdwait_q ; } 
s#channel_range struct channel_range { t#u8 regdomain ; t#u8 start ; t#u8 end ; } 
s#lbtf_offset_value struct lbtf_offset_value { t#u32 offset ; t#u32 value ; } 
s#lbtf_private struct lbtf_private { void * card ; s#ieee80211_hw * hw ; t#u8 cmd_resp_buff [ 2312 ] ; s#ieee80211_vif * vif ; s#work_struct cmd_work ; s#work_struct tx_work ; int ( * hw_host_to_card ) ( s#lbtf_private * , t#u8 , t#u8 * , t#u16 ) ; int ( * hw_prog_firmware ) ( s#if_usb_card * ) ; int ( * hw_reset_device ) ( s#if_usb_card * ) ; t#u32 fwrelease ; t#u32 fwcapinfo ; s#mutex lock ; t#u16 seqnum ; s#cmd_ctrl_node * cmd_array ; s#cmd_ctrl_node * cur_cmd ; s#list_head cmdfreeq ; s#list_head cmdpendingq ; t#spinlock_t driver_lock ; s#timer_list command_timer ; int nr_retries ; int cmd_timed_out ; t#u8 cmd_response_rxed ; t#u16 capability ; t#u8 current_addr [ 6 ] ; t#u8 multicastlist [ 32 ] [ 6 ] ; t#u32 nr_of_multicastmacaddr ; int cur_freq ; s#sk_buff * skb_to_tx ; s#sk_buff * tx_skb ; t#u16 mac_control ; t#u16 regioncode ; s#channel_range range ; t#u8 radioon ; t#u32 preamble ; s#ieee80211_channel channels [ 14 ] ; s#ieee80211_rate rates [ 12 ] ; s#ieee80211_supported_band band ; s#lbtf_offset_value offsetvalue ; t#u8 fw_ready ; t#u8 surpriseremoved ; s#sk_buff_head bc_ps_buf ; } 
lbtf_cmd_copyback int lbtf_cmd_copyback ( s#lbtf_private * , unsigned long , s#cmd_header * ) 
__lbtf_cmd int __lbtf_cmd ( s#lbtf_private * , t#uint16_t , s#cmd_header * , int , int ( * ) ( s#lbtf_private * , unsigned long , s#cmd_header * ) , unsigned long ) 
lbtf_cmd_response_rx void lbtf_cmd_response_rx ( s#lbtf_private * ) 

/* drivers/net/wireless/libertas_tf/if_usb.o */
s##usb_tt
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##mon_bus
s##ep_device
s##wusb_dev
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
t#int8_t typedef t#__s8 int8_t 
s#if_usb_card struct if_usb_card { s#usb_device * udev ; s#urb * rx_urb , * tx_urb , * cmd_urb ; s#lbtf_private * priv ; s#sk_buff * rx_skb ; t#uint8_t ep_in ; t#uint8_t ep_out ; t#int8_t bootcmdresp ; int ep_in_size ; void * ep_out_buf ; int ep_out_size ; const s#firmware * fw ; s#timer_list fw_timeout ; t#wait_queue_head_t fw_wq ; t#uint32_t fwseqnum ; t#uint32_t totalbytes ; t#uint32_t fwlastblksent ; t#uint8_t CRC_OK ; t#uint8_t fwdnldover ; t#uint8_t fwfinalblk ; t#__le16 boot2_version ; } 
if_usb_reset_device int if_usb_reset_device ( s#if_usb_card * ) 
if_usb_prog_firmware int if_usb_prog_firmware ( s#if_usb_card * ) 

/* drivers/net/wireless/libertas_tf/main.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##if_usb_card
lbtf_rx int lbtf_rx ( s#lbtf_private * , s#sk_buff * ) 
lbtf_add_card s#lbtf_private * lbtf_add_card ( void * , s#device * ) 
lbtf_remove_card int lbtf_remove_card ( s#lbtf_private * ) 
lbtf_send_tx_feedback void lbtf_send_tx_feedback ( s#lbtf_private * , t#u8 , t#u8 ) 
lbtf_bcn_sent void lbtf_bcn_sent ( s#lbtf_private * ) 

/* drivers/net/wireless/orinoco/hermes.o */
s#hermes struct hermes { void * iobase ; int reg_spacing ; t#u16 inten ; } 
t#hermes_t typedef s#hermes hermes_t 
s#hermes_response struct hermes_response { t#u16 status , resp0 , resp1 , resp2 ; } 
hermes_doicmd_wait int hermes_doicmd_wait ( t#hermes_t * , t#u16 , t#u16 , t#u16 , t#u16 , s#hermes_response * ) 
hermes_struct_init void hermes_struct_init ( t#hermes_t * , void * , int ) 
hermes_init int hermes_init ( t#hermes_t * ) 
hermes_docmd_wait int hermes_docmd_wait ( t#hermes_t * , t#u16 , t#u16 , s#hermes_response * ) 
hermes_allocate int hermes_allocate ( t#hermes_t * , t#u16 , t#u16 * ) 
hermes_bap_pread int hermes_bap_pread ( t#hermes_t * , int , void * , int , t#u16 , t#u16 ) 
hermes_bap_pwrite int hermes_bap_pwrite ( t#hermes_t * , int , const void * , int , t#u16 , t#u16 ) 
hermes_read_ltv int hermes_read_ltv ( t#hermes_t * , int , t#u16 , unsigned , t#u16 * , void * ) 
hermes_write_ltv int hermes_write_ltv ( t#hermes_t * , int , t#u16 , t#u16 , const void * ) 

/* drivers/net/wireless/orinoco/main.o */
orinoco_interrupt extern t#irqreturn_t orinoco_interrupt ( int , void * ) 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
t#fwtype_t typedef enum { FIRMWARE_TYPE_AGERE , FIRMWARE_TYPE_INTERSIL , FIRMWARE_TYPE_SYMBOL } fwtype_t 
e#orinoco_alg enum orinoco_alg { ORINOCO_ALG_NONE , ORINOCO_ALG_WEP , ORINOCO_ALG_TKIP } 
s#key_params struct key_params { t#u8 * key ; t#u8 * seq ; int key_len ; int seq_len ; t#u32 cipher ; } 
s##crypto_hash
s##firmware
s#orinoco_private struct orinoco_private { void * card ; s#device * dev ; int ( * hard_reset ) ( s#orinoco_private * ) ; int ( * stop_fw ) ( s#orinoco_private * , int ) ; s#ieee80211_supported_band band ; s#ieee80211_channel channels [ 14 ] ; t#u32 cipher_suites [ 3 ] ; t#spinlock_t lock ; int hw_unavailable ; s#work_struct reset_work ; s#tasklet_struct rx_tasklet ; s#list_head rx_list ; int open ; t#u16 last_linkstatus ; s#work_struct join_work ; s#work_struct wevent_work ; s#net_device * ndev ; s#net_device_stats stats ; s#iw_statistics wstats ; t#hermes_t hw ; t#u16 txfid ; t#fwtype_t firmware_type ; char fw_name [ 32 ] ; int ibss_port ; int nicbuf_size ; t#u16 channel_mask ; unsigned int has_ibss : 1 ; unsigned int has_port3 : 1 ; unsigned int has_wep : 1 ; unsigned int has_big_wep : 1 ; unsigned int has_mwo : 1 ; unsigned int has_pm : 1 ; unsigned int has_preamble : 1 ; unsigned int has_sensitivity : 1 ; unsigned int has_hostscan : 1 ; unsigned int has_alt_txcntl : 1 ; unsigned int has_ext_scan : 1 ; unsigned int has_wpa : 1 ; unsigned int do_fw_download : 1 ; unsigned int broken_disableport : 1 ; unsigned int broken_monitor : 1 ; unsigned int prefer_port3 : 1 ; e#nl80211_iftype iw_mode ; e#orinoco_alg encode_alg ; t#u16 wep_restrict , tx_key ; s#key_params keys [ 4 ] ; int bitratemode ; char nick [ 32 + 1 ] ; char desired_essid [ 32 + 1 ] ; char desired_bssid [ 6 ] ; int bssid_fixed ; t#u16 frag_thresh , mwo_robust ; t#u16 channel ; t#u16 ap_density , rts_thresh ; t#u16 pm_on , pm_mcast , pm_period , pm_timeout ; t#u16 preamble ; s#iw_spy_data spy_data ; s#iw_public_data wireless_data ; int port_type , createibss ; int promiscuous , mc_count ; s#cfg80211_scan_request * scan_request ; s#work_struct process_scan ; s#list_head scan_list ; t#spinlock_t scan_lock ; t#u8 * wpa_ie ; int wpa_ie_len ; s#crypto_hash * rx_tfm_mic ; s#crypto_hash * tx_tfm_mic ; unsigned int wpa_enabled : 1 ; unsigned int tkip_cm_active : 1 ; unsigned int key_mgmt : 3 ; const s#firmware * cached_pri_fw ; const s#firmware * cached_fw ; s#notifier_block pm_notifier ; } 
orinoco_init extern int orinoco_init ( s#orinoco_private * ) 
alloc_orinocodev extern s#orinoco_private * alloc_orinocodev ( int , s#device * , int ( * ) ( s#orinoco_private * ) , int ( * ) ( s#orinoco_private * , int ) ) 
orinoco_if_add extern int orinoco_if_add ( s#orinoco_private * , unsigned long , unsigned int ) 
orinoco_if_del extern void orinoco_if_del ( s#orinoco_private * ) 
free_orinocodev extern void free_orinocodev ( s#orinoco_private * ) 
orinoco_up extern int orinoco_up ( s#orinoco_private * ) 
orinoco_down extern void orinoco_down ( s#orinoco_private * ) 

/* drivers/net/wireless/p54/eeprom.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
p54_parse_eeprom int p54_parse_eeprom ( s#ieee80211_hw * , void * , int ) 
p54_read_eeprom int p54_read_eeprom ( s#ieee80211_hw * ) 

/* drivers/net/wireless/p54/fwio.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
p54_parse_firmware int p54_parse_firmware ( s#ieee80211_hw * , const s#firmware * ) 

/* drivers/net/wireless/p54/main.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
p54_init_common s#ieee80211_hw * p54_init_common ( t#size_t ) 
p54_register_common int p54_register_common ( s#ieee80211_hw * , s#device * ) 
p54_free_common void p54_free_common ( s#ieee80211_hw * ) 
p54_unregister_common void p54_unregister_common ( s#ieee80211_hw * ) 

/* drivers/net/wireless/p54/txrx.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
p54_free_skb void p54_free_skb ( s#ieee80211_hw * , s#sk_buff * ) 
p54_rx int p54_rx ( s#ieee80211_hw * , s#sk_buff * ) 

/* drivers/net/wireless/rt2x00/rt2x00dev.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s#data_queue_desc struct data_queue_desc { unsigned short entry_num ; unsigned short data_size ; unsigned short desc_size ; unsigned short priv_size ; } 
e#data_queue_qid enum data_queue_qid { QID_AC_BE = 0 , QID_AC_BK = 1 , QID_AC_VI = 2 , QID_AC_VO = 3 , QID_HCCA = 4 , QID_MGMT = 13 , QID_RX = 14 , QID_OTHER = 15 , QID_BEACON , QID_ATIM , } 
s#data_queue struct data_queue { s#rt2x00_dev * rt2x00dev ; s#queue_entry * entries ; e#data_queue_qid qid ; t#spinlock_t lock ; unsigned int count ; unsigned short limit ; unsigned short threshold ; unsigned short length ; unsigned short index [ Q_INDEX_MAX ] ; unsigned short txop ; unsigned short aifs ; unsigned short cw_min ; unsigned short cw_max ; unsigned short data_size ; unsigned short desc_size ; unsigned short usb_endpoint ; unsigned short usb_maxpacket ; } 
s##sock
s##libipw_device
s##neigh_parms
s##vlan_group
s##neighbour
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##sec_path
s#queue_entry struct queue_entry { unsigned long flags ; s#data_queue * queue ; s#sk_buff * skb ; unsigned int entry_idx ; void * priv_data ; } 
e#dev_state enum dev_state { STATE_DEEP_SLEEP = 0 , STATE_SLEEP = 1 , STATE_STANDBY = 2 , STATE_AWAKE = 3 , STATE_RADIO_ON , STATE_RADIO_OFF , STATE_RADIO_RX_ON , STATE_RADIO_RX_OFF , STATE_RADIO_RX_ON_LINK , STATE_RADIO_RX_OFF_LINK , STATE_RADIO_IRQ_ON , STATE_RADIO_IRQ_OFF , } 
s#link_qual struct link_qual { int rssi ; int false_cca ; t#u8 vgc_level ; t#u8 vgc_level_reg ; int rx_success ; int rx_failed ; int tx_success ; int tx_failed ; } 
e#cipher enum cipher { CIPHER_NONE = 0 , CIPHER_WEP64 = 1 , CIPHER_WEP128 = 2 , CIPHER_TKIP = 3 , CIPHER_AES = 4 , CIPHER_CKIP64 = 5 , CIPHER_CKIP128 = 6 , CIPHER_TKIP_NO_MIC = 7 , CIPHER_MAX = 4 , } 
s#txentry_desc struct txentry_desc { unsigned long flags ; e#data_queue_qid queue ; t#u16 header_length ; t#u16 l2pad ; t#u16 length_high ; t#u16 length_low ; t#u16 signal ; t#u16 service ; t#u16 mcs ; t#u16 stbc ; t#u16 ba_size ; t#u16 rate_mode ; t#u16 mpdu_density ; short retry_limit ; short aifs ; short ifs ; short cw_min ; short cw_max ; e#cipher cipher ; t#u16 key_idx ; t#u16 iv_offset ; t#u16 iv_len ; } 
s#rxdone_entry_desc struct rxdone_entry_desc { t#u64 timestamp ; int signal ; int rssi ; int noise ; int size ; int flags ; int dev_flags ; t#u16 rate_mode ; t#u8 cipher ; t#u8 cipher_status ; t#__le32 iv [ 2 ] ; t#__le32 icv ; } 
s#rt2x00lib_crypto struct rt2x00lib_crypto { e#cipher cipher ; e#set_key_cmd cmd ; const t#u8 * address ; t#u32 bssidx ; t#u32 aid ; t#u8 key [ 16 ] ; t#u8 tx_mic [ 8 ] ; t#u8 rx_mic [ 8 ] ; } 
s#rt2x00_intf struct rt2x00_intf { t#spinlock_t lock ; t#u8 mac [ 6 ] ; t#u8 bssid [ 6 ] ; s#mutex beacon_skb_mutex ; s#queue_entry * beacon ; unsigned int delayed_flags ; t#spinlock_t seqlock ; t#u16 seqno ; } 
e#tsf_sync enum tsf_sync { TSF_SYNC_NONE = 0 , TSF_SYNC_INFRA = 1 , TSF_SYNC_BEACON = 2 , } 
s#rt2x00intf_conf struct rt2x00intf_conf { e#nl80211_iftype type ; e#tsf_sync sync ; t#__le32 mac [ 2 ] ; t#__le32 bssid [ 2 ] ; } 
s#rt2x00lib_erp struct rt2x00lib_erp { int short_preamble ; int cts_protection ; t#u32 basic_rates ; int slot_time ; short sifs ; short pifs ; short difs ; short eifs ; t#u16 beacon_int ; } 
e#antenna enum antenna { ANTENNA_SW_DIVERSITY = 0 , ANTENNA_A = 1 , ANTENNA_B = 2 , ANTENNA_HW_DIVERSITY = 3 , } 
s#antenna_setup struct antenna_setup { e#antenna rx ; e#antenna tx ; } 
s#rf_channel struct rf_channel { int channel ; t#u32 rf1 ; t#u32 rf2 ; t#u32 rf3 ; t#u32 rf4 ; } 
s#channel_info struct channel_info { unsigned int flags ; short tx_power1 ; short tx_power2 ; } 
s#rt2x00lib_conf struct rt2x00lib_conf { s#ieee80211_conf * conf ; s#rf_channel rf ; s#channel_info channel ; } 
s#rt2x00lib_ops struct rt2x00lib_ops { t#irq_handler_t irq_handler ; int ( * probe_hw ) ( s#rt2x00_dev * ) ; char * ( * get_firmware_name ) ( s#rt2x00_dev * ) ; int ( * check_firmware ) ( s#rt2x00_dev * , const t#u8 * , const t#size_t ) ; int ( * load_firmware ) ( s#rt2x00_dev * , const t#u8 * , const t#size_t ) ; int ( * initialize ) ( s#rt2x00_dev * ) ; void ( * uninitialize ) ( s#rt2x00_dev * ) ; t#bool ( * get_entry_state ) ( s#queue_entry * ) ; void ( * clear_entry ) ( s#queue_entry * ) ; int ( * set_device_state ) ( s#rt2x00_dev * , e#dev_state ) ; int ( * rfkill_poll ) ( s#rt2x00_dev * ) ; void ( * link_stats ) ( s#rt2x00_dev * , s#link_qual * ) ; void ( * reset_tuner ) ( s#rt2x00_dev * , s#link_qual * ) ; void ( * link_tuner ) ( s#rt2x00_dev * , s#link_qual * , const t#u32 ) ; void ( * write_tx_desc ) ( s#rt2x00_dev * , s#sk_buff * , s#txentry_desc * ) ; int ( * write_tx_data ) ( s#queue_entry * ) ; void ( * write_beacon ) ( s#queue_entry * ) ; int ( * get_tx_data_len ) ( s#queue_entry * ) ; void ( * kick_tx_queue ) ( s#rt2x00_dev * , const e#data_queue_qid ) ; void ( * kill_tx_queue ) ( s#rt2x00_dev * , const e#data_queue_qid ) ; void ( * fill_rxdone ) ( s#queue_entry * , s#rxdone_entry_desc * ) ; int ( * config_shared_key ) ( s#rt2x00_dev * , s#rt2x00lib_crypto * , s#ieee80211_key_conf * ) ; int ( * config_pairwise_key ) ( s#rt2x00_dev * , s#rt2x00lib_crypto * , s#ieee80211_key_conf * ) ; void ( * config_filter ) ( s#rt2x00_dev * , const unsigned int ) ; void ( * config_intf ) ( s#rt2x00_dev * , s#rt2x00_intf * , s#rt2x00intf_conf * , const unsigned int ) ; void ( * config_erp ) ( s#rt2x00_dev * , s#rt2x00lib_erp * ) ; void ( * config_ant ) ( s#rt2x00_dev * , s#antenna_setup * ) ; void ( * config ) ( s#rt2x00_dev * , s#rt2x00lib_conf * , const unsigned int ) ; } 
s#rt2x00_ops struct rt2x00_ops { const char * name ; const unsigned int max_sta_intf ; const unsigned int max_ap_intf ; const unsigned int eeprom_size ; const unsigned int rf_size ; const unsigned int tx_queues ; const s#data_queue_desc * rx ; const s#data_queue_desc * tx ; const s#data_queue_desc * bcn ; const s#data_queue_desc * atim ; const s#rt2x00lib_ops * lib ; const s#ieee80211_ops * hw ; } 
e#led_type enum led_type { LED_TYPE_RADIO , LED_TYPE_ASSOC , LED_TYPE_ACTIVITY , LED_TYPE_QUALITY , } 
s#rt2x00_led struct rt2x00_led { s#rt2x00_dev * rt2x00dev ; s#led_classdev led_dev ; e#led_type type ; unsigned int flags ; } 
s#rt2x00_chip struct rt2x00_chip { t#u16 rt ; t#u16 rf ; t#u32 rev ; } 
s#hw_mode_spec struct hw_mode_spec { unsigned int supported_bands ; unsigned int supported_rates ; unsigned int num_channels ; const s#rf_channel * channels ; const s#channel_info * channels_info ; s#ieee80211_sta_ht_cap ht ; } 
u#csr union csr { void * base ; void * cache ; } 
s#avg_val struct avg_val { int avg ; int avg_weight ; } 
s#link_ant struct link_ant { unsigned int flags ; s#antenna_setup active ; int rssi_history ; s#avg_val rssi_ant ; } 
s#link struct link { t#u32 count ; s#link_qual qual ; s#link_ant ant ; s#avg_val avg_rssi ; int rx_percentage ; int tx_percentage ; s#delayed_work work ; } 
s#rt2x00_dev struct rt2x00_dev { s#device * dev ; const s#rt2x00_ops * ops ; s#ieee80211_hw * hw ; s#ieee80211_supported_band bands [ IEEE80211_NUM_BANDS ] ; e#ieee80211_band curr_band ; s#rt2x00_led led_radio ; s#rt2x00_led led_assoc ; s#rt2x00_led led_qual ; t#u16 led_mcu_reg ; unsigned long flags ; int irq ; const char * name ; s#rt2x00_chip chip ; s#hw_mode_spec spec ; s#antenna_setup default_ant ; u#csr csr ; s#mutex csr_mutex ; unsigned int packet_filter ; unsigned int intf_ap_count ; unsigned int intf_sta_count ; unsigned int intf_associated ; s#link link ; t#__le16 * eeprom ; t#u32 * rf ; short lna_gain ; t#u16 tx_power ; t#u8 short_retry ; t#u8 long_retry ; t#u8 rssi_offset ; t#u8 freq_offset ; t#u8 calibration [ 2 ] ; t#u16 beacon_int ; s#ieee80211_low_level_stats low_level_stats ; s#ieee80211_rx_status rx_status ; s#work_struct intf_work ; unsigned int data_queues ; s#data_queue * rx ; s#data_queue * tx ; s#data_queue * bcn ; const s#firmware * fw ; } 
rt2x00lib_beacondone void rt2x00lib_beacondone ( s#rt2x00_dev * ) 
s#txdone_entry_desc struct txdone_entry_desc { unsigned long flags ; int retry ; } 
rt2x00lib_txdone void rt2x00lib_txdone ( s#queue_entry * , s#txdone_entry_desc * ) 
rt2x00lib_rxdone void rt2x00lib_rxdone ( s#rt2x00_dev * , s#queue_entry * ) 
rt2x00lib_probe_dev int rt2x00lib_probe_dev ( s#rt2x00_dev * ) 
rt2x00lib_remove_dev void rt2x00lib_remove_dev ( s#rt2x00_dev * ) 
rt2x00lib_suspend int rt2x00lib_suspend ( s#rt2x00_dev * , t#pm_message_t ) 
rt2x00lib_resume int rt2x00lib_resume ( s#rt2x00_dev * ) 

/* drivers/net/wireless/rt2x00/rt2x00mac.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
rt2x00mac_tx int rt2x00mac_tx ( s#ieee80211_hw * , s#sk_buff * ) 
rt2x00mac_start int rt2x00mac_start ( s#ieee80211_hw * ) 
rt2x00mac_stop void rt2x00mac_stop ( s#ieee80211_hw * ) 
rt2x00mac_add_interface int rt2x00mac_add_interface ( s#ieee80211_hw * , s#ieee80211_if_init_conf * ) 
rt2x00mac_remove_interface void rt2x00mac_remove_interface ( s#ieee80211_hw * , s#ieee80211_if_init_conf * ) 
rt2x00mac_config int rt2x00mac_config ( s#ieee80211_hw * , t#u32 ) 
rt2x00mac_configure_filter void rt2x00mac_configure_filter ( s#ieee80211_hw * , unsigned int , unsigned int * , t#u64 ) 
rt2x00mac_set_tim int rt2x00mac_set_tim ( s#ieee80211_hw * , s#ieee80211_sta * , t#bool ) 
rt2x00mac_set_key int rt2x00mac_set_key ( s#ieee80211_hw * , e#set_key_cmd , s#ieee80211_vif * , s#ieee80211_sta * , s#ieee80211_key_conf * ) 
rt2x00mac_get_stats int rt2x00mac_get_stats ( s#ieee80211_hw * , s#ieee80211_low_level_stats * ) 
rt2x00mac_get_tx_stats int rt2x00mac_get_tx_stats ( s#ieee80211_hw * , s#ieee80211_tx_queue_stats * ) 
rt2x00mac_bss_info_changed void rt2x00mac_bss_info_changed ( s#ieee80211_hw * , s#ieee80211_vif * , s#ieee80211_bss_conf * , t#u32 ) 
rt2x00mac_conf_tx int rt2x00mac_conf_tx ( s#ieee80211_hw * , t#u16 , const s#ieee80211_tx_queue_params * ) 
rt2x00mac_rfkill_poll void rt2x00mac_rfkill_poll ( s#ieee80211_hw * ) 

/* drivers/net/wireless/rt2x00/rt2x00pci.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sock
s##libipw_device
s##neigh_parms
s##vlan_group
s##neighbour
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##sec_path
s#rt2x00_field32 struct rt2x00_field32 { t#u32 bit_offset ; t#u32 bit_mask ; } 
rt2x00pci_regbusy_read int rt2x00pci_regbusy_read ( s#rt2x00_dev * , const unsigned int , const s#rt2x00_field32 , t#u32 * ) 
rt2x00pci_write_tx_data int rt2x00pci_write_tx_data ( s#queue_entry * ) 
rt2x00pci_rxdone void rt2x00pci_rxdone ( s#rt2x00_dev * ) 
rt2x00pci_initialize int rt2x00pci_initialize ( s#rt2x00_dev * ) 
rt2x00pci_uninitialize void rt2x00pci_uninitialize ( s#rt2x00_dev * ) 
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
rt2x00pci_probe int rt2x00pci_probe ( s#pci_dev * , const s#pci_device_id * ) 
rt2x00pci_remove void rt2x00pci_remove ( s#pci_dev * ) 
rt2x00pci_suspend int rt2x00pci_suspend ( s#pci_dev * , t#pm_message_t ) 
rt2x00pci_resume int rt2x00pci_resume ( s#pci_dev * ) 

/* drivers/net/wireless/rt2x00/rt2x00queue.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sock
s##libipw_device
s##neigh_parms
s##vlan_group
s##neighbour
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##sec_path
rt2x00queue_map_txskb void rt2x00queue_map_txskb ( s#rt2x00_dev * , s#sk_buff * ) 
rt2x00queue_get_queue s#data_queue * rt2x00queue_get_queue ( s#rt2x00_dev * , const e#data_queue_qid ) 
e#queue_index enum queue_index { Q_INDEX , Q_INDEX_DONE , Q_INDEX_CRYPTO , Q_INDEX_MAX , } 
rt2x00queue_get_entry s#queue_entry * rt2x00queue_get_entry ( s#data_queue * , e#queue_index ) 

/* drivers/net/wireless/rt2x00/rt2x00usb.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sock
s##libipw_device
s##neigh_parms
s##vlan_group
s##neighbour
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##sec_path
rt2x00usb_vendor_request int rt2x00usb_vendor_request ( s#rt2x00_dev * , const t#u8 , const t#u8 , const t#u16 , const t#u16 , void * , const t#u16 , const int ) 
rt2x00usb_vendor_req_buff_lock int rt2x00usb_vendor_req_buff_lock ( s#rt2x00_dev * , const t#u8 , const t#u8 , const t#u16 , void * , const t#u16 , const int ) 
rt2x00usb_vendor_request_buff int rt2x00usb_vendor_request_buff ( s#rt2x00_dev * , const t#u8 , const t#u8 , const t#u16 , void * , const t#u16 , const int ) 
rt2x00usb_vendor_request_large_buff int rt2x00usb_vendor_request_large_buff ( s#rt2x00_dev * , const t#u8 , const t#u8 , const t#u16 , const void * , const t#u16 , const int ) 
rt2x00usb_regbusy_read int rt2x00usb_regbusy_read ( s#rt2x00_dev * , const unsigned int , s#rt2x00_field32 , t#u32 * ) 
rt2x00usb_write_tx_data int rt2x00usb_write_tx_data ( s#queue_entry * ) 
rt2x00usb_kick_tx_queue void rt2x00usb_kick_tx_queue ( s#rt2x00_dev * , const e#data_queue_qid ) 
rt2x00usb_kill_tx_queue void rt2x00usb_kill_tx_queue ( s#rt2x00_dev * , const e#data_queue_qid ) 
rt2x00usb_disable_radio void rt2x00usb_disable_radio ( s#rt2x00_dev * ) 
rt2x00usb_clear_entry void rt2x00usb_clear_entry ( s#queue_entry * ) 
rt2x00usb_initialize int rt2x00usb_initialize ( s#rt2x00_dev * ) 
rt2x00usb_uninitialize void rt2x00usb_uninitialize ( s#rt2x00_dev * ) 
s##ep_device
rt2x00usb_probe int rt2x00usb_probe ( s#usb_interface * , const s#usb_device_id * ) 
rt2x00usb_disconnect void rt2x00usb_disconnect ( s#usb_interface * ) 
rt2x00usb_suspend int rt2x00usb_suspend ( s#usb_interface * , t#pm_message_t ) 
rt2x00usb_resume int rt2x00usb_resume ( s#usb_interface * ) 

/* drivers/net/wireless/wl12xx/wl1251_main.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s#wl1251_if_operations struct wl1251_if_operations { void ( * read ) ( s#wl1251 * , int , void * , t#size_t ) ; void ( * write ) ( s#wl1251 * , int , void * , t#size_t ) ; void ( * reset ) ( s#wl1251 * ) ; void ( * enable_irq ) ( s#wl1251 * ) ; void ( * disable_irq ) ( s#wl1251 * ) ; } 
e#wl1251_state enum wl1251_state { WL1251_STATE_OFF , WL1251_STATE_ON , WL1251_STATE_PLT , } 
s#boot_attr struct boot_attr { t#u32 radio_type ; t#u8 mac_clock ; t#u8 arm_clock ; int firmware_debug ; t#u32 minor ; t#u32 major ; t#u32 bugfix ; } 
s#wl1251_cmd_header struct wl1251_cmd_header { t#u16 id ; t#u16 status ; t#u8 data [ 0 ] ; } 
s#acx_header struct acx_header { s#wl1251_cmd_header cmd ; t#u16 id ; t#u16 len ; } 
s#acx_data_path_params_resp struct acx_data_path_params_resp { s#acx_header header ; t#u16 rx_packet_ring_chunk_size ; t#u16 tx_packet_ring_chunk_size ; t#u8 rx_packet_ring_chunk_num ; t#u8 tx_packet_ring_chunk_num ; t#u8 pad [ 2 ] ; t#u32 rx_packet_ring_addr ; t#u32 tx_packet_ring_addr ; t#u32 rx_control_addr ; t#u32 tx_control_addr ; t#u32 tx_complete_addr ; } 
s#acx_tx_statistics struct acx_tx_statistics { t#u32 internal_desc_overflow ; } 
s#acx_rx_statistics struct acx_rx_statistics { t#u32 out_of_mem ; t#u32 hdr_overflow ; t#u32 hw_stuck ; t#u32 dropped ; t#u32 fcs_err ; t#u32 xfr_hint_trig ; t#u32 path_reset ; t#u32 reset_counter ; } 
s#acx_dma_statistics struct acx_dma_statistics { t#u32 rx_requested ; t#u32 rx_errors ; t#u32 tx_requested ; t#u32 tx_errors ; } 
s#acx_isr_statistics struct acx_isr_statistics { t#u32 cmd_cmplt ; t#u32 fiqs ; t#u32 rx_headers ; t#u32 rx_completes ; t#u32 rx_mem_overflow ; t#u32 rx_rdys ; t#u32 irqs ; t#u32 tx_procs ; t#u32 decrypt_done ; t#u32 dma0_done ; t#u32 dma1_done ; t#u32 tx_exch_complete ; t#u32 commands ; t#u32 rx_procs ; t#u32 hw_pm_mode_changes ; t#u32 host_acknowledges ; t#u32 pci_pm ; t#u32 wakeups ; t#u32 low_rssi ; } 
s#acx_wep_statistics struct acx_wep_statistics { t#u32 addr_key_count ; t#u32 default_key_count ; t#u32 reserved ; t#u32 key_not_found ; t#u32 decrypt_fail ; t#u32 packets ; t#u32 interrupt ; } 
s#acx_pwr_statistics struct acx_pwr_statistics { t#u32 ps_enter ; t#u32 elp_enter ; t#u32 missing_bcns ; t#u32 wake_on_host ; t#u32 wake_on_timer_exp ; t#u32 tx_with_ps ; t#u32 tx_without_ps ; t#u32 rcvd_beacons ; t#u32 power_save_off ; t#u16 enable_ps ; t#u16 disable_ps ; t#u32 fix_tsf_ps ; t#u32 cont_miss_bcns_spread [ 10 ] ; t#u32 rcvd_awake_beacons ; } 
s#acx_aes_statistics struct acx_aes_statistics { t#u32 encrypt_fail ; t#u32 decrypt_fail ; t#u32 encrypt_packets ; t#u32 decrypt_packets ; t#u32 encrypt_interrupt ; t#u32 decrypt_interrupt ; } 
s#acx_mic_statistics struct acx_mic_statistics { t#u32 rx_pkts ; t#u32 calc_failure ; } 
s#acx_event_statistics struct acx_event_statistics { t#u32 heart_beat ; t#u32 calibration ; t#u32 rx_mismatch ; t#u32 rx_mem_empty ; t#u32 rx_pool ; t#u32 oom_late ; t#u32 phy_transmit_error ; t#u32 tx_stuck ; } 
s#acx_ps_statistics struct acx_ps_statistics { t#u32 pspoll_timeouts ; t#u32 upsd_timeouts ; t#u32 upsd_max_sptime ; t#u32 upsd_max_apturn ; t#u32 pspoll_max_apturn ; t#u32 pspoll_utilization ; t#u32 upsd_utilization ; } 
s#acx_rxpipe_statistics struct acx_rxpipe_statistics { t#u32 rx_prep_beacon_drop ; t#u32 descr_host_int_trig_rx_data ; t#u32 beacon_buffer_thres_host_int_trig_rx_data ; t#u32 missed_beacon_host_int_trig_rx_data ; t#u32 tx_xfr_host_int_trig_rx_data ; } 
s#acx_statistics struct acx_statistics { s#acx_header header ; s#acx_tx_statistics tx ; s#acx_rx_statistics rx ; s#acx_dma_statistics dma ; s#acx_isr_statistics isr ; s#acx_wep_statistics wep ; s#acx_pwr_statistics pwr ; s#acx_aes_statistics aes ; s#acx_mic_statistics mic ; s#acx_event_statistics event ; s#acx_ps_statistics ps ; s#acx_rxpipe_statistics rxpipe ; } 
s#wl1251_stats struct wl1251_stats { s#acx_statistics * fw_stats ; unsigned long fw_stats_update ; unsigned int retry_count ; unsigned int excessive_retries ; } 
s#wl1251_debugfs struct wl1251_debugfs { s#dentry * rootdir ; s#dentry * fw_statistics ; s#dentry * tx_internal_desc_overflow ; s#dentry * rx_out_of_mem ; s#dentry * rx_hdr_overflow ; s#dentry * rx_hw_stuck ; s#dentry * rx_dropped ; s#dentry * rx_fcs_err ; s#dentry * rx_xfr_hint_trig ; s#dentry * rx_path_reset ; s#dentry * rx_reset_counter ; s#dentry * dma_rx_requested ; s#dentry * dma_rx_errors ; s#dentry * dma_tx_requested ; s#dentry * dma_tx_errors ; s#dentry * isr_cmd_cmplt ; s#dentry * isr_fiqs ; s#dentry * isr_rx_headers ; s#dentry * isr_rx_mem_overflow ; s#dentry * isr_rx_rdys ; s#dentry * isr_irqs ; s#dentry * isr_tx_procs ; s#dentry * isr_decrypt_done ; s#dentry * isr_dma0_done ; s#dentry * isr_dma1_done ; s#dentry * isr_tx_exch_complete ; s#dentry * isr_commands ; s#dentry * isr_rx_procs ; s#dentry * isr_hw_pm_mode_changes ; s#dentry * isr_host_acknowledges ; s#dentry * isr_pci_pm ; s#dentry * isr_wakeups ; s#dentry * isr_low_rssi ; s#dentry * wep_addr_key_count ; s#dentry * wep_default_key_count ; s#dentry * wep_key_not_found ; s#dentry * wep_decrypt_fail ; s#dentry * wep_packets ; s#dentry * wep_interrupt ; s#dentry * pwr_ps_enter ; s#dentry * pwr_elp_enter ; s#dentry * pwr_missing_bcns ; s#dentry * pwr_wake_on_host ; s#dentry * pwr_wake_on_timer_exp ; s#dentry * pwr_tx_with_ps ; s#dentry * pwr_tx_without_ps ; s#dentry * pwr_rcvd_beacons ; s#dentry * pwr_power_save_off ; s#dentry * pwr_enable_ps ; s#dentry * pwr_disable_ps ; s#dentry * pwr_fix_tsf_ps ; s#dentry * pwr_rcvd_awake_beacons ; s#dentry * mic_rx_pkts ; s#dentry * mic_calc_failure ; s#dentry * aes_encrypt_fail ; s#dentry * aes_decrypt_fail ; s#dentry * aes_encrypt_packets ; s#dentry * aes_decrypt_packets ; s#dentry * aes_encrypt_interrupt ; s#dentry * aes_decrypt_interrupt ; s#dentry * event_heart_beat ; s#dentry * event_calibration ; s#dentry * event_rx_mismatch ; s#dentry * event_rx_mem_empty ; s#dentry * event_rx_pool ; s#dentry * event_oom_late ; s#dentry * event_phy_transmit_error ; s#dentry * event_tx_stuck ; s#dentry * ps_pspoll_timeouts ; s#dentry * ps_upsd_timeouts ; s#dentry * ps_upsd_max_sptime ; s#dentry * ps_upsd_max_apturn ; s#dentry * ps_pspoll_max_apturn ; s#dentry * ps_pspoll_utilization ; s#dentry * ps_upsd_utilization ; s#dentry * rxpipe_rx_prep_beacon_drop ; s#dentry * rxpipe_descr_host_int_trig_rx_data ; s#dentry * rxpipe_beacon_buffer_thres_host_int_trig_rx_data ; s#dentry * rxpipe_missed_beacon_host_int_trig_rx_data ; s#dentry * rxpipe_tx_xfr_host_int_trig_rx_data ; s#dentry * tx_queue_len ; s#dentry * retry_count ; s#dentry * excessive_retries ; } 
s#wl1251_rx_descriptor struct wl1251_rx_descriptor { t#u32 timestamp ; t#u16 length ; t#u16 flags ; t#u8 type ; t#u8 rate ; t#u8 mod_pre ; t#u8 channel ; t#u8 band ; t#s8 rssi ; t#u8 rcpi ; t#u8 snr ; } 
s#wl1251 struct wl1251 { s#ieee80211_hw * hw ; t#bool mac80211_registered ; void * if_priv ; const s#wl1251_if_operations * if_ops ; void ( * set_power ) ( t#bool ) ; int irq ; e#wl1251_state state ; s#mutex mutex ; int physical_mem_addr ; int physical_reg_addr ; int virtual_mem_addr ; int virtual_reg_addr ; int cmd_box_addr ; int event_box_addr ; s#boot_attr boot_attr ; t#u8 * fw ; t#size_t fw_len ; t#u8 * nvs ; t#size_t nvs_len ; t#u8 bssid [ 6 ] ; t#u8 mac_addr [ 6 ] ; t#u8 bss_type ; t#u8 listen_int ; int channel ; void * target_mem_map ; s#acx_data_path_params_resp * data_path ; t#u32 data_in_count ; s#sk_buff_head tx_queue ; t#bool tx_queue_stopped ; s#work_struct tx_work ; s#work_struct filter_work ; s#sk_buff * tx_frames [ 16 ] ; t#u32 next_tx_complete ; t#u32 rx_counter ; t#u32 rx_handled ; t#u32 rx_current_buffer ; t#u32 rx_last_id ; t#u32 intr_mask ; s#work_struct irq_work ; t#u32 event_mask ; t#u32 mbox_ptr [ 2 ] ; t#bool scanning ; t#u16 aid ; t#u32 default_key ; unsigned int tx_mgmt_frm_rate ; unsigned int tx_mgmt_frm_mod ; unsigned int rx_config ; unsigned int rx_filter ; t#bool elp ; t#bool psm ; t#bool psm_requested ; t#u16 beacon_int ; t#u8 dtim_period ; int power_level ; s#wl1251_stats stats ; s#wl1251_debugfs debugfs ; t#u32 buffer_32 ; t#u32 buffer_cmd ; t#u8 buffer_busyword [ 8 ] ; s#wl1251_rx_descriptor * rx_descriptor ; t#u32 chip_id ; char fw_ver [ 21 ] ; } 
wl1251_init_ieee80211 int wl1251_init_ieee80211 ( s#wl1251 * ) 
wl1251_alloc_hw s#ieee80211_hw * wl1251_alloc_hw ( void ) 
wl1251_free_hw int wl1251_free_hw ( s#wl1251 * ) 

/* drivers/parport/ieee1284.o */
s##device
s#pc_parport_state struct pc_parport_state { unsigned int ctr ; unsigned int ecr ; } 
s#ax_parport_state struct ax_parport_state { unsigned int ctr ; unsigned int ecr ; unsigned int dcsr ; } 
s#amiga_parport_state struct amiga_parport_state { unsigned char data ; unsigned char datadir ; unsigned char status ; unsigned char statusdir ; } 
s#ax88796_parport_state struct ax88796_parport_state { unsigned char cpr ; } 
s#ip32_parport_state struct ip32_parport_state { unsigned int dcr ; unsigned int ecr ; } 
s#parport_state struct parport_state { union { s#pc_parport_state pc ; s#ax_parport_state ax ; s#amiga_parport_state amiga ; s#ax88796_parport_state ax88796 ; s#ip32_parport_state ip32 ; void * misc ; } u ; } 
s#pardevice struct pardevice { const char * name ; s#parport * port ; int daisy ; int ( * preempt ) ( void * ) ; void ( * wakeup ) ( void * ) ; void * private ; void ( * irq_func ) ( void * ) ; unsigned int flags ; s#pardevice * next ; s#pardevice * prev ; s#parport_state * state ; t#wait_queue_head_t wait_q ; unsigned long int time ; unsigned long int timeslice ; volatile long int timeout ; unsigned long waiting ; s#pardevice * waitprev ; s#pardevice * waitnext ; void * sysctl_table ; } 
t#parport_device_class typedef enum { PARPORT_CLASS_LEGACY = 0 , PARPORT_CLASS_PRINTER , PARPORT_CLASS_MODEM , PARPORT_CLASS_NET , PARPORT_CLASS_HDC , PARPORT_CLASS_PCMCIA , PARPORT_CLASS_MEDIA , PARPORT_CLASS_FDC , PARPORT_CLASS_PORTS , PARPORT_CLASS_SCANNER , PARPORT_CLASS_DIGCAM , PARPORT_CLASS_OTHER , PARPORT_CLASS_UNSPEC , PARPORT_CLASS_SCSIADAPTER } parport_device_class 
s#parport_device_info struct parport_device_info { t#parport_device_class class ; const char * class_name ; const char * mfr ; const char * model ; const char * cmdset ; const char * description ; } 
e#ieee1284_phase enum ieee1284_phase { IEEE1284_PH_FWD_DATA , IEEE1284_PH_FWD_IDLE , IEEE1284_PH_TERMINATE , IEEE1284_PH_NEGOTIATION , IEEE1284_PH_HBUSY_DNA , IEEE1284_PH_REV_IDLE , IEEE1284_PH_HBUSY_DAVAIL , IEEE1284_PH_REV_DATA , IEEE1284_PH_ECP_SETUP , IEEE1284_PH_ECP_FWD_TO_REV , IEEE1284_PH_ECP_REV_TO_FWD , IEEE1284_PH_ECP_DIR_UNKNOWN , } 
s#ieee1284_info struct ieee1284_info { int mode ; volatile e#ieee1284_phase phase ; s#semaphore irq ; } 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#parport_operations struct parport_operations { void ( * write_data ) ( s#parport * , unsigned char ) ; unsigned char ( * read_data ) ( s#parport * ) ; void ( * write_control ) ( s#parport * , unsigned char ) ; unsigned char ( * read_control ) ( s#parport * ) ; unsigned char ( * frob_control ) ( s#parport * , unsigned char , unsigned char ) ; unsigned char ( * read_status ) ( s#parport * ) ; void ( * enable_irq ) ( s#parport * ) ; void ( * disable_irq ) ( s#parport * ) ; void ( * data_forward ) ( s#parport * ) ; void ( * data_reverse ) ( s#parport * ) ; void ( * init_state ) ( s#pardevice * , s#parport_state * ) ; void ( * save_state ) ( s#parport * , s#parport_state * ) ; void ( * restore_state ) ( s#parport * , s#parport_state * ) ; t#size_t ( * epp_write_data ) ( s#parport * , const void * , t#size_t , int ) ; t#size_t ( * epp_read_data ) ( s#parport * , void * , t#size_t , int ) ; t#size_t ( * epp_write_addr ) ( s#parport * , const void * , t#size_t , int ) ; t#size_t ( * epp_read_addr ) ( s#parport * , void * , t#size_t , int ) ; t#size_t ( * ecp_write_data ) ( s#parport * , const void * , t#size_t , int ) ; t#size_t ( * ecp_read_data ) ( s#parport * , void * , t#size_t , int ) ; t#size_t ( * ecp_write_addr ) ( s#parport * , const void * , t#size_t , int ) ; t#size_t ( * compat_write_data ) ( s#parport * , const void * , t#size_t , int ) ; t#size_t ( * nibble_read_data ) ( s#parport * , void * , t#size_t , int ) ; t#size_t ( * byte_read_data ) ( s#parport * , void * , t#size_t , int ) ; s#module * owner ; } 
s#parport struct parport { unsigned long base ; unsigned long base_hi ; unsigned int size ; const char * name ; unsigned int modes ; int irq ; int dma ; int muxport ; int portnum ; s#device * dev ; s#parport * physport ; s#pardevice * devices ; s#pardevice * cad ; int daisy ; int muxsel ; s#pardevice * waithead ; s#pardevice * waittail ; s#list_head list ; unsigned int flags ; void * sysctl_table ; s#parport_device_info probe_info [ 5 ] ; s#ieee1284_info ieee1284 ; s#parport_operations * ops ; void * private_data ; int number ; t#spinlock_t pardevice_lock ; t#spinlock_t waitlist_lock ; t#rwlock_t cad_lock ; int spintime ; t#atomic_t ref_count ; unsigned long devflags ; s#pardevice * proc_device ; s#list_head full_list ; s#parport * slaves [ 3 ] ; } 
parport_negotiate extern int parport_negotiate ( s#parport * , int ) 
parport_write extern t#ssize_t parport_write ( s#parport * , const void * , t#size_t ) 
parport_read extern t#ssize_t parport_read ( s#parport * , void * , t#size_t ) 
parport_wait_peripheral extern int parport_wait_peripheral ( s#parport * , unsigned char , unsigned char ) 
parport_wait_event extern int parport_wait_event ( s#parport * , long ) 
parport_set_timeout extern long parport_set_timeout ( s#pardevice * , long ) 
parport_ieee1284_interrupt extern void parport_ieee1284_interrupt ( void * ) 

/* drivers/parport/ieee1284_ops.o */
s##device
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
parport_ieee1284_ecp_write_data extern t#size_t parport_ieee1284_ecp_write_data ( s#parport * , const void * , t#size_t , int ) 
parport_ieee1284_ecp_read_data extern t#size_t parport_ieee1284_ecp_read_data ( s#parport * , void * , t#size_t , int ) 
parport_ieee1284_ecp_write_addr extern t#size_t parport_ieee1284_ecp_write_addr ( s#parport * , const void * , t#size_t , int ) 
parport_ieee1284_write_compat extern t#size_t parport_ieee1284_write_compat ( s#parport * , const void * , t#size_t , int ) 
parport_ieee1284_read_nibble extern t#size_t parport_ieee1284_read_nibble ( s#parport * , void * , t#size_t , int ) 
parport_ieee1284_read_byte extern t#size_t parport_ieee1284_read_byte ( s#parport * , void * , t#size_t , int ) 
parport_ieee1284_epp_write_data extern t#size_t parport_ieee1284_epp_write_data ( s#parport * , const void * , t#size_t , int ) 
parport_ieee1284_epp_read_data extern t#size_t parport_ieee1284_epp_read_data ( s#parport * , void * , t#size_t , int ) 
parport_ieee1284_epp_write_addr extern t#size_t parport_ieee1284_epp_write_addr ( s#parport * , const void * , t#size_t , int ) 
parport_ieee1284_epp_read_addr extern t#size_t parport_ieee1284_epp_read_addr ( s#parport * , void * , t#size_t , int ) 

/* drivers/parport/parport_pc.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
parport_pc_probe_port extern s#parport * parport_pc_probe_port ( unsigned long , unsigned long , int , int , s#device * , int ) 
parport_pc_unregister_port extern void parport_pc_unregister_port ( s#parport * ) 

/* drivers/parport/share.o */
s##device
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
parport_claim extern int parport_claim ( s#pardevice * ) 
parport_claim_or_block extern int parport_claim_or_block ( s#pardevice * ) 
parport_release extern void parport_release ( s#pardevice * ) 
parport_register_port s#parport * parport_register_port ( unsigned long , int , int , s#parport_operations * ) 
parport_announce_port void parport_announce_port ( s#parport * ) 
parport_remove_port extern void parport_remove_port ( s#parport * ) 
s#parport_driver struct parport_driver { const char * name ; void ( * attach ) ( s#parport * ) ; void ( * detach ) ( s#parport * ) ; s#list_head list ; } 
parport_register_driver extern int parport_register_driver ( s#parport_driver * ) 
parport_unregister_driver extern void parport_unregister_driver ( s#parport_driver * ) 
parport_register_device s#pardevice * parport_register_device ( s#parport * , const char * , int ( * ) ( void * ) , void ( * ) ( void * ) , void ( * ) ( void * ) , int , void * ) 
parport_unregister_device extern void parport_unregister_device ( s#pardevice * ) 
parport_get_port extern s#parport * parport_get_port ( s#parport * ) 
parport_put_port extern void parport_put_port ( s#parport * ) 
parport_find_number extern s#parport * parport_find_number ( int ) 
parport_find_base extern s#parport * parport_find_base ( unsigned long ) 
parport_irq_handler extern t#irqreturn_t parport_irq_handler ( int , void * ) 

/* drivers/pci/access.o */
s##proc_dir_entry
s##hotplug_slot
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##device_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##bus_type_private
s##driver_private
s##pcie_link_state
s#pci_vpd_ops struct pci_vpd_ops { t#ssize_t ( * read ) ( s#pci_dev * , t#loff_t , t#size_t , void * ) ; t#ssize_t ( * write ) ( s#pci_dev * , t#loff_t , t#size_t , const void * ) ; void ( * release ) ( s#pci_dev * ) ; } 
s#pci_vpd struct pci_vpd { unsigned int len ; const s#pci_vpd_ops * ops ; s#bin_attribute * attr ; } 
s#pci_sriov struct pci_sriov { int pos ; int nres ; t#u32 cap ; t#u16 ctrl ; t#u16 total ; t#u16 initial ; t#u16 nr_virtfn ; t#u16 offset ; t#u16 stride ; t#u32 pgsz ; t#u8 link ; s#pci_dev * dev ; s#pci_dev * self ; s#mutex lock ; s#work_struct mtask ; t#u8 * mstate ; } 
s#pci_ats struct pci_ats { int pos ; int stu ; int qdep ; int ref_cnt ; int is_enabled : 1 ; } 
pci_bus_read_config_byte int pci_bus_read_config_byte ( s#pci_bus * , unsigned int , int , t#u8 * ) 
pci_bus_read_config_word int pci_bus_read_config_word ( s#pci_bus * , unsigned int , int , t#u16 * ) 
pci_bus_read_config_dword int pci_bus_read_config_dword ( s#pci_bus * , unsigned int , int , t#u32 * ) 
pci_bus_write_config_byte int pci_bus_write_config_byte ( s#pci_bus * , unsigned int , int , t#u8 ) 
pci_bus_write_config_word int pci_bus_write_config_word ( s#pci_bus * , unsigned int , int , t#u16 ) 
pci_bus_write_config_dword int pci_bus_write_config_dword ( s#pci_bus * , unsigned int , int , t#u32 ) 
pci_bus_set_ops s#pci_ops * pci_bus_set_ops ( s#pci_bus * , s#pci_ops * ) 
pci_read_vpd t#ssize_t pci_read_vpd ( s#pci_dev * , t#loff_t , t#size_t , void * ) 
pci_write_vpd t#ssize_t pci_write_vpd ( s#pci_dev * , t#loff_t , t#size_t , const void * ) 
pci_vpd_truncate int pci_vpd_truncate ( s#pci_dev * , t#size_t ) 
pci_block_user_cfg_access extern void pci_block_user_cfg_access ( s#pci_dev * ) 
pci_unblock_user_cfg_access extern void pci_unblock_user_cfg_access ( s#pci_dev * ) 

/* drivers/pci/bus.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##seq_file
s##radix_tree_node
s##writeback_control
s##kiocb
s##iovec
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##hotplug_slot
s##device_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##bus_type_private
s##driver_private
s##pcie_link_state
pci_bus_resource_n s#resource * pci_bus_resource_n ( const s#pci_bus * , int ) 
pci_bus_alloc_resource int __attribute__ ( ( warn_unused_result ) ) pci_bus_alloc_resource ( s#pci_bus * , s#resource * , t#resource_size_t , t#resource_size_t , t#resource_size_t , unsigned int , void ( * ) ( void * , s#resource * , t#resource_size_t , t#resource_size_t ) , void * ) 
pci_bus_add_device int __attribute__ ( ( warn_unused_result ) ) pci_bus_add_device ( s#pci_dev * ) 
pci_bus_add_devices void pci_bus_add_devices ( const s#pci_bus * ) 
pci_enable_bridges void pci_enable_bridges ( s#pci_bus * ) 

/* drivers/pci/hotplug-pci.o */
s##proc_dir_entry
s##hotplug_slot
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##device_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##bus_type_private
s##driver_private
s##pcie_link_state
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
pci_do_scan_bus extern unsigned int pci_do_scan_bus ( s#pci_bus * ) 

/* drivers/pci/hotplug/acpi_pcihp.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
e#pci_bus_speed enum pci_bus_speed { PCI_SPEED_33MHz = 0x00 , PCI_SPEED_66MHz = 0x01 , PCI_SPEED_66MHz_PCIX = 0x02 , PCI_SPEED_100MHz_PCIX = 0x03 , PCI_SPEED_133MHz_PCIX = 0x04 , PCI_SPEED_66MHz_PCIX_ECC = 0x05 , PCI_SPEED_100MHz_PCIX_ECC = 0x06 , PCI_SPEED_133MHz_PCIX_ECC = 0x07 , PCI_SPEED_66MHz_PCIX_266 = 0x09 , PCI_SPEED_100MHz_PCIX_266 = 0x0a , PCI_SPEED_133MHz_PCIX_266 = 0x0b , PCI_SPEED_66MHz_PCIX_533 = 0x11 , PCI_SPEED_100MHz_PCIX_533 = 0x12 , PCI_SPEED_133MHz_PCIX_533 = 0x13 , PCI_SPEED_UNKNOWN = 0xff , } 
s#hotplug_slot_ops struct hotplug_slot_ops { s#module * owner ; const char * mod_name ; int ( * enable_slot ) ( s#hotplug_slot * ) ; int ( * disable_slot ) ( s#hotplug_slot * ) ; int ( * set_attention_status ) ( s#hotplug_slot * , t#u8 ) ; int ( * hardware_test ) ( s#hotplug_slot * , t#u32 ) ; int ( * get_power_status ) ( s#hotplug_slot * , t#u8 * ) ; int ( * get_attention_status ) ( s#hotplug_slot * , t#u8 * ) ; int ( * get_latch_status ) ( s#hotplug_slot * , t#u8 * ) ; int ( * get_adapter_status ) ( s#hotplug_slot * , t#u8 * ) ; int ( * get_max_bus_speed ) ( s#hotplug_slot * , e#pci_bus_speed * ) ; int ( * get_cur_bus_speed ) ( s#hotplug_slot * , e#pci_bus_speed * ) ; } 
s#hotplug_slot_info struct hotplug_slot_info { t#u8 power_status ; t#u8 attention_status ; t#u8 latch_status ; t#u8 adapter_status ; e#pci_bus_speed max_bus_speed ; e#pci_bus_speed cur_bus_speed ; } 
s#hotplug_slot struct hotplug_slot { s#hotplug_slot_ops * ops ; s#hotplug_slot_info * info ; void ( * release ) ( s#hotplug_slot * ) ; void * private ; s#list_head slot_list ; s#pci_slot * pci_slot ; } 
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#hpp_type0 struct hpp_type0 { t#u32 revision ; t#u8 cache_line_size ; t#u8 latency_timer ; t#u8 enable_serr ; t#u8 enable_perr ; } 
s#hpp_type1 struct hpp_type1 { t#u32 revision ; t#u8 max_mem_read ; t#u8 avg_max_split ; t#u16 tot_max_split ; } 
s#hpp_type2 struct hpp_type2 { t#u32 revision ; t#u32 unc_err_mask_and ; t#u32 unc_err_mask_or ; t#u32 unc_err_sever_and ; t#u32 unc_err_sever_or ; t#u32 cor_err_mask_and ; t#u32 cor_err_mask_or ; t#u32 adv_err_cap_and ; t#u32 adv_err_cap_or ; t#u16 pci_exp_devctl_and ; t#u16 pci_exp_devctl_or ; t#u16 pci_exp_lnkctl_and ; t#u16 pci_exp_lnkctl_or ; t#u32 sec_unc_err_sever_and ; t#u32 sec_unc_err_sever_or ; t#u32 sec_unc_err_mask_and ; t#u32 sec_unc_err_mask_or ; } 
s#hotplug_params struct hotplug_params { s#hpp_type0 * t0 ; s#hpp_type1 * t1 ; s#hpp_type2 * t2 ; s#hpp_type0 type0_data ; s#hpp_type1 type1_data ; s#hpp_type2 type2_data ; } 
pci_get_hp_params int pci_get_hp_params ( s#pci_dev * , s#hotplug_params * ) 
acpi_get_hp_hw_control_from_firmware int acpi_get_hp_hw_control_from_firmware ( s#pci_dev * , t#u32 ) 
acpi_pci_check_ejectable int acpi_pci_check_ejectable ( s#pci_bus * , t#acpi_handle ) 
acpi_pci_detect_ejectable int acpi_pci_detect_ejectable ( t#acpi_handle ) 

/* drivers/pci/hotplug/acpiphp_core.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##dma_coherent_mem
s##class_private
s##bus_type_private
s##driver_private
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#acpiphp_attention_info struct acpiphp_attention_info { int ( * set_attn ) ( s#hotplug_slot * , t#u8 ) ; int ( * get_attn ) ( s#hotplug_slot * , t#u8 * ) ; s#module * owner ; } 
acpiphp_register_attention extern int acpiphp_register_attention ( s#acpiphp_attention_info * ) 
acpiphp_unregister_attention extern int acpiphp_unregister_attention ( s#acpiphp_attention_info * ) 

/* drivers/pci/hotplug/cpci_hotplug_core.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##device_private
s##dma_coherent_mem
s##class_private
s##bus_type_private
s##driver_private
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#slot struct slot { t#u8 number ; unsigned int devfn ; s#pci_bus * bus ; s#pci_dev * dev ; unsigned int extracting ; s#hotplug_slot * hotplug_slot ; s#list_head slot_list ; } 
s#cpci_hp_controller_ops struct cpci_hp_controller_ops { int ( * query_enum ) ( void ) ; int ( * enable_irq ) ( void ) ; int ( * disable_irq ) ( void ) ; int ( * check_irq ) ( void * ) ; int ( * hardware_test ) ( s#slot * , t#u32 ) ; t#u8 ( * get_power ) ( s#slot * ) ; int ( * set_power ) ( s#slot * , int ) ; } 
s#cpci_hp_controller struct cpci_hp_controller { unsigned int irq ; unsigned long irq_flags ; char * devname ; void * dev_id ; char * name ; s#cpci_hp_controller_ops * ops ; } 
cpci_hp_register_controller extern int cpci_hp_register_controller ( s#cpci_hp_controller * ) 
cpci_hp_unregister_controller extern int cpci_hp_unregister_controller ( s#cpci_hp_controller * ) 
cpci_hp_register_bus extern int cpci_hp_register_bus ( s#pci_bus * , t#u8 , t#u8 ) 
cpci_hp_unregister_bus extern int cpci_hp_unregister_bus ( s#pci_bus * ) 
cpci_hp_start extern int cpci_hp_start ( void ) 
cpci_hp_stop extern int cpci_hp_stop ( void ) 

/* drivers/pci/hotplug/pci_hotplug_core.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##mnt_namespace
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##dma_coherent_mem
s##class_private
s##bus_type_private
s##driver_private
s##pcie_link_state
__pci_hp_register extern int __pci_hp_register ( s#hotplug_slot * , s#pci_bus * , int , const char * , s#module * , const char * ) 
pci_hp_deregister extern int pci_hp_deregister ( s#hotplug_slot * ) 
pci_hp_change_slot_info extern int __attribute__ ( ( warn_unused_result ) ) pci_hp_change_slot_info ( s#hotplug_slot * , s#hotplug_slot_info * ) 

/* drivers/pci/hotplug/pcihp_slot.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
pci_configure_slot void pci_configure_slot ( s#pci_dev * ) 

/* drivers/pci/htirq.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#ht_irq_msg struct ht_irq_msg { t#u32 address_lo ; t#u32 address_hi ; } 
t#ht_irq_update_t typedef void ( ht_irq_update_t ) ( s#pci_dev * , int , s#ht_irq_msg * ) 
__ht_create_irq int __ht_create_irq ( s#pci_dev * , int , t#ht_irq_update_t * ) 
ht_create_irq int ht_create_irq ( s#pci_dev * , int ) 
ht_destroy_irq void ht_destroy_irq ( unsigned int ) 

/* drivers/pci/iov.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
pci_enable_sriov extern int pci_enable_sriov ( s#pci_dev * , int ) 
pci_disable_sriov extern void pci_disable_sriov ( s#pci_dev * ) 
pci_sriov_migration extern t#irqreturn_t pci_sriov_migration ( s#pci_dev * ) 

/* drivers/pci/irq.o */
e#pci_lost_interrupt_reason enum pci_lost_interrupt_reason { PCI_LOST_IRQ_NO_INFORMATION = 0 , PCI_LOST_IRQ_DISABLE_MSI , PCI_LOST_IRQ_DISABLE_MSIX , PCI_LOST_IRQ_DISABLE_ACPI , } 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
pci_lost_interrupt e#pci_lost_interrupt_reason pci_lost_interrupt ( s#pci_dev * ) 

/* drivers/pci/legacy.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
pci_find_device s#pci_dev __attribute__ ( ( deprecated ) ) * pci_find_device ( unsigned int , unsigned int , s#pci_dev * ) 

/* drivers/pci/msi.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##seq_file
s##radix_tree_node
s##writeback_control
s##kiocb
s##iovec
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
pci_restore_msi_state extern void pci_restore_msi_state ( s#pci_dev * ) 
pci_enable_msi_block extern int pci_enable_msi_block ( s#pci_dev * , unsigned int ) 
pci_disable_msi extern void pci_disable_msi ( s#pci_dev * ) 
s#msix_entry struct msix_entry { t#u32 vector ; t#u16 entry ; } 
pci_enable_msix extern int pci_enable_msix ( s#pci_dev * , s#msix_entry * , int ) 
pci_disable_msix extern void pci_disable_msix ( s#pci_dev * ) 
pci_msi_enabled extern int pci_msi_enabled ( void ) 

/* drivers/pci/pci.o */
pci_power_names extern const char * pci_power_names [ ] 
s##proc_dir_entry
s##hotplug_slot
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##device_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##bus_type_private
s##driver_private
s##pcie_link_state
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
pci_bus_max_busnr unsigned char pci_bus_max_busnr ( s#pci_bus * ) 
pci_ioremap_bar void * pci_ioremap_bar ( s#pci_dev * , int ) 
pci_find_next_capability int pci_find_next_capability ( s#pci_dev * , t#u8 , int ) 
pci_find_ext_capability int pci_find_ext_capability ( s#pci_dev * , int ) 
pci_find_next_ht_capability int pci_find_next_ht_capability ( s#pci_dev * , int , int ) 
pci_find_ht_capability int pci_find_ht_capability ( s#pci_dev * , int ) 
__pci_complete_power_transition int __pci_complete_power_transition ( s#pci_dev * , t#pci_power_t ) 
pci_choose_state t#pci_power_t pci_choose_state ( s#pci_dev * , t#pm_message_t ) 
pci_set_dma_max_seg_size int pci_set_dma_max_seg_size ( s#pci_dev * , unsigned int ) 
pci_set_dma_seg_boundary int pci_set_dma_seg_boundary ( s#pci_dev * , unsigned long ) 
__pci_reset_function int __pci_reset_function ( s#pci_dev * ) 
pci_reset_function int pci_reset_function ( s#pci_dev * ) 
pcix_get_max_mmrbc int pcix_get_max_mmrbc ( s#pci_dev * ) 
pcix_get_mmrbc int pcix_get_mmrbc ( s#pci_dev * ) 
pcix_set_mmrbc int pcix_set_mmrbc ( s#pci_dev * , int ) 
pcie_get_readrq int pcie_get_readrq ( s#pci_dev * ) 
pcie_set_readrq int pcie_set_readrq ( s#pci_dev * , int ) 
pci_fixup_cardbus void pci_fixup_cardbus ( s#pci_bus * ) 
pci_reenable_device int __attribute__ ( ( warn_unused_result ) ) pci_reenable_device ( s#pci_dev * ) 
pci_enable_device_io int __attribute__ ( ( warn_unused_result ) ) pci_enable_device_io ( s#pci_dev * ) 
pci_enable_device_mem int __attribute__ ( ( warn_unused_result ) ) pci_enable_device_mem ( s#pci_dev * ) 
pci_enable_device int __attribute__ ( ( warn_unused_result ) ) pci_enable_device ( s#pci_dev * ) 
pcim_enable_device int __attribute__ ( ( warn_unused_result ) ) pcim_enable_device ( s#pci_dev * ) 
pcim_pin_device void pcim_pin_device ( s#pci_dev * ) 
pci_disable_device void pci_disable_device ( s#pci_dev * ) 
pci_find_capability int pci_find_capability ( s#pci_dev * , int ) 
pci_bus_find_capability int pci_bus_find_capability ( s#pci_bus * , unsigned int , int ) 
pci_release_regions void pci_release_regions ( s#pci_dev * ) 
pci_request_regions int __attribute__ ( ( warn_unused_result ) ) pci_request_regions ( s#pci_dev * , const char * ) 
pci_request_regions_exclusive int __attribute__ ( ( warn_unused_result ) ) pci_request_regions_exclusive ( s#pci_dev * , const char * ) 
pci_release_region void pci_release_region ( s#pci_dev * , int ) 
pci_request_region int __attribute__ ( ( warn_unused_result ) ) pci_request_region ( s#pci_dev * , int , const char * ) 
pci_request_region_exclusive int __attribute__ ( ( warn_unused_result ) ) pci_request_region_exclusive ( s#pci_dev * , int , const char * ) 
pci_release_selected_regions void pci_release_selected_regions ( s#pci_dev * , int ) 
pci_request_selected_regions int pci_request_selected_regions ( s#pci_dev * , int , const char * ) 
pci_request_selected_regions_exclusive int pci_request_selected_regions_exclusive ( s#pci_dev * , int , const char * ) 
pci_set_master void pci_set_master ( s#pci_dev * ) 
pci_clear_master void pci_clear_master ( s#pci_dev * ) 
pci_set_mwi int __attribute__ ( ( warn_unused_result ) ) pci_set_mwi ( s#pci_dev * ) 
pci_try_set_mwi int pci_try_set_mwi ( s#pci_dev * ) 
pci_clear_mwi void pci_clear_mwi ( s#pci_dev * ) 
pci_intx void pci_intx ( s#pci_dev * , int ) 
pci_set_dma_mask int pci_set_dma_mask ( s#pci_dev * , t#u64 ) 
pci_set_consistent_dma_mask int pci_set_consistent_dma_mask ( s#pci_dev * , t#u64 ) 
pci_assign_resource int __attribute__ ( ( warn_unused_result ) ) pci_assign_resource ( s#pci_dev * , int ) 
pci_find_parent_resource s#resource * pci_find_parent_resource ( const s#pci_dev * , s#resource * ) 
pci_select_bars int pci_select_bars ( s#pci_dev * , unsigned long ) 
pci_set_power_state int pci_set_power_state ( s#pci_dev * , t#pci_power_t ) 
pci_save_state int pci_save_state ( s#pci_dev * ) 
pci_restore_state int pci_restore_state ( s#pci_dev * ) 
pci_pme_capable t#bool pci_pme_capable ( s#pci_dev * , t#pci_power_t ) 
pci_pme_active void pci_pme_active ( s#pci_dev * , t#bool ) 
pci_enable_wake int pci_enable_wake ( s#pci_dev * , t#pci_power_t , t#bool ) 
pci_wake_from_d3 int pci_wake_from_d3 ( s#pci_dev * , t#bool ) 
pci_target_state t#pci_power_t pci_target_state ( s#pci_dev * ) 
pci_prepare_to_sleep int pci_prepare_to_sleep ( s#pci_dev * ) 
pci_back_from_sleep int pci_back_from_sleep ( s#pci_dev * ) 
e#pcie_reset_state enum pcie_reset_state { pcie_deassert_reset = ( pcie_reset_state_t ) 1 , pcie_warm_reset = ( pcie_reset_state_t ) 2 , pcie_hot_reset = ( pcie_reset_state_t ) 3 } 
pci_set_pcie_reset_state int pci_set_pcie_reset_state ( s#pci_dev * , e#pcie_reset_state ) 

/* drivers/pci/pci-driver.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
pci_add_dynid int pci_add_dynid ( s#pci_driver * , unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , unsigned int , unsigned long ) 
pci_match_id const s#pci_device_id * pci_match_id ( const s#pci_device_id * , s#pci_dev * ) 
__pci_register_driver int __attribute__ ( ( warn_unused_result ) ) __pci_register_driver ( s#pci_driver * , s#module * , const char * ) 
pci_unregister_driver void pci_unregister_driver ( s#pci_driver * ) 
pci_dev_driver s#pci_driver * pci_dev_driver ( const s#pci_dev * ) 
pci_bus_type extern s#bus_type pci_bus_type 
pci_dev_get extern s#pci_dev * pci_dev_get ( s#pci_dev * ) 
pci_dev_put extern void pci_dev_put ( s#pci_dev * ) 

/* drivers/pci/pcie/aer/aerdrv.o */
aer_irq extern t#irqreturn_t aer_irq ( int , void * ) 

/* drivers/pci/pcie/aer/aerdrv_core.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##backing_dev_info
s##io_context
s##dentry
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
pci_enable_pcie_error_reporting extern int pci_enable_pcie_error_reporting ( s#pci_dev * ) 
pci_disable_pcie_error_reporting extern int pci_disable_pcie_error_reporting ( s#pci_dev * ) 
pci_cleanup_aer_uncorrect_error_status extern int pci_cleanup_aer_uncorrect_error_status ( s#pci_dev * ) 

/* drivers/pci/pcie/aspm.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s#aspm_latency struct aspm_latency { t#u32 l0s ; t#u32 l1 ; } 
s#pcie_link_state struct pcie_link_state { s#pci_dev * pdev ; s#pcie_link_state * root ; s#pcie_link_state * parent ; s#list_head sibling ; s#list_head children ; s#list_head link ; t#u32 aspm_support : 3 ; t#u32 aspm_enabled : 3 ; t#u32 aspm_capable : 3 ; t#u32 aspm_default : 3 ; t#u32 aspm_disable : 3 ; t#u32 clkpm_capable : 1 ; t#u32 clkpm_enabled : 1 ; t#u32 clkpm_default : 1 ; s#aspm_latency latency_up ; s#aspm_latency latency_dw ; s#aspm_latency acceptable [ 8 ] ; } 
pci_disable_link_state extern void pci_disable_link_state ( s#pci_dev * , int ) 
pcie_aspm_enabled extern int pcie_aspm_enabled ( void ) 

/* drivers/pci/pcie/portdrv_bus.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##device_private
s##driver_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##bus_type_private
pcie_port_bus_type extern s#bus_type pcie_port_bus_type 

/* drivers/pci/pcie/portdrv_core.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s#pcie_device struct pcie_device { int irq ; s#pci_dev * port ; t#u32 service ; void * priv_data ; s#device device ; } 
s#pcie_port_service_driver struct pcie_port_service_driver { const char * name ; int ( * probe ) ( s#pcie_device * ) ; void ( * remove ) ( s#pcie_device * ) ; int ( * suspend ) ( s#pcie_device * ) ; int ( * resume ) ( s#pcie_device * ) ; s#pci_error_handlers * err_handler ; t#pci_ers_result_t ( * reset_link ) ( s#pci_dev * ) ; int port_type ; t#u32 service ; s#device_driver driver ; } 
pcie_port_service_register extern int pcie_port_service_register ( s#pcie_port_service_driver * ) 
pcie_port_service_unregister extern void pcie_port_service_unregister ( s#pcie_port_service_driver * ) 

/* drivers/pci/probe.o */
pci_root_buses extern s#list_head pci_root_buses 
no_pci_devices extern int no_pci_devices ( void ) 
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
alloc_pci_dev extern s#pci_dev * alloc_pci_dev ( void ) 
pci_scan_single_device s#pci_dev * pci_scan_single_device ( s#pci_bus * , int ) 
pci_scan_bus_parented s#pci_bus * pci_scan_bus_parented ( s#device * , int , s#pci_ops * , void * ) 
pci_rescan_bus unsigned int pci_rescan_bus ( s#pci_bus * ) 
pci_add_new_bus s#pci_bus * pci_add_new_bus ( s#pci_bus * , s#pci_dev * , int ) 
pci_scan_slot int pci_scan_slot ( s#pci_bus * , int ) 
pci_scan_bridge int pci_scan_bridge ( s#pci_bus * , s#pci_dev * , int , int ) 
pci_scan_child_bus unsigned int pci_scan_child_bus ( s#pci_bus * ) 

/* drivers/pci/quirks.o */
isa_dma_bridge_buggy int isa_dma_bridge_buggy 
pci_pci_problems extern int pci_pci_problems 
e#pci_fixup_pass enum pci_fixup_pass { pci_fixup_early , pci_fixup_header , pci_fixup_final , pci_fixup_enable , pci_fixup_resume , pci_fixup_suspend , pci_fixup_resume_early , } 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
pci_fixup_device void pci_fixup_device ( e#pci_fixup_pass , s#pci_dev * ) 

/* drivers/pci/remove.o */
s##proc_dir_entry
s##hotplug_slot
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##device_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##bus_type_private
s##driver_private
s##pcie_link_state
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
pci_remove_bus extern void pci_remove_bus ( s#pci_bus * ) 
pci_remove_bus_device extern void pci_remove_bus_device ( s#pci_dev * ) 
pci_remove_behind_bridge void pci_remove_behind_bridge ( s#pci_dev * ) 
pci_stop_bus_device extern void pci_stop_bus_device ( s#pci_dev * ) 

/* drivers/pci/rom.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
pci_map_rom void __attribute__ ( ( warn_unused_result ) ) * pci_map_rom ( s#pci_dev * , t#size_t * ) 
pci_unmap_rom void pci_unmap_rom ( s#pci_dev * , void * ) 
pci_enable_rom int pci_enable_rom ( s#pci_dev * ) 
pci_disable_rom void pci_disable_rom ( s#pci_dev * ) 

/* drivers/pci/search.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
pci_get_domain_bus_and_slot s#pci_dev * pci_get_domain_bus_and_slot ( int , unsigned int , unsigned int ) 
pci_dev_present int pci_dev_present ( const s#pci_device_id * ) 
pci_find_bus extern s#pci_bus * pci_find_bus ( int , int ) 
pci_find_next_bus s#pci_bus * pci_find_next_bus ( const s#pci_bus * ) 
pci_get_device s#pci_dev * pci_get_device ( unsigned int , unsigned int , s#pci_dev * ) 
pci_get_subsys s#pci_dev * pci_get_subsys ( unsigned int , unsigned int , unsigned int , unsigned int , s#pci_dev * ) 
pci_get_slot s#pci_dev * pci_get_slot ( s#pci_bus * , unsigned int ) 
pci_get_class s#pci_dev * pci_get_class ( unsigned int , s#pci_dev * ) 

/* drivers/pci/setup-bus.o */
s##proc_dir_entry
s##hotplug_slot
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##device_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##bus_type_private
s##driver_private
s##pcie_link_state
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
pci_setup_cardbus void pci_setup_cardbus ( s#pci_bus * ) 
pci_bus_size_bridges void pci_bus_size_bridges ( s#pci_bus * ) 
pci_bus_assign_resources void pci_bus_assign_resources ( const s#pci_bus * ) 

/* drivers/pci/setup-res.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
pci_claim_resource int pci_claim_resource ( s#pci_dev * , int ) 

/* drivers/pci/slot.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
pci_slots_kset extern s#kset * pci_slots_kset 
s##proc_dir_entry
s##device_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##bus_type_private
s##driver_private
s##pcie_link_state
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
pci_create_slot s#pci_slot * pci_create_slot ( s#pci_bus * , int , const char * , s#hotplug_slot * ) 
pci_renumber_slot void pci_renumber_slot ( s#pci_slot * , int ) 
pci_destroy_slot void pci_destroy_slot ( s#pci_slot * ) 
pci_hp_create_module_link extern void pci_hp_create_module_link ( s#pci_slot * ) 
pci_hp_remove_module_link extern void pci_hp_remove_module_link ( s#pci_slot * ) 

/* drivers/pcmcia/cistpl.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s#socket_state_t struct socket_state_t { t#u_int flags ; t#u_int csc_mask ; t#u_char Vcc , Vpp ; t#u_char io_irq ; } 
t#socket_state_t typedef s#socket_state_t socket_state_t 
t#u_short typedef unsigned short u_short 
s#pccard_mem_map struct pccard_mem_map { t#u_char map ; t#u_char flags ; t#u_short speed ; t#phys_addr_t static_start ; t#u_int card_start ; s#resource * res ; } 
t#pccard_mem_map typedef s#pccard_mem_map pccard_mem_map 
s#io_window_t struct io_window_t { t#u_int InUse , Config ; s#resource * res ; } 
t#io_window_t typedef s#io_window_t io_window_t 
s##pcmcia_device
s#window_t struct window_t { t#u_short magic ; t#u_short index ; s#pcmcia_device * handle ; s#pcmcia_socket * sock ; t#pccard_mem_map ctl ; } 
t#window_t typedef s#window_t window_t 
s##proc_dir_entry
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#pccard_io_map struct pccard_io_map { t#u_char map ; t#u_char flags ; t#u_short speed ; t#phys_addr_t start , stop ; } 
s#pccard_operations struct pccard_operations { int ( * init ) ( s#pcmcia_socket * ) ; int ( * suspend ) ( s#pcmcia_socket * ) ; int ( * get_status ) ( s#pcmcia_socket * , t#u_int * ) ; int ( * set_socket ) ( s#pcmcia_socket * , t#socket_state_t * ) ; int ( * set_io_map ) ( s#pcmcia_socket * , s#pccard_io_map * ) ; int ( * set_mem_map ) ( s#pcmcia_socket * , s#pccard_mem_map * ) ; } 
s#pccard_resource_ops struct pccard_resource_ops { int ( * validate_mem ) ( s#pcmcia_socket * ) ; int ( * adjust_io_region ) ( s#resource * , unsigned long , unsigned long , s#pcmcia_socket * ) ; s#resource * ( * find_io ) ( unsigned long , int , unsigned long , s#pcmcia_socket * ) ; s#resource * ( * find_mem ) ( unsigned long , unsigned long , unsigned long , int , s#pcmcia_socket * ) ; int ( * add_io ) ( s#pcmcia_socket * , unsigned int , unsigned long , unsigned long ) ; int ( * add_mem ) ( s#pcmcia_socket * , unsigned int , unsigned long , unsigned long ) ; int ( * init ) ( s#pcmcia_socket * ) ; void ( * exit ) ( s#pcmcia_socket * ) ; } 
t#event_t typedef t#u_int event_t 
s#pcmcia_callback struct pcmcia_callback { s#module * owner ; int ( * event ) ( s#pcmcia_socket * , t#event_t , int ) ; void ( * requery ) ( s#pcmcia_socket * , int ) ; int ( * suspend ) ( s#pcmcia_socket * ) ; int ( * resume ) ( s#pcmcia_socket * ) ; } 
s##user_info_t
s#pcmcia_socket struct pcmcia_socket { s#module * owner ; t#spinlock_t lock ; t#socket_state_t socket ; t#u_int state ; t#u_short functions ; t#u_short lock_count ; t#pccard_mem_map cis_mem ; void * cis_virt ; struct { t#u_int AssignedIRQ ; t#u_int Config ; } irq ; t#io_window_t io [ 2 ] ; t#window_t win [ 4 ] ; s#list_head cis_cache ; t#size_t fake_cis_len ; t#u8 * fake_cis ; s#list_head socket_list ; s#completion socket_released ; unsigned int sock ; t#u_int features ; t#u_int irq_mask ; t#u_int map_size ; t#u_int io_offset ; t#u_char pci_irq ; s#pci_dev * cb_dev ; t#u8 resource_setup_done : 1 ; t#u8 resource_setup_old : 1 ; t#u8 resource_setup_new : 1 ; t#u8 reserved : 5 ; s#pccard_operations * ops ; s#pccard_resource_ops * resource_ops ; void * resource_data ; void ( * zoom_video ) ( s#pcmcia_socket * , int ) ; int ( * power_hook ) ( s#pcmcia_socket * , int ) ; void ( * tune_bridge ) ( s#pcmcia_socket * , s#pci_bus * ) ; s#task_struct * thread ; s#completion thread_done ; unsigned int thread_events ; s#mutex skt_mutex ; t#spinlock_t thread_lock ; s#pcmcia_callback * callback ; s#list_head devices_list ; t#u8 device_count ; struct { t#u8 present : 1 ; t#u8 busy : 1 ; t#u8 dead : 1 ; t#u8 device_add_pending : 1 ; t#u8 mfc_pfc : 1 ; t#u8 reserved : 3 ; } pcmcia_state ; s#work_struct device_add ; s#user_info_t * user ; t#wait_queue_head_t queue ; s#resource * cb_cis_res ; void * cb_cis_virt ; s#device dev ; void * driver_data ; int resume_status ; } 
release_cis_mem void release_cis_mem ( s#pcmcia_socket * ) 
pcmcia_read_cis_mem int pcmcia_read_cis_mem ( s#pcmcia_socket * , int , t#u_int , t#u_int , void * ) 
pcmcia_write_cis_mem void pcmcia_write_cis_mem ( s#pcmcia_socket * , int , t#u_int , t#u_int , void * ) 
destroy_cis_cache void destroy_cis_cache ( s#pcmcia_socket * ) 
pcmcia_replace_cis int pcmcia_replace_cis ( s#pcmcia_socket * , const t#u8 * , const t#size_t ) 
t#cisdata_t typedef t#u_char cisdata_t 
s#tuple_t struct tuple_t { t#u_int Attributes ; t#cisdata_t DesiredTuple ; t#u_int Flags ; t#u_int LinkOffset ; t#u_int CISOffset ; t#cisdata_t TupleCode ; t#cisdata_t TupleLink ; t#cisdata_t TupleOffset ; t#cisdata_t TupleDataMax ; t#cisdata_t TupleDataLen ; t#cisdata_t * TupleData ; } 
t#tuple_t typedef s#tuple_t tuple_t 
pccard_get_first_tuple int pccard_get_first_tuple ( s#pcmcia_socket * , unsigned int , t#tuple_t * ) 
pccard_get_next_tuple int pccard_get_next_tuple ( s#pcmcia_socket * , unsigned int , t#tuple_t * ) 
pccard_get_tuple_data int pccard_get_tuple_data ( s#pcmcia_socket * , t#tuple_t * ) 
s#cistpl_device_t struct cistpl_device_t { t#u_char ndev ; struct { t#u_char type ; t#u_char wp ; t#u_int speed ; t#u_int size ; } dev [ 4 ] ; } 
t#cistpl_device_t typedef s#cistpl_device_t cistpl_device_t 
s#cistpl_checksum_t struct cistpl_checksum_t { t#u_short addr ; t#u_short len ; t#u_char sum ; } 
t#cistpl_checksum_t typedef s#cistpl_checksum_t cistpl_checksum_t 
s#cistpl_longlink_t struct cistpl_longlink_t { t#u_int addr ; } 
t#cistpl_longlink_t typedef s#cistpl_longlink_t cistpl_longlink_t 
s#cistpl_longlink_mfc_t struct cistpl_longlink_mfc_t { t#u_char nfn ; struct { t#u_char space ; t#u_int addr ; } fn [ 8 ] ; } 
t#cistpl_longlink_mfc_t typedef s#cistpl_longlink_mfc_t cistpl_longlink_mfc_t 
s#cistpl_vers_1_t struct cistpl_vers_1_t { t#u_char major ; t#u_char minor ; t#u_char ns ; t#u_char ofs [ 4 ] ; char str [ 254 ] ; } 
t#cistpl_vers_1_t typedef s#cistpl_vers_1_t cistpl_vers_1_t 
s#cistpl_altstr_t struct cistpl_altstr_t { t#u_char ns ; t#u_char ofs [ 4 ] ; char str [ 254 ] ; } 
t#cistpl_altstr_t typedef s#cistpl_altstr_t cistpl_altstr_t 
s#cistpl_jedec_t struct cistpl_jedec_t { t#u_char nid ; struct { t#u_char mfr ; t#u_char info ; } id [ 4 ] ; } 
t#cistpl_jedec_t typedef s#cistpl_jedec_t cistpl_jedec_t 
s#cistpl_manfid_t struct cistpl_manfid_t { t#u_short manf ; t#u_short card ; } 
t#cistpl_manfid_t typedef s#cistpl_manfid_t cistpl_manfid_t 
s#cistpl_funcid_t struct cistpl_funcid_t { t#u_char func ; t#u_char sysinit ; } 
t#cistpl_funcid_t typedef s#cistpl_funcid_t cistpl_funcid_t 
s#cistpl_funce_t struct cistpl_funce_t { t#u_char type ; t#u_char data [ 0 ] ; } 
t#cistpl_funce_t typedef s#cistpl_funce_t cistpl_funce_t 
s#cistpl_bar_t struct cistpl_bar_t { t#u_char attr ; t#u_int size ; } 
t#cistpl_bar_t typedef s#cistpl_bar_t cistpl_bar_t 
s#cistpl_config_t struct cistpl_config_t { t#u_char last_idx ; t#u_int base ; t#u_int rmask [ 4 ] ; t#u_char subtuples ; } 
t#cistpl_config_t typedef s#cistpl_config_t cistpl_config_t 
s#cistpl_power_t struct cistpl_power_t { t#u_char present ; t#u_char flags ; t#u_int param [ 7 ] ; } 
t#cistpl_power_t typedef s#cistpl_power_t cistpl_power_t 
s#cistpl_timing_t struct cistpl_timing_t { t#u_int wait , waitscale ; t#u_int ready , rdyscale ; t#u_int reserved , rsvscale ; } 
t#cistpl_timing_t typedef s#cistpl_timing_t cistpl_timing_t 
s#cistpl_io_t struct cistpl_io_t { t#u_char flags ; t#u_char nwin ; struct { t#u_int base ; t#u_int len ; } win [ 16 ] ; } 
t#cistpl_io_t typedef s#cistpl_io_t cistpl_io_t 
s#cistpl_irq_t struct cistpl_irq_t { t#u_int IRQInfo1 ; t#u_int IRQInfo2 ; } 
t#cistpl_irq_t typedef s#cistpl_irq_t cistpl_irq_t 
s#cistpl_mem_t struct cistpl_mem_t { t#u_char flags ; t#u_char nwin ; struct { t#u_int len ; t#u_int card_addr ; t#u_int host_addr ; } win [ 8 ] ; } 
t#cistpl_mem_t typedef s#cistpl_mem_t cistpl_mem_t 
s#cistpl_cftable_entry_t struct cistpl_cftable_entry_t { t#u_char index ; t#u_short flags ; t#u_char interface ; t#cistpl_power_t vcc , vpp1 , vpp2 ; t#cistpl_timing_t timing ; t#cistpl_io_t io ; t#cistpl_irq_t irq ; t#cistpl_mem_t mem ; t#u_char subtuples ; } 
t#cistpl_cftable_entry_t typedef s#cistpl_cftable_entry_t cistpl_cftable_entry_t 
s#cistpl_cftable_entry_cb_t struct cistpl_cftable_entry_cb_t { t#u_char index ; t#u_int flags ; t#cistpl_power_t vcc , vpp1 , vpp2 ; t#u_char io ; t#cistpl_irq_t irq ; t#u_char mem ; t#u_char subtuples ; } 
t#cistpl_cftable_entry_cb_t typedef s#cistpl_cftable_entry_cb_t cistpl_cftable_entry_cb_t 
s#cistpl_device_geo_t struct cistpl_device_geo_t { t#u_char ngeo ; struct { t#u_char buswidth ; t#u_int erase_block ; t#u_int read_block ; t#u_int write_block ; t#u_int partition ; t#u_int interleave ; } geo [ 4 ] ; } 
t#cistpl_device_geo_t typedef s#cistpl_device_geo_t cistpl_device_geo_t 
s#cistpl_vers_2_t struct cistpl_vers_2_t { t#u_char vers ; t#u_char comply ; t#u_short dindex ; t#u_char vspec8 , vspec9 ; t#u_char nhdr ; t#u_char vendor , info ; char str [ 244 ] ; } 
t#cistpl_vers_2_t typedef s#cistpl_vers_2_t cistpl_vers_2_t 
s#cistpl_org_t struct cistpl_org_t { t#u_char data_org ; char desc [ 30 ] ; } 
t#cistpl_org_t typedef s#cistpl_org_t cistpl_org_t 
s#cistpl_format_t struct cistpl_format_t { t#u_char type ; t#u_char edc ; t#u_int offset ; t#u_int length ; } 
t#cistpl_format_t typedef s#cistpl_format_t cistpl_format_t 
u#cisparse_t union cisparse_t { t#cistpl_device_t device ; t#cistpl_checksum_t checksum ; t#cistpl_longlink_t longlink ; t#cistpl_longlink_mfc_t longlink_mfc ; t#cistpl_vers_1_t version_1 ; t#cistpl_altstr_t altstr ; t#cistpl_jedec_t jedec ; t#cistpl_manfid_t manfid ; t#cistpl_funcid_t funcid ; t#cistpl_funce_t funce ; t#cistpl_bar_t bar ; t#cistpl_config_t config ; t#cistpl_cftable_entry_t cftable_entry ; t#cistpl_cftable_entry_cb_t cftable_entry_cb ; t#cistpl_device_geo_t device_geo ; t#cistpl_vers_2_t vers_2 ; t#cistpl_org_t org ; t#cistpl_format_t format ; } 
t#cisparse_t typedef u#cisparse_t cisparse_t 
pcmcia_parse_tuple int pcmcia_parse_tuple ( t#tuple_t * , t#cisparse_t * ) 
pccard_read_tuple int pccard_read_tuple ( s#pcmcia_socket * , unsigned int , t#cisdata_t , void * ) 
pccard_validate_cis int pccard_validate_cis ( s#pcmcia_socket * , unsigned int * ) 

/* drivers/pcmcia/cs.o */
dead_socket extern t#socket_state_t dead_socket 
pcmcia_socket_list extern s#list_head pcmcia_socket_list 
pcmcia_socket_list_rwsem extern s#rw_semaphore pcmcia_socket_list_rwsem 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
pcmcia_socket_dev_suspend extern int pcmcia_socket_dev_suspend ( s#device * ) 
pcmcia_socket_dev_early_resume extern void pcmcia_socket_dev_early_resume ( s#device * ) 
pcmcia_socket_dev_late_resume extern void pcmcia_socket_dev_late_resume ( s#device * ) 
pcmcia_socket_dev_resume extern int pcmcia_socket_dev_resume ( s#device * ) 
s#io_req_t struct io_req_t { t#u_int BasePort1 ; t#u_int NumPorts1 ; t#u_int Attributes1 ; t#u_int BasePort2 ; t#u_int NumPorts2 ; t#u_int Attributes2 ; t#u_int IOAddrLines ; } 
t#io_req_t typedef s#io_req_t io_req_t 
s#config_t struct config_t { s#kref ref ; unsigned int state ; unsigned int Attributes ; unsigned int IntType ; unsigned int ConfigBase ; unsigned char Status , Pin , Copy , Option , ExtStatus ; unsigned int CardValues ; t#io_req_t io ; struct { t#u_int Attributes ; } irq ; } 
s#dev_node_t struct dev_node_t { char dev_name [ 32 ] ; t#u_short major , minor ; s#dev_node_t * next ; } 
t#dev_node_t typedef s#dev_node_t dev_node_t 
s#irq_req_t struct irq_req_t { t#u_int Attributes ; t#u_int AssignedIRQ ; t#u_int IRQInfo1 , IRQInfo2 ; void * Handler ; void * Instance ; } 
t#irq_req_t typedef s#irq_req_t irq_req_t 
s#config_req_t struct config_req_t { t#u_int Attributes ; t#u_int Vpp ; t#u_int IntType ; t#u_int ConfigBase ; t#u_char Status , Pin , Copy , ExtStatus ; t#u_char ConfigIndex ; t#u_int Present ; } 
t#config_req_t typedef s#config_req_t config_req_t 
t#window_handle_t typedef s#window_t * window_handle_t 
s#pcmcia_device_id struct pcmcia_device_id { t#__u16 match_flags ; t#__u16 manf_id ; t#__u16 card_id ; t#__u8 func_id ; t#__u8 function ; t#__u8 device_no ; t#__u32 prod_id_hash [ 4 ] __attribute__ ( ( aligned ( sizeof ( __u32 ) ) ) ) ; const char * prod_id [ 4 ] ; t#kernel_ulong_t driver_info ; char * cisfile ; } 
s#pcmcia_dynids struct pcmcia_dynids { t#spinlock_t lock ; s#list_head list ; } 
s#pcmcia_driver struct pcmcia_driver { int ( * probe ) ( s#pcmcia_device * ) ; void ( * remove ) ( s#pcmcia_device * ) ; int ( * suspend ) ( s#pcmcia_device * ) ; int ( * resume ) ( s#pcmcia_device * ) ; s#module * owner ; s#pcmcia_device_id * id_table ; s#device_driver drv ; s#pcmcia_dynids dynids ; } 
s#pcmcia_device struct pcmcia_device { s#pcmcia_socket * socket ; char * devname ; t#u8 device_no ; t#u8 func ; s#config_t * function_config ; s#list_head socket_device_list ; t#dev_node_t * dev_node ; t#u_int open ; t#io_req_t io ; t#irq_req_t irq ; t#config_req_t conf ; t#window_handle_t win ; t#u16 suspended : 1 ; t#u16 _removed : 1 ; t#u16 _irq : 1 ; t#u16 _io : 1 ; t#u16 _win : 4 ; t#u16 _locked : 1 ; t#u16 allow_func_id_match : 1 ; t#u16 has_manf_id : 1 ; t#u16 has_card_id : 1 ; t#u16 has_func_id : 1 ; t#u16 reserved : 3 ; t#u8 func_id ; t#u16 manf_id ; t#u16 card_id ; char * prod_id [ 4 ] ; t#u64 dma_mask ; s#device dev ; s#pcmcia_driver * cardmgr ; void * priv ; } 
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##user_info_t
pcmcia_get_socket s#pcmcia_socket * pcmcia_get_socket ( s#pcmcia_socket * ) 
pcmcia_put_socket void pcmcia_put_socket ( s#pcmcia_socket * ) 
pcmcia_register_socket extern int pcmcia_register_socket ( s#pcmcia_socket * ) 
pcmcia_unregister_socket extern void pcmcia_unregister_socket ( s#pcmcia_socket * ) 
pcmcia_get_socket_by_nr s#pcmcia_socket * pcmcia_get_socket_by_nr ( unsigned int ) 
pcmcia_parse_events extern void pcmcia_parse_events ( s#pcmcia_socket * , unsigned int ) 
pccard_register_pcmcia int pccard_register_pcmcia ( s#pcmcia_socket * , s#pcmcia_callback * ) 
pcmcia_reset_card int pcmcia_reset_card ( s#pcmcia_socket * ) 
pcmcia_suspend_card int pcmcia_suspend_card ( s#pcmcia_socket * ) 
pcmcia_resume_card int pcmcia_resume_card ( s#pcmcia_socket * ) 
pcmcia_eject_card int pcmcia_eject_card ( s#pcmcia_socket * ) 
pcmcia_insert_card int pcmcia_insert_card ( s#pcmcia_socket * ) 
pcmcia_socket_class extern s#class pcmcia_socket_class 

/* drivers/pcmcia/ds.o */
pcmcia_error_func const char * pcmcia_error_func ( int ) 
pcmcia_error_ret const char * pcmcia_error_ret ( int ) 
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##proc_dir_entry
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##user_info_t
pcmcia_register_driver int pcmcia_register_driver ( s#pcmcia_driver * ) 
pcmcia_unregister_driver void pcmcia_unregister_driver ( s#pcmcia_driver * ) 
pcmcia_dev_present s#pcmcia_device * pcmcia_dev_present ( s#pcmcia_device * ) 

/* drivers/pcmcia/pcmcia_resource.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##user_info_t
s#conf_reg_t struct conf_reg_t { t#u_char Function ; t#u_int Action ; t#off_t Offset ; t#u_int Value ; } 
t#conf_reg_t typedef s#conf_reg_t conf_reg_t 
pcmcia_access_configuration_register int pcmcia_access_configuration_register ( s#pcmcia_device * , t#conf_reg_t * ) 
s#win_req_t struct win_req_t { t#u_int Attributes ; t#u_long Base ; t#u_int Size ; t#u_int AccessSpeed ; } 
t#win_req_t typedef s#win_req_t win_req_t 
pcmcia_get_window int pcmcia_get_window ( s#pcmcia_socket * , t#window_handle_t * , int , t#win_req_t * ) 
t#page_t typedef t#u_short page_t 
s#memreq_t struct memreq_t { t#u_int CardOffset ; t#page_t Page ; } 
t#memreq_t typedef s#memreq_t memreq_t 
pcmcia_get_mem_page int pcmcia_get_mem_page ( t#window_handle_t , t#memreq_t * ) 
pcmcia_map_mem_page int pcmcia_map_mem_page ( t#window_handle_t , t#memreq_t * ) 
s#modconf_t struct modconf_t { t#u_int Attributes ; t#u_int Vcc , Vpp1 , Vpp2 ; } 
t#modconf_t typedef s#modconf_t modconf_t 
pcmcia_modify_configuration int pcmcia_modify_configuration ( s#pcmcia_device * , t#modconf_t * ) 
pcmcia_release_window int pcmcia_release_window ( t#window_handle_t ) 
pcmcia_request_configuration int pcmcia_request_configuration ( s#pcmcia_device * , t#config_req_t * ) 
pcmcia_request_io int pcmcia_request_io ( s#pcmcia_device * , t#io_req_t * ) 
pcmcia_request_irq int pcmcia_request_irq ( s#pcmcia_device * , t#irq_req_t * ) 
pcmcia_request_window int pcmcia_request_window ( s#pcmcia_device * * , t#win_req_t * , t#window_handle_t * ) 
pcmcia_disable_device void pcmcia_disable_device ( s#pcmcia_device * ) 
pcmcia_loop_config int pcmcia_loop_config ( s#pcmcia_device * , int ( * ) ( s#pcmcia_device * , t#cistpl_cftable_entry_t * , t#cistpl_cftable_entry_t * , unsigned int , void * ) , void * ) 

/* drivers/pcmcia/rsrc_mgr.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##pcmcia_device
s##proc_dir_entry
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##user_info_t
pcmcia_validate_mem int pcmcia_validate_mem ( s#pcmcia_socket * ) 
pcmcia_adjust_io_region int pcmcia_adjust_io_region ( s#resource * , unsigned long , unsigned long , s#pcmcia_socket * ) 
pcmcia_find_io_region s#resource * pcmcia_find_io_region ( unsigned long , int , unsigned long , s#pcmcia_socket * ) 
pcmcia_find_mem_region s#resource * pcmcia_find_mem_region ( t#u_long , t#u_long , t#u_long , int , s#pcmcia_socket * ) 
pccard_static_ops extern s#pccard_resource_ops pccard_static_ops 

/* drivers/pcmcia/rsrc_nonstatic.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##pcmcia_device
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##user_info_t
pccard_nonstatic_ops extern s#pccard_resource_ops pccard_nonstatic_ops 

/* drivers/platform/x86/sony-laptop.o */
sony_pic_camera_command int sony_pic_camera_command ( int , t#u8 ) 

/* drivers/platform/x86/wmi.o */
wmi_evaluate_method extern t#acpi_status wmi_evaluate_method ( const char * , t#u8 , t#u32 , const s#acpi_buffer * , s#acpi_buffer * ) 
wmi_query_block extern t#acpi_status wmi_query_block ( const char * , t#u8 , s#acpi_buffer * ) 
wmi_set_block extern t#acpi_status wmi_set_block ( const char * , t#u8 , const s#acpi_buffer * ) 
t#wmi_notify_handler typedef void ( * wmi_notify_handler ) ( t#u32 , void * ) 
wmi_install_notify_handler extern t#acpi_status wmi_install_notify_handler ( const char * , t#wmi_notify_handler , void * ) 
wmi_remove_notify_handler extern t#acpi_status wmi_remove_notify_handler ( const char * ) 
wmi_get_event_data extern t#acpi_status wmi_get_event_data ( t#u32 , s#acpi_buffer * ) 
wmi_has_guid extern t#bool wmi_has_guid ( const char * ) 

/* drivers/pnp/card.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s#pnp_protocol struct pnp_protocol { s#list_head protocol_list ; char * name ; int ( * get ) ( s#pnp_dev * ) ; int ( * set ) ( s#pnp_dev * ) ; int ( * disable ) ( s#pnp_dev * ) ; int ( * suspend ) ( s#pnp_dev * , t#pm_message_t ) ; int ( * resume ) ( s#pnp_dev * ) ; unsigned char number ; s#device dev ; s#list_head cards ; s#list_head devices ; } 
s#pnp_id struct pnp_id { char id [ 8 ] ; s#pnp_id * next ; } 
s##proc_dir_entry
s#pnp_card struct pnp_card { s#device dev ; unsigned char number ; s#list_head global_list ; s#list_head protocol_list ; s#list_head devices ; s#pnp_protocol * protocol ; s#pnp_id * id ; char name [ 50 ] ; unsigned char pnpver ; unsigned char productver ; unsigned int serial ; unsigned char checksum ; s#proc_dir_entry * procdir ; } 
s#pnp_device_id struct pnp_device_id { t#__u8 id [ 8 ] ; t#kernel_ulong_t driver_data ; } 
s#pnp_driver struct pnp_driver { char * name ; const s#pnp_device_id * id_table ; unsigned int flags ; int ( * probe ) ( s#pnp_dev * , const s#pnp_device_id * ) ; void ( * remove ) ( s#pnp_dev * ) ; void ( * shutdown ) ( s#pnp_dev * ) ; int ( * suspend ) ( s#pnp_dev * , t#pm_message_t ) ; int ( * resume ) ( s#pnp_dev * ) ; s#device_driver driver ; } 
s#pnp_card_device_id struct pnp_card_device_id { t#__u8 id [ 8 ] ; t#kernel_ulong_t driver_data ; struct { t#__u8 id [ 8 ] ; } devs [ 8 ] ; } 
s#pnp_card_driver struct pnp_card_driver { s#list_head global_list ; char * name ; const s#pnp_card_device_id * id_table ; unsigned int flags ; int ( * probe ) ( s#pnp_card_link * , const s#pnp_card_device_id * ) ; void ( * remove ) ( s#pnp_card_link * ) ; int ( * suspend ) ( s#pnp_card_link * , t#pm_message_t ) ; int ( * resume ) ( s#pnp_card_link * ) ; s#pnp_driver link ; } 
s#pnp_card_link struct pnp_card_link { s#pnp_card * card ; s#pnp_card_driver * driver ; void * driver_data ; t#pm_message_t pm_state ; } 
s#pnp_dev struct pnp_dev { s#device dev ; t#u64 dma_mask ; unsigned int number ; int status ; s#list_head global_list ; s#list_head protocol_list ; s#list_head card_list ; s#list_head rdev_list ; s#pnp_protocol * protocol ; s#pnp_card * card ; s#pnp_driver * driver ; s#pnp_card_link * card_link ; s#pnp_id * id ; int active ; int capabilities ; unsigned int num_dependent_sets ; s#list_head resources ; s#list_head options ; char name [ 50 ] ; int flags ; s#proc_dir_entry * procent ; void * data ; } 
pnp_request_card_device s#pnp_dev * pnp_request_card_device ( s#pnp_card_link * , const char * , s#pnp_dev * ) 
pnp_release_card_device void pnp_release_card_device ( s#pnp_dev * ) 
pnp_register_card_driver int pnp_register_card_driver ( s#pnp_card_driver * ) 
pnp_unregister_card_driver void pnp_unregister_card_driver ( s#pnp_card_driver * ) 

/* drivers/pnp/core.o */
pnp_platform_devices extern int pnp_platform_devices 

/* drivers/pnp/driver.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##proc_dir_entry
pnp_register_driver int pnp_register_driver ( s#pnp_driver * ) 
pnp_unregister_driver void pnp_unregister_driver ( s#pnp_driver * ) 
pnp_device_attach int pnp_device_attach ( s#pnp_dev * ) 
pnp_device_detach void pnp_device_detach ( s#pnp_dev * ) 

/* drivers/pnp/manager.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##proc_dir_entry
pnp_start_dev int pnp_start_dev ( s#pnp_dev * ) 
pnp_stop_dev int pnp_stop_dev ( s#pnp_dev * ) 
pnp_activate_dev int pnp_activate_dev ( s#pnp_dev * ) 
pnp_disable_dev int pnp_disable_dev ( s#pnp_dev * ) 

/* drivers/pnp/resource.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##proc_dir_entry
pnp_get_resource s#resource * pnp_get_resource ( s#pnp_dev * , unsigned long , unsigned int ) 
pnp_possible_config int pnp_possible_config ( s#pnp_dev * , int , t#resource_size_t , t#resource_size_t ) 
pnp_range_reserved int pnp_range_reserved ( t#resource_size_t , t#resource_size_t ) 

/* drivers/pnp/support.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##proc_dir_entry
pnp_is_active int pnp_is_active ( s#pnp_dev * ) 

/* drivers/power/power_supply_core.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
power_supply_class extern s#class * power_supply_class 
e#power_supply_type enum power_supply_type { POWER_SUPPLY_TYPE_BATTERY = 0 , POWER_SUPPLY_TYPE_UPS , POWER_SUPPLY_TYPE_MAINS , POWER_SUPPLY_TYPE_USB , } 
e#power_supply_property enum power_supply_property { POWER_SUPPLY_PROP_STATUS = 0 , POWER_SUPPLY_PROP_CHARGE_TYPE , POWER_SUPPLY_PROP_HEALTH , POWER_SUPPLY_PROP_PRESENT , POWER_SUPPLY_PROP_ONLINE , POWER_SUPPLY_PROP_TECHNOLOGY , POWER_SUPPLY_PROP_VOLTAGE_MAX , POWER_SUPPLY_PROP_VOLTAGE_MIN , POWER_SUPPLY_PROP_VOLTAGE_MAX_DESIGN , POWER_SUPPLY_PROP_VOLTAGE_MIN_DESIGN , POWER_SUPPLY_PROP_VOLTAGE_NOW , POWER_SUPPLY_PROP_VOLTAGE_AVG , POWER_SUPPLY_PROP_CURRENT_NOW , POWER_SUPPLY_PROP_CURRENT_AVG , POWER_SUPPLY_PROP_POWER_NOW , POWER_SUPPLY_PROP_POWER_AVG , POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN , POWER_SUPPLY_PROP_CHARGE_EMPTY_DESIGN , POWER_SUPPLY_PROP_CHARGE_FULL , POWER_SUPPLY_PROP_CHARGE_EMPTY , POWER_SUPPLY_PROP_CHARGE_NOW , POWER_SUPPLY_PROP_CHARGE_AVG , POWER_SUPPLY_PROP_CHARGE_COUNTER , POWER_SUPPLY_PROP_ENERGY_FULL_DESIGN , POWER_SUPPLY_PROP_ENERGY_EMPTY_DESIGN , POWER_SUPPLY_PROP_ENERGY_FULL , POWER_SUPPLY_PROP_ENERGY_EMPTY , POWER_SUPPLY_PROP_ENERGY_NOW , POWER_SUPPLY_PROP_ENERGY_AVG , POWER_SUPPLY_PROP_CAPACITY , POWER_SUPPLY_PROP_CAPACITY_LEVEL , POWER_SUPPLY_PROP_TEMP , POWER_SUPPLY_PROP_TEMP_AMBIENT , POWER_SUPPLY_PROP_TIME_TO_EMPTY_NOW , POWER_SUPPLY_PROP_TIME_TO_EMPTY_AVG , POWER_SUPPLY_PROP_TIME_TO_FULL_NOW , POWER_SUPPLY_PROP_TIME_TO_FULL_AVG , POWER_SUPPLY_PROP_MODEL_NAME , POWER_SUPPLY_PROP_MANUFACTURER , POWER_SUPPLY_PROP_SERIAL_NUMBER , } 
u#power_supply_propval union power_supply_propval { int intval ; const char * strval ; } 
s#power_supply struct power_supply { const char * name ; e#power_supply_type type ; e#power_supply_property * properties ; t#size_t num_properties ; char * * supplied_to ; t#size_t num_supplicants ; int ( * get_property ) ( s#power_supply * , e#power_supply_property , u#power_supply_propval * ) ; void ( * external_power_changed ) ( s#power_supply * ) ; void ( * set_charged ) ( s#power_supply * ) ; int use_for_apm ; s#device * dev ; s#work_struct changed_work ; s#led_trigger * charging_full_trig ; char * charging_full_trig_name ; s#led_trigger * charging_trig ; char * charging_trig_name ; s#led_trigger * full_trig ; char * full_trig_name ; s#led_trigger * online_trig ; char * online_trig_name ; } 
power_supply_changed extern void power_supply_changed ( s#power_supply * ) 
power_supply_am_i_supplied extern int power_supply_am_i_supplied ( s#power_supply * ) 
power_supply_is_system_supplied extern int power_supply_is_system_supplied ( void ) 
power_supply_set_battery_charged extern int power_supply_set_battery_charged ( s#power_supply * ) 
power_supply_get_by_name extern s#power_supply * power_supply_get_by_name ( char * ) 
power_supply_register extern int power_supply_register ( s#device * , s#power_supply * ) 
power_supply_unregister extern void power_supply_unregister ( s#power_supply * ) 

/* drivers/pps/kapi.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#pps_source_info struct pps_source_info { char name [ 32 ] ; char path [ 32 ] ; int mode ; void ( * echo ) ( int , int , void * ) ; s#module * owner ; s#device * dev ; } 
pps_register_source extern int pps_register_source ( s#pps_source_info * , int ) 
pps_unregister_source extern void pps_unregister_source ( int ) 
s#pps_ktime struct pps_ktime { t#__s64 sec ; t#__s32 nsec ; t#__u32 flags ; } 
pps_event extern void pps_event ( int , s#pps_ktime * , int , void * ) 

/* drivers/regulator/core.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##backing_dev_info
s##io_context
s##dentry
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#regulator_ops struct regulator_ops { int ( * list_voltage ) ( s#regulator_dev * , unsigned ) ; int ( * set_voltage ) ( s#regulator_dev * , int , int ) ; int ( * get_voltage ) ( s#regulator_dev * ) ; int ( * set_current_limit ) ( s#regulator_dev * , int , int ) ; int ( * get_current_limit ) ( s#regulator_dev * ) ; int ( * enable ) ( s#regulator_dev * ) ; int ( * disable ) ( s#regulator_dev * ) ; int ( * is_enabled ) ( s#regulator_dev * ) ; int ( * set_mode ) ( s#regulator_dev * , unsigned int ) ; unsigned int ( * get_mode ) ( s#regulator_dev * ) ; int ( * get_status ) ( s#regulator_dev * ) ; unsigned int ( * get_optimum_mode ) ( s#regulator_dev * , int , int , int ) ; int ( * set_suspend_voltage ) ( s#regulator_dev * , int ) ; int ( * set_suspend_enable ) ( s#regulator_dev * ) ; int ( * set_suspend_disable ) ( s#regulator_dev * ) ; int ( * set_suspend_mode ) ( s#regulator_dev * , unsigned int ) ; } 
e#regulator_type enum regulator_type { REGULATOR_VOLTAGE , REGULATOR_CURRENT , } 
s#regulator_desc struct regulator_desc { const char * name ; int id ; unsigned n_voltages ; s#regulator_ops * ops ; int irq ; e#regulator_type type ; s#module * owner ; } 
s#regulator_state struct regulator_state { int uV ; unsigned int mode ; int enabled ; } 
t#suspend_state_t typedef int suspend_state_t 
s#regulation_constraints struct regulation_constraints { char * name ; int min_uV ; int max_uV ; int min_uA ; int max_uA ; unsigned int valid_modes_mask ; unsigned int valid_ops_mask ; int input_uV ; s#regulator_state state_disk ; s#regulator_state state_mem ; s#regulator_state state_standby ; t#suspend_state_t initial_state ; unsigned int initial_mode ; unsigned always_on : 1 ; unsigned boot_on : 1 ; unsigned apply_uV : 1 ; } 
s#regulator_dev struct regulator_dev { s#regulator_desc * desc ; int use_count ; int open_count ; int exclusive ; s#list_head list ; s#list_head slist ; s#list_head consumer_list ; s#list_head supply_list ; s#blocking_notifier_head notifier ; s#mutex mutex ; s#module * owner ; s#device dev ; s#regulation_constraints * constraints ; s#regulator_dev * supply ; void * reg_data ; } 
s#regulator struct regulator { s#device * dev ; s#list_head list ; int uA_load ; int min_uV ; int max_uV ; char * supply_name ; s#device_attribute dev_attr ; s#regulator_dev * rdev ; } 
regulator_get s#regulator * __attribute__ ( ( warn_unused_result ) ) regulator_get ( s#device * , const char * ) 
regulator_get_exclusive s#regulator * __attribute__ ( ( warn_unused_result ) ) regulator_get_exclusive ( s#device * , const char * ) 
regulator_put void regulator_put ( s#regulator * ) 
regulator_enable int regulator_enable ( s#regulator * ) 
regulator_disable int regulator_disable ( s#regulator * ) 
regulator_force_disable int regulator_force_disable ( s#regulator * ) 
regulator_is_enabled int regulator_is_enabled ( s#regulator * ) 
regulator_count_voltages int regulator_count_voltages ( s#regulator * ) 
regulator_list_voltage int regulator_list_voltage ( s#regulator * , unsigned ) 
regulator_set_voltage int regulator_set_voltage ( s#regulator * , int , int ) 
regulator_get_voltage int regulator_get_voltage ( s#regulator * ) 
regulator_set_current_limit int regulator_set_current_limit ( s#regulator * , int , int ) 
regulator_get_current_limit int regulator_get_current_limit ( s#regulator * ) 
regulator_set_mode int regulator_set_mode ( s#regulator * , unsigned int ) 
regulator_get_mode unsigned int regulator_get_mode ( s#regulator * ) 
regulator_set_optimum_mode int regulator_set_optimum_mode ( s#regulator * , int ) 
regulator_register_notifier int regulator_register_notifier ( s#regulator * , s#notifier_block * ) 
regulator_unregister_notifier int regulator_unregister_notifier ( s#regulator * , s#notifier_block * ) 
s#regulator_bulk_data struct regulator_bulk_data { const char * supply ; s#regulator * consumer ; } 
regulator_bulk_get int regulator_bulk_get ( s#device * , int , s#regulator_bulk_data * ) 
regulator_bulk_enable int regulator_bulk_enable ( int , s#regulator_bulk_data * ) 
regulator_bulk_disable int regulator_bulk_disable ( int , s#regulator_bulk_data * ) 
regulator_bulk_free void regulator_bulk_free ( int , s#regulator_bulk_data * ) 
regulator_notifier_call_chain int regulator_notifier_call_chain ( s#regulator_dev * , unsigned long , void * ) 
regulator_mode_to_status int regulator_mode_to_status ( unsigned int ) 
s#regulator_consumer_supply struct regulator_consumer_supply { s#device * dev ; const char * dev_name ; const char * supply ; } 
s#regulator_init_data struct regulator_init_data { s#device * supply_regulator_dev ; s#regulation_constraints constraints ; int num_consumer_supplies ; s#regulator_consumer_supply * consumer_supplies ; int ( * regulator_init ) ( void * ) ; void * driver_data ; } 
regulator_register s#regulator_dev * regulator_register ( s#regulator_desc * , s#device * , s#regulator_init_data * , void * ) 
regulator_unregister void regulator_unregister ( s#regulator_dev * ) 
regulator_suspend_prepare int regulator_suspend_prepare ( t#suspend_state_t ) 
regulator_has_full_constraints void regulator_has_full_constraints ( void ) 
rdev_get_drvdata void * rdev_get_drvdata ( s#regulator_dev * ) 
regulator_get_drvdata void * regulator_get_drvdata ( s#regulator * ) 
regulator_set_drvdata void regulator_set_drvdata ( s#regulator * , void * ) 
rdev_get_id int rdev_get_id ( s#regulator_dev * ) 
rdev_get_dev s#device * rdev_get_dev ( s#regulator_dev * ) 
regulator_get_init_drvdata void * regulator_get_init_drvdata ( s#regulator_init_data * ) 

/* drivers/regulator/wm8400-regulator.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##backing_dev_info
s##io_context
s##dentry
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
wm8400_register_regulator int wm8400_register_regulator ( s#device * , int , s#regulator_init_data * ) 

/* drivers/rtc/class.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#rtc_time struct rtc_time { int tm_sec ; int tm_min ; int tm_hour ; int tm_mday ; int tm_mon ; int tm_year ; int tm_wday ; int tm_yday ; int tm_isdst ; } 
s#rtc_wkalrm struct rtc_wkalrm { unsigned char enabled ; unsigned char pending ; s#rtc_time time ; } 
s##map_segment
s##compat_timespec
s#rtc_class_ops struct rtc_class_ops { int ( * open ) ( s#device * ) ; void ( * release ) ( s#device * ) ; int ( * ioctl ) ( s#device * , unsigned int , unsigned long ) ; int ( * read_time ) ( s#device * , s#rtc_time * ) ; int ( * set_time ) ( s#device * , s#rtc_time * ) ; int ( * read_alarm ) ( s#device * , s#rtc_wkalrm * ) ; int ( * set_alarm ) ( s#device * , s#rtc_wkalrm * ) ; int ( * proc ) ( s#device * , s#seq_file * ) ; int ( * set_mmss ) ( s#device * , unsigned long ) ; int ( * irq_set_state ) ( s#device * , int ) ; int ( * irq_set_freq ) ( s#device * , int ) ; int ( * read_callback ) ( s#device * , int ) ; int ( * alarm_irq_enable ) ( s#device * , unsigned int ) ; int ( * update_irq_enable ) ( s#device * , unsigned int ) ; } 
s##vfsmount
s##nameidata
s##kstatfs
s##page
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##radix_tree_node
s##writeback_control
s##kiocb
s##iovec
s##pipe_inode_info
s##posix_acl
s##cred
s##vm_area_struct
s#rtc_task struct rtc_task { void ( * func ) ( void * ) ; void * private_data ; } 
s#rtc_device struct rtc_device { s#device dev ; s#module * owner ; int id ; char name [ 20 ] ; const s#rtc_class_ops * ops ; s#mutex ops_lock ; s#cdev char_dev ; unsigned long flags ; unsigned long irq_data ; t#spinlock_t irq_lock ; t#wait_queue_head_t irq_queue ; s#fasync_struct * async_queue ; s#rtc_task * irq_task ; t#spinlock_t irq_task_lock ; int irq_freq ; int max_user_freq ; s#work_struct uie_task ; s#timer_list uie_timer ; unsigned int oldsecs ; unsigned int uie_irq_active : 1 ; unsigned int stop_uie_polling : 1 ; unsigned int uie_task_active : 1 ; unsigned int uie_timer_active : 1 ; } 
rtc_device_register extern s#rtc_device * rtc_device_register ( const char * , s#device * , const s#rtc_class_ops * , s#module * ) 
rtc_device_unregister extern void rtc_device_unregister ( s#rtc_device * ) 

/* drivers/rtc/interface.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
rtc_read_time extern int rtc_read_time ( s#rtc_device * , s#rtc_time * ) 
rtc_set_time extern int rtc_set_time ( s#rtc_device * , s#rtc_time * ) 
rtc_set_mmss extern int rtc_set_mmss ( s#rtc_device * , unsigned long ) 
rtc_read_alarm extern int rtc_read_alarm ( s#rtc_device * , s#rtc_wkalrm * ) 
rtc_set_alarm extern int rtc_set_alarm ( s#rtc_device * , s#rtc_wkalrm * ) 
rtc_alarm_irq_enable extern int rtc_alarm_irq_enable ( s#rtc_device * , unsigned int ) 
rtc_update_irq_enable extern int rtc_update_irq_enable ( s#rtc_device * , unsigned int ) 
rtc_update_irq extern void rtc_update_irq ( s#rtc_device * , unsigned long , unsigned long ) 
rtc_class_open extern s#rtc_device * rtc_class_open ( char * ) 
rtc_class_close extern void rtc_class_close ( s#rtc_device * ) 
rtc_irq_register extern int rtc_irq_register ( s#rtc_device * , s#rtc_task * ) 
rtc_irq_unregister extern void rtc_irq_unregister ( s#rtc_device * , s#rtc_task * ) 
rtc_irq_set_state extern int rtc_irq_set_state ( s#rtc_device * , s#rtc_task * , int ) 
rtc_irq_set_freq extern int rtc_irq_set_freq ( s#rtc_device * , s#rtc_task * , int ) 

/* drivers/rtc/rtc-dev.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
rtc_dev_update_irq_enable_emul extern int rtc_dev_update_irq_enable_emul ( s#rtc_device * , unsigned int ) 

/* drivers/rtc/rtc-lib.o */
rtc_month_days extern int rtc_month_days ( unsigned int , unsigned int ) 
rtc_year_days extern int rtc_year_days ( unsigned int , unsigned int , unsigned int ) 
rtc_time_to_tm extern void rtc_time_to_tm ( unsigned long , s#rtc_time * ) 
rtc_valid_tm extern int rtc_valid_tm ( s#rtc_time * ) 
rtc_tm_to_time extern int rtc_tm_to_time ( s#rtc_time * , unsigned long * ) 

/* drivers/scsi/constants.o */
__scsi_print_command extern void __scsi_print_command ( unsigned char * ) 
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##proc_dir_entry
s##scsi_transport_template
s##workqueue_struct
scsi_print_command extern void scsi_print_command ( s#scsi_cmnd * ) 
scsi_print_status extern void scsi_print_status ( unsigned char ) 
scsi_sense_key_string extern const char * scsi_sense_key_string ( unsigned char ) 
scsi_extd_sense_format extern const char * scsi_extd_sense_format ( unsigned char , unsigned char ) 
scsi_show_extd_sense extern void scsi_show_extd_sense ( unsigned char , unsigned char ) 
scsi_show_sense_hdr extern void scsi_show_sense_hdr ( s#scsi_sense_hdr * ) 
scsi_print_sense_hdr extern void scsi_print_sense_hdr ( const char * , s#scsi_sense_hdr * ) 
scsi_cmd_print_sense_hdr extern void scsi_cmd_print_sense_hdr ( s#scsi_cmnd * , const char * , s#scsi_sense_hdr * ) 
__scsi_print_sense extern void __scsi_print_sense ( const char * , const unsigned char * , int ) 
scsi_print_sense extern void scsi_print_sense ( char * , s#scsi_cmnd * ) 
scsi_show_result extern void scsi_show_result ( int ) 
scsi_print_result extern void scsi_print_result ( s#scsi_cmnd * ) 

/* drivers/scsi/device_handler/scsi_dh.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##Scsi_Host
s##scsi_cmnd
s##scsi_sense_hdr
scsi_register_device_handler extern int scsi_register_device_handler ( s#scsi_device_handler * ) 
scsi_unregister_device_handler extern int scsi_unregister_device_handler ( s#scsi_device_handler * ) 
scsi_dh_activate extern int scsi_dh_activate ( s#request_queue * , t#activate_complete , void * ) 
scsi_dh_set_params extern int scsi_dh_set_params ( s#request_queue * , const char * ) 
scsi_dh_handler_exist extern int scsi_dh_handler_exist ( const char * ) 
scsi_dh_attach extern int scsi_dh_attach ( s#request_queue * , const char * ) 
scsi_dh_detach extern void scsi_dh_detach ( s#request_queue * ) 

/* drivers/scsi/fcoe/libfcoe.o */
e#fip_state enum fip_state { FIP_ST_DISABLED , FIP_ST_LINK_WAIT , FIP_ST_AUTO , FIP_ST_NON_FIP , FIP_ST_ENABLED , } 
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##scsi_sense_hdr
s##workqueue_struct
e#fc_port_state enum fc_port_state { FC_PORTSTATE_UNKNOWN , FC_PORTSTATE_NOTPRESENT , FC_PORTSTATE_ONLINE , FC_PORTSTATE_OFFLINE , FC_PORTSTATE_BLOCKED , FC_PORTSTATE_BYPASSED , FC_PORTSTATE_DIAGNOSTICS , FC_PORTSTATE_LINKDOWN , FC_PORTSTATE_ERROR , FC_PORTSTATE_LOOPBACK , FC_PORTSTATE_DELETED , } 
s#fc_rport struct fc_rport { t#u32 maxframe_size ; t#u32 supported_classes ; t#u32 dev_loss_tmo ; t#u64 node_name ; t#u64 port_name ; t#u32 port_id ; t#u32 roles ; e#fc_port_state port_state ; t#u32 scsi_target_id ; t#u32 fast_io_fail_tmo ; void * dd_data ; unsigned int channel ; t#u32 number ; t#u8 flags ; s#list_head peers ; s#device dev ; s#delayed_work dev_loss_work ; s#work_struct scan_work ; s#delayed_work fail_io_work ; s#work_struct stgt_delete_work ; s#work_struct rport_delete_work ; s#request_queue * rqst_q ; } 
e#fc_rport_state enum fc_rport_state { RPORT_ST_INIT , RPORT_ST_PLOGI , RPORT_ST_PRLI , RPORT_ST_RTV , RPORT_ST_READY , RPORT_ST_LOGO , RPORT_ST_ADISC , RPORT_ST_DELETE , RPORT_ST_RESTART , } 
s#fc_rport_identifiers struct fc_rport_identifiers { t#u64 node_name ; t#u64 port_name ; t#u32 port_id ; t#u32 roles ; } 
e#fc_rport_event enum fc_rport_event { RPORT_EV_NONE = 0 , RPORT_EV_READY , RPORT_EV_FAILED , RPORT_EV_STOP , RPORT_EV_LOGO } 
s#fc_rport_operations struct fc_rport_operations { void ( * event_callback ) ( s#fc_lport * , s#fc_rport_priv * , e#fc_rport_event ) ; } 
s#fc_rport_priv struct fc_rport_priv { s#fc_lport * local_port ; s#fc_rport * rport ; s#kref kref ; e#fc_rport_state rp_state ; s#fc_rport_identifiers ids ; t#u16 flags ; t#u16 max_seq ; t#u16 disc_id ; t#u16 maxframe_size ; unsigned int retries ; unsigned int e_d_tov ; unsigned int r_a_tov ; s#mutex rp_mutex ; s#delayed_work retry_work ; e#fc_rport_event event ; s#fc_rport_operations * ops ; s#list_head peers ; s#work_struct event_work ; t#u32 supported_classes ; } 
s#fc_gpn_ft_resp struct fc_gpn_ft_resp { t#__u8 fp_flags ; t#__u8 fp_fid [ 3 ] ; t#__be32 fp_resvd ; t#__be64 fp_wwpn ; } 
e#fc_disc_event enum fc_disc_event { DISC_EV_NONE = 0 , DISC_EV_SUCCESS , DISC_EV_FAILED } 
s#fc_disc struct fc_disc { unsigned char retry_count ; unsigned char pending ; unsigned char requested ; unsigned short seq_count ; unsigned char buf_len ; t#u16 disc_id ; s#list_head rports ; s#fc_lport * lport ; s#mutex disc_mutex ; s#fc_gpn_ft_resp partial_buf ; s#delayed_work disc_work ; void ( * disc_callback ) ( s#fc_lport * , e#fc_disc_event ) ; } 
e#fc_vport_state enum fc_vport_state { FC_VPORT_UNKNOWN , FC_VPORT_ACTIVE , FC_VPORT_DISABLED , FC_VPORT_LINKDOWN , FC_VPORT_INITIALIZING , FC_VPORT_NO_FABRIC_SUPP , FC_VPORT_NO_FABRIC_RSCS , FC_VPORT_FABRIC_LOGOUT , FC_VPORT_FABRIC_REJ_WWN , FC_VPORT_FAILED , } 
e#fc_port_type enum fc_port_type { FC_PORTTYPE_UNKNOWN , FC_PORTTYPE_OTHER , FC_PORTTYPE_NOTPRESENT , FC_PORTTYPE_NPORT , FC_PORTTYPE_NLPORT , FC_PORTTYPE_LPORT , FC_PORTTYPE_PTP , FC_PORTTYPE_NPIV , } 
s#fc_vport struct fc_vport { e#fc_vport_state vport_state ; e#fc_vport_state vport_last_state ; t#u64 node_name ; t#u64 port_name ; t#u32 roles ; t#u32 vport_id ; e#fc_port_type vport_type ; char symbolic_name [ 64 ] ; void * dd_data ; s#Scsi_Host * shost ; unsigned int channel ; t#u32 number ; t#u8 flags ; s#list_head peers ; s#device dev ; s#work_struct vport_delete_work ; } 
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##sec_path
s#fc_frame struct fc_frame { s#sk_buff skb ; } 
s#fc_seq struct fc_seq { t#u8 id ; t#u16 ssb_stat ; t#u16 cnt ; t#u32 rec_data ; } 
s#fc_els_lesb struct fc_els_lesb { t#__be32 lesb_link_fail ; t#__be32 lesb_sync_loss ; t#__be32 lesb_sig_loss ; t#__be32 lesb_prim_err ; t#__be32 lesb_inv_word ; t#__be32 lesb_inv_crc ; } 
e#fc_els_cmd enum fc_els_cmd { ELS_LS_RJT = 0x01 , ELS_LS_ACC = 0x02 , ELS_PLOGI = 0x03 , ELS_FLOGI = 0x04 , ELS_LOGO = 0x05 , ELS_ABTX = 0x06 , ELS_RCS = 0x07 , ELS_RES = 0x08 , ELS_RSS = 0x09 , ELS_RSI = 0x0a , ELS_ESTS = 0x0b , ELS_ESTC = 0x0c , ELS_ADVC = 0x0d , ELS_RTV = 0x0e , ELS_RLS = 0x0f , ELS_ECHO = 0x10 , ELS_TEST = 0x11 , ELS_RRQ = 0x12 , ELS_REC = 0x13 , ELS_SRR = 0x14 , ELS_PRLI = 0x20 , ELS_PRLO = 0x21 , ELS_SCN = 0x22 , ELS_TPLS = 0x23 , ELS_TPRLO = 0x24 , ELS_LCLM = 0x25 , ELS_GAID = 0x30 , ELS_FACT = 0x31 , ELS_FDACDT = 0x32 , ELS_NACT = 0x33 , ELS_NDACT = 0x34 , ELS_QOSR = 0x40 , ELS_RVCS = 0x41 , ELS_PDISC = 0x50 , ELS_FDISC = 0x51 , ELS_ADISC = 0x52 , ELS_RNC = 0x53 , ELS_FARP_REQ = 0x54 , ELS_FARP_REPL = 0x55 , ELS_RPS = 0x56 , ELS_RPL = 0x57 , ELS_RPBC = 0x58 , ELS_FAN = 0x60 , ELS_RSCN = 0x61 , ELS_SCR = 0x62 , ELS_RNFT = 0x63 , ELS_CSR = 0x68 , ELS_CSU = 0x69 , ELS_LINIT = 0x70 , ELS_LSTS = 0x72 , ELS_RNID = 0x78 , ELS_RLIR = 0x79 , ELS_LIRR = 0x7a , ELS_SRL = 0x7b , ELS_SBRP = 0x7c , ELS_RPSC = 0x7d , ELS_QSA = 0x7e , ELS_EVFP = 0x7f , ELS_LKA = 0x80 , ELS_AUTH_ELS = 0x90 , } 
e#fc_els_rjt_reason enum fc_els_rjt_reason { ELS_RJT_NONE = 0 , ELS_RJT_INVAL = 0x01 , ELS_RJT_LOGIC = 0x03 , ELS_RJT_BUSY = 0x05 , ELS_RJT_PROT = 0x07 , ELS_RJT_UNAB = 0x09 , ELS_RJT_UNSUP = 0x0b , ELS_RJT_INPROG = 0x0e , ELS_RJT_VENDOR = 0xff , } 
e#fc_els_rjt_explan enum fc_els_rjt_explan { ELS_EXPL_NONE = 0x00 , ELS_EXPL_SPP_OPT_ERR = 0x01 , ELS_EXPL_SPP_ICTL_ERR = 0x03 , ELS_EXPL_AH = 0x11 , ELS_EXPL_AH_REQ = 0x13 , ELS_EXPL_SID = 0x15 , ELS_EXPL_OXID_RXID = 0x17 , ELS_EXPL_INPROG = 0x19 , ELS_EXPL_PLOGI_REQD = 0x1e , ELS_EXPL_INSUF_RES = 0x29 , ELS_EXPL_UNAB_DATA = 0x2a , ELS_EXPL_UNSUPR = 0x2c , ELS_EXPL_INV_LEN = 0x2d , } 
s#fc_seq_els_data struct fc_seq_els_data { s#fc_frame * fp ; e#fc_els_rjt_reason reason ; e#fc_els_rjt_explan explan ; } 
s#fcp_cmnd struct fcp_cmnd { t#__u8 fc_lun [ 8 ] ; t#__u8 fc_cmdref ; t#__u8 fc_pri_ta ; t#__u8 fc_tm_flags ; t#__u8 fc_flags ; t#__u8 fc_cdb [ 16 ] ; t#__be32 fc_dl ; } 
s#fc_fcp_pkt struct fc_fcp_pkt { s#fc_lport * lp ; t#u16 state ; t#u16 tgt_flags ; t#atomic_t ref_cnt ; t#spinlock_t scsi_pkt_lock ; s#scsi_cmnd * cmd ; s#list_head list ; s#timer_list timer ; s#completion tm_done ; int wait_for_comp ; unsigned long start_time ; unsigned long end_time ; unsigned long last_pkt_time ; t#u32 data_len ; s#fcp_cmnd cdb_cmd ; t#size_t xfer_len ; t#u16 xfer_ddp ; t#u32 xfer_contig_end ; t#u16 max_payload ; t#u32 io_status ; t#u8 cdb_status ; t#u8 status_code ; t#u8 scsi_comp_flags ; t#u32 req_flags ; t#u32 scsi_resid ; s#fc_rport * rport ; s#fc_seq * seq_ptr ; t#u8 recov_retry ; s#fc_seq * recov_seq ; } 
s#libfc_function_template struct libfc_function_template { int ( * frame_send ) ( s#fc_lport * , s#fc_frame * ) ; s#fc_seq * ( * elsct_send ) ( s#fc_lport * , t#u32 , s#fc_frame * , unsigned int , void ( * ) ( s#fc_seq * , s#fc_frame * , void * ) , void * , t#u32 ) ; s#fc_seq * ( * exch_seq_send ) ( s#fc_lport * , s#fc_frame * , void ( * ) ( s#fc_seq * , s#fc_frame * , void * ) , void ( * ) ( s#fc_seq * , void * ) , void * , unsigned int ) ; int ( * ddp_setup ) ( s#fc_lport * , t#u16 , s#scatterlist * , unsigned int ) ; int ( * ddp_done ) ( s#fc_lport * , t#u16 ) ; void ( * get_lesb ) ( s#fc_lport * , s#fc_els_lesb * ) ; int ( * seq_send ) ( s#fc_lport * , s#fc_seq * , s#fc_frame * ) ; void ( * seq_els_rsp_send ) ( s#fc_seq * , e#fc_els_cmd , s#fc_seq_els_data * ) ; int ( * seq_exch_abort ) ( const s#fc_seq * , unsigned int ) ; void ( * exch_done ) ( s#fc_seq * ) ; s#fc_seq * ( * seq_start_next ) ( s#fc_seq * ) ; void ( * exch_mgr_reset ) ( s#fc_lport * , t#u32 , t#u32 ) ; void ( * rport_flush_queue ) ( void ) ; void ( * lport_recv ) ( s#fc_lport * , s#fc_seq * , s#fc_frame * ) ; int ( * lport_reset ) ( s#fc_lport * ) ; void ( * lport_set_port_id ) ( s#fc_lport * , t#u32 , s#fc_frame * ) ; s#fc_rport_priv * ( * rport_create ) ( s#fc_lport * , t#u32 ) ; int ( * rport_login ) ( s#fc_rport_priv * ) ; int ( * rport_logoff ) ( s#fc_rport_priv * ) ; void ( * rport_recv_req ) ( s#fc_seq * , s#fc_frame * , s#fc_lport * ) ; s#fc_rport_priv * ( * rport_lookup ) ( const s#fc_lport * , t#u32 ) ; void ( * rport_destroy ) ( s#kref * ) ; int ( * fcp_cmd_send ) ( s#fc_lport * , s#fc_fcp_pkt * , void ( * ) ( s#fc_seq * , s#fc_frame * , void * ) ) ; void ( * fcp_cleanup ) ( s#fc_lport * ) ; void ( * fcp_abort_io ) ( s#fc_lport * ) ; void ( * disc_recv_req ) ( s#fc_seq * , s#fc_frame * , s#fc_lport * ) ; void ( * disc_start ) ( void ( * ) ( s#fc_lport * , e#fc_disc_event ) , s#fc_lport * ) ; void ( * disc_stop ) ( s#fc_lport * ) ; void ( * disc_stop_final ) ( s#fc_lport * ) ; } 
e#fc_lport_state enum fc_lport_state { LPORT_ST_DISABLED = 0 , LPORT_ST_FLOGI , LPORT_ST_DNS , LPORT_ST_RNN_ID , LPORT_ST_RSNN_NN , LPORT_ST_RSPN_ID , LPORT_ST_RFT_ID , LPORT_ST_RFF_ID , LPORT_ST_SCR , LPORT_ST_READY , LPORT_ST_LOGO , LPORT_ST_RESET } 
s#fc_host_statistics struct fc_host_statistics { t#u64 seconds_since_last_reset ; t#u64 tx_frames ; t#u64 tx_words ; t#u64 rx_frames ; t#u64 rx_words ; t#u64 lip_count ; t#u64 nos_count ; t#u64 error_frames ; t#u64 dumped_frames ; t#u64 link_failure_count ; t#u64 loss_of_sync_count ; t#u64 loss_of_signal_count ; t#u64 prim_seq_protocol_err_count ; t#u64 invalid_tx_word_count ; t#u64 invalid_crc_count ; t#u64 fcp_input_requests ; t#u64 fcp_output_requests ; t#u64 fcp_control_requests ; t#u64 fcp_input_megabytes ; t#u64 fcp_output_megabytes ; } 
s#fcoe_dev_stats struct fcoe_dev_stats { t#u64 SecondsSinceLastReset ; t#u64 TxFrames ; t#u64 TxWords ; t#u64 RxFrames ; t#u64 RxWords ; t#u64 ErrorFrames ; t#u64 DumpedFrames ; t#u64 LinkFailureCount ; t#u64 LossOfSignalCount ; t#u64 InvalidTxWordCount ; t#u64 InvalidCRCCount ; t#u64 InputRequests ; t#u64 OutputRequests ; t#u64 ControlRequests ; t#u64 InputMegabytes ; t#u64 OutputMegabytes ; t#u64 VLinkFailureCount ; t#u64 MissDiscAdvCount ; } 
s#fc_els_rnid_gen struct fc_els_rnid_gen { t#__u8 rnid_vend_id [ 16 ] ; t#__be32 rnid_atype ; t#__be32 rnid_phys_port ; t#__be32 rnid_att_nodes ; t#__u8 rnid_node_mgmt ; t#__u8 rnid_ip_ver ; t#__be16 rnid_prot_port ; t#__be32 rnid_ip_addr [ 4 ] ; t#__u8 rnid_resvd [ 2 ] ; t#__be16 rnid_vend_spec ; } 
s#fc_ns_fts struct fc_ns_fts { t#__be32 ff_type_map [ 256 / 32 ] ; } 
s#fc_lport struct fc_lport { s#Scsi_Host * host ; s#list_head ema_list ; s#fc_rport_priv * dns_rdata ; s#fc_rport_priv * ptp_rdata ; void * scsi_priv ; s#fc_disc disc ; s#list_head vports ; s#fc_vport * vport ; s#libfc_function_template tt ; t#u8 link_up ; t#u8 qfull ; e#fc_lport_state state ; unsigned long boot_time ; s#fc_host_statistics host_stats ; s#fcoe_dev_stats * dev_stats ; t#u8 retry_count ; t#u64 wwpn ; t#u64 wwnn ; unsigned int service_params ; unsigned int e_d_tov ; unsigned int r_a_tov ; s#fc_els_rnid_gen rnid_gen ; t#u32 sg_supp : 1 ; t#u32 seq_offload : 1 ; t#u32 crc_offload : 1 ; t#u32 lro_enabled : 1 ; t#u32 does_npiv : 1 ; t#u32 npiv_enabled : 1 ; t#u32 mfs ; t#u8 max_retry_count ; t#u8 max_rport_retry_count ; t#u16 link_speed ; t#u16 link_supported_speeds ; t#u16 lro_xid ; unsigned int lso_max ; s#fc_ns_fts fcts ; s#mutex lp_mutex ; s#list_head list ; s#delayed_work retry_work ; } 
s#fcoe_fcf struct fcoe_fcf { s#list_head list ; unsigned long time ; t#u64 switch_name ; t#u64 fabric_name ; t#u32 fc_map ; t#u16 vfid ; t#u8 fcf_mac [ 6 ] ; t#u8 pri ; t#u16 flags ; t#u32 fka_period ; t#u8 fd_flags : 1 ; } 
s#fcoe_ctlr struct fcoe_ctlr { e#fip_state state ; e#fip_state mode ; s#fc_lport * lp ; s#fcoe_fcf * sel_fcf ; s#list_head fcfs ; t#u16 fcf_count ; unsigned long sol_time ; unsigned long sel_time ; unsigned long port_ka_time ; unsigned long ctlr_ka_time ; s#timer_list timer ; s#work_struct link_work ; s#work_struct recv_work ; s#sk_buff_head fip_recv_list ; t#u16 user_mfs ; t#u16 flogi_oxid ; t#u8 flogi_count ; t#u8 link ; t#u8 last_link ; t#u8 reset_req ; t#u8 map_dest ; t#u8 spma ; t#u8 send_ctlr_ka ; t#u8 send_port_ka ; t#u8 dest_addr [ 6 ] ; t#u8 ctl_src_addr [ 6 ] ; void ( * send ) ( s#fcoe_ctlr * , s#sk_buff * ) ; void ( * update_mac ) ( s#fc_lport * , t#u8 * ) ; t#u8 * ( * get_src_addr ) ( s#fc_lport * ) ; t#spinlock_t lock ; } 
fcoe_ctlr_init void fcoe_ctlr_init ( s#fcoe_ctlr * ) 
fcoe_ctlr_destroy void fcoe_ctlr_destroy ( s#fcoe_ctlr * ) 
fcoe_ctlr_link_up void fcoe_ctlr_link_up ( s#fcoe_ctlr * ) 
fcoe_ctlr_link_down int fcoe_ctlr_link_down ( s#fcoe_ctlr * ) 
fcoe_ctlr_els_send int fcoe_ctlr_els_send ( s#fcoe_ctlr * , s#fc_lport * , s#sk_buff * ) 
fcoe_ctlr_recv void fcoe_ctlr_recv ( s#fcoe_ctlr * , s#sk_buff * ) 
fcoe_ctlr_recv_flogi int fcoe_ctlr_recv_flogi ( s#fcoe_ctlr * , s#fc_lport * , s#fc_frame * ) 
fcoe_wwn_from_mac t#u64 fcoe_wwn_from_mac ( unsigned char [ ] , unsigned int , unsigned int ) 
fcoe_libfc_config int fcoe_libfc_config ( s#fc_lport * , s#libfc_function_template * ) 

/* drivers/scsi/hosts.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##scsi_cmnd
s##scsi_sense_hdr
s##proc_dir_entry
s##workqueue_struct
scsi_host_set_state extern int scsi_host_set_state ( s#Scsi_Host * , e#scsi_host_state ) 
scsi_remove_host extern void scsi_remove_host ( s#Scsi_Host * ) 
scsi_add_host_with_dma extern int __attribute__ ( ( warn_unused_result ) ) scsi_add_host_with_dma ( s#Scsi_Host * , s#device * , s#device * ) 
scsi_host_alloc extern s#Scsi_Host * scsi_host_alloc ( s#scsi_host_template * , int ) 
scsi_register extern s#Scsi_Host * scsi_register ( s#scsi_host_template * , int ) 
scsi_unregister extern void scsi_unregister ( s#Scsi_Host * ) 
scsi_host_lookup extern s#Scsi_Host * scsi_host_lookup ( unsigned short ) 
scsi_host_get extern s#Scsi_Host * scsi_host_get ( s#Scsi_Host * ) 
scsi_host_put extern void scsi_host_put ( s#Scsi_Host * ) 
scsi_is_host_device int scsi_is_host_device ( const s#device * ) 
scsi_queue_work extern int scsi_queue_work ( s#Scsi_Host * , s#work_struct * ) 
scsi_flush_work extern void scsi_flush_work ( s#Scsi_Host * ) 

/* drivers/scsi/libfc/fc_disc.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##scsi_sense_hdr
s##proc_dir_entry
s##workqueue_struct
s##sock
s##net_device
s##sec_path
fc_disc_init int fc_disc_init ( s#fc_lport * ) 

/* drivers/scsi/libfc/fc_elsct.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##scsi_sense_hdr
s##proc_dir_entry
s##workqueue_struct
s##sock
s##net_device
s##sec_path
fc_elsct_send s#fc_seq * fc_elsct_send ( s#fc_lport * , t#u32 , s#fc_frame * , unsigned int , void ( * ) ( s#fc_seq * , s#fc_frame * , void * ) , void * , t#u32 ) 
fc_elsct_init int fc_elsct_init ( s#fc_lport * ) 

/* drivers/scsi/libfc/fc_exch.o */
fc_cpu_mask extern t#u16 fc_cpu_mask 
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##scsi_sense_hdr
s##proc_dir_entry
s##workqueue_struct
s##sock
s##net_device
s##sec_path
fc_exch_mgr_reset void fc_exch_mgr_reset ( s#fc_lport * , t#u32 , t#u32 ) 
e#fc_class enum fc_class { FC_CLASS_NONE = 0 , FC_CLASS_2 = FC_SOF_I2 , FC_CLASS_3 = FC_SOF_I3 , FC_CLASS_4 = FC_SOF_I4 , FC_CLASS_F = FC_SOF_F , } 
s#fc_exch_pool struct fc_exch_pool { t#u16 next_index ; t#u16 total_exches ; t#spinlock_t lock ; s#list_head ex_list ; } 
s#fc_exch_mgr struct fc_exch_mgr { e#fc_class class ; s#kref kref ; t#u16 min_xid ; t#u16 max_xid ; t#mempool_t * ep_pool ; t#u16 pool_max_index ; s#fc_exch_pool * pool ; struct { t#atomic_t no_free_exch ; t#atomic_t no_free_exch_xid ; t#atomic_t xid_not_found ; t#atomic_t xid_busy ; t#atomic_t seq_not_found ; t#atomic_t non_bls_resp ; } stats ; } 
s#fc_exch_mgr_anchor struct fc_exch_mgr_anchor { s#list_head ema_list ; s#fc_exch_mgr * mp ; t#bool ( * match ) ( s#fc_frame * ) ; } 
fc_exch_mgr_add s#fc_exch_mgr_anchor * fc_exch_mgr_add ( s#fc_lport * , s#fc_exch_mgr * , t#bool ( * ) ( s#fc_frame * ) ) 
fc_exch_mgr_del void fc_exch_mgr_del ( s#fc_exch_mgr_anchor * ) 
fc_exch_mgr_alloc s#fc_exch_mgr * fc_exch_mgr_alloc ( s#fc_lport * , e#fc_class , t#u16 , t#u16 , t#bool ( * ) ( s#fc_frame * ) ) 
fc_exch_mgr_free void fc_exch_mgr_free ( s#fc_lport * ) 
fc_exch_recv void fc_exch_recv ( s#fc_lport * , s#fc_frame * ) 
fc_exch_init int fc_exch_init ( s#fc_lport * ) 

/* drivers/scsi/libfc/fc_fcp.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##proc_dir_entry
s##workqueue_struct
s##scsi_sense_hdr
fc_queuecommand int fc_queuecommand ( s#scsi_cmnd * , void ( * ) ( s#scsi_cmnd * ) ) 
fc_eh_abort int fc_eh_abort ( s#scsi_cmnd * ) 
fc_eh_device_reset int fc_eh_device_reset ( s#scsi_cmnd * ) 
fc_eh_host_reset int fc_eh_host_reset ( s#scsi_cmnd * ) 
fc_slave_alloc int fc_slave_alloc ( s#scsi_device * ) 
fc_change_queue_depth int fc_change_queue_depth ( s#scsi_device * , int , int ) 
fc_change_queue_type int fc_change_queue_type ( s#scsi_device * , int ) 
s##sock
s##net_device
s##sec_path
fc_fcp_destroy void fc_fcp_destroy ( s#fc_lport * ) 
fc_fcp_init int fc_fcp_init ( s#fc_lport * ) 

/* drivers/scsi/libfc/fc_frame.o */
s##sock
s##net_device
s##sec_path
fc_frame_crc_check t#u32 fc_frame_crc_check ( s#fc_frame * ) 
_fc_frame_alloc s#fc_frame * _fc_frame_alloc ( t#size_t ) 
s##fc_lport
fc_frame_alloc_fill s#fc_frame * fc_frame_alloc_fill ( s#fc_lport * , t#size_t ) 

/* drivers/scsi/libfc/fc_lport.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##scsi_sense_hdr
s##proc_dir_entry
s##workqueue_struct
fc_get_host_port_type void fc_get_host_port_type ( s#Scsi_Host * ) 
fc_get_host_port_state void fc_get_host_port_state ( s#Scsi_Host * ) 
fc_get_host_speed void fc_get_host_speed ( s#Scsi_Host * ) 
fc_get_host_stats s#fc_host_statistics * fc_get_host_stats ( s#Scsi_Host * ) 
s##sock
s##net_device
s##sec_path
fc_fabric_login int fc_fabric_login ( s#fc_lport * ) 
fc_linkup void fc_linkup ( s#fc_lport * ) 
fc_linkdown void fc_linkdown ( s#fc_lport * ) 
fc_fabric_logoff int fc_fabric_logoff ( s#fc_lport * ) 
fc_lport_destroy int fc_lport_destroy ( s#fc_lport * ) 
fc_set_mfs int fc_set_mfs ( s#fc_lport * , t#u32 ) 
fc_lport_reset int fc_lport_reset ( s#fc_lport * ) 
fc_lport_logo_resp void fc_lport_logo_resp ( s#fc_seq * , s#fc_frame * , void * ) 
fc_lport_flogi_resp void fc_lport_flogi_resp ( s#fc_seq * , s#fc_frame * , void * ) 
fc_lport_config int fc_lport_config ( s#fc_lport * ) 
fc_lport_init int fc_lport_init ( s#fc_lport * ) 
s#fc_bsg_host_add_rport struct fc_bsg_host_add_rport { t#uint8_t reserved ; t#uint8_t port_id [ 3 ] ; } 
s#fc_bsg_host_del_rport struct fc_bsg_host_del_rport { t#uint8_t reserved ; t#uint8_t port_id [ 3 ] ; } 
s#fc_bsg_host_els struct fc_bsg_host_els { t#uint8_t command_code ; t#uint8_t port_id [ 3 ] ; } 
s#fc_bsg_host_ct struct fc_bsg_host_ct { t#uint8_t reserved ; t#uint8_t port_id [ 3 ] ; t#uint32_t preamble_word0 ; t#uint32_t preamble_word1 ; t#uint32_t preamble_word2 ; } 
s#fc_bsg_host_vendor struct fc_bsg_host_vendor { t#uint64_t vendor_id ; t#uint32_t vendor_cmd [ 0 ] ; } 
s#fc_bsg_rport_els struct fc_bsg_rport_els { t#uint8_t els_code ; } 
s#fc_bsg_rport_ct struct fc_bsg_rport_ct { t#uint32_t preamble_word0 ; t#uint32_t preamble_word1 ; t#uint32_t preamble_word2 ; } 
s#fc_bsg_request struct fc_bsg_request { t#uint32_t msgcode ; union { s#fc_bsg_host_add_rport h_addrport ; s#fc_bsg_host_del_rport h_delrport ; s#fc_bsg_host_els h_els ; s#fc_bsg_host_ct h_ct ; s#fc_bsg_host_vendor h_vendor ; s#fc_bsg_rport_els r_els ; s#fc_bsg_rport_ct r_ct ; } rqst_data ; } 
s#fc_bsg_host_vendor_reply struct fc_bsg_host_vendor_reply { t#uint32_t vendor_rsp [ 0 ] ; } 
s#fc_bsg_ctels_reply struct fc_bsg_ctels_reply { t#uint32_t status ; struct { t#uint8_t action ; t#uint8_t reason_code ; t#uint8_t reason_explanation ; t#uint8_t vendor_unique ; } rjt_data ; } 
s#fc_bsg_reply struct fc_bsg_reply { t#uint32_t result ; t#uint32_t reply_payload_rcv_len ; union { s#fc_bsg_host_vendor_reply vendor_reply ; s#fc_bsg_ctels_reply ctels_reply ; } reply_data ; } 
s#fc_bsg_buffer struct fc_bsg_buffer { unsigned int payload_len ; int sg_cnt ; s#scatterlist * sg_list ; } 
s#fc_bsg_job struct fc_bsg_job { s#Scsi_Host * shost ; s#fc_rport * rport ; s#device * dev ; s#request * req ; t#spinlock_t job_lock ; unsigned int state_flags ; unsigned int ref_cnt ; void ( * job_done ) ( s#fc_bsg_job * ) ; s#fc_bsg_request * request ; s#fc_bsg_reply * reply ; unsigned int request_len ; unsigned int reply_len ; s#fc_bsg_buffer request_payload ; s#fc_bsg_buffer reply_payload ; void * dd_data ; } 
fc_lport_bsg_request int fc_lport_bsg_request ( s#fc_bsg_job * ) 

/* drivers/scsi/libfc/fc_npiv.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##scsi_sense_hdr
s##proc_dir_entry
s##workqueue_struct
s##sock
s##net_device
s##sec_path
libfc_vport_create s#fc_lport * libfc_vport_create ( s#fc_vport * , int ) 
fc_vport_setlink void fc_vport_setlink ( s#fc_lport * ) 

/* drivers/scsi/libfc/fc_rport.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
fc_set_rport_loss_tmo void fc_set_rport_loss_tmo ( s#fc_rport * , t#u32 ) 
s##scsi_host_cmd_pool
s##scsi_sense_hdr
s##workqueue_struct
s##sock
s##net_device
s##sec_path
fc_rport_init int fc_rport_init ( s#fc_lport * ) 
fc_rport_terminate_io void fc_rport_terminate_io ( s#fc_rport * ) 

/* drivers/scsi/libiscsi.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#iscsi_cls_session struct iscsi_cls_session { s#list_head sess_list ; s#iscsi_transport * transport ; t#spinlock_t lock ; s#work_struct block_work ; s#work_struct unblock_work ; s#work_struct scan_work ; s#work_struct unbind_work ; int recovery_tmo ; s#delayed_work recovery_work ; unsigned int target_id ; int state ; int sid ; void * dd_data ; s#device dev ; } 
s#iscsi_endpoint struct iscsi_endpoint { void * dd_data ; s#device dev ; t#uint64_t id ; } 
e#iscsi_param enum iscsi_param { ISCSI_PARAM_MAX_RECV_DLENGTH , ISCSI_PARAM_MAX_XMIT_DLENGTH , ISCSI_PARAM_HDRDGST_EN , ISCSI_PARAM_DATADGST_EN , ISCSI_PARAM_INITIAL_R2T_EN , ISCSI_PARAM_MAX_R2T , ISCSI_PARAM_IMM_DATA_EN , ISCSI_PARAM_FIRST_BURST , ISCSI_PARAM_MAX_BURST , ISCSI_PARAM_PDU_INORDER_EN , ISCSI_PARAM_DATASEQ_INORDER_EN , ISCSI_PARAM_ERL , ISCSI_PARAM_IFMARKER_EN , ISCSI_PARAM_OFMARKER_EN , ISCSI_PARAM_EXP_STATSN , ISCSI_PARAM_TARGET_NAME , ISCSI_PARAM_TPGT , ISCSI_PARAM_PERSISTENT_ADDRESS , ISCSI_PARAM_PERSISTENT_PORT , ISCSI_PARAM_SESS_RECOVERY_TMO , ISCSI_PARAM_CONN_PORT , ISCSI_PARAM_CONN_ADDRESS , ISCSI_PARAM_USERNAME , ISCSI_PARAM_USERNAME_IN , ISCSI_PARAM_PASSWORD , ISCSI_PARAM_PASSWORD_IN , ISCSI_PARAM_FAST_ABORT , ISCSI_PARAM_ABORT_TMO , ISCSI_PARAM_LU_RESET_TMO , ISCSI_PARAM_HOST_RESET_TMO , ISCSI_PARAM_PING_TMO , ISCSI_PARAM_RECV_TMO , ISCSI_PARAM_IFACE_NAME , ISCSI_PARAM_ISID , ISCSI_PARAM_INITIATOR_NAME , ISCSI_PARAM_TGT_RESET_TMO , ISCSI_PARAM_MAX , } 
s##scsi_host_cmd_pool
s##workqueue_struct
e#iscsi_host_param enum iscsi_host_param { ISCSI_HOST_PARAM_HWADDRESS , ISCSI_HOST_PARAM_INITIATOR_NAME , ISCSI_HOST_PARAM_NETDEV_NAME , ISCSI_HOST_PARAM_IPADDRESS , ISCSI_HOST_PARAM_MAX , } 
t#itt_t typedef t#uint32_t itt_t 
s#iscsi_hdr struct iscsi_hdr { t#uint8_t opcode ; t#uint8_t flags ; t#uint8_t rsvd2 [ 2 ] ; t#uint8_t hlength ; t#uint8_t dlength [ 3 ] ; t#uint8_t lun [ 8 ] ; t#itt_t itt ; t#__be32 ttt ; t#__be32 statsn ; t#__be32 exp_statsn ; t#__be32 max_statsn ; t#uint8_t other [ 12 ] ; } 
s#iscsi_stats_custom struct iscsi_stats_custom { char desc [ 64 ] ; t#uint64_t value ; } 
s#iscsi_stats struct iscsi_stats { t#uint64_t txdata_octets ; t#uint64_t rxdata_octets ; t#uint32_t noptx_pdus ; t#uint32_t scsicmd_pdus ; t#uint32_t tmfcmd_pdus ; t#uint32_t login_pdus ; t#uint32_t text_pdus ; t#uint32_t dataout_pdus ; t#uint32_t logout_pdus ; t#uint32_t snack_pdus ; t#uint32_t noprx_pdus ; t#uint32_t scsirsp_pdus ; t#uint32_t tmfrsp_pdus ; t#uint32_t textrsp_pdus ; t#uint32_t datain_pdus ; t#uint32_t logoutrsp_pdus ; t#uint32_t r2t_pdus ; t#uint32_t async_pdus ; t#uint32_t rjt_pdus ; t#uint32_t digest_err ; t#uint32_t timeout_err ; t#uint32_t custom_length ; s#iscsi_stats_custom custom [ 0 ] __attribute__ ( ( aligned ( sizeof ( uint64_t ) ) ) ) ; } 
s#iscsi_r2t_info struct iscsi_r2t_info { t#__be32 ttt ; t#__be32 exp_statsn ; t#uint32_t data_length ; t#uint32_t data_offset ; int data_count ; int datasn ; int sent ; } 
s#iscsi_task struct iscsi_task { s#iscsi_hdr * hdr ; unsigned short hdr_max ; unsigned short hdr_len ; t#itt_t hdr_itt ; t#__be32 cmdsn ; t#uint8_t lun [ 8 ] ; int itt ; unsigned imm_count ; s#iscsi_r2t_info unsol_r2t ; char * data ; unsigned data_count ; s#scsi_cmnd * sc ; s#iscsi_conn * conn ; unsigned long last_xfer ; unsigned long last_timeout ; t#bool have_checked_conn ; int state ; t#atomic_t refcount ; s#list_head running ; void * dd_data ; } 
e#iscsi_tgt_dscvr enum iscsi_tgt_dscvr { ISCSI_TGT_DSCVR_SEND_TARGETS = 1 , ISCSI_TGT_DSCVR_ISNS = 2 , ISCSI_TGT_DSCVR_SLP = 3 , } 
s#iscsi_path struct iscsi_path { t#uint64_t handle ; t#uint8_t mac_addr [ 6 ] ; t#uint8_t mac_addr_old [ 6 ] ; t#uint32_t ip_addr_len ; union { s#in_addr v4_addr ; s#in6_addr v6_addr ; } src ; union { s#in_addr v4_addr ; s#in6_addr v6_addr ; } dst ; t#uint16_t vlan_id ; t#uint16_t pmtu ; } 
s#iscsi_transport struct iscsi_transport { s#module * owner ; char * name ; unsigned int caps ; t#uint64_t param_mask ; t#uint64_t host_param_mask ; s#iscsi_cls_session * ( * create_session ) ( s#iscsi_endpoint * , t#uint16_t , t#uint16_t , t#uint32_t ) ; void ( * destroy_session ) ( s#iscsi_cls_session * ) ; s#iscsi_cls_conn * ( * create_conn ) ( s#iscsi_cls_session * , t#uint32_t ) ; int ( * bind_conn ) ( s#iscsi_cls_session * , s#iscsi_cls_conn * , t#uint64_t , int ) ; int ( * start_conn ) ( s#iscsi_cls_conn * ) ; void ( * stop_conn ) ( s#iscsi_cls_conn * , int ) ; void ( * destroy_conn ) ( s#iscsi_cls_conn * ) ; int ( * set_param ) ( s#iscsi_cls_conn * , e#iscsi_param , char * , int ) ; int ( * get_conn_param ) ( s#iscsi_cls_conn * , e#iscsi_param , char * ) ; int ( * get_session_param ) ( s#iscsi_cls_session * , e#iscsi_param , char * ) ; int ( * get_host_param ) ( s#Scsi_Host * , e#iscsi_host_param , char * ) ; int ( * set_host_param ) ( s#Scsi_Host * , e#iscsi_host_param , char * , int ) ; int ( * send_pdu ) ( s#iscsi_cls_conn * , s#iscsi_hdr * , char * , t#uint32_t ) ; void ( * get_stats ) ( s#iscsi_cls_conn * , s#iscsi_stats * ) ; int ( * init_task ) ( s#iscsi_task * ) ; int ( * xmit_task ) ( s#iscsi_task * ) ; void ( * cleanup_task ) ( s#iscsi_task * ) ; int ( * alloc_pdu ) ( s#iscsi_task * , t#uint8_t ) ; int ( * xmit_pdu ) ( s#iscsi_task * ) ; int ( * init_pdu ) ( s#iscsi_task * , unsigned int , unsigned int ) ; void ( * parse_pdu_itt ) ( s#iscsi_conn * , t#itt_t , int * , int * ) ; void ( * session_recovery_timedout ) ( s#iscsi_cls_session * ) ; s#iscsi_endpoint * ( * ep_connect ) ( s#Scsi_Host * , s#sockaddr * , int ) ; int ( * ep_poll ) ( s#iscsi_endpoint * , int ) ; void ( * ep_disconnect ) ( s#iscsi_endpoint * ) ; int ( * tgt_dscvr ) ( s#Scsi_Host * , e#iscsi_tgt_dscvr , t#uint32_t , s#sockaddr * ) ; int ( * set_path ) ( s#Scsi_Host * , s#iscsi_path * ) ; } 
s#iscsi_cls_conn struct iscsi_cls_conn { s#list_head conn_list ; void * dd_data ; s#iscsi_transport * transport ; t#uint32_t cid ; int active ; s#device dev ; } 
s#iscsi_pool struct iscsi_pool { s#kfifo * queue ; void * * pool ; int max ; } 
s#iscsi_session struct iscsi_session { s#iscsi_cls_session * cls_session ; s#mutex eh_mutex ; t#uint32_t cmdsn ; t#uint32_t exp_cmdsn ; t#uint32_t max_cmdsn ; t#uint32_t queued_cmdsn ; int abort_timeout ; int lu_reset_timeout ; int tgt_reset_timeout ; int initial_r2t_en ; unsigned max_r2t ; int imm_data_en ; unsigned first_burst ; unsigned max_burst ; int time2wait ; int time2retain ; int pdu_inorder_en ; int dataseq_inorder_en ; int erl ; int fast_abort ; int tpgt ; char * username ; char * username_in ; char * password ; char * password_in ; char * targetname ; char * ifacename ; char * initiatorname ; s#iscsi_transport * tt ; s#Scsi_Host * host ; s#iscsi_conn * leadconn ; t#spinlock_t lock ; int state ; int age ; int scsi_cmds_max ; int cmds_max ; s#iscsi_task * * cmds ; s#iscsi_pool cmdpool ; void * dd_data ; } 
s#iscsi_tm struct iscsi_tm { t#uint8_t opcode ; t#uint8_t flags ; t#uint8_t rsvd1 [ 2 ] ; t#uint8_t hlength ; t#uint8_t dlength [ 3 ] ; t#uint8_t lun [ 8 ] ; t#itt_t itt ; t#itt_t rtt ; t#__be32 cmdsn ; t#__be32 exp_statsn ; t#__be32 refcmdsn ; t#__be32 exp_datasn ; t#uint8_t rsvd2 [ 8 ] ; } 
s#iscsi_conn struct iscsi_conn { s#iscsi_cls_conn * cls_conn ; void * dd_data ; s#iscsi_session * session ; int stop_stage ; s#timer_list transport_timer ; unsigned long last_recv ; unsigned long last_ping ; int ping_timeout ; int recv_timeout ; s#iscsi_task * ping_task ; t#uint32_t exp_statsn ; int id ; int c_stage ; char * data ; s#iscsi_task * login_task ; s#iscsi_task * task ; s#list_head mgmtqueue ; s#list_head cmdqueue ; s#list_head requeue ; s#work_struct xmitwork ; unsigned long suspend_tx ; unsigned long suspend_rx ; t#wait_queue_head_t ehwait ; s#iscsi_tm tmhdr ; s#timer_list tmf_timer ; int tmf_state ; unsigned max_recv_dlength ; unsigned max_xmit_dlength ; int hdrdgst_en ; int datadgst_en ; int ifmarker_en ; int ofmarker_en ; int persistent_port ; char * persistent_address ; int portal_port ; char portal_address [ 64 ] ; t#uint64_t txdata_octets ; t#uint64_t rxdata_octets ; t#uint32_t scsicmd_pdus_cnt ; t#uint32_t dataout_pdus_cnt ; t#uint32_t scsirsp_pdus_cnt ; t#uint32_t datain_pdus_cnt ; t#uint32_t r2t_pdus_cnt ; t#uint32_t tmfcmd_pdus_cnt ; t#int32_t tmfrsp_pdus_cnt ; t#uint32_t eh_abort_cnt ; t#uint32_t fmr_unalign_cnt ; } 
iscsi_conn_queue_work extern void iscsi_conn_queue_work ( s#iscsi_conn * ) 
s#iscsi_nopin struct iscsi_nopin { t#uint8_t opcode ; t#uint8_t flags ; t#__be16 rsvd2 ; t#uint8_t rsvd3 ; t#uint8_t dlength [ 3 ] ; t#uint8_t lun [ 8 ] ; t#itt_t itt ; t#__be32 ttt ; t#__be32 statsn ; t#__be32 exp_cmdsn ; t#__be32 max_cmdsn ; t#uint8_t rsvd4 [ 12 ] ; } 
iscsi_update_cmdsn extern void iscsi_update_cmdsn ( s#iscsi_session * , s#iscsi_nopin * ) 
s#iscsi_data struct iscsi_data { t#uint8_t opcode ; t#uint8_t flags ; t#uint8_t rsvd2 [ 2 ] ; t#uint8_t rsvd3 ; t#uint8_t dlength [ 3 ] ; t#uint8_t lun [ 8 ] ; t#itt_t itt ; t#__be32 ttt ; t#__be32 rsvd4 ; t#__be32 exp_statsn ; t#__be32 rsvd5 ; t#__be32 datasn ; t#__be32 offset ; t#__be32 rsvd6 ; } 
iscsi_prep_data_out_pdu extern void iscsi_prep_data_out_pdu ( s#iscsi_task * , s#iscsi_r2t_info * , s#iscsi_data * ) 
__iscsi_get_task extern void __iscsi_get_task ( s#iscsi_task * ) 
iscsi_put_task extern void iscsi_put_task ( s#iscsi_task * ) 
iscsi_complete_scsi_task extern void iscsi_complete_scsi_task ( s#iscsi_task * , t#uint32_t , t#uint32_t ) 
iscsi_conn_send_pdu extern int iscsi_conn_send_pdu ( s#iscsi_cls_conn * , s#iscsi_hdr * , char * , t#uint32_t ) 
iscsi_itt_to_task extern s#iscsi_task * iscsi_itt_to_task ( s#iscsi_conn * , t#itt_t ) 
__iscsi_complete_pdu extern int __iscsi_complete_pdu ( s#iscsi_conn * , s#iscsi_hdr * , char * , int ) 
iscsi_complete_pdu extern int iscsi_complete_pdu ( s#iscsi_conn * , s#iscsi_hdr * , char * , int ) 
iscsi_verify_itt extern int iscsi_verify_itt ( s#iscsi_conn * , t#itt_t ) 
iscsi_itt_to_ctask extern s#iscsi_task * iscsi_itt_to_ctask ( s#iscsi_conn * , t#itt_t ) 
e#iscsi_err enum iscsi_err { ISCSI_OK = 0 , ISCSI_ERR_DATASN = 1000 + 1 , ISCSI_ERR_DATA_OFFSET = 1000 + 2 , ISCSI_ERR_MAX_CMDSN = 1000 + 3 , ISCSI_ERR_EXP_CMDSN = 1000 + 4 , ISCSI_ERR_BAD_OPCODE = 1000 + 5 , ISCSI_ERR_DATALEN = 1000 + 6 , ISCSI_ERR_AHSLEN = 1000 + 7 , ISCSI_ERR_PROTO = 1000 + 8 , ISCSI_ERR_LUN = 1000 + 9 , ISCSI_ERR_BAD_ITT = 1000 + 10 , ISCSI_ERR_CONN_FAILED = 1000 + 11 , ISCSI_ERR_R2TSN = 1000 + 12 , ISCSI_ERR_SESSION_FAILED = 1000 + 13 , ISCSI_ERR_HDR_DGST = 1000 + 14 , ISCSI_ERR_DATA_DGST = 1000 + 15 , ISCSI_ERR_PARAM_NOT_FOUND = 1000 + 16 , ISCSI_ERR_NO_SCSI_CMD = 1000 + 17 , ISCSI_ERR_INVALID_HOST = 1000 + 18 , ISCSI_ERR_XMIT_FAILED = 1000 + 19 , ISCSI_ERR_TCP_CONN_CLOSE = 1000 + 20 , } 
iscsi_session_failure extern void iscsi_session_failure ( s#iscsi_session * , e#iscsi_err ) 
iscsi_conn_failure extern void iscsi_conn_failure ( s#iscsi_conn * , e#iscsi_err ) 
iscsi_requeue_task extern void iscsi_requeue_task ( s#iscsi_task * ) 
iscsi_queuecommand extern int iscsi_queuecommand ( s#scsi_cmnd * , void ( * ) ( s#scsi_cmnd * ) ) 
iscsi_change_queue_depth extern int iscsi_change_queue_depth ( s#scsi_device * , int , int ) 
iscsi_target_alloc extern int iscsi_target_alloc ( s#scsi_target * ) 
iscsi_suspend_queue extern void iscsi_suspend_queue ( s#iscsi_conn * ) 
iscsi_suspend_tx extern void iscsi_suspend_tx ( s#iscsi_conn * ) 
iscsi_eh_abort extern int iscsi_eh_abort ( s#scsi_cmnd * ) 
iscsi_eh_device_reset extern int iscsi_eh_device_reset ( s#scsi_cmnd * ) 
iscsi_session_recovery_timedout extern void iscsi_session_recovery_timedout ( s#iscsi_cls_session * ) 
iscsi_eh_session_reset extern int iscsi_eh_session_reset ( s#scsi_cmnd * ) 
iscsi_eh_target_reset extern int iscsi_eh_target_reset ( s#scsi_cmnd * ) 
iscsi_eh_recover_target extern int iscsi_eh_recover_target ( s#scsi_cmnd * ) 
iscsi_pool_init extern int iscsi_pool_init ( s#iscsi_pool * , int , void * * * , int ) 
iscsi_pool_free extern void iscsi_pool_free ( s#iscsi_pool * ) 
iscsi_host_add extern int iscsi_host_add ( s#Scsi_Host * , s#device * ) 
iscsi_host_alloc extern s#Scsi_Host * iscsi_host_alloc ( s#scsi_host_template * , int , t#bool ) 
iscsi_host_remove extern void iscsi_host_remove ( s#Scsi_Host * ) 
iscsi_host_free extern void iscsi_host_free ( s#Scsi_Host * ) 
iscsi_session_setup extern s#iscsi_cls_session * iscsi_session_setup ( s#iscsi_transport * , s#Scsi_Host * , t#uint16_t , int , int , t#uint32_t , unsigned int ) 
iscsi_session_teardown extern void iscsi_session_teardown ( s#iscsi_cls_session * ) 
iscsi_conn_setup extern s#iscsi_cls_conn * iscsi_conn_setup ( s#iscsi_cls_session * , int , t#uint32_t ) 
iscsi_conn_teardown extern void iscsi_conn_teardown ( s#iscsi_cls_conn * ) 
iscsi_conn_start extern int iscsi_conn_start ( s#iscsi_cls_conn * ) 
iscsi_conn_stop extern void iscsi_conn_stop ( s#iscsi_cls_conn * , int ) 
iscsi_conn_bind extern int iscsi_conn_bind ( s#iscsi_cls_session * , s#iscsi_cls_conn * , int ) 
iscsi_set_param extern int iscsi_set_param ( s#iscsi_cls_conn * , e#iscsi_param , char * , int ) 
iscsi_session_get_param extern int iscsi_session_get_param ( s#iscsi_cls_session * , e#iscsi_param , char * ) 
iscsi_conn_get_param extern int iscsi_conn_get_param ( s#iscsi_cls_conn * , e#iscsi_param , char * ) 
iscsi_host_get_param extern int iscsi_host_get_param ( s#Scsi_Host * , e#iscsi_host_param , char * ) 
iscsi_host_set_param extern int iscsi_host_set_param ( s#Scsi_Host * , e#iscsi_host_param , char * , int ) 

/* drivers/scsi/libiscsi_tcp.o */
s##skcipher_givcrypt_request
s##aead_givcrypt_request
s##crypto_type
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##scsi_host_cmd_pool
s##scsi_sense_hdr
s##scsi_transport_template
s##workqueue_struct
s#iscsi_tcp_recv struct iscsi_tcp_recv { s#iscsi_hdr * hdr ; s#iscsi_segment segment ; t#uint32_t hdr_buf [ 64 ] ; int datalen ; } 
s#iscsi_tcp_conn struct iscsi_tcp_conn { s#iscsi_conn * iscsi_conn ; void * dd_data ; int stop_stage ; s#iscsi_tcp_recv in ; s#hash_desc * rx_hash ; } 
t#iscsi_segment_done_fn_t typedef int iscsi_segment_done_fn_t ( s#iscsi_tcp_conn * , s#iscsi_segment * ) 
s#iscsi_segment struct iscsi_segment { unsigned char * data ; unsigned int size ; unsigned int copied ; unsigned int total_size ; unsigned int total_copied ; s#hash_desc * hash ; unsigned char padbuf [ 4 ] ; unsigned char recv_digest [ ISCSI_DIGEST_SIZE ] ; unsigned char digest [ ISCSI_DIGEST_SIZE ] ; unsigned int digest_len ; s#scatterlist * sg ; void * sg_mapped ; unsigned int sg_offset ; t#iscsi_segment_done_fn_t * done ; } 
iscsi_tcp_segment_unmap extern void iscsi_tcp_segment_unmap ( s#iscsi_segment * ) 
iscsi_tcp_segment_done extern int iscsi_tcp_segment_done ( s#iscsi_tcp_conn * , s#iscsi_segment * , int , unsigned ) 
iscsi_tcp_dgst_header extern void iscsi_tcp_dgst_header ( s#hash_desc * , const void * , t#size_t , unsigned char [ ISCSI_DIGEST_SIZE ] ) 
iscsi_segment_init_linear extern void iscsi_segment_init_linear ( s#iscsi_segment * , void * , t#size_t , t#iscsi_segment_done_fn_t * , s#hash_desc * ) 
iscsi_segment_seek_sg extern int iscsi_segment_seek_sg ( s#iscsi_segment * , s#scatterlist * , unsigned int , unsigned int , t#size_t , t#iscsi_segment_done_fn_t * , s#hash_desc * ) 
iscsi_tcp_hdr_recv_prep extern void iscsi_tcp_hdr_recv_prep ( s#iscsi_tcp_conn * ) 
iscsi_tcp_cleanup_task extern void iscsi_tcp_cleanup_task ( s#iscsi_task * ) 
iscsi_tcp_recv_segment_is_hdr extern int iscsi_tcp_recv_segment_is_hdr ( s#iscsi_tcp_conn * ) 
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
iscsi_tcp_recv_skb extern int iscsi_tcp_recv_skb ( s#iscsi_conn * , s#sk_buff * , unsigned int , t#bool , int * ) 
iscsi_tcp_task_init extern int iscsi_tcp_task_init ( s#iscsi_task * ) 
iscsi_tcp_task_xmit extern int iscsi_tcp_task_xmit ( s#iscsi_task * ) 
iscsi_tcp_conn_setup extern s#iscsi_cls_conn * iscsi_tcp_conn_setup ( s#iscsi_cls_session * , int , t#uint32_t ) 
iscsi_tcp_conn_teardown extern void iscsi_tcp_conn_teardown ( s#iscsi_cls_conn * ) 
iscsi_tcp_r2tpool_alloc extern int iscsi_tcp_r2tpool_alloc ( s#iscsi_session * ) 
iscsi_tcp_r2tpool_free extern void iscsi_tcp_r2tpool_free ( s#iscsi_session * ) 
iscsi_tcp_conn_get_stats extern void iscsi_tcp_conn_get_stats ( s#iscsi_cls_conn * , s#iscsi_stats * ) 

/* drivers/scsi/libsas/sas_init.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##class_private
s##scsi_host_cmd_pool
s##scsi_sense_hdr
s##workqueue_struct
s#asd_sas_event struct asd_sas_event { s#work_struct work ; s#asd_sas_phy * phy ; } 
e#sas_device_type enum sas_device_type { SAS_PHY_UNUSED = 0 , SAS_END_DEVICE = 1 , SAS_EDGE_EXPANDER_DEVICE = 2 , SAS_FANOUT_EXPANDER_DEVICE = 3 , } 
e#sas_protocol enum sas_protocol { SAS_PROTOCOL_SATA = 0x01 , SAS_PROTOCOL_SMP = 0x02 , SAS_PROTOCOL_STP = 0x04 , SAS_PROTOCOL_SSP = 0x08 , SAS_PROTOCOL_ALL = 0x0E , } 
s#sas_identify struct sas_identify { e#sas_device_type device_type ; e#sas_protocol initiator_port_protocols ; e#sas_protocol target_port_protocols ; t#u64 sas_address ; t#u8 phy_identifier ; } 
e#sas_linkrate enum sas_linkrate { SAS_LINK_RATE_UNKNOWN = 0 , SAS_PHY_DISABLED = 1 , SAS_PHY_RESET_PROBLEM = 2 , SAS_SATA_SPINUP_HOLD = 3 , SAS_SATA_PORT_SELECTOR = 4 , SAS_PHY_RESET_IN_PROGRESS = 5 , SAS_LINK_RATE_1_5_GBPS = 8 , SAS_LINK_RATE_G1 = SAS_LINK_RATE_1_5_GBPS , SAS_LINK_RATE_3_0_GBPS = 9 , SAS_LINK_RATE_G2 = SAS_LINK_RATE_3_0_GBPS , SAS_LINK_RATE_6_0_GBPS = 10 , SAS_LINK_RATE_FAILED = 0x10 , SAS_PHY_VIRTUAL = 0x11 , } 
s#sas_phy struct sas_phy { s#device dev ; int number ; int enabled ; s#sas_identify identify ; e#sas_linkrate negotiated_linkrate ; e#sas_linkrate minimum_linkrate_hw ; e#sas_linkrate minimum_linkrate ; e#sas_linkrate maximum_linkrate_hw ; e#sas_linkrate maximum_linkrate ; t#u32 invalid_dword_count ; t#u32 running_disparity_error_count ; t#u32 loss_of_dword_sync_count ; t#u32 phy_reset_problem_count ; s#list_head port_siblings ; s#work_struct reset_work ; } 
e#sas_class enum sas_class { SAS , EXPANDER } 
e#sas_phy_type enum sas_phy_type { PHY_TYPE_PHYSICAL , PHY_TYPE_VIRTUAL } 
e#sas_phy_role enum sas_phy_role { PHY_ROLE_NONE = 0 , PHY_ROLE_TARGET = 0x40 , PHY_ROLE_INITIATOR = 0x80 , } 
e#sas_oob_mode enum sas_oob_mode { OOB_NOT_CONNECTED , SATA_OOB_MODE , SAS_OOB_MODE } 
s#sas_discovery_event struct sas_discovery_event { s#work_struct work ; s#asd_sas_port * port ; } 
s#sas_discovery struct sas_discovery { t#spinlock_t disc_event_lock ; s#sas_discovery_event disc_work [ DISC_NUM_EVENTS ] ; unsigned long pending ; t#u8 fanout_sas_addr [ 8 ] ; t#u8 eeds_a [ 8 ] ; t#u8 eeds_b [ 8 ] ; int max_level ; } 
e#sas_dev_type enum sas_dev_type { NO_DEVICE = 0 , SAS_END_DEV = 1 , EDGE_DEV = 2 , FANOUT_DEV = 3 , SAS_HA = 4 , SATA_DEV = 5 , SATA_PM = 7 , SATA_PM_PORT = 8 , } 
s#sas_rphy struct sas_rphy { s#device dev ; s#sas_identify identify ; s#list_head list ; s#request_queue * q ; t#u32 scsi_target_id ; } 
e#ex_phy_state enum ex_phy_state { PHY_EMPTY , PHY_VACANT , PHY_NOT_PRESENT , PHY_DEVICE_DISCOVERED } 
e#routing_attribute enum routing_attribute { DIRECT_ROUTING , SUBTRACTIVE_ROUTING , TABLE_ROUTING , } 
s#sas_port struct sas_port { s#device dev ; int port_identifier ; int num_phys ; unsigned int is_backlink : 1 ; s#sas_rphy * rphy ; s#mutex phy_list_mutex ; s#list_head phy_list ; } 
s#ex_phy struct ex_phy { int phy_id ; e#ex_phy_state phy_state ; e#sas_dev_type attached_dev_type ; e#sas_linkrate linkrate ; t#u8 attached_sata_host : 1 ; t#u8 attached_sata_dev : 1 ; t#u8 attached_sata_ps : 1 ; e#sas_protocol attached_tproto ; e#sas_protocol attached_iproto ; t#u8 attached_sas_addr [ 8 ] ; t#u8 attached_phy_id ; t#u8 phy_change_count ; e#routing_attribute routing_attr ; t#u8 virtual : 1 ; int last_da_index ; s#sas_phy * phy ; s#sas_port * port ; } 
s#expander_device struct expander_device { s#list_head children ; t#u16 ex_change_count ; t#u16 max_route_indexes ; t#u8 num_phys ; t#u8 configuring : 1 ; t#u8 conf_route_table : 1 ; t#u8 enclosure_logical_id [ 8 ] ; s#ex_phy * ex_phy ; s#sas_port * parent_port ; } 
e#ata_command_set enum ata_command_set { ATA_COMMAND_SET = 0 , ATAPI_COMMAND_SET = 1 , } 
s#report_general_resp struct report_general_resp { t#__be16 change_count ; t#__be16 route_indexes ; t#u8 _r_a ; t#u8 num_phys ; t#u8 conf_route_table : 1 ; t#u8 configuring : 1 ; t#u8 _r_b : 6 ; t#u8 _r_c ; t#u8 enclosure_logical_id [ 8 ] ; t#u8 _r_d [ 12 ] ; } 
s#discover_resp struct discover_resp { t#u8 _r_a [ 5 ] ; t#u8 phy_id ; t#__be16 _r_b ; t#u8 _r_c : 4 ; t#u8 attached_dev_type : 3 ; t#u8 _r_d : 1 ; t#u8 linkrate : 4 ; t#u8 _r_e : 4 ; t#u8 attached_sata_host : 1 ; t#u8 iproto : 3 ; t#u8 _r_f : 4 ; t#u8 attached_sata_dev : 1 ; t#u8 tproto : 3 ; t#u8 _r_g : 3 ; t#u8 attached_sata_ps : 1 ; t#u8 sas_addr [ 8 ] ; t#u8 attached_sas_addr [ 8 ] ; t#u8 attached_phy_id ; t#u8 _r_h [ 7 ] ; t#u8 hmin_linkrate : 4 ; t#u8 pmin_linkrate : 4 ; t#u8 hmax_linkrate : 4 ; t#u8 pmax_linkrate : 4 ; t#u8 change_count ; t#u8 pptv : 4 ; t#u8 _r_i : 3 ; t#u8 virtual : 1 ; t#u8 routing_attr : 4 ; t#u8 _r_j : 4 ; t#u8 conn_type ; t#u8 conn_el_index ; t#u8 conn_phy_link ; t#u8 _r_k [ 8 ] ; } 
s#dev_to_host_fis struct dev_to_host_fis { t#u8 fis_type ; t#u8 flags ; t#u8 status ; t#u8 error ; t#u8 lbal ; union { t#u8 lbam ; t#u8 byte_count_low ; } ; union { t#u8 lbah ; t#u8 byte_count_high ; } ; t#u8 device ; t#u8 lbal_exp ; t#u8 lbam_exp ; t#u8 lbah_exp ; t#u8 _r_a ; union { t#u8 sector_count ; t#u8 interrupt_reason ; } ; t#u8 sector_count_exp ; t#u8 _r_b ; t#u8 _r_c ; t#u32 _r_d ; } 
s#report_phy_sata_resp struct report_phy_sata_resp { t#u8 _r_a [ 5 ] ; t#u8 phy_id ; t#u8 _r_b ; t#u8 affil_valid : 1 ; t#u8 affil_supp : 1 ; t#u8 _r_c : 6 ; t#u32 _r_d ; t#u8 stp_sas_addr [ 8 ] ; s#dev_to_host_fis fis ; t#u32 _r_e ; t#u8 affil_stp_ini_addr [ 8 ] ; t#__be32 crc ; } 
s#smp_resp struct smp_resp { t#u8 frame_type ; t#u8 function ; t#u8 result ; t#u8 reserved ; union { s#report_general_resp rg ; s#discover_resp disc ; s#report_phy_sata_resp rps ; } ; } 
s#sata_device struct sata_device { e#ata_command_set command_set ; s#smp_resp rps_resp ; t#__le16 * identify_device ; t#__le16 * identify_packet_device ; t#u8 port_no ; s#list_head children ; s#ata_port * ap ; s#ata_host ata_host ; s#ata_taskfile tf ; t#u32 sstatus ; t#u32 serror ; t#u32 scontrol ; } 
s#domain_device struct domain_device { e#sas_dev_type dev_type ; e#sas_linkrate linkrate ; e#sas_linkrate min_linkrate ; e#sas_linkrate max_linkrate ; int pathways ; s#domain_device * parent ; s#list_head siblings ; s#asd_sas_port * port ; s#list_head dev_list_node ; e#sas_protocol iproto ; e#sas_protocol tproto ; s#sas_rphy * rphy ; t#u8 sas_addr [ 8 ] ; t#u8 hashed_sas_addr [ 3 ] ; t#u8 frame_rcvd [ 32 ] ; union { s#expander_device ex_dev ; s#sata_device sata_dev ; } ; void * lldd_dev ; } 
s#sas_ha_event struct sas_ha_event { s#work_struct work ; s#sas_ha_struct * ha ; } 
e#sas_ha_state enum sas_ha_state { SAS_HA_REGISTERED , SAS_HA_UNREGISTERED } 
s#scsi_core struct scsi_core { s#Scsi_Host * shost ; t#spinlock_t task_queue_lock ; s#list_head task_queue ; int task_queue_size ; s#task_struct * queue_thread ; } 
e#ha_event enum ha_event { HAE_RESET = 0U , HA_NUM_EVENTS = 1 , } 
e#port_event enum port_event { PORTE_BYTES_DMAED = 0U , PORTE_BROADCAST_RCVD = 1 , PORTE_LINK_RESET_ERR = 2 , PORTE_TIMER_EVENT = 3 , PORTE_HARD_RESET = 4 , PORT_NUM_EVENTS = 5 , } 
e#phy_event enum phy_event { PHYE_LOSS_OF_SIGNAL = 0U , PHYE_OOB_DONE = 1 , PHYE_OOB_ERROR = 2 , PHYE_SPINUP_HOLD = 3 , PHY_NUM_EVENTS = 4 , } 
s#sas_ha_struct struct sas_ha_struct { t#spinlock_t event_lock ; s#sas_ha_event ha_events [ HA_NUM_EVENTS ] ; unsigned long pending ; e#sas_ha_state state ; t#spinlock_t state_lock ; s#scsi_core core ; char * sas_ha_name ; s#device * dev ; s#module * lldd_module ; t#u8 * sas_addr ; t#u8 hashed_sas_addr [ 3 ] ; t#spinlock_t phy_port_lock ; s#asd_sas_phy * * sas_phy ; s#asd_sas_port * * sas_port ; int num_phys ; int lldd_max_execute_num ; int lldd_queue_size ; void ( * notify_ha_event ) ( s#sas_ha_struct * , e#ha_event ) ; void ( * notify_port_event ) ( s#asd_sas_phy * , e#port_event ) ; void ( * notify_phy_event ) ( s#asd_sas_phy * , e#phy_event ) ; void * lldd_ha ; s#list_head eh_done_q ; } 
s#asd_sas_port struct asd_sas_port { s#completion port_gone_completion ; s#sas_discovery disc ; s#domain_device * port_dev ; t#spinlock_t dev_list_lock ; s#list_head dev_list ; e#sas_linkrate linkrate ; s#sas_phy * phy ; s#work_struct work ; int id ; e#sas_class class ; t#u8 sas_addr [ 8 ] ; t#u8 attached_sas_addr [ 8 ] ; e#sas_protocol iproto ; e#sas_protocol tproto ; e#sas_oob_mode oob_mode ; t#spinlock_t phy_list_lock ; s#list_head phy_list ; int num_phys ; t#u32 phy_mask ; s#sas_ha_struct * ha ; s#sas_port * port ; void * lldd_port ; } 
s#asd_sas_phy struct asd_sas_phy { s#asd_sas_event port_events [ PORT_NUM_EVENTS ] ; s#asd_sas_event phy_events [ PHY_NUM_EVENTS ] ; unsigned long port_events_pending ; unsigned long phy_events_pending ; int error ; s#sas_phy * phy ; int enabled ; int id ; e#sas_class class ; e#sas_protocol iproto ; e#sas_protocol tproto ; e#sas_phy_type type ; e#sas_phy_role role ; e#sas_oob_mode oob_mode ; e#sas_linkrate linkrate ; t#u8 * sas_addr ; t#u8 attached_sas_addr [ 8 ] ; t#spinlock_t frame_rcvd_lock ; t#u8 * frame_rcvd ; int frame_rcvd_size ; t#spinlock_t sas_prim_lock ; t#u32 sas_prim ; s#list_head port_phy_el ; s#asd_sas_port * port ; s#sas_ha_struct * ha ; void * lldd_phy ; } 
s#host_to_dev_fis struct host_to_dev_fis { t#u8 fis_type ; t#u8 flags ; t#u8 command ; t#u8 features ; t#u8 lbal ; union { t#u8 lbam ; t#u8 byte_count_low ; } ; union { t#u8 lbah ; t#u8 byte_count_high ; } ; t#u8 device ; t#u8 lbal_exp ; t#u8 lbam_exp ; t#u8 lbah_exp ; t#u8 features_exp ; union { t#u8 sector_count ; t#u8 interrupt_reason ; } ; t#u8 sector_count_exp ; t#u8 _r_a ; t#u8 control ; t#u32 _r_b ; } 
s#sas_ata_task struct sas_ata_task { s#host_to_dev_fis fis ; t#u8 atapi_packet [ 16 ] ; t#u8 retry_count ; t#u8 dma_xfer : 1 ; t#u8 use_ncq : 1 ; t#u8 set_affil_pol : 1 ; t#u8 stp_affil_pol : 1 ; t#u8 device_control_reg_update : 1 ; } 
s#sas_smp_task struct sas_smp_task { s#scatterlist smp_req ; s#scatterlist smp_resp ; } 
e#task_attribute enum task_attribute { TASK_ATTR_SIMPLE = 0 , TASK_ATTR_HOQ = 1 , TASK_ATTR_ORDERED = 2 , TASK_ATTR_ACA = 4 , } 
s#sas_ssp_task struct sas_ssp_task { t#u8 retry_count ; t#u8 LUN [ 8 ] ; t#u8 enable_first_burst : 1 ; e#task_attribute task_attr ; t#u8 task_prio ; t#u8 cdb [ 16 ] ; } 
e#service_response enum service_response { SAS_TASK_COMPLETE , SAS_TASK_UNDELIVERED = - 1 , } 
e#exec_status enum exec_status { SAM_GOOD = 0 , SAM_CHECK_COND = 2 , SAM_COND_MET = 4 , SAM_BUSY = 8 , SAM_INTERMEDIATE = 0x10 , SAM_IM_COND_MET = 0x12 , SAM_RESV_CONFLICT = 0x14 , SAM_TASK_SET_FULL = 0x28 , SAM_ACA_ACTIVE = 0x30 , SAM_TASK_ABORTED = 0x40 , SAS_DEV_NO_RESPONSE = 0x80 , SAS_DATA_UNDERRUN , SAS_DATA_OVERRUN , SAS_INTERRUPTED , SAS_QUEUE_FULL , SAS_DEVICE_UNKNOWN , SAS_SG_ERR , SAS_OPEN_REJECT , SAS_OPEN_TO , SAS_PROTO_RESPONSE , SAS_PHY_DOWN , SAS_NAK_R_ERR , SAS_PENDING , SAS_ABORTED_TASK , } 
e#sas_open_rej_reason enum sas_open_rej_reason { SAS_OREJ_UNKNOWN = 0 , SAS_OREJ_BAD_DEST = 1 , SAS_OREJ_CONN_RATE = 2 , SAS_OREJ_EPROTO = 3 , SAS_OREJ_RESV_AB0 = 4 , SAS_OREJ_RESV_AB1 = 5 , SAS_OREJ_RESV_AB2 = 6 , SAS_OREJ_RESV_AB3 = 7 , SAS_OREJ_WRONG_DEST = 8 , SAS_OREJ_STP_NORES = 9 , SAS_OREJ_NO_DEST = 10 , SAS_OREJ_PATH_BLOCKED = 11 , SAS_OREJ_RSVD_CONT0 = 12 , SAS_OREJ_RSVD_CONT1 = 13 , SAS_OREJ_RSVD_INIT0 = 14 , SAS_OREJ_RSVD_INIT1 = 15 , SAS_OREJ_RSVD_STOP0 = 16 , SAS_OREJ_RSVD_STOP1 = 17 , SAS_OREJ_RSVD_RETRY = 18 , } 
s#task_status_struct struct task_status_struct { e#service_response resp ; e#exec_status stat ; int buf_valid_size ; t#u8 buf [ 96 ] ; t#u32 residual ; e#sas_open_rej_reason open_rej_reason ; } 
s#sas_task struct sas_task { s#domain_device * dev ; s#list_head list ; t#spinlock_t task_state_lock ; unsigned task_state_flags ; e#sas_protocol task_proto ; s#timer_list timer ; s#completion completion ; union { s#sas_ata_task ata_task ; s#sas_smp_task smp_task ; s#sas_ssp_task ssp_task ; } ; s#scatterlist * scatter ; int num_scatter ; t#u32 total_xfer_len ; t#u8 data_dir : 2 ; s#task_status_struct task_status ; void ( * task_done ) ( s#sas_task * ) ; void * lldd_task ; void * uldd_task ; s#work_struct abort_work ; } 
e#phy_func enum phy_func { PHY_FUNC_NOP , PHY_FUNC_LINK_RESET , PHY_FUNC_HARD_RESET , PHY_FUNC_DISABLE , PHY_FUNC_CLEAR_ERROR_LOG = 5 , PHY_FUNC_CLEAR_AFFIL , PHY_FUNC_TX_SATA_PS_SIGNAL , PHY_FUNC_RELEASE_SPINUP_HOLD = 0x10 , PHY_FUNC_SET_LINK_RATE , } 
s#sas_domain_function_template struct sas_domain_function_template { void ( * lldd_port_formed ) ( s#asd_sas_phy * ) ; void ( * lldd_port_deformed ) ( s#asd_sas_phy * ) ; int ( * lldd_dev_found ) ( s#domain_device * ) ; void ( * lldd_dev_gone ) ( s#domain_device * ) ; int ( * lldd_execute_task ) ( s#sas_task * , int , t#gfp_t ) ; int ( * lldd_abort_task ) ( s#sas_task * ) ; int ( * lldd_abort_task_set ) ( s#domain_device * , t#u8 * ) ; int ( * lldd_clear_aca ) ( s#domain_device * , t#u8 * ) ; int ( * lldd_clear_task_set ) ( s#domain_device * , t#u8 * ) ; int ( * lldd_I_T_nexus_reset ) ( s#domain_device * ) ; int ( * lldd_lu_reset ) ( s#domain_device * , t#u8 * ) ; int ( * lldd_query_task ) ( s#sas_task * ) ; int ( * lldd_clear_nexus_port ) ( s#asd_sas_port * ) ; int ( * lldd_clear_nexus_ha ) ( s#sas_ha_struct * ) ; int ( * lldd_control_phy ) ( s#asd_sas_phy * , e#phy_func , void * ) ; } 
sas_domain_attach_transport extern s#scsi_transport_template * sas_domain_attach_transport ( s#sas_domain_function_template * ) 
sas_domain_release_transport extern void sas_domain_release_transport ( s#scsi_transport_template * ) 
sas_register_ha extern int sas_register_ha ( s#sas_ha_struct * ) 
sas_unregister_ha extern int sas_unregister_ha ( s#sas_ha_struct * ) 

/* drivers/scsi/libsas/sas_scsi_host.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##scsi_host_cmd_pool
s##workqueue_struct
sas_find_local_phy s#sas_phy * sas_find_local_phy ( s#domain_device * ) 
sas_request_addr int sas_request_addr ( s#Scsi_Host * , t#u8 * ) 
sas_queuecommand extern int sas_queuecommand ( s#scsi_cmnd * , void ( * ) ( s#scsi_cmnd * ) ) 
sas_target_alloc extern int sas_target_alloc ( s#scsi_target * ) 
sas_slave_configure extern int sas_slave_configure ( s#scsi_device * ) 
sas_slave_destroy extern void sas_slave_destroy ( s#scsi_device * ) 
sas_change_queue_depth extern int sas_change_queue_depth ( s#scsi_device * , int , int ) 
sas_change_queue_type extern int sas_change_queue_type ( s#scsi_device * , int ) 
sas_bios_param extern int sas_bios_param ( s#scsi_device * , s#block_device * , t#sector_t , int * ) 
__sas_task_abort int __sas_task_abort ( s#sas_task * ) 
sas_task_abort void sas_task_abort ( s#sas_task * ) 
sas_phy_reset int sas_phy_reset ( s#sas_phy * , int ) 
sas_phy_enable int sas_phy_enable ( s#sas_phy * , int ) 
sas_eh_device_reset_handler int sas_eh_device_reset_handler ( s#scsi_cmnd * ) 
sas_eh_bus_reset_handler int sas_eh_bus_reset_handler ( s#scsi_cmnd * ) 
sas_slave_alloc extern int sas_slave_alloc ( s#scsi_device * ) 
sas_target_destroy extern void sas_target_destroy ( s#scsi_target * ) 
sas_ioctl extern int sas_ioctl ( s#scsi_device * , int , void * ) 

/* drivers/scsi/libsas/sas_task.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##scsi_host_cmd_pool
s##scsi_sense_hdr
s##scsi_transport_template
s##workqueue_struct
s#ssp_response_iu struct ssp_response_iu { t#u8 _r_a [ 10 ] ; t#u8 datapres : 2 ; t#u8 _r_b : 6 ; t#u8 status ; t#u32 _r_c ; t#__be32 sense_data_len ; t#__be32 response_data_len ; t#u8 resp_data [ 0 ] ; t#u8 sense_data [ 0 ] ; } 
sas_ssp_task_response extern void sas_ssp_task_response ( s#device * , s#sas_task * , s#ssp_response_iu * ) 

/* drivers/scsi/libsrp.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##scsi_sense_hdr
s##proc_dir_entry
s##scsi_transport_template
s##workqueue_struct
s#srp_queue struct srp_queue { void * pool ; void * items ; s#kfifo * queue ; t#spinlock_t lock ; } 
s#srp_buf struct srp_buf { t#dma_addr_t dma ; void * buf ; } 
s#srp_target struct srp_target { s#Scsi_Host * shost ; s#device * dev ; t#spinlock_t lock ; s#list_head cmd_queue ; t#size_t srp_iu_size ; s#srp_queue iu_queue ; t#size_t rx_ring_size ; s#srp_buf * * rx_ring ; void * ldata ; } 
srp_target_alloc extern int srp_target_alloc ( s#srp_target * , s#device * , t#size_t , t#size_t ) 
srp_target_free extern void srp_target_free ( s#srp_target * ) 
s#iu_entry struct iu_entry { s#srp_target * target ; s#list_head ilist ; t#dma_addr_t remote_token ; unsigned long flags ; s#srp_buf * sbuf ; } 
srp_iu_get extern s#iu_entry * srp_iu_get ( s#srp_target * ) 
srp_iu_put extern void srp_iu_put ( s#iu_entry * ) 
s#srp_cmd struct srp_cmd { t#u8 opcode ; t#u8 sol_not ; t#u8 reserved1 [ 3 ] ; t#u8 buf_fmt ; t#u8 data_out_desc_cnt ; t#u8 data_in_desc_cnt ; t#u64 tag ; t#u8 reserved2 [ 4 ] ; t#__be64 lun __attribute__ ( ( packed ) ) ; t#u8 reserved3 ; t#u8 task_attr ; t#u8 reserved4 ; t#u8 add_cdb_len ; t#u8 cdb [ 16 ] ; t#u8 add_data [ 0 ] ; } 
s#srp_direct_buf struct srp_direct_buf { t#__be64 va ; t#__be32 key ; t#__be32 len ; } 
t#srp_rdma_t typedef int ( srp_rdma_t ) ( s#scsi_cmnd * , s#scatterlist * , int , s#srp_direct_buf * , int , e#dma_data_direction , unsigned int ) 
srp_transfer_data extern int srp_transfer_data ( s#scsi_cmnd * , s#srp_cmd * , t#srp_rdma_t , int , int ) 
srp_cmd_queue extern int srp_cmd_queue ( s#Scsi_Host * , s#srp_cmd * , void * , t#u64 , t#u64 ) 

/* drivers/scsi/megaraid/megaraid_mm.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
t#mraid_passthru_t typedef struct { t#uint8_t timeout : 3 ; t#uint8_t ars : 1 ; t#uint8_t reserved : 3 ; t#uint8_t islogical : 1 ; t#uint8_t logdrv ; t#uint8_t channel ; t#uint8_t target ; t#uint8_t queuetag ; t#uint8_t queueaction ; t#uint8_t cdb [ 10 ] ; t#uint8_t cdblen ; t#uint8_t reqsenselen ; t#uint8_t reqsensearea [ 0x20 ] ; t#uint8_t numsge ; t#uint8_t scsistatus ; t#uint32_t dataxferaddr ; t#uint32_t dataxferlen ; } __attribute__ ( ( packed ) ) mraid_passthru_t 
t#__kernel_caddr_t typedef char * __kernel_caddr_t 
t#caddr_t typedef t#__kernel_caddr_t caddr_t 
s#uioc struct uioc { t#uint8_t signature [ 16 ] ; t#uint16_t mb_type ; t#uint16_t app_type ; t#uint32_t opcode ; t#uint32_t adapno ; t#uint64_t cmdbuf ; t#uint32_t xferlen ; t#uint32_t data_dir ; t#int32_t status ; t#uint8_t reserved [ 128 ] ; void * user_data ; t#uint32_t user_data_len ; t#uint32_t pad_for_64bit_align ; t#mraid_passthru_t * user_pthru ; t#mraid_passthru_t * pthru32 ; t#dma_addr_t pthru32_h ; s#list_head list ; void ( * done ) ( s#uioc * ) ; t#caddr_t buf_vaddr ; t#dma_addr_t buf_paddr ; t#int8_t pool_index ; t#uint8_t free_buf ; t#uint8_t timedout ; } 
t#uioc_t typedef s#uioc __attribute__ ( ( aligned ( 1024 ) , packed ) ) uioc_t 
t#mbox_t typedef struct { t#uint8_t cmd ; t#uint8_t cmdid ; t#uint16_t numsectors ; t#uint32_t lba ; t#uint32_t xferaddr ; t#uint8_t logdrv ; t#uint8_t numsge ; t#uint8_t resvd ; t#uint8_t busy ; t#uint8_t numstatus ; t#uint8_t status ; t#uint8_t completed [ 46 ] ; t#uint8_t poll ; t#uint8_t ack ; } __attribute__ ( ( packed ) ) mbox_t 
t#mbox64_t typedef struct { t#uint32_t xferaddr_lo ; t#uint32_t xferaddr_hi ; t#mbox_t mbox32 ; } __attribute__ ( ( packed ) ) mbox64_t 
s##dma_pool
s#mm_dmapool struct mm_dmapool { t#caddr_t vaddr ; t#dma_addr_t paddr ; t#uint32_t buf_size ; s#dma_pool * handle ; t#spinlock_t lock ; t#uint8_t in_use ; } 
t#mm_dmapool_t typedef s#mm_dmapool mm_dmapool_t 
s#mraid_mmadp struct mraid_mmadp { t#uint32_t unique_id ; t#uint32_t drvr_type ; unsigned long drvr_data ; t#uint16_t timeout ; t#uint8_t max_kioc ; s#pci_dev * pdev ; int ( * issue_uioc ) ( unsigned long , t#uioc_t * , t#uint32_t ) ; t#uint32_t quiescent ; s#list_head list ; t#uioc_t * kioc_list ; s#list_head kioc_pool ; t#spinlock_t kioc_pool_lock ; s#semaphore kioc_semaphore ; t#mbox64_t * mbox_list ; s#dma_pool * pthru_dma_pool ; t#mm_dmapool_t dma_pool_list [ 5 ] ; } 
t#mraid_mmadp_t typedef s#mraid_mmadp mraid_mmadp_t 
mraid_mm_register_adp int mraid_mm_register_adp ( t#mraid_mmadp_t * ) 
mraid_mm_unregister_adp int mraid_mm_unregister_adp ( t#uint32_t ) 
mraid_mm_adapter_app_handle t#uint32_t mraid_mm_adapter_app_handle ( t#uint32_t ) 

/* drivers/scsi/osd/osd_initiator.o */
s##Scsi_Host
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
s##scsi_cmnd
s##scsi_sense_hdr
e#osd_std_version enum osd_std_version { OSD_VER_NONE = 0 , OSD_VER1 = 1 , OSD_VER2 = 2 , } 
s#osd_dev struct osd_dev { s#scsi_device * scsi_device ; s#file * file ; unsigned def_timeout ; e#osd_std_version version ; } 
osd_auto_detect_ver int osd_auto_detect_ver ( s#osd_dev * , void * ) 
osd_dev_init void osd_dev_init ( s#osd_dev * , s#scsi_device * ) 
osd_dev_fini void osd_dev_fini ( s#osd_dev * ) 
s#scsi_varlen_cdb_hdr struct scsi_varlen_cdb_hdr { t#u8 opcode ; t#u8 control ; t#u8 misc [ 5 ] ; t#u8 additional_cdb_length ; t#__be16 service_action ; } 
s#__osdv1_cdb_addr_len struct __osdv1_cdb_addr_len { t#__be32 list_identifier ; t#__be64 length ; t#__be64 start_address ; } 
s#__osdv2_cdb_addr_len struct __osdv2_cdb_addr_len { t#__be64 length ; t#__be64 start_address ; union { t#__be32 list_identifier ; t#__be32 cdb_continuation_length ; } ; } 
t#osd_cdb_offset typedef t#__be32 osd_cdb_offset 
s#osd_attributes_page_mode struct osd_attributes_page_mode { t#__be32 get_attr_page ; t#__be32 get_attr_alloc_length ; t#osd_cdb_offset get_attr_offset ; t#__be32 set_attr_page ; t#__be32 set_attr_id ; t#__be32 set_attr_length ; t#osd_cdb_offset set_attr_offset ; } 
s#osd_attributes_list_mode struct osd_attributes_list_mode { t#__be32 get_attr_desc_bytes ; t#osd_cdb_offset get_attr_desc_offset ; t#__be32 get_attr_alloc_length ; t#osd_cdb_offset get_attr_offset ; t#__be32 set_attr_bytes ; t#osd_cdb_offset set_attr_offset ; t#__be32 not_used ; } 
s#osd_attributes_cdb_mode struct osd_attributes_cdb_mode { t#__be32 set_attr_page ; t#__be32 set_attr_id ; t#__be16 set_attr_len ; t#u8 set_attr_val [ 18 ] ; } 
s#osd_cdb_head struct osd_cdb_head { s#scsi_varlen_cdb_hdr varlen_cdb ; t#u8 options ; t#u8 command_specific_options ; t#u8 timestamp_control ; t#u8 reserved1 [ 3 ] ; t#__be64 partition ; t#__be64 object ; union { s#__osdv1_cdb_addr_len __attribute__ ( ( packed ) ) v1 ; s#__osdv2_cdb_addr_len __attribute__ ( ( packed ) ) v2 ; } ; union { s#osd_attributes_page_mode __attribute__ ( ( packed ) ) attrs_page ; s#osd_attributes_list_mode __attribute__ ( ( packed ) ) attrs_list ; s#osd_attributes_cdb_mode __attribute__ ( ( packed ) ) attrs_cdb ; t#u8 get_set_attributes_parameters [ 28 ] ; } ; } 
s#osdv1_security_parameters struct osdv1_security_parameters { t#u8 integrity_check_value [ OSDv1_CRYPTO_KEYID_SIZE ] ; t#u8 request_nonce [ OSD_CRYPTO_NONCE_SIZE ] ; t#osd_cdb_offset data_in_integrity_check_offset ; t#osd_cdb_offset data_out_integrity_check_offset ; } 
s#osdv1_cdb struct osdv1_cdb { s#osd_cdb_head h ; t#u8 caps [ OSDv1_CAP_LEN ] ; s#osdv1_security_parameters sec_params ; } 
s#osdv2_security_parameters struct osdv2_security_parameters { t#u8 integrity_check_value [ OSDv2_CRYPTO_KEYID_SIZE ] ; t#u8 request_nonce [ OSD_CRYPTO_NONCE_SIZE ] ; t#osd_cdb_offset data_in_integrity_check_offset ; t#osd_cdb_offset data_out_integrity_check_offset ; } 
s#osdv2_cdb struct osdv2_cdb { s#osd_cdb_head h ; t#u8 caps [ OSD_CAP_LEN ] ; s#osdv2_security_parameters sec_params ; } 
s#osd_cdb struct osd_cdb { union { s#osdv1_cdb v1 ; s#osdv2_cdb v2 ; t#u8 buff [ OSD_TOTAL_CDB_LEN ] ; } ; } 
s#osd_data_out_integrity_info struct osd_data_out_integrity_info { t#__be64 data_bytes ; t#__be64 set_attributes_bytes ; t#__be64 get_attributes_bytes ; t#__u8 integrity_check_value [ OSD_CRYPTO_KEYID_SIZE ] ; } 
s#osd_data_in_integrity_info struct osd_data_in_integrity_info { t#__be64 data_bytes ; t#__be64 retrieved_attributes_bytes ; t#__u8 integrity_check_value [ OSD_CRYPTO_KEYID_SIZE ] ; } 
s#_osd_req_data_segment struct _osd_req_data_segment { void * buff ; unsigned alloc_size ; unsigned total_bytes ; } 
s#_osd_io_info struct _osd_io_info { s#bio * bio ; t#u64 total_bytes ; s#request * req ; s#_osd_req_data_segment * last_seg ; t#u8 * pad_buff ; } 
e#osd_attributes_mode enum osd_attributes_mode { OSD_CDB_SET_ONE_ATTR = 0x10 , OSD_CDB_GET_ATTR_PAGE_SET_ONE = 0x20 , OSD_CDB_GET_SET_ATTR_LISTS = 0x30 , OSD_CDB_GET_SET_ATTR_MASK = 0x30 , } 
t#osd_req_done_fn typedef void ( osd_req_done_fn ) ( s#osd_request * , void * ) 
s#osd_request struct osd_request { s#osd_cdb cdb ; s#osd_data_out_integrity_info out_data_integ ; s#osd_data_in_integrity_info in_data_integ ; s#osd_dev * osd_dev ; s#request * request ; s#_osd_req_data_segment set_attr , enc_get_attr , get_attr ; s#_osd_io_info out , in ; t#gfp_t alloc_flags ; unsigned timeout ; unsigned retries ; t#u8 sense [ OSD_MAX_SENSE_LEN ] ; e#osd_attributes_mode attributes_mode ; t#osd_req_done_fn * async_done ; void * async_private ; int async_error ; } 
osd_start_request s#osd_request * osd_start_request ( s#osd_dev * , t#gfp_t ) 
osd_end_request void osd_end_request ( s#osd_request * ) 
osd_execute_request int osd_execute_request ( s#osd_request * ) 
osd_execute_request_async int osd_execute_request_async ( s#osd_request * , t#osd_req_done_fn * , void * ) 
osd_req_format void osd_req_format ( s#osd_request * , t#u64 ) 
t#osd_id typedef t#u64 osd_id 
s#osd_obj_id_list struct osd_obj_id_list { t#__be64 list_bytes ; t#__be64 continuation_id ; t#__be32 list_identifier ; t#u8 pad [ 3 ] ; t#u8 root_lstchg ; t#__be64 object_ids [ 0 ] ; } 
osd_req_list_dev_partitions int osd_req_list_dev_partitions ( s#osd_request * , t#osd_id , s#osd_obj_id_list * , unsigned ) 
e#osd_options_flush_scope_values enum osd_options_flush_scope_values { OSD_CDB_FLUSH_ALL = 0 , OSD_CDB_FLUSH_ATTR_ONLY = 1 , OSD_CDB_FLUSH_ALL_RECURSIVE = 2 , OSD_CDB_FLUSH_ALL_RANGE = 2 , } 
osd_req_flush_obsd void osd_req_flush_obsd ( s#osd_request * , e#osd_options_flush_scope_values ) 
osd_req_create_partition void osd_req_create_partition ( s#osd_request * , t#osd_id ) 
osd_req_remove_partition void osd_req_remove_partition ( s#osd_request * , t#osd_id ) 
osd_req_list_partition_collections int osd_req_list_partition_collections ( s#osd_request * , t#osd_id , t#osd_id , s#osd_obj_id_list * , unsigned ) 
osd_req_list_partition_objects int osd_req_list_partition_objects ( s#osd_request * , t#osd_id , t#osd_id , s#osd_obj_id_list * , unsigned ) 
osd_req_flush_partition void osd_req_flush_partition ( s#osd_request * , t#osd_id , e#osd_options_flush_scope_values ) 
s#osd_obj_id struct osd_obj_id { t#osd_id partition ; t#osd_id id ; } 
osd_req_list_collection_objects int osd_req_list_collection_objects ( s#osd_request * , const s#osd_obj_id * , t#osd_id , s#osd_obj_id_list * , unsigned ) 
osd_req_flush_collection void osd_req_flush_collection ( s#osd_request * , const s#osd_obj_id * , e#osd_options_flush_scope_values ) 
osd_req_create_object void osd_req_create_object ( s#osd_request * , s#osd_obj_id * ) 
osd_req_remove_object void osd_req_remove_object ( s#osd_request * , s#osd_obj_id * ) 
osd_req_write void osd_req_write ( s#osd_request * , const s#osd_obj_id * , t#u64 , s#bio * , t#u64 ) 
osd_req_write_kern int osd_req_write_kern ( s#osd_request * , const s#osd_obj_id * , t#u64 , void * , t#u64 ) 
osd_req_flush_object void osd_req_flush_object ( s#osd_request * , const s#osd_obj_id * , e#osd_options_flush_scope_values , t#u64 , t#u64 ) 
osd_req_read void osd_req_read ( s#osd_request * , const s#osd_obj_id * , t#u64 , s#bio * , t#u64 ) 
osd_req_read_kern int osd_req_read_kern ( s#osd_request * , const s#osd_obj_id * , t#u64 , void * , t#u64 ) 
osd_req_get_attributes void osd_req_get_attributes ( s#osd_request * , const s#osd_obj_id * ) 
osd_req_set_attributes void osd_req_set_attributes ( s#osd_request * , const s#osd_obj_id * ) 
s#osd_attr struct osd_attr { t#u32 attr_page ; t#u32 attr_id ; t#u16 len ; void * val_ptr ; } 
osd_req_add_set_attr_list int osd_req_add_set_attr_list ( s#osd_request * , const s#osd_attr * , unsigned ) 
osd_req_add_get_attr_list int osd_req_add_get_attr_list ( s#osd_request * , const s#osd_attr * , unsigned ) 
osd_req_decode_get_attr_list int osd_req_decode_get_attr_list ( s#osd_request * , s#osd_attr * , int * , void * * ) 
osd_req_add_get_attr_page int osd_req_add_get_attr_page ( s#osd_request * , t#u32 , void * , unsigned , const s#osd_attr * ) 
osd_finalize_request int osd_finalize_request ( s#osd_request * , t#u8 , const void * , const t#u8 * ) 
s#osd_sense_info struct osd_sense_info { int key ; int additional_code ; union { t#u16 sense_info ; t#u16 cdb_field_offset ; } ; union { t#u64 command_info ; } ; t#u32 not_initiated_command_functions ; t#u32 completed_command_functions ; s#osd_obj_id obj ; s#osd_attr attr ; } 
osd_req_decode_sense_full int osd_req_decode_sense_full ( s#osd_request * , s#osd_sense_info * , t#bool , s#osd_obj_id * , int , s#osd_attr * , int ) 
osd_sec_init_nosec_doall_caps void osd_sec_init_nosec_doall_caps ( void * , const s#osd_obj_id * , t#bool , const t#bool ) 

/* drivers/scsi/osd/osd_uld.o */
s##Scsi_Host
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##vfsmount
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
s##scsi_cmnd
s##scsi_sense_hdr
t#do_test_fn typedef int ( do_test_fn ) ( s#osd_dev * , unsigned , unsigned long ) 
osduld_register_test int osduld_register_test ( unsigned , t#do_test_fn * ) 
osduld_unregister_test void osduld_unregister_test ( unsigned ) 
osduld_path_lookup s#osd_dev * osduld_path_lookup ( const char * ) 
osduld_put_device void osduld_put_device ( s#osd_dev * ) 

/* drivers/scsi/qla4xxx/ql4_os.o */
qla4xxx_version_str char qla4xxx_version_str [ 40 ] 
qla4xxx_hostlist_ptr s#klist * qla4xxx_hostlist_ptr 

/* drivers/scsi/qlogicfas408.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##scsi_transport_template
s##workqueue_struct
qlogicfas408_info const char * qlogicfas408_info ( s#Scsi_Host * ) 
qlogicfas408_queuecommand int qlogicfas408_queuecommand ( s#scsi_cmnd * , void ( * ) ( s#scsi_cmnd * ) ) 
qlogicfas408_abort int qlogicfas408_abort ( s#scsi_cmnd * ) 
qlogicfas408_bus_reset int qlogicfas408_bus_reset ( s#scsi_cmnd * ) 
qlogicfas408_biosparam int qlogicfas408_biosparam ( s#scsi_device * , s#block_device * , t#sector_t , int [ ] ) 
qlogicfas408_ihandl t#irqreturn_t qlogicfas408_ihandl ( int , void * ) 
qlogicfas408_get_chip_type int qlogicfas408_get_chip_type ( int , int ) 
qlogicfas408_setup void qlogicfas408_setup ( int , int , int ) 
qlogicfas408_detect int qlogicfas408_detect ( int , int ) 
s#qlogicfas408_priv struct qlogicfas408_priv { int qbase ; int qinitid ; int qabort ; int qlirq ; int int_type ; char qinfo [ 80 ] ; s#scsi_cmnd * qlcmd ; s#Scsi_Host * shost ; s#qlogicfas408_priv * next ; } 
qlogicfas408_disable_ints void qlogicfas408_disable_ints ( s#qlogicfas408_priv * ) 

/* drivers/scsi/raid_class.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##class_private
s#raid_template struct raid_template { s#transport_container raid_attrs ; } 
raid_component_add int __attribute__ ( ( warn_unused_result ) ) raid_component_add ( s#raid_template * , s#device * , s#device * ) 
s#raid_function_template struct raid_function_template { void * cookie ; int ( * is_raid ) ( s#device * ) ; void ( * get_resync ) ( s#device * ) ; void ( * get_state ) ( s#device * ) ; } 
raid_class_attach s#raid_template * raid_class_attach ( s#raid_function_template * ) 
raid_class_release void raid_class_release ( s#raid_template * ) 

/* drivers/scsi/scsi.o */
scsi_logging_level extern unsigned int scsi_logging_level 
scsi_device_type extern const char * scsi_device_type ( unsigned ) 
s##array_cache
s##kmem_list3
s#scsi_host_cmd_pool struct scsi_host_cmd_pool { s#kmem_cache * cmd_slab ; s#kmem_cache * sense_slab ; unsigned int users ; char * cmd_name ; char * sense_name ; unsigned int slab_flags ; t#gfp_t gfp_mask ; } 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##scsi_transport_template
s##workqueue_struct
__scsi_get_command extern s#scsi_cmnd * __scsi_get_command ( s#Scsi_Host * , t#gfp_t ) 
scsi_get_command extern s#scsi_cmnd * scsi_get_command ( s#scsi_device * , t#gfp_t ) 
__scsi_put_command extern void __scsi_put_command ( s#Scsi_Host * , s#scsi_cmnd * , s#device * ) 
scsi_put_command extern void scsi_put_command ( s#scsi_cmnd * ) 
scsi_allocate_command s#scsi_cmnd * scsi_allocate_command ( t#gfp_t ) 
scsi_free_command void scsi_free_command ( t#gfp_t , s#scsi_cmnd * ) 
scsi_finish_command extern void scsi_finish_command ( s#scsi_cmnd * ) 
scsi_adjust_queue_depth extern void scsi_adjust_queue_depth ( s#scsi_device * , int , int ) 
scsi_track_queue_full extern int scsi_track_queue_full ( s#scsi_device * , int ) 
scsi_get_vpd_page extern int scsi_get_vpd_page ( s#scsi_device * , t#u8 , unsigned char * , int ) 
scsi_device_get extern int scsi_device_get ( s#scsi_device * ) 
scsi_device_put extern void scsi_device_put ( s#scsi_device * ) 
__scsi_iterate_devices extern s#scsi_device * __scsi_iterate_devices ( s#Scsi_Host * , s#scsi_device * ) 
starget_for_each_device extern void starget_for_each_device ( s#scsi_target * , void * , void ( * ) ( s#scsi_device * , void * ) ) 
__starget_for_each_device extern void __starget_for_each_device ( s#scsi_target * , void * , void ( * ) ( s#scsi_device * , void * ) ) 
__scsi_device_lookup_by_target extern s#scsi_device * __scsi_device_lookup_by_target ( s#scsi_target * , t#uint ) 
scsi_device_lookup_by_target extern s#scsi_device * scsi_device_lookup_by_target ( s#scsi_target * , t#uint ) 
__scsi_device_lookup extern s#scsi_device * __scsi_device_lookup ( s#Scsi_Host * , t#uint , t#uint , t#uint ) 
scsi_device_lookup extern s#scsi_device * scsi_device_lookup ( s#Scsi_Host * , t#uint , t#uint , t#uint ) 

/* drivers/scsi/scsi_devinfo.o */
scsi_dev_info_list_add_keyed extern int scsi_dev_info_list_add_keyed ( int , char * , char * , char * , int , int ) 
s##Scsi_Host
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
s##scsi_cmnd
s##scsi_sense_hdr
scsi_get_device_flags_keyed extern int scsi_get_device_flags_keyed ( s#scsi_device * , const unsigned char * , const unsigned char * , int ) 
scsi_dev_info_add_list extern int scsi_dev_info_add_list ( int , const char * ) 
scsi_dev_info_remove_list extern int scsi_dev_info_remove_list ( int ) 

/* drivers/scsi/scsi_error.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##workqueue_struct
scsi_schedule_eh void scsi_schedule_eh ( s#Scsi_Host * ) 
scsi_block_when_processing_errors extern int scsi_block_when_processing_errors ( s#scsi_device * ) 
s#scsi_eh_save struct scsi_eh_save { int result ; e#dma_data_direction data_direction ; unsigned underflow ; unsigned char cmd_len ; unsigned char prot_op ; unsigned char * cmnd ; s#scsi_data_buffer sdb ; s#request * next_rq ; unsigned char eh_cmnd [ 16 ] ; s#scatterlist sense_sgl ; } 
scsi_eh_prep_cmnd extern void scsi_eh_prep_cmnd ( s#scsi_cmnd * , s#scsi_eh_save * , unsigned char * , int , unsigned ) 
scsi_eh_restore_cmnd extern void scsi_eh_restore_cmnd ( s#scsi_cmnd * , s#scsi_eh_save * ) 
scsi_eh_finish_cmd extern void scsi_eh_finish_cmd ( s#scsi_cmnd * , s#list_head * ) 
scsi_eh_get_sense int scsi_eh_get_sense ( s#list_head * , s#list_head * ) 
scsi_eh_ready_devs void scsi_eh_ready_devs ( s#Scsi_Host * , s#list_head * , s#list_head * ) 
scsi_eh_flush_done_q extern void scsi_eh_flush_done_q ( s#list_head * ) 
scsi_report_bus_reset extern void scsi_report_bus_reset ( s#Scsi_Host * , int ) 
scsi_report_device_reset extern void scsi_report_device_reset ( s#Scsi_Host * , int , int ) 
scsi_reset_provider extern int scsi_reset_provider ( s#scsi_device * , int ) 
scsi_normalize_sense extern int scsi_normalize_sense ( const t#u8 * , int , s#scsi_sense_hdr * ) 
scsi_command_normalize_sense extern int scsi_command_normalize_sense ( s#scsi_cmnd * , s#scsi_sense_hdr * ) 
scsi_sense_desc_find extern const t#u8 * scsi_sense_desc_find ( const t#u8 * , int , int ) 
scsi_get_sense_info_fld extern int scsi_get_sense_info_fld ( const t#u8 * , int , t#u64 * ) 
scsi_build_sense_buffer extern void scsi_build_sense_buffer ( int , t#u8 * , t#u8 , t#u8 , t#u8 ) 

/* drivers/scsi/scsi_ioctl.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##scsi_transport_template
s##workqueue_struct
scsi_set_medium_removal extern int scsi_set_medium_removal ( s#scsi_device * , char ) 
scsi_ioctl extern int scsi_ioctl ( s#scsi_device * , int , void * ) 
scsi_nonblockable_ioctl extern int scsi_nonblockable_ioctl ( s#scsi_device * , int , void * , int ) 

/* drivers/scsi/scsi_lib.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##proc_dir_entry
s##scsi_transport_template
s##workqueue_struct
scsi_execute extern int scsi_execute ( s#scsi_device * , const unsigned char * , int , void * , unsigned , unsigned char * , int , int , int , int * ) 
scsi_execute_req extern int scsi_execute_req ( s#scsi_device * , const unsigned char * , int , void * , unsigned , s#scsi_sense_hdr * , int , int , int * ) 
scsi_release_buffers extern void scsi_release_buffers ( s#scsi_cmnd * ) 
scsi_init_io extern int scsi_init_io ( s#scsi_cmnd * , t#gfp_t ) 
scsi_setup_blk_pc_cmnd int scsi_setup_blk_pc_cmnd ( s#scsi_device * , s#request * ) 
scsi_setup_fs_cmnd int scsi_setup_fs_cmnd ( s#scsi_device * , s#request * ) 
scsi_prep_state_check int scsi_prep_state_check ( s#scsi_device * , s#request * ) 
scsi_prep_return int scsi_prep_return ( s#request_queue * , s#request * , int ) 
scsi_prep_fn int scsi_prep_fn ( s#request_queue * , s#request * ) 
scsi_device_from_queue extern s#scsi_device * scsi_device_from_queue ( s#request_queue * ) 
scsi_calculate_bounce_limit extern t#u64 scsi_calculate_bounce_limit ( s#Scsi_Host * ) 
__scsi_alloc_queue extern s#request_queue * __scsi_alloc_queue ( s#Scsi_Host * , void ( * ) ( s#request_queue * ) ) 
scsi_block_requests extern void scsi_block_requests ( s#Scsi_Host * ) 
scsi_unblock_requests extern void scsi_unblock_requests ( s#Scsi_Host * ) 
s#scsi_mode_data struct scsi_mode_data { t#__u32 length ; t#__u16 block_descriptor_length ; t#__u8 medium_type ; t#__u8 device_specific ; t#__u8 header_length ; t#__u8 longlba : 1 ; } 
scsi_mode_select extern int scsi_mode_select ( s#scsi_device * , int , int , int , unsigned char * , int , int , int , s#scsi_mode_data * , s#scsi_sense_hdr * ) 
scsi_mode_sense extern int scsi_mode_sense ( s#scsi_device * , int , int , unsigned char * , int , int , int , s#scsi_mode_data * , s#scsi_sense_hdr * ) 
scsi_test_unit_ready extern int scsi_test_unit_ready ( s#scsi_device * , int , int , s#scsi_sense_hdr * ) 
scsi_device_set_state extern int scsi_device_set_state ( s#scsi_device * , e#scsi_device_state ) 
e#scsi_device_event enum scsi_device_event { SDEV_EVT_MEDIA_CHANGE = 1 , SDEV_EVT_LAST = SDEV_EVT_MEDIA_CHANGE , SDEV_EVT_MAXBITS = SDEV_EVT_LAST + 1 } 
s#scsi_event struct scsi_event { e#scsi_device_event evt_type ; s#list_head node ; } 
sdev_evt_send extern void sdev_evt_send ( s#scsi_device * , s#scsi_event * ) 
sdev_evt_alloc extern s#scsi_event * sdev_evt_alloc ( e#scsi_device_event , t#gfp_t ) 
sdev_evt_send_simple extern void sdev_evt_send_simple ( s#scsi_device * , e#scsi_device_event , t#gfp_t ) 
scsi_device_quiesce extern int scsi_device_quiesce ( s#scsi_device * ) 
scsi_device_resume extern void scsi_device_resume ( s#scsi_device * ) 
scsi_target_quiesce extern void scsi_target_quiesce ( s#scsi_target * ) 
scsi_target_resume extern void scsi_target_resume ( s#scsi_target * ) 
scsi_internal_device_block extern int scsi_internal_device_block ( s#scsi_device * ) 
scsi_internal_device_unblock extern int scsi_internal_device_unblock ( s#scsi_device * ) 
scsi_target_block extern void scsi_target_block ( s#device * ) 
scsi_target_unblock extern void scsi_target_unblock ( s#device * ) 
scsi_kmap_atomic_sg extern void * scsi_kmap_atomic_sg ( s#scatterlist * , int , t#size_t * , t#size_t * ) 
scsi_kunmap_atomic_sg extern void scsi_kunmap_atomic_sg ( void * ) 

/* drivers/scsi/scsi_lib_dma.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##proc_dir_entry
s##scsi_transport_template
s##workqueue_struct
s##scsi_sense_hdr
scsi_dma_map extern int scsi_dma_map ( s#scsi_cmnd * ) 
scsi_dma_unmap extern void scsi_dma_unmap ( s#scsi_cmnd * ) 

/* drivers/scsi/scsi_netlink.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
scsi_nl_sock extern s#sock * scsi_nl_sock 
scsi_nl_add_transport int scsi_nl_add_transport ( t#u8 , int ( * ) ( s#sk_buff * ) , void ( * ) ( s#notifier_block * , unsigned long , void * ) ) 
scsi_nl_remove_transport void scsi_nl_remove_transport ( t#u8 ) 
s##scsi_host_cmd_pool
s##scsi_transport_template
s##blk_queue_tag
s##workqueue_struct
s##request_queue
s##scsi_device
s##scsi_cmnd
s##scsi_target
e##blk_eh_timer_return
scsi_nl_add_driver int scsi_nl_add_driver ( t#u64 , s#scsi_host_template * , int ( * ) ( s#Scsi_Host * , void * , t#u32 , t#u32 ) , void ( * ) ( s#notifier_block * , unsigned long , void * ) ) 
scsi_nl_remove_driver void scsi_nl_remove_driver ( t#u64 ) 
s#scsi_nl_hdr struct scsi_nl_hdr { t#uint8_t version ; t#uint8_t transport ; t#uint16_t magic ; t#uint16_t msgtype ; t#uint16_t msglen ; } 
scsi_nl_send_transport_msg void scsi_nl_send_transport_msg ( t#u32 , s#scsi_nl_hdr * ) 
scsi_nl_send_vendor_msg int scsi_nl_send_vendor_msg ( t#u32 , unsigned short , t#u64 , char * , t#u32 ) 

/* drivers/scsi/scsi_scan.o */
scsi_complete_async_scans int scsi_complete_async_scans ( void ) 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
scsi_is_target_device extern int scsi_is_target_device ( const s#device * ) 
s#scsi_lun struct scsi_lun { t#__u8 scsi_lun [ 8 ] ; } 
scsilun_to_int extern int scsilun_to_int ( s#scsi_lun * ) 
int_to_scsilun extern void int_to_scsilun ( unsigned int , s#scsi_lun * ) 
s##scsi_host_cmd_pool
s##proc_dir_entry
s##workqueue_struct
__scsi_add_device extern s#scsi_device * __scsi_add_device ( s#Scsi_Host * , t#uint , t#uint , t#uint , void * ) 
scsi_add_device extern int scsi_add_device ( s#Scsi_Host * , t#uint , t#uint , t#uint ) 
scsi_rescan_device extern void scsi_rescan_device ( s#device * ) 
scsi_scan_target extern void scsi_scan_target ( s#device * , unsigned int , unsigned int , unsigned int , int ) 
scsi_scan_host extern void scsi_scan_host ( s#Scsi_Host * ) 
scsi_get_host_dev extern s#scsi_device * scsi_get_host_dev ( s#Scsi_Host * ) 
scsi_free_host_dev extern void scsi_free_host_dev ( s#scsi_device * ) 

/* drivers/scsi/scsi_sysfs.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##bus_type_private
scsi_bus_type extern s#bus_type scsi_bus_type 
s##scsi_host_cmd_pool
s##proc_dir_entry
s##workqueue_struct
s##scsi_sense_hdr
scsi_remove_device extern void scsi_remove_device ( s#scsi_device * ) 
scsi_remove_target extern void scsi_remove_target ( s#device * ) 
scsi_register_driver extern int scsi_register_driver ( s#device_driver * ) 
scsi_register_interface extern int scsi_register_interface ( s#class_interface * ) 
scsi_is_sdev_device extern int scsi_is_sdev_device ( const s#device * ) 

/* drivers/scsi/scsi_tgt_lib.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##proc_dir_entry
s##workqueue_struct
s##scsi_sense_hdr
scsi_host_get_command extern s#scsi_cmnd * scsi_host_get_command ( s#Scsi_Host * , e#dma_data_direction , t#gfp_t ) 
scsi_host_put_command extern void scsi_host_put_command ( s#Scsi_Host * , s#scsi_cmnd * ) 
scsi_tgt_alloc_queue extern int scsi_tgt_alloc_queue ( s#Scsi_Host * ) 
scsi_tgt_free_queue extern void scsi_tgt_free_queue ( s#Scsi_Host * ) 
scsi_tgt_cmd_to_host extern s#Scsi_Host * scsi_tgt_cmd_to_host ( s#scsi_cmnd * ) 
scsi_tgt_queue_command extern int scsi_tgt_queue_command ( s#scsi_cmnd * , t#u64 , s#scsi_lun * , t#u64 ) 
scsi_tgt_tsk_mgmt_request extern int scsi_tgt_tsk_mgmt_request ( s#Scsi_Host * , t#u64 , int , t#u64 , s#scsi_lun * , void * ) 
scsi_tgt_it_nexus_create extern int scsi_tgt_it_nexus_create ( s#Scsi_Host * , t#u64 , char * ) 
scsi_tgt_it_nexus_destroy extern int scsi_tgt_it_nexus_destroy ( s#Scsi_Host * , t#u64 ) 

/* drivers/scsi/scsi_transport_fc.o */
fc_get_event_number t#u32 fc_get_event_number ( void ) 
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##scsi_sense_hdr
s##proc_dir_entry
s##workqueue_struct
e#fc_host_event_code enum fc_host_event_code { FCH_EVT_LIP = 0x1 , FCH_EVT_LINKUP = 0x2 , FCH_EVT_LINKDOWN = 0x3 , FCH_EVT_LIPRESET = 0x4 , FCH_EVT_RSCN = 0x5 , FCH_EVT_ADAPTER_CHANGE = 0x103 , FCH_EVT_PORT_UNKNOWN = 0x200 , FCH_EVT_PORT_OFFLINE = 0x201 , FCH_EVT_PORT_ONLINE = 0x202 , FCH_EVT_PORT_FABRIC = 0x204 , FCH_EVT_LINK_UNKNOWN = 0x500 , FCH_EVT_VENDOR_UNIQUE = 0xffff , } 
fc_host_post_event void fc_host_post_event ( s#Scsi_Host * , t#u32 , e#fc_host_event_code , t#u32 ) 
fc_host_post_vendor_event void fc_host_post_vendor_event ( s#Scsi_Host * , t#u32 , t#u32 , char * , t#u64 ) 
scsi_is_fc_rport int scsi_is_fc_rport ( const s#device * ) 
scsi_is_fc_vport int scsi_is_fc_vport ( const s#device * ) 
s#fc_function_template struct fc_function_template { void ( * get_rport_dev_loss_tmo ) ( s#fc_rport * ) ; void ( * set_rport_dev_loss_tmo ) ( s#fc_rport * , t#u32 ) ; void ( * get_starget_node_name ) ( s#scsi_target * ) ; void ( * get_starget_port_name ) ( s#scsi_target * ) ; void ( * get_starget_port_id ) ( s#scsi_target * ) ; void ( * get_host_port_id ) ( s#Scsi_Host * ) ; void ( * get_host_port_type ) ( s#Scsi_Host * ) ; void ( * get_host_port_state ) ( s#Scsi_Host * ) ; void ( * get_host_active_fc4s ) ( s#Scsi_Host * ) ; void ( * get_host_speed ) ( s#Scsi_Host * ) ; void ( * get_host_fabric_name ) ( s#Scsi_Host * ) ; void ( * get_host_symbolic_name ) ( s#Scsi_Host * ) ; void ( * set_host_system_hostname ) ( s#Scsi_Host * ) ; s#fc_host_statistics * ( * get_fc_host_stats ) ( s#Scsi_Host * ) ; void ( * reset_fc_host_stats ) ( s#Scsi_Host * ) ; int ( * issue_fc_host_lip ) ( s#Scsi_Host * ) ; void ( * dev_loss_tmo_callbk ) ( s#fc_rport * ) ; void ( * terminate_rport_io ) ( s#fc_rport * ) ; void ( * set_vport_symbolic_name ) ( s#fc_vport * ) ; int ( * vport_create ) ( s#fc_vport * , t#bool ) ; int ( * vport_disable ) ( s#fc_vport * , t#bool ) ; int ( * vport_delete ) ( s#fc_vport * ) ; int ( * tsk_mgmt_response ) ( s#Scsi_Host * , t#u64 , t#u64 , int ) ; int ( * it_nexus_response ) ( s#Scsi_Host * , t#u64 , int ) ; int ( * bsg_request ) ( s#fc_bsg_job * ) ; int ( * bsg_timeout ) ( s#fc_bsg_job * ) ; t#u32 dd_fcrport_size ; t#u32 dd_fcvport_size ; t#u32 dd_bsg_size ; unsigned long show_rport_maxframe_size : 1 ; unsigned long show_rport_supported_classes : 1 ; unsigned long show_rport_dev_loss_tmo : 1 ; unsigned long show_starget_node_name : 1 ; unsigned long show_starget_port_name : 1 ; unsigned long show_starget_port_id : 1 ; unsigned long show_host_node_name : 1 ; unsigned long show_host_port_name : 1 ; unsigned long show_host_permanent_port_name : 1 ; unsigned long show_host_supported_classes : 1 ; unsigned long show_host_supported_fc4s : 1 ; unsigned long show_host_supported_speeds : 1 ; unsigned long show_host_maxframe_size : 1 ; unsigned long show_host_serial_number : 1 ; unsigned long show_host_port_id : 1 ; unsigned long show_host_port_type : 1 ; unsigned long show_host_port_state : 1 ; unsigned long show_host_active_fc4s : 1 ; unsigned long show_host_speed : 1 ; unsigned long show_host_fabric_name : 1 ; unsigned long show_host_symbolic_name : 1 ; unsigned long show_host_system_hostname : 1 ; unsigned long disable_target_scan : 1 ; } 
fc_attach_transport s#scsi_transport_template * fc_attach_transport ( s#fc_function_template * ) 
fc_release_transport void fc_release_transport ( s#scsi_transport_template * ) 
fc_remove_host void fc_remove_host ( s#Scsi_Host * ) 
fc_remote_port_add s#fc_rport * fc_remote_port_add ( s#Scsi_Host * , int , s#fc_rport_identifiers * ) 
fc_remote_port_delete void fc_remote_port_delete ( s#fc_rport * ) 
fc_remote_port_rolechg void fc_remote_port_rolechg ( s#fc_rport * , t#u32 ) 
fc_block_scsi_eh int fc_block_scsi_eh ( s#scsi_cmnd * ) 
s#fc_vport_identifiers struct fc_vport_identifiers { t#u64 node_name ; t#u64 port_name ; t#u32 roles ; t#bool disable ; e#fc_port_type vport_type ; char symbolic_name [ 64 ] ; } 
fc_vport_create s#fc_vport * fc_vport_create ( s#Scsi_Host * , int , s#fc_vport_identifiers * ) 
fc_vport_terminate int fc_vport_terminate ( s#fc_vport * ) 

/* drivers/scsi/scsi_transport_iscsi.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
iscsi_create_endpoint extern s#iscsi_endpoint * iscsi_create_endpoint ( int ) 
iscsi_destroy_endpoint extern void iscsi_destroy_endpoint ( s#iscsi_endpoint * ) 
iscsi_lookup_endpoint extern s#iscsi_endpoint * iscsi_lookup_endpoint ( t#u64 ) 
s##scsi_host_cmd_pool
s##scsi_cmnd
s##scsi_sense_hdr
s##workqueue_struct
s##iscsi_task
s##iscsi_conn
iscsi_session_chkready extern int iscsi_session_chkready ( s#iscsi_cls_session * ) 
iscsi_host_for_each_session extern void iscsi_host_for_each_session ( s#Scsi_Host * , void ( * ) ( s#iscsi_cls_session * ) ) 
iscsi_scan_finished extern int iscsi_scan_finished ( s#Scsi_Host * , unsigned long ) 
iscsi_unblock_session extern void iscsi_unblock_session ( s#iscsi_cls_session * ) 
iscsi_block_session extern void iscsi_block_session ( s#iscsi_cls_session * ) 
iscsi_alloc_session extern s#iscsi_cls_session * iscsi_alloc_session ( s#Scsi_Host * , s#iscsi_transport * , int ) 
iscsi_add_session extern int iscsi_add_session ( s#iscsi_cls_session * , unsigned int ) 
iscsi_create_session extern s#iscsi_cls_session * iscsi_create_session ( s#Scsi_Host * , s#iscsi_transport * , int , unsigned int ) 
iscsi_remove_session extern void iscsi_remove_session ( s#iscsi_cls_session * ) 
iscsi_free_session extern void iscsi_free_session ( s#iscsi_cls_session * ) 
iscsi_destroy_session extern int iscsi_destroy_session ( s#iscsi_cls_session * ) 
iscsi_create_conn extern s#iscsi_cls_conn * iscsi_create_conn ( s#iscsi_cls_session * , int , t#uint32_t ) 
iscsi_destroy_conn extern int iscsi_destroy_conn ( s#iscsi_cls_conn * ) 
iscsi_recv_pdu extern int iscsi_recv_pdu ( s#iscsi_cls_conn * , s#iscsi_hdr * , char * , t#uint32_t ) 
iscsi_offload_mesg extern int iscsi_offload_mesg ( s#Scsi_Host * , s#iscsi_transport * , t#uint32_t , char * , t#uint16_t ) 
iscsi_conn_error_event extern void iscsi_conn_error_event ( s#iscsi_cls_conn * , e#iscsi_err ) 
e#iscsi_uevent_e enum iscsi_uevent_e { ISCSI_UEVENT_UNKNOWN = 0 , ISCSI_UEVENT_CREATE_SESSION = 10 + 1 , ISCSI_UEVENT_DESTROY_SESSION = 10 + 2 , ISCSI_UEVENT_CREATE_CONN = 10 + 3 , ISCSI_UEVENT_DESTROY_CONN = 10 + 4 , ISCSI_UEVENT_BIND_CONN = 10 + 5 , ISCSI_UEVENT_SET_PARAM = 10 + 6 , ISCSI_UEVENT_START_CONN = 10 + 7 , ISCSI_UEVENT_STOP_CONN = 10 + 8 , ISCSI_UEVENT_SEND_PDU = 10 + 9 , ISCSI_UEVENT_GET_STATS = 10 + 10 , ISCSI_UEVENT_GET_PARAM = 10 + 11 , ISCSI_UEVENT_TRANSPORT_EP_CONNECT = 10 + 12 , ISCSI_UEVENT_TRANSPORT_EP_POLL = 10 + 13 , ISCSI_UEVENT_TRANSPORT_EP_DISCONNECT = 10 + 14 , ISCSI_UEVENT_TGT_DSCVR = 10 + 15 , ISCSI_UEVENT_SET_HOST_PARAM = 10 + 16 , ISCSI_UEVENT_UNBIND_SESSION = 10 + 17 , ISCSI_UEVENT_CREATE_BOUND_SESSION = 10 + 18 , ISCSI_UEVENT_TRANSPORT_EP_CONNECT_THROUGH_HOST = 10 + 19 , ISCSI_UEVENT_PATH_UPDATE = 10 + 20 , ISCSI_KEVENT_RECV_PDU = 100 + 1 , ISCSI_KEVENT_CONN_ERROR = 100 + 2 , ISCSI_KEVENT_IF_ERROR = 100 + 3 , ISCSI_KEVENT_DESTROY_SESSION = 100 + 4 , ISCSI_KEVENT_UNBIND_SESSION = 100 + 5 , ISCSI_KEVENT_CREATE_SESSION = 100 + 6 , ISCSI_KEVENT_PATH_REQ = 100 + 7 , ISCSI_KEVENT_IF_DOWN = 100 + 8 , } 
iscsi_session_event extern int iscsi_session_event ( s#iscsi_cls_session * , e#iscsi_uevent_e ) 
iscsi_register_transport extern s#scsi_transport_template * iscsi_register_transport ( s#iscsi_transport * ) 
iscsi_unregister_transport extern int iscsi_unregister_transport ( s#iscsi_transport * ) 

/* drivers/scsi/scsi_transport_sas.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
sas_remove_children void sas_remove_children ( s#device * ) 
s##scsi_host_cmd_pool
s##scsi_cmnd
s##scsi_sense_hdr
s##proc_dir_entry
s##workqueue_struct
sas_remove_host extern void sas_remove_host ( s#Scsi_Host * ) 
sas_tlr_supported unsigned int sas_tlr_supported ( s#scsi_device * ) 
sas_disable_tlr void sas_disable_tlr ( s#scsi_device * ) 
sas_enable_tlr void sas_enable_tlr ( s#scsi_device * ) 
sas_is_tlr_enabled unsigned int sas_is_tlr_enabled ( s#scsi_device * ) 
sas_phy_alloc extern s#sas_phy * sas_phy_alloc ( s#device * , int ) 
sas_phy_add extern int sas_phy_add ( s#sas_phy * ) 
sas_phy_free extern void sas_phy_free ( s#sas_phy * ) 
sas_phy_delete extern void sas_phy_delete ( s#sas_phy * ) 
scsi_is_sas_phy extern int scsi_is_sas_phy ( const s#device * ) 
sas_port_alloc s#sas_port * sas_port_alloc ( s#device * , int ) 
sas_port_alloc_num s#sas_port * sas_port_alloc_num ( s#device * ) 
sas_port_add int sas_port_add ( s#sas_port * ) 
sas_port_free void sas_port_free ( s#sas_port * ) 
sas_port_delete void sas_port_delete ( s#sas_port * ) 
scsi_is_sas_port int scsi_is_sas_port ( const s#device * ) 
sas_port_add_phy void sas_port_add_phy ( s#sas_port * , s#sas_phy * ) 
sas_port_delete_phy void sas_port_delete_phy ( s#sas_port * , s#sas_phy * ) 
sas_port_mark_backlink void sas_port_mark_backlink ( s#sas_port * ) 
sas_read_port_mode_page int sas_read_port_mode_page ( s#scsi_device * ) 
sas_end_device_alloc extern s#sas_rphy * sas_end_device_alloc ( s#sas_port * ) 
sas_expander_alloc extern s#sas_rphy * sas_expander_alloc ( s#sas_port * , e#sas_device_type ) 
sas_rphy_add extern int sas_rphy_add ( s#sas_rphy * ) 
sas_rphy_free void sas_rphy_free ( s#sas_rphy * ) 
sas_rphy_delete extern void sas_rphy_delete ( s#sas_rphy * ) 
sas_rphy_remove extern void sas_rphy_remove ( s#sas_rphy * ) 
scsi_is_sas_rphy extern int scsi_is_sas_rphy ( const s#device * ) 
s#sas_phy_linkrates struct sas_phy_linkrates { e#sas_linkrate maximum_linkrate ; e#sas_linkrate minimum_linkrate ; } 
s#sas_function_template struct sas_function_template { int ( * get_linkerrors ) ( s#sas_phy * ) ; int ( * get_enclosure_identifier ) ( s#sas_rphy * , t#u64 * ) ; int ( * get_bay_identifier ) ( s#sas_rphy * ) ; int ( * phy_reset ) ( s#sas_phy * , int ) ; int ( * phy_enable ) ( s#sas_phy * , int ) ; int ( * set_phy_speed ) ( s#sas_phy * , s#sas_phy_linkrates * ) ; int ( * smp_handler ) ( s#Scsi_Host * , s#sas_rphy * , s#request * ) ; } 
sas_attach_transport extern s#scsi_transport_template * sas_attach_transport ( s#sas_function_template * ) 
sas_release_transport extern void sas_release_transport ( s#scsi_transport_template * ) 

/* drivers/scsi/scsi_transport_spi.o */
s##scsi_host_cmd_pool
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##proc_dir_entry
s##workqueue_struct
spi_dv_device void spi_dv_device ( s#scsi_device * ) 
spi_schedule_dv_device void spi_schedule_dv_device ( s#scsi_device * ) 
spi_display_xfer_agreement void spi_display_xfer_agreement ( s#scsi_target * ) 
spi_populate_width_msg int spi_populate_width_msg ( unsigned char * , int ) 
spi_populate_sync_msg int spi_populate_sync_msg ( unsigned char * , int , int ) 
spi_populate_ppr_msg int spi_populate_ppr_msg ( unsigned char * , int , int , int , int ) 
spi_print_msg int spi_print_msg ( const unsigned char * ) 
e#spi_signal_type enum spi_signal_type { SPI_SIGNAL_UNKNOWN = 1 , SPI_SIGNAL_SE , SPI_SIGNAL_LVD , SPI_SIGNAL_HVD , } 
s#spi_function_template struct spi_function_template { void ( * get_period ) ( s#scsi_target * ) ; void ( * set_period ) ( s#scsi_target * , int ) ; void ( * get_offset ) ( s#scsi_target * ) ; void ( * set_offset ) ( s#scsi_target * , int ) ; void ( * get_width ) ( s#scsi_target * ) ; void ( * set_width ) ( s#scsi_target * , int ) ; void ( * get_iu ) ( s#scsi_target * ) ; void ( * set_iu ) ( s#scsi_target * , int ) ; void ( * get_dt ) ( s#scsi_target * ) ; void ( * set_dt ) ( s#scsi_target * , int ) ; void ( * get_qas ) ( s#scsi_target * ) ; void ( * set_qas ) ( s#scsi_target * , int ) ; void ( * get_wr_flow ) ( s#scsi_target * ) ; void ( * set_wr_flow ) ( s#scsi_target * , int ) ; void ( * get_rd_strm ) ( s#scsi_target * ) ; void ( * set_rd_strm ) ( s#scsi_target * , int ) ; void ( * get_rti ) ( s#scsi_target * ) ; void ( * set_rti ) ( s#scsi_target * , int ) ; void ( * get_pcomp_en ) ( s#scsi_target * ) ; void ( * set_pcomp_en ) ( s#scsi_target * , int ) ; void ( * get_hold_mcs ) ( s#scsi_target * ) ; void ( * set_hold_mcs ) ( s#scsi_target * , int ) ; void ( * get_signalling ) ( s#Scsi_Host * ) ; void ( * set_signalling ) ( s#Scsi_Host * , e#spi_signal_type ) ; int ( * deny_binding ) ( s#scsi_target * ) ; unsigned long show_period : 1 ; unsigned long show_offset : 1 ; unsigned long show_width : 1 ; unsigned long show_iu : 1 ; unsigned long show_dt : 1 ; unsigned long show_qas : 1 ; unsigned long show_wr_flow : 1 ; unsigned long show_rd_strm : 1 ; unsigned long show_rti : 1 ; unsigned long show_pcomp_en : 1 ; unsigned long show_hold_mcs : 1 ; } 
spi_attach_transport s#scsi_transport_template * spi_attach_transport ( s#spi_function_template * ) 
spi_release_transport void spi_release_transport ( s#scsi_transport_template * ) 

/* drivers/scsi/scsi_transport_srp.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s#srp_rport struct srp_rport { s#device dev ; t#u8 port_id [ 16 ] ; t#u8 roles ; } 
s##scsi_host_cmd_pool
s##scsi_cmnd
s##scsi_sense_hdr
s##proc_dir_entry
s##workqueue_struct
s#srp_rport_identifiers struct srp_rport_identifiers { t#u8 port_id [ 16 ] ; t#u8 roles ; } 
srp_rport_add extern s#srp_rport * srp_rport_add ( s#Scsi_Host * , s#srp_rport_identifiers * ) 
srp_rport_del extern void srp_rport_del ( s#srp_rport * ) 
srp_remove_host extern void srp_remove_host ( s#Scsi_Host * ) 
s#srp_function_template struct srp_function_template { int ( * tsk_mgmt_response ) ( s#Scsi_Host * , t#u64 , t#u64 , int ) ; int ( * it_nexus_response ) ( s#Scsi_Host * , t#u64 , int ) ; } 
srp_attach_transport extern s#scsi_transport_template * srp_attach_transport ( s#srp_function_template * ) 
srp_release_transport extern void srp_release_transport ( s#scsi_transport_template * ) 

/* drivers/scsi/scsicam.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##blk_trace
s##timer_rand_state
scsi_bios_ptable extern unsigned char * scsi_bios_ptable ( s#block_device * ) 
scsicam_bios_param extern int scsicam_bios_param ( s#block_device * , t#sector_t , int * ) 
scsi_partsize extern int scsi_partsize ( unsigned char * , unsigned long , unsigned int * , unsigned int * , unsigned int * ) 

/* drivers/serial/8250.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s#circ_buf struct circ_buf { char * buf ; int head ; int tail ; } 
s#uart_state struct uart_state { s#tty_port port ; int pm_state ; s#circ_buf xmit ; s#tasklet_struct tlet ; s#uart_port * uart_port ; } 
s#uart_icount struct uart_icount { t#__u32 cts ; t#__u32 dsr ; t#__u32 rng ; t#__u32 dcd ; t#__u32 rx ; t#__u32 tx ; t#__u32 frame ; t#__u32 overrun ; t#__u32 parity ; t#__u32 brk ; t#__u32 buf_overrun ; } 
s#console struct console { char name [ 16 ] ; void ( * write ) ( s#console * , const char * , unsigned ) ; int ( * read ) ( s#console * , char * , unsigned ) ; s#tty_driver * ( * device ) ( s#console * , int * ) ; void ( * unblank ) ( void ) ; int ( * setup ) ( s#console * , char * ) ; int ( * early_setup ) ( void ) ; short flags ; short index ; int cflag ; void * data ; s#console * next ; } 
t#upf_t typedef unsigned int upf_t 
s#uart_ops struct uart_ops { unsigned int ( * tx_empty ) ( s#uart_port * ) ; void ( * set_mctrl ) ( s#uart_port * , unsigned int ) ; unsigned int ( * get_mctrl ) ( s#uart_port * ) ; void ( * stop_tx ) ( s#uart_port * ) ; void ( * start_tx ) ( s#uart_port * ) ; void ( * send_xchar ) ( s#uart_port * , char ) ; void ( * stop_rx ) ( s#uart_port * ) ; void ( * enable_ms ) ( s#uart_port * ) ; void ( * break_ctl ) ( s#uart_port * , int ) ; int ( * startup ) ( s#uart_port * ) ; void ( * shutdown ) ( s#uart_port * ) ; void ( * flush_buffer ) ( s#uart_port * ) ; void ( * set_termios ) ( s#uart_port * , s#ktermios * , s#ktermios * ) ; void ( * set_ldisc ) ( s#uart_port * ) ; void ( * pm ) ( s#uart_port * , unsigned int , unsigned int ) ; int ( * set_wake ) ( s#uart_port * , unsigned int ) ; const char * ( * type ) ( s#uart_port * ) ; void ( * release_port ) ( s#uart_port * ) ; int ( * request_port ) ( s#uart_port * ) ; void ( * config_port ) ( s#uart_port * , int ) ; int ( * verify_port ) ( s#uart_port * , s#serial_struct * ) ; int ( * ioctl ) ( s#uart_port * , unsigned int , unsigned long ) ; } 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#uart_port struct uart_port { t#spinlock_t lock ; unsigned long iobase ; unsigned char * membase ; unsigned int ( * serial_in ) ( s#uart_port * , int ) ; void ( * serial_out ) ( s#uart_port * , int , int ) ; unsigned int irq ; unsigned long irqflags ; unsigned int uartclk ; unsigned int fifosize ; unsigned char x_char ; unsigned char regshift ; unsigned char iotype ; unsigned char unused1 ; unsigned int read_status_mask ; unsigned int ignore_status_mask ; s#uart_state * state ; s#uart_icount icount ; s#console * cons ; unsigned long sysrq ; t#upf_t flags ; unsigned int mctrl ; unsigned int timeout ; unsigned int type ; const s#uart_ops * ops ; unsigned int custom_divisor ; unsigned int line ; t#resource_size_t mapbase ; s#device * dev ; unsigned char hub6 ; unsigned char suspended ; unsigned char unused [ 2 ] ; void * private_data ; } 
serial8250_register_port int serial8250_register_port ( s#uart_port * ) 
serial8250_unregister_port void serial8250_unregister_port ( int ) 
serial8250_suspend_port void serial8250_suspend_port ( int ) 
serial8250_resume_port void serial8250_resume_port ( int ) 

/* drivers/serial/8250_pci.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#pciserial_board struct pciserial_board { unsigned int flags ; unsigned int num_ports ; unsigned int base_baud ; unsigned int uart_offset ; unsigned int reg_shift ; unsigned int first_offset ; } 
s##console
s#pci_serial_quirk struct pci_serial_quirk { t#u32 vendor ; t#u32 device ; t#u32 subvendor ; t#u32 subdevice ; int ( * init ) ( s#pci_dev * ) ; int ( * setup ) ( s#serial_private * , const s#pciserial_board * , s#uart_port * , int ) ; void ( * exit ) ( s#pci_dev * ) ; } 
s#serial_private struct serial_private { s#pci_dev * dev ; unsigned int nr ; void * remapped_bar [ 6 ] ; s#pci_serial_quirk * quirk ; int line [ 0 ] ; } 
pciserial_init_ports s#serial_private * pciserial_init_ports ( s#pci_dev * , const s#pciserial_board * ) 
pciserial_remove_ports void pciserial_remove_ports ( s#serial_private * ) 
pciserial_suspend_ports void pciserial_suspend_ports ( s#serial_private * ) 
pciserial_resume_ports void pciserial_resume_ports ( s#serial_private * ) 

/* drivers/serial/serial_core.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
uart_update_timeout void uart_update_timeout ( s#uart_port * , unsigned int , unsigned int ) 
uart_get_baud_rate unsigned int uart_get_baud_rate ( s#uart_port * , s#ktermios * , s#ktermios * , unsigned int , unsigned int ) 
uart_get_divisor unsigned int uart_get_divisor ( s#uart_port * , unsigned int ) 
uart_console_write void uart_console_write ( s#uart_port * , const char * , unsigned int , void ( * ) ( s#uart_port * , int ) ) 
uart_parse_options void uart_parse_options ( char * , int * , int * , int * , int * ) 
uart_set_options int uart_set_options ( s#uart_port * , s#console * , int , int , int , int ) 
uart_match_port int uart_match_port ( s#uart_port * , s#uart_port * ) 
uart_write_wakeup void uart_write_wakeup ( s#uart_port * ) 
s#uart_driver struct uart_driver { s#module * owner ; const char * driver_name ; const char * dev_name ; int major ; int minor ; int nr ; s#console * cons ; s#uart_state * state ; s#tty_driver * tty_driver ; } 
uart_register_driver int uart_register_driver ( s#uart_driver * ) 
uart_unregister_driver void uart_unregister_driver ( s#uart_driver * ) 
uart_suspend_port int uart_suspend_port ( s#uart_driver * , s#uart_port * ) 
uart_resume_port int uart_resume_port ( s#uart_driver * , s#uart_port * ) 
uart_add_one_port int uart_add_one_port ( s#uart_driver * , s#uart_port * ) 
uart_remove_one_port int uart_remove_one_port ( s#uart_driver * , s#uart_port * ) 

/* drivers/sfi/sfi_core.o */
sfi_disabled extern int sfi_disabled 
s#sfi_table_header struct sfi_table_header { char sig [ 4 ] ; t#u32 len ; t#u8 rev ; t#u8 csum ; char oem_id [ 6 ] ; char oem_table_id [ 8 ] ; } 
t#sfi_table_handler typedef int ( * sfi_table_handler ) ( s#sfi_table_header * ) 
sfi_table_parse extern int sfi_table_parse ( char * , char * , char * , t#sfi_table_handler ) 

/* drivers/spi/spi.o */
s#spi_device_id struct spi_device_id { char name [ 32 ] ; t#kernel_ulong_t driver_data __attribute__ ( ( aligned ( sizeof ( kernel_ulong_t ) ) ) ) ; } 
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
spi_get_device_id extern const s#spi_device_id * spi_get_device_id ( const s#spi_device * ) 
spi_bus_type extern s#bus_type spi_bus_type 
s#spi_driver struct spi_driver { const s#spi_device_id * id_table ; int ( * probe ) ( s#spi_device * ) ; int ( * remove ) ( s#spi_device * ) ; void ( * shutdown ) ( s#spi_device * ) ; int ( * suspend ) ( s#spi_device * , t#pm_message_t ) ; int ( * resume ) ( s#spi_device * ) ; s#device_driver driver ; } 
spi_register_driver extern int spi_register_driver ( s#spi_driver * ) 
spi_alloc_device extern s#spi_device * spi_alloc_device ( s#spi_master * ) 
spi_add_device extern int spi_add_device ( s#spi_device * ) 
s#spi_board_info struct spi_board_info { char modalias [ 32 ] ; const void * platform_data ; void * controller_data ; int irq ; t#u32 max_speed_hz ; t#u16 bus_num ; t#u16 chip_select ; t#u8 mode ; } 
spi_new_device extern s#spi_device * spi_new_device ( s#spi_master * , s#spi_board_info * ) 
spi_alloc_master extern s#spi_master * spi_alloc_master ( s#device * , unsigned ) 
spi_register_master extern int spi_register_master ( s#spi_master * ) 
spi_unregister_master extern void spi_unregister_master ( s#spi_master * ) 
spi_busnum_to_master extern s#spi_master * spi_busnum_to_master ( t#u16 ) 
spi_setup extern int spi_setup ( s#spi_device * ) 
spi_async extern int spi_async ( s#spi_device * , s#spi_message * ) 
spi_sync extern int spi_sync ( s#spi_device * , s#spi_message * ) 
spi_write_then_read extern int spi_write_then_read ( s#spi_device * , const t#u8 * , unsigned , t#u8 * , unsigned ) 

/* drivers/spi/spi_bitbang.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#spi_transfer struct spi_transfer { const void * tx_buf ; void * rx_buf ; unsigned len ; t#dma_addr_t tx_dma ; t#dma_addr_t rx_dma ; unsigned cs_change : 1 ; t#u8 bits_per_word ; t#u16 delay_usecs ; t#u32 speed_hz ; s#list_head transfer_list ; } 
spi_bitbang_setup_transfer extern int spi_bitbang_setup_transfer ( s#spi_device * , s#spi_transfer * ) 
spi_bitbang_setup extern int spi_bitbang_setup ( s#spi_device * ) 
spi_bitbang_cleanup extern void spi_bitbang_cleanup ( s#spi_device * ) 
spi_bitbang_transfer extern int spi_bitbang_transfer ( s#spi_device * , s#spi_message * ) 
s##workqueue_struct
s#spi_bitbang struct spi_bitbang { s#workqueue_struct * workqueue ; s#work_struct work ; t#spinlock_t lock ; s#list_head queue ; t#u8 busy ; t#u8 use_dma ; t#u8 flags ; s#spi_master * master ; int ( * setup_transfer ) ( s#spi_device * , s#spi_transfer * ) ; void ( * chipselect ) ( s#spi_device * , int ) ; int ( * txrx_bufs ) ( s#spi_device * , s#spi_transfer * ) ; t#u32 ( * txrx_word [ 4 ] ) ( s#spi_device * , unsigned , t#u32 , t#u8 ) ; } 
spi_bitbang_start extern int spi_bitbang_start ( s#spi_bitbang * ) 
spi_bitbang_stop extern int spi_bitbang_stop ( s#spi_bitbang * ) 

/* drivers/ssb/driver_chipcommon_pmu.o */
s#ssb_bus_ops struct ssb_bus_ops { t#u8 ( * read8 ) ( s#ssb_device * , t#u16 ) ; t#u16 ( * read16 ) ( s#ssb_device * , t#u16 ) ; t#u32 ( * read32 ) ( s#ssb_device * , t#u16 ) ; void ( * write8 ) ( s#ssb_device * , t#u16 , t#u8 ) ; void ( * write16 ) ( s#ssb_device * , t#u16 , t#u16 ) ; void ( * write32 ) ( s#ssb_device * , t#u16 , t#u32 ) ; void ( * block_read ) ( s#ssb_device * , void * , t#size_t , t#u16 , t#u8 ) ; void ( * block_write ) ( s#ssb_device * , const void * , t#size_t , t#u16 , t#u8 ) ; } 
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
e#ssb_bustype enum ssb_bustype { SSB_BUSTYPE_SSB , SSB_BUSTYPE_PCI , SSB_BUSTYPE_PCMCIA , SSB_BUSTYPE_SDIO , } 
s##proc_dir_entry
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##pcmcia_device
s##sdio_func
s#ssb_pcicore struct ssb_pcicore { s#ssb_device * dev ; t#u8 setup_done : 1 ; t#u8 hostmode : 1 ; t#u8 cardbusmode : 1 ; } 
s#ssb_mipscore struct ssb_mipscore { } 
s#ssb_extif struct ssb_extif { } 
s#ssb_boardinfo struct ssb_boardinfo { t#u16 vendor ; t#u16 type ; t#u16 rev ; } 
s#ssb_sprom struct ssb_sprom { t#u8 revision ; t#u8 il0mac [ 6 ] ; t#u8 et0mac [ 6 ] ; t#u8 et1mac [ 6 ] ; t#u8 et0phyaddr ; t#u8 et1phyaddr ; t#u8 et0mdcport ; t#u8 et1mdcport ; t#u8 board_rev ; t#u8 country_code ; t#u8 ant_available_a ; t#u8 ant_available_bg ; t#u16 pa0b0 ; t#u16 pa0b1 ; t#u16 pa0b2 ; t#u16 pa1b0 ; t#u16 pa1b1 ; t#u16 pa1b2 ; t#u16 pa1lob0 ; t#u16 pa1lob1 ; t#u16 pa1lob2 ; t#u16 pa1hib0 ; t#u16 pa1hib1 ; t#u16 pa1hib2 ; t#u8 gpio0 ; t#u8 gpio1 ; t#u8 gpio2 ; t#u8 gpio3 ; t#u16 maxpwr_bg ; t#u16 maxpwr_al ; t#u16 maxpwr_a ; t#u16 maxpwr_ah ; t#u8 itssi_a ; t#u8 itssi_bg ; t#u8 tri2g ; t#u8 tri5gl ; t#u8 tri5g ; t#u8 tri5gh ; t#u8 rxpo2g ; t#u8 rxpo5g ; t#u8 rssisav2g ; t#u8 rssismc2g ; t#u8 rssismf2g ; t#u8 bxa2g ; t#u8 rssisav5g ; t#u8 rssismc5g ; t#u8 rssismf5g ; t#u8 bxa5g ; t#u16 cck2gpo ; t#u32 ofdm2gpo ; t#u32 ofdm5glpo ; t#u32 ofdm5gpo ; t#u32 ofdm5ghpo ; t#u16 boardflags_lo ; t#u16 boardflags_hi ; t#u16 boardflags2_lo ; t#u16 boardflags2_hi ; struct { struct { t#s8 a0 , a1 , a2 , a3 ; } ghz24 ; struct { t#s8 a0 , a1 , a2 , a3 ; } ghz5 ; } antenna_gain ; } 
s#ssb_bus struct ssb_bus { void * mmio ; const s#ssb_bus_ops * ops ; s#ssb_device * mapped_device ; union { t#u8 mapped_pcmcia_seg ; t#u32 sdio_sbaddr ; } ; t#spinlock_t bar_lock ; e#ssb_bustype bustype ; s#pci_dev * host_pci ; s#pcmcia_device * host_pcmcia ; s#sdio_func * host_sdio ; unsigned int quirks ; s#mutex sprom_mutex ; t#u16 chip_id ; t#u16 chip_rev ; t#u16 sprom_size ; t#u8 chip_package ; s#ssb_device devices [ ( ( 0x18010000U - 0x18000000U ) / 0x1000 ) ] ; t#u8 nr_devices ; unsigned int busnumber ; s#ssb_chipcommon chipco ; s#ssb_pcicore pcicore ; s#ssb_mipscore mipscore ; s#ssb_extif extif ; s#ssb_boardinfo boardinfo ; s#ssb_sprom sprom ; t#bool has_cardbus_slot ; s#list_head list ; } 
s#ssb_device_id struct ssb_device_id { t#__u16 vendor ; t#__u16 coreid ; t#__u8 revision ; } 
s#ssb_device struct ssb_device { const s#ssb_bus_ops * ops ; s#device * dev ; s#ssb_bus * bus ; s#ssb_device_id id ; t#u8 core_index ; unsigned int irq ; void * drvdata ; void * devtypedata ; } 
s#ssb_chipcommon_pmu struct ssb_chipcommon_pmu { t#u8 rev ; t#u32 crystalfreq ; } 
s#ssb_chipcommon struct ssb_chipcommon { s#ssb_device * dev ; t#u32 capabilities ; t#u16 fast_pwrup_delay ; s#ssb_chipcommon_pmu pmu ; } 
e#ssb_pmu_ldo_volt_id enum ssb_pmu_ldo_volt_id { LDO_PAREF = 0 , LDO_VOLT1 , LDO_VOLT2 , LDO_VOLT3 , } 
ssb_pmu_set_ldo_voltage void ssb_pmu_set_ldo_voltage ( s#ssb_chipcommon * , e#ssb_pmu_ldo_volt_id , t#u32 ) 
ssb_pmu_set_ldo_paref void ssb_pmu_set_ldo_paref ( s#ssb_chipcommon * , t#bool ) 

/* drivers/ssb/driver_pcicore.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##proc_dir_entry
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##pcmcia_device
s##sdio_func
ssb_pcicore_dev_irqvecs_enable extern int ssb_pcicore_dev_irqvecs_enable ( s#ssb_pcicore * , s#ssb_device * ) 

/* drivers/ssb/main.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##proc_dir_entry
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##pccard_resource_ops
s##pcmcia_callback
s##user_info_t
s##config_t
s##mmc_card
ssb_bus_resume extern int ssb_bus_resume ( s#ssb_bus * ) 
ssb_bus_suspend extern int ssb_bus_suspend ( s#ssb_bus * ) 
ssb_bus_unregister extern void ssb_bus_unregister ( s#ssb_bus * ) 
ssb_bus_pcibus_register extern int ssb_bus_pcibus_register ( s#ssb_bus * , s#pci_dev * ) 
ssb_bus_pcmciabus_register extern int ssb_bus_pcmciabus_register ( s#ssb_bus * , s#pcmcia_device * , unsigned long ) 
ssb_bus_sdiobus_register extern int ssb_bus_sdiobus_register ( s#ssb_bus * , s#sdio_func * , unsigned int ) 
s#ssb_driver struct ssb_driver { const char * name ; const s#ssb_device_id * id_table ; int ( * probe ) ( s#ssb_device * , const s#ssb_device_id * ) ; void ( * remove ) ( s#ssb_device * ) ; int ( * suspend ) ( s#ssb_device * , t#pm_message_t ) ; int ( * resume ) ( s#ssb_device * ) ; void ( * shutdown ) ( s#ssb_device * ) ; s#device_driver drv ; } 
__ssb_driver_register extern int __ssb_driver_register ( s#ssb_driver * , s#module * ) 
ssb_driver_unregister extern void ssb_driver_unregister ( s#ssb_driver * ) 
ssb_set_devtypedata void ssb_set_devtypedata ( s#ssb_device * , void * ) 
ssb_clockspeed extern t#u32 ssb_clockspeed ( s#ssb_bus * ) 
ssb_device_is_enabled int ssb_device_is_enabled ( s#ssb_device * ) 
ssb_device_enable void ssb_device_enable ( s#ssb_device * , t#u32 ) 
ssb_device_disable void ssb_device_disable ( s#ssb_device * , t#u32 ) 
ssb_dma_translation extern t#u32 ssb_dma_translation ( s#ssb_device * ) 
ssb_dma_set_mask extern int ssb_dma_set_mask ( s#ssb_device * , t#u64 ) 
ssb_dma_alloc_consistent extern void * ssb_dma_alloc_consistent ( s#ssb_device * , t#size_t , t#dma_addr_t * , t#gfp_t ) 
ssb_dma_free_consistent extern void ssb_dma_free_consistent ( s#ssb_device * , t#size_t , void * , t#dma_addr_t , t#gfp_t ) 
ssb_bus_may_powerdown extern int ssb_bus_may_powerdown ( s#ssb_bus * ) 
ssb_bus_powerup extern int ssb_bus_powerup ( s#ssb_bus * , t#bool ) 
ssb_admatch_base extern t#u32 ssb_admatch_base ( t#u32 ) 
ssb_admatch_size extern t#u32 ssb_admatch_size ( t#u32 ) 

/* drivers/ssb/pcihost_wrapper.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
ssb_pcihost_register extern int ssb_pcihost_register ( s#pci_driver * ) 

/* drivers/staging/cx25821/cx25821-core.o */
cx25821_devlist extern s#list_head cx25821_devlist 
s#sram_channel struct sram_channel { char * name ; t#u32 i ; t#u32 cmds_start ; t#u32 ctrl_start ; t#u32 cdt ; t#u32 fifo_start ; t#u32 fifo_size ; t#u32 ptr1_reg ; t#u32 ptr2_reg ; t#u32 cnt1_reg ; t#u32 cnt2_reg ; t#u32 int_msk ; t#u32 int_stat ; t#u32 int_mstat ; t#u32 dma_ctl ; t#u32 gpcnt_ctl ; t#u32 gpcnt ; t#u32 aud_length ; t#u32 aud_cfg ; t#u32 fld_aud_fifo_en ; t#u32 fld_aud_risc_en ; t#u32 vid_fmt_ctl ; t#u32 vid_active_ctl1 ; t#u32 vid_active_ctl2 ; t#u32 vid_cdt_size ; t#u32 vip_ctl ; t#u32 pix_frmt ; t#u32 jumponly ; t#u32 irq_bit ; } 
cx25821_sram_channels extern s#sram_channel cx25821_sram_channels [ ] 
cx25821_print_irqbits extern void cx25821_print_irqbits ( char * , char * , char * * , int , t#u32 , t#u32 ) 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#cx25821_i2c struct cx25821_i2c { s#cx25821_dev * dev ; int nr ; s#i2c_adapter i2c_adap ; s#i2c_algo_bit_data i2c_algo ; s#i2c_client i2c_client ; t#u32 i2c_rc ; t#u32 i2c_period ; t#u32 reg_ctrl ; t#u32 reg_stat ; t#u32 reg_addr ; t#u32 reg_rdata ; t#u32 reg_wdata ; } 
s#cx25821_data struct cx25821_data { s#cx25821_dev * dev ; s#sram_channel * channel ; } 
s#cx25821_dmaqueue struct cx25821_dmaqueue { s#list_head active ; s#list_head queued ; s#timer_list timeout ; s#btcx_riscmem stopper ; t#u32 count ; } 
s#cx25821_tvnorm struct cx25821_tvnorm { char * name ; t#v4l2_std_id id ; t#u32 cxiformat ; t#u32 cxoformat ; } 
s##workqueue_struct
s#cx25821_dev struct cx25821_dev { s#list_head devlist ; t#atomic_t refcount ; s#v4l2_device v4l2_dev ; s#v4l2_prio_state prio ; s#pci_dev * pci ; unsigned char pci_rev , pci_lat ; int pci_bus , pci_slot ; t#u32 base_io_addr ; t#u32 * lmmio ; t#u8 * bmmio ; int pci_irqmask ; int hwrevision ; t#u32 clk_freq ; s#cx25821_i2c i2c_bus [ 3 ] ; int nr ; s#mutex lock ; unsigned int board ; char name [ 32 ] ; s#sram_channel * sram_channels ; t#u32 resources ; unsigned int input ; t#u32 tvaudio ; t#v4l2_std_id tvnorm ; unsigned int tuner_type ; unsigned char tuner_addr ; unsigned int radio_type ; unsigned char radio_addr ; unsigned int has_radio ; unsigned int videc_type ; unsigned char videc_addr ; unsigned short _max_num_decoders ; int ctl_bright ; int ctl_contrast ; int ctl_hue ; int ctl_saturation ; s#cx25821_data timeout_data [ 12 ] ; int _audio_is_running ; int _audiopixel_format ; int _is_first_audio_frame ; int _audiofile_status ; int _audio_lines_count ; int _audioframe_count ; int _audio_upstream_channel_select ; int _last_index_irq ; t#__le32 * _risc_audio_jmp_addr ; t#__le32 * _risc_virt_start_addr ; t#__le32 * _risc_virt_addr ; t#dma_addr_t _risc_phys_addr ; t#dma_addr_t _risc_phys_start_addr ; unsigned int _audiorisc_size ; unsigned int _audiodata_buf_size ; t#__le32 * _audiodata_buf_virt_addr ; t#dma_addr_t _audiodata_buf_phys_addr ; char * _audiofilename ; t#u32 freq ; s#video_device * video_dev [ 12 ] ; s#video_device * vbi_dev ; s#video_device * radio_dev ; s#video_device * ioctl_dev ; s#cx25821_dmaqueue vidq [ 12 ] ; t#spinlock_t slock ; int _line_size ; int _prog_cnt ; int _pixel_format ; int _is_first_frame ; int _is_running ; int _file_status ; int _lines_count ; int _frame_count ; int _channel_upstream_select ; unsigned int _risc_size ; t#__le32 * _dma_virt_start_addr ; t#__le32 * _dma_virt_addr ; t#dma_addr_t _dma_phys_addr ; t#dma_addr_t _dma_phys_start_addr ; unsigned int _data_buf_size ; t#__le32 * _data_buf_virt_addr ; t#dma_addr_t _data_buf_phys_addr ; char * _filename ; char * _defaultname ; int _line_size_ch2 ; int _prog_cnt_ch2 ; int _pixel_format_ch2 ; int _is_first_frame_ch2 ; int _is_running_ch2 ; int _file_status_ch2 ; int _lines_count_ch2 ; int _frame_count_ch2 ; int _channel2_upstream_select ; unsigned int _risc_size_ch2 ; t#__le32 * _dma_virt_start_addr_ch2 ; t#__le32 * _dma_virt_addr_ch2 ; t#dma_addr_t _dma_phys_addr_ch2 ; t#dma_addr_t _dma_phys_start_addr_ch2 ; unsigned int _data_buf_size_ch2 ; t#__le32 * _data_buf_virt_addr_ch2 ; t#dma_addr_t _data_buf_phys_addr_ch2 ; char * _filename_ch2 ; char * _defaultname_ch2 ; t#u32 cx23417_mailbox ; s#cx2341x_mpeg_params mpeg_params ; s#video_device * v4l_device ; t#atomic_t v4l_reader_count ; s#cx25821_tvnorm encodernorm ; t#u32 upstream_riscbuf_size ; t#u32 upstream_databuf_size ; t#u32 upstream_riscbuf_size_ch2 ; t#u32 upstream_databuf_size_ch2 ; t#u32 audio_upstream_riscbuf_size ; t#u32 audio_upstream_databuf_size ; int _isNTSC ; int _frame_index ; int _audioframe_index ; s#workqueue_struct * _irq_queues ; s#work_struct _irq_work_entry ; s#workqueue_struct * _irq_queues_ch2 ; s#work_struct _irq_work_entry_ch2 ; s#workqueue_struct * _irq_audio_queues ; s#work_struct _audio_work_entry ; char * input_filename ; char * input_filename_ch2 ; int _frame_index_ch2 ; int _isNTSC_ch2 ; char * vid_stdname_ch2 ; int pixel_format_ch2 ; int channel_select_ch2 ; int command_ch2 ; char * input_audiofilename ; char * vid_stdname ; int pixel_format ; int channel_select ; int command ; int pixel_formats [ 8 ] ; int use_cif_resolution [ 8 ] ; int cif_width [ 8 ] ; int channel_opened ; } 
cx25821_dev_get extern s#cx25821_dev * cx25821_dev_get ( s#pci_dev * ) 
cx25821_dev_unregister extern void cx25821_dev_unregister ( s#cx25821_dev * ) 
cx25821_sram_channel_setup extern int cx25821_sram_channel_setup ( s#cx25821_dev * , s#sram_channel * , unsigned int , t#u32 ) 
cx25821_sram_channel_dump extern void cx25821_sram_channel_dump ( s#cx25821_dev * , s#sram_channel * ) 
cx25821_sram_channel_setup_audio extern int cx25821_sram_channel_setup_audio ( s#cx25821_dev * , s#sram_channel * , unsigned int , t#u32 ) 
cx25821_sram_channel_dump_audio extern void cx25821_sram_channel_dump_audio ( s#cx25821_dev * , s#sram_channel * ) 
cx25821_risc_databuffer_audio extern int cx25821_risc_databuffer_audio ( s#pci_dev * , s#btcx_riscmem * , s#scatterlist * , unsigned int , unsigned int , unsigned int ) 
cx25821_set_gpiopin_direction extern void cx25821_set_gpiopin_direction ( s#cx25821_dev * , int , int ) 

/* drivers/staging/echo/echo.o */
s#fir16_state_t struct fir16_state_t { int taps ; int curr_pos ; const t#int16_t * coeffs ; t#int16_t * history ; } 
s#oslec_state struct oslec_state { t#int16_t tx , rx ; t#int16_t clean ; t#int16_t clean_nlp ; int nonupdate_dwell ; int curr_pos ; int taps ; int log2taps ; int adaption_mode ; int cond_met ; t#int32_t Pstates ; t#int16_t adapt ; t#int32_t factor ; t#int16_t shift ; int Ltxacc , Lrxacc , Lcleanacc , Lclean_bgacc ; int Ltx , Lrx ; int Lclean ; int Lclean_bg ; int Lbgn , Lbgn_acc , Lbgn_upper , Lbgn_upper_acc ; s#fir16_state_t fir_state ; s#fir16_state_t fir_state_bg ; t#int16_t * fir_taps16 [ 2 ] ; int tx_1 , tx_2 , rx_1 , rx_2 ; t#int32_t xvtx [ 5 ] , yvtx [ 5 ] ; t#int32_t xvrx [ 5 ] , yvrx [ 5 ] ; int cng_level ; int cng_rndnum ; int cng_filter ; t#int16_t * snapshot ; } 
oslec_create s#oslec_state * oslec_create ( int , int ) 
oslec_free void oslec_free ( s#oslec_state * ) 
oslec_adaption_mode void oslec_adaption_mode ( s#oslec_state * , int ) 
oslec_flush void oslec_flush ( s#oslec_state * ) 
oslec_snapshot void oslec_snapshot ( s#oslec_state * ) 
oslec_update t#int16_t oslec_update ( s#oslec_state * , t#int16_t , t#int16_t ) 
oslec_hpf_tx t#int16_t oslec_hpf_tx ( s#oslec_state * , t#int16_t ) 

/* drivers/staging/go7007/go7007-driver.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#go7007_board_info struct go7007_board_info { char * firmware ; unsigned int flags ; int hpi_buffer_cap ; unsigned int sensor_flags ; int sensor_width ; int sensor_height ; int sensor_framerate ; int sensor_h_offset ; int sensor_v_offset ; unsigned int audio_flags ; int audio_rate ; int audio_bclk_div ; int audio_main_div ; int num_i2c_devs ; struct { const char * type ; int id ; int addr ; } i2c_devs [ 4 ] ; int num_inputs ; struct { int video_input ; int audio_input ; char * name ; } inputs [ 4 ] ; } 
s##v4l2_device
s##v4l2_ioctl_ops
s#go7007_buffer struct go7007_buffer { s#go7007 * go ; int index ; enum { BUF_STATE_IDLE , BUF_STATE_QUEUED , BUF_STATE_DONE } state ; t#u32 seq ; s#timeval timestamp ; s#list_head stream ; s#page * pages [ ( 128 * 1024 / ( ( 1UL ) << 12 ) ) + 1 ] ; unsigned long user_addr ; unsigned int page_count ; unsigned int offset ; unsigned int bytesused ; unsigned int frame_offset ; t#u32 modet_active ; int mapped ; } 
e#go7007_parser_state enum go7007_parser_state { STATE_DATA , STATE_00 , STATE_00_00 , STATE_00_00_01 , STATE_FF , STATE_VBI_LEN_A , STATE_VBI_LEN_B , STATE_MODET_MAP , STATE_UNPARSED , } 
s#go7007_hpi_ops struct go7007_hpi_ops { int ( * interface_reset ) ( s#go7007 * ) ; int ( * write_interrupt ) ( s#go7007 * , int , int ) ; int ( * read_interrupt ) ( s#go7007 * ) ; int ( * stream_start ) ( s#go7007 * ) ; int ( * stream_stop ) ( s#go7007 * ) ; int ( * send_firmware ) ( s#go7007 * , t#u8 * , int ) ; int ( * send_command ) ( s#go7007 * , unsigned int , void * ) ; } 
s#go7007 struct go7007 { s#device * dev ; s#go7007_board_info * board_info ; unsigned int board_id ; int tuner_type ; int channel_number ; char name [ 64 ] ; s#video_device * video_dev ; int ref_count ; enum { STATUS_INIT , STATUS_ONLINE , STATUS_SHUTDOWN } status ; t#spinlock_t spinlock ; s#mutex hw_lock ; int streaming ; int in_use ; int audio_enabled ; int input ; enum { GO7007_STD_NTSC , GO7007_STD_PAL , GO7007_STD_OTHER } standard ; int sensor_framerate ; int width ; int height ; int encoder_h_offset ; int encoder_v_offset ; unsigned int encoder_h_halve : 1 ; unsigned int encoder_v_halve : 1 ; unsigned int encoder_subsample : 1 ; int format ; int bitrate ; int fps_scale ; int pali ; int aspect_ratio ; int gop_size ; unsigned int ipb : 1 ; unsigned int closed_gop : 1 ; unsigned int repeat_seqhead : 1 ; unsigned int seq_header_enable : 1 ; unsigned int gop_header_enable : 1 ; unsigned int dvd_mode : 1 ; unsigned int interlace_coding : 1 ; unsigned int modet_enable : 1 ; struct { unsigned int enable : 1 ; int pixel_threshold ; int motion_threshold ; int mb_threshold ; } modet [ 4 ] ; unsigned char modet_map [ 1624 ] ; unsigned char active_map [ 216 ] ; s#go7007_buffer * active_buf ; e#go7007_parser_state state ; int parse_length ; t#u16 modet_word ; int seen_frame ; t#u32 next_seq ; s#list_head stream ; t#wait_queue_head_t frame_waitq ; void ( * audio_deliver ) ( s#go7007 * , t#u8 * , int ) ; void * snd_context ; int i2c_adapter_online ; s#i2c_adapter i2c_adapter ; s#go7007_hpi_ops * hpi_ops ; void * hpi_context ; int interrupt_available ; t#wait_queue_head_t interrupt_waitq ; unsigned short interrupt_value ; unsigned short interrupt_data ; } 
go7007_read_interrupt int go7007_read_interrupt ( s#go7007 * , t#u16 * , t#u16 * ) 
go7007_read_addr int go7007_read_addr ( s#go7007 * , t#u16 , t#u16 * ) 
go7007_boot_encoder int go7007_boot_encoder ( s#go7007 * , int ) 
go7007_register_encoder int go7007_register_encoder ( s#go7007 * ) 
go7007_parse_video_stream void go7007_parse_video_stream ( s#go7007 * , t#u8 * , int ) 
go7007_alloc s#go7007 * go7007_alloc ( s#go7007_board_info * , s#device * ) 
go7007_remove void go7007_remove ( s#go7007 * ) 

/* drivers/staging/go7007/s2250-loader.o */
s2250loader_init int s2250loader_init ( void ) 
s2250loader_cleanup void s2250loader_cleanup ( void ) 

/* drivers/staging/go7007/snd-go7007.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##video_device
go7007_snd_init int go7007_snd_init ( s#go7007 * ) 
go7007_snd_remove int go7007_snd_remove ( s#go7007 * ) 

/* drivers/staging/hv/osd.o */
osd_PageAlloc extern void * osd_PageAlloc ( unsigned int ) 
osd_PageFree extern void osd_PageFree ( void * , unsigned int ) 
s#osd_waitevent struct osd_waitevent { int condition ; t#wait_queue_head_t event ; } 
osd_WaitEventCreate extern s#osd_waitevent * osd_WaitEventCreate ( void ) 
osd_WaitEventSet extern void osd_WaitEventSet ( s#osd_waitevent * ) 
osd_WaitEventWait extern int osd_WaitEventWait ( s#osd_waitevent * ) 
osd_WaitEventWaitEx extern int osd_WaitEventWaitEx ( s#osd_waitevent * , t#u32 ) 

/* drivers/staging/hv/vmbus_drv.o */
vmbus_loglevel extern unsigned int vmbus_loglevel 
s#hv_guid struct hv_guid { unsigned char data [ 16 ] ; } 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##device_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##bus_type_private
s##driver_private
s#driver_context struct driver_context { s#hv_guid class_id ; s#device_driver driver ; int ( * probe ) ( s#device * ) ; int ( * remove ) ( s#device * ) ; void ( * shutdown ) ( s#device * ) ; } 
vmbus_child_driver_register int vmbus_child_driver_register ( s#driver_context * ) 
vmbus_child_driver_unregister void vmbus_child_driver_unregister ( s#driver_context * ) 
s#hv_driver struct hv_driver { const char * name ; s#hv_guid deviceType ; int ( * OnDeviceAdd ) ( s#hv_device * , void * ) ; int ( * OnDeviceRemove ) ( s#hv_device * ) ; void ( * OnCleanup ) ( s#hv_driver * ) ; s#vmbus_channel_interface VmbusChannelInterface ; } 
s#hv_device struct hv_device { s#hv_driver * Driver ; char name [ 64 ] ; s#hv_guid deviceType ; s#hv_guid deviceInstance ; void * context ; void * Extension ; } 
s#hv_page_buffer struct hv_page_buffer { t#u32 Length ; t#u32 Offset ; t#u64 Pfn ; } 
s#hv_multipage_buffer struct hv_multipage_buffer { t#u32 Length ; t#u32 Offset ; t#u64 PfnArray [ 32 ] ; } 
s#hv_dev_port_info struct hv_dev_port_info { t#u32 InterruptMask ; t#u32 ReadIndex ; t#u32 WriteIndex ; t#u32 BytesAvailToRead ; t#u32 BytesAvailToWrite ; } 
s#hv_device_info struct hv_device_info { t#u32 ChannelId ; t#u32 ChannelState ; s#hv_guid ChannelType ; s#hv_guid ChannelInstance ; t#u32 MonitorId ; t#u32 ServerMonitorPending ; t#u32 ServerMonitorLatency ; t#u32 ServerMonitorConnectionId ; t#u32 ClientMonitorPending ; t#u32 ClientMonitorLatency ; t#u32 ClientMonitorConnectionId ; s#hv_dev_port_info Inbound ; s#hv_dev_port_info Outbound ; } 
s#vmbus_channel_interface struct vmbus_channel_interface { int ( * Open ) ( s#hv_device * , t#u32 , t#u32 , void * , t#u32 , void ( * ) ( void * ) , void * ) ; void ( * Close ) ( s#hv_device * ) ; int ( * SendPacket ) ( s#hv_device * , const void * , t#u32 , t#u64 , t#u32 , t#u32 ) ; int ( * SendPacketPageBuffer ) ( s#hv_device * , s#hv_page_buffer [ ] , t#u32 , void * , t#u32 , t#u64 ) ; int ( * SendPacketMultiPageBuffer ) ( s#hv_device * , s#hv_multipage_buffer * , void * , t#u32 , t#u64 ) ; int ( * RecvPacket ) ( s#hv_device * , void * , t#u32 , t#u32 * , t#u64 * ) ; int ( * RecvPacketRaw ) ( s#hv_device * , void * , t#u32 , t#u32 * , t#u64 * ) ; int ( * EstablishGpadl ) ( s#hv_device * , void * , t#u32 , t#u32 * ) ; int ( * TeardownGpadl ) ( s#hv_device * , t#u32 ) ; void ( * GetInfo ) ( s#hv_device * , s#hv_device_info * ) ; } 
vmbus_get_interface void vmbus_get_interface ( s#vmbus_channel_interface * ) 

/* drivers/staging/iio/industrialio-core.o */
iio_devt extern t#dev_t iio_devt 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
iio_class extern s#class iio_class 
s#iio_event_data struct iio_event_data { int id ; t#s64 timestamp ; } 
s#iio_shared_ev_pointer struct iio_shared_ev_pointer { s#iio_detected_event_list * ev_p ; t#spinlock_t lock ; } 
s#iio_detected_event_list struct iio_detected_event_list { s#list_head list ; s#iio_event_data ev ; s#iio_shared_ev_pointer * shared_pointer ; } 
__iio_change_event void __iio_change_event ( s#iio_detected_event_list * , int , t#s64 ) 
s#iio_handler struct iio_handler { s#cdev chrdev ; int id ; unsigned long flags ; void * private ; } 
s#iio_chrdev_minor_attr struct iio_chrdev_minor_attr { s#device_attribute dev_attr ; int minor ; } 
s#iio_event_interface struct iio_event_interface { s#device dev ; s#iio_handler handler ; t#wait_queue_head_t wait ; s#mutex event_list_lock ; s#iio_detected_event_list det_events ; int max_events ; int current_events ; int id ; s#iio_chrdev_minor_attr attr ; s#module * owner ; void * private ; char _name [ 20 ] ; char _attrname [ 20 ] ; } 
__iio_push_event int __iio_push_event ( s#iio_event_interface * , int , t#s64 , s#iio_shared_ev_pointer * ) 
s#iio_interrupt struct iio_interrupt { s#iio_dev * dev_info ; int line_number ; int id ; int irq ; s#list_head ev_list ; t#spinlock_t ev_list_lock ; } 
s##iio_ring_buffer
s##iio_trigger
s##iio_poll_func
s#iio_dev struct iio_dev { int id ; void * dev_data ; int modes ; int currentmode ; s#device dev ; const s#attribute_group * attrs ; s#module * driver_module ; int num_interrupt_lines ; s#iio_interrupt * * interrupts ; s#attribute_group * event_attrs ; s#attribute_group * event_conf_attrs ; s#iio_event_interface * event_interfaces ; s#iio_ring_buffer * ring ; s#mutex mlock ; s#attribute_group * scan_el_attrs ; int scan_count ; t#u16 scan_mask ; t#bool scan_timestamp ; s#iio_trigger * trig ; s#iio_poll_func * pollfunc ; } 
iio_push_event int iio_push_event ( s#iio_dev * , int , int , t#s64 ) 
iio_register_interrupt_line int iio_register_interrupt_line ( unsigned int , s#iio_dev * , int , unsigned long , const char * ) 
iio_read_const_attr t#ssize_t iio_read_const_attr ( s#device * , s#device_attribute * , char * ) 
iio_unregister_interrupt_line void iio_unregister_interrupt_line ( s#iio_dev * , int ) 
s#iio_event_handler_list struct iio_event_handler_list { s#list_head list ; int refcount ; s#mutex exist_lock ; int ( * handler ) ( s#iio_dev * , int , t#s64 , int ) ; } 
iio_add_event_to_list void iio_add_event_to_list ( s#iio_event_handler_list * , s#list_head * ) 
iio_remove_event_from_list void iio_remove_event_from_list ( s#iio_event_handler_list * , s#list_head * ) 
iio_get_new_idr_val int iio_get_new_idr_val ( s#idr * ) 
iio_free_idr_val void iio_free_idr_val ( s#idr * , int ) 
iio_allocate_device s#iio_dev * iio_allocate_device ( void ) 
iio_free_device void iio_free_device ( s#iio_dev * ) 
iio_device_register int iio_device_register ( s#iio_dev * ) 
iio_device_unregister void iio_device_unregister ( s#iio_dev * ) 

/* drivers/staging/iio/industrialio-ring.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##kstatfs
s##seq_file
s##page
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##radix_tree_node
s##writeback_control
s##kiocb
s##iovec
s##pipe_inode_info
s##posix_acl
s##cred
s##vm_area_struct
s##iio_trigger
s##iio_poll_func
s#iio_ring_access_funcs struct iio_ring_access_funcs { void ( * mark_in_use ) ( s#iio_ring_buffer * ) ; void ( * unmark_in_use ) ( s#iio_ring_buffer * ) ; int ( * store_to ) ( s#iio_ring_buffer * , t#u8 * , t#s64 ) ; int ( * read_last ) ( s#iio_ring_buffer * , t#u8 * ) ; int ( * rip_lots ) ( s#iio_ring_buffer * , t#size_t , t#u8 * * , int * ) ; int ( * mark_param_change ) ( s#iio_ring_buffer * ) ; int ( * request_update ) ( s#iio_ring_buffer * ) ; int ( * get_bpd ) ( s#iio_ring_buffer * ) ; int ( * set_bpd ) ( s#iio_ring_buffer * , t#size_t ) ; int ( * get_length ) ( s#iio_ring_buffer * ) ; int ( * set_length ) ( s#iio_ring_buffer * , int ) ; int ( * is_enabled ) ( s#iio_ring_buffer * ) ; int ( * enable ) ( s#iio_ring_buffer * ) ; } 
s#iio_ring_buffer struct iio_ring_buffer { s#device dev ; s#device access_dev ; s#iio_dev * indio_dev ; s#module * owner ; int id ; int access_id ; int length ; int bpd ; int loopcount ; s#iio_handler access_handler ; s#iio_event_interface ev_int ; s#iio_shared_ev_pointer shared_ev_pointer ; s#iio_ring_access_funcs access ; int ( * preenable ) ( s#iio_dev * ) ; int ( * postenable ) ( s#iio_dev * ) ; int ( * predisable ) ( s#iio_dev * ) ; int ( * postdisable ) ( s#iio_dev * ) ; } 
iio_push_ring_event int iio_push_ring_event ( s#iio_ring_buffer * , int , t#s64 ) 
iio_push_or_escallate_ring_event int iio_push_or_escallate_ring_event ( s#iio_ring_buffer * , int , t#s64 ) 
iio_ring_buffer_init void iio_ring_buffer_init ( s#iio_ring_buffer * , s#iio_dev * ) 
iio_ring_buffer_register int iio_ring_buffer_register ( s#iio_ring_buffer * ) 
iio_ring_buffer_unregister void iio_ring_buffer_unregister ( s#iio_ring_buffer * ) 
iio_read_ring_length t#ssize_t iio_read_ring_length ( s#device * , s#device_attribute * , char * ) 
iio_write_ring_length t#ssize_t iio_write_ring_length ( s#device * , s#device_attribute * , const char * , t#size_t ) 
iio_read_ring_bps t#ssize_t iio_read_ring_bps ( s#device * , s#device_attribute * , char * ) 
iio_store_ring_enable t#ssize_t iio_store_ring_enable ( s#device * , s#device_attribute * , const char * , t#size_t ) 
iio_show_ring_enable t#ssize_t iio_show_ring_enable ( s#device * , s#device_attribute * , char * ) 
iio_scan_el_show t#ssize_t iio_scan_el_show ( s#device * , s#device_attribute * , char * ) 
iio_scan_el_store t#ssize_t iio_scan_el_store ( s#device * , s#device_attribute * , const char * , t#size_t ) 
iio_scan_el_ts_show t#ssize_t iio_scan_el_ts_show ( s#device * , s#device_attribute * , char * ) 
iio_scan_el_ts_store t#ssize_t iio_scan_el_ts_store ( s#device * , s#device_attribute * , const char * , t#size_t ) 

/* drivers/staging/iio/industrialio-trigger.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#iio_trigger struct iio_trigger { int id ; const char * name ; s#device dev ; void * private_data ; s#list_head list ; s#list_head alloc_list ; t#spinlock_t pollfunc_list_lock ; s#list_head pollfunc_list ; const s#attribute_group * control_attrs ; t#s64 timestamp ; s#module * owner ; int use_count ; int ( * set_trigger_state ) ( s#iio_trigger * , t#bool ) ; int ( * try_reenable ) ( s#iio_trigger * ) ; } 
iio_trigger_register int iio_trigger_register ( s#iio_trigger * ) 
iio_trigger_unregister void iio_trigger_unregister ( s#iio_trigger * ) 
iio_trigger_find_by_name s#iio_trigger * iio_trigger_find_by_name ( const char * , t#size_t ) 
iio_trigger_poll void iio_trigger_poll ( s#iio_trigger * ) 
iio_trigger_notify_done void iio_trigger_notify_done ( s#iio_trigger * ) 
iio_trigger_read_name t#ssize_t iio_trigger_read_name ( s#device * , s#device_attribute * , char * ) 
s##file_operations
s##map_segment
s##compat_timespec
s##pollfd
s##iio_ring_buffer
s#iio_poll_func struct iio_poll_func { s#list_head list ; void * private_data ; void ( * poll_func_immediate ) ( s#iio_dev * ) ; void ( * poll_func_main ) ( s#iio_dev * ) ; } 
iio_trigger_attach_poll_func int iio_trigger_attach_poll_func ( s#iio_trigger * , s#iio_poll_func * ) 
iio_trigger_dettach_poll_func int iio_trigger_dettach_poll_func ( s#iio_trigger * , s#iio_poll_func * ) 
iio_allocate_trigger s#iio_trigger * iio_allocate_trigger ( void ) 
iio_free_trigger void iio_free_trigger ( s#iio_trigger * ) 
iio_device_register_trigger_consumer int iio_device_register_trigger_consumer ( s#iio_dev * ) 
iio_device_unregister_trigger_consumer int iio_device_unregister_trigger_consumer ( s#iio_dev * ) 

/* drivers/staging/iio/ring_sw.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##file_operations
s##map_segment
s##compat_timespec
s##pollfd
s##iio_trigger
s##iio_poll_func
iio_mark_sw_rb_in_use void iio_mark_sw_rb_in_use ( s#iio_ring_buffer * ) 
iio_unmark_sw_rb_in_use void iio_unmark_sw_rb_in_use ( s#iio_ring_buffer * ) 
iio_rip_sw_rb int iio_rip_sw_rb ( s#iio_ring_buffer * , t#size_t , t#u8 * * , int * ) 
iio_store_to_sw_rb int iio_store_to_sw_rb ( s#iio_ring_buffer * , t#u8 * , t#s64 ) 
iio_read_last_from_sw_rb int iio_read_last_from_sw_rb ( s#iio_ring_buffer * , t#u8 * ) 
iio_request_update_sw_rb int iio_request_update_sw_rb ( s#iio_ring_buffer * ) 
iio_get_bpd_sw_rb int iio_get_bpd_sw_rb ( s#iio_ring_buffer * ) 
iio_set_bpd_sw_rb int iio_set_bpd_sw_rb ( s#iio_ring_buffer * , t#size_t ) 
iio_get_length_sw_rb int iio_get_length_sw_rb ( s#iio_ring_buffer * ) 
iio_set_length_sw_rb int iio_set_length_sw_rb ( s#iio_ring_buffer * , int ) 
iio_mark_update_needed_sw_rb int iio_mark_update_needed_sw_rb ( s#iio_ring_buffer * ) 
iio_sw_rb_allocate s#iio_ring_buffer * iio_sw_rb_allocate ( s#iio_dev * ) 
iio_sw_rb_free void iio_sw_rb_free ( s#iio_ring_buffer * ) 

/* drivers/staging/line6/control.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
pod_create_files extern int pod_create_files ( int , int , s#device * ) 
pod_remove_files extern void pod_remove_files ( int , int , s#device * ) 
variax_create_files extern int variax_create_files ( int , int , s#device * ) 
variax_remove_files extern void variax_remove_files ( int , int , s#device * ) 

/* drivers/staging/rar/rar_driver.o */
s#RAR_address_struct struct RAR_address_struct { t#u32 low ; t#u32 high ; } 
get_rar_address int get_rar_address ( int , s#RAR_address_struct * ) 

/* drivers/staging/usbip/usbip_common.o */
usbip_debug_flag extern unsigned long usbip_debug_flag 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
dev_attr_usbip_debug extern s#device_attribute dev_attr_usbip_debug 
s##usb_tt
s##mon_bus
s##ep_device
s##wusb_dev
usbip_dump_urb void usbip_dump_urb ( s#urb * ) 
s#usbip_header_basic struct usbip_header_basic { t#__u32 command ; t#__u32 seqnum ; t#__u32 devid ; t#__u32 direction ; t#__u32 ep ; } 
s#usbip_header_cmd_submit struct usbip_header_cmd_submit { t#__u32 transfer_flags ; t#__s32 transfer_buffer_length ; t#__s32 start_frame ; t#__s32 number_of_packets ; t#__s32 interval ; unsigned char setup [ 8 ] ; } 
s#usbip_header_ret_submit struct usbip_header_ret_submit { t#__s32 status ; t#__s32 actual_length ; t#__s32 start_frame ; t#__s32 number_of_packets ; t#__s32 error_count ; } 
s#usbip_header_cmd_unlink struct usbip_header_cmd_unlink { t#__u32 seqnum ; } 
s#usbip_header_ret_unlink struct usbip_header_ret_unlink { t#__s32 status ; } 
s#usbip_header struct usbip_header { s#usbip_header_basic base ; union { s#usbip_header_cmd_submit cmd_submit ; s#usbip_header_ret_submit ret_submit ; s#usbip_header_cmd_unlink cmd_unlink ; s#usbip_header_ret_unlink ret_unlink ; } u ; } 
usbip_dump_header void usbip_dump_header ( s#usbip_header * ) 
e#usbip_side enum usbip_side { USBIP_VHCI , USBIP_STUB , } 
e#usbip_status enum usbip_status { SDEV_ST_AVAILABLE = 0x01 , SDEV_ST_USED , SDEV_ST_ERROR , VDEV_ST_NULL , VDEV_ST_NOTASSIGNED , VDEV_ST_USED , VDEV_ST_ERROR } 
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##sec_path
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s#usbip_task struct usbip_task { s#task_struct * thread ; s#completion thread_done ; char * name ; void ( * loop_ops ) ( s#usbip_task * ) ; } 
s#eh_ops struct eh_ops { void ( * shutdown ) ( s#usbip_device * ) ; void ( * reset ) ( s#usbip_device * ) ; void ( * unusable ) ( s#usbip_device * ) ; } 
s#usbip_device struct usbip_device { e#usbip_side side ; e#usbip_status status ; t#spinlock_t lock ; s#socket * tcp_socket ; s#usbip_task tcp_rx ; s#usbip_task tcp_tx ; unsigned long event ; s#usbip_task eh ; t#wait_queue_head_t eh_waitq ; s#eh_ops eh_ops ; } 
usbip_start_threads int usbip_start_threads ( s#usbip_device * ) 
usbip_stop_threads void usbip_stop_threads ( s#usbip_device * ) 
usbip_task_init void usbip_task_init ( s#usbip_task * , char * , void ( * ) ( s#usbip_task * ) ) 
usbip_xmit int usbip_xmit ( int , s#socket * , char * , int , int ) 
sockfd_to_socket s#socket * sockfd_to_socket ( unsigned int ) 
usbip_pack_pdu void usbip_pack_pdu ( s#usbip_header * , s#urb * , int , int ) 
usbip_header_correct_endian void usbip_header_correct_endian ( s#usbip_header * , int ) 
usbip_alloc_iso_desc_pdu void * usbip_alloc_iso_desc_pdu ( s#urb * , t#ssize_t * ) 
usbip_recv_iso int usbip_recv_iso ( s#usbip_device * , s#urb * ) 
usbip_recv_xbuff int usbip_recv_xbuff ( s#usbip_device * , s#urb * ) 

/* drivers/staging/usbip/usbip_event.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
usbip_start_eh int usbip_start_eh ( s#usbip_device * ) 
usbip_stop_eh void usbip_stop_eh ( s#usbip_device * ) 
usbip_event_add void usbip_event_add ( s#usbip_device * , unsigned long ) 
usbip_event_happened int usbip_event_happened ( s#usbip_device * ) 

/* drivers/staging/vme/vme.o */
e#vme_resource_type enum vme_resource_type { VME_MASTER , VME_SLAVE , VME_DMA , VME_LM } 
s#vme_resource struct vme_resource { e#vme_resource_type type ; s#list_head * entry ; } 
vme_alloc_consistent void * vme_alloc_consistent ( s#vme_resource * , t#size_t , t#dma_addr_t * ) 
vme_free_consistent void vme_free_consistent ( s#vme_resource * , t#size_t , void * , t#dma_addr_t ) 
vme_get_size t#size_t vme_get_size ( s#vme_resource * ) 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##nameidata
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
t#vme_address_t typedef t#u32 vme_address_t 
t#vme_cycle_t typedef t#u32 vme_cycle_t 
vme_slave_request s#vme_resource * vme_slave_request ( s#device * , t#vme_address_t , t#vme_cycle_t ) 
vme_slave_set int vme_slave_set ( s#vme_resource * , int , unsigned long long , unsigned long long , t#dma_addr_t , t#vme_address_t , t#vme_cycle_t ) 
vme_slave_get int vme_slave_get ( s#vme_resource * , int * , unsigned long long * , unsigned long long * , t#dma_addr_t * , t#vme_address_t * , t#vme_cycle_t * ) 
vme_slave_free void vme_slave_free ( s#vme_resource * ) 
t#vme_width_t typedef t#u32 vme_width_t 
vme_master_request s#vme_resource * vme_master_request ( s#device * , t#vme_address_t , t#vme_cycle_t , t#vme_width_t ) 
vme_master_set int vme_master_set ( s#vme_resource * , int , unsigned long long , unsigned long long , t#vme_address_t , t#vme_cycle_t , t#vme_width_t ) 
vme_master_get int vme_master_get ( s#vme_resource * , int * , unsigned long long * , unsigned long long * , t#vme_address_t * , t#vme_cycle_t * , t#vme_width_t * ) 
vme_master_read t#ssize_t vme_master_read ( s#vme_resource * , void * , t#size_t , t#loff_t ) 
vme_master_write t#ssize_t vme_master_write ( s#vme_resource * , void * , t#size_t , t#loff_t ) 
vme_master_rmw unsigned int vme_master_rmw ( s#vme_resource * , unsigned int , unsigned int , unsigned int , t#loff_t ) 
vme_master_free void vme_master_free ( s#vme_resource * ) 
vme_request_dma s#vme_resource * vme_request_dma ( s#device * ) 
s#vme_callback struct vme_callback { void ( * func ) ( int , int , void * ) ; void * priv_data ; } 
s#vme_irq struct vme_irq { int count ; s#vme_callback callback [ 255 ] ; } 
s#vme_slave_resource struct vme_slave_resource { s#list_head list ; s#vme_bridge * parent ; s#mutex mtx ; int locked ; int number ; t#vme_address_t address_attr ; t#vme_cycle_t cycle_attr ; } 
s#vme_master_resource struct vme_master_resource { s#list_head list ; s#vme_bridge * parent ; t#spinlock_t lock ; int locked ; int number ; t#vme_address_t address_attr ; t#vme_cycle_t cycle_attr ; t#vme_width_t width_attr ; s#resource pci_resource ; void * kern_base ; } 
t#vme_dma_t typedef t#u32 vme_dma_t 
s#vme_dma_attr struct vme_dma_attr { t#vme_dma_t type ; void * private ; } 
s#vme_lm_resource struct vme_lm_resource { s#list_head list ; s#vme_bridge * parent ; s#mutex mtx ; int locked ; int number ; int monitors ; } 
s#vme_bridge struct vme_bridge { char name [ 16 ] ; int num ; s#list_head master_resources ; s#list_head slave_resources ; s#list_head dma_resources ; s#list_head lm_resources ; s#list_head vme_errors ; s#device * parent ; void * base ; s#device dev [ 32 ] ; s#vme_irq irq [ 7 ] ; int ( * slave_get ) ( s#vme_slave_resource * , int * , unsigned long long * , unsigned long long * , t#dma_addr_t * , t#vme_address_t * , t#vme_cycle_t * ) ; int ( * slave_set ) ( s#vme_slave_resource * , int , unsigned long long , unsigned long long , t#dma_addr_t , t#vme_address_t , t#vme_cycle_t ) ; int ( * master_get ) ( s#vme_master_resource * , int * , unsigned long long * , unsigned long long * , t#vme_address_t * , t#vme_cycle_t * , t#vme_width_t * ) ; int ( * master_set ) ( s#vme_master_resource * , int , unsigned long long , unsigned long long , t#vme_address_t , t#vme_cycle_t , t#vme_width_t ) ; t#ssize_t ( * master_read ) ( s#vme_master_resource * , void * , t#size_t , t#loff_t ) ; t#ssize_t ( * master_write ) ( s#vme_master_resource * , void * , t#size_t , t#loff_t ) ; unsigned int ( * master_rmw ) ( s#vme_master_resource * , unsigned int , unsigned int , unsigned int , t#loff_t ) ; int ( * dma_list_add ) ( s#vme_dma_list * , s#vme_dma_attr * , s#vme_dma_attr * , t#size_t ) ; int ( * dma_list_exec ) ( s#vme_dma_list * ) ; int ( * dma_list_empty ) ( s#vme_dma_list * ) ; int ( * request_irq ) ( int , int , void ( * ) ( int , int , void * ) , void * ) ; void ( * free_irq ) ( int , int ) ; int ( * generate_irq ) ( int , int ) ; int ( * lm_set ) ( s#vme_lm_resource * , unsigned long long , t#vme_address_t , t#vme_cycle_t ) ; int ( * lm_get ) ( s#vme_lm_resource * , unsigned long long * , t#vme_address_t * , t#vme_cycle_t * ) ; int ( * lm_attach ) ( s#vme_lm_resource * , int , void ( * ) ( int ) ) ; int ( * lm_detach ) ( s#vme_lm_resource * , int ) ; int ( * slot_get ) ( void ) ; } 
s#vme_dma_resource struct vme_dma_resource { s#list_head list ; s#vme_bridge * parent ; s#mutex mtx ; int locked ; int number ; s#list_head pending ; s#list_head running ; } 
s#vme_dma_list struct vme_dma_list { s#list_head list ; s#vme_dma_resource * parent ; s#list_head entries ; s#mutex mtx ; } 
vme_new_dma_list s#vme_dma_list * vme_new_dma_list ( s#vme_resource * ) 
t#vme_pattern_t typedef t#u32 vme_pattern_t 
vme_dma_pattern_attribute s#vme_dma_attr * vme_dma_pattern_attribute ( t#u32 , t#vme_pattern_t ) 
vme_dma_pci_attribute s#vme_dma_attr * vme_dma_pci_attribute ( t#dma_addr_t ) 
vme_dma_vme_attribute s#vme_dma_attr * vme_dma_vme_attribute ( unsigned long long , t#vme_address_t , t#vme_cycle_t , t#vme_width_t ) 
vme_dma_free_attribute void vme_dma_free_attribute ( s#vme_dma_attr * ) 
vme_dma_list_add int vme_dma_list_add ( s#vme_dma_list * , s#vme_dma_attr * , s#vme_dma_attr * , t#size_t ) 
vme_dma_list_exec int vme_dma_list_exec ( s#vme_dma_list * ) 
vme_dma_list_free int vme_dma_list_free ( s#vme_dma_list * ) 
vme_dma_free int vme_dma_free ( s#vme_resource * ) 
vme_request_irq int vme_request_irq ( s#device * , int , int , void ( * ) ( int , int , void * ) , void * ) 
vme_free_irq void vme_free_irq ( s#device * , int , int ) 
vme_generate_irq int vme_generate_irq ( s#device * , int , int ) 
vme_lm_request s#vme_resource * vme_lm_request ( s#device * ) 
vme_lm_count int vme_lm_count ( s#vme_resource * ) 
vme_lm_set int vme_lm_set ( s#vme_resource * , unsigned long long , t#vme_address_t , t#vme_cycle_t ) 
vme_lm_get int vme_lm_get ( s#vme_resource * , unsigned long long * , t#vme_address_t * , t#vme_cycle_t * ) 
vme_lm_attach int vme_lm_attach ( s#vme_resource * , int , void ( * ) ( int ) ) 
vme_lm_detach int vme_lm_detach ( s#vme_resource * , int ) 
vme_lm_free void vme_lm_free ( s#vme_resource * ) 
vme_slot_get int vme_slot_get ( s#device * ) 
vme_register_bridge int vme_register_bridge ( s#vme_bridge * ) 
vme_unregister_bridge void vme_unregister_bridge ( s#vme_bridge * ) 
s#vme_device_id struct vme_device_id { int bus ; int slot ; } 
s#vme_driver struct vme_driver { s#list_head node ; char * name ; const s#vme_device_id * bind_table ; int ( * probe ) ( s#device * , int , int ) ; int ( * remove ) ( s#device * , int , int ) ; void ( * shutdown ) ( void ) ; s#device_driver driver ; } 
vme_register_driver int vme_register_driver ( s#vme_driver * ) 
vme_unregister_driver void vme_unregister_driver ( s#vme_driver * ) 
vme_bus_type extern s#bus_type vme_bus_type 

/* drivers/telephony/ixj.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#phone_device struct phone_device { s#phone_device * next ; const s#file_operations * f_op ; int ( * open ) ( s#phone_device * , s#file * ) ; int board ; int minor ; } 
t#phone_cap typedef enum { vendor = 0 , device , port , codec , dsp } phone_cap 
s#phone_capability struct phone_capability { char desc [ 80 ] ; t#phone_cap captype ; int cap ; int handle ; } 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
t#IXJ_FLAGS typedef struct { unsigned int busytone : 1 ; unsigned int dialtone : 1 ; unsigned int ringback : 1 ; unsigned int ringing : 1 ; unsigned int playing : 1 ; unsigned int recording : 1 ; unsigned int cringing : 1 ; unsigned int play_first_frame : 1 ; unsigned int pstn_present : 1 ; unsigned int pstn_ringing : 1 ; unsigned int pots_correct : 1 ; unsigned int pots_pstn : 1 ; unsigned int g729_loaded : 1 ; unsigned int ts85_loaded : 1 ; unsigned int dtmf_oob : 1 ; unsigned int pcmciascp : 1 ; unsigned int pcmciasct : 2 ; unsigned int pcmciastate : 3 ; unsigned int inwrite : 1 ; unsigned int inread : 1 ; unsigned int incheck : 1 ; unsigned int cidplay : 1 ; unsigned int cidring : 1 ; unsigned int cidsent : 1 ; unsigned int cidcw_ack : 1 ; unsigned int firstring : 1 ; unsigned int pstncheck : 1 ; unsigned int pstn_rmr : 1 ; unsigned int x : 3 ; } IXJ_FLAGS 
t#IXJ_CADENCE_TERM typedef enum { PLAY_ONCE , REPEAT_LAST_ELEMENT , REPEAT_ALL } IXJ_CADENCE_TERM 
t#IXJ_CADENCE_ELEMENT typedef struct { int index ; int tone_on_time ; int tone_off_time ; int freq0 ; int gain0 ; int freq1 ; int gain1 ; } IXJ_CADENCE_ELEMENT 
t#ixj_cadence typedef struct { int elements_used ; t#IXJ_CADENCE_TERM termination ; t#IXJ_CADENCE_ELEMENT * ce ; } ixj_cadence 
t#IXJ_CADENCE_F typedef struct { char enable ; char en_filter ; unsigned int filter ; unsigned int state ; unsigned int on1 ; unsigned long on1min ; unsigned long on1dot ; unsigned long on1max ; unsigned int off1 ; unsigned long off1min ; unsigned long off1dot ; unsigned long off1max ; unsigned int on2 ; unsigned long on2min ; unsigned long on2dot ; unsigned long on2max ; unsigned int off2 ; unsigned long off2min ; unsigned long off2dot ; unsigned long off2max ; unsigned int on3 ; unsigned long on3min ; unsigned long on3dot ; unsigned long on3max ; unsigned int off3 ; unsigned long off3min ; unsigned long off3dot ; unsigned long off3max ; } IXJ_CADENCE_F 
t#LMON typedef struct { unsigned int digit : 4 ; unsigned int cpf_valid : 1 ; unsigned int dtmf_valid : 1 ; unsigned int peak : 1 ; unsigned int z : 1 ; unsigned int f0 : 1 ; unsigned int f1 : 1 ; unsigned int f2 : 1 ; unsigned int f3 : 1 ; unsigned int frame : 4 ; } LMON 
t#BYTES typedef struct { unsigned char low ; unsigned char high ; } BYTES 
t#DTMF typedef union { t#LMON bits ; t#BYTES bytes ; } DTMF 
t#CP typedef struct { unsigned int z : 7 ; unsigned int dtmf_en : 1 ; unsigned int y : 4 ; unsigned int F3 : 1 ; unsigned int F2 : 1 ; unsigned int F1 : 1 ; unsigned int F0 : 1 ; } CP 
t#CPTF typedef union { t#CP bits ; t#BYTES bytes ; } CPTF 
t#HSRBIT typedef struct { unsigned int controlrdy : 1 ; unsigned int auxctlrdy : 1 ; unsigned int statusrdy : 1 ; unsigned int auxstatusrdy : 1 ; unsigned int rxrdy : 1 ; unsigned int txrdy : 1 ; unsigned int restart : 1 ; unsigned int irqn : 1 ; unsigned int rxdma : 1 ; unsigned int txdma : 1 ; unsigned int cohostshutdown : 1 ; unsigned int t : 5 ; } HSRBIT 
t#HSR typedef union { t#HSRBIT bits ; t#BYTES bytes ; } HSR 
t#GPIOBIT typedef struct { unsigned int x : 1 ; unsigned int gpio1 : 1 ; unsigned int gpio2 : 1 ; unsigned int gpio3 : 1 ; unsigned int gpio4 : 1 ; unsigned int gpio5 : 1 ; unsigned int gpio6 : 1 ; unsigned int gpio7 : 1 ; unsigned int xread : 1 ; unsigned int gpio1read : 1 ; unsigned int gpio2read : 1 ; unsigned int gpio3read : 1 ; unsigned int gpio4read : 1 ; unsigned int gpio5read : 1 ; unsigned int gpio6read : 1 ; unsigned int gpio7read : 1 ; } GPIOBIT 
t#GPIO typedef union { t#GPIOBIT bits ; t#BYTES bytes ; unsigned short word ; } GPIO 
t#PSCRRI typedef struct { unsigned int c0 : 1 ; unsigned int c1 : 1 ; unsigned int x : 1 ; unsigned int d0ee : 1 ; unsigned int mixerbusy : 1 ; unsigned int sci : 1 ; unsigned int dspflag : 1 ; unsigned int daaflag : 1 ; } PSCRRI 
t#PSCRRP typedef struct { unsigned int eidp : 1 ; unsigned int eisd : 1 ; unsigned int x : 4 ; unsigned int dspflag : 1 ; unsigned int det : 1 ; } PSCRRP 
t#PLD_SCRR typedef union { t#PSCRRI bits ; t#PSCRRP pcib ; char byte ; } PLD_SCRR 
t#PSCRWI typedef struct { unsigned int c0 : 1 ; unsigned int c1 : 1 ; unsigned int stereo : 1 ; unsigned int daafsyncen : 1 ; unsigned int led1 : 1 ; unsigned int led2 : 1 ; unsigned int led3 : 1 ; unsigned int led4 : 1 ; } PSCRWI 
t#PSCRWP typedef struct { unsigned int eidp : 1 ; unsigned int eisd : 1 ; unsigned int x : 6 ; } PSCRWP 
t#PLD_SCRW typedef union { t#PSCRWI bits ; t#PSCRWP pcib ; char byte ; } PLD_SCRW 
t#PSLICPCI typedef struct { unsigned int c1 : 1 ; unsigned int c2 : 1 ; unsigned int c3 : 1 ; unsigned int b2en : 1 ; unsigned int e1 : 1 ; unsigned int mic : 1 ; unsigned int spk : 1 ; unsigned int x : 1 ; } PSLICPCI 
t#PSLICWRITE typedef struct { unsigned int c1 : 1 ; unsigned int c2 : 1 ; unsigned int c3 : 1 ; unsigned int b2en : 1 ; unsigned int spken : 1 ; unsigned int rly1 : 1 ; unsigned int rly2 : 1 ; unsigned int rly3 : 1 ; } PSLICWRITE 
t#PSLICREAD typedef struct { unsigned int state : 3 ; unsigned int b2en : 1 ; unsigned int spken : 1 ; unsigned int c3 : 1 ; unsigned int potspstn : 1 ; unsigned int det : 1 ; } PSLICREAD 
t#PLD_SLICW typedef union { t#PSLICPCI pcib ; t#PSLICWRITE bits ; t#PSLICREAD slic ; char byte ; } PLD_SLICW 
t#PLD_SLICR typedef union { t#PSLICPCI pcib ; t#PSLICREAD bits ; char byte ; } PLD_SLICR 
t#PCLOCK typedef struct { unsigned int clk0 : 1 ; unsigned int clk1 : 1 ; unsigned int clk2 : 1 ; unsigned int x0 : 1 ; unsigned int slic_e1 : 1 ; unsigned int x1 : 1 ; unsigned int x2 : 1 ; unsigned int x3 : 1 ; } PCLOCK 
t#PLD_CLOCK typedef union { t#PCLOCK bits ; char byte ; } PLD_CLOCK 
t#COMMAND_REG1 typedef struct { unsigned int x0 : 4 ; unsigned int ed : 1 ; unsigned int drf : 1 ; unsigned int dspf : 1 ; unsigned int crr : 1 ; } COMMAND_REG1 
t#PCMCIA_CR1 typedef union { t#COMMAND_REG1 bits ; unsigned char byte ; } PCMCIA_CR1 
t#COMMAND_REG2 typedef struct { unsigned int x0 : 4 ; unsigned int rstc : 1 ; unsigned int pwr : 1 ; unsigned int x1 : 2 ; } COMMAND_REG2 
t#PCMCIA_CR2 typedef union { t#COMMAND_REG2 bits ; unsigned char byte ; } PCMCIA_CR2 
t#CONTROL_REG typedef struct { unsigned int addr : 5 ; unsigned int rw : 1 ; unsigned int dev : 2 ; } CONTROL_REG 
t#PCMCIA_SCCR typedef union { t#CONTROL_REG bits ; unsigned char byte ; } PCMCIA_SCCR 
t#PCMCIA_SLIC_REG typedef struct { unsigned int hsw : 1 ; unsigned int det : 1 ; unsigned int led2 : 1 ; unsigned int led1 : 1 ; unsigned int ring1 : 1 ; unsigned int ring0 : 1 ; unsigned int x : 1 ; unsigned int powerdown : 1 ; } PCMCIA_SLIC_REG 
t#PCMCIA_SLIC typedef union { t#PCMCIA_SLIC_REG bits ; unsigned char byte ; } PCMCIA_SLIC 
t#Si3CONTROL1 typedef struct { unsigned int cpd : 1 ; unsigned int mpd : 1 ; unsigned int hpd : 1 ; unsigned int lpd : 1 ; unsigned int spd : 1 ; unsigned int x : 2 ; unsigned int sr : 1 ; } Si3CONTROL1 
t#Si3C1 typedef union { t#Si3CONTROL1 bits ; unsigned char byte ; } Si3C1 
t#Si3CONTROL2 typedef struct { unsigned int al : 1 ; unsigned int dl2 : 1 ; unsigned int dl1 : 1 ; unsigned int pll : 1 ; unsigned int hpd : 1 ; unsigned int x : 3 ; } Si3CONTROL2 
t#Si3C2 typedef union { t#Si3CONTROL2 bits ; unsigned char byte ; } Si3C2 
t#Si3RXGAIN typedef struct { unsigned int iir : 1 ; unsigned int him : 1 ; unsigned int mcm : 1 ; unsigned int mcg : 2 ; unsigned int lim : 1 ; unsigned int lig : 2 ; } Si3RXGAIN 
t#Si3RXG typedef union { t#Si3RXGAIN bits ; unsigned char byte ; } Si3RXG 
t#Si3ADCVOLUME typedef struct { unsigned int hom : 1 ; unsigned int lom : 1 ; unsigned int rxg : 5 ; unsigned int x : 1 ; } Si3ADCVOLUME 
t#Si3ADC typedef union { t#Si3ADCVOLUME bits ; unsigned char byte ; } Si3ADC 
t#Si3DACVOLUME typedef struct { unsigned int srm : 1 ; unsigned int slm : 1 ; unsigned int txg : 5 ; unsigned int x : 1 ; } Si3DACVOLUME 
t#Si3DAC typedef union { t#Si3DACVOLUME bits ; unsigned char byte ; } Si3DAC 
t#Si3STATUSREPORT typedef struct { unsigned int x : 5 ; unsigned int losc : 1 ; unsigned int srsc : 1 ; unsigned int slsc : 1 ; } Si3STATUSREPORT 
t#Si3STAT typedef union { t#Si3STATUSREPORT bits ; unsigned char byte ; } Si3STAT 
t#Si3ANALOGATTN typedef struct { unsigned int sot : 2 ; unsigned int lot : 2 ; unsigned int x : 4 ; } Si3ANALOGATTN 
t#Si3AATT typedef union { t#Si3ANALOGATTN bits ; unsigned char byte ; } Si3AATT 
t#MIX typedef struct { unsigned short vol [ 10 ] ; unsigned int recsrc ; unsigned int modcnt ; unsigned short micpreamp ; } MIX 
t#PHONE_CID typedef struct { char month [ 3 ] ; char day [ 3 ] ; char hour [ 3 ] ; char min [ 3 ] ; int numlen ; char number [ 11 ] ; int namelen ; char name [ 80 ] ; } PHONE_CID 
s#phone_except struct phone_except { unsigned int dtmf_ready : 1 ; unsigned int hookstate : 1 ; unsigned int pstn_ring : 1 ; unsigned int caller_id : 1 ; unsigned int pstn_wink : 1 ; unsigned int f0 : 1 ; unsigned int f1 : 1 ; unsigned int f2 : 1 ; unsigned int f3 : 1 ; unsigned int flash : 1 ; unsigned int fc0 : 1 ; unsigned int fc1 : 1 ; unsigned int fc2 : 1 ; unsigned int fc3 : 1 ; unsigned int reserved : 18 ; } 
u#telephony_exception union telephony_exception { s#phone_except bits ; unsigned int bytes ; } 
t#IXJ_SIGDEF typedef struct { unsigned int event ; int signal ; } IXJ_SIGDEF 
t#BYTE typedef t#__u8 BYTE 
s#_CR0_BITREGS struct _CR0_BITREGS { t#BYTE CLK_EXT : 1 ; t#BYTE RIP : 1 ; t#BYTE AR : 1 ; t#BYTE AX : 1 ; t#BYTE FRR : 1 ; t#BYTE FRX : 1 ; t#BYTE IM : 1 ; t#BYTE TH : 1 ; } 
s#_CR1_REGS struct _CR1_REGS { t#BYTE RM : 1 ; t#BYTE RMR : 1 ; t#BYTE No_auto : 1 ; t#BYTE Pulse : 1 ; t#BYTE P_Tone1 : 1 ; t#BYTE P_Tone2 : 1 ; t#BYTE E_Tone1 : 1 ; t#BYTE E_Tone2 : 1 ; } 
s#_CR2_REGS struct _CR2_REGS { t#BYTE Call_II : 1 ; t#BYTE Call_I : 1 ; t#BYTE Call_en : 1 ; t#BYTE Call_pon : 1 ; t#BYTE IDR : 1 ; t#BYTE COT_R : 3 ; } 
s#_CR3_REGS struct _CR3_REGS { t#BYTE DHP_X : 1 ; t#BYTE DHP_R : 1 ; t#BYTE Cal_pctl : 1 ; t#BYTE SEL : 1 ; t#BYTE TestLoops : 4 ; } 
s#_CR4_REGS struct _CR4_REGS { t#BYTE Fsc_en : 1 ; t#BYTE Int_en : 1 ; t#BYTE AGX : 2 ; t#BYTE AGR_R : 2 ; t#BYTE AGR_Z : 2 ; } 
s#_CR5_REGS struct _CR5_REGS { t#BYTE V_0 : 1 ; t#BYTE V_1 : 1 ; t#BYTE V_2 : 1 ; t#BYTE V_3 : 1 ; t#BYTE V_4 : 1 ; t#BYTE V_5 : 1 ; t#BYTE V_6 : 1 ; t#BYTE V_7 : 1 ; } 
s#_CR6_REGS struct _CR6_REGS { t#BYTE reserved : 8 ; } 
s#_CR7_REGS struct _CR7_REGS { t#BYTE reserved : 8 ; } 
s#_SOP struct _SOP { union { t#BYTE reg ; s#_CR0_BITREGS bitreg ; } cr0 ; union { t#BYTE reg ; s#_CR1_REGS bitreg ; } cr1 ; union { t#BYTE reg ; s#_CR2_REGS bitreg ; } cr2 ; union { t#BYTE reg ; s#_CR3_REGS bitreg ; } cr3 ; union { t#BYTE reg ; s#_CR4_REGS bitreg ; } cr4 ; union { t#BYTE reg ; s#_CR5_REGS bitreg ; } cr5 ; union { t#BYTE reg ; s#_CR6_REGS bitreg ; } cr6 ; union { t#BYTE reg ; s#_CR7_REGS bitreg ; } cr7 ; } 
u#_SOP_REGS union _SOP_REGS { s#_SOP SOP ; t#BYTE ByteRegs [ sizeof ( struct _SOP ) ] ; } 
s#_XR0_BITREGS struct _XR0_BITREGS { t#BYTE SI_0 : 1 ; t#BYTE SI_1 : 1 ; t#BYTE VDD_OK : 1 ; t#BYTE Caller_ID : 1 ; t#BYTE RING : 1 ; t#BYTE Cadence : 1 ; t#BYTE Wake_up : 1 ; t#BYTE RMR : 1 ; } 
u#XOPXR0 union XOPXR0 { t#BYTE reg ; s#_XR0_BITREGS bitreg ; } 
s#_XR1_BITREGS struct _XR1_BITREGS { t#BYTE M_SI_0 : 1 ; t#BYTE M_SI_1 : 1 ; t#BYTE M_VDD_OK : 1 ; t#BYTE M_Caller_ID : 1 ; t#BYTE M_RING : 1 ; t#BYTE M_Cadence : 1 ; t#BYTE M_Wake_up : 1 ; t#BYTE unused : 1 ; } 
s#_XR2_BITREGS struct _XR2_BITREGS { t#BYTE CTO0 : 1 ; t#BYTE CTO1 : 1 ; t#BYTE CTO2 : 1 ; t#BYTE CTO3 : 1 ; t#BYTE CTO4 : 1 ; t#BYTE CTO5 : 1 ; t#BYTE CTO6 : 1 ; t#BYTE CTO7 : 1 ; } 
s#_XR3_BITREGS struct _XR3_BITREGS { t#BYTE DCR0 : 1 ; t#BYTE DCR1 : 1 ; t#BYTE DCI : 1 ; t#BYTE DCU0 : 1 ; t#BYTE DCU1 : 1 ; t#BYTE B_off : 1 ; t#BYTE AGB0 : 1 ; t#BYTE AGB1 : 1 ; } 
s#_XR4_BITREGS struct _XR4_BITREGS { t#BYTE C_0 : 1 ; t#BYTE C_1 : 1 ; t#BYTE C_2 : 1 ; t#BYTE C_3 : 1 ; t#BYTE C_4 : 1 ; t#BYTE C_5 : 1 ; t#BYTE C_6 : 1 ; t#BYTE C_7 : 1 ; } 
s#_XR5_BITREGS struct _XR5_BITREGS { t#BYTE T_0 : 1 ; t#BYTE T_1 : 1 ; t#BYTE T_2 : 1 ; t#BYTE T_3 : 1 ; t#BYTE T_4 : 1 ; t#BYTE T_5 : 1 ; t#BYTE T_6 : 1 ; t#BYTE T_7 : 1 ; } 
s#_XR6_BITREGS struct _XR6_BITREGS { t#BYTE CPS0 : 1 ; t#BYTE CPS1 : 1 ; t#BYTE unused1 : 2 ; t#BYTE CLK_OFF : 1 ; t#BYTE unused2 : 3 ; } 
s#_XR7_BITREGS struct _XR7_BITREGS { t#BYTE unused1 : 1 ; t#BYTE Vdd0 : 1 ; t#BYTE Vdd1 : 1 ; t#BYTE unused2 : 5 ; } 
s#_XOP struct _XOP { u#XOPXR0 xr0 ; union { t#BYTE reg ; s#_XR1_BITREGS bitreg ; } xr1 ; union { t#BYTE reg ; s#_XR2_BITREGS bitreg ; } xr2 ; union { t#BYTE reg ; s#_XR3_BITREGS bitreg ; } xr3 ; union { t#BYTE reg ; s#_XR4_BITREGS bitreg ; } xr4 ; union { t#BYTE reg ; s#_XR5_BITREGS bitreg ; } xr5 ; union { t#BYTE reg ; s#_XR6_BITREGS bitreg ; } xr6 ; union { t#BYTE reg ; s#_XR7_BITREGS bitreg ; } xr7 ; } 
u#_XOP_REGS union _XOP_REGS { s#_XOP XOP ; t#BYTE ByteRegs [ sizeof ( struct _XOP ) ] ; } 
s#_COP struct _COP { t#BYTE THFilterCoeff_1 [ 8 ] ; t#BYTE THFilterCoeff_2 [ 8 ] ; t#BYTE THFilterCoeff_3 [ 8 ] ; t#BYTE RingerImpendance_1 [ 8 ] ; t#BYTE IMFilterCoeff_1 [ 8 ] ; t#BYTE IMFilterCoeff_2 [ 8 ] ; t#BYTE RingerImpendance_2 [ 8 ] ; t#BYTE FRRFilterCoeff [ 8 ] ; t#BYTE FRXFilterCoeff [ 8 ] ; t#BYTE ARFilterCoeff [ 4 ] ; t#BYTE AXFilterCoeff [ 4 ] ; t#BYTE Tone1Coeff [ 4 ] ; t#BYTE Tone2Coeff [ 4 ] ; t#BYTE LevelmeteringRinging [ 4 ] ; t#BYTE CallerID1stTone [ 8 ] ; t#BYTE CallerID2ndTone [ 8 ] ; } 
u#_COP_REGS union _COP_REGS { s#_COP COP ; t#BYTE ByteRegs [ sizeof ( struct _COP ) ] ; } 
s#_CAO struct _CAO { t#BYTE CallerID [ 512 ] ; } 
u#_CAO_REGS union _CAO_REGS { s#_CAO CAO ; t#BYTE ByteRegs [ sizeof ( struct _CAO ) ] ; } 
s#_XR0_BITREGSW struct _XR0_BITREGSW { t#BYTE SO_0 : 1 ; t#BYTE SO_1 : 1 ; t#BYTE SO_2 : 1 ; t#BYTE unused : 5 ; } 
s#_XR6_BITREGSW struct _XR6_BITREGSW { t#BYTE unused1 : 4 ; t#BYTE CLK_OFF : 1 ; t#BYTE unused2 : 3 ; } 
s#_DAA_REGS struct _DAA_REGS { t#BYTE bySOP ; u#_SOP_REGS SOP_REGS ; t#BYTE byXOP ; u#_XOP_REGS XOP_REGS ; t#BYTE byCOP ; u#_COP_REGS COP_REGS ; t#BYTE byCAO ; u#_CAO_REGS CAO_REGS ; union { t#BYTE reg ; s#_XR0_BITREGSW bitreg ; } XOP_xr0_W ; union { t#BYTE reg ; s#_XR6_BITREGSW bitreg ; } XOP_xr6_W ; } 
t#DAA_REGS typedef s#_DAA_REGS DAA_REGS 
e#Mode enum Mode { T63 , T53 , T48 , T40 } 
e#Dir enum Dir { V3_TO_V4 , V4_TO_V3 , V4_TO_V5 , V5_TO_V4 } 
s#Proc_Info_Tag struct Proc_Info_Tag { e#Mode convert_mode ; e#Dir convert_dir ; int Prev_Frame_Type ; int Current_Frame_Type ; } 
t#Proc_Info_Type typedef s#Proc_Info_Tag Proc_Info_Type 
t#IXJ typedef struct { s#phone_device p ; s#timer_list timer ; unsigned int board ; unsigned int DSPbase ; unsigned int XILINXbase ; unsigned int serial ; t#atomic_t DSPWrite ; s#phone_capability caplist [ 30 ] ; unsigned int caps ; s#pnp_dev * dev ; unsigned int cardtype ; unsigned int rec_codec ; unsigned int cid_rec_codec ; unsigned int cid_rec_volume ; unsigned char cid_rec_flag ; signed char rec_mode ; unsigned int play_codec ; unsigned int cid_play_codec ; unsigned int cid_play_volume ; unsigned char cid_play_flag ; signed char play_mode ; t#IXJ_FLAGS flags ; unsigned long busyflags ; unsigned int rec_frame_size ; unsigned int play_frame_size ; unsigned int cid_play_frame_size ; unsigned int cid_base_frame_size ; unsigned long cidcw_wait ; int aec_level ; int cid_play_aec_level ; int readers , writers ; t#wait_queue_head_t poll_q ; t#wait_queue_head_t read_q ; char * read_buffer , * read_buffer_end ; char * read_convert_buffer ; t#size_t read_buffer_size ; unsigned int read_buffer_ready ; t#wait_queue_head_t write_q ; char * write_buffer , * write_buffer_end ; char * write_convert_buffer ; t#size_t write_buffer_size ; unsigned int write_buffers_empty ; unsigned long drybuffer ; char * write_buffer_rp , * write_buffer_wp ; char dtmfbuffer [ 80 ] ; char dtmf_current ; int dtmf_wp , dtmf_rp , dtmf_state , dtmf_proc ; int tone_off_time , tone_on_time ; s#fasync_struct * async_queue ; unsigned long tone_start_jif ; char tone_index ; char tone_state ; char maxrings ; t#ixj_cadence * cadence_t ; t#ixj_cadence * cadence_r ; int tone_cadence_state ; t#IXJ_CADENCE_F cadence_f [ 6 ] ; t#DTMF dtmf ; t#CPTF cptf ; t#BYTES dsp ; t#BYTES ver ; t#BYTES scr ; t#BYTES ssr ; t#BYTES baseframe ; t#HSR hsr ; t#GPIO gpio ; t#PLD_SCRR pld_scrr ; t#PLD_SCRW pld_scrw ; t#PLD_SLICW pld_slicw ; t#PLD_SLICR pld_slicr ; t#PLD_CLOCK pld_clock ; t#PCMCIA_CR1 pccr1 ; t#PCMCIA_CR2 pccr2 ; t#PCMCIA_SCCR psccr ; t#PCMCIA_SLIC pslic ; char pscdd ; t#Si3C1 sic1 ; t#Si3C2 sic2 ; t#Si3RXG sirxg ; t#Si3ADC siadc ; t#Si3DAC sidac ; t#Si3STAT sistat ; t#Si3AATT siaatt ; t#MIX mix ; unsigned short ring_cadence ; int ring_cadence_t ; unsigned long ring_cadence_jif ; unsigned long checkwait ; int intercom ; int m_hook ; int r_hook ; int p_hook ; char pstn_envelope ; char pstn_cid_intr ; unsigned char fskz ; unsigned char fskphase ; unsigned char fskcnt ; unsigned int cidsize ; unsigned int cidcnt ; unsigned long pstn_cid_received ; t#PHONE_CID cid ; t#PHONE_CID cid_send ; unsigned long pstn_ring_int ; unsigned long pstn_ring_start ; unsigned long pstn_ring_stop ; unsigned long pstn_winkstart ; unsigned long pstn_last_rmr ; unsigned long pstn_prev_rmr ; unsigned long pots_winkstart ; unsigned int winktime ; unsigned long flash_end ; char port ; char hookstate ; u#telephony_exception ex ; u#telephony_exception ex_sig ; int ixj_signals [ 35 ] ; t#IXJ_SIGDEF sigdef ; char daa_mode ; char daa_country ; unsigned long pstn_sleeptil ; t#DAA_REGS m_DAAShadowRegs ; t#Proc_Info_Type Info_read ; t#Proc_Info_Type Info_write ; unsigned short frame_count ; unsigned int filter_hist [ 4 ] ; unsigned char filter_en [ 6 ] ; unsigned short proc_load ; unsigned long framesread ; unsigned long frameswritten ; unsigned long read_wait ; unsigned long write_wait ; unsigned long timerchecks ; unsigned long txreadycheck ; unsigned long rxreadycheck ; unsigned long statuswait ; unsigned long statuswaitfail ; unsigned long pcontrolwait ; unsigned long pcontrolwaitfail ; unsigned long iscontrolready ; unsigned long iscontrolreadyfail ; unsigned long pstnstatecheck ; short fskdata [ 8000 ] ; int fsksize ; int fskdcnt ; } IXJ 
ixj_pcmcia_probe extern t#IXJ * ixj_pcmcia_probe ( unsigned long , unsigned long ) 

/* drivers/telephony/phonedev.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##kstatfs
s##seq_file
s##radix_tree_node
s##writeback_control
s##kiocb
s##iovec
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##cred
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
phone_register_device extern int phone_register_device ( s#phone_device * , int ) 
phone_unregister_device extern void phone_unregister_device ( s#phone_device * ) 

/* drivers/thermal/thermal_sys.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
e#thermal_device_mode enum thermal_device_mode { THERMAL_DEVICE_DISABLED = 0 , THERMAL_DEVICE_ENABLED , } 
e#thermal_trip_type enum thermal_trip_type { THERMAL_TRIP_ACTIVE = 0 , THERMAL_TRIP_PASSIVE , THERMAL_TRIP_HOT , THERMAL_TRIP_CRITICAL , } 
s#thermal_zone_device_ops struct thermal_zone_device_ops { int ( * bind ) ( s#thermal_zone_device * , s#thermal_cooling_device * ) ; int ( * unbind ) ( s#thermal_zone_device * , s#thermal_cooling_device * ) ; int ( * get_temp ) ( s#thermal_zone_device * , unsigned long * ) ; int ( * get_mode ) ( s#thermal_zone_device * , e#thermal_device_mode * ) ; int ( * set_mode ) ( s#thermal_zone_device * , e#thermal_device_mode ) ; int ( * get_trip_type ) ( s#thermal_zone_device * , int , e#thermal_trip_type * ) ; int ( * get_trip_temp ) ( s#thermal_zone_device * , int , unsigned long * ) ; int ( * get_crit_temp ) ( s#thermal_zone_device * , unsigned long * ) ; int ( * notify ) ( s#thermal_zone_device * , int , e#thermal_trip_type ) ; } 
s##map_segment
s##compat_timespec
s##pollfd
s#thermal_hwmon_device struct thermal_hwmon_device { char type [ 20 ] ; s#device * device ; int count ; s#list_head tz_list ; s#list_head node ; } 
s#thermal_hwmon_attr struct thermal_hwmon_attr { s#device_attribute attr ; char name [ 16 ] ; } 
s#thermal_zone_device struct thermal_zone_device { int id ; char type [ 20 ] ; s#device device ; void * devdata ; int trips ; int tc1 ; int tc2 ; int passive_delay ; int polling_delay ; int last_temperature ; t#bool passive ; unsigned int forced_passive ; s#thermal_zone_device_ops * ops ; s#list_head cooling_devices ; s#idr idr ; s#mutex lock ; s#list_head node ; s#delayed_work poll_queue ; s#list_head hwmon_node ; s#thermal_hwmon_device * hwmon ; s#thermal_hwmon_attr temp_input ; s#thermal_hwmon_attr temp_crit ; } 
thermal_zone_bind_cooling_device int thermal_zone_bind_cooling_device ( s#thermal_zone_device * , int , s#thermal_cooling_device * ) 
thermal_zone_unbind_cooling_device int thermal_zone_unbind_cooling_device ( s#thermal_zone_device * , int , s#thermal_cooling_device * ) 
thermal_cooling_device_register s#thermal_cooling_device * thermal_cooling_device_register ( char * , void * , s#thermal_cooling_device_ops * ) 
thermal_cooling_device_unregister void thermal_cooling_device_unregister ( s#thermal_cooling_device * ) 
thermal_zone_device_update void thermal_zone_device_update ( s#thermal_zone_device * ) 
thermal_zone_device_register s#thermal_zone_device * thermal_zone_device_register ( char * , int , void * , s#thermal_zone_device_ops * , int , int , int , int ) 
thermal_zone_device_unregister void thermal_zone_device_unregister ( s#thermal_zone_device * ) 

/* drivers/uio/uio.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#uio_device struct uio_device { s#module * owner ; s#device * dev ; int minor ; t#atomic_t event ; s#fasync_struct * async_queue ; t#wait_queue_head_t wait ; int vma_count ; s#uio_info * info ; s#kobject * map_dir ; s#kobject * portio_dir ; } 
s#uio_map struct uio_map { s#kobject kobj ; s#uio_mem * mem ; } 
s#uio_mem struct uio_mem { const char * name ; unsigned long addr ; unsigned long size ; int memtype ; void * internal_addr ; s#uio_map * map ; } 
s#uio_portio struct uio_portio { s#kobject kobj ; s#uio_port * port ; } 
s#uio_port struct uio_port { const char * name ; unsigned long start ; unsigned long size ; int porttype ; s#uio_portio * portio ; } 
s#uio_info struct uio_info { s#uio_device * uio_dev ; const char * name ; const char * version ; s#uio_mem mem [ 5 ] ; s#uio_port port [ 5 ] ; long irq ; unsigned long irq_flags ; void * priv ; t#irqreturn_t ( * handler ) ( int , s#uio_info * ) ; int ( * mmap ) ( s#uio_info * , s#vm_area_struct * ) ; int ( * open ) ( s#uio_info * , s#inode * ) ; int ( * release ) ( s#uio_info * , s#inode * ) ; int ( * irqcontrol ) ( s#uio_info * , t#s32 ) ; } 
uio_event_notify extern void uio_event_notify ( s#uio_info * ) 
__uio_register_device extern int __attribute__ ( ( warn_unused_result ) ) __uio_register_device ( s#module * , s#device * , s#uio_info * ) 
uio_unregister_device extern void uio_unregister_device ( s#uio_info * ) 

/* drivers/usb/atm/usbatm.o */
s##ep_device
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##usb_tt
s##mon_bus
s##wusb_dev
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s#usbatm_channel struct usbatm_channel { int endpoint ; unsigned int stride ; unsigned int buf_size ; unsigned int packet_size ; t#spinlock_t lock ; s#list_head list ; s#tasklet_struct tasklet ; s#timer_list delay ; s#usbatm_data * usbatm ; } 
s#usbatm_vcc_data struct usbatm_vcc_data { s#list_head list ; short vpi ; int vci ; s#atm_vcc * vcc ; s#sk_buff * sarb ; } 
s#usbatm_data struct usbatm_data { s#usbatm_driver * driver ; void * driver_data ; char driver_name [ 16 ] ; unsigned int flags ; s#usb_device * usb_dev ; s#usb_interface * usb_intf ; char description [ 64 ] ; s#atm_dev * atm_dev ; s#kref refcount ; s#mutex serialize ; int disconnected ; s#task_struct * thread ; s#completion thread_started ; s#completion thread_exited ; s#list_head vcc_list ; s#usbatm_channel rx_channel ; s#usbatm_channel tx_channel ; s#sk_buff_head sndqueue ; s#sk_buff * current_skb ; s#usbatm_vcc_data * cached_vcc ; int cached_vci ; short cached_vpi ; unsigned char * cell_buf ; unsigned int buf_usage ; s#urb * urbs [ 0 ] ; } 
s#usbatm_driver struct usbatm_driver { const char * driver_name ; int ( * bind ) ( s#usbatm_data * , s#usb_interface * , const s#usb_device_id * ) ; int ( * heavy_init ) ( s#usbatm_data * , s#usb_interface * ) ; void ( * unbind ) ( s#usbatm_data * , s#usb_interface * ) ; int ( * atm_start ) ( s#usbatm_data * , s#atm_dev * ) ; void ( * atm_stop ) ( s#usbatm_data * , s#atm_dev * ) ; int bulk_in ; int isoc_in ; int bulk_out ; unsigned rx_padding ; unsigned tx_padding ; } 
usbatm_usb_probe extern int usbatm_usb_probe ( s#usb_interface * , const s#usb_device_id * , s#usbatm_driver * ) 
usbatm_usb_disconnect extern void usbatm_usb_disconnect ( s#usb_interface * ) 

/* drivers/usb/core/driver.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##bus_type_private
s##driver_private
usb_store_new_id extern t#ssize_t usb_store_new_id ( s#usb_dynids * , s#device_driver * , const char * , t#size_t ) 
s##ep_device
usb_driver_claim_interface extern int usb_driver_claim_interface ( s#usb_driver * , s#usb_interface * , void * ) 
usb_driver_release_interface extern void usb_driver_release_interface ( s#usb_driver * , s#usb_interface * ) 
usb_match_one_id extern int usb_match_one_id ( s#usb_interface * , const s#usb_device_id * ) 
usb_match_id const s#usb_device_id * usb_match_id ( s#usb_interface * , const s#usb_device_id * ) 
s#usb_tt struct usb_tt { s#usb_device * hub ; int multi ; unsigned think_time ; t#spinlock_t lock ; s#list_head clear_list ; s#work_struct clear_work ; } 
s##mon_bus
s##wusb_dev
s#usb_device_driver struct usb_device_driver { const char * name ; int ( * probe ) ( s#usb_device * ) ; void ( * disconnect ) ( s#usb_device * ) ; int ( * suspend ) ( s#usb_device * , t#pm_message_t ) ; int ( * resume ) ( s#usb_device * , t#pm_message_t ) ; s#usbdrv_wrap drvwrap ; unsigned int supports_autosuspend : 1 ; } 
usb_register_device_driver extern int usb_register_device_driver ( s#usb_device_driver * , s#module * ) 
usb_deregister_device_driver extern void usb_deregister_device_driver ( s#usb_device_driver * ) 
usb_register_driver extern int usb_register_driver ( s#usb_driver * , s#module * , const char * ) 
usb_deregister extern void usb_deregister ( s#usb_driver * ) 
usb_autopm_put_interface extern void usb_autopm_put_interface ( s#usb_interface * ) 
usb_autopm_put_interface_async extern void usb_autopm_put_interface_async ( s#usb_interface * ) 
usb_autopm_get_interface extern int usb_autopm_get_interface ( s#usb_interface * ) 
usb_autopm_get_interface_async extern int usb_autopm_get_interface_async ( s#usb_interface * ) 
usb_autopm_set_interface extern int usb_autopm_set_interface ( s#usb_interface * ) 

/* drivers/usb/core/file.o */
s##ep_device
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#usb_class_driver struct usb_class_driver { char * name ; char * ( * devnode ) ( s#device * , t#mode_t * ) ; const s#file_operations * fops ; int minor_base ; } 
usb_register_dev extern int usb_register_dev ( s#usb_interface * , s#usb_class_driver * ) 
usb_deregister_dev extern void usb_deregister_dev ( s#usb_interface * , s#usb_class_driver * ) 

/* drivers/usb/core/hcd.o */
usb_hcds_loaded extern unsigned long usb_hcds_loaded 
usb_bus_list extern s#list_head usb_bus_list 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##ipc_namespace
s##mnt_namespace
s##net
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
usb_bus_list_lock extern s#mutex usb_bus_list_lock 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##ep_device
s##wusb_dev
s##mon_bus
s#hc_driver struct hc_driver { const char * description ; const char * product_desc ; t#size_t hcd_priv_size ; t#irqreturn_t ( * irq ) ( s#usb_hcd * ) ; int flags ; int ( * reset ) ( s#usb_hcd * ) ; int ( * start ) ( s#usb_hcd * ) ; int ( * pci_suspend ) ( s#usb_hcd * ) ; int ( * pci_resume ) ( s#usb_hcd * , t#bool ) ; void ( * stop ) ( s#usb_hcd * ) ; void ( * shutdown ) ( s#usb_hcd * ) ; int ( * get_frame_number ) ( s#usb_hcd * ) ; int ( * urb_enqueue ) ( s#usb_hcd * , s#urb * , t#gfp_t ) ; int ( * urb_dequeue ) ( s#usb_hcd * , s#urb * , int ) ; void ( * endpoint_disable ) ( s#usb_hcd * , s#usb_host_endpoint * ) ; void ( * endpoint_reset ) ( s#usb_hcd * , s#usb_host_endpoint * ) ; int ( * hub_status_data ) ( s#usb_hcd * , char * ) ; int ( * hub_control ) ( s#usb_hcd * , t#u16 , t#u16 , t#u16 , char * , t#u16 ) ; int ( * bus_suspend ) ( s#usb_hcd * ) ; int ( * bus_resume ) ( s#usb_hcd * ) ; int ( * start_port_reset ) ( s#usb_hcd * , unsigned ) ; void ( * relinquish_port ) ( s#usb_hcd * , int ) ; int ( * port_handed_over ) ( s#usb_hcd * , int ) ; void ( * clear_tt_buffer_complete ) ( s#usb_hcd * , s#usb_host_endpoint * ) ; int ( * alloc_dev ) ( s#usb_hcd * , s#usb_device * ) ; void ( * free_dev ) ( s#usb_hcd * , s#usb_device * ) ; int ( * add_endpoint ) ( s#usb_hcd * , s#usb_device * , s#usb_host_endpoint * ) ; int ( * drop_endpoint ) ( s#usb_hcd * , s#usb_device * , s#usb_host_endpoint * ) ; int ( * check_bandwidth ) ( s#usb_hcd * , s#usb_device * ) ; void ( * reset_bandwidth ) ( s#usb_hcd * , s#usb_device * ) ; int ( * address_device ) ( s#usb_hcd * , s#usb_device * ) ; int ( * update_hub_device ) ( s#usb_hcd * , s#usb_device * , s#usb_tt * , t#gfp_t ) ; int ( * kdb_poll_char ) ( s#urb * ) ; void ( * kdb_completion ) ( s#urb * ) ; t#kdb_hc_keyboard_attach_t kdb_hc_keyboard_attach ; t#kdb_hc_keyboard_detach_t kdb_hc_keyboard_detach ; } 
s##dma_pool
s#usb_hcd struct usb_hcd { s#usb_bus self ; s#kref kref ; const char * product_desc ; char irq_descr [ 24 ] ; s#timer_list rh_timer ; s#urb * status_urb ; s#work_struct wakeup_work ; const s#hc_driver * driver ; unsigned long flags ; unsigned rh_registered : 1 ; unsigned uses_new_polling : 1 ; unsigned poll_rh : 1 ; unsigned poll_pending : 1 ; unsigned wireless : 1 ; unsigned authorized_default : 1 ; unsigned has_tt : 1 ; int irq ; void * regs ; t#u64 rsrc_start ; t#u64 rsrc_len ; unsigned power_budget ; s#dma_pool * pool [ 4 ] ; int state ; unsigned long hcd_priv [ 0 ] __attribute__ ( ( aligned ( sizeof ( unsigned long ) ) ) ) ; } 
usb_hcd_poll_rh_status extern void usb_hcd_poll_rh_status ( s#usb_hcd * ) 
usb_calc_bus_time extern long usb_calc_bus_time ( int , int , int , int ) 
usb_hcd_link_urb_to_ep extern int usb_hcd_link_urb_to_ep ( s#usb_hcd * , s#urb * ) 
usb_hcd_check_unlink_urb extern int usb_hcd_check_unlink_urb ( s#usb_hcd * , s#urb * , int ) 
usb_hcd_unlink_urb_from_ep extern void usb_hcd_unlink_urb_from_ep ( s#usb_hcd * , s#urb * ) 
usb_hcd_giveback_urb extern void usb_hcd_giveback_urb ( s#usb_hcd * , s#urb * , int ) 
usb_hcd_resume_root_hub extern void usb_hcd_resume_root_hub ( s#usb_hcd * ) 
usb_hc_died extern void usb_hc_died ( s#usb_hcd * ) 
usb_create_hcd extern s#usb_hcd * usb_create_hcd ( const s#hc_driver * , s#device * , const char * ) 
usb_get_hcd extern s#usb_hcd * usb_get_hcd ( s#usb_hcd * ) 
usb_put_hcd extern void usb_put_hcd ( s#usb_hcd * ) 
usb_add_hcd extern int usb_add_hcd ( s#usb_hcd * , unsigned int , unsigned long ) 
usb_remove_hcd extern void usb_remove_hcd ( s#usb_hcd * ) 
usb_hcd_platform_shutdown extern void usb_hcd_platform_shutdown ( s#platform_device * ) 
usb_hcd_get_kdb_poll_func void * usb_hcd_get_kdb_poll_func ( s#usb_device * ) 
usb_hcd_get_kdb_completion_func void * usb_hcd_get_kdb_completion_func ( s#usb_device * ) 
usb_hcd_check_uhci int usb_hcd_check_uhci ( s#usb_device * ) 
usb_hcd_get_hc_keyboard_attach t#kdb_hc_keyboard_attach_t usb_hcd_get_hc_keyboard_attach ( s#usb_device * ) 
usb_hcd_get_hc_keyboard_detach t#kdb_hc_keyboard_detach_t usb_hcd_get_hc_keyboard_detach ( s#usb_device * ) 
s#usb_mon_operations struct usb_mon_operations { void ( * urb_submit ) ( s#usb_bus * , s#urb * ) ; void ( * urb_submit_error ) ( s#usb_bus * , s#urb * , int ) ; void ( * urb_complete ) ( s#usb_bus * , s#urb * , int ) ; } 
usb_mon_register int usb_mon_register ( s#usb_mon_operations * ) 
usb_mon_deregister void usb_mon_deregister ( void ) 

/* drivers/usb/core/hcd-pci.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
usb_hcd_pci_probe extern int usb_hcd_pci_probe ( s#pci_dev * , const s#pci_device_id * ) 
usb_hcd_pci_remove extern void usb_hcd_pci_remove ( s#pci_dev * ) 
usb_hcd_pci_shutdown extern void usb_hcd_pci_shutdown ( s#pci_dev * ) 
usb_hcd_pci_pm_ops extern s#dev_pm_ops usb_hcd_pci_pm_ops 

/* drivers/usb/core/hub.o */
ehci_cf_port_reset_rwsem extern s#rw_semaphore ehci_cf_port_reset_rwsem 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##mon_bus
s##ep_device
s##wusb_dev
s##scatterlist
usb_hub_clear_tt_buffer extern int usb_hub_clear_tt_buffer ( s#urb * ) 
usb_set_device_state extern void usb_set_device_state ( s#usb_device * , e#usb_device_state ) 
usb_root_hub_lost_power extern void usb_root_hub_lost_power ( s#usb_device * ) 
usb_ep0_reinit extern void usb_ep0_reinit ( s#usb_device * ) 
usb_reset_device extern int usb_reset_device ( s#usb_device * ) 
usb_queue_reset_device extern void usb_queue_reset_device ( s#usb_interface * ) 

/* drivers/usb/core/message.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##mon_bus
s##ep_device
s##wusb_dev
usb_control_msg extern int usb_control_msg ( s#usb_device * , unsigned int , t#__u8 , t#__u8 , t#__u16 , t#__u16 , void * , t#__u16 , int ) 
usb_interrupt_msg extern int usb_interrupt_msg ( s#usb_device * , unsigned int , void * , int , int * , int ) 
usb_bulk_msg extern int usb_bulk_msg ( s#usb_device * , unsigned int , void * , int , int * , int ) 
usb_sg_init int usb_sg_init ( s#usb_sg_request * , s#usb_device * , unsigned , unsigned , s#scatterlist * , int , t#size_t , t#gfp_t ) 
usb_sg_wait void usb_sg_wait ( s#usb_sg_request * ) 
usb_sg_cancel void usb_sg_cancel ( s#usb_sg_request * ) 
usb_get_descriptor extern int usb_get_descriptor ( s#usb_device * , unsigned char , unsigned char , void * , int ) 
usb_string extern int usb_string ( s#usb_device * , int , char * , t#size_t ) 
usb_get_status extern int usb_get_status ( s#usb_device * , int , int , void * ) 
usb_clear_halt extern int usb_clear_halt ( s#usb_device * , int ) 
usb_reset_endpoint extern void usb_reset_endpoint ( s#usb_device * , unsigned int ) 
usb_set_interface extern int usb_set_interface ( s#usb_device * , int , int ) 
usb_reset_configuration extern int usb_reset_configuration ( s#usb_device * ) 
usb_driver_set_configuration extern int usb_driver_set_configuration ( s#usb_device * , int ) 

/* drivers/usb/core/notify.o */
usb_register_notify extern void usb_register_notify ( s#notifier_block * ) 
usb_unregister_notify extern void usb_unregister_notify ( s#notifier_block * ) 

/* drivers/usb/core/urb.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##mon_bus
s##ep_device
s##wusb_dev
s##scatterlist
usb_init_urb extern void usb_init_urb ( s#urb * ) 
usb_alloc_urb extern s#urb * usb_alloc_urb ( int , t#gfp_t ) 
usb_free_urb extern void usb_free_urb ( s#urb * ) 
usb_get_urb extern s#urb * usb_get_urb ( s#urb * ) 
usb_anchor_urb extern void usb_anchor_urb ( s#urb * , s#usb_anchor * ) 
usb_unanchor_urb extern void usb_unanchor_urb ( s#urb * ) 
usb_submit_urb extern int usb_submit_urb ( s#urb * , t#gfp_t ) 
usb_unlink_urb extern int usb_unlink_urb ( s#urb * ) 
usb_kill_urb extern void usb_kill_urb ( s#urb * ) 
usb_poison_urb extern void usb_poison_urb ( s#urb * ) 
usb_unpoison_urb extern void usb_unpoison_urb ( s#urb * ) 
usb_kill_anchored_urbs extern void usb_kill_anchored_urbs ( s#usb_anchor * ) 
usb_poison_anchored_urbs extern void usb_poison_anchored_urbs ( s#usb_anchor * ) 
usb_unpoison_anchored_urbs extern void usb_unpoison_anchored_urbs ( s#usb_anchor * ) 
usb_unlink_anchored_urbs extern void usb_unlink_anchored_urbs ( s#usb_anchor * ) 
usb_wait_anchor_empty_timeout extern int usb_wait_anchor_empty_timeout ( s#usb_anchor * , unsigned int ) 
usb_get_from_anchor extern s#urb * usb_get_from_anchor ( s#usb_anchor * ) 
usb_scuttle_anchored_urbs extern void usb_scuttle_anchored_urbs ( s#usb_anchor * ) 
usb_anchor_empty extern int usb_anchor_empty ( s#usb_anchor * ) 

/* drivers/usb/core/usb.o */
s##ep_device
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##mon_bus
s##wusb_dev
usb_ifnum_to_if extern s#usb_interface * usb_ifnum_to_if ( const s#usb_device * , unsigned ) 
usb_altnum_to_altsetting extern s#usb_host_interface * usb_altnum_to_altsetting ( const s#usb_interface * , unsigned int ) 
usb_find_interface extern s#usb_interface * usb_find_interface ( s#usb_driver * , int ) 
usb_get_dev extern s#usb_device * usb_get_dev ( s#usb_device * ) 
usb_put_dev extern void usb_put_dev ( s#usb_device * ) 
usb_get_intf s#usb_interface * usb_get_intf ( s#usb_interface * ) 
usb_put_intf void usb_put_intf ( s#usb_interface * ) 
usb_lock_device_for_reset extern int usb_lock_device_for_reset ( s#usb_device * , const s#usb_interface * ) 
usb_get_current_frame_number extern int usb_get_current_frame_number ( s#usb_device * ) 
__usb_get_extra_descriptor int __usb_get_extra_descriptor ( char * , unsigned , unsigned char , void * * ) 
usb_buffer_alloc void * usb_buffer_alloc ( s#usb_device * , t#size_t , t#gfp_t , t#dma_addr_t * ) 
usb_buffer_free void usb_buffer_free ( s#usb_device * , t#size_t , void * , t#dma_addr_t ) 
usb_buffer_map_sg int usb_buffer_map_sg ( const s#usb_device * , int , s#scatterlist * , int ) 
usb_buffer_unmap_sg void usb_buffer_unmap_sg ( const s#usb_device * , int , s#scatterlist * , int ) 
usb_disabled extern int usb_disabled ( void ) 
usb_debug_root extern s#dentry * usb_debug_root 

/* drivers/usb/early/ehci-dbgp.o */
dbgp_external_startup extern int dbgp_external_startup ( void ) 
dbgp_reset_prep extern int dbgp_reset_prep ( void ) 

/* drivers/usb/host/pci-quirks.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
uhci_reset_hc void uhci_reset_hc ( s#pci_dev * , unsigned long ) 
uhci_check_and_reset_hc int uhci_check_and_reset_hc ( s#pci_dev * , unsigned long ) 

/* drivers/usb/host/sl811-hcd.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
sl811h_driver s#platform_driver sl811h_driver 

/* drivers/usb/misc/ftdi-elan.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
ftdi_elan_gone_away void ftdi_elan_gone_away ( s#platform_device * ) 
usb_ftdi_elan_write_pcimem int usb_ftdi_elan_write_pcimem ( s#platform_device * , int , t#u8 , t#u32 ) 
usb_ftdi_elan_read_pcimem int usb_ftdi_elan_read_pcimem ( s#platform_device * , int , t#u8 , t#u32 * ) 
s##mon_bus
s##ep_device
s##wusb_dev
s##scatterlist
usb_ftdi_elan_edset_setup int usb_ftdi_elan_edset_setup ( s#platform_device * , t#u8 , void * , s#urb * , t#u8 , t#u8 , t#u8 , void ( * ) ( void * , s#urb * , t#u8 * , int , int , int , int , int , int , int , int , int ) ) 
usb_ftdi_elan_edset_input int usb_ftdi_elan_edset_input ( s#platform_device * , t#u8 , void * , s#urb * , t#u8 , t#u8 , t#u8 , void ( * ) ( void * , s#urb * , t#u8 * , int , int , int , int , int , int , int , int , int ) ) 
usb_ftdi_elan_edset_empty int usb_ftdi_elan_edset_empty ( s#platform_device * , t#u8 , void * , s#urb * , t#u8 , t#u8 , t#u8 , void ( * ) ( void * , s#urb * , t#u8 * , int , int , int , int , int , int , int , int , int ) ) 
usb_ftdi_elan_edset_output int usb_ftdi_elan_edset_output ( s#platform_device * , t#u8 , void * , s#urb * , t#u8 , t#u8 , t#u8 , void ( * ) ( void * , s#urb * , t#u8 * , int , int , int , int , int , int , int , int , int ) ) 
usb_ftdi_elan_edset_single int usb_ftdi_elan_edset_single ( s#platform_device * , t#u8 , void * , s#urb * , t#u8 , t#u8 , t#u8 , void ( * ) ( void * , s#urb * , t#u8 * , int , int , int , int , int , int , int , int , int ) ) 
usb_ftdi_elan_edset_flush int usb_ftdi_elan_edset_flush ( s#platform_device * , t#u8 , void * ) 

/* drivers/usb/misc/phidget.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
phidget_class s#class * phidget_class 

/* drivers/usb/serial/ezusb.o */
s##usb_tt
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##proc_dir_entry
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##mon_bus
s##ep_device
s##wusb_dev
s##scatterlist
s##kfifo
e#port_dev_state enum port_dev_state { PORT_UNREGISTERED , PORT_REGISTERING , PORT_REGISTERED , PORT_UNREGISTERING , } 
s#usb_serial_port struct usb_serial_port { s#usb_serial * serial ; s#tty_port port ; t#spinlock_t lock ; s#mutex mutex ; unsigned char number ; unsigned char * interrupt_in_buffer ; s#urb * interrupt_in_urb ; t#__u8 interrupt_in_endpointAddress ; unsigned char * interrupt_out_buffer ; int interrupt_out_size ; s#urb * interrupt_out_urb ; t#__u8 interrupt_out_endpointAddress ; unsigned char * bulk_in_buffer ; int bulk_in_size ; s#urb * read_urb ; t#__u8 bulk_in_endpointAddress ; unsigned char * bulk_out_buffer ; int bulk_out_size ; s#urb * write_urb ; s#kfifo * write_fifo ; int write_urb_busy ; t#__u8 bulk_out_endpointAddress ; int tx_bytes_flight ; int urbs_in_flight ; t#wait_queue_head_t write_wait ; s#work_struct work ; char throttled ; char throttle_req ; char console ; unsigned long sysrq ; s#device dev ; e#port_dev_state dev_state ; } 
s#usb_serial_driver struct usb_serial_driver { const char * description ; const s#usb_device_id * id_table ; char num_ports ; s#list_head driver_list ; s#device_driver driver ; s#usb_driver * usb_driver ; s#usb_dynids dynids ; int max_in_flight_urbs ; int ( * probe ) ( s#usb_serial * , const s#usb_device_id * ) ; int ( * attach ) ( s#usb_serial * ) ; int ( * calc_num_ports ) ( s#usb_serial * ) ; void ( * disconnect ) ( s#usb_serial * ) ; void ( * release ) ( s#usb_serial * ) ; int ( * port_probe ) ( s#usb_serial_port * ) ; int ( * port_remove ) ( s#usb_serial_port * ) ; int ( * suspend ) ( s#usb_serial * , t#pm_message_t ) ; int ( * resume ) ( s#usb_serial * ) ; int ( * open ) ( s#tty_struct * , s#usb_serial_port * ) ; void ( * close ) ( s#usb_serial_port * ) ; int ( * write ) ( s#tty_struct * , s#usb_serial_port * , const unsigned char * , int ) ; int ( * write_room ) ( s#tty_struct * ) ; int ( * ioctl ) ( s#tty_struct * , s#file * , unsigned int , unsigned long ) ; void ( * set_termios ) ( s#tty_struct * , s#usb_serial_port * , s#ktermios * ) ; void ( * break_ctl ) ( s#tty_struct * , int ) ; int ( * chars_in_buffer ) ( s#tty_struct * ) ; void ( * throttle ) ( s#tty_struct * ) ; void ( * unthrottle ) ( s#tty_struct * ) ; int ( * tiocmget ) ( s#tty_struct * , s#file * ) ; int ( * tiocmset ) ( s#tty_struct * , s#file * , unsigned int , unsigned int ) ; void ( * dtr_rts ) ( s#usb_serial_port * , int ) ; int ( * carrier_raised ) ( s#usb_serial_port * ) ; void ( * init_termios ) ( s#tty_struct * ) ; void ( * read_int_callback ) ( s#urb * ) ; void ( * write_int_callback ) ( s#urb * ) ; void ( * read_bulk_callback ) ( s#urb * ) ; void ( * write_bulk_callback ) ( s#urb * ) ; } 
s#usb_serial struct usb_serial { s#usb_device * dev ; s#usb_serial_driver * type ; s#usb_interface * interface ; unsigned char disconnected : 1 ; unsigned char suspending : 1 ; unsigned char attached : 1 ; unsigned char minor ; unsigned char num_ports ; unsigned char num_port_pointers ; char num_interrupt_in ; char num_interrupt_out ; char num_bulk_in ; char num_bulk_out ; s#usb_serial_port * port [ 8 ] ; s#kref kref ; s#mutex disc_mutex ; void * private ; } 
ezusb_writememory extern int ezusb_writememory ( s#usb_serial * , int , unsigned char * , int , t#__u8 ) 
ezusb_set_reset extern int ezusb_set_reset ( s#usb_serial * , unsigned char ) 

/* drivers/usb/serial/generic.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##usb_tt
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##mon_bus
s##ep_device
s##wusb_dev
s##scatterlist
usb_serial_generic_open extern int usb_serial_generic_open ( s#tty_struct * , s#usb_serial_port * ) 
usb_serial_generic_write extern int usb_serial_generic_write ( s#tty_struct * , s#usb_serial_port * , const unsigned char * , int ) 
usb_serial_generic_resubmit_read_urb extern void usb_serial_generic_resubmit_read_urb ( s#usb_serial_port * , t#gfp_t ) 
usb_serial_generic_read_bulk_callback extern void usb_serial_generic_read_bulk_callback ( s#urb * ) 
usb_serial_generic_write_bulk_callback extern void usb_serial_generic_write_bulk_callback ( s#urb * ) 
usb_serial_handle_sysrq_char extern int usb_serial_handle_sysrq_char ( s#tty_struct * , s#usb_serial_port * , unsigned int ) 
usb_serial_handle_break extern int usb_serial_handle_break ( s#usb_serial_port * ) 
usb_serial_generic_resume extern int usb_serial_generic_resume ( s#usb_serial * ) 

/* drivers/usb/serial/usb-serial.o */
s##usb_tt
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##proc_dir_entry
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##mon_bus
s##ep_device
s##wusb_dev
s##scatterlist
usb_serial_port_softint extern void usb_serial_port_softint ( s#usb_serial_port * ) 
usb_serial_probe extern int usb_serial_probe ( s#usb_interface * , const s#usb_device_id * ) 
usb_serial_disconnect extern void usb_serial_disconnect ( s#usb_interface * ) 
usb_serial_suspend extern int usb_serial_suspend ( s#usb_interface * , t#pm_message_t ) 
usb_serial_resume extern int usb_serial_resume ( s#usb_interface * ) 
usb_serial_register extern int usb_serial_register ( s#usb_serial_driver * ) 
usb_serial_deregister extern void usb_serial_deregister ( s#usb_serial_driver * ) 

/* drivers/usb/storage/protocol.o */
s##scsi_device
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
s##blk_trace
s##usb_tt
s##mon_bus
s##ep_device
s##wusb_dev
s#us_unusual_dev struct us_unusual_dev { const char * vendorName ; const char * productName ; t#__u8 useProtocol ; t#__u8 useTransport ; int ( * initFunction ) ( s#us_data * ) ; } 
t#trans_cmnd typedef int ( * trans_cmnd ) ( s#scsi_cmnd * , s#us_data * ) 
t#trans_reset typedef int ( * trans_reset ) ( s#us_data * ) 
t#proto_cmnd typedef void ( * proto_cmnd ) ( s#scsi_cmnd * , s#us_data * ) 
s#usb_ctrlrequest struct usb_ctrlrequest { t#__u8 bRequestType ; t#__u8 bRequest ; t#__le16 wValue ; t#__le16 wIndex ; t#__le16 wLength ; } 
t#extra_data_destructor typedef void ( * extra_data_destructor ) ( void * ) 
t#pm_hook typedef void ( * pm_hook ) ( s#us_data * , int ) 
s#us_data struct us_data { s#mutex dev_mutex ; s#usb_device * pusb_dev ; s#usb_interface * pusb_intf ; s#us_unusual_dev * unusual_dev ; unsigned long fflags ; unsigned long dflags ; unsigned int send_bulk_pipe ; unsigned int recv_bulk_pipe ; unsigned int send_ctrl_pipe ; unsigned int recv_ctrl_pipe ; unsigned int recv_intr_pipe ; char * transport_name ; char * protocol_name ; t#__le32 bcs_signature ; t#u8 subclass ; t#u8 protocol ; t#u8 max_lun ; t#u8 ifnum ; t#u8 ep_bInterval ; t#trans_cmnd transport ; t#trans_reset transport_reset ; t#proto_cmnd proto_handler ; s#scsi_cmnd * srb ; unsigned int tag ; s#urb * current_urb ; s#usb_ctrlrequest * cr ; s#usb_sg_request current_sg ; unsigned char * iobuf ; t#dma_addr_t cr_dma ; t#dma_addr_t iobuf_dma ; s#task_struct * ctl_thread ; s#completion cmnd_ready ; s#completion notify ; t#wait_queue_head_t delay_wait ; s#completion scanning_done ; void * extra ; t#extra_data_destructor extra_destructor ; t#pm_hook suspend_resume_hook ; int use_last_sector_hacks ; int last_sector_retries ; } 
usb_stor_transparent_scsi_command extern void usb_stor_transparent_scsi_command ( s#scsi_cmnd * , s#us_data * ) 
e#xfer_buf_dir enum xfer_buf_dir { TO_XFER_BUF , FROM_XFER_BUF } 
usb_stor_access_xfer_buf extern unsigned int usb_stor_access_xfer_buf ( unsigned char * , unsigned int , s#scsi_cmnd * , s#scatterlist * * , unsigned int * , e#xfer_buf_dir ) 
usb_stor_set_xfer_buf extern void usb_stor_set_xfer_buf ( unsigned char * , unsigned int , s#scsi_cmnd * ) 

/* drivers/usb/storage/scsiglue.o */
usb_stor_sense_invalidCDB extern unsigned char usb_stor_sense_invalidCDB [ 18 ] 

/* drivers/usb/storage/transport.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##usb_tt
s##mon_bus
s##ep_device
s##wusb_dev
s##scsi_host_cmd_pool
s##scsi_transport_template
s##workqueue_struct
usb_stor_control_msg extern int usb_stor_control_msg ( s#us_data * , unsigned int , t#u8 , t#u8 , t#u16 , t#u16 , void * , t#u16 , int ) 
usb_stor_clear_halt extern int usb_stor_clear_halt ( s#us_data * , unsigned int ) 
usb_stor_ctrl_transfer extern int usb_stor_ctrl_transfer ( s#us_data * , unsigned int , t#u8 , t#u8 , t#u16 , t#u16 , void * , t#u16 ) 
usb_stor_bulk_transfer_buf extern int usb_stor_bulk_transfer_buf ( s#us_data * , unsigned int , void * , unsigned int , unsigned int * ) 
usb_stor_bulk_srb extern int usb_stor_bulk_srb ( s#us_data * , unsigned int , s#scsi_cmnd * ) 
usb_stor_bulk_transfer_sg extern int usb_stor_bulk_transfer_sg ( s#us_data * , unsigned int , void * , unsigned int , int , int * ) 
usb_stor_CB_transport extern int usb_stor_CB_transport ( s#scsi_cmnd * , s#us_data * ) 
usb_stor_Bulk_transport extern int usb_stor_Bulk_transport ( s#scsi_cmnd * , s#us_data * ) 
usb_stor_CB_reset extern int usb_stor_CB_reset ( s#us_data * ) 
usb_stor_Bulk_reset extern int usb_stor_Bulk_reset ( s#us_data * ) 

/* drivers/usb/storage/usb.o */
s##ep_device
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##ipc_namespace
s##mnt_namespace
s##net
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
usb_stor_suspend extern int usb_stor_suspend ( s#usb_interface * , t#pm_message_t ) 
usb_stor_resume extern int usb_stor_resume ( s#usb_interface * ) 
usb_stor_reset_resume extern int usb_stor_reset_resume ( s#usb_interface * ) 
usb_stor_pre_reset extern int usb_stor_pre_reset ( s#usb_interface * ) 
usb_stor_post_reset extern int usb_stor_post_reset ( s#usb_interface * ) 
s##usb_tt
s##mon_bus
s##wusb_dev
s##scsi_host_cmd_pool
s##scsi_transport_template
s##workqueue_struct
s##scsi_sense_hdr
fill_inquiry_response extern void fill_inquiry_response ( s#us_data * , unsigned char * , unsigned int ) 
usb_stor_probe1 extern int usb_stor_probe1 ( s#us_data * * , s#usb_interface * , const s#usb_device_id * , s#us_unusual_dev * ) 
usb_stor_probe2 extern int usb_stor_probe2 ( s#us_data * ) 
usb_stor_disconnect extern void usb_stor_disconnect ( s#usb_interface * ) 

/* drivers/usb/storage/usual-tables.o */
usb_storage_usb_ids extern s#usb_device_id usb_storage_usb_ids [ ] 
s##ep_device
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
usb_usual_ignore_device extern int usb_usual_ignore_device ( s#usb_interface * ) 

/* drivers/usb/wusbcore/devconnect.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##ep_device
s#usb_encryption_descriptor struct usb_encryption_descriptor { t#__u8 bLength ; t#__u8 bDescriptorType ; t#__u8 bEncryptionType ; t#__u8 bEncryptionValue ; t#__u8 bAuthKeyIndex ; } 
s#wusb_ckhdid struct wusb_ckhdid { t#u8 data [ 16 ] ; } 
s#usb_bos_descriptor struct usb_bos_descriptor { t#__u8 bLength ; t#__u8 bDescriptorType ; t#__le16 wTotalLength ; t#__u8 bNumDeviceCaps ; } 
s#usb_wireless_cap_descriptor struct usb_wireless_cap_descriptor { t#__u8 bLength ; t#__u8 bDescriptorType ; t#__u8 bDevCapabilityType ; t#__u8 bmAttributes ; t#__le16 wPHYRates ; t#__u8 bmTFITXPowerInfo ; t#__u8 bmFFITXPowerInfo ; t#__le16 bmBandGroup ; t#__u8 bReserved ; } 
s#uwb_mas_bm struct uwb_mas_bm { unsigned long bm [ ( ( ( UWB_NUM_MAS ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long unsafe_bm [ ( ( ( UWB_NUM_MAS ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; int safe ; int unsafe ; } 
s##scatterlist
s#wusb_dev struct wusb_dev { s#kref refcnt ; s#wusbhc * wusbhc ; s#list_head cack_node ; t#u8 port_idx ; t#u8 addr ; t#u8 beacon_type : 4 ; s#usb_encryption_descriptor ccm1_etd ; s#wusb_ckhdid cdid ; unsigned long entry_ts ; s#usb_bos_descriptor * bos ; s#usb_wireless_cap_descriptor * wusb_cap_descr ; s#uwb_mas_bm availability ; s#work_struct devconnect_acked_work ; s#urb * set_gtk_urb ; s#usb_ctrlrequest * set_gtk_req ; s#usb_device * usb_dev ; } 
s##mon_bus
s##dma_pool
s##uwb_beca_e
s#uwb_mac_addr struct uwb_mac_addr { t#u8 data [ 6 ] ; } 
s#uwb_dev_addr struct uwb_dev_addr { t#u8 data [ 2 ] ; } 
s#uwb_dev struct uwb_dev { s#mutex mutex ; s#list_head list_node ; s#device dev ; s#uwb_rc * rc ; s#uwb_beca_e * bce ; s#uwb_mac_addr mac_addr ; s#uwb_dev_addr dev_addr ; int beacon_slot ; unsigned long streams [ ( ( ( UWB_NUM_STREAMS ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long last_availability_bm [ ( ( ( UWB_NUM_MAS ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } 
s#uwb_rccb struct uwb_rccb { t#u8 bCommandType ; t#__le16 wCommand ; t#u8 bCommandContext ; } 
s#uwb_rceb struct uwb_rceb { t#u8 bEventType ; t#__le16 wEvent ; t#u8 bEventContext ; } 
e#uwb_scan_type enum uwb_scan_type { UWB_SCAN_ONLY = 0 , UWB_SCAN_OUTSIDE_BP , UWB_SCAN_WHILE_INACTIVE , UWB_SCAN_DISABLED , UWB_SCAN_ONLY_STARTTIME , UWB_SCAN_TOP } 
s#uwb_notifs_chain struct uwb_notifs_chain { s#list_head list ; s#mutex mutex ; } 
s#uwb_beca struct uwb_beca { s#list_head list ; t#size_t entries ; s#mutex mutex ; } 
s#uwbd struct uwbd { int pid ; s#task_struct * task ; t#wait_queue_head_t wq ; s#list_head event_list ; t#spinlock_t event_list_lock ; } 
s#uwb_drp_backoff_win struct uwb_drp_backoff_win { t#u8 window ; t#u8 n ; int total_expired ; s#timer_list timer ; t#bool can_reserve_extra_mases ; } 
s#uwb_ie_hdr struct uwb_ie_hdr { t#u8 element_id ; t#u8 length ; } 
s#uwb_ie_drp_avail struct uwb_ie_drp_avail { s#uwb_ie_hdr hdr ; unsigned long bmp [ ( ( ( UWB_NUM_MAS ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } 
s#uwb_drp_avail struct uwb_drp_avail { unsigned long global [ ( ( ( UWB_NUM_MAS ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long local [ ( ( ( UWB_NUM_MAS ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long pending [ ( ( ( UWB_NUM_MAS ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; s#uwb_ie_drp_avail ie ; t#bool ie_valid ; } 
s##workqueue_struct
s#uwb_rc_cmd_set_ie struct uwb_rc_cmd_set_ie { s#uwb_rccb rccb ; t#__le16 wIELength ; t#u8 IEData [ ] ; } 
s##uwb_dbg
s#uwb_rc struct uwb_rc { s#uwb_dev uwb_dev ; int index ; t#u16 version ; s#module * owner ; void * priv ; int ( * start ) ( s#uwb_rc * ) ; void ( * stop ) ( s#uwb_rc * ) ; int ( * cmd ) ( s#uwb_rc * , const s#uwb_rccb * , t#size_t ) ; int ( * reset ) ( s#uwb_rc * ) ; int ( * filter_cmd ) ( s#uwb_rc * , s#uwb_rccb * * , t#size_t * ) ; int ( * filter_event ) ( s#uwb_rc * , s#uwb_rceb * * , const t#size_t , t#size_t * , t#size_t * ) ; t#spinlock_t neh_lock ; s#list_head neh_list ; unsigned long ctx_bm [ UWB_RC_CTX_MAX / 8 / sizeof ( unsigned long ) ] ; t#u8 ctx_roll ; int beaconing ; int beaconing_forced ; int scanning ; e#uwb_scan_type scan_type : 3 ; unsigned ready : 1 ; s#uwb_notifs_chain notifs_chain ; s#uwb_beca uwb_beca ; s#uwbd uwbd ; s#uwb_drp_backoff_win bow ; s#uwb_drp_avail drp_avail ; s#list_head reservations ; s#list_head cnflt_alien_list ; s#uwb_mas_bm cnflt_alien_bitmap ; s#mutex rsvs_mutex ; t#spinlock_t rsvs_lock ; s#workqueue_struct * rsv_workq ; s#delayed_work rsv_update_work ; s#delayed_work rsv_alien_bp_work ; int set_drp_ie_pending ; s#mutex ies_mutex ; s#uwb_rc_cmd_set_ie * ies ; t#size_t ies_capacity ; s#list_head pals ; int active_pals ; s#uwb_dbg * dbg ; } 
e#uwb_rsv_target_type enum uwb_rsv_target_type { UWB_RSV_TARGET_DEV , UWB_RSV_TARGET_DEVADDR , } 
s#uwb_rsv_target struct uwb_rsv_target { e#uwb_rsv_target_type type ; union { s#uwb_dev * dev ; s#uwb_dev_addr devaddr ; } ; } 
e#uwb_drp_type enum uwb_drp_type { UWB_DRP_TYPE_ALIEN_BP = 0 , UWB_DRP_TYPE_HARD , UWB_DRP_TYPE_SOFT , UWB_DRP_TYPE_PRIVATE , UWB_DRP_TYPE_PCA , } 
t#uwb_rsv_cb_f typedef void ( * uwb_rsv_cb_f ) ( s#uwb_rsv * ) 
e#uwb_rsv_state enum uwb_rsv_state { UWB_RSV_STATE_NONE = 0 , UWB_RSV_STATE_O_INITIATED , UWB_RSV_STATE_O_PENDING , UWB_RSV_STATE_O_MODIFIED , UWB_RSV_STATE_O_ESTABLISHED , UWB_RSV_STATE_O_TO_BE_MOVED , UWB_RSV_STATE_O_MOVE_EXPANDING , UWB_RSV_STATE_O_MOVE_COMBINING , UWB_RSV_STATE_O_MOVE_REDUCING , UWB_RSV_STATE_T_ACCEPTED , UWB_RSV_STATE_T_DENIED , UWB_RSV_STATE_T_CONFLICT , UWB_RSV_STATE_T_PENDING , UWB_RSV_STATE_T_EXPANDING_ACCEPTED , UWB_RSV_STATE_T_EXPANDING_CONFLICT , UWB_RSV_STATE_T_EXPANDING_PENDING , UWB_RSV_STATE_T_EXPANDING_DENIED , UWB_RSV_STATE_T_RESIZED , UWB_RSV_STATE_LAST , } 
s#uwb_drp_alloc struct uwb_drp_alloc { t#__le16 zone_bm ; t#__le16 mas_bm ; } 
s#uwb_ie_drp struct uwb_ie_drp { s#uwb_ie_hdr hdr ; t#__le16 drp_control ; s#uwb_dev_addr dev_addr ; s#uwb_drp_alloc allocs [ ] ; } 
s#uwb_rsv_move struct uwb_rsv_move { s#uwb_mas_bm final_mas ; s#uwb_ie_drp * companion_drp_ie ; s#uwb_mas_bm companion_mas ; } 
s#uwb_rsv struct uwb_rsv { s#uwb_rc * rc ; s#list_head rc_node ; s#list_head pal_node ; s#kref kref ; s#uwb_dev * owner ; s#uwb_rsv_target target ; e#uwb_drp_type type ; int max_mas ; int min_mas ; int max_interval ; t#bool is_multicast ; t#uwb_rsv_cb_f callback ; void * pal_priv ; e#uwb_rsv_state state ; t#bool needs_release_companion_mas ; t#u8 stream ; t#u8 tiebreaker ; s#uwb_mas_bm mas ; s#uwb_ie_drp * drp_ie ; s#uwb_rsv_move mv ; t#bool ie_valid ; s#timer_list timer ; s#work_struct handle_timeout_work ; } 
s#uwb_pal struct uwb_pal { s#list_head node ; const char * name ; s#device * device ; s#uwb_rc * rc ; void ( * channel_changed ) ( s#uwb_pal * , int ) ; void ( * new_rsv ) ( s#uwb_pal * , s#uwb_rsv * ) ; int channel ; s#dentry * debugfs_dir ; } 
s#wuie_hdr struct wuie_hdr { t#u8 bLength ; t#u8 bIEIdentifier ; } 
s#wuie_host_info struct wuie_host_info { s#wuie_hdr hdr ; t#__le16 attributes ; s#wusb_ckhdid CHID ; } 
s#wusb_port struct wusb_port { t#u16 status ; t#u16 change ; s#wusb_dev * wusb_dev ; t#u32 ptk_tkid ; } 
s##wusb_dev_info
s#wuie_keep_alive struct wuie_keep_alive { s#wuie_hdr hdr ; t#u8 bDeviceAddress [ 4 ] ; } 
s#wuie_connect_ack struct wuie_connect_ack { s#wuie_hdr hdr ; struct { s#wusb_ckhdid CDID ; t#u8 bDeviceAddress ; t#u8 bReserved ; } blk [ 4 ] ; } 
s#usb_key_descriptor struct usb_key_descriptor { t#__u8 bLength ; t#__u8 bDescriptorType ; t#__u8 tTKID [ 3 ] ; t#__u8 bReserved ; t#__u8 bKeyData [ 0 ] ; } 
s#wusbhc struct wusbhc { s#usb_hcd usb_hcd ; s#device * dev ; s#uwb_rc * uwb_rc ; s#uwb_pal pal ; unsigned trust_timeout ; s#wusb_ckhdid chid ; s#wuie_host_info * wuie_host_info ; s#mutex mutex ; t#u16 cluster_id ; s#wusb_port * port ; s#wusb_dev_info * dev_info ; t#u8 ports_max ; unsigned active : 1 ; s#wuie_keep_alive keep_alive_ie ; s#delayed_work keep_alive_timer ; s#list_head cack_list ; t#size_t cack_count ; s#wuie_connect_ack cack_ie ; s#uwb_rsv * rsv ; s#mutex mmcie_mutex ; s#wuie_hdr * * mmcie ; t#u8 mmcies_max ; int ( * start ) ( s#wusbhc * ) ; void ( * stop ) ( s#wusbhc * , int ) ; int ( * mmcie_add ) ( s#wusbhc * , t#u8 , t#u8 , t#u8 , s#wuie_hdr * ) ; int ( * mmcie_rm ) ( s#wusbhc * , t#u8 ) ; int ( * dev_info_set ) ( s#wusbhc * , s#wusb_dev * ) ; int ( * bwa_set ) ( s#wusbhc * , t#s8 , const s#uwb_mas_bm * ) ; int ( * set_ptk ) ( s#wusbhc * , t#u8 , t#u32 , const void * , t#size_t ) ; int ( * set_gtk ) ( s#wusbhc * , t#u32 , const void * , t#size_t ) ; int ( * set_num_dnts ) ( s#wusbhc * , t#u8 , t#u8 ) ; struct { s#usb_key_descriptor descr ; t#u8 data [ 16 ] ; } __attribute__ ( ( packed ) ) gtk ; t#u8 gtk_index ; t#u32 gtk_tkid ; s#work_struct gtk_rekey_done_work ; int pending_set_gtks ; s#usb_encryption_descriptor * ccm1_etd ; } 
s#wusb_dn_hdr struct wusb_dn_hdr { t#u8 bType ; t#u8 notifdata [ ] ; } 
wusbhc_handle_dn extern void wusbhc_handle_dn ( s#wusbhc * , t#u8 , s#wusb_dn_hdr * , t#size_t ) 
__wusb_dev_get_by_usb_dev extern s#wusb_dev * __wusb_dev_get_by_usb_dev ( s#wusbhc * , s#usb_device * ) 
wusb_dev_destroy extern void wusb_dev_destroy ( s#kref * ) 

/* drivers/usb/wusbcore/mmc.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##ep_device
s##scatterlist
s##mon_bus
s##dma_pool
s##uwb_beca_e
s##workqueue_struct
s##uwb_dbg
s##wusb_dev_info
wusbhc_mmcie_set extern int wusbhc_mmcie_set ( s#wusbhc * , t#u8 , t#u8 , s#wuie_hdr * ) 
wusbhc_mmcie_rm extern void wusbhc_mmcie_rm ( s#wusbhc * , s#wuie_hdr * ) 
wusbhc_chid_set extern int wusbhc_chid_set ( s#wusbhc * , const s#wusb_ckhdid * ) 

/* drivers/usb/wusbcore/rh.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##ep_device
s##uwb_beca_e
s##workqueue_struct
s##uwb_dbg
s##wusb_dev_info
s##scatterlist
s##mon_bus
s##dma_pool
wusbhc_rh_status_data extern int wusbhc_rh_status_data ( s#usb_hcd * , char * ) 
wusbhc_rh_control extern int wusbhc_rh_control ( s#usb_hcd * , t#u16 , t#u16 , t#u16 , char * , t#u16 ) 
wusbhc_rh_suspend extern int wusbhc_rh_suspend ( s#usb_hcd * ) 
wusbhc_rh_resume extern int wusbhc_rh_resume ( s#usb_hcd * ) 
wusbhc_rh_start_port_reset extern int wusbhc_rh_start_port_reset ( s#usb_hcd * , unsigned ) 

/* drivers/usb/wusbcore/security.o */
wusb_et_name extern const char * wusb_et_name ( t#u8 ) 

/* drivers/usb/wusbcore/wa-hc.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##mon_bus
s##ep_device
s##scatterlist
s##dma_pool
s##uwb_beca_e
s##workqueue_struct
s##uwb_dbg
s##wusb_dev_info
s##dwahc
s#usb_wa_descriptor struct usb_wa_descriptor { t#u8 bLength ; t#u8 bDescriptorType ; t#u16 bcdWAVersion ; t#u8 bNumPorts ; t#u8 bmAttributes ; t#u16 wNumRPipes ; t#u16 wRPipeMaxBlock ; t#u8 bRPipeBlockSize ; t#u8 bPwrOn2PwrGood ; t#u8 bNumMMCIEs ; t#u8 DeviceRemovable ; } 
s#edc struct edc { unsigned long timestart ; t#u16 errorcount ; } 
s#wa_notif_hdr struct wa_notif_hdr { t#u8 bLength ; t#u8 bNotifyType ; } 
s#wa_xfer_result struct wa_xfer_result { s#wa_notif_hdr hdr ; t#__le32 dwTransferID ; t#__le32 dwTransferLength ; t#u8 bTransferSegment ; t#u8 bTransferStatus ; t#__le32 dwNumOfPackets ; } 
s#wahc struct wahc { s#usb_device * usb_dev ; s#usb_interface * usb_iface ; union { s#wusbhc * wusb ; s#dwahc * dwa ; } ; const s#usb_endpoint_descriptor * dto_epd , * dti_epd ; const s#usb_wa_descriptor * wa_descr ; s#urb * nep_urb ; s#edc nep_edc ; void * nep_buffer ; t#size_t nep_buffer_size ; t#atomic_t notifs_queued ; t#u16 rpipes ; unsigned long * rpipe_bm ; t#spinlock_t rpipe_bm_lock ; s#mutex rpipe_mutex ; s#urb * dti_urb ; s#urb * buf_in_urb ; s#edc dti_edc ; s#wa_xfer_result * xfer_result ; t#size_t xfer_result_size ; t#s32 status ; s#list_head xfer_list ; s#list_head xfer_delayed_list ; t#spinlock_t xfer_list_lock ; s#work_struct xfer_work ; t#atomic_t xfer_id_count ; } 
wa_create extern int wa_create ( s#wahc * , s#usb_interface * ) 
__wa_destroy extern void __wa_destroy ( s#wahc * ) 

/* drivers/usb/wusbcore/wa-rpipe.o */
rpipe_destroy extern void rpipe_destroy ( s#kref * ) 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##mon_bus
s##ep_device
s##scatterlist
s##dma_pool
s##uwb_beca_e
s##workqueue_struct
s##uwb_dbg
s##wusb_dev_info
s##dwahc
rpipe_ep_disable extern void rpipe_ep_disable ( s#wahc * , s#usb_host_endpoint * ) 

/* drivers/usb/wusbcore/wa-xfer.o */
wa_urb_enqueue_run extern void wa_urb_enqueue_run ( s#work_struct * ) 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##mon_bus
s##ep_device
s##scatterlist
s##dma_pool
s##uwb_beca_e
s##workqueue_struct
s##uwb_dbg
s##wusb_dev_info
s##dwahc
wa_urb_enqueue extern int wa_urb_enqueue ( s#wahc * , s#usb_host_endpoint * , s#urb * , t#gfp_t ) 
wa_urb_dequeue extern int wa_urb_dequeue ( s#wahc * , s#urb * ) 

/* drivers/usb/wusbcore/wusbhc.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##ep_device
s##scatterlist
s##mon_bus
s##dma_pool
s##uwb_beca_e
s##workqueue_struct
s##uwb_dbg
s##wusb_dev_info
wusbhc_create extern int wusbhc_create ( s#wusbhc * ) 
wusbhc_b_create extern int wusbhc_b_create ( s#wusbhc * ) 
wusbhc_b_destroy extern void wusbhc_b_destroy ( s#wusbhc * ) 
wusbhc_destroy extern void wusbhc_destroy ( s#wusbhc * ) 
wusbd extern s#workqueue_struct * wusbd 
wusb_cluster_id_get extern t#u8 wusb_cluster_id_get ( void ) 
wusb_cluster_id_put extern void wusb_cluster_id_put ( t#u8 ) 
wusbhc_giveback_urb extern void wusbhc_giveback_urb ( s#wusbhc * , s#urb * , int ) 
wusbhc_reset_all void wusbhc_reset_all ( s#wusbhc * ) 

/* drivers/uwb/address.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##nameidata
s##vfsmount
s##kstatfs
s##kiocb
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##class_private
s#uwb_rc_evt_beacon struct uwb_rc_evt_beacon { s#uwb_rceb rceb ; t#u8 bChannelNumber ; t#u8 bBeaconType ; t#__le16 wBPSTOffset ; t#u8 bLQI ; t#u8 bRSSI ; t#__le16 wBeaconInfoLength ; t#u8 BeaconInfo [ ] ; } 
s#stats struct stats { t#s8 min , max ; t#s16 sigma ; t#atomic_t samples ; } 
s#uwb_beca_e struct uwb_beca_e { s#mutex mutex ; s#kref refcnt ; s#list_head node ; s#uwb_mac_addr * mac_addr ; s#uwb_dev_addr dev_addr ; t#u8 hits ; unsigned long ts_jiffies ; s#uwb_dev * uwb_dev ; s#uwb_rc_evt_beacon * be ; s#stats lqe_stats , rssi_stats ; } 
s##workqueue_struct
s##uwb_dbg
uwb_rc_mac_addr_get int uwb_rc_mac_addr_get ( s#uwb_rc * , s#uwb_mac_addr * ) 
uwb_rc_dev_addr_get int uwb_rc_dev_addr_get ( s#uwb_rc * , s#uwb_dev_addr * ) 
__uwb_addr_print t#size_t __uwb_addr_print ( char * , t#size_t , const unsigned char * , int ) 

/* drivers/uwb/est.o */
s#uwb_est_entry struct uwb_est_entry { t#size_t size ; unsigned offset ; enum { UWB_EST_16 = 0 , UWB_EST_8 = 1 } type ; } 
uwb_est_register int uwb_est_register ( t#u8 , t#u8 , t#u16 , t#u16 , const s#uwb_est_entry * , t#size_t ) 
uwb_est_unregister int uwb_est_unregister ( t#u8 , t#u8 , t#u16 , t#u16 , const s#uwb_est_entry * , t#size_t ) 
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##workqueue_struct
s##uwb_dbg
uwb_est_find_size t#ssize_t uwb_est_find_size ( s#uwb_rc * , const s#uwb_rceb * , t#size_t ) 

/* drivers/uwb/i1480/dfu/dfu.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s#i1480 struct i1480 { s#device * dev ; int ( * write ) ( s#i1480 * , t#u32 , const void * , t#size_t ) ; int ( * read ) ( s#i1480 * , t#u32 , t#size_t ) ; int ( * rc_setup ) ( s#i1480 * ) ; void ( * rc_release ) ( s#i1480 * ) ; int ( * wait_init_done ) ( s#i1480 * ) ; int ( * cmd ) ( s#i1480 * , const char * , t#size_t ) ; const char * pre_fw_name ; const char * mac_fw_name ; const char * mac_fw_name_deprecate ; const char * phy_fw_name ; t#u8 hw_rev ; t#size_t buf_size ; void * evt_buf , * cmd_buf ; t#ssize_t evt_result ; s#completion evt_complete ; } 
i1480_rceb_check extern int i1480_rceb_check ( const s#i1480 * , const s#uwb_rceb * , const char * , t#u8 , t#u8 , unsigned ) 
i1480_cmd extern t#ssize_t i1480_cmd ( s#i1480 * , const char * , t#size_t , t#size_t ) 
i1480_fw_upload extern int i1480_fw_upload ( s#i1480 * ) 

/* drivers/uwb/i1480/i1480u-wlp/sysfs.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s#wlp_tx_hdr struct wlp_tx_hdr { s#uwb_dev_addr dstaddr ; t#u8 key_index ; t#u8 mac_params ; t#u8 phy_params ; t#u8 reserved ; t#__le16 oui01 ; t#u8 oui2 ; t#__le16 prid ; } 
s#wlp_options struct wlp_options { s#mutex mutex ; s#wlp_tx_hdr def_tx_hdr ; t#u8 pca_base_priority ; t#u8 bw_alloc ; } 
uwb_phy_rate_show extern t#ssize_t uwb_phy_rate_show ( const s#wlp_options * , char * ) 
uwb_phy_rate_store extern t#ssize_t uwb_phy_rate_store ( s#wlp_options * , const char * , t#size_t ) 
uwb_rts_cts_show extern t#ssize_t uwb_rts_cts_show ( const s#wlp_options * , char * ) 
uwb_rts_cts_store extern t#ssize_t uwb_rts_cts_store ( s#wlp_options * , const char * , t#size_t ) 
uwb_ack_policy_show extern t#ssize_t uwb_ack_policy_show ( const s#wlp_options * , char * ) 
uwb_ack_policy_store extern t#ssize_t uwb_ack_policy_store ( s#wlp_options * , const char * , t#size_t ) 
uwb_pca_base_priority_show extern t#ssize_t uwb_pca_base_priority_show ( const s#wlp_options * , char * ) 
uwb_pca_base_priority_store extern t#ssize_t uwb_pca_base_priority_store ( s#wlp_options * , const char * , t#size_t ) 

/* drivers/uwb/ie.o */
uwb_ie_next s#uwb_ie_hdr * uwb_ie_next ( void * * , t#size_t * ) 
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##workqueue_struct
s##uwb_dbg
uwb_rc_ie_add int uwb_rc_ie_add ( s#uwb_rc * , const s#uwb_ie_hdr * , t#size_t ) 
e#uwb_ie enum uwb_ie { UWB_PCA_AVAILABILITY = 2 , UWB_IE_DRP_AVAILABILITY = 8 , UWB_IE_DRP = 9 , UWB_BP_SWITCH_IE = 11 , UWB_MAC_CAPABILITIES_IE = 12 , UWB_PHY_CAPABILITIES_IE = 13 , UWB_APP_SPEC_PROBE_IE = 15 , UWB_IDENTIFICATION_IE = 19 , UWB_MASTER_KEY_ID_IE = 20 , UWB_RELINQUISH_REQUEST_IE = 21 , UWB_IE_WLP = 250 , UWB_APP_SPEC_IE = 255 , } 
uwb_rc_ie_rm int uwb_rc_ie_rm ( s#uwb_rc * , e#uwb_ie ) 

/* drivers/uwb/lc-dev.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##workqueue_struct
s##uwb_dbg
e#uwb_notifs enum uwb_notifs { UWB_NOTIF_ONAIR , UWB_NOTIF_OFFAIR , } 
s#uwb_notifs_handler struct uwb_notifs_handler { s#list_head list_node ; void ( * cb ) ( void * , s#uwb_dev * , e#uwb_notifs ) ; void * data ; } 
uwb_notifs_register int uwb_notifs_register ( s#uwb_rc * , s#uwb_notifs_handler * ) 
uwb_notifs_deregister int uwb_notifs_deregister ( s#uwb_rc * , s#uwb_notifs_handler * ) 
uwb_dev_try_get s#uwb_dev * uwb_dev_try_get ( s#uwb_rc * , s#uwb_dev * ) 
t#uwb_dev_for_each_f typedef int ( * uwb_dev_for_each_f ) ( s#device * , void * ) 
uwb_dev_for_each int uwb_dev_for_each ( s#uwb_rc * , t#uwb_dev_for_each_f , void * ) 

/* drivers/uwb/lc-rc.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##workqueue_struct
s##uwb_dbg
uwb_rc_init void uwb_rc_init ( s#uwb_rc * ) 
uwb_rc_alloc s#uwb_rc * uwb_rc_alloc ( void ) 
uwb_rc_add int uwb_rc_add ( s#uwb_rc * , s#device * , void * ) 
uwb_rc_rm void uwb_rc_rm ( s#uwb_rc * ) 
__uwb_rc_try_get extern s#uwb_rc * __uwb_rc_try_get ( s#uwb_rc * ) 
uwb_rc_get_by_grandpa s#uwb_rc * uwb_rc_get_by_grandpa ( const s#device * ) 
uwb_rc_get_by_dev s#uwb_rc * uwb_rc_get_by_dev ( const s#uwb_dev_addr * ) 
uwb_rc_put void uwb_rc_put ( s#uwb_rc * ) 

/* drivers/uwb/neh.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##workqueue_struct
s##uwb_dbg
uwb_rc_neh_grok void uwb_rc_neh_grok ( s#uwb_rc * , void * , t#size_t ) 
uwb_rc_neh_error void uwb_rc_neh_error ( s#uwb_rc * , int ) 

/* drivers/uwb/pal.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##map_segment
s##compat_timespec
s##pollfd
s##workqueue_struct
s##uwb_dbg
s##nameidata
s##vfsmount
s##kiocb
s##iovec
s##poll_table_struct
s##vm_area_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##page
s##pipe_inode_info
s##cred
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
uwb_pal_init void uwb_pal_init ( s#uwb_pal * ) 
uwb_pal_register int uwb_pal_register ( s#uwb_pal * ) 
uwb_pal_unregister void uwb_pal_unregister ( s#uwb_pal * ) 

/* drivers/uwb/radio.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##map_segment
s##compat_timespec
s##pollfd
s##workqueue_struct
s##uwb_dbg
s##dentry
uwb_radio_start int uwb_radio_start ( s#uwb_pal * ) 
uwb_radio_stop void uwb_radio_stop ( s#uwb_pal * ) 

/* drivers/uwb/reset.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##workqueue_struct
s##uwb_dbg
t#uwb_rc_cmd_cb_f typedef void ( * uwb_rc_cmd_cb_f ) ( s#uwb_rc * , void * , s#uwb_rceb * , t#ssize_t ) 
uwb_rc_cmd_async int uwb_rc_cmd_async ( s#uwb_rc * , const char * , s#uwb_rccb * , t#size_t , t#u8 , t#u16 , t#uwb_rc_cmd_cb_f , void * ) 
uwb_rc_cmd t#ssize_t uwb_rc_cmd ( s#uwb_rc * , const char * , s#uwb_rccb * , t#size_t , s#uwb_rceb * , t#size_t ) 
uwb_rc_vcmd t#ssize_t uwb_rc_vcmd ( s#uwb_rc * , const char * , s#uwb_rccb * , t#size_t , t#u8 , t#u16 , s#uwb_rceb * * ) 
uwb_rc_reset_all void uwb_rc_reset_all ( s#uwb_rc * ) 
uwb_rc_pre_reset void uwb_rc_pre_reset ( s#uwb_rc * ) 
uwb_rc_post_reset int uwb_rc_post_reset ( s#uwb_rc * ) 

/* drivers/uwb/rsv.o */
uwb_rsv_state_str const char * uwb_rsv_state_str ( e#uwb_rsv_state ) 
uwb_rsv_type_str const char * uwb_rsv_type_str ( e#uwb_drp_type ) 
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##workqueue_struct
s##uwb_dbg
uwb_rsv_create s#uwb_rsv * uwb_rsv_create ( s#uwb_rc * , t#uwb_rsv_cb_f , void * ) 
uwb_rsv_destroy void uwb_rsv_destroy ( s#uwb_rsv * ) 
uwb_rsv_establish int uwb_rsv_establish ( s#uwb_rsv * ) 
uwb_rsv_modify int uwb_rsv_modify ( s#uwb_rsv * , int , int , int ) 
uwb_rsv_terminate void uwb_rsv_terminate ( s#uwb_rsv * ) 
uwb_rsv_accept void uwb_rsv_accept ( s#uwb_rsv * , t#uwb_rsv_cb_f , void * ) 
uwb_rsv_get_usable_mas void uwb_rsv_get_usable_mas ( s#uwb_rsv * , s#uwb_mas_bm * ) 

/* drivers/uwb/umc-bus.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s#umc_dev struct umc_dev { t#u16 version ; t#u8 cap_id ; t#u8 bar ; s#resource resource ; unsigned irq ; s#device dev ; } 
umc_controller_reset int umc_controller_reset ( s#umc_dev * ) 
s#umc_driver struct umc_driver { char * name ; t#u8 cap_id ; int ( * match ) ( s#umc_driver * , s#umc_dev * ) ; const void * match_data ; int ( * probe ) ( s#umc_dev * ) ; void ( * remove ) ( s#umc_dev * ) ; int ( * suspend ) ( s#umc_dev * , t#pm_message_t ) ; int ( * resume ) ( s#umc_dev * ) ; int ( * pre_reset ) ( s#umc_dev * ) ; int ( * post_reset ) ( s#umc_dev * ) ; s#device_driver driver ; } 
umc_match_pci_id int umc_match_pci_id ( s#umc_driver * , s#umc_dev * ) 
umc_bus_type extern s#bus_type umc_bus_type 

/* drivers/uwb/umc-dev.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
umc_device_create s#umc_dev * umc_device_create ( s#device * , int ) 
umc_device_register int __attribute__ ( ( warn_unused_result ) ) umc_device_register ( s#umc_dev * ) 
umc_device_unregister void umc_device_unregister ( s#umc_dev * ) 

/* drivers/uwb/umc-drv.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
__umc_driver_register int __attribute__ ( ( warn_unused_result ) ) __umc_driver_register ( s#umc_driver * , s#module * , const char * ) 
umc_driver_unregister void umc_driver_unregister ( s#umc_driver * ) 

/* drivers/uwb/whci.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
whci_wait_for extern int whci_wait_for ( s#device * , t#u32 * , t#u32 , t#u32 , unsigned long , const char * ) 

/* drivers/uwb/wlp/eda.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##nameidata
s##vfsmount
s##kstatfs
s##kiocb
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##class_private
s##uwb_beca_e
s##workqueue_struct
s##uwb_dbg
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s#wlp_eda struct wlp_eda { t#spinlock_t lock ; s#list_head cache ; } 
s#wlp_uuid struct wlp_uuid { t#u8 data [ 16 ] ; } 
e#wlp_assoc_type enum wlp_assoc_type { WLP_ASSOC_D1 = 2 , WLP_ASSOC_D2 = 3 , WLP_ASSOC_M1 = 4 , WLP_ASSOC_M2 = 5 , WLP_ASSOC_M3 = 7 , WLP_ASSOC_M4 = 8 , WLP_ASSOC_M5 = 9 , WLP_ASSOC_M6 = 10 , WLP_ASSOC_M7 = 11 , WLP_ASSOC_M8 = 12 , WLP_ASSOC_F0 = 14 , WLP_ASSOC_E1 = 32 , WLP_ASSOC_E2 = 33 , WLP_ASSOC_C1 = 34 , WLP_ASSOC_C2 = 35 , WLP_ASSOC_C3 = 36 , WLP_ASSOC_C4 = 37 , } 
s#wlp_session struct wlp_session { e#wlp_assoc_type exp_message ; void ( * cb ) ( s#wlp * ) ; void * cb_priv ; void * data ; s#uwb_dev_addr neighbor_addr ; } 
e#wlp_wss_state enum wlp_wss_state { WLP_WSS_STATE_NONE = 0 , WLP_WSS_STATE_PART_ENROLLED , WLP_WSS_STATE_ENROLLED , WLP_WSS_STATE_ACTIVE , WLP_WSS_STATE_CONNECTED , } 
s#wlp_wss struct wlp_wss { s#mutex mutex ; s#kobject kobj ; s#wlp_uuid wssid ; t#u8 hash ; char name [ 65 ] ; s#uwb_mac_addr bcast ; t#u8 secure_status : 1 ; t#u8 master_key [ 16 ] ; t#u8 tag ; s#uwb_mac_addr virtual_addr ; t#u8 accept_enroll : 1 ; e#wlp_wss_state state ; } 
e#wlp_dev_category_id enum wlp_dev_category_id { WLP_DEV_CAT_COMPUTER = 1 , WLP_DEV_CAT_INPUT , WLP_DEV_CAT_PRINT_SCAN_FAX_COPIER , WLP_DEV_CAT_CAMERA , WLP_DEV_CAT_STORAGE , WLP_DEV_CAT_INFRASTRUCTURE , WLP_DEV_CAT_DISPLAY , WLP_DEV_CAT_MULTIM , WLP_DEV_CAT_GAMING , WLP_DEV_CAT_TELEPHONE , WLP_DEV_CAT_OTHER = 65535 , } 
s#wlp_dev_type struct wlp_dev_type { e#wlp_dev_category_id category : 16 ; t#u8 OUI [ 3 ] ; t#u8 OUIsubdiv ; t#__le16 subID ; } 
s#wlp_device_info struct wlp_device_info { char name [ 33 ] ; char model_name [ 33 ] ; char manufacturer [ 65 ] ; char model_nr [ 33 ] ; char serial [ 33 ] ; s#wlp_dev_type prim_dev_type ; } 
s#wlp struct wlp { s#mutex mutex ; s#uwb_rc * rc ; s#net_device * ndev ; s#uwb_pal pal ; s#wlp_eda eda ; s#wlp_uuid uuid ; s#wlp_session * session ; s#wlp_wss wss ; s#mutex nbmutex ; s#list_head neighbors ; s#uwb_notifs_handler uwb_notifs_handler ; s#wlp_device_info * dev_info ; void ( * fill_device_info ) ( s#wlp * , s#wlp_device_info * ) ; int ( * xmit_frame ) ( s#wlp * , s#sk_buff * , s#uwb_dev_addr * ) ; void ( * stop_queue ) ( s#wlp * ) ; void ( * start_queue ) ( s#wlp * ) ; } 
wlp_eda_show extern t#ssize_t wlp_eda_show ( s#wlp * , char * ) 
wlp_eda_store extern t#ssize_t wlp_eda_store ( s#wlp * , const char * , t#size_t ) 

/* drivers/uwb/wlp/sysfs.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##nameidata
s##vfsmount
s##kstatfs
s##kiocb
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##class_private
s##uwb_beca_e
s##workqueue_struct
s##uwb_dbg
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
wlp_neighborhood_show extern t#ssize_t wlp_neighborhood_show ( s#wlp * , char * ) 
wlp_wss_activate_show extern t#ssize_t wlp_wss_activate_show ( s#wlp_wss * , char * ) 
wlp_wss_activate_store extern t#ssize_t wlp_wss_activate_store ( s#wlp_wss * , const char * , t#size_t ) 
wlp_uuid_show extern t#ssize_t wlp_uuid_show ( s#wlp * , char * ) 
wlp_uuid_store extern t#ssize_t wlp_uuid_store ( s#wlp * , const char * , t#size_t ) 
wlp_dev_name_show extern t#ssize_t wlp_dev_name_show ( s#wlp * , char * ) 
wlp_dev_model_name_show extern t#ssize_t wlp_dev_model_name_show ( s#wlp * , char * ) 
wlp_dev_model_nr_show extern t#ssize_t wlp_dev_model_nr_show ( s#wlp * , char * ) 
wlp_dev_manufacturer_show extern t#ssize_t wlp_dev_manufacturer_show ( s#wlp * , char * ) 
wlp_dev_serial_show extern t#ssize_t wlp_dev_serial_show ( s#wlp * , char * ) 
wlp_dev_name_store extern t#ssize_t wlp_dev_name_store ( s#wlp * , const char * , t#size_t ) 
wlp_dev_manufacturer_store extern t#ssize_t wlp_dev_manufacturer_store ( s#wlp * , const char * , t#size_t ) 
wlp_dev_model_name_store extern t#ssize_t wlp_dev_model_name_store ( s#wlp * , const char * , t#size_t ) 
wlp_dev_model_nr_store extern t#ssize_t wlp_dev_model_nr_store ( s#wlp * , const char * , t#size_t ) 
wlp_dev_serial_store extern t#ssize_t wlp_dev_serial_store ( s#wlp * , const char * , t#size_t ) 
wlp_dev_prim_category_show extern t#ssize_t wlp_dev_prim_category_show ( s#wlp * , char * ) 
wlp_dev_prim_category_store extern t#ssize_t wlp_dev_prim_category_store ( s#wlp * , const char * , t#size_t ) 
wlp_dev_prim_OUI_show extern t#ssize_t wlp_dev_prim_OUI_show ( s#wlp * , char * ) 
wlp_dev_prim_OUI_store extern t#ssize_t wlp_dev_prim_OUI_store ( s#wlp * , const char * , t#size_t ) 
wlp_dev_prim_OUI_sub_show extern t#ssize_t wlp_dev_prim_OUI_sub_show ( s#wlp * , char * ) 
wlp_dev_prim_OUI_sub_store extern t#ssize_t wlp_dev_prim_OUI_sub_store ( s#wlp * , const char * , t#size_t ) 
wlp_dev_prim_subcat_show extern t#ssize_t wlp_dev_prim_subcat_show ( s#wlp * , char * ) 
wlp_dev_prim_subcat_store extern t#ssize_t wlp_dev_prim_subcat_store ( s#wlp * , const char * , t#size_t ) 

/* drivers/uwb/wlp/txrx.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##kiocb
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##class_private
s##uwb_beca_e
s##workqueue_struct
s##uwb_dbg
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
wlp_receive_frame extern int wlp_receive_frame ( s#device * , s#wlp * , s#sk_buff * , s#uwb_dev_addr * ) 
wlp_prepare_tx_frame extern int wlp_prepare_tx_frame ( s#device * , s#wlp * , s#sk_buff * , s#uwb_dev_addr * ) 

/* drivers/uwb/wlp/wlp-lc.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##nameidata
s##vfsmount
s##kstatfs
s##kiocb
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##class_private
s##uwb_beca_e
s##workqueue_struct
s##uwb_dbg
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
wlp_setup extern int wlp_setup ( s#wlp * , s#uwb_rc * , s#net_device * ) 
wlp_remove extern void wlp_remove ( s#wlp * ) 
wlp_reset_all void wlp_reset_all ( s#wlp * ) 

/* drivers/uwb/wlp/wss-lc.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
wlp_wss_setup extern int wlp_wss_setup ( s#net_device * , s#wlp_wss * ) 
wlp_wss_remove extern void wlp_wss_remove ( s#wlp_wss * ) 

/* drivers/video/backlight/backlight.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##splash_data
e#backlight_update_reason enum backlight_update_reason { BACKLIGHT_UPDATE_HOTKEY , BACKLIGHT_UPDATE_SYSFS , } 
backlight_force_update extern void backlight_force_update ( s#backlight_device * , e#backlight_update_reason ) 
backlight_device_register extern s#backlight_device * backlight_device_register ( const char * , s#device * , void * , s#backlight_ops * ) 
backlight_device_unregister extern void backlight_device_unregister ( s#backlight_device * ) 

/* drivers/video/backlight/generic_bl.o */
corgibl_limit_intensity void corgibl_limit_intensity ( int ) 

/* drivers/video/backlight/ili9320.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#ili9320_spi struct ili9320_spi { s#spi_device * dev ; s#spi_message message ; s#spi_transfer xfer [ 2 ] ; unsigned char id ; unsigned char buffer_addr [ 4 ] ; unsigned char buffer_data [ 4 ] ; } 
s#lcd_properties struct lcd_properties { int max_contrast ; } 
s##splash_data
s#lcd_ops struct lcd_ops { int ( * get_power ) ( s#lcd_device * ) ; int ( * set_power ) ( s#lcd_device * , int ) ; int ( * get_contrast ) ( s#lcd_device * ) ; int ( * set_contrast ) ( s#lcd_device * , int ) ; int ( * set_mode ) ( s#lcd_device * , s#fb_videomode * ) ; int ( * check_fb ) ( s#lcd_device * , s#fb_info * ) ; } 
s#lcd_device struct lcd_device { s#lcd_properties props ; s#mutex ops_lock ; s#lcd_ops * ops ; s#mutex update_lock ; s#notifier_block fb_notif ; s#device dev ; } 
e#ili9320_suspend enum ili9320_suspend { ILI9320_SUSPEND_OFF , ILI9320_SUSPEND_DEEP , } 
s#ili9320_platdata struct ili9320_platdata { unsigned short hsize ; unsigned short vsize ; e#ili9320_suspend suspend ; void ( * reset ) ( unsigned int ) ; unsigned short entry_mode ; unsigned short display2 ; unsigned short display3 ; unsigned short display4 ; unsigned short rgb_if1 ; unsigned short rgb_if2 ; unsigned short interface2 ; unsigned short interface3 ; unsigned short interface4 ; unsigned short interface5 ; unsigned short interface6 ; } 
s#ili9320_client struct ili9320_client { const char * name ; int ( * init ) ( s#ili9320 * , s#ili9320_platdata * ) ; } 
s#ili9320 struct ili9320 { union { s#ili9320_spi spi ; } access ; s#device * dev ; s#lcd_device * lcd ; s#ili9320_client * client ; s#ili9320_platdata * platdata ; int power ; int initialised ; unsigned short display1 ; unsigned short power1 ; int ( * write ) ( s#ili9320 * , unsigned int , unsigned int ) ; } 
ili9320_write extern int ili9320_write ( s#ili9320 * , unsigned int , unsigned int ) 
s#ili9320_reg struct ili9320_reg { unsigned short address ; unsigned short value ; } 
ili9320_write_regs extern int ili9320_write_regs ( s#ili9320 * , s#ili9320_reg * , int ) 
ili9320_probe_spi extern int ili9320_probe_spi ( s#spi_device * , s#ili9320_client * ) 
ili9320_remove extern int ili9320_remove ( s#ili9320 * ) 
ili9320_suspend extern int ili9320_suspend ( s#ili9320 * , t#pm_message_t ) 
ili9320_resume extern int ili9320_resume ( s#ili9320 * ) 
ili9320_shutdown extern void ili9320_shutdown ( s#ili9320 * ) 

/* drivers/video/backlight/lcd.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##splash_data
lcd_device_register extern s#lcd_device * lcd_device_register ( const char * , s#device * , void * , s#lcd_ops * ) 
lcd_device_unregister extern void lcd_device_unregister ( s#lcd_device * ) 

/* drivers/video/cfbcopyarea.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##splash_data
cfb_copyarea extern void cfb_copyarea ( s#fb_info * , const s#fb_copyarea * ) 

/* drivers/video/cfbfillrect.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##splash_data
cfb_fillrect extern void cfb_fillrect ( s#fb_info * , const s#fb_fillrect * ) 

/* drivers/video/cfbimgblt.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##splash_data
cfb_imageblit extern void cfb_imageblit ( s#fb_info * , const s#fb_image * ) 

/* drivers/video/console/bitblit.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##proc_dir_entry
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#splash_data struct splash_data { int splash_state ; int splash_color ; int splash_fg_color ; int splash_width ; int splash_height ; int splash_text_xo ; int splash_text_yo ; int splash_text_wi ; int splash_text_he ; int splash_jpg_text_wi ; int splash_jpg_text_he ; int splash_showtext ; int splash_boxcount ; int splash_percent ; int splash_overpaintok ; int splash_palcnt ; char * oldscreen_base ; unsigned char * splash_boxes ; unsigned char * splash_jpeg ; unsigned char * splash_palette ; int splash_boxes_xoff ; int splash_boxes_yoff ; int splash_dosilent ; unsigned char * splash_silentjpeg ; unsigned char * splash_sboxes ; int splash_sboxcount ; s#splash_data * next ; int splash_sboxes_xoff ; int splash_sboxes_yoff ; int splash_pic_stride ; unsigned char * splash_pic ; int splash_pic_size ; } 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#display struct display { const t#u_char * fontdata ; int userfont ; t#u_short scrollmode ; t#u_short inverse ; short yscroll ; int vrows ; int cursor_shape ; int con_rotate ; t#u32 xres_virtual ; t#u32 yres_virtual ; t#u32 height ; t#u32 width ; t#u32 bits_per_pixel ; t#u32 grayscale ; t#u32 nonstd ; t#u32 accel_flags ; t#u32 rotate ; s#fb_bitfield red ; s#fb_bitfield green ; s#fb_bitfield blue ; s#fb_bitfield transp ; const s#fb_videomode * mode ; } 
s#fbcon_ops struct fbcon_ops { void ( * bmove ) ( s#vc_data * , s#fb_info * , int , int , int , int , int , int ) ; void ( * clear ) ( s#vc_data * , s#fb_info * , int , int , int , int ) ; void ( * putcs ) ( s#vc_data * , s#fb_info * , const unsigned short * , int , int , int , int , int ) ; void ( * clear_margins ) ( s#vc_data * , s#fb_info * , int ) ; void ( * cursor ) ( s#vc_data * , s#fb_info * , int , int , int , int ) ; int ( * update_start ) ( s#fb_info * ) ; int ( * rotate_font ) ( s#fb_info * , s#vc_data * ) ; s#fb_var_screeninfo var ; s#timer_list cursor_timer ; s#fb_cursor cursor_state ; s#display * p ; int currcon ; int cursor_flash ; int cursor_reset ; int blank_state ; int graphics ; int flags ; int rotate ; int cur_rotate ; char * cursor_data ; t#u8 * fontbuffer ; t#u8 * fontdata ; t#u8 * cursor_src ; t#u32 cursor_size ; t#u32 fd_size ; } 
fbcon_set_bitops extern void fbcon_set_bitops ( s#fbcon_ops * ) 

/* drivers/video/console/fbcon_ccw.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##proc_dir_entry
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
fbcon_rotate_ccw extern void fbcon_rotate_ccw ( s#fbcon_ops * ) 

/* drivers/video/console/fbcon_cw.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##proc_dir_entry
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
fbcon_rotate_cw extern void fbcon_rotate_cw ( s#fbcon_ops * ) 

/* drivers/video/console/fbcon_rotate.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##proc_dir_entry
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
fbcon_set_rotate extern void fbcon_set_rotate ( s#fbcon_ops * ) 

/* drivers/video/console/fbcon_ud.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##proc_dir_entry
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
fbcon_rotate_ud extern void fbcon_rotate_ud ( s#fbcon_ops * ) 

/* drivers/video/console/font_8x16.o */
s#font_desc struct font_desc { int idx ; const char * name ; int width , height ; const void * data ; int pref ; } 
font_vga_8x16 extern const s#font_desc font_vga_8x16 

/* drivers/video/console/fonts.o */
find_font extern const s#font_desc * find_font ( const char * ) 
get_default_font extern const s#font_desc * get_default_font ( int , int , t#u32 , t#u32 ) 

/* drivers/video/console/softcursor.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##proc_dir_entry
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
soft_cursor extern int soft_cursor ( s#fb_info * , s#fb_cursor * ) 

/* drivers/video/console/tileblit.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##proc_dir_entry
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
fbcon_set_tileops extern void fbcon_set_tileops ( s#vc_data * , s#fb_info * ) 

/* drivers/video/console/vgacon.o */
vgacon_text_force extern t#bool vgacon_text_force ( void ) 

/* drivers/video/cyber2000fb.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##splash_data
s##display_switch
s##display
s##proc_dir_entry
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#cfb_info struct cfb_info { s#fb_info fb ; s#display_switch * dispsw ; s#display * display ; s#pci_dev * dev ; unsigned char * region ; unsigned char * regs ; t#u_int id ; int func_use_count ; t#u_long ref_ps ; t#u_int divisors [ 4 ] ; struct { t#u8 red , green , blue ; } palette [ 256 ] ; t#u_char mem_ctl1 ; t#u_char mem_ctl2 ; t#u_char mclk_mult ; t#u_char mclk_div ; t#u_char ramdac_ctrl ; t#u_char ramdac_powerdown ; t#u32 pseudo_palette [ 16 ] ; } 
cyber2000fb_enable_extregs void cyber2000fb_enable_extregs ( s#cfb_info * ) 
cyber2000fb_disable_extregs void cyber2000fb_disable_extregs ( s#cfb_info * ) 
cyber2000fb_get_fb_var void cyber2000fb_get_fb_var ( s#cfb_info * , s#fb_var_screeninfo * ) 
s#cyberpro_info struct cyberpro_info { s#pci_dev * dev ; unsigned char * regs ; char * fb ; char dev_name [ 32 ] ; unsigned int fb_size ; unsigned int chip_id ; s#cfb_info * info ; void ( * enable_extregs ) ( s#cfb_info * ) ; void ( * disable_extregs ) ( s#cfb_info * ) ; } 
cyber2000fb_attach int cyber2000fb_attach ( s#cyberpro_info * , int ) 
cyber2000fb_detach void cyber2000fb_detach ( int ) 

/* drivers/video/display/display-sysfs.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s#display_driver struct display_driver { int ( * set_contrast ) ( s#display_device * , unsigned int ) ; int ( * get_contrast ) ( s#display_device * ) ; void ( * suspend ) ( s#display_device * , t#pm_message_t ) ; void ( * resume ) ( s#display_device * ) ; int ( * probe ) ( s#display_device * , void * ) ; int ( * remove ) ( s#display_device * ) ; int max_contrast ; } 
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##map_segment
s##compat_timespec
s##pollfd
s#display_device struct display_device { s#module * owner ; s#display_driver * driver ; s#device * parent ; s#device * dev ; s#mutex lock ; void * priv_data ; char type [ 16 ] ; char * name ; int idx ; } 
display_device_register extern s#display_device * display_device_register ( s#display_driver * , s#device * , void * ) 
display_device_unregister extern void display_device_unregister ( s#display_device * ) 

/* drivers/video/fb_ddc.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
fb_ddc_read extern unsigned char * fb_ddc_read ( s#i2c_adapter * ) 

/* drivers/video/fb_defio.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s#anon_vma struct anon_vma { t#spinlock_t lock ; s#list_head head ; } 
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##poll_table_struct
s##nlm_lockowner
s##nfs4_lock_state
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
fb_deferred_io_fsync extern int fb_deferred_io_fsync ( s#file * , s#dentry * , int ) 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##splash_data
fb_deferred_io_init extern void fb_deferred_io_init ( s#fb_info * ) 
fb_deferred_io_open extern void fb_deferred_io_open ( s#fb_info * , s#inode * , s#file * ) 
fb_deferred_io_cleanup extern void fb_deferred_io_cleanup ( s#fb_info * ) 

/* drivers/video/fb_notify.o */
fb_register_client extern int fb_register_client ( s#notifier_block * ) 
fb_unregister_client extern int fb_unregister_client ( s#notifier_block * ) 
fb_notifier_call_chain extern int fb_notifier_call_chain ( unsigned long , void * ) 

/* drivers/video/fb_sys_fops.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##splash_data
fb_sys_read extern t#ssize_t fb_sys_read ( s#fb_info * , char * , t#size_t , t#loff_t * ) 
fb_sys_write extern t#ssize_t fb_sys_write ( s#fb_info * , const char * , t#size_t , t#loff_t * ) 

/* drivers/video/fbcmap.o */
fb_alloc_cmap extern int fb_alloc_cmap ( s#fb_cmap * , int , int ) 
fb_dealloc_cmap extern void fb_dealloc_cmap ( s#fb_cmap * ) 
fb_copy_cmap extern int fb_copy_cmap ( const s#fb_cmap * , s#fb_cmap * ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##splash_data
fb_set_cmap extern int fb_set_cmap ( s#fb_cmap * , s#fb_info * ) 
fb_default_cmap extern const s#fb_cmap * fb_default_cmap ( int ) 
fb_invert_cmaps extern void fb_invert_cmaps ( void ) 

/* drivers/video/fbmem.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##splash_data
lock_fb_info extern int lock_fb_info ( s#fb_info * ) 
fb_get_color_depth extern int fb_get_color_depth ( s#fb_var_screeninfo * , s#fb_fix_screeninfo * ) 
fb_pad_aligned_buffer extern void fb_pad_aligned_buffer ( t#u8 * , t#u32 , t#u8 * , t#u32 , t#u32 ) 
fb_pad_unaligned_buffer extern void fb_pad_unaligned_buffer ( t#u8 * , t#u32 , t#u8 * , t#u32 , t#u32 , t#u32 , t#u32 , t#u32 ) 
fb_class extern s#class * fb_class 
register_framebuffer extern int register_framebuffer ( s#fb_info * ) 
unregister_framebuffer extern int unregister_framebuffer ( s#fb_info * ) 
num_registered_fb extern int num_registered_fb 
registered_fb extern s#fb_info * registered_fb [ 32 ] 
fb_show_logo extern int fb_show_logo ( s#fb_info * , int ) 
fb_set_var extern int fb_set_var ( s#fb_info * , s#fb_var_screeninfo * ) 
fb_blank extern int fb_blank ( s#fb_info * , int ) 
fb_pan_display extern int fb_pan_display ( s#fb_info * , s#fb_var_screeninfo * ) 
fb_get_buffer_offset extern char * fb_get_buffer_offset ( s#fb_info * , s#fb_pixmap * , t#u32 ) 
fb_set_suspend extern void fb_set_suspend ( s#fb_info * , int ) 
fb_get_options extern int fb_get_options ( char * , char * * ) 

/* drivers/video/fbmon.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
fb_firmware_edid extern const unsigned char * fb_firmware_edid ( s#device * ) 
fb_parse_edid extern int fb_parse_edid ( unsigned char * , s#fb_var_screeninfo * ) 
fb_edid_to_monspecs extern void fb_edid_to_monspecs ( unsigned char * , s#fb_monspecs * ) 
s##splash_data
fb_get_mode extern int fb_get_mode ( int , t#u32 , s#fb_var_screeninfo * , s#fb_info * ) 
fb_validate_mode extern int fb_validate_mode ( const s#fb_var_screeninfo * , s#fb_info * ) 
fb_destroy_modedb extern void fb_destroy_modedb ( s#fb_videomode * ) 

/* drivers/video/fbsysfs.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##splash_data
framebuffer_alloc extern s#fb_info * framebuffer_alloc ( t#size_t , s#device * ) 
framebuffer_release extern void framebuffer_release ( s#fb_info * ) 
fb_bl_default_curve extern void fb_bl_default_curve ( s#fb_info * , t#u8 , t#u8 , t#u8 ) 

/* drivers/video/macmodes.o */
mac_vmode_to_var extern int mac_vmode_to_var ( int , int , s#fb_var_screeninfo * ) 
mac_map_monitor_sense extern int mac_map_monitor_sense ( int ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##splash_data
mac_find_mode extern int mac_find_mode ( s#fb_var_screeninfo * , s#fb_info * , const char * , unsigned int ) 

/* drivers/video/matrox/g450_pll.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##splash_data
s#matroxfb_par struct matroxfb_par { unsigned int final_bppShift ; unsigned int cmap_len ; struct { unsigned int bytes ; unsigned int pixels ; unsigned int chunks ; } ydstorg ; } 
t#u_int32_t typedef t#__u32 u_int32_t 
t#u_int8_t typedef t#__u8 u_int8_t 
t#u_int16_t typedef t#__u16 u_int16_t 
s#mavenregs struct mavenregs { t#u_int8_t regs [ 256 ] ; int mode ; int vlines ; int xtal ; int fv ; t#u_int16_t htotal ; t#u_int16_t hcorr ; } 
s#matrox_crtc2 struct matrox_crtc2 { t#u_int32_t ctl ; } 
s#matrox_hw_state struct matrox_hw_state { t#u_int32_t MXoptionReg ; unsigned char DACclk [ 6 ] ; unsigned char DACreg [ 80 ] ; unsigned char MiscOutReg ; unsigned char DACpal [ 768 ] ; unsigned char CRTC [ 25 ] ; unsigned char CRTCEXT [ 9 ] ; unsigned char SEQ [ 5 ] ; unsigned char GCTL [ 9 ] ; unsigned char ATTR [ 21 ] ; s#mavenregs maven ; s#matrox_crtc2 crtc2 ; } 
s#matrox_accel_data struct matrox_accel_data { unsigned char ramdac_rev ; t#u_int32_t m_dwg_rect ; t#u_int32_t m_opmode ; } 
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#matrox_vsync struct matrox_vsync { t#wait_queue_head_t wait ; unsigned int cnt ; } 
s##matroxfb_dh_fb_info
s#my_timming struct my_timming { unsigned int pixclock ; int mnp ; unsigned int crtc ; unsigned int HDisplay ; unsigned int HSyncStart ; unsigned int HSyncEnd ; unsigned int HTotal ; unsigned int VDisplay ; unsigned int VSyncStart ; unsigned int VSyncEnd ; unsigned int VTotal ; unsigned int sync ; int dblscan ; int interlaced ; unsigned int delay ; } 
s##v4l2_queryctrl
s##v4l2_control
s#matrox_altout struct matrox_altout { const char * name ; int ( * compute ) ( void * , s#my_timming * ) ; int ( * program ) ( void * ) ; int ( * start ) ( void * ) ; int ( * verifymode ) ( void * , t#u_int32_t ) ; int ( * getqueryctrl ) ( void * , s#v4l2_queryctrl * ) ; int ( * getctrl ) ( void * , s#v4l2_control * ) ; int ( * setctrl ) ( void * , s#v4l2_control * ) ; } 
s#matroxfb_driver struct matroxfb_driver { s#list_head node ; char * name ; void * ( * probe ) ( s#matrox_fb_info * ) ; void ( * remove ) ( s#matrox_fb_info * , void * ) ; } 
t#vaddr_t typedef struct { void * vaddr ; } vaddr_t 
s#matrox_switch struct matrox_switch { int ( * preinit ) ( s#matrox_fb_info * ) ; void ( * reset ) ( s#matrox_fb_info * ) ; int ( * init ) ( s#matrox_fb_info * , s#my_timming * ) ; void ( * restore ) ( s#matrox_fb_info * ) ; } 
s#matrox_pll_features struct matrox_pll_features { unsigned int vco_freq_min ; unsigned int ref_freq ; unsigned int feed_div_min ; unsigned int feed_div_max ; unsigned int in_div_min ; unsigned int in_div_max ; unsigned int post_shift_max ; } 
s#matrox_DAC1064_features struct matrox_DAC1064_features { t#u_int8_t xvrefctrl ; t#u_int8_t xmiscctrl ; } 
e#mga_chip enum mga_chip { MGA_2064 , MGA_2164 , MGA_1064 , MGA_1164 , MGA_G100 , MGA_G200 , MGA_G400 , MGA_G450 , MGA_G550 } 
s#matrox_bios struct matrox_bios { unsigned int bios_valid : 1 ; unsigned int pins_len ; unsigned char pins [ 128 ] ; struct { unsigned char vMaj , vMin , vRev ; } version ; struct { unsigned char state , tvout ; } output ; } 
s#matrox_pll_limits struct matrox_pll_limits { unsigned int vcomin ; unsigned int vcomax ; } 
s#matrox_pll_cache struct matrox_pll_cache { unsigned int valid ; struct { unsigned int mnp_key ; unsigned int mnp_value ; } data [ 4 ] ; } 
s#matrox_fb_info struct matrox_fb_info { s#fb_info fbcon ; s#list_head next_fb ; int dead ; int initialized ; unsigned int usecount ; unsigned int userusecount ; unsigned long irq_flags ; s#matroxfb_par curr ; s#matrox_hw_state hw ; s#matrox_accel_data accel ; s#pci_dev * pcidev ; struct { s#matrox_vsync vsync ; unsigned int pixclock ; int mnp ; int panpos ; } crtc1 ; struct { s#matrox_vsync vsync ; unsigned int pixclock ; int mnp ; s#matroxfb_dh_fb_info * info ; s#rw_semaphore lock ; } crtc2 ; struct { s#rw_semaphore lock ; struct { int brightness , contrast , saturation , hue , gamma ; int testout , deflicker ; } tvo_params ; } altout ; struct { unsigned int src ; s#matrox_altout * output ; void * data ; unsigned int mode ; unsigned int default_src ; } outputs [ 3 ] ; s#matroxfb_driver * ( drivers [ 5 ] ) ; void * ( drivers_data [ 5 ] ) ; unsigned int drivers_count ; struct { unsigned long base ; t#vaddr_t vbase ; unsigned int len ; unsigned int len_usable ; unsigned int len_maximum ; } video ; struct { unsigned long base ; t#vaddr_t vbase ; unsigned int len ; } mmio ; unsigned int max_pixel_clock ; unsigned int max_pixel_clock_panellink ; s#matrox_switch * hw_switch ; struct { s#matrox_pll_features pll ; s#matrox_DAC1064_features DAC1064 ; } features ; struct { t#spinlock_t DAC ; t#spinlock_t accel ; } lock ; e#mga_chip chip ; int interleave ; int millenium ; int milleniumII ; struct { int cfb4 ; const int * vxres ; int cross4MB ; int text ; int plnwt ; int srcorg ; } capable ; struct { int vram ; int vram_valid ; } mtrr ; struct { int precise_width ; int mga_24bpp_fix ; int novga ; int nobios ; int nopciretry ; int noinit ; int sgram ; int support32MB ; int accelerator ; int text_type_aux ; int video64bits ; int crtc2 ; int maven_capable ; unsigned int vgastep ; unsigned int textmode ; unsigned int textstep ; unsigned int textvram ; unsigned int ydstorg ; int memtype ; int g450dac ; int dfp_type ; int panellink ; int dualhead ; unsigned int fbResource ; } devflags ; s#fb_ops fbops ; s#matrox_bios bios ; struct { s#matrox_pll_limits pixel ; s#matrox_pll_limits system ; s#matrox_pll_limits video ; } limits ; struct { s#matrox_pll_cache pixel ; s#matrox_pll_cache system ; s#matrox_pll_cache video ; } cache ; struct { struct { unsigned int video ; unsigned int system ; } pll ; struct { t#u_int32_t opt ; t#u_int32_t opt2 ; t#u_int32_t opt3 ; t#u_int32_t mctlwtst ; t#u_int32_t mctlwtst_core ; t#u_int32_t memmisc ; t#u_int32_t memrdbk ; t#u_int32_t maccess ; } reg ; struct { unsigned int ddr : 1 , emrswen : 1 , dll : 1 ; } memory ; } values ; t#u_int32_t cmap [ 16 ] ; } 
matroxfb_g450_setclk int matroxfb_g450_setclk ( s#matrox_fb_info * , unsigned int , unsigned int ) 
g450_mnp2f unsigned int g450_mnp2f ( const s#matrox_fb_info * , unsigned int ) 
matroxfb_g450_setpll_cond void matroxfb_g450_setpll_cond ( s#matrox_fb_info * , unsigned int , unsigned int ) 

/* drivers/video/matrox/matroxfb_DAC1064.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##splash_data
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##matroxfb_dh_fb_info
matrox_mystique extern s#matrox_switch matrox_mystique 
matrox_G100 extern s#matrox_switch matrox_G100 
DAC1064_global_init void DAC1064_global_init ( s#matrox_fb_info * ) 
DAC1064_global_restore void DAC1064_global_restore ( s#matrox_fb_info * ) 

/* drivers/video/matrox/matroxfb_Ti3026.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##splash_data
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##matroxfb_dh_fb_info
matrox_millennium extern s#matrox_switch matrox_millennium 

/* drivers/video/matrox/matroxfb_accel.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##splash_data
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##matroxfb_dh_fb_info
s##v4l2_queryctrl
s##v4l2_control
matrox_cfbX_init void matrox_cfbX_init ( s#matrox_fb_info * ) 

/* drivers/video/matrox/matroxfb_base.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##splash_data
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s#matroxfb_dh_fb_info struct matroxfb_dh_fb_info { s#fb_info fbcon ; int fbcon_registered ; int initialized ; s#matrox_fb_info * primary_dev ; struct { unsigned long base ; t#vaddr_t vbase ; unsigned int len ; unsigned int len_usable ; unsigned int len_maximum ; unsigned int offbase ; unsigned int borrowed ; } video ; struct { unsigned long base ; t#vaddr_t vbase ; unsigned int len ; } mmio ; unsigned int interlaced : 1 ; t#u_int32_t cmap [ 16 ] ; } 
matroxfb_register_driver int matroxfb_register_driver ( s#matroxfb_driver * ) 
matroxfb_unregister_driver void matroxfb_unregister_driver ( s#matroxfb_driver * ) 
matroxfb_wait_for_sync extern int matroxfb_wait_for_sync ( s#matrox_fb_info * , t#u_int32_t ) 
matroxfb_enable_irq extern int matroxfb_enable_irq ( s#matrox_fb_info * , int ) 

/* drivers/video/matrox/matroxfb_g450.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##splash_data
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##matroxfb_dh_fb_info
matroxfb_g450_connect void matroxfb_g450_connect ( s#matrox_fb_info * ) 
matroxfb_g450_shutdown void matroxfb_g450_shutdown ( s#matrox_fb_info * ) 

/* drivers/video/matrox/matroxfb_misc.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##splash_data
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##matroxfb_dh_fb_info
matroxfb_DAC_in extern int matroxfb_DAC_in ( const s#matrox_fb_info * , int ) 
matroxfb_DAC_out extern void matroxfb_DAC_out ( const s#matrox_fb_info * , int , int ) 
matroxfb_var2my extern void matroxfb_var2my ( s#fb_var_screeninfo * , s#my_timming * ) 
matroxfb_PLL_calcclock int matroxfb_PLL_calcclock ( const s#matrox_pll_features * , unsigned int , unsigned int , unsigned int * , unsigned int * , unsigned int * ) 
matroxfb_vgaHWinit int matroxfb_vgaHWinit ( s#matrox_fb_info * , s#my_timming * ) 
matroxfb_vgaHWrestore void matroxfb_vgaHWrestore ( s#matrox_fb_info * ) 
matroxfb_read_pins void matroxfb_read_pins ( s#matrox_fb_info * ) 

/* drivers/video/modedb.o */
fb_mode_option extern const char * fb_mode_option 
vesa_modes extern const s#fb_videomode vesa_modes [ ] 
fb_destroy_modelist extern void fb_destroy_modelist ( s#list_head * ) 
fb_find_best_display extern const s#fb_videomode * fb_find_best_display ( const s#fb_monspecs * , s#list_head * ) 
fb_videomode_to_var extern void fb_videomode_to_var ( s#fb_var_screeninfo * , const s#fb_videomode * ) 
fb_var_to_videomode extern void fb_var_to_videomode ( s#fb_videomode * , const s#fb_var_screeninfo * ) 
fb_mode_is_equal extern int fb_mode_is_equal ( const s#fb_videomode * , const s#fb_videomode * ) 
fb_add_videomode extern int fb_add_videomode ( const s#fb_videomode * , s#list_head * ) 
fb_match_mode extern const s#fb_videomode * fb_match_mode ( const s#fb_var_screeninfo * , s#list_head * ) 
fb_find_best_mode extern const s#fb_videomode * fb_find_best_mode ( const s#fb_var_screeninfo * , s#list_head * ) 
fb_find_nearest_mode extern const s#fb_videomode * fb_find_nearest_mode ( const s#fb_videomode * , s#list_head * ) 
fb_videomode_to_modelist extern void fb_videomode_to_modelist ( const s#fb_videomode * , int , s#list_head * ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##splash_data
fb_find_mode extern int fb_find_mode ( s#fb_var_screeninfo * , s#fb_info * , const char * , const s#fb_videomode * , unsigned int , const s#fb_videomode * , unsigned int ) 

/* drivers/video/output.o */
s#output_properties struct output_properties { int ( * set_state ) ( s#output_device * ) ; int ( * get_status ) ( s#output_device * ) ; } 
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#output_device struct output_device { int request_state ; s#output_properties * props ; s#device dev ; } 
video_output_register s#output_device * video_output_register ( const char * , s#device * , void * , s#output_properties * ) 
video_output_unregister void video_output_unregister ( s#output_device * ) 

/* drivers/video/sis/sis_main.o */
s#sis_memreq struct sis_memreq { t#__u32 offset ; t#__u32 size ; } 
sis_malloc extern void sis_malloc ( s#sis_memreq * ) 
sis_free extern void sis_free ( t#u32 ) 
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
sis_malloc_new extern void sis_malloc_new ( s#pci_dev * , s#sis_memreq * ) 
sis_free_new extern void sis_free_new ( s#pci_dev * , t#u32 ) 

/* drivers/video/svgalib.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##splash_data
svga_get_caps void svga_get_caps ( s#fb_info * , s#fb_blit_caps * , s#fb_var_screeninfo * ) 
s#vga_regset struct vga_regset { t#u8 regnum ; t#u8 lowbit ; t#u8 highbit ; } 
svga_wcrt_multi void svga_wcrt_multi ( const s#vga_regset * , t#u32 ) 
svga_wseq_multi void svga_wseq_multi ( const s#vga_regset * , t#u32 ) 
svga_set_default_gfx_regs void svga_set_default_gfx_regs ( void ) 
svga_set_default_atc_regs void svga_set_default_atc_regs ( void ) 
svga_set_default_seq_regs void svga_set_default_seq_regs ( void ) 
svga_set_default_crt_regs void svga_set_default_crt_regs ( void ) 
svga_set_textmode_vga_regs void svga_set_textmode_vga_regs ( void ) 
svga_settile void svga_settile ( s#fb_info * , s#fb_tilemap * ) 
svga_tilecopy void svga_tilecopy ( s#fb_info * , s#fb_tilearea * ) 
svga_tilefill void svga_tilefill ( s#fb_info * , s#fb_tilerect * ) 
svga_tileblit void svga_tileblit ( s#fb_info * , s#fb_tileblit * ) 
svga_tilecursor void svga_tilecursor ( s#fb_info * , s#fb_tilecursor * ) 
svga_get_tilemax int svga_get_tilemax ( s#fb_info * ) 
s#svga_pll struct svga_pll { t#u16 m_min ; t#u16 m_max ; t#u16 n_min ; t#u16 n_max ; t#u16 r_min ; t#u16 r_max ; t#u32 f_vco_min ; t#u32 f_vco_max ; t#u32 f_base ; } 
svga_compute_pll int svga_compute_pll ( const s#svga_pll * , t#u32 , t#u16 * , t#u16 * , t#u16 * , int ) 
s#svga_timing_regs struct svga_timing_regs { const s#vga_regset * h_total_regs ; const s#vga_regset * h_display_regs ; const s#vga_regset * h_blank_start_regs ; const s#vga_regset * h_blank_end_regs ; const s#vga_regset * h_sync_start_regs ; const s#vga_regset * h_sync_end_regs ; const s#vga_regset * v_total_regs ; const s#vga_regset * v_display_regs ; const s#vga_regset * v_blank_start_regs ; const s#vga_regset * v_blank_end_regs ; const s#vga_regset * v_sync_start_regs ; const s#vga_regset * v_sync_end_regs ; } 
svga_check_timings int svga_check_timings ( const s#svga_timing_regs * , s#fb_var_screeninfo * , int ) 
svga_set_timings void svga_set_timings ( const s#svga_timing_regs * , s#fb_var_screeninfo * , t#u32 , t#u32 , t#u32 , t#u32 , t#u32 , int ) 
s#svga_fb_format struct svga_fb_format { t#u32 bits_per_pixel ; s#fb_bitfield red ; s#fb_bitfield green ; s#fb_bitfield blue ; s#fb_bitfield transp ; t#u32 nonstd ; t#u32 type ; t#u32 type_aux ; t#u32 visual ; t#u32 xpanstep ; t#u32 xresstep ; } 
svga_match_format int svga_match_format ( const s#svga_fb_format * , s#fb_var_screeninfo * , s#fb_fix_screeninfo * ) 

/* drivers/video/syscopyarea.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##splash_data
sys_copyarea extern void sys_copyarea ( s#fb_info * , const s#fb_copyarea * ) 

/* drivers/video/sysfillrect.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##splash_data
sys_fillrect extern void sys_fillrect ( s#fb_info * , const s#fb_fillrect * ) 

/* drivers/video/sysimgblt.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##splash_data
sys_imageblit extern void sys_imageblit ( s#fb_info * , const s#fb_image * ) 

/* drivers/video/vermilion/vermilion.o */
s#vml_sys struct vml_sys { char * name ; int ( * save ) ( s#vml_sys * ) ; int ( * restore ) ( s#vml_sys * ) ; int ( * set_clock ) ( s#vml_sys * , int ) ; int ( * nearest_clock ) ( const s#vml_sys * , int ) ; } 
vmlfb_register_subsys extern int vmlfb_register_subsys ( s#vml_sys * ) 
vmlfb_unregister_subsys extern void vmlfb_unregister_subsys ( s#vml_sys * ) 

/* drivers/video/vgastate.o */
s#vgastate struct vgastate { void * vgabase ; unsigned long membase ; t#__u32 memsize ; t#__u32 flags ; t#__u32 depth ; t#__u32 num_attr ; t#__u32 num_crtc ; t#__u32 num_gfx ; t#__u32 num_seq ; void * vidstate ; } 
save_vga extern int save_vga ( s#vgastate * ) 
restore_vga extern int restore_vga ( s#vgastate * ) 

/* drivers/virtio/virtio.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#virtio_device_id struct virtio_device_id { t#__u32 device ; t#__u32 vendor ; } 
s#virtqueue_ops struct virtqueue_ops { int ( * add_buf ) ( s#virtqueue * , s#scatterlist [ ] , unsigned int , unsigned int , void * ) ; void ( * kick ) ( s#virtqueue * ) ; void * ( * get_buf ) ( s#virtqueue * , unsigned int * ) ; void ( * disable_cb ) ( s#virtqueue * ) ; t#bool ( * enable_cb ) ( s#virtqueue * ) ; } 
s#virtqueue struct virtqueue { s#list_head list ; void ( * callback ) ( s#virtqueue * ) ; const char * name ; s#virtio_device * vdev ; s#virtqueue_ops * vq_ops ; void * priv ; } 
t#vq_callback_t typedef void vq_callback_t ( s#virtqueue * ) 
s#virtio_config_ops struct virtio_config_ops { void ( * get ) ( s#virtio_device * , unsigned , void * , unsigned ) ; void ( * set ) ( s#virtio_device * , unsigned , const void * , unsigned ) ; t#u8 ( * get_status ) ( s#virtio_device * ) ; void ( * set_status ) ( s#virtio_device * , t#u8 ) ; void ( * reset ) ( s#virtio_device * ) ; int ( * find_vqs ) ( s#virtio_device * , unsigned , s#virtqueue * [ ] , t#vq_callback_t * [ ] , const char * [ ] ) ; void ( * del_vqs ) ( s#virtio_device * ) ; t#u32 ( * get_features ) ( s#virtio_device * ) ; void ( * finalize_features ) ( s#virtio_device * ) ; } 
s#virtio_device struct virtio_device { int index ; s#device dev ; s#virtio_device_id id ; s#virtio_config_ops * config ; s#list_head vqs ; unsigned long features [ 1 ] ; void * priv ; } 
virtio_check_driver_offered_feature void virtio_check_driver_offered_feature ( const s#virtio_device * , unsigned int ) 
s#virtio_driver struct virtio_driver { s#device_driver driver ; const s#virtio_device_id * id_table ; const unsigned int * feature_table ; unsigned int feature_table_size ; int ( * probe ) ( s#virtio_device * ) ; void ( * remove ) ( s#virtio_device * ) ; void ( * config_changed ) ( s#virtio_device * ) ; } 
register_virtio_driver int register_virtio_driver ( s#virtio_driver * ) 
unregister_virtio_driver void unregister_virtio_driver ( s#virtio_driver * ) 
register_virtio_device int register_virtio_device ( s#virtio_device * ) 
unregister_virtio_device void unregister_virtio_device ( s#virtio_device * ) 

/* drivers/virtio/virtio_ring.o */
vring_interrupt t#irqreturn_t vring_interrupt ( int , void * ) 
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
vring_new_virtqueue s#virtqueue * vring_new_virtqueue ( unsigned int , unsigned int , s#virtio_device * , void * , void ( * ) ( s#virtqueue * ) , void ( * ) ( s#virtqueue * ) , const char * ) 
vring_del_virtqueue void vring_del_virtqueue ( s#virtqueue * ) 
vring_transport_features void vring_transport_features ( s#virtio_device * ) 

/* drivers/w1/slaves/w1_bq27000.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
w1_bq27000_write void w1_bq27000_write ( s#device * , t#u8 , t#u8 ) 
w1_bq27000_read int w1_bq27000_read ( s#device * , t#u8 ) 

/* drivers/w1/slaves/w1_ds2760.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
w1_ds2760_read extern int w1_ds2760_read ( s#device * , char * , int , t#size_t ) 
w1_ds2760_write extern int w1_ds2760_write ( s#device * , char * , int , t#size_t ) 
w1_ds2760_store_eeprom extern int w1_ds2760_store_eeprom ( s#device * , int ) 
w1_ds2760_recall_eeprom extern int w1_ds2760_recall_eeprom ( s#device * , int ) 

/* drivers/w1/w1_family.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s#w1_reg_num struct w1_reg_num { t#__u64 family : 8 , id : 48 , crc : 8 ; } 
s##device_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##bus_type_private
s##driver_private
t#w1_slave_found_callback typedef void ( * w1_slave_found_callback ) ( s#w1_master * , t#u64 ) 
s#w1_bus_master struct w1_bus_master { void * data ; t#u8 ( * read_bit ) ( void * ) ; void ( * write_bit ) ( void * , t#u8 ) ; t#u8 ( * touch_bit ) ( void * , t#u8 ) ; t#u8 ( * read_byte ) ( void * ) ; void ( * write_byte ) ( void * , t#u8 ) ; t#u8 ( * read_block ) ( void * , t#u8 * , int ) ; void ( * write_block ) ( void * , const t#u8 * , int ) ; t#u8 ( * triplet ) ( void * , t#u8 ) ; t#u8 ( * reset_bus ) ( void * ) ; t#u8 ( * set_pullup ) ( void * , int ) ; void ( * search ) ( void * , s#w1_master * , t#u8 , t#w1_slave_found_callback ) ; } 
s#w1_master struct w1_master { s#list_head w1_master_entry ; s#module * owner ; unsigned char name [ 32 ] ; s#list_head slist ; int max_slave_count , slave_count ; unsigned long attempts ; int slave_ttl ; int initialized ; t#u32 id ; int search_count ; t#atomic_t refcnt ; void * priv ; int priv_size ; int enable_pullup ; int pullup_duration ; s#task_struct * thread ; s#mutex mutex ; s#device_driver * driver ; s#device dev ; s#w1_bus_master * bus_master ; t#u32 seq ; } 
s#w1_slave struct w1_slave { s#module * owner ; unsigned char name [ 32 ] ; s#list_head w1_slave_entry ; s#w1_reg_num reg_num ; t#atomic_t refcnt ; t#u8 rom [ 9 ] ; t#u32 flags ; int ttl ; s#w1_master * master ; s#w1_family * family ; void * family_data ; s#device dev ; s#completion released ; } 
s#w1_family_ops struct w1_family_ops { int ( * add_slave ) ( s#w1_slave * ) ; void ( * remove_slave ) ( s#w1_slave * ) ; } 
s#w1_family struct w1_family { s#list_head family_entry ; t#u8 fid ; s#w1_family_ops * fops ; t#atomic_t refcnt ; } 
w1_unregister_family void w1_unregister_family ( s#w1_family * ) 
w1_register_family int w1_register_family ( s#w1_family * ) 

/* drivers/w1/w1_int.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##dma_coherent_mem
s##class_private
s##bus_type_private
s##driver_private
w1_add_master_device int w1_add_master_device ( s#w1_bus_master * ) 
w1_remove_master_device void w1_remove_master_device ( s#w1_bus_master * ) 

/* drivers/w1/w1_io.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##map_segment
s##compat_timespec
s##pollfd
s##device_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##bus_type_private
s##driver_private
w1_write_8 void w1_write_8 ( s#w1_master * , t#u8 ) 
w1_read_8 t#u8 w1_read_8 ( s#w1_master * ) 
w1_write_block void w1_write_block ( s#w1_master * , const t#u8 * , int ) 
w1_touch_block void w1_touch_block ( s#w1_master * , t#u8 * , int ) 
w1_read_block t#u8 w1_read_block ( s#w1_master * , t#u8 * , int ) 
w1_reset_bus int w1_reset_bus ( s#w1_master * ) 
w1_calc_crc8 t#u8 w1_calc_crc8 ( t#u8 * , int ) 
w1_reset_select_slave int w1_reset_select_slave ( s#w1_slave * ) 
w1_next_pullup void w1_next_pullup ( s#w1_master * , int ) 

/* drivers/watchdog/iTCO_vendor_support.o */
iTCO_vendor_pre_start extern void iTCO_vendor_pre_start ( unsigned long , unsigned int ) 
iTCO_vendor_pre_stop extern void iTCO_vendor_pre_stop ( unsigned long ) 
iTCO_vendor_pre_keepalive extern void iTCO_vendor_pre_keepalive ( unsigned long , unsigned int ) 
iTCO_vendor_pre_set_heartbeat extern void iTCO_vendor_pre_set_heartbeat ( unsigned int ) 
iTCO_vendor_check_noreboot_on extern int iTCO_vendor_check_noreboot_on ( void ) 

/* fs/aio.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
wait_on_sync_kiocb extern t#ssize_t wait_on_sync_kiocb ( s#kiocb * ) 
aio_put_req extern int aio_put_req ( s#kiocb * ) 
kick_iocb extern void kick_iocb ( s#kiocb * ) 
aio_complete extern int aio_complete ( s#kiocb * , long , long ) 

/* fs/anon_inodes.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##nlm_lockowner
s##nfs4_lock_state
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##mnt_namespace
anon_inode_getfile s#file * anon_inode_getfile ( const char * , const s#file_operations * , void * , int ) 
anon_inode_getfd int anon_inode_getfd ( const char * , const s#file_operations * , void * , int ) 

/* fs/attr.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
inode_change_ok extern int inode_change_ok ( const s#inode * , s#iattr * ) 
inode_newsize_ok extern int inode_newsize_ok ( const s#inode * , t#loff_t ) 
inode_setattr extern int __attribute__ ( ( warn_unused_result ) ) inode_setattr ( s#inode * , s#iattr * ) 
notify_change extern int notify_change ( s#dentry * , s#iattr * ) 

/* fs/bad_inode.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##vfsmount
s##kiocb
s##iovec
s##vm_area_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##page
s##pipe_inode_info
s##cred
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
make_bad_inode extern void make_bad_inode ( s#inode * ) 
is_bad_inode extern int is_bad_inode ( s#inode * ) 
iget_failed extern void iget_failed ( s#inode * ) 

/* fs/bio.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
bio_free extern void bio_free ( s#bio * , s#bio_set * ) 
bio_init extern void bio_init ( s#bio * ) 
bio_alloc_bioset extern s#bio * bio_alloc_bioset ( t#gfp_t , int , s#bio_set * ) 
bio_alloc extern s#bio * bio_alloc ( t#gfp_t , int ) 
bio_kmalloc extern s#bio * bio_kmalloc ( t#gfp_t , int ) 
zero_fill_bio void zero_fill_bio ( s#bio * ) 
bio_put extern void bio_put ( s#bio * ) 
bio_phys_segments extern int bio_phys_segments ( s#request_queue * , s#bio * ) 
__bio_clone extern void __bio_clone ( s#bio * , s#bio * ) 
bio_clone extern s#bio * bio_clone ( s#bio * , t#gfp_t ) 
bio_get_nr_vecs extern int bio_get_nr_vecs ( s#block_device * ) 
bio_add_pc_page extern int bio_add_pc_page ( s#request_queue * , s#bio * , s#page * , unsigned int , unsigned int ) 
bio_add_page extern int bio_add_page ( s#bio * , s#page * , unsigned int , unsigned int ) 
bio_uncopy_user extern int bio_uncopy_user ( s#bio * ) 
bio_copy_user extern s#bio * bio_copy_user ( s#request_queue * , s#rq_map_data * , unsigned long , unsigned int , int , t#gfp_t ) 
bio_map_user extern s#bio * bio_map_user ( s#request_queue * , s#block_device * , unsigned long , unsigned int , int , t#gfp_t ) 
bio_unmap_user extern void bio_unmap_user ( s#bio * ) 
bio_map_kern extern s#bio * bio_map_kern ( s#request_queue * , void * , unsigned int , t#gfp_t ) 
bio_copy_kern extern s#bio * bio_copy_kern ( s#request_queue * , void * , unsigned int , t#gfp_t , int ) 
bio_endio extern void bio_endio ( s#bio * , int ) 
s#bio_pair struct bio_pair { s#bio bio1 , bio2 ; s#bio_vec bv1 , bv2 ; s#bio_integrity_payload bip1 , bip2 ; s#bio_vec iv1 , iv2 ; t#atomic_t cnt ; int error ; } 
bio_pair_release extern void bio_pair_release ( s#bio_pair * ) 
bio_split extern s#bio_pair * bio_split ( s#bio * , int ) 
bio_sector_offset extern t#sector_t bio_sector_offset ( s#bio * , unsigned short , unsigned int ) 
bioset_free extern void bioset_free ( s#bio_set * ) 
bioset_create extern s#bio_set * bioset_create ( unsigned int , unsigned int ) 

/* fs/bio-integrity.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##blk_trace
s##timer_rand_state
bio_integrity_alloc_bioset extern s#bio_integrity_payload * bio_integrity_alloc_bioset ( s#bio * , t#gfp_t , unsigned int , s#bio_set * ) 
bio_integrity_alloc extern s#bio_integrity_payload * bio_integrity_alloc ( s#bio * , t#gfp_t , unsigned int ) 
bio_integrity_free extern void bio_integrity_free ( s#bio * , s#bio_set * ) 
bio_integrity_add_page extern int bio_integrity_add_page ( s#bio * , s#page * , unsigned int , unsigned int ) 
bio_integrity_enabled extern int bio_integrity_enabled ( s#bio * ) 
bio_integrity_tag_size unsigned int bio_integrity_tag_size ( s#bio * ) 
bio_integrity_set_tag extern int bio_integrity_set_tag ( s#bio * , void * , unsigned int ) 
bio_integrity_get_tag extern int bio_integrity_get_tag ( s#bio * , void * , unsigned int ) 
bio_integrity_prep extern int bio_integrity_prep ( s#bio * ) 
bio_integrity_endio extern void bio_integrity_endio ( s#bio * , int ) 
bio_integrity_advance extern void bio_integrity_advance ( s#bio * , unsigned int ) 
bio_integrity_trim extern void bio_integrity_trim ( s#bio * , unsigned int , unsigned int ) 
bio_integrity_split extern void bio_integrity_split ( s#bio * , s#bio_pair * , int ) 
bio_integrity_clone extern int bio_integrity_clone ( s#bio * , s#bio * , t#gfp_t , s#bio_set * ) 
bioset_integrity_create extern int bioset_integrity_create ( s#bio_set * , int ) 
bioset_integrity_free extern void bioset_integrity_free ( s#bio_set * ) 

/* fs/block_dev.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##mnt_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_geometry
s##blk_trace
s##timer_rand_state
I_BDEV extern s#block_device * I_BDEV ( s#inode * ) 
set_blocksize extern int set_blocksize ( s#block_device * , int ) 
sb_set_blocksize extern int sb_set_blocksize ( s#super_block * , int ) 
sb_min_blocksize extern int sb_min_blocksize ( s#super_block * , int ) 
sync_blockdev extern int sync_blockdev ( s#block_device * ) 
fsync_bdev extern int fsync_bdev ( s#block_device * ) 
freeze_bdev extern s#super_block * freeze_bdev ( s#block_device * ) 
thaw_bdev extern int thaw_bdev ( s#block_device * , s#super_block * ) 
bdget extern s#block_device * bdget ( t#dev_t ) 
bdput extern void bdput ( s#block_device * ) 
bd_claim extern int bd_claim ( s#block_device * , void * ) 
bd_release extern void bd_release ( s#block_device * ) 
bd_claim_by_disk extern int bd_claim_by_disk ( s#block_device * , void * , s#gendisk * ) 
bd_release_from_disk extern void bd_release_from_disk ( s#block_device * , s#gendisk * ) 
open_by_devnum extern s#block_device * open_by_devnum ( t#dev_t , t#fmode_t ) 
check_disk_size_change extern void check_disk_size_change ( s#gendisk * , s#block_device * ) 
revalidate_disk extern int revalidate_disk ( s#gendisk * ) 
check_disk_change extern int check_disk_change ( s#block_device * ) 
bd_set_size extern void bd_set_size ( s#block_device * , t#loff_t ) 
blkdev_get extern int blkdev_get ( s#block_device * , t#fmode_t ) 
blkdev_put extern int blkdev_put ( s#block_device * , t#fmode_t ) 
blkdev_aio_write extern t#ssize_t blkdev_aio_write ( s#kiocb * , const s#iovec * , unsigned long , t#loff_t ) 
ioctl_by_bdev extern int ioctl_by_bdev ( s#block_device * , unsigned , unsigned long ) 
lookup_bdev extern s#block_device * lookup_bdev ( const char * ) 
open_bdev_exclusive extern s#block_device * open_bdev_exclusive ( const char * , t#fmode_t , void * ) 
close_bdev_exclusive extern void close_bdev_exclusive ( s#block_device * , t#fmode_t ) 
__invalidate_device extern int __invalidate_device ( s#block_device * ) 

/* fs/buffer.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
t#bh_end_io_t typedef void ( bh_end_io_t ) ( s#buffer_head * , int ) 
s#buffer_head struct buffer_head { unsigned long b_state ; s#buffer_head * b_this_page ; s#page * b_page ; t#sector_t b_blocknr ; t#size_t b_size ; char * b_data ; s#block_device * b_bdev ; t#bh_end_io_t * b_end_io ; void * b_private ; s#list_head b_assoc_buffers ; s#address_space * b_assoc_map ; t#atomic_t b_count ; } 
init_buffer void init_buffer ( s#buffer_head * , t#bh_end_io_t * , void * ) 
__lock_buffer void __lock_buffer ( s#buffer_head * ) 
unlock_buffer void unlock_buffer ( s#buffer_head * ) 
__wait_on_buffer void __wait_on_buffer ( s#buffer_head * ) 
end_buffer_read_sync void end_buffer_read_sync ( s#buffer_head * , int ) 
end_buffer_write_sync void end_buffer_write_sync ( s#buffer_head * , int ) 
invalidate_bdev extern void invalidate_bdev ( s#block_device * ) 
end_buffer_async_write void end_buffer_async_write ( s#buffer_head * , int ) 
mark_buffer_async_write void mark_buffer_async_write ( s#buffer_head * ) 
sync_mapping_buffers int sync_mapping_buffers ( s#address_space * ) 
mark_buffer_dirty_inode void mark_buffer_dirty_inode ( s#buffer_head * , s#inode * ) 
__set_page_dirty_buffers extern int __set_page_dirty_buffers ( s#page * ) 
invalidate_inode_buffers void invalidate_inode_buffers ( s#inode * ) 
alloc_page_buffers s#buffer_head * alloc_page_buffers ( s#page * , unsigned long , int ) 
mark_buffer_dirty void mark_buffer_dirty ( s#buffer_head * ) 
__brelse void __brelse ( s#buffer_head * ) 
__bforget void __bforget ( s#buffer_head * ) 
__find_get_block s#buffer_head * __find_get_block ( s#block_device * , t#sector_t , unsigned ) 
__getblk s#buffer_head * __getblk ( s#block_device * , t#sector_t , unsigned ) 
__breadahead void __breadahead ( s#block_device * , t#sector_t , unsigned int ) 
__bread s#buffer_head * __bread ( s#block_device * , t#sector_t , unsigned ) 
invalidate_bh_lrus void invalidate_bh_lrus ( void ) 
set_bh_page void set_bh_page ( s#buffer_head * , s#page * , unsigned long ) 
block_invalidatepage void block_invalidatepage ( s#page * , unsigned long ) 
create_empty_buffers void create_empty_buffers ( s#page * , unsigned long , unsigned long ) 
unmap_underlying_metadata void unmap_underlying_metadata ( s#block_device * , t#sector_t ) 
page_zero_new_buffers void page_zero_new_buffers ( s#page * , unsigned , unsigned ) 
t#get_block_t typedef int ( get_block_t ) ( s#inode * , t#sector_t , s#buffer_head * , int ) 
block_write_begin int block_write_begin ( s#file * , s#address_space * , t#loff_t , unsigned , unsigned , s#page * * , void * * , t#get_block_t * ) 
block_write_end int block_write_end ( s#file * , s#address_space * , t#loff_t , unsigned , unsigned , s#page * , void * ) 
generic_write_end int generic_write_end ( s#file * , s#address_space * , t#loff_t , unsigned , unsigned , s#page * , void * ) 
block_is_partially_uptodate int block_is_partially_uptodate ( s#page * , t#read_descriptor_t * , unsigned long ) 
block_read_full_page int block_read_full_page ( s#page * , t#get_block_t * ) 
generic_cont_expand_simple int generic_cont_expand_simple ( s#inode * , t#loff_t ) 
cont_write_begin int cont_write_begin ( s#file * , s#address_space * , t#loff_t , unsigned , unsigned , s#page * * , void * * , t#get_block_t * , t#loff_t * ) 
block_prepare_write int block_prepare_write ( s#page * , unsigned , unsigned , t#get_block_t * ) 
block_commit_write int block_commit_write ( s#page * , unsigned , unsigned ) 
block_page_mkwrite int block_page_mkwrite ( s#vm_area_struct * , s#vm_fault * , t#get_block_t ) 
nobh_write_begin int nobh_write_begin ( s#file * , s#address_space * , t#loff_t , unsigned , unsigned , s#page * * , void * * , t#get_block_t * ) 
nobh_write_end int nobh_write_end ( s#file * , s#address_space * , t#loff_t , unsigned , unsigned , s#page * , void * ) 
nobh_writepage int nobh_writepage ( s#page * , t#get_block_t * , s#writeback_control * ) 
nobh_truncate_page int nobh_truncate_page ( s#address_space * , t#loff_t , t#get_block_t * ) 
block_truncate_page int block_truncate_page ( s#address_space * , t#loff_t , t#get_block_t * ) 
block_write_full_page_endio int block_write_full_page_endio ( s#page * , t#get_block_t * , s#writeback_control * , t#bh_end_io_t * ) 
block_write_full_page int block_write_full_page ( s#page * , t#get_block_t * , s#writeback_control * ) 
generic_block_bmap t#sector_t generic_block_bmap ( s#address_space * , t#sector_t , t#get_block_t * ) 
submit_bh int submit_bh ( int , s#buffer_head * ) 
ll_rw_block void ll_rw_block ( int , int , s#buffer_head * [ ] ) 
sync_dirty_buffer int sync_dirty_buffer ( s#buffer_head * ) 
try_to_free_buffers int try_to_free_buffers ( s#page * ) 
block_sync_page void block_sync_page ( s#page * ) 
alloc_buffer_head s#buffer_head * alloc_buffer_head ( t#gfp_t ) 
free_buffer_head void free_buffer_head ( s#buffer_head * ) 
bh_uptodate_or_lock int bh_uptodate_or_lock ( s#buffer_head * ) 
bh_submit_read int bh_submit_read ( s#buffer_head * ) 

/* fs/char_dev.o */
register_chrdev_region extern int register_chrdev_region ( t#dev_t , unsigned , const char * ) 
unregister_chrdev_region extern void unregister_chrdev_region ( t#dev_t , unsigned ) 
alloc_chrdev_region extern int alloc_chrdev_region ( t#dev_t * , unsigned , unsigned , const char * ) 
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##device
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
cdev_init void cdev_init ( s#cdev * , const s#file_operations * ) 
cdev_alloc s#cdev * cdev_alloc ( void ) 
cdev_del void cdev_del ( s#cdev * ) 
cdev_add int cdev_add ( s#cdev * , t#dev_t , unsigned ) 
cdev_index int cdev_index ( s#inode * ) 
__register_chrdev extern int __register_chrdev ( unsigned int , unsigned int , unsigned int , const char * , const s#file_operations * ) 
__unregister_chrdev extern void __unregister_chrdev ( unsigned int , unsigned int , unsigned int , const char * ) 
directly_mappable_cdev_bdi extern s#backing_dev_info directly_mappable_cdev_bdi 

/* fs/configfs/dir.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s#configfs_attribute struct configfs_attribute { const char * ca_name ; s#module * ca_owner ; t#mode_t ca_mode ; } 
s#configfs_item_operations struct configfs_item_operations { void ( * release ) ( s#config_item * ) ; t#ssize_t ( * show_attribute ) ( s#config_item * , s#configfs_attribute * , char * ) ; t#ssize_t ( * store_attribute ) ( s#config_item * , s#configfs_attribute * , const char * , t#size_t ) ; int ( * allow_link ) ( s#config_item * , s#config_item * ) ; int ( * drop_link ) ( s#config_item * , s#config_item * ) ; } 
s#configfs_group_operations struct configfs_group_operations { s#config_item * ( * make_item ) ( s#config_group * , const char * ) ; s#config_group * ( * make_group ) ( s#config_group * , const char * ) ; int ( * commit_item ) ( s#config_item * ) ; void ( * disconnect_notify ) ( s#config_group * , s#config_item * ) ; void ( * drop_item ) ( s#config_group * , s#config_item * ) ; } 
s#config_item_type struct config_item_type { s#module * ct_owner ; s#configfs_item_operations * ct_item_ops ; s#configfs_group_operations * ct_group_ops ; s#configfs_attribute * * ct_attrs ; } 
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##kstatfs
s##seq_file
s##page
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##mnt_namespace
s##kiocb
s##iovec
s##poll_table_struct
s##vm_area_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##radix_tree_node
s##writeback_control
s##cdev
s##posix_acl
s#config_item struct config_item { char * ci_name ; char ci_namebuf [ 20 ] ; s#kref ci_kref ; s#list_head ci_entry ; s#config_item * ci_parent ; s#config_group * ci_group ; s#config_item_type * ci_type ; s#dentry * ci_dentry ; } 
s#config_group struct config_group { s#config_item cg_item ; s#list_head cg_children ; s#configfs_subsystem * cg_subsys ; s#config_group * * default_groups ; } 
s#configfs_subsystem struct configfs_subsystem { s#config_group su_group ; s#mutex su_mutex ; } 
configfs_depend_item int configfs_depend_item ( s#configfs_subsystem * , s#config_item * ) 
configfs_undepend_item void configfs_undepend_item ( s#configfs_subsystem * , s#config_item * ) 
configfs_register_subsystem int configfs_register_subsystem ( s#configfs_subsystem * ) 
configfs_unregister_subsystem void configfs_unregister_subsystem ( s#configfs_subsystem * ) 

/* fs/configfs/item.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##dentry
config_item_set_name extern int config_item_set_name ( s#config_item * , const char * , ... ) 
config_item_init_type_name extern void config_item_init_type_name ( s#config_item * , const char * , s#config_item_type * ) 
config_group_init_type_name extern void config_group_init_type_name ( s#config_group * , const char * , s#config_item_type * ) 
config_item_init extern void config_item_init ( s#config_item * ) 
config_group_init extern void config_group_init ( s#config_group * ) 
config_item_get extern s#config_item * config_item_get ( s#config_item * ) 
config_item_put extern void config_item_put ( s#config_item * ) 
config_group_find_item extern s#config_item * config_group_find_item ( s#config_group * , const char * ) 

/* fs/dcache.o */
sysctl_vfs_cache_pressure extern int sysctl_vfs_cache_pressure 
dcache_lock extern t#spinlock_t dcache_lock 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##mnt_namespace
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s#fs_struct struct fs_struct { int users ; t#rwlock_t lock ; int umask ; int in_exec ; s#path root , pwd ; } 
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##cdev
s##posix_acl
d_instantiate_unique extern s#dentry * d_instantiate_unique ( s#dentry * , s#inode * ) 
d_obtain_alias extern s#dentry * d_obtain_alias ( s#inode * ) 
d_genocide extern void d_genocide ( s#dentry * ) 
d_alloc extern s#dentry * d_alloc ( s#dentry * , const s#qstr * ) 
d_alloc_root extern s#dentry * d_alloc_root ( s#inode * ) 
d_delete extern void d_delete ( s#dentry * ) 
d_find_alias extern s#dentry * d_find_alias ( s#inode * ) 
d_instantiate extern void d_instantiate ( s#dentry * , s#inode * ) 
d_invalidate extern int d_invalidate ( s#dentry * ) 
d_lookup extern s#dentry * d_lookup ( s#dentry * , s#qstr * ) 
d_move extern void d_move ( s#dentry * , s#dentry * ) 
d_materialise_unique extern s#dentry * d_materialise_unique ( s#dentry * , s#inode * ) 
d_path extern char * d_path ( const s#path * , char * , int ) 
d_prune_aliases extern void d_prune_aliases ( s#inode * ) 
d_rehash extern void d_rehash ( s#dentry * ) 
d_splice_alias extern s#dentry * d_splice_alias ( s#inode * , s#dentry * ) 
d_add_ci extern s#dentry * d_add_ci ( s#dentry * , s#inode * , s#qstr * ) 
d_validate extern int d_validate ( s#dentry * , s#dentry * ) 
dget_locked extern s#dentry * dget_locked ( s#dentry * ) 
dput extern void dput ( s#dentry * ) 
t#__kernel_ino_t typedef unsigned long __kernel_ino_t 
t#ino_t typedef t#__kernel_ino_t ino_t 
find_inode_number extern t#ino_t find_inode_number ( s#dentry * , s#qstr * ) 
have_submounts extern int have_submounts ( s#dentry * ) 
names_cachep extern s#kmem_cache * names_cachep 
shrink_dcache_parent extern void shrink_dcache_parent ( s#dentry * ) 
shrink_dcache_sb extern void shrink_dcache_sb ( s#super_block * ) 

/* fs/dcookies.o */
s#dcookie_user struct dcookie_user { s#list_head next ; } 
dcookie_register s#dcookie_user * dcookie_register ( void ) 
dcookie_unregister void dcookie_unregister ( s#dcookie_user * ) 
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##compat_timespec
s##pollfd
s##nameidata
s##kiocb
s##iovec
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##mnt_namespace
get_dcookie int get_dcookie ( s#path * , unsigned long * ) 

/* fs/debugfs/file.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
debugfs_create_u8 s#dentry * debugfs_create_u8 ( const char * , t#mode_t , s#dentry * , t#u8 * ) 
debugfs_create_u16 s#dentry * debugfs_create_u16 ( const char * , t#mode_t , s#dentry * , t#u16 * ) 
debugfs_create_u32 s#dentry * debugfs_create_u32 ( const char * , t#mode_t , s#dentry * , t#u32 * ) 
debugfs_create_u64 s#dentry * debugfs_create_u64 ( const char * , t#mode_t , s#dentry * , t#u64 * ) 
debugfs_create_x8 s#dentry * debugfs_create_x8 ( const char * , t#mode_t , s#dentry * , t#u8 * ) 
debugfs_create_x16 s#dentry * debugfs_create_x16 ( const char * , t#mode_t , s#dentry * , t#u16 * ) 
debugfs_create_x32 s#dentry * debugfs_create_x32 ( const char * , t#mode_t , s#dentry * , t#u32 * ) 
debugfs_create_size_t s#dentry * debugfs_create_size_t ( const char * , t#mode_t , s#dentry * , t#size_t * ) 
debugfs_create_bool s#dentry * debugfs_create_bool ( const char * , t#mode_t , s#dentry * , t#u32 * ) 
s#debugfs_blob_wrapper struct debugfs_blob_wrapper { void * data ; unsigned long size ; } 
debugfs_create_blob s#dentry * debugfs_create_blob ( const char * , t#mode_t , s#dentry * , s#debugfs_blob_wrapper * ) 

/* fs/debugfs/inode.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##mnt_namespace
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
debugfs_create_file s#dentry * debugfs_create_file ( const char * , t#mode_t , s#dentry * , void * , const s#file_operations * ) 
debugfs_create_dir s#dentry * debugfs_create_dir ( const char * , s#dentry * ) 
debugfs_create_symlink s#dentry * debugfs_create_symlink ( const char * , s#dentry * , const char * ) 
debugfs_remove void debugfs_remove ( s#dentry * ) 
debugfs_remove_recursive void debugfs_remove_recursive ( s#dentry * ) 
debugfs_rename s#dentry * debugfs_rename ( s#dentry * , s#dentry * , s#dentry * , const char * ) 
debugfs_initialized t#bool debugfs_initialized ( void ) 

/* fs/direct-io.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_geometry
s##blk_trace
s##timer_rand_state
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##poll_table_struct
s##nlm_lockowner
s##nfs4_lock_state
s##cdev
s##posix_acl
s##eventfd_ctx
t#dio_iodone_t typedef void ( dio_iodone_t ) ( s#kiocb * , t#loff_t , t#ssize_t , void * ) 
__blockdev_direct_IO t#ssize_t __blockdev_direct_IO ( int , s#kiocb * , s#inode * , s#block_device * , const s#iovec * , t#loff_t , unsigned long , t#get_block_t , t#dio_iodone_t , int ) 

/* fs/dlm/main.o */
t#dlm_lockspace_t typedef void dlm_lockspace_t 
dlm_new_lockspace int dlm_new_lockspace ( const char * , int , t#dlm_lockspace_t * * , t#uint32_t , int ) 
dlm_release_lockspace int dlm_release_lockspace ( t#dlm_lockspace_t * , int ) 
s#dlm_lksb struct dlm_lksb { int sb_status ; t#__u32 sb_lkid ; char sb_flags ; char * sb_lvbptr ; } 
dlm_lock int dlm_lock ( t#dlm_lockspace_t * , int , s#dlm_lksb * , t#uint32_t , void * , unsigned int , t#uint32_t , void ( * ) ( void * ) , void * , void ( * ) ( void * , int ) ) 
dlm_unlock int dlm_unlock ( t#dlm_lockspace_t * , t#uint32_t , t#uint32_t , s#dlm_lksb * , void * ) 

/* fs/dlm/plock.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##nlm_lockowner
s##nfs4_lock_state
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
dlm_posix_lock int dlm_posix_lock ( t#dlm_lockspace_t * , t#u64 , s#file * , int , s#file_lock * ) 
dlm_posix_unlock int dlm_posix_unlock ( t#dlm_lockspace_t * , t#u64 , s#file * , s#file_lock * ) 
dlm_posix_get int dlm_posix_get ( t#dlm_lockspace_t * , t#u64 , s#file * , s#file_lock * ) 

/* fs/dmapi/dmapi_sysent.o */
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##hd_struct
s##gendisk
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##mtd_info
t#dm_right_t typedef enum { DM_RIGHT_NULL , DM_RIGHT_SHARED , DM_RIGHT_EXCL } dm_right_t 
dm_send_mount_event int dm_send_mount_event ( s#super_block * , t#dm_right_t , s#inode * , t#dm_right_t , s#inode * , t#dm_right_t , char * , char * ) 
t#dm_eventtype_t typedef enum { DM_EVENT_INVALID = - 1 , DM_EVENT_CANCEL = 0 , DM_EVENT_MOUNT = 1 , DM_EVENT_PREUNMOUNT = 2 , DM_EVENT_UNMOUNT = 3 , DM_EVENT_DEBUT = 4 , DM_EVENT_CREATE = 5 , DM_EVENT_CLOSE = 6 , DM_EVENT_POSTCREATE = 7 , DM_EVENT_REMOVE = 8 , DM_EVENT_POSTREMOVE = 9 , DM_EVENT_RENAME = 10 , DM_EVENT_POSTRENAME = 11 , DM_EVENT_LINK = 12 , DM_EVENT_POSTLINK = 13 , DM_EVENT_SYMLINK = 14 , DM_EVENT_POSTSYMLINK = 15 , DM_EVENT_READ = 16 , DM_EVENT_WRITE = 17 , DM_EVENT_TRUNCATE = 18 , DM_EVENT_ATTRIBUTE = 19 , DM_EVENT_DESTROY = 20 , DM_EVENT_NOSPACE = 21 , DM_EVENT_USER = 22 , DM_EVENT_MAX = 23 } dm_eventtype_t 
dm_send_namesp_event int dm_send_namesp_event ( t#dm_eventtype_t , s#super_block * , s#inode * , t#dm_right_t , s#inode * , t#dm_right_t , const char * , const char * , t#mode_t , int , int ) 
dm_send_unmount_event void dm_send_unmount_event ( s#super_block * , s#inode * , t#dm_right_t , t#mode_t , int , int ) 
t#dm_off_t typedef t#__s64 dm_off_t 
dm_send_data_event int dm_send_data_event ( t#dm_eventtype_t , s#inode * , t#dm_right_t , t#dm_off_t , t#size_t , int ) 
dm_send_destroy_event int dm_send_destroy_event ( s#inode * , t#dm_right_t ) 
t#dm_fsid_t typedef t#__u64 dm_fsid_t 
s#dm_fid struct dm_fid { t#__u16 dm_fid_len ; t#__u16 dm_fid_pad ; t#__u32 dm_fid_gen ; t#__u64 dm_fid_ino ; } 
t#dm_fid_t typedef s#dm_fid dm_fid_t 
s#dm_handle struct dm_handle { union { t#__s64 align ; t#dm_fsid_t _ha_fsid ; } ha_u ; t#dm_fid_t ha_fid ; } 
t#dm_handle_t typedef s#dm_handle dm_handle_t 
dm_ip_to_handle int dm_ip_to_handle ( s#inode * , t#dm_handle_t * ) 
s#filesystem_dmapi_operations struct filesystem_dmapi_operations { int ( * get_fsys_vector ) ( s#super_block * , void * ) ; int ( * fh_to_inode ) ( s#super_block * , s#inode * * , t#dm_fid_t * ) ; int ( * inode_to_fh ) ( s#inode * , t#dm_fid_t * , t#dm_fsid_t * ) ; void ( * get_fsid ) ( s#super_block * , t#dm_fsid_t * ) ; int ( * flushing ) ( s#inode * ) ; } 
dmapi_register void dmapi_register ( s#file_system_type * , s#filesystem_dmapi_operations * ) 
dmapi_unregister void dmapi_unregister ( s#file_system_type * ) 
dmapi_registered int dmapi_registered ( s#file_system_type * , s#filesystem_dmapi_operations * * ) 
dm_release_threads int dm_release_threads ( s#super_block * , s#inode * , int ) 

/* fs/eventfd.o */
s#eventfd_ctx struct eventfd_ctx { s#kref kref ; t#wait_queue_head_t wqh ; t#__u64 count ; unsigned int flags ; } 
eventfd_signal int eventfd_signal ( s#eventfd_ctx * , int ) 
eventfd_ctx_get s#eventfd_ctx * eventfd_ctx_get ( s#eventfd_ctx * ) 
eventfd_ctx_put void eventfd_ctx_put ( s#eventfd_ctx * ) 
eventfd_ctx_remove_wait_queue int eventfd_ctx_remove_wait_queue ( s#eventfd_ctx * , t#wait_queue_t * , t#__u64 * ) 
eventfd_ctx_read t#ssize_t eventfd_ctx_read ( s#eventfd_ctx * , int , t#__u64 * ) 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##compat_timespec
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
eventfd_fget s#file * eventfd_fget ( int ) 
eventfd_ctx_fdget s#eventfd_ctx * eventfd_ctx_fdget ( int ) 
eventfd_ctx_fileget s#eventfd_ctx * eventfd_ctx_fileget ( s#file * ) 

/* fs/exec.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##mnt_namespace
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##array_cache
s##kmem_list3
s##bsd_acct_struct
s##nlm_lockowner
s##nfs4_lock_state
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##ipc_namespace
s##net
s##tty_struct
s##tty_audit_buf
s##audit_context
e#utrace_resume_action enum utrace_resume_action { UTRACE_STOP , UTRACE_INTERRUPT , UTRACE_REPORT , UTRACE_SINGLESTEP , UTRACE_BLOCKSTEP , UTRACE_RESUME , UTRACE_DETACH } 
s#utrace_engine_ops struct utrace_engine_ops { t#u32 ( * report_quiesce ) ( e#utrace_resume_action , s#utrace_engine * , s#task_struct * , unsigned long ) ; t#u32 ( * report_signal ) ( t#u32 , s#utrace_engine * , s#task_struct * , s#pt_regs * , t#siginfo_t * , const s#k_sigaction * , s#k_sigaction * ) ; t#u32 ( * report_clone ) ( e#utrace_resume_action , s#utrace_engine * , s#task_struct * , unsigned long , s#task_struct * ) ; t#u32 ( * report_jctl ) ( e#utrace_resume_action , s#utrace_engine * , s#task_struct * , int , int ) ; t#u32 ( * report_exec ) ( e#utrace_resume_action , s#utrace_engine * , s#task_struct * , const s#linux_binfmt * , const s#linux_binprm * , s#pt_regs * ) ; t#u32 ( * report_syscall_entry ) ( t#u32 , s#utrace_engine * , s#task_struct * , s#pt_regs * ) ; t#u32 ( * report_syscall_exit ) ( e#utrace_resume_action , s#utrace_engine * , s#task_struct * , s#pt_regs * ) ; t#u32 ( * report_exit ) ( e#utrace_resume_action , s#utrace_engine * , s#task_struct * , long , long * ) ; t#u32 ( * report_death ) ( s#utrace_engine * , s#task_struct * , t#bool , int ) ; void ( * report_reap ) ( s#utrace_engine * , s#task_struct * ) ; void ( * release ) ( void * ) ; } 
s#utrace_engine struct utrace_engine { s#kref kref ; void ( * release ) ( void * ) ; s#list_head entry ; const s#utrace_engine_ops * ops ; void * data ; unsigned long flags ; } 
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
__register_binfmt extern int __register_binfmt ( s#linux_binfmt * , int ) 
unregister_binfmt extern void unregister_binfmt ( s#linux_binfmt * ) 
copy_strings_kernel extern int copy_strings_kernel ( int , char * * , s#linux_binprm * ) 
setup_arg_pages extern int setup_arg_pages ( s#linux_binprm * , unsigned long , int ) 
open_exec extern s#file * open_exec ( const char * ) 
kernel_read extern int kernel_read ( s#file * , t#loff_t , char * , unsigned long ) 
flush_old_exec extern int flush_old_exec ( s#linux_binprm * ) 
setup_new_exec extern void setup_new_exec ( s#linux_binprm * ) 
install_exec_creds extern void install_exec_creds ( s#linux_binprm * ) 
prepare_binprm extern int prepare_binprm ( s#linux_binprm * ) 
remove_arg_zero extern int __attribute__ ( ( warn_unused_result ) ) remove_arg_zero ( s#linux_binprm * ) 
search_binary_handler extern int search_binary_handler ( s#linux_binprm * , s#pt_regs * ) 
set_binfmt extern void set_binfmt ( s#linux_binfmt * ) 

/* fs/exportfs/expfs.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s#fid struct fid { union { struct { t#u32 ino ; t#u32 gen ; t#u32 parent_ino ; t#u32 parent_gen ; } i32 ; struct { t#u32 block ; t#u16 partref ; t#u16 parent_partref ; t#u32 generation ; t#u32 parent_block ; t#u32 parent_generation ; } udf ; t#__u32 raw [ 0 ] ; } ; } 
s#export_operations struct export_operations { int ( * encode_fh ) ( s#dentry * , t#__u32 * , int * , int ) ; s#dentry * ( * fh_to_dentry ) ( s#super_block * , s#fid * , int , int ) ; s#dentry * ( * fh_to_parent ) ( s#super_block * , s#fid * , int , int ) ; int ( * get_name ) ( s#dentry * , char * , s#dentry * ) ; s#dentry * ( * get_parent ) ( s#dentry * ) ; } 
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##mnt_namespace
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
exportfs_encode_fh extern int exportfs_encode_fh ( s#dentry * , s#fid * , int * , int ) 
exportfs_decode_fh extern s#dentry * exportfs_decode_fh ( s#vfsmount * , s#fid * , int , int , int ( * ) ( void * , s#dentry * ) , void * ) 

/* fs/fat/dir.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s#msdos_dir_entry struct msdos_dir_entry { t#__u8 name [ 11 ] ; t#__u8 attr ; t#__u8 lcase ; t#__u8 ctime_cs ; t#__le16 ctime ; t#__le16 cdate ; t#__le16 adate ; t#__le16 starthi ; t#__le16 time , date , start ; t#__le32 size ; } 
s#fat_slot_info struct fat_slot_info { t#loff_t i_pos ; t#loff_t slot_off ; int nr_slots ; s#msdos_dir_entry * de ; s#buffer_head * bh ; } 
fat_search_long extern int fat_search_long ( s#inode * , const unsigned char * , int , s#fat_slot_info * ) 
fat_get_dotdot_entry extern int fat_get_dotdot_entry ( s#inode * , s#buffer_head * * , s#msdos_dir_entry * * , t#loff_t * ) 
fat_dir_empty extern int fat_dir_empty ( s#inode * ) 
fat_scan extern int fat_scan ( s#inode * , const unsigned char * , s#fat_slot_info * ) 
fat_remove_entries extern int fat_remove_entries ( s#inode * , s#fat_slot_info * ) 
fat_alloc_new_dir extern int fat_alloc_new_dir ( s#inode * , s#timespec * ) 
fat_add_entries extern int fat_add_entries ( s#inode * , void * , int , s#fat_slot_info * ) 

/* fs/fat/fatent.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##blk_trace
s##timer_rand_state
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
fat_free_clusters extern int fat_free_clusters ( s#inode * , int ) 

/* fs/fat/file.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##blk_trace
s##timer_rand_state
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##cdev
s##posix_acl
s##mnt_namespace
fat_getattr extern int fat_getattr ( s#vfsmount * , s#dentry * , s#kstat * ) 
fat_setattr extern int fat_setattr ( s#dentry * , s#iattr * ) 

/* fs/fat/inode.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##backing_dev_info
s##nameidata
s##mnt_namespace
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
t#__kernel_fsid_t typedef struct { int val [ 2 ] ; } __kernel_fsid_t 
s#kstatfs struct kstatfs { long f_type ; long f_bsize ; t#u64 f_blocks ; t#u64 f_bfree ; t#u64 f_bavail ; t#u64 f_files ; t#u64 f_ffree ; t#__kernel_fsid_t f_fsid ; long f_namelen ; long f_frsize ; long f_spare [ 5 ] ; } 
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
fat_attach extern void fat_attach ( s#inode * , t#loff_t ) 
fat_detach extern void fat_detach ( s#inode * ) 
fat_build_inode extern s#inode * fat_build_inode ( s#super_block * , s#msdos_dir_entry * , t#loff_t ) 
fat_sync_inode extern int fat_sync_inode ( s#inode * ) 
fat_fill_super extern int fat_fill_super ( s#super_block * , void * , int , const s#inode_operations * , int ) 
fat_flush_inodes extern int fat_flush_inodes ( s#super_block * , s#inode * , s#inode * ) 

/* fs/fat/misc.o */
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##hd_struct
s##gendisk
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##mtd_info
fat_fs_error extern void fat_fs_error ( s#super_block * , const char * , ... ) 
s#fat_mount_options struct fat_mount_options { t#uid_t fs_uid ; t#gid_t fs_gid ; unsigned short fs_fmask ; unsigned short fs_dmask ; unsigned short codepage ; char * iocharset ; unsigned short shortname ; unsigned char name_check ; unsigned char errors ; unsigned short allow_utime ; unsigned quiet : 1 , showexec : 1 , sys_immutable : 1 , dotsOK : 1 , isvfat : 1 , utf8 : 1 , unicode_xlate : 1 , numtail : 1 , flush : 1 , nocase : 1 , usefree : 1 , tz_utc : 1 , rodir : 1 ; } 
t#wchar_t typedef t#u16 wchar_t 
s#nls_table struct nls_table { const char * charset ; const char * alias ; int ( * uni2char ) ( t#wchar_t , unsigned char * , int ) ; int ( * char2uni ) ( const unsigned char * , int , t#wchar_t * ) ; const unsigned char * charset2lower ; const unsigned char * charset2upper ; s#module * owner ; s#nls_table * next ; } 
s##fatent_operations
s#msdos_sb_info struct msdos_sb_info { unsigned short sec_per_clus ; unsigned short cluster_bits ; unsigned int cluster_size ; unsigned char fats , fat_bits ; unsigned short fat_start ; unsigned long fat_length ; unsigned long dir_start ; unsigned short dir_entries ; unsigned long data_start ; unsigned long max_cluster ; unsigned long root_cluster ; unsigned long fsinfo_sector ; s#mutex fat_lock ; unsigned int prev_free ; unsigned int free_clusters ; unsigned int free_clus_valid ; s#fat_mount_options options ; s#nls_table * nls_disk ; s#nls_table * nls_io ; const void * dir_ops ; int dir_per_block ; int dir_per_block_bits ; int fatent_shift ; s#fatent_operations * fatent_ops ; s#inode * fat_inode ; t#spinlock_t inode_hash_lock ; s#hlist_head inode_hashtable [ ( 1UL << 8 ) ] ; } 
fat_time_unix2fat extern void fat_time_unix2fat ( s#msdos_sb_info * , s#timespec * , t#__le16 * , t#__le16 * , t#u8 * ) 

/* fs/fcntl.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##bsd_acct_struct
s##ds_context
s##fs_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##net
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##nameidata
s##poll_table_struct
s##nlm_lockowner
s##nfs4_lock_state
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
__f_setown extern int __f_setown ( s#file * , s#pid * , e#pid_type , int ) 
f_setown extern int f_setown ( s#file * , unsigned long , int ) 
fasync_helper extern int fasync_helper ( int , s#file * , int , s#fasync_struct * * ) 
__kill_fasync extern void __kill_fasync ( s#fasync_struct * , int , int ) 
kill_fasync extern void kill_fasync ( s#fasync_struct * * , int , int ) 

/* fs/file.o */
get_unused_fd extern int get_unused_fd ( void ) 

/* fs/file_table.o */
get_max_files extern int get_max_files ( void ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##poll_table_struct
s##nlm_lockowner
s##nfs4_lock_state
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##mnt_namespace
get_empty_filp extern s#file * get_empty_filp ( void ) 
alloc_file extern s#file * alloc_file ( s#vfsmount * , s#dentry * , t#fmode_t , const s#file_operations * ) 
init_file extern int init_file ( s#file * , s#vfsmount * , s#dentry * , t#fmode_t , const s#file_operations * ) 
fput extern void fput ( s#file * ) 
drop_file_write_access extern void drop_file_write_access ( s#file * ) 
fget extern s#file * fget ( unsigned int ) 

/* fs/filesystems.o */
s##vfsmount
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##nameidata
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##compat_timespec
s##pollfd
s##kiocb
s##iovec
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##hd_struct
s##gendisk
s##cdev
s##posix_acl
s##kstatfs
s##export_operations
s##xattr_handler
s##mtd_info
register_filesystem extern int register_filesystem ( s#file_system_type * ) 
unregister_filesystem extern int unregister_filesystem ( s#file_system_type * ) 
get_fs_type extern s#file_system_type * get_fs_type ( const char * ) 

/* fs/fs-writeback.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##blk_trace
s##timer_rand_state
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
__mark_inode_dirty extern void __mark_inode_dirty ( s#inode * , int ) 
writeback_inodes_sb void writeback_inodes_sb ( s#super_block * ) 
sync_inodes_sb void sync_inodes_sb ( s#super_block * ) 
write_inode_now extern int write_inode_now ( s#inode * , int ) 
sync_inode int sync_inode ( s#inode * , s#writeback_control * ) 
generic_osync_inode int generic_osync_inode ( s#inode * , s#address_space * , int ) 

/* fs/fs_struct.o */
unshare_fs_struct extern int unshare_fs_struct ( void ) 
current_umask extern int current_umask ( void ) 

/* fs/fscache/cache.o */
fscache_cache_cleared_wq extern t#wait_queue_head_t fscache_cache_cleared_wq 
e#fscache_object_state enum fscache_object_state { FSCACHE_OBJECT_INIT , FSCACHE_OBJECT_LOOKING_UP , FSCACHE_OBJECT_CREATING , FSCACHE_OBJECT_AVAILABLE , FSCACHE_OBJECT_ACTIVE , FSCACHE_OBJECT_UPDATING , FSCACHE_OBJECT_DYING , FSCACHE_OBJECT_LC_DYING , FSCACHE_OBJECT_ABORT_INIT , FSCACHE_OBJECT_RELEASING , FSCACHE_OBJECT_RECYCLING , FSCACHE_OBJECT_WITHDRAWING , FSCACHE_OBJECT_DEAD , FSCACHE_OBJECT__NSTATES } 
s#fscache_cache_tag struct fscache_cache_tag { s#list_head link ; s#fscache_cache * cache ; unsigned long flags ; t#atomic_t usage ; char name [ 0 ] ; } 
e#fscache_checkaux enum fscache_checkaux { FSCACHE_CHECKAUX_OKAY , FSCACHE_CHECKAUX_NEEDS_UPDATE , FSCACHE_CHECKAUX_OBSOLETE , } 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##array_cache
s##kmem_list3
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s#pagevec struct pagevec { unsigned long nr ; unsigned long cold ; s#page * pages [ 14 ] ; } 
s#fscache_cookie_def struct fscache_cookie_def { char name [ 16 ] ; t#uint8_t type ; s#fscache_cache_tag * ( * select_cache ) ( const void * , const void * ) ; t#uint16_t ( * get_key ) ( const void * , void * , t#uint16_t ) ; void ( * get_attr ) ( const void * , t#uint64_t * ) ; t#uint16_t ( * get_aux ) ( const void * , void * , t#uint16_t ) ; e#fscache_checkaux ( * check_aux ) ( void * , const void * , t#uint16_t ) ; void ( * get_context ) ( void * , void * ) ; void ( * put_context ) ( void * , void * ) ; void ( * mark_pages_cached ) ( void * , s#address_space * , s#pagevec * ) ; void ( * now_uncached ) ( void * ) ; } 
s#fscache_cookie struct fscache_cookie { t#atomic_t usage ; t#atomic_t n_children ; t#spinlock_t lock ; t#spinlock_t stores_lock ; s#hlist_head backing_objects ; const s#fscache_cookie_def * def ; s#fscache_cookie * parent ; void * netfs_data ; s#radix_tree_root stores ; unsigned long flags ; } 
s#slow_work_ops struct slow_work_ops { s#module * owner ; int ( * get_ref ) ( s#slow_work * ) ; void ( * put_ref ) ( s#slow_work * ) ; void ( * execute ) ( s#slow_work * ) ; void ( * desc ) ( s#slow_work * , s#seq_file * ) ; } 
s#slow_work struct slow_work { s#module * owner ; unsigned long flags ; const s#slow_work_ops * ops ; s#list_head link ; s#timespec mark ; } 
s#fscache_object struct fscache_object { e#fscache_object_state state ; int debug_id ; int n_children ; int n_ops ; int n_obj_ops ; int n_in_progress ; int n_exclusive ; t#atomic_t n_reads ; t#spinlock_t lock ; unsigned long lookup_jif ; unsigned long event_mask ; unsigned long events ; unsigned long flags ; s#list_head cache_link ; s#hlist_node cookie_link ; s#fscache_cache * cache ; s#fscache_cookie * cookie ; s#fscache_object * parent ; s#slow_work work ; s#list_head dependents ; s#list_head dep_link ; s#list_head pending_ops ; s#rb_node objlist_link ; unsigned long store_limit ; t#loff_t store_limit_l ; } 
t#fscache_operation_processor_t typedef void ( * fscache_operation_processor_t ) ( s#fscache_operation * ) 
t#fscache_operation_release_t typedef void ( * fscache_operation_release_t ) ( s#fscache_operation * ) 
s#fscache_operation struct fscache_operation { union { s#work_struct fast_work ; s#slow_work slow_work ; } ; s#list_head pend_link ; s#fscache_object * object ; unsigned long flags ; t#atomic_t usage ; unsigned debug_id ; t#fscache_operation_processor_t processor ; t#fscache_operation_release_t release ; } 
t#fscache_rw_complete_t typedef void ( * fscache_rw_complete_t ) ( s#page * , void * , int ) 
s#fscache_retrieval struct fscache_retrieval { s#fscache_operation op ; s#address_space * mapping ; t#fscache_rw_complete_t end_io_func ; void * context ; s#list_head to_do ; unsigned long start_time ; } 
t#fscache_page_retrieval_func_t typedef int ( * fscache_page_retrieval_func_t ) ( s#fscache_retrieval * , s#page * , t#gfp_t ) 
t#fscache_pages_retrieval_func_t typedef int ( * fscache_pages_retrieval_func_t ) ( s#fscache_retrieval * , s#list_head * , unsigned * , t#gfp_t ) 
s#fscache_storage struct fscache_storage { s#fscache_operation op ; unsigned long store_limit ; } 
s#fscache_cache_ops struct fscache_cache_ops { const char * name ; s#fscache_object * ( * alloc_object ) ( s#fscache_cache * , s#fscache_cookie * ) ; int ( * lookup_object ) ( s#fscache_object * ) ; void ( * lookup_complete ) ( s#fscache_object * ) ; s#fscache_object * ( * grab_object ) ( s#fscache_object * ) ; int ( * pin_object ) ( s#fscache_object * ) ; void ( * unpin_object ) ( s#fscache_object * ) ; void ( * update_object ) ( s#fscache_object * ) ; void ( * drop_object ) ( s#fscache_object * ) ; void ( * put_object ) ( s#fscache_object * ) ; void ( * sync_cache ) ( s#fscache_cache * ) ; int ( * attr_changed ) ( s#fscache_object * ) ; int ( * reserve_space ) ( s#fscache_object * , t#loff_t ) ; t#fscache_page_retrieval_func_t read_or_alloc_page ; t#fscache_pages_retrieval_func_t read_or_alloc_pages ; t#fscache_page_retrieval_func_t allocate_page ; t#fscache_pages_retrieval_func_t allocate_pages ; int ( * write_page ) ( s#fscache_storage * , s#page * ) ; void ( * uncache_page ) ( s#fscache_object * , s#page * ) ; void ( * dissociate_pages ) ( s#fscache_cache * ) ; } 
s#fscache_cache struct fscache_cache { const s#fscache_cache_ops * ops ; s#fscache_cache_tag * tag ; s#kobject * kobj ; s#list_head link ; t#size_t max_index_size ; char identifier [ 36 ] ; s#work_struct op_gc ; s#list_head object_list ; s#list_head op_gc_list ; t#spinlock_t object_list_lock ; t#spinlock_t op_gc_list_lock ; t#atomic_t object_count ; s#fscache_object * fsdef ; unsigned long flags ; } 
fscache_init_cache extern void fscache_init_cache ( s#fscache_cache * , const s#fscache_cache_ops * , const char * , ... ) 
fscache_add_cache extern int fscache_add_cache ( s#fscache_cache * , s#fscache_object * , const char * ) 
fscache_io_error extern void fscache_io_error ( s#fscache_cache * ) 
fscache_withdraw_cache extern void fscache_withdraw_cache ( s#fscache_cache * ) 

/* fs/fscache/cookie.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
__fscache_acquire_cookie extern s#fscache_cookie * __fscache_acquire_cookie ( s#fscache_cookie * , const s#fscache_cookie_def * , void * ) 
__fscache_update_cookie extern void __fscache_update_cookie ( s#fscache_cookie * ) 
__fscache_relinquish_cookie extern void __fscache_relinquish_cookie ( s#fscache_cookie * , int ) 

/* fs/fscache/fsdef.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
fscache_fsdef_index extern s#fscache_cookie fscache_fsdef_index 

/* fs/fscache/main.o */
fscache_wait_bit extern int fscache_wait_bit ( void * ) 
fscache_wait_bit_interruptible extern int fscache_wait_bit_interruptible ( void * ) 

/* fs/fscache/netfs.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#fscache_netfs struct fscache_netfs { t#uint32_t version ; const char * name ; s#fscache_cookie * primary_index ; s#list_head link ; } 
__fscache_register_netfs extern int __fscache_register_netfs ( s#fscache_netfs * ) 
__fscache_unregister_netfs extern void __fscache_unregister_netfs ( s#fscache_netfs * ) 

/* fs/fscache/object.o */
fscache_object_states extern const char * fscache_object_states [ ] 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
fscache_object_slow_work_ops extern const s#slow_work_ops fscache_object_slow_work_ops 
fscache_object_lookup_negative extern void fscache_object_lookup_negative ( s#fscache_object * ) 
fscache_obtained_object extern void fscache_obtained_object ( s#fscache_object * ) 
fscache_check_aux extern e#fscache_checkaux fscache_check_aux ( s#fscache_object * , const void * , t#uint16_t ) 

/* fs/fscache/object-list.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##array_cache
s##kmem_list3
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
fscache_object_destroy extern void fscache_object_destroy ( s#fscache_object * ) 

/* fs/fscache/operation.o */
fscache_op_debug_id extern t#atomic_t fscache_op_debug_id 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
fscache_enqueue_operation extern void fscache_enqueue_operation ( s#fscache_operation * ) 
fscache_put_operation extern void fscache_put_operation ( s#fscache_operation * ) 

/* fs/fscache/page.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
__fscache_check_page_write extern t#bool __fscache_check_page_write ( s#fscache_cookie * , s#page * ) 
__fscache_wait_on_page_write extern void __fscache_wait_on_page_write ( s#fscache_cookie * , s#page * ) 
__fscache_maybe_release_page extern t#bool __fscache_maybe_release_page ( s#fscache_cookie * , s#page * , t#gfp_t ) 
__fscache_attr_changed extern int __fscache_attr_changed ( s#fscache_cookie * ) 
__fscache_read_or_alloc_page extern int __fscache_read_or_alloc_page ( s#fscache_cookie * , s#page * , t#fscache_rw_complete_t , void * , t#gfp_t ) 
__fscache_read_or_alloc_pages extern int __fscache_read_or_alloc_pages ( s#fscache_cookie * , s#address_space * , s#list_head * , unsigned * , t#fscache_rw_complete_t , void * , t#gfp_t ) 
__fscache_alloc_page extern int __fscache_alloc_page ( s#fscache_cookie * , s#page * , t#gfp_t ) 
__fscache_write_page extern int __fscache_write_page ( s#fscache_cookie * , s#page * , t#gfp_t ) 
__fscache_uncache_page extern void __fscache_uncache_page ( s#fscache_cookie * , s#page * ) 
fscache_mark_pages_cached extern void fscache_mark_pages_cached ( s#fscache_retrieval * , s#pagevec * ) 

/* fs/fuse/dev.o */
e#fuse_req_state enum fuse_req_state { FUSE_REQ_INIT = 0 , FUSE_REQ_PENDING , FUSE_REQ_READING , FUSE_REQ_SENT , FUSE_REQ_WRITING , FUSE_REQ_FINISHED } 
s#fuse_in_header struct fuse_in_header { t#__u32 len ; t#__u32 opcode ; t#__u64 unique ; t#__u64 nodeid ; t#__u32 uid ; t#__u32 gid ; t#__u32 pid ; t#__u32 padding ; } 
s#fuse_in_arg struct fuse_in_arg { unsigned size ; const void * value ; } 
s#fuse_in struct fuse_in { s#fuse_in_header h ; unsigned argpages : 1 ; unsigned numargs ; s#fuse_in_arg args [ 3 ] ; } 
s#fuse_out_header struct fuse_out_header { t#__u32 len ; t#__s32 error ; t#__u64 unique ; } 
s#fuse_arg struct fuse_arg { unsigned size ; void * value ; } 
s#fuse_out struct fuse_out { s#fuse_out_header h ; unsigned argvar : 1 ; unsigned argpages : 1 ; unsigned page_zeroing : 1 ; unsigned numargs ; s#fuse_arg args [ 3 ] ; } 
s#fuse_forget_in struct fuse_forget_in { t#__u64 nlookup ; } 
s#fuse_release_in struct fuse_release_in { t#__u64 fh ; t#__u32 flags ; t#__u32 release_flags ; t#__u64 lock_owner ; } 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##nameidata
s##cdev
s##posix_acl
s##mnt_namespace
s#fuse_init_in struct fuse_init_in { t#__u32 major ; t#__u32 minor ; t#__u32 max_readahead ; t#__u32 flags ; } 
s#fuse_init_out struct fuse_init_out { t#__u32 major ; t#__u32 minor ; t#__u32 max_readahead ; t#__u32 flags ; t#__u16 max_background ; t#__u16 congestion_threshold ; t#__u32 max_write ; } 
s#cuse_init_in struct cuse_init_in { t#__u32 major ; t#__u32 minor ; t#__u32 unused ; t#__u32 flags ; } 
s#cuse_init_out struct cuse_init_out { t#__u32 major ; t#__u32 minor ; t#__u32 unused ; t#__u32 flags ; t#__u32 max_read ; t#__u32 max_write ; t#__u32 dev_major ; t#__u32 dev_minor ; t#__u32 spare [ 10 ] ; } 
s#fuse_read_in struct fuse_read_in { t#__u64 fh ; t#__u64 offset ; t#__u32 size ; t#__u32 read_flags ; t#__u64 lock_owner ; t#__u32 flags ; t#__u32 padding ; } 
s#fuse_write_in struct fuse_write_in { t#__u64 fh ; t#__u64 offset ; t#__u32 size ; t#__u32 write_flags ; t#__u64 lock_owner ; t#__u32 flags ; t#__u32 padding ; } 
s#fuse_write_out struct fuse_write_out { t#__u32 size ; t#__u32 padding ; } 
s#fuse_file_lock struct fuse_file_lock { t#__u64 start ; t#__u64 end ; t#__u32 type ; t#__u32 pid ; } 
s#fuse_lk_in struct fuse_lk_in { t#__u64 fh ; t#__u64 owner ; s#fuse_file_lock lk ; t#__u32 lk_flags ; t#__u32 padding ; } 
s#fuse_conn struct fuse_conn { t#spinlock_t lock ; s#mutex inst_mutex ; t#atomic_t count ; t#uid_t user_id ; t#gid_t group_id ; unsigned flags ; unsigned max_read ; unsigned max_write ; t#wait_queue_head_t waitq ; s#list_head pending ; s#list_head processing ; s#list_head io ; t#u64 khctr ; s#rb_root polled_files ; unsigned max_background ; unsigned congestion_threshold ; unsigned num_background ; unsigned active_background ; s#list_head bg_queue ; s#list_head interrupts ; int blocked ; t#wait_queue_head_t blocked_waitq ; t#wait_queue_head_t reserved_req_waitq ; t#u64 reqctr ; unsigned connected ; unsigned conn_error : 1 ; unsigned conn_init : 1 ; unsigned async_read : 1 ; unsigned atomic_o_trunc : 1 ; unsigned export_support : 1 ; unsigned bdi_initialized : 1 ; unsigned no_fsync : 1 ; unsigned no_fsyncdir : 1 ; unsigned no_flush : 1 ; unsigned no_setxattr : 1 ; unsigned no_getxattr : 1 ; unsigned no_listxattr : 1 ; unsigned no_removexattr : 1 ; unsigned no_lock : 1 ; unsigned no_access : 1 ; unsigned no_create : 1 ; unsigned no_interrupt : 1 ; unsigned no_bmap : 1 ; unsigned no_poll : 1 ; unsigned big_writes : 1 ; unsigned dont_mask : 1 ; t#atomic_t num_waiting ; unsigned minor ; s#backing_dev_info bdi ; s#list_head entry ; t#dev_t dev ; s#dentry * ctl_dentry [ 5 ] ; int ctl_ndents ; s#fasync_struct * fasync ; t#u32 scramble_key [ 4 ] ; s#fuse_req * destroy_req ; t#u64 attr_version ; void ( * release ) ( s#fuse_conn * ) ; s#super_block * sb ; s#rw_semaphore killsb ; } 
s#fuse_file struct fuse_file { s#fuse_conn * fc ; s#fuse_req * reserved_req ; t#u64 kh ; t#u64 fh ; t#u64 nodeid ; t#atomic_t count ; t#u32 open_flags ; s#list_head write_entry ; s#rb_node polled_node ; t#wait_queue_head_t poll_wait ; } 
s#fuse_req struct fuse_req { s#list_head list ; s#list_head intr_entry ; t#atomic_t count ; t#u64 intr_unique ; unsigned isreply : 1 ; unsigned force : 1 ; unsigned aborted : 1 ; unsigned background : 1 ; unsigned interrupted : 1 ; unsigned locked : 1 ; unsigned waiting : 1 ; e#fuse_req_state state ; s#fuse_in in ; s#fuse_out out ; t#wait_queue_head_t waitq ; union { s#fuse_forget_in forget_in ; struct { s#fuse_release_in in ; s#path path ; } release ; s#fuse_init_in init_in ; s#fuse_init_out init_out ; s#cuse_init_in cuse_init_in ; s#cuse_init_out cuse_init_out ; struct { s#fuse_read_in in ; t#u64 attr_ver ; } read ; struct { s#fuse_write_in in ; s#fuse_write_out out ; } write ; s#fuse_lk_in lk_in ; } misc ; s#page * pages [ 32 ] ; unsigned num_pages ; unsigned page_offset ; s#fuse_file * ff ; s#inode * inode ; s#list_head writepages_entry ; void ( * end ) ( s#fuse_conn * , s#fuse_req * ) ; s#file * stolen_file ; } 
fuse_request_alloc s#fuse_req * fuse_request_alloc ( void ) 
fuse_get_req s#fuse_req * fuse_get_req ( s#fuse_conn * ) 
fuse_put_request void fuse_put_request ( s#fuse_conn * , s#fuse_req * ) 
fuse_request_send void fuse_request_send ( s#fuse_conn * , s#fuse_req * ) 
fuse_request_send_background void fuse_request_send_background ( s#fuse_conn * , s#fuse_req * ) 
fuse_abort_conn void fuse_abort_conn ( s#fuse_conn * ) 
fuse_dev_release int fuse_dev_release ( s#inode * , s#file * ) 
fuse_dev_operations extern const s#file_operations fuse_dev_operations 

/* fs/fuse/file.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##mnt_namespace
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##device
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
fuse_do_open int fuse_do_open ( s#fuse_conn * , t#u64 , s#file * , t#bool ) 
fuse_sync_release void fuse_sync_release ( s#fuse_file * , int ) 
fuse_direct_io t#ssize_t fuse_direct_io ( s#file * , const char * , t#size_t , t#loff_t * , int ) 
fuse_do_ioctl long fuse_do_ioctl ( s#file * , unsigned int , unsigned long , unsigned int ) 
fuse_file_poll unsigned fuse_file_poll ( s#file * , t#poll_table * ) 

/* fs/fuse/inode.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##mnt_namespace
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##xattr_handler
s##hd_struct
s##gendisk
s##device
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
fuse_conn_kill void fuse_conn_kill ( s#fuse_conn * ) 
fuse_conn_init void fuse_conn_init ( s#fuse_conn * ) 
fuse_conn_put void fuse_conn_put ( s#fuse_conn * ) 
fuse_conn_get s#fuse_conn * fuse_conn_get ( s#fuse_conn * ) 

/* fs/inode.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##hd_struct
s##gendisk
s#posix_acl_entry struct posix_acl_entry { short e_tag ; unsigned short e_perm ; unsigned int e_id ; } 
s#posix_acl struct posix_acl { t#atomic_t a_refcount ; unsigned int a_count ; s#posix_acl_entry a_entries [ 0 ] ; } 
s##mnt_namespace
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##mtd_info
inode_init_always extern int inode_init_always ( s#super_block * , s#inode * ) 
__destroy_inode extern void __destroy_inode ( s#inode * ) 
inode_init_once extern void inode_init_once ( s#inode * ) 
clear_inode extern void clear_inode ( s#inode * ) 
invalidate_inodes extern int invalidate_inodes ( s#super_block * ) 
inode_add_to_lists extern void inode_add_to_lists ( s#super_block * , s#inode * ) 
new_inode extern s#inode * new_inode ( s#super_block * ) 
unlock_new_inode extern void unlock_new_inode ( s#inode * ) 
iunique extern t#ino_t iunique ( s#super_block * , t#ino_t ) 
igrab extern s#inode * igrab ( s#inode * ) 
ilookup5_nowait extern s#inode * ilookup5_nowait ( s#super_block * , unsigned long , int ( * ) ( s#inode * , void * ) , void * ) 
ilookup5 extern s#inode * ilookup5 ( s#super_block * , unsigned long , int ( * ) ( s#inode * , void * ) , void * ) 
ilookup extern s#inode * ilookup ( s#super_block * , unsigned long ) 
iget5_locked extern s#inode * iget5_locked ( s#super_block * , unsigned long , int ( * ) ( s#inode * , void * ) , int ( * ) ( s#inode * , void * ) , void * ) 
iget_locked extern s#inode * iget_locked ( s#super_block * , unsigned long ) 
insert_inode_locked extern int insert_inode_locked ( s#inode * ) 
insert_inode_locked4 extern int insert_inode_locked4 ( s#inode * , unsigned long , int ( * ) ( s#inode * , void * ) , void * ) 
__insert_inode_hash extern void __insert_inode_hash ( s#inode * , unsigned long ) 
remove_inode_hash extern void remove_inode_hash ( s#inode * ) 
generic_delete_inode extern void generic_delete_inode ( s#inode * ) 
generic_detach_inode extern int generic_detach_inode ( s#inode * ) 
generic_drop_inode extern void generic_drop_inode ( s#inode * ) 
iput extern void iput ( s#inode * ) 
bmap extern t#sector_t bmap ( s#inode * , t#sector_t ) 
touch_atime extern void touch_atime ( s#vfsmount * , s#dentry * ) 
file_update_time extern void file_update_time ( s#file * ) 
inode_needs_sync extern int inode_needs_sync ( s#inode * ) 
inode_wait int inode_wait ( void * ) 
init_special_inode extern void init_special_inode ( s#inode * , t#umode_t , t#dev_t ) 

/* fs/ioctl.o */
fiemap_fill_next_extent int fiemap_fill_next_extent ( s#fiemap_extent_info * , t#u64 , t#u64 , t#u64 , t#u32 ) 
fiemap_check_flags int fiemap_check_flags ( s#fiemap_extent_info * , t#u32 ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##backing_dev_info
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##nameidata
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
__generic_block_fiemap extern int __generic_block_fiemap ( s#inode * , s#fiemap_extent_info * , t#u64 , t#u64 , t#get_block_t * ) 
generic_block_fiemap extern int generic_block_fiemap ( s#inode * , s#fiemap_extent_info * , t#u64 , t#u64 , t#get_block_t * ) 

/* fs/ioprio.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##array_cache
s##kmem_list3
s##bsd_acct_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##net
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
set_task_ioprio extern int set_task_ioprio ( s#task_struct * , int ) 

/* fs/jbd/journal.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s#journal_header_s struct journal_header_s { t#__be32 h_magic ; t#__be32 h_blocktype ; t#__be32 h_sequence ; } 
t#journal_header_t typedef s#journal_header_s journal_header_t 
s#journal_superblock_s struct journal_superblock_s { t#journal_header_t s_header ; t#__be32 s_blocksize ; t#__be32 s_maxlen ; t#__be32 s_first ; t#__be32 s_sequence ; t#__be32 s_start ; t#__be32 s_errno ; t#__be32 s_feature_compat ; t#__be32 s_feature_incompat ; t#__be32 s_feature_ro_compat ; t#__u8 s_uuid [ 16 ] ; t#__be32 s_nr_users ; t#__be32 s_dynsuper ; t#__be32 s_max_transaction ; t#__be32 s_max_trans_data ; t#__u32 s_padding [ 44 ] ; t#__u8 s_users [ 16 * 48 ] ; } 
t#journal_superblock_t typedef s#journal_superblock_s journal_superblock_t 
t#tid_t typedef unsigned int tid_t 
s##jbd_revoke_table_s
s#journal_s struct journal_s { unsigned long j_flags ; int j_errno ; s#buffer_head * j_sb_buffer ; t#journal_superblock_t * j_superblock ; int j_format_version ; t#spinlock_t j_state_lock ; int j_barrier_count ; s#mutex j_barrier ; t#transaction_t * j_running_transaction ; t#transaction_t * j_committing_transaction ; t#transaction_t * j_checkpoint_transactions ; t#wait_queue_head_t j_wait_transaction_locked ; t#wait_queue_head_t j_wait_logspace ; t#wait_queue_head_t j_wait_done_commit ; t#wait_queue_head_t j_wait_checkpoint ; t#wait_queue_head_t j_wait_commit ; t#wait_queue_head_t j_wait_updates ; s#mutex j_checkpoint_mutex ; unsigned int j_head ; unsigned int j_tail ; unsigned int j_free ; unsigned int j_first ; unsigned int j_last ; s#block_device * j_dev ; int j_blocksize ; unsigned int j_blk_offset ; s#block_device * j_fs_dev ; unsigned int j_maxlen ; t#spinlock_t j_list_lock ; s#inode * j_inode ; t#tid_t j_tail_sequence ; t#tid_t j_transaction_sequence ; t#tid_t j_commit_sequence ; t#tid_t j_commit_request ; t#__u8 j_uuid [ 16 ] ; s#task_struct * j_task ; int j_max_transaction_buffers ; unsigned long j_commit_interval ; s#timer_list j_commit_timer ; t#spinlock_t j_revoke_lock ; s#jbd_revoke_table_s * j_revoke ; s#jbd_revoke_table_s * j_revoke_table [ 2 ] ; s#buffer_head * * j_wbuf ; int j_wbufsize ; t#pid_t j_last_sync_writer ; t#u64 j_average_commit_time ; void * j_private ; } 
t#journal_t typedef s#journal_s journal_t 
s##jbd2_buffer_trigger_type
s#journal_head struct journal_head { s#buffer_head * b_bh ; int b_jcount ; unsigned b_jlist ; unsigned b_modified ; char * b_frozen_data ; char * b_committed_data ; t#transaction_t * b_transaction ; t#transaction_t * b_next_transaction ; s#journal_head * b_tnext , * b_tprev ; t#transaction_t * b_cp_transaction ; s#journal_head * b_cpnext , * b_cpprev ; s#jbd2_buffer_trigger_type * b_triggers ; s#jbd2_buffer_trigger_type * b_frozen_triggers ; } 
s#transaction_s struct transaction_s { t#journal_t * t_journal ; t#tid_t t_tid ; enum { T_RUNNING , T_LOCKED , T_RUNDOWN , T_FLUSH , T_COMMIT , T_FINISHED } t_state ; unsigned int t_log_start ; int t_nr_buffers ; s#journal_head * t_reserved_list ; s#journal_head * t_locked_list ; s#journal_head * t_buffers ; s#journal_head * t_sync_datalist ; s#journal_head * t_forget ; s#journal_head * t_checkpoint_list ; s#journal_head * t_checkpoint_io_list ; s#journal_head * t_iobuf_list ; s#journal_head * t_shadow_list ; s#journal_head * t_log_list ; t#spinlock_t t_handle_lock ; int t_updates ; int t_outstanding_credits ; t#transaction_t * t_cpnext , * t_cpprev ; unsigned long t_expires ; t#ktime_t t_start_time ; int t_handle_count ; unsigned int t_synchronous_commit : 1 ; } 
t#transaction_t typedef s#transaction_s transaction_t 
s#handle_s struct handle_s { t#transaction_t * h_transaction ; int h_buffer_credits ; int h_ref ; int h_err ; unsigned int h_sync : 1 ; unsigned int h_jdata : 1 ; unsigned int h_aborted : 1 ; } 
t#handle_t typedef s#handle_s handle_t 
journal_start extern t#handle_t * journal_start ( t#journal_t * , int ) 
journal_restart extern int journal_restart ( t#handle_t * , int ) 
journal_extend extern int journal_extend ( t#handle_t * , int ) 
journal_stop extern int journal_stop ( t#handle_t * ) 
journal_lock_updates extern void journal_lock_updates ( t#journal_t * ) 
journal_unlock_updates extern void journal_unlock_updates ( t#journal_t * ) 
journal_get_write_access extern int journal_get_write_access ( t#handle_t * , s#buffer_head * ) 
journal_get_create_access extern int journal_get_create_access ( t#handle_t * , s#buffer_head * ) 
journal_get_undo_access extern int journal_get_undo_access ( t#handle_t * , s#buffer_head * ) 
journal_dirty_data extern int journal_dirty_data ( t#handle_t * , s#buffer_head * ) 
journal_dirty_metadata extern int journal_dirty_metadata ( t#handle_t * , s#buffer_head * ) 
journal_release_buffer extern void journal_release_buffer ( t#handle_t * , s#buffer_head * ) 
journal_forget extern int journal_forget ( t#handle_t * , s#buffer_head * ) 
journal_flush extern int journal_flush ( t#journal_t * ) 
journal_revoke extern int journal_revoke ( t#handle_t * , unsigned int , s#buffer_head * ) 
journal_init_dev extern t#journal_t * journal_init_dev ( s#block_device * , s#block_device * , int , int , int ) 
journal_init_inode extern t#journal_t * journal_init_inode ( s#inode * ) 
journal_update_format extern int journal_update_format ( t#journal_t * ) 
journal_check_used_features extern int journal_check_used_features ( t#journal_t * , unsigned long , unsigned long , unsigned long ) 
journal_check_available_features extern int journal_check_available_features ( t#journal_t * , unsigned long , unsigned long , unsigned long ) 
journal_set_features extern int journal_set_features ( t#journal_t * , unsigned long , unsigned long , unsigned long ) 
journal_create extern int journal_create ( t#journal_t * ) 
journal_load extern int journal_load ( t#journal_t * ) 
journal_destroy extern int journal_destroy ( t#journal_t * ) 
journal_abort extern void journal_abort ( t#journal_t * , int ) 
journal_errno extern int journal_errno ( t#journal_t * ) 
journal_ack_err extern void journal_ack_err ( t#journal_t * ) 
journal_clear_err extern int journal_clear_err ( t#journal_t * ) 
log_wait_commit int log_wait_commit ( t#journal_t * , t#tid_t ) 
log_start_commit int log_start_commit ( t#journal_t * , t#tid_t ) 
journal_start_commit int journal_start_commit ( t#journal_t * , t#tid_t * ) 
journal_force_commit_nested int journal_force_commit_nested ( t#journal_t * ) 
journal_wipe extern int journal_wipe ( t#journal_t * , int ) 
journal_blocks_per_page extern int journal_blocks_per_page ( s#inode * ) 
journal_invalidatepage extern void journal_invalidatepage ( t#journal_t * , s#page * , unsigned long ) 
journal_try_to_free_buffers extern int journal_try_to_free_buffers ( t#journal_t * , s#page * , t#gfp_t ) 
journal_force_commit extern int journal_force_commit ( t#journal_t * ) 

/* fs/jbd2/journal.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##jbd2_revoke_table_s
s#transaction_run_stats_s struct transaction_run_stats_s { unsigned long rs_wait ; unsigned long rs_running ; unsigned long rs_locked ; unsigned long rs_flushing ; unsigned long rs_logging ; t#__u32 rs_handle_count ; t#__u32 rs_blocks ; t#__u32 rs_blocks_logged ; } 
s#transaction_stats_s struct transaction_stats_s { unsigned long ts_tid ; s#transaction_run_stats_s run ; } 
s#journal_s struct journal_s { unsigned long j_flags ; int j_errno ; s#buffer_head * j_sb_buffer ; t#journal_superblock_t * j_superblock ; int j_format_version ; t#spinlock_t j_state_lock ; int j_barrier_count ; s#mutex j_barrier ; t#transaction_t * j_running_transaction ; t#transaction_t * j_committing_transaction ; t#transaction_t * j_checkpoint_transactions ; t#wait_queue_head_t j_wait_transaction_locked ; t#wait_queue_head_t j_wait_logspace ; t#wait_queue_head_t j_wait_done_commit ; t#wait_queue_head_t j_wait_checkpoint ; t#wait_queue_head_t j_wait_commit ; t#wait_queue_head_t j_wait_updates ; s#mutex j_checkpoint_mutex ; s#buffer_head * j_chkpt_bhs [ 64 ] ; unsigned long j_head ; unsigned long j_tail ; unsigned long j_free ; unsigned long j_first ; unsigned long j_last ; s#block_device * j_dev ; int j_blocksize ; unsigned long long j_blk_offset ; char j_devname [ 32 + 24 ] ; s#block_device * j_fs_dev ; unsigned int j_maxlen ; t#spinlock_t j_list_lock ; s#inode * j_inode ; t#tid_t j_tail_sequence ; t#tid_t j_transaction_sequence ; t#tid_t j_commit_sequence ; t#tid_t j_commit_request ; t#__u8 j_uuid [ 16 ] ; s#task_struct * j_task ; int j_max_transaction_buffers ; unsigned long j_commit_interval ; s#timer_list j_commit_timer ; t#spinlock_t j_revoke_lock ; s#jbd2_revoke_table_s * j_revoke ; s#jbd2_revoke_table_s * j_revoke_table [ 2 ] ; s#buffer_head * * j_wbuf ; int j_wbufsize ; t#pid_t j_last_sync_writer ; t#u64 j_average_commit_time ; t#u32 j_min_batch_time ; t#u32 j_max_batch_time ; void ( * j_commit_callback ) ( t#journal_t * , t#transaction_t * ) ; t#spinlock_t j_history_lock ; s#proc_dir_entry * j_proc_entry ; s#transaction_stats_s j_stats ; unsigned int j_failed_commit ; void * j_private ; } 
s#jbd2_buffer_trigger_type struct jbd2_buffer_trigger_type { void ( * t_commit ) ( s#jbd2_buffer_trigger_type * , s#buffer_head * , void * , t#size_t ) ; void ( * t_abort ) ( s#jbd2_buffer_trigger_type * , s#buffer_head * ) ; } 
s#transaction_chp_stats_s struct transaction_chp_stats_s { unsigned long cs_chp_time ; t#__u32 cs_forced_to_close ; t#__u32 cs_written ; t#__u32 cs_dropped ; } 
s#transaction_s struct transaction_s { t#journal_t * t_journal ; t#tid_t t_tid ; enum { T_RUNNING , T_LOCKED , T_RUNDOWN , T_FLUSH , T_COMMIT , T_FINISHED } t_state ; unsigned long t_log_start ; int t_nr_buffers ; s#journal_head * t_reserved_list ; s#journal_head * t_buffers ; s#journal_head * t_forget ; s#journal_head * t_checkpoint_list ; s#journal_head * t_checkpoint_io_list ; s#journal_head * t_iobuf_list ; s#journal_head * t_shadow_list ; s#journal_head * t_log_list ; s#list_head t_inode_list ; t#spinlock_t t_handle_lock ; unsigned long t_max_wait ; unsigned long t_start ; s#transaction_chp_stats_s t_chp_stats ; int t_updates ; int t_outstanding_credits ; t#transaction_t * t_cpnext , * t_cpprev ; unsigned long t_expires ; t#ktime_t t_start_time ; int t_handle_count ; unsigned int t_synchronous_commit : 1 ; s#list_head t_private_list ; } 
jbd2_journal_start extern t#handle_t * jbd2_journal_start ( t#journal_t * , int ) 
jbd2_journal_restart extern int jbd2_journal_restart ( t#handle_t * , int ) 
jbd2_journal_extend extern int jbd2_journal_extend ( t#handle_t * , int ) 
jbd2_journal_stop extern int jbd2_journal_stop ( t#handle_t * ) 
jbd2_journal_lock_updates extern void jbd2_journal_lock_updates ( t#journal_t * ) 
jbd2_journal_unlock_updates extern void jbd2_journal_unlock_updates ( t#journal_t * ) 
jbd2_journal_get_write_access extern int jbd2_journal_get_write_access ( t#handle_t * , s#buffer_head * ) 
jbd2_journal_get_create_access extern int jbd2_journal_get_create_access ( t#handle_t * , s#buffer_head * ) 
jbd2_journal_get_undo_access extern int jbd2_journal_get_undo_access ( t#handle_t * , s#buffer_head * ) 
jbd2_journal_set_triggers void jbd2_journal_set_triggers ( s#buffer_head * , s#jbd2_buffer_trigger_type * ) 
jbd2_journal_dirty_metadata extern int jbd2_journal_dirty_metadata ( t#handle_t * , s#buffer_head * ) 
jbd2_journal_release_buffer extern void jbd2_journal_release_buffer ( t#handle_t * , s#buffer_head * ) 
jbd2_journal_forget extern int jbd2_journal_forget ( t#handle_t * , s#buffer_head * ) 
jbd2_journal_flush extern int jbd2_journal_flush ( t#journal_t * ) 
jbd2_journal_revoke extern int jbd2_journal_revoke ( t#handle_t * , unsigned long long , s#buffer_head * ) 
jbd2_journal_init_dev extern t#journal_t * jbd2_journal_init_dev ( s#block_device * , s#block_device * , unsigned long long , int , int ) 
jbd2_journal_init_inode extern t#journal_t * jbd2_journal_init_inode ( s#inode * ) 
jbd2_journal_update_format extern int jbd2_journal_update_format ( t#journal_t * ) 
jbd2_journal_check_used_features extern int jbd2_journal_check_used_features ( t#journal_t * , unsigned long , unsigned long , unsigned long ) 
jbd2_journal_check_available_features extern int jbd2_journal_check_available_features ( t#journal_t * , unsigned long , unsigned long , unsigned long ) 
jbd2_journal_set_features extern int jbd2_journal_set_features ( t#journal_t * , unsigned long , unsigned long , unsigned long ) 
jbd2_journal_load extern int jbd2_journal_load ( t#journal_t * ) 
jbd2_journal_destroy extern int jbd2_journal_destroy ( t#journal_t * ) 
jbd2_journal_abort extern void jbd2_journal_abort ( t#journal_t * , int ) 
jbd2_journal_errno extern int jbd2_journal_errno ( t#journal_t * ) 
jbd2_journal_ack_err extern void jbd2_journal_ack_err ( t#journal_t * ) 
jbd2_journal_clear_err extern int jbd2_journal_clear_err ( t#journal_t * ) 
jbd2_log_wait_commit int jbd2_log_wait_commit ( t#journal_t * , t#tid_t ) 
jbd2_log_start_commit int jbd2_log_start_commit ( t#journal_t * , t#tid_t ) 
jbd2_journal_start_commit int jbd2_journal_start_commit ( t#journal_t * , t#tid_t * ) 
jbd2_journal_force_commit_nested int jbd2_journal_force_commit_nested ( t#journal_t * ) 
jbd2_journal_wipe extern int jbd2_journal_wipe ( t#journal_t * , int ) 
jbd2_journal_blocks_per_page extern int jbd2_journal_blocks_per_page ( s#inode * ) 
jbd2_journal_invalidatepage extern void jbd2_journal_invalidatepage ( t#journal_t * , s#page * , unsigned long ) 
jbd2_journal_try_to_free_buffers extern int jbd2_journal_try_to_free_buffers ( t#journal_t * , s#page * , t#gfp_t ) 
jbd2_journal_force_commit extern int jbd2_journal_force_commit ( t#journal_t * ) 
s#jbd2_inode struct jbd2_inode { t#transaction_t * i_transaction ; t#transaction_t * i_next_transaction ; s#list_head i_list ; s#inode * i_vfs_inode ; unsigned int i_flags ; } 
jbd2_journal_file_inode extern int jbd2_journal_file_inode ( t#handle_t * , s#jbd2_inode * ) 
jbd2_journal_init_jbd_inode extern void jbd2_journal_init_jbd_inode ( s#jbd2_inode * , s#inode * ) 
jbd2_journal_release_jbd_inode extern void jbd2_journal_release_jbd_inode ( t#journal_t * , s#jbd2_inode * ) 
jbd2_journal_begin_ordered_truncate extern int jbd2_journal_begin_ordered_truncate ( t#journal_t * , s#jbd2_inode * , t#loff_t ) 
jbd2_journal_clear_features extern void jbd2_journal_clear_features ( t#journal_t * , unsigned long , unsigned long , unsigned long ) 
jbd2_dev_to_name extern const char * jbd2_dev_to_name ( t#dev_t ) 

/* fs/libfs.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##backing_dev_info
s##mnt_namespace
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##cdev
s##posix_acl
generic_fh_to_dentry extern s#dentry * generic_fh_to_dentry ( s#super_block * , s#fid * , int , int , s#inode * ( * ) ( s#super_block * , t#u64 , t#u32 ) ) 
generic_fh_to_parent extern s#dentry * generic_fh_to_parent ( s#super_block * , s#fid * , int , int , s#inode * ( * ) ( s#super_block * , t#u64 , t#u32 ) ) 
simple_fsync extern int simple_fsync ( s#file * , s#dentry * , int ) 
dcache_dir_close extern int dcache_dir_close ( s#inode * , s#file * ) 
dcache_dir_lseek extern t#loff_t dcache_dir_lseek ( s#file * , t#loff_t , int ) 
dcache_dir_open extern int dcache_dir_open ( s#inode * , s#file * ) 
dcache_readdir extern int dcache_readdir ( s#file * , void * , t#filldir_t ) 
generic_read_dir extern t#ssize_t generic_read_dir ( s#file * , char * , t#size_t , t#loff_t * ) 
get_sb_pseudo extern int get_sb_pseudo ( s#file_system_type * , char * , const s#super_operations * , unsigned long , s#vfsmount * ) 
simple_write_begin extern int simple_write_begin ( s#file * , s#address_space * , t#loff_t , unsigned , unsigned , s#page * * , void * * ) 
simple_write_end extern int simple_write_end ( s#file * , s#address_space * , t#loff_t , unsigned , unsigned , s#page * , void * ) 
simple_dir_inode_operations extern const s#inode_operations simple_dir_inode_operations 
simple_dir_operations extern const s#file_operations simple_dir_operations 
simple_empty extern int simple_empty ( s#dentry * ) 
d_alloc_name s#dentry * d_alloc_name ( s#dentry * , const char * ) 
s#tree_descr struct tree_descr { char * name ; const s#file_operations * ops ; int mode ; } 
simple_fill_super extern int simple_fill_super ( s#super_block * , int , s#tree_descr * ) 
simple_getattr extern int simple_getattr ( s#vfsmount * , s#dentry * , s#kstat * ) 
simple_link extern int simple_link ( s#dentry * , s#inode * , s#dentry * ) 
simple_lookup extern s#dentry * simple_lookup ( s#inode * , s#dentry * , s#nameidata * ) 
simple_pin_fs extern int simple_pin_fs ( s#file_system_type * , s#vfsmount * * , int * ) 
simple_readpage extern int simple_readpage ( s#file * , s#page * ) 
simple_release_fs extern void simple_release_fs ( s#vfsmount * * , int * ) 
simple_rename extern int simple_rename ( s#inode * , s#dentry * , s#inode * , s#dentry * ) 
simple_rmdir extern int simple_rmdir ( s#inode * , s#dentry * ) 
simple_statfs extern int simple_statfs ( s#dentry * , s#kstatfs * ) 
simple_sync_file extern int simple_sync_file ( s#file * , s#dentry * , int ) 
simple_unlink extern int simple_unlink ( s#inode * , s#dentry * ) 
simple_read_from_buffer extern t#ssize_t simple_read_from_buffer ( void * , t#size_t , t#loff_t * , const void * , t#size_t ) 
memory_read_from_buffer extern t#ssize_t memory_read_from_buffer ( void * , t#size_t , t#loff_t * , const void * , t#size_t ) 
simple_transaction_set void simple_transaction_set ( s#file * , t#size_t ) 
simple_transaction_get char * simple_transaction_get ( s#file * , const char * , t#size_t ) 
simple_transaction_read t#ssize_t simple_transaction_read ( s#file * , char * , t#size_t , t#loff_t * ) 
simple_transaction_release int simple_transaction_release ( s#inode * , s#file * ) 
simple_attr_open int simple_attr_open ( s#inode * , s#file * , int ( * ) ( void * , t#u64 * ) , int ( * ) ( void * , t#u64 ) , const char * ) 
simple_attr_release int simple_attr_release ( s#inode * , s#file * ) 
simple_attr_read t#ssize_t simple_attr_read ( s#file * , char * , t#size_t , t#loff_t * ) 
simple_attr_write t#ssize_t simple_attr_write ( s#file * , const char * , t#size_t , t#loff_t * ) 

/* fs/lockd/clntlock.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##mtd_info
s##eventfd_ctx
s##files_struct
s##pid_namespace
s#nlm_lockowner struct nlm_lockowner { s#list_head list ; t#atomic_t count ; s#nlm_host * host ; t#fl_owner_t owner ; t#uint32_t pid ; } 
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##ipc_namespace
s##mnt_namespace
s##iw_handler_def
s##iw_public_data
s##array_cache
s##kmem_list3
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##rtable
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##radix_tree_node
s#xdr_buf struct xdr_buf { s#kvec head [ 1 ] , tail [ 1 ] ; s#page * * pages ; unsigned int page_base , page_len , flags ; unsigned int buflen , len ; } 
s#rpc_rqst struct rpc_rqst { s#rpc_xprt * rq_xprt ; s#xdr_buf rq_snd_buf ; s#xdr_buf rq_rcv_buf ; s#rpc_task * rq_task ; t#__be32 rq_xid ; int rq_cong ; int rq_reply_bytes_recvd ; t#u32 rq_seqno ; int rq_enc_pages_num ; s#page * * rq_enc_pages ; void ( * rq_release_snd_buf ) ( s#rpc_rqst * ) ; s#list_head rq_list ; t#__u32 * rq_buffer ; t#size_t rq_callsize , rq_rcvsize ; s#xdr_buf rq_private_buf ; unsigned long rq_majortimeo ; unsigned long rq_timeout ; unsigned int rq_retries ; unsigned int rq_connect_cookie ; t#u32 rq_bytes_sent ; unsigned long rq_xtime ; int rq_ntrans ; } 
t#kxdrproc_t typedef int ( * kxdrproc_t ) ( void * , t#__be32 * , void * ) 
s#rpc_procinfo struct rpc_procinfo { t#u32 p_proc ; t#kxdrproc_t p_encode ; t#kxdrproc_t p_decode ; unsigned int p_arglen ; unsigned int p_replen ; unsigned int p_count ; unsigned int p_timer ; t#u32 p_statidx ; char * p_name ; } 
t#rpc_authflavor_t typedef t#u32 rpc_authflavor_t 
s#auth_cred struct auth_cred { t#uid_t uid ; t#gid_t gid ; s#group_info * group_info ; unsigned char machine_cred : 1 ; } 
s#rpc_authops struct rpc_authops { s#module * owner ; t#rpc_authflavor_t au_flavor ; char * au_name ; s#rpc_auth * ( * create ) ( s#rpc_clnt * , t#rpc_authflavor_t ) ; void ( * destroy ) ( s#rpc_auth * ) ; s#rpc_cred * ( * lookup_cred ) ( s#rpc_auth * , s#auth_cred * , int ) ; s#rpc_cred * ( * crcreate ) ( s#rpc_auth * , s#auth_cred * , int ) ; } 
s#rpc_cred_cache struct rpc_cred_cache { s#hlist_head hashtable [ ( 1 << 4 ) ] ; t#spinlock_t lock ; } 
s#rpc_auth struct rpc_auth { unsigned int au_cslack ; unsigned int au_rslack ; unsigned int au_verfsize ; unsigned int au_flags ; const s#rpc_authops * au_ops ; t#rpc_authflavor_t au_flavor ; t#atomic_t au_count ; s#rpc_cred_cache * au_credcache ; } 
s#rpc_credops struct rpc_credops { const char * cr_name ; int ( * cr_init ) ( s#rpc_auth * , s#rpc_cred * ) ; void ( * crdestroy ) ( s#rpc_cred * ) ; int ( * crmatch ) ( s#auth_cred * , s#rpc_cred * , int ) ; void ( * crbind ) ( s#rpc_task * , s#rpc_cred * , int ) ; t#__be32 * ( * crmarshal ) ( s#rpc_task * , t#__be32 * ) ; int ( * crrefresh ) ( s#rpc_task * ) ; t#__be32 * ( * crvalidate ) ( s#rpc_task * , t#__be32 * ) ; int ( * crwrap_req ) ( s#rpc_task * , t#kxdrproc_t , void * , t#__be32 * , void * ) ; int ( * crunwrap_resp ) ( s#rpc_task * , t#kxdrproc_t , void * , t#__be32 * , void * ) ; } 
s#rpc_cred struct rpc_cred { s#hlist_node cr_hash ; s#list_head cr_lru ; s#rcu_head cr_rcu ; s#rpc_auth * cr_auth ; const s#rpc_credops * cr_ops ; unsigned long cr_magic ; unsigned long cr_expire ; unsigned long cr_flags ; t#atomic_t cr_count ; t#uid_t cr_uid ; } 
s#rpc_message struct rpc_message { s#rpc_procinfo * rpc_proc ; void * rpc_argp ; void * rpc_resp ; s#rpc_cred * rpc_cred ; } 
s#rpc_call_ops struct rpc_call_ops { void ( * rpc_call_prepare ) ( s#rpc_task * , void * ) ; void ( * rpc_call_done ) ( s#rpc_task * , void * ) ; void ( * rpc_release ) ( void * ) ; } 
s##workqueue_struct
s#rpc_timer struct rpc_timer { s#timer_list timer ; s#list_head list ; unsigned long expires ; } 
s#rpc_wait_queue struct rpc_wait_queue { t#spinlock_t lock ; s#list_head tasks [ ( 1 + ( 1 ) - ( - 1 ) ) ] ; t#pid_t owner ; unsigned char maxpriority ; unsigned char priority ; unsigned char count ; unsigned char nr ; unsigned short qlen ; s#rpc_timer timer_list ; const char * name ; } 
s#rpc_wait struct rpc_wait { s#list_head list ; s#list_head links ; s#list_head timer_list ; unsigned long expires ; } 
s#rpc_task struct rpc_task { unsigned long tk_magic ; t#atomic_t tk_count ; s#list_head tk_task ; s#rpc_clnt * tk_client ; s#rpc_rqst * tk_rqstp ; int tk_status ; s#rpc_message tk_msg ; t#__u8 tk_garb_retry ; t#__u8 tk_cred_retry ; void ( * tk_callback ) ( s#rpc_task * ) ; void ( * tk_action ) ( s#rpc_task * ) ; const s#rpc_call_ops * tk_ops ; void * tk_calldata ; unsigned long tk_timeout ; unsigned short tk_flags ; unsigned long tk_runstate ; s#workqueue_struct * tk_workqueue ; s#rpc_wait_queue * tk_waitqueue ; union { s#work_struct tk_work ; s#rpc_wait tk_wait ; } u ; unsigned short tk_timeouts ; t#size_t tk_bytes_sent ; unsigned long tk_start ; long tk_rtt ; t#pid_t tk_owner ; unsigned char tk_priority : 2 ; unsigned short tk_pid ; } 
s#rpc_xprt_ops struct rpc_xprt_ops { void ( * set_buffer_size ) ( s#rpc_xprt * , t#size_t , t#size_t ) ; int ( * reserve_xprt ) ( s#rpc_task * ) ; void ( * release_xprt ) ( s#rpc_xprt * , s#rpc_task * ) ; void ( * rpcbind ) ( s#rpc_task * ) ; void ( * set_port ) ( s#rpc_xprt * , unsigned short ) ; void ( * connect ) ( s#rpc_task * ) ; void * ( * buf_alloc ) ( s#rpc_task * , t#size_t ) ; void ( * buf_free ) ( void * ) ; int ( * send_request ) ( s#rpc_task * ) ; void ( * set_retrans_timeout ) ( s#rpc_task * ) ; void ( * timer ) ( s#rpc_task * ) ; void ( * release_request ) ( s#rpc_task * ) ; void ( * close ) ( s#rpc_xprt * ) ; void ( * destroy ) ( s#rpc_xprt * ) ; void ( * print_stats ) ( s#rpc_xprt * , s#seq_file * ) ; } 
s#rpc_timeout struct rpc_timeout { unsigned long to_initval , to_maxval , to_increment ; unsigned int to_retries ; unsigned char to_exponential ; } 
s##svc_xprt
s#rpc_xprt struct rpc_xprt { s#kref kref ; s#rpc_xprt_ops * ops ; const s#rpc_timeout * timeout ; s#__kernel_sockaddr_storage addr ; t#size_t addrlen ; int prot ; unsigned long cong ; unsigned long cwnd ; t#size_t max_payload ; unsigned int tsh_size ; s#rpc_wait_queue binding ; s#rpc_wait_queue sending ; s#rpc_wait_queue resend ; s#rpc_wait_queue pending ; s#rpc_wait_queue backlog ; s#list_head free ; s#rpc_rqst * slot ; unsigned int max_reqs ; unsigned long state ; unsigned char shutdown : 1 , resvport : 1 , swapper : 1 ; unsigned int bind_index ; unsigned long connect_timeout , bind_timeout , reestablish_timeout ; unsigned int connect_cookie ; s#work_struct task_cleanup ; s#timer_list timer ; unsigned long last_used , idle_timeout ; t#spinlock_t transport_lock ; t#spinlock_t reserve_lock ; t#u32 xid ; s#rpc_task * snd_task ; s#svc_xprt * bc_xprt ; s#list_head recv ; struct { unsigned long bind_count , connect_count , connect_start , connect_time , sends , recvs , bad_xids ; unsigned long long req_u , bklog_u ; } stat ; const char * address_strings [ RPC_DISPLAY_MAX ] ; } 
s#rpc_version struct rpc_version { t#u32 number ; unsigned int nrprocs ; s#rpc_procinfo * procs ; } 
s#rpc_program struct rpc_program { char * name ; t#u32 number ; unsigned int nrvers ; s#rpc_version * * version ; s#rpc_stat * stats ; char * pipe_dir_name ; } 
s#rpc_stat struct rpc_stat { s#rpc_program * program ; unsigned int netcnt , netudpcnt , nettcpcnt , nettcpconn , netreconn ; unsigned int rpccnt , rpcretrans , rpcauthrefresh , rpcgarbage ; } 
s##rpc_iostats
s#rpc_rtt struct rpc_rtt { unsigned long timeo ; unsigned long srtt [ 5 ] ; unsigned long sdrtt [ 5 ] ; int ntimeouts [ 5 ] ; } 
s#rpc_clnt struct rpc_clnt { s#kref cl_kref ; s#list_head cl_clients ; s#list_head cl_tasks ; t#spinlock_t cl_lock ; s#rpc_xprt * cl_xprt ; s#rpc_procinfo * cl_procinfo ; t#u32 cl_prog , cl_vers , cl_maxproc ; char * cl_server ; char * cl_protname ; s#rpc_auth * cl_auth ; s#rpc_stat * cl_stats ; s#rpc_iostats * cl_metrics ; unsigned int cl_softrtry : 1 , cl_discrtry : 1 , cl_autobind : 1 , cl_chatty : 1 ; s#rpc_rtt * cl_rtt ; const s#rpc_timeout * cl_timeout ; int cl_nodelen ; char cl_nodename [ 32 ] ; s#path cl_path ; s#rpc_clnt * cl_parent ; s#rpc_rtt cl_rtt_default ; s#rpc_timeout cl_timeout_default ; s#rpc_program * cl_program ; char cl_inline_name [ 32 ] ; char * cl_principal ; } 
s#nsm_private struct nsm_private { unsigned char data [ 16 ] ; } 
s#nsm_handle struct nsm_handle { s#list_head sm_link ; t#atomic_t sm_count ; char * sm_mon_name ; char * sm_name ; s#__kernel_sockaddr_storage sm_addr ; t#size_t sm_addrlen ; unsigned int sm_monitored : 1 , sm_sticky : 1 ; s#nsm_private sm_priv ; char sm_addrbuf [ ( ( 8 * 4 + 7 ) + ( 1 + 10 ) + 1 ) ] ; } 
s#nlm_host struct nlm_host { s#hlist_node h_hash ; s#__kernel_sockaddr_storage h_addr ; t#size_t h_addrlen ; s#__kernel_sockaddr_storage h_srcaddr ; s#rpc_clnt * h_rpcclnt ; char * h_name ; t#u32 h_version ; unsigned short h_proto ; unsigned short h_reclaiming : 1 , h_server : 1 , h_noresvport : 1 , h_inuse : 1 ; t#wait_queue_head_t h_gracewait ; s#rw_semaphore h_rwsem ; t#u32 h_state ; t#u32 h_nsmstate ; t#u32 h_pidcount ; t#atomic_t h_count ; s#mutex h_mutex ; unsigned long h_nextrebind ; unsigned long h_expires ; s#list_head h_lockowners ; t#spinlock_t h_lock ; s#list_head h_granted ; s#list_head h_reclaim ; s#nsm_handle * h_nsmhandle ; char * h_addrbuf ; } 
s#nlmclnt_initdata struct nlmclnt_initdata { const char * hostname ; const s#sockaddr * address ; t#size_t addrlen ; unsigned short protocol ; t#u32 nfs_version ; int noresvport ; } 
nlmclnt_init extern s#nlm_host * nlmclnt_init ( const s#nlmclnt_initdata * ) 
nlmclnt_done extern void nlmclnt_done ( s#nlm_host * ) 

/* fs/lockd/clntproc.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##mtd_info
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##ipc_namespace
s##mnt_namespace
s##iw_handler_def
s##iw_public_data
s##array_cache
s##kmem_list3
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##rtable
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##radix_tree_node
s##workqueue_struct
s##svc_xprt
s##rpc_iostats
nlmclnt_proc extern int nlmclnt_proc ( s#nlm_host * , int , s#file_lock * ) 

/* fs/lockd/grace.o */
s#lock_manager struct lock_manager { s#list_head list ; } 
locks_start_grace void locks_start_grace ( s#lock_manager * ) 
locks_end_grace void locks_end_grace ( s#lock_manager * ) 
locks_in_grace int locks_in_grace ( void ) 

/* fs/lockd/svc.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##workqueue_struct
s##rpc_iostats
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##ipc_namespace
s##mnt_namespace
s##iw_handler_def
s##iw_public_data
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##rtable
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
t#svc_procfunc typedef t#__be32 ( * svc_procfunc ) ( s#svc_rqst * , void * , void * ) 
s#svc_procedure struct svc_procedure { t#svc_procfunc pc_func ; t#kxdrproc_t pc_decode ; t#kxdrproc_t pc_encode ; t#kxdrproc_t pc_release ; unsigned int pc_argsize ; unsigned int pc_ressize ; unsigned int pc_count ; unsigned int pc_cachetype ; unsigned int pc_xdrressize ; } 
s#svc_version struct svc_version { t#u32 vs_vers ; t#u32 vs_nproc ; s#svc_procedure * vs_proc ; t#u32 vs_xdrsize ; unsigned int vs_hidden : 1 ; int ( * vs_dispatch ) ( s#svc_rqst * , t#__be32 * ) ; } 
s#svc_stat struct svc_stat { s#svc_program * program ; unsigned int netcnt , netudpcnt , nettcpcnt , nettcpconn ; unsigned int rpccnt , rpcbadfmt , rpcbadauth , rpcbadclnt ; } 
s#svc_program struct svc_program { s#svc_program * pg_next ; t#u32 pg_prog ; unsigned int pg_lovers ; unsigned int pg_hivers ; unsigned int pg_nvers ; s#svc_version * * pg_vers ; char * pg_name ; char * pg_class ; s#svc_stat * pg_stats ; int ( * pg_authenticate ) ( s#svc_rqst * ) ; } 
s#svc_pool_stats struct svc_pool_stats { unsigned long packets ; unsigned long sockets_queued ; unsigned long threads_woken ; unsigned long overloads_avoided ; unsigned long threads_timedout ; } 
s#svc_pool struct svc_pool { unsigned int sp_id ; t#spinlock_t sp_lock ; s#list_head sp_threads ; s#list_head sp_sockets ; unsigned int sp_nrthreads ; s#list_head sp_all_threads ; int sp_nwaking ; s#svc_pool_stats sp_stats ; } 
t#svc_thread_fn typedef int ( * svc_thread_fn ) ( void * ) 
s#svc_serv struct svc_serv { s#svc_program * sv_program ; s#svc_stat * sv_stats ; t#spinlock_t sv_lock ; unsigned int sv_nrthreads ; unsigned int sv_maxconn ; unsigned int sv_max_payload ; unsigned int sv_max_mesg ; unsigned int sv_xdrsize ; s#list_head sv_permsocks ; s#list_head sv_tempsocks ; int sv_tmpcnt ; s#timer_list sv_temptimer ; char * sv_name ; unsigned int sv_nrpools ; s#svc_pool * sv_pools ; void ( * sv_shutdown ) ( s#svc_serv * ) ; s#module * sv_module ; t#svc_thread_fn sv_function ; } 
s#svc_xprt_ops struct svc_xprt_ops { s#svc_xprt * ( * xpo_create ) ( s#svc_serv * , s#sockaddr * , int , int ) ; s#svc_xprt * ( * xpo_accept ) ( s#svc_xprt * ) ; int ( * xpo_has_wspace ) ( s#svc_xprt * ) ; int ( * xpo_recvfrom ) ( s#svc_rqst * ) ; void ( * xpo_prep_reply_hdr ) ( s#svc_rqst * ) ; int ( * xpo_sendto ) ( s#svc_rqst * ) ; void ( * xpo_release_rqst ) ( s#svc_rqst * ) ; void ( * xpo_detach ) ( s#svc_xprt * ) ; void ( * xpo_free ) ( s#svc_xprt * ) ; } 
s#svc_xprt_class struct svc_xprt_class { const char * xcl_name ; s#module * xcl_owner ; s#svc_xprt_ops * xcl_ops ; s#list_head xcl_list ; t#u32 xcl_max_payload ; } 
s#svc_xprt struct svc_xprt { s#svc_xprt_class * xpt_class ; s#svc_xprt_ops * xpt_ops ; s#kref xpt_ref ; s#list_head xpt_list ; s#list_head xpt_ready ; unsigned long xpt_flags ; s#svc_pool * xpt_pool ; s#svc_serv * xpt_server ; t#atomic_t xpt_reserved ; s#mutex xpt_mutex ; t#spinlock_t xpt_lock ; void * xpt_auth_cache ; s#list_head xpt_deferred ; s#__kernel_sockaddr_storage xpt_local ; t#size_t xpt_locallen ; s#__kernel_sockaddr_storage xpt_remote ; t#size_t xpt_remotelen ; s#rpc_wait_queue xpt_bc_pending ; } 
s#auth_domain struct auth_domain { s#kref ref ; s#hlist_node hash ; char * name ; s#auth_ops * flavour ; } 
s#auth_ops struct auth_ops { char * name ; s#module * owner ; int flavour ; int ( * accept ) ( s#svc_rqst * , t#__be32 * ) ; int ( * release ) ( s#svc_rqst * ) ; void ( * domain_release ) ( s#auth_domain * ) ; int ( * set_client ) ( s#svc_rqst * ) ; } 
s#svc_cred struct svc_cred { t#uid_t cr_uid ; t#gid_t cr_gid ; s#group_info * cr_group_info ; } 
u#svc_addr_u union svc_addr_u { s#in_addr addr ; s#in6_addr addr6 ; } 
s#cache_head struct cache_head { s#cache_head * next ; t#time_t expiry_time ; t#time_t last_refresh ; s#kref ref ; unsigned long flags ; } 
s#cache_deferred_req struct cache_deferred_req { s#list_head hash ; s#list_head recent ; s#cache_head * item ; void * owner ; void ( * revisit ) ( s#cache_deferred_req * , int ) ; } 
s#svc_deferred_req struct svc_deferred_req { t#u32 prot ; s#svc_xprt * xprt ; s#__kernel_sockaddr_storage addr ; t#size_t addrlen ; u#svc_addr_u daddr ; s#cache_deferred_req handle ; t#size_t xprt_hlen ; int argslen ; t#__be32 args [ 0 ] ; } 
s#cache_req struct cache_req { s#cache_deferred_req * ( * defer ) ( s#cache_req * ) ; } 
s##svc_cacherep
s#nfs_fhbase_old struct nfs_fhbase_old { t#__u32 fb_dcookie ; t#__u32 fb_ino ; t#__u32 fb_dirino ; t#__u32 fb_dev ; t#__u32 fb_xdev ; t#__u32 fb_xino ; t#__u32 fb_generation ; } 
s#nfs_fhbase_new struct nfs_fhbase_new { t#__u8 fb_version ; t#__u8 fb_auth_type ; t#__u8 fb_fsid_type ; t#__u8 fb_fileid_type ; t#__u32 fb_auth [ 1 ] ; } 
s#knfsd_fh struct knfsd_fh { unsigned int fh_size ; union { s#nfs_fhbase_old fh_old ; t#__u32 fh_pad [ 128 / 4 ] ; s#nfs_fhbase_new fh_new ; } fh_base ; } 
s#svc_rqst struct svc_rqst { s#list_head rq_list ; s#list_head rq_all ; s#svc_xprt * rq_xprt ; s#__kernel_sockaddr_storage rq_addr ; t#size_t rq_addrlen ; s#svc_serv * rq_server ; s#svc_pool * rq_pool ; s#svc_procedure * rq_procinfo ; s#auth_ops * rq_authop ; t#u32 rq_flavor ; s#svc_cred rq_cred ; void * rq_xprt_ctxt ; s#svc_deferred_req * rq_deferred ; int rq_usedeferral ; t#size_t rq_xprt_hlen ; s#xdr_buf rq_arg ; s#xdr_buf rq_res ; s#page * rq_pages [ ( ( ( 1 * 1024 * 1024u ) + ( ( 1UL ) << 12 ) - 1 ) / ( ( 1UL ) << 12 ) + 2 + 1 ) ] ; s#page * * rq_respages ; int rq_resused ; s#kvec rq_vec [ ( ( ( 1 * 1024 * 1024u ) + ( ( 1UL ) << 12 ) - 1 ) / ( ( 1UL ) << 12 ) + 2 + 1 ) ] ; t#__be32 rq_xid ; t#u32 rq_prog ; t#u32 rq_vers ; t#u32 rq_proc ; t#u32 rq_prot ; unsigned short rq_secure : 1 ; u#svc_addr_u rq_daddr ; void * rq_argp ; void * rq_resp ; void * rq_auth_data ; int rq_reserved ; s#cache_req rq_chandle ; s#auth_domain * rq_client ; s#auth_domain * rq_gssclient ; s#svc_cacherep * rq_cacherep ; s#knfsd_fh * rq_reffh ; int rq_splice_ok ; t#wait_queue_head_t rq_wait ; s#task_struct * rq_task ; int rq_waking ; } 
s#nfs_fh struct nfs_fh { unsigned short size ; unsigned char data [ 128 ] ; } 
s#nlmsvc_binding struct nlmsvc_binding { t#__be32 ( * fopen ) ( s#svc_rqst * , s#nfs_fh * , s#file * * ) ; void ( * fclose ) ( s#file * ) ; } 
nlmsvc_ops extern s#nlmsvc_binding * nlmsvc_ops 
lockd_up extern int lockd_up ( void ) 
lockd_down extern void lockd_down ( void ) 

/* fs/lockd/svcsubs.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##workqueue_struct
s##svc_xprt
s##rpc_iostats
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##ipc_namespace
s##mnt_namespace
s##nameidata
s##iw_handler_def
s##iw_public_data
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##rtable
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##hd_struct
s##gendisk
s##cdev
s##posix_acl
s##kstatfs
s##export_operations
s##xattr_handler
s##mtd_info
nlmsvc_unlock_all_by_sb int nlmsvc_unlock_all_by_sb ( s#super_block * ) 
nlmsvc_unlock_all_by_ip int nlmsvc_unlock_all_by_ip ( s#sockaddr * ) 

/* fs/locks.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##bsd_acct_struct
s##ds_context
s##fs_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##net
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##poll_table_struct
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##nlm_lockowner
s##nfs4_lock_state
locks_release_private extern void locks_release_private ( s#file_lock * ) 
locks_init_lock extern void locks_init_lock ( s#file_lock * ) 
__locks_copy_lock extern void __locks_copy_lock ( s#file_lock * , const s#file_lock * ) 
locks_copy_lock extern void locks_copy_lock ( s#file_lock * , s#file_lock * ) 
posix_test_lock extern void posix_test_lock ( s#file * , s#file_lock * ) 
posix_lock_file extern int posix_lock_file ( s#file * , s#file_lock * , s#file_lock * ) 
posix_lock_file_wait extern int posix_lock_file_wait ( s#file * , s#file_lock * ) 
locks_mandatory_area extern int locks_mandatory_area ( int , s#inode * , s#file * , t#loff_t , t#size_t ) 
lease_modify extern int lease_modify ( s#file_lock * * , int ) 
__break_lease extern int __break_lease ( s#inode * , unsigned int ) 
lease_get_mtime extern void lease_get_mtime ( s#inode * , s#timespec * ) 
generic_setlease extern int generic_setlease ( s#file * , long , s#file_lock * * ) 
vfs_setlease extern int vfs_setlease ( s#file * , long , s#file_lock * * ) 
flock_lock_file_wait extern int flock_lock_file_wait ( s#file * , s#file_lock * ) 
vfs_test_lock extern int vfs_test_lock ( s#file * , s#file_lock * ) 
vfs_lock_file extern int vfs_lock_file ( s#file * , unsigned int , s#file_lock * , s#file_lock * ) 
locks_remove_posix extern void locks_remove_posix ( s#file * , t#fl_owner_t ) 
posix_unblock_lock extern int posix_unblock_lock ( s#file * , s#file_lock * ) 
vfs_cancel_lock extern int vfs_cancel_lock ( s#file * , s#file_lock * ) 
lock_may_read extern int lock_may_read ( s#inode * , t#loff_t , unsigned long ) 
lock_may_write extern int lock_may_write ( s#inode * , t#loff_t , unsigned long ) 

/* fs/mbcache.o */
s##mb_cache
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##hd_struct
s##gendisk
s#mb_cache_entry struct mb_cache_entry { s#list_head e_lru_list ; s#mb_cache * e_cache ; unsigned short e_used ; unsigned short e_queued ; s#block_device * e_bdev ; t#sector_t e_block ; s#list_head e_block_list ; struct { s#list_head o_list ; unsigned int o_key ; } e_indexes [ 0 ] ; } 
s#mb_cache_op struct mb_cache_op { int ( * free ) ( s#mb_cache_entry * , t#gfp_t ) ; } 
mb_cache_create s#mb_cache * mb_cache_create ( const char * , s#mb_cache_op * , t#size_t , int , int ) 
mb_cache_shrink void mb_cache_shrink ( s#block_device * ) 
mb_cache_destroy void mb_cache_destroy ( s#mb_cache * ) 
mb_cache_entry_alloc s#mb_cache_entry * mb_cache_entry_alloc ( s#mb_cache * , t#gfp_t ) 
mb_cache_entry_insert int mb_cache_entry_insert ( s#mb_cache_entry * , s#block_device * , t#sector_t , unsigned int [ ] ) 
mb_cache_entry_release void mb_cache_entry_release ( s#mb_cache_entry * ) 
mb_cache_entry_free void mb_cache_entry_free ( s#mb_cache_entry * ) 
mb_cache_entry_get s#mb_cache_entry * mb_cache_entry_get ( s#mb_cache * , s#block_device * , t#sector_t ) 
mb_cache_entry_find_first s#mb_cache_entry * mb_cache_entry_find_first ( s#mb_cache * , int , s#block_device * , unsigned int ) 
mb_cache_entry_find_next s#mb_cache_entry * mb_cache_entry_find_next ( s#mb_cache_entry * , int , s#block_device * , unsigned int ) 

/* fs/mpage.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##array_cache
s##kmem_list3
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
mpage_readpages int mpage_readpages ( s#address_space * , s#list_head * , unsigned , t#get_block_t ) 
mpage_readpage int mpage_readpage ( s#page * , t#get_block_t ) 
mpage_writepages int mpage_writepages ( s#address_space * , s#writeback_control * , t#get_block_t ) 
mpage_writepage int mpage_writepage ( s#page * , t#get_block_t * , s#writeback_control * ) 

/* fs/namei.o */
putname extern void putname ( const char * ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##mnt_namespace
path_get extern void path_get ( s#path * ) 
path_put extern void path_put ( s#path * ) 
release_open_intent extern void release_open_intent ( s#nameidata * ) 
filp_open extern s#file * filp_open ( const char * , int , int ) 
lookup_create extern s#dentry * lookup_create ( s#nameidata * , int ) 
user_path_at extern int user_path_at ( int , const char * , unsigned , s#path * ) 
follow_down extern int follow_down ( s#path * ) 
follow_up extern int follow_up ( s#path * ) 
get_write_access extern int get_write_access ( s#inode * ) 
getname extern char * getname ( const char * ) 
lock_rename extern s#dentry * lock_rename ( s#dentry * , s#dentry * ) 
lookup_one_len extern s#dentry * lookup_one_len ( const char * , s#dentry * , int ) 
page_follow_link_light extern void * page_follow_link_light ( s#dentry * , s#nameidata * ) 
page_put_link extern void page_put_link ( s#dentry * , s#nameidata * , void * ) 
page_readlink extern int page_readlink ( s#dentry * , char * , int ) 
__page_symlink extern int __page_symlink ( s#inode * , const char * , int , int ) 
page_symlink extern int page_symlink ( s#inode * , const char * , int ) 
page_symlink_inode_operations extern const s#inode_operations page_symlink_inode_operations 
path_lookup extern int path_lookup ( const char * , unsigned , s#nameidata * ) 
kern_path extern int kern_path ( const char * , unsigned , s#path * ) 
vfs_path_lookup extern int vfs_path_lookup ( s#dentry * , s#vfsmount * , const char * , unsigned int , s#nameidata * ) 
inode_permission extern int inode_permission ( s#inode * , int ) 
file_permission extern int file_permission ( s#file * , int ) 
unlock_rename extern void unlock_rename ( s#dentry * , s#dentry * ) 
vfs_create extern int vfs_create ( s#inode * , s#dentry * , int , s#nameidata * ) 
vfs_follow_link extern int vfs_follow_link ( s#nameidata * , const char * ) 
vfs_link extern int vfs_link ( s#dentry * , s#inode * , s#dentry * ) 
vfs_mkdir extern int vfs_mkdir ( s#inode * , s#dentry * , int ) 
vfs_mknod extern int vfs_mknod ( s#inode * , s#dentry * , int , t#dev_t ) 
generic_permission extern int generic_permission ( s#inode * , int , int ( * ) ( s#inode * , int ) ) 
vfs_readlink extern int vfs_readlink ( s#dentry * , char * , int , const char * ) 
vfs_rename extern int vfs_rename ( s#inode * , s#dentry * , s#inode * , s#dentry * ) 
vfs_rmdir extern int vfs_rmdir ( s#inode * , s#dentry * ) 
vfs_symlink extern int vfs_symlink ( s#inode * , s#dentry * , const char * ) 
vfs_unlink extern int vfs_unlink ( s#inode * , s#dentry * ) 
dentry_unhash extern void dentry_unhash ( s#dentry * ) 
generic_readlink extern int generic_readlink ( s#dentry * , char * , int ) 

/* fs/namespace.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s#mnt_namespace struct mnt_namespace { t#atomic_t count ; s#vfsmount * root ; s#list_head list ; t#wait_queue_head_t poll ; int event ; } 
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##uts_namespace
s##ipc_namespace
s##net
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##sysfs_dirent
fs_kobj extern s#kobject * fs_kobj 
__mnt_is_readonly extern int __mnt_is_readonly ( s#vfsmount * ) 
mnt_want_write extern int mnt_want_write ( s#vfsmount * ) 
mnt_clone_write extern int mnt_clone_write ( s#vfsmount * ) 
mnt_want_write_file extern int mnt_want_write_file ( s#file * ) 
mnt_drop_write extern void mnt_drop_write ( s#vfsmount * ) 
simple_set_mnt extern void simple_set_mnt ( s#vfsmount * , s#super_block * ) 
mntput_no_expire extern void mntput_no_expire ( s#vfsmount * ) 
mnt_pin extern void mnt_pin ( s#vfsmount * ) 
mnt_unpin extern void mnt_unpin ( s#vfsmount * ) 
generic_show_options extern int generic_show_options ( s#seq_file * , s#vfsmount * ) 
save_mount_options extern void save_mount_options ( s#super_block * , char * ) 
replace_mount_options extern void replace_mount_options ( s#super_block * , char * ) 
may_umount_tree extern int may_umount_tree ( s#vfsmount * ) 
may_umount extern int may_umount ( s#vfsmount * ) 
do_add_mount extern int do_add_mount ( s#vfsmount * , s#path * , int , s#list_head * ) 
mark_mounts_for_expiry extern void mark_mounts_for_expiry ( s#list_head * ) 
create_mnt_ns extern s#mnt_namespace * create_mnt_ns ( s#vfsmount * ) 
put_mnt_ns extern void put_mnt_ns ( s#mnt_namespace * ) 

/* fs/nfs4acl_base.o */
nfs4ace_owner_who extern const char nfs4ace_owner_who [ ] 
nfs4ace_group_who extern const char nfs4ace_group_who [ ] 
nfs4ace_everyone_who extern const char nfs4ace_everyone_who [ ] 
s#nfs4ace struct nfs4ace { unsigned short e_type ; unsigned short e_flags ; unsigned int e_mask ; union { unsigned int e_id ; const char * e_who ; } u ; } 
s#nfs4acl struct nfs4acl { t#atomic_t a_refcount ; unsigned int a_owner_mask ; unsigned int a_group_mask ; unsigned int a_other_mask ; unsigned short a_count ; unsigned short a_flags ; s#nfs4ace a_entries [ 0 ] ; } 
nfs4acl_alloc extern s#nfs4acl * nfs4acl_alloc ( int ) 
nfs4acl_masks_to_mode extern int nfs4acl_masks_to_mode ( const s#nfs4acl * ) 
nfs4acl_chmod extern s#nfs4acl * nfs4acl_chmod ( s#nfs4acl * , t#mode_t ) 
nfs4acl_want_to_mask extern unsigned int nfs4acl_want_to_mask ( int ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
nfs4acl_permission extern int nfs4acl_permission ( s#inode * , const s#nfs4acl * , unsigned int ) 
nfs4acl_generic_permission extern int nfs4acl_generic_permission ( s#inode * , unsigned int ) 
nfs4ace_set_who extern int nfs4ace_set_who ( s#nfs4ace * , const char * ) 
nfs4acl_inherit extern s#nfs4acl * nfs4acl_inherit ( const s#nfs4acl * , t#mode_t ) 

/* fs/nfs4acl_compat.o */
nfs4acl_apply_masks extern int nfs4acl_apply_masks ( s#nfs4acl * * ) 

/* fs/nfs4acl_xattr.o */
nfs4acl_from_xattr extern s#nfs4acl * nfs4acl_from_xattr ( const void * , t#size_t ) 
nfs4acl_xattr_size extern t#size_t nfs4acl_xattr_size ( const s#nfs4acl * ) 
nfs4acl_to_xattr extern void nfs4acl_to_xattr ( const s#nfs4acl * , void * ) 

/* fs/nfs_common/nfsacl.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##kiocb
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
nfsacl_encode extern unsigned int nfsacl_encode ( s#xdr_buf * , unsigned int , s#inode * , s#posix_acl * , int , int ) 
nfsacl_decode extern unsigned int nfsacl_decode ( s#xdr_buf * , unsigned int , unsigned int * , s#posix_acl * * ) 

/* fs/nfsd/nfs4acl.o */
s#nfs4_ace struct nfs4_ace { t#uint32_t type ; t#uint32_t flag ; t#uint32_t access_mask ; int whotype ; t#uid_t who ; } 
s#nfs4_acl struct nfs4_acl { t#uint32_t naces ; s#nfs4_ace aces [ 0 ] ; } 
nfs4_acl_posix_to_nfsv4 s#nfs4_acl * nfs4_acl_posix_to_nfsv4 ( s#posix_acl * , s#posix_acl * , unsigned int ) 
nfs4_acl_nfsv4_to_posix int nfs4_acl_nfsv4_to_posix ( s#nfs4_acl * , s#posix_acl * * , s#posix_acl * * , unsigned int ) 
nfs4_acl_new s#nfs4_acl * nfs4_acl_new ( int ) 
nfs4_acl_get_whotype int nfs4_acl_get_whotype ( char * , t#u32 ) 
nfs4_acl_write_who int nfs4_acl_write_who ( int , char * ) 

/* fs/nls/nls_base.o */
t#unicode_t typedef t#u32 unicode_t 
utf8_to_utf32 extern int utf8_to_utf32 ( const t#u8 * , int , t#unicode_t * ) 
utf32_to_utf8 extern int utf32_to_utf8 ( t#unicode_t , t#u8 * , int ) 
utf8s_to_utf16s extern int utf8s_to_utf16s ( const t#u8 * , int , t#wchar_t * ) 
e#utf16_endian enum utf16_endian { UTF16_HOST_ENDIAN , UTF16_LITTLE_ENDIAN , UTF16_BIG_ENDIAN } 
utf16s_to_utf8s extern int utf16s_to_utf8s ( const t#wchar_t * , int , e#utf16_endian , t#u8 * , int ) 
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
register_nls extern int register_nls ( s#nls_table * ) 
unregister_nls extern int unregister_nls ( s#nls_table * ) 
unload_nls extern void unload_nls ( s#nls_table * ) 
load_nls extern s#nls_table * load_nls ( char * ) 
load_nls_default extern s#nls_table * load_nls_default ( void ) 

/* fs/notify/fsnotify.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
__fsnotify_inode_delete extern void __fsnotify_inode_delete ( s#inode * ) 
__fsnotify_parent extern void __fsnotify_parent ( s#dentry * , t#__u32 ) 
fsnotify extern void fsnotify ( s#inode * , t#__u32 , void * , int , const char * , t#u32 ) 

/* fs/notify/inotify/inotify.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##radix_tree_node
s##backing_dev_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s#inotify_operations struct inotify_operations { void ( * handle_event ) ( s#inotify_watch * , t#u32 , t#u32 , t#u32 , const char * , s#inode * ) ; void ( * destroy_watch ) ( s#inotify_watch * ) ; } 
s#inotify_handle struct inotify_handle { s#idr idr ; s#mutex mutex ; s#list_head watches ; t#atomic_t count ; t#u32 last_wd ; const s#inotify_operations * in_ops ; } 
s#inotify_watch struct inotify_watch { s#list_head h_list ; s#list_head i_list ; t#atomic_t count ; s#inotify_handle * ih ; s#inode * inode ; t#__s32 wd ; t#__u32 mask ; } 
get_inotify_watch extern void get_inotify_watch ( s#inotify_watch * ) 
put_inotify_watch extern void put_inotify_watch ( s#inotify_watch * ) 
inotify_remove_watch_locked extern void inotify_remove_watch_locked ( s#inotify_handle * , s#inotify_watch * ) 
inotify_inode_queue_event extern void inotify_inode_queue_event ( s#inode * , t#__u32 , t#__u32 , const char * , s#inode * ) 
inotify_dentry_parent_queue_event extern void inotify_dentry_parent_queue_event ( s#dentry * , t#__u32 , t#__u32 , const char * ) 
inotify_get_cookie extern t#u32 inotify_get_cookie ( void ) 
inotify_unmount_inodes extern void inotify_unmount_inodes ( s#list_head * ) 
inotify_inode_is_dead extern void inotify_inode_is_dead ( s#inode * ) 
inotify_init extern s#inotify_handle * inotify_init ( const s#inotify_operations * ) 
inotify_init_watch extern void inotify_init_watch ( s#inotify_watch * ) 
inotify_destroy extern void inotify_destroy ( s#inotify_handle * ) 
inotify_find_watch extern t#__s32 inotify_find_watch ( s#inotify_handle * , s#inode * , s#inotify_watch * * ) 
inotify_find_update_watch extern t#__s32 inotify_find_update_watch ( s#inotify_handle * , s#inode * , t#u32 ) 
inotify_add_watch extern t#__s32 inotify_add_watch ( s#inotify_handle * , s#inotify_watch * , s#inode * , t#__u32 ) 
inotify_rm_wd extern int inotify_rm_wd ( s#inotify_handle * , t#__u32 ) 
inotify_rm_watch extern int inotify_rm_watch ( s#inotify_handle * , s#inotify_watch * ) 

/* fs/notify/notification.o */
fsnotify_get_cookie extern t#u32 fsnotify_get_cookie ( void ) 

/* fs/ocfs2/cluster/heartbeat.o */
o2hb_fill_node_map void o2hb_fill_node_map ( unsigned long * , unsigned ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s#o2nm_node struct o2nm_node { t#spinlock_t nd_lock ; s#config_item nd_item ; char nd_name [ 64 + 1 ] ; t#__u8 nd_num ; t#__be32 nd_ipv4_address ; t#__be16 nd_ipv4_port ; s#rb_node nd_ip_node ; int nd_local ; unsigned long nd_set_attributes ; } 
t#o2hb_cb_func typedef void ( o2hb_cb_func ) ( s#o2nm_node * , int , void * ) 
e#o2hb_callback_type enum o2hb_callback_type { O2HB_NODE_DOWN_CB = 0 , O2HB_NODE_UP_CB , O2HB_NUM_CB } 
s#o2hb_callback_func struct o2hb_callback_func { t#u32 hc_magic ; s#list_head hc_item ; t#o2hb_cb_func * hc_func ; void * hc_data ; int hc_priority ; e#o2hb_callback_type hc_type ; } 
o2hb_setup_callback void o2hb_setup_callback ( s#o2hb_callback_func * , e#o2hb_callback_type , t#o2hb_cb_func * , void * , int ) 
o2hb_register_callback int o2hb_register_callback ( const char * , s#o2hb_callback_func * ) 
o2hb_unregister_callback void o2hb_unregister_callback ( const char * , s#o2hb_callback_func * ) 
o2hb_check_node_heartbeating int o2hb_check_node_heartbeating ( t#u8 ) 
o2hb_check_node_heartbeating_from_callback int o2hb_check_node_heartbeating_from_callback ( t#u8 ) 
o2hb_check_local_node_heartbeating int o2hb_check_local_node_heartbeating ( void ) 
o2hb_stop_all_regions void o2hb_stop_all_regions ( void ) 

/* fs/ocfs2/cluster/masklog.o */
s#mlog_bits struct mlog_bits { unsigned long words [ 64 / 64 ] ; } 
mlog_and_bits extern s#mlog_bits mlog_and_bits 
mlog_not_bits extern s#mlog_bits mlog_not_bits 

/* fs/ocfs2/cluster/nodemanager.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
o2nm_get_node_by_num s#o2nm_node * o2nm_get_node_by_num ( t#u8 ) 
o2nm_configured_node_map int o2nm_configured_node_map ( unsigned long * , unsigned ) 
o2nm_get_node_by_ip s#o2nm_node * o2nm_get_node_by_ip ( t#__be32 ) 
o2nm_node_put void o2nm_node_put ( s#o2nm_node * ) 
o2nm_node_get void o2nm_node_get ( s#o2nm_node * ) 
o2nm_this_node t#u8 o2nm_this_node ( void ) 

/* fs/ocfs2/cluster/tcp.o */
s#o2net_msg struct o2net_msg { t#__be16 magic ; t#__be16 data_len ; t#__be16 msg_type ; t#__be16 pad1 ; t#__be32 sys_status ; t#__be32 status ; t#__be32 key ; t#__be32 msg_num ; t#__u8 buf [ 0 ] ; } 
t#o2net_msg_handler_func typedef int ( o2net_msg_handler_func ) ( s#o2net_msg * , t#u32 , void * , void * * ) 
t#o2net_post_msg_handler_func typedef void ( o2net_post_msg_handler_func ) ( int , void * , void * ) 
o2net_register_handler int o2net_register_handler ( t#u32 , t#u32 , t#u32 , t#o2net_msg_handler_func * , void * , t#o2net_post_msg_handler_func * , s#list_head * ) 
o2net_unregister_handler_list void o2net_unregister_handler_list ( s#list_head * ) 
o2net_send_message_vec int o2net_send_message_vec ( t#u32 , t#u32 , s#kvec * , t#size_t , t#u8 , int * ) 
o2net_send_message int o2net_send_message ( t#u32 , t#u32 , void * , t#u32 , t#u8 , int * ) 

/* fs/ocfs2/dlm/dlmdebug.o */
s#dlm_migratable_lock struct dlm_migratable_lock { t#__be64 cookie ; t#__be16 pad1 ; t#u8 list ; t#u8 flags ; t#s8 type ; t#s8 convert_type ; t#s8 highest_blocked ; t#u8 node ; } 
s#dlm_recovery_ctxt struct dlm_recovery_ctxt { s#list_head resources ; s#list_head received ; s#list_head node_data ; t#u8 new_master ; t#u8 dead_node ; t#u16 state ; unsigned long node_map [ ( ( ( 255 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; t#wait_queue_head_t event ; } 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s#dlm_debug_ctxt struct dlm_debug_ctxt { s#kref debug_refcnt ; s#dentry * debug_state_dentry ; s#dentry * debug_lockres_dentry ; s#dentry * debug_mle_dentry ; s#dentry * debug_purgelist_dentry ; } 
e#dlm_ctxt_state enum dlm_ctxt_state { DLM_CTXT_NEW = 0 , DLM_CTXT_JOINED , DLM_CTXT_IN_SHUTDOWN , DLM_CTXT_LEAVING , } 
s##workqueue_struct
s#dlm_protocol_version struct dlm_protocol_version { t#u8 pv_major ; t#u8 pv_minor ; } 
s#dlm_ctxt struct dlm_ctxt { s#list_head list ; s#hlist_head * * lockres_hash ; s#list_head dirty_list ; s#list_head purge_list ; s#list_head pending_asts ; s#list_head pending_basts ; s#list_head tracking_list ; unsigned int purge_count ; t#spinlock_t spinlock ; t#spinlock_t ast_lock ; t#spinlock_t track_lock ; char * name ; t#u8 node_num ; t#u32 key ; t#u8 joining_node ; t#wait_queue_head_t dlm_join_events ; unsigned long live_nodes_map [ ( ( ( 255 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long domain_map [ ( ( ( 255 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned long recovery_map [ ( ( ( 255 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; s#dlm_recovery_ctxt reco ; t#spinlock_t master_lock ; s#hlist_head * * master_hash ; s#list_head mle_hb_events ; t#atomic_t mle_tot_count [ DLM_MLE_NUM_TYPES ] ; t#atomic_t mle_cur_count [ DLM_MLE_NUM_TYPES ] ; t#atomic_t res_tot_count ; t#atomic_t res_cur_count ; s#dlm_debug_ctxt * dlm_debug_ctxt ; s#dentry * dlm_debugfs_subroot ; s#kref dlm_refs ; e#dlm_ctxt_state dlm_state ; unsigned int num_joins ; s#o2hb_callback_func dlm_hb_up ; s#o2hb_callback_func dlm_hb_down ; s#task_struct * dlm_thread_task ; s#task_struct * dlm_reco_thread_task ; s#workqueue_struct * dlm_worker ; t#wait_queue_head_t dlm_thread_wq ; t#wait_queue_head_t dlm_reco_thread_wq ; t#wait_queue_head_t ast_wq ; t#wait_queue_head_t migration_wq ; s#work_struct dispatched_work ; s#list_head work_list ; t#spinlock_t work_lock ; s#list_head dlm_domain_handlers ; s#list_head dlm_eviction_callbacks ; s#dlm_protocol_version fs_locking_proto ; s#dlm_protocol_version dlm_locking_proto ; } 
s#dlm_lock_resource struct dlm_lock_resource { s#hlist_node hash_node ; s#qstr lockname ; s#kref refs ; s#list_head granted ; s#list_head converting ; s#list_head blocked ; s#list_head purge ; s#list_head dirty ; s#list_head recovering ; s#list_head tracking ; unsigned long last_used ; s#dlm_ctxt * dlm ; unsigned migration_pending : 1 ; t#atomic_t asts_reserved ; t#spinlock_t spinlock ; t#wait_queue_head_t wq ; t#u8 owner ; t#u16 state ; char lvb [ 64 ] ; unsigned int inflight_locks ; unsigned long refmap [ ( ( ( 255 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; } 
t#dlm_astlockfunc_t typedef void ( dlm_astlockfunc_t ) ( void * ) 
t#dlm_bastlockfunc_t typedef void ( dlm_bastlockfunc_t ) ( void * , int ) 
e#dlm_status enum dlm_status { DLM_NORMAL = 0 , DLM_GRANTED , DLM_DENIED , DLM_DENIED_NOLOCKS , DLM_WORKING , DLM_BLOCKED , DLM_BLOCKED_ORPHAN , DLM_DENIED_GRACE_PERIOD , DLM_SYSERR , DLM_NOSUPPORT , DLM_CANCELGRANT , DLM_IVLOCKID , DLM_SYNC , DLM_BADTYPE , DLM_BADRESOURCE , DLM_MAXHANDLES , DLM_NOCLINFO , DLM_NOLOCKMGR , DLM_NOPURGED , DLM_BADARGS , DLM_VOID , DLM_NOTQUEUED , DLM_IVBUFLEN , DLM_CVTUNGRANT , DLM_BADPARAM , DLM_VALNOTVALID , DLM_REJECTED , DLM_ABORT , DLM_CANCEL , DLM_IVRESHANDLE , DLM_DEADLOCK , DLM_DENIED_NOASTS , DLM_FORWARD , DLM_TIMEOUT , DLM_IVGROUPID , DLM_VERS_CONFLICT , DLM_BAD_DEVICE_PATH , DLM_NO_DEVICE_PERMISSION , DLM_NO_CONTROL_DEVICE , DLM_RECOVERING , DLM_MIGRATING , DLM_MAXSTATS , } 
s#dlm_lockstatus struct dlm_lockstatus { e#dlm_status status ; t#u32 flags ; s#dlm_lock * lockid ; char lvb [ 64 ] ; } 
s#dlm_lock struct dlm_lock { s#dlm_migratable_lock ml ; s#list_head list ; s#list_head ast_list ; s#list_head bast_list ; s#dlm_lock_resource * lockres ; t#spinlock_t spinlock ; s#kref lock_refs ; t#dlm_astlockfunc_t * ast ; t#dlm_bastlockfunc_t * bast ; void * astdata ; s#dlm_lockstatus * lksb ; unsigned ast_pending : 1 , bast_pending : 1 , convert_pending : 1 , lock_pending : 1 , cancel_pending : 1 , unlock_pending : 1 , lksb_kernel_allocated : 1 ; } 
dlm_print_one_lock void dlm_print_one_lock ( s#dlm_lock * ) 
dlm_errmsg const char * dlm_errmsg ( e#dlm_status ) 
dlm_errname const char * dlm_errname ( e#dlm_status ) 

/* fs/ocfs2/dlm/dlmdomain.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##workqueue_struct
dlm_unregister_domain void dlm_unregister_domain ( s#dlm_ctxt * ) 
dlm_register_domain s#dlm_ctxt * dlm_register_domain ( const char * , t#u32 , s#dlm_protocol_version * ) 
t#dlm_eviction_func typedef void ( dlm_eviction_func ) ( int , void * ) 
s#dlm_eviction_cb struct dlm_eviction_cb { s#list_head ec_item ; t#dlm_eviction_func * ec_func ; void * ec_data ; } 
dlm_setup_eviction_cb void dlm_setup_eviction_cb ( s#dlm_eviction_cb * , t#dlm_eviction_func * , void * ) 
dlm_register_eviction_cb void dlm_register_eviction_cb ( s#dlm_ctxt * , s#dlm_eviction_cb * ) 
dlm_unregister_eviction_cb void dlm_unregister_eviction_cb ( s#dlm_eviction_cb * ) 

/* fs/ocfs2/dlm/dlmlock.o */
s##dlm_debug_ctxt
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##vfsmount
s##kstatfs
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##blk_trace
s##timer_rand_state
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##workqueue_struct
dlmlock e#dlm_status dlmlock ( s#dlm_ctxt * , int , s#dlm_lockstatus * , int , const char * , int , t#dlm_astlockfunc_t * , void * , t#dlm_bastlockfunc_t * ) 

/* fs/ocfs2/dlm/dlmunlock.o */
s##dlm_debug_ctxt
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##vfsmount
s##kstatfs
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_geometry
s##blk_trace
s##timer_rand_state
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##workqueue_struct
t#dlm_astunlockfunc_t typedef void ( dlm_astunlockfunc_t ) ( void * , e#dlm_status ) 
dlmunlock e#dlm_status dlmunlock ( s#dlm_ctxt * , s#dlm_lockstatus * , int , t#dlm_astunlockfunc_t * , void * ) 

/* fs/ocfs2/stackglue.o */
s#ocfs2_protocol_version struct ocfs2_protocol_version { t#u8 pv_major ; t#u8 pv_minor ; } 
s##dlm_lock
s#fsdlm_lksb_plus_lvb struct fsdlm_lksb_plus_lvb { s#dlm_lksb lksb ; char lvb [ 64 ] ; } 
s#ocfs2_dlm_lksb struct ocfs2_dlm_lksb { union { s#dlm_lockstatus lksb_o2dlm ; s#dlm_lksb lksb_fsdlm ; s#fsdlm_lksb_plus_lvb padding ; } ; s#ocfs2_cluster_connection * lksb_conn ; } 
s#ocfs2_locking_protocol struct ocfs2_locking_protocol { s#ocfs2_protocol_version lp_max_version ; void ( * lp_lock_ast ) ( s#ocfs2_dlm_lksb * ) ; void ( * lp_blocking_ast ) ( s#ocfs2_dlm_lksb * , int ) ; void ( * lp_unlock_ast ) ( s#ocfs2_dlm_lksb * , int ) ; } 
s#ocfs2_cluster_connection struct ocfs2_cluster_connection { char cc_name [ 64 ] ; int cc_namelen ; s#ocfs2_protocol_version cc_version ; s#ocfs2_locking_protocol * cc_proto ; void ( * cc_recovery_handler ) ( int , void * ) ; void * cc_recovery_data ; void * cc_lockspace ; void * cc_private ; } 
s##vfsmount
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##kiocb
s##iovec
s##poll_table_struct
s##vm_area_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##page
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##radix_tree_node
s##writeback_control
s##cdev
s##posix_acl
s##cred
s#ocfs2_stack_operations struct ocfs2_stack_operations { int ( * connect ) ( s#ocfs2_cluster_connection * ) ; int ( * disconnect ) ( s#ocfs2_cluster_connection * ) ; int ( * this_node ) ( unsigned int * ) ; int ( * dlm_lock ) ( s#ocfs2_cluster_connection * , int , s#ocfs2_dlm_lksb * , t#u32 , void * , unsigned int ) ; int ( * dlm_unlock ) ( s#ocfs2_cluster_connection * , s#ocfs2_dlm_lksb * , t#u32 ) ; int ( * lock_status ) ( s#ocfs2_dlm_lksb * ) ; int ( * lvb_valid ) ( s#ocfs2_dlm_lksb * ) ; void * ( * lock_lvb ) ( s#ocfs2_dlm_lksb * ) ; int ( * plock ) ( s#ocfs2_cluster_connection * , t#u64 , s#file * , int , s#file_lock * ) ; void ( * dump_lksb ) ( s#ocfs2_dlm_lksb * ) ; } 
s#ocfs2_stack_plugin struct ocfs2_stack_plugin { char * sp_name ; s#ocfs2_stack_operations * sp_ops ; s#module * sp_owner ; s#list_head sp_list ; unsigned int sp_count ; s#ocfs2_protocol_version sp_max_proto ; } 
ocfs2_stack_glue_register int ocfs2_stack_glue_register ( s#ocfs2_stack_plugin * ) 
ocfs2_stack_glue_unregister void ocfs2_stack_glue_unregister ( s#ocfs2_stack_plugin * ) 
ocfs2_stack_glue_set_max_proto_version void ocfs2_stack_glue_set_max_proto_version ( s#ocfs2_protocol_version * ) 
ocfs2_dlm_lock int ocfs2_dlm_lock ( s#ocfs2_cluster_connection * , int , s#ocfs2_dlm_lksb * , t#u32 , void * , unsigned int ) 
ocfs2_dlm_unlock int ocfs2_dlm_unlock ( s#ocfs2_cluster_connection * , s#ocfs2_dlm_lksb * , t#u32 ) 
ocfs2_dlm_lock_status int ocfs2_dlm_lock_status ( s#ocfs2_dlm_lksb * ) 
ocfs2_dlm_lvb_valid int ocfs2_dlm_lvb_valid ( s#ocfs2_dlm_lksb * ) 
ocfs2_dlm_lvb void * ocfs2_dlm_lvb ( s#ocfs2_dlm_lksb * ) 
ocfs2_dlm_dump_lksb void ocfs2_dlm_dump_lksb ( s#ocfs2_dlm_lksb * ) 
ocfs2_stack_supports_plocks int ocfs2_stack_supports_plocks ( void ) 
ocfs2_plock int ocfs2_plock ( s#ocfs2_cluster_connection * , t#u64 , s#file * , int , s#file_lock * ) 
ocfs2_cluster_connect int ocfs2_cluster_connect ( const char * , const char * , int , s#ocfs2_locking_protocol * , void ( * ) ( int , void * ) , void * , s#ocfs2_cluster_connection * * ) 
ocfs2_cluster_connect_agnostic int ocfs2_cluster_connect_agnostic ( const char * , int , s#ocfs2_locking_protocol * , void ( * ) ( int , void * ) , void * , s#ocfs2_cluster_connection * * ) 
ocfs2_cluster_disconnect int ocfs2_cluster_disconnect ( s#ocfs2_cluster_connection * , int ) 
ocfs2_cluster_hangup void ocfs2_cluster_hangup ( const char * , int ) 
ocfs2_cluster_this_node int ocfs2_cluster_this_node ( unsigned int * ) 

/* fs/open.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device
s##mnt_namespace
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##nsproxy
s##proc_dir_entry
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##posix_acl
vfs_statfs extern int vfs_statfs ( s#dentry * , s#kstatfs * ) 
lookup_instantiate_filp extern s#file * lookup_instantiate_filp ( s#nameidata * , s#dentry * , int ( * ) ( s#inode * , s#file * ) ) 
dentry_open extern s#file * dentry_open ( s#dentry * , s#vfsmount * , int , const s#cred * ) 
put_unused_fd extern void put_unused_fd ( unsigned int ) 
fd_install extern void fd_install ( unsigned int , s#file * ) 
filp_close extern int filp_close ( s#file * , t#fl_owner_t ) 
sys_close long sys_close ( unsigned int ) 
generic_file_open extern int generic_file_open ( s#inode * , s#file * ) 
nonseekable_open extern int nonseekable_open ( s#inode * , s#file * ) 

/* fs/partitions/check.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##posix_acl
s##hd_geometry
s##timer_rand_state
bdevname extern const char * bdevname ( s#block_device * , char * ) 
__bdevname extern const char * __bdevname ( t#dev_t , char * ) 
t#Sector typedef struct { s#page * v ; } Sector 
read_dev_sector unsigned char * read_dev_sector ( s#block_device * , t#sector_t , t#Sector * ) 

/* fs/pipe.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##mnt_namespace
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
pipe_lock void pipe_lock ( s#pipe_inode_info * ) 
pipe_unlock void pipe_unlock ( s#pipe_inode_info * ) 

/* fs/posix_acl.o */
posix_acl_alloc extern s#posix_acl * posix_acl_alloc ( int , t#gfp_t ) 
posix_acl_clone extern s#posix_acl * posix_acl_clone ( const s#posix_acl * , t#gfp_t ) 
posix_acl_valid extern int posix_acl_valid ( const s#posix_acl * ) 
posix_acl_equiv_mode extern int posix_acl_equiv_mode ( const s#posix_acl * , t#mode_t * ) 
posix_acl_from_mode extern s#posix_acl * posix_acl_from_mode ( t#mode_t , t#gfp_t ) 
posix_acl_create_masq extern int posix_acl_create_masq ( s#posix_acl * , t#mode_t * ) 
posix_acl_chmod_masq extern int posix_acl_chmod_masq ( s#posix_acl * , t#mode_t ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
posix_acl_permission extern int posix_acl_permission ( s#inode * , const s#posix_acl * , int ) 

/* fs/proc/generic.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##kstatfs
s##seq_file
s##page
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##mnt_namespace
s##pid_namespace
s##cred
s##radix_tree_node
s##writeback_control
s##kiocb
s##iovec
s##poll_table_struct
s##vm_area_struct
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##net
proc_net_mkdir extern s#proc_dir_entry * proc_net_mkdir ( s#net * , const char * , s#proc_dir_entry * ) 

/* fs/proc/proc_net.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##mnt_namespace
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##uts_namespace
s##ipc_namespace
s##net_device
s##sock
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##sec_path
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
seq_open_net int seq_open_net ( s#inode * , s#file * , const s#seq_operations * , int ) 
single_open_net int single_open_net ( s#inode * , s#file * , int ( * ) ( s#seq_file * , void * ) ) 
seq_release_net int seq_release_net ( s#inode * , s#file * ) 
single_release_net int single_release_net ( s#inode * , s#file * ) 
proc_net_fops_create extern s#proc_dir_entry * proc_net_fops_create ( s#net * , const char * , t#mode_t , const s#file_operations * ) 
proc_net_remove extern void proc_net_remove ( s#net * , const char * ) 

/* fs/proc/root.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##mnt_namespace
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##array_cache
s##kmem_list3
s##bsd_acct_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##uts_namespace
s##ipc_namespace
s##net
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
proc_symlink extern s#proc_dir_entry * proc_symlink ( const char * , s#proc_dir_entry * , const char * ) 
proc_mkdir extern s#proc_dir_entry * proc_mkdir ( const char * , s#proc_dir_entry * ) 
create_proc_entry extern s#proc_dir_entry * create_proc_entry ( const char * , t#mode_t , s#proc_dir_entry * ) 
proc_create_data s#proc_dir_entry * proc_create_data ( const char * , t#mode_t , s#proc_dir_entry * , const s#file_operations * , void * ) 
remove_proc_entry extern void remove_proc_entry ( const char * , s#proc_dir_entry * ) 

/* fs/quota/dquot.o */
dq_data_lock extern t#spinlock_t dq_data_lock 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##backing_dev_info
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##hd_struct
s##gendisk
s##posix_acl
s##mnt_namespace
s##kstatfs
s##export_operations
s##xattr_handler
s##mtd_info
register_quota_format int register_quota_format ( s#quota_format_type * ) 
unregister_quota_format void unregister_quota_format ( s#quota_format_type * ) 
s#dqstats struct dqstats { int lookups ; int drops ; int reads ; int writes ; int cache_hits ; int allocated_dquots ; int free_dquots ; int syncs ; } 
dqstats extern s#dqstats dqstats 
dquot_mark_dquot_dirty int dquot_mark_dquot_dirty ( s#dquot * ) 
mark_info_dirty extern void mark_info_dirty ( s#super_block * , int ) 
dquot_acquire int dquot_acquire ( s#dquot * ) 
dquot_commit int dquot_commit ( s#dquot * ) 
dquot_release int dquot_release ( s#dquot * ) 
dquot_destroy void dquot_destroy ( s#dquot * ) 
dquot_scan_active int dquot_scan_active ( s#super_block * , int ( * ) ( s#dquot * , unsigned long ) , unsigned long ) 
vfs_quota_sync int vfs_quota_sync ( s#super_block * , int ) 
dqput void dqput ( s#dquot * ) 
dquot_alloc s#dquot * dquot_alloc ( s#super_block * , int ) 
dqget s#dquot * dqget ( s#super_block * , unsigned int , int ) 
dquot_initialize int dquot_initialize ( s#inode * , int ) 
dquot_drop int dquot_drop ( s#inode * ) 
vfs_dq_drop void vfs_dq_drop ( s#inode * ) 
dquot_alloc_space int dquot_alloc_space ( s#inode * , t#qsize_t , int ) 
dquot_reserve_space int dquot_reserve_space ( s#inode * , t#qsize_t , int ) 
dquot_alloc_inode int dquot_alloc_inode ( const s#inode * , t#qsize_t ) 
dquot_claim_space int dquot_claim_space ( s#inode * , t#qsize_t ) 
dquot_free_space int dquot_free_space ( s#inode * , t#qsize_t ) 
dquot_release_reserved_space void dquot_release_reserved_space ( s#inode * , t#qsize_t ) 
dquot_free_inode int dquot_free_inode ( const s#inode * , t#qsize_t ) 
dquot_transfer int dquot_transfer ( s#inode * , s#iattr * ) 
vfs_dq_transfer int vfs_dq_transfer ( s#inode * , s#iattr * ) 
dquot_commit_info int dquot_commit_info ( s#super_block * , int ) 
vfs_quota_disable int vfs_quota_disable ( s#super_block * , int , unsigned int ) 
vfs_quota_off int vfs_quota_off ( s#super_block * , int , int ) 
vfs_quota_on_path int vfs_quota_on_path ( s#super_block * , int , int , s#path * ) 
vfs_quota_on int vfs_quota_on ( s#super_block * , int , int , char * , int ) 
vfs_quota_enable int vfs_quota_enable ( s#inode * , int , int , unsigned int ) 
vfs_quota_on_mount int vfs_quota_on_mount ( s#super_block * , char * , int , int ) 
vfs_dq_quota_on_remount int vfs_dq_quota_on_remount ( s#super_block * ) 
vfs_get_dqblk int vfs_get_dqblk ( s#super_block * , int , t#qid_t , s#if_dqblk * ) 
vfs_set_dqblk int vfs_set_dqblk ( s#super_block * , int , t#qid_t , s#if_dqblk * ) 
vfs_get_dqinfo int vfs_get_dqinfo ( s#super_block * , int , s#if_dqinfo * ) 
vfs_set_dqinfo int vfs_set_dqinfo ( s#super_block * , int , s#if_dqinfo * ) 

/* fs/quota/quota_tree.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##kiocb
s##iovec
s##poll_table_struct
s##vm_area_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##page
s##pipe_inode_info
s##cred
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##hd_struct
s##gendisk
s##cdev
s##posix_acl
s##mnt_namespace
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##mtd_info
s#qtree_fmt_operations struct qtree_fmt_operations { void ( * mem2disk_dqblk ) ( void * , s#dquot * ) ; void ( * disk2mem_dqblk ) ( s#dquot * , void * ) ; int ( * is_id ) ( void * , s#dquot * ) ; } 
s#qtree_mem_dqinfo struct qtree_mem_dqinfo { s#super_block * dqi_sb ; int dqi_type ; unsigned int dqi_blocks ; unsigned int dqi_free_blk ; unsigned int dqi_free_entry ; unsigned int dqi_blocksize_bits ; unsigned int dqi_entry_size ; unsigned int dqi_usable_bs ; unsigned int dqi_qtree_depth ; s#qtree_fmt_operations * dqi_ops ; } 
qtree_entry_unused int qtree_entry_unused ( s#qtree_mem_dqinfo * , char * ) 
qtree_write_dquot int qtree_write_dquot ( s#qtree_mem_dqinfo * , s#dquot * ) 
qtree_delete_dquot int qtree_delete_dquot ( s#qtree_mem_dqinfo * , s#dquot * ) 
qtree_read_dquot int qtree_read_dquot ( s#qtree_mem_dqinfo * , s#dquot * ) 
qtree_release_dquot int qtree_release_dquot ( s#qtree_mem_dqinfo * , s#dquot * ) 

/* fs/read_write.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##nlm_lockowner
s##nfs4_lock_state
s##cdev
s##posix_acl
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##poll_table_struct
generic_ro_fops extern const s#file_operations generic_ro_fops 
generic_file_llseek_unlocked extern t#loff_t generic_file_llseek_unlocked ( s#file * , t#loff_t , int ) 
generic_file_llseek extern t#loff_t generic_file_llseek ( s#file * , t#loff_t , int ) 
no_llseek extern t#loff_t no_llseek ( s#file * , t#loff_t , int ) 
default_llseek extern t#loff_t default_llseek ( s#file * , t#loff_t , int ) 
vfs_llseek extern t#loff_t vfs_llseek ( s#file * , t#loff_t , int ) 
do_sync_read extern t#ssize_t do_sync_read ( s#file * , char * , t#size_t , t#loff_t * ) 
vfs_read extern t#ssize_t vfs_read ( s#file * , char * , t#size_t , t#loff_t * ) 
do_sync_write extern t#ssize_t do_sync_write ( s#file * , const char * , t#size_t , t#loff_t * ) 
vfs_write extern t#ssize_t vfs_write ( s#file * , const char * , t#size_t , t#loff_t * ) 
iov_shorten unsigned long iov_shorten ( s#iovec * , unsigned long , t#size_t ) 
vfs_readv extern t#ssize_t vfs_readv ( s#file * , const s#iovec * , unsigned long , t#loff_t * ) 
vfs_writev extern t#ssize_t vfs_writev ( s#file * , const s#iovec * , unsigned long , t#loff_t * ) 

/* fs/readdir.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##poll_table_struct
s##nlm_lockowner
s##nfs4_lock_state
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
vfs_readdir extern int vfs_readdir ( s#file * , t#filldir_t , void * ) 

/* fs/select.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##compat_timespec
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s#poll_table_entry struct poll_table_entry { s#file * filp ; unsigned long key ; t#wait_queue_t wait ; t#wait_queue_head_t * wait_address ; } 
s#poll_table_page struct poll_table_page { s#poll_table_page * next ; s#poll_table_entry * entry ; s#poll_table_entry entries [ 0 ] ; } 
s#poll_wqueues struct poll_wqueues { t#poll_table pt ; s#poll_table_page * table ; s#task_struct * polling_task ; int triggered ; int error ; int inline_index ; s#poll_table_entry inline_entries [ ( ( 832 - 256 ) / sizeof ( struct poll_table_entry ) ) ] ; } 
poll_initwait extern void poll_initwait ( s#poll_wqueues * ) 
poll_freewait extern void poll_freewait ( s#poll_wqueues * ) 
poll_schedule_timeout extern int poll_schedule_timeout ( s#poll_wqueues * , int , t#ktime_t * , unsigned long ) 

/* fs/seq_file.o */
s##vfsmount
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##kiocb
s##iovec
s##poll_table_struct
s##vm_area_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##page
s##pipe_inode_info
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##radix_tree_node
s##writeback_control
s##cdev
s##posix_acl
s##cred
seq_open int seq_open ( s#file * , const s#seq_operations * ) 
seq_read t#ssize_t seq_read ( s#file * , char * , t#size_t , t#loff_t * ) 
seq_lseek t#loff_t seq_lseek ( s#file * , t#loff_t , int ) 
seq_release int seq_release ( s#inode * , s#file * ) 
seq_escape int seq_escape ( s#seq_file * , const char * , const char * ) 
seq_printf int seq_printf ( s#seq_file * , const char * , ... ) 
mangle_path char * mangle_path ( char * , char * , char * ) 
seq_path int seq_path ( s#seq_file * , s#path * , char * ) 
seq_bitmap int seq_bitmap ( s#seq_file * , const unsigned long * , unsigned int ) 
seq_bitmap_list int seq_bitmap_list ( s#seq_file * , const unsigned long * , unsigned int ) 
single_open int single_open ( s#file * , int ( * ) ( s#seq_file * , void * ) , void * ) 
single_release int single_release ( s#inode * , s#file * ) 
seq_release_private int seq_release_private ( s#inode * , s#file * ) 
__seq_open_private void * __seq_open_private ( s#file * , const s#seq_operations * , int ) 
seq_open_private int seq_open_private ( s#file * , const s#seq_operations * , int ) 
seq_putc int seq_putc ( s#seq_file * , char ) 
seq_puts int seq_puts ( s#seq_file * , const char * ) 
seq_write int seq_write ( s#seq_file * , const void * , t#size_t ) 
seq_list_start extern s#list_head * seq_list_start ( s#list_head * , t#loff_t ) 
seq_list_start_head extern s#list_head * seq_list_start_head ( s#list_head * , t#loff_t ) 
seq_list_next extern s#list_head * seq_list_next ( void * , s#list_head * , t#loff_t * ) 

/* fs/splice.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##backing_dev_info
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##array_cache
s##kmem_list3
s##mempolicy
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##poll_table_struct
s##nlm_lockowner
s##nfs4_lock_state
s##cdev
s##posix_acl
generic_file_splice_read extern t#ssize_t generic_file_splice_read ( s#file * , t#loff_t * , s#pipe_inode_info * , t#size_t , unsigned int ) 
default_file_splice_read extern t#ssize_t default_file_splice_read ( s#file * , t#loff_t * , s#pipe_inode_info * , t#size_t , unsigned int ) 
s#splice_desc struct splice_desc { unsigned int len , total_len ; unsigned int flags ; union { void * userptr ; s#file * file ; void * data ; } u ; t#loff_t pos ; t#size_t num_spliced ; t#bool need_wakeup ; } 
pipe_to_file extern int pipe_to_file ( s#pipe_inode_info * , s#pipe_buffer * , s#splice_desc * ) 
t#splice_actor typedef int ( splice_actor ) ( s#pipe_inode_info * , s#pipe_buffer * , s#splice_desc * ) 
splice_from_pipe_feed extern int splice_from_pipe_feed ( s#pipe_inode_info * , s#splice_desc * , t#splice_actor * ) 
splice_from_pipe_next extern int splice_from_pipe_next ( s#pipe_inode_info * , s#splice_desc * ) 
splice_from_pipe_begin extern void splice_from_pipe_begin ( s#splice_desc * ) 
splice_from_pipe_end extern void splice_from_pipe_end ( s#pipe_inode_info * , s#splice_desc * ) 
__splice_from_pipe extern t#ssize_t __splice_from_pipe ( s#pipe_inode_info * , s#splice_desc * , t#splice_actor * ) 
generic_file_splice_write extern t#ssize_t generic_file_splice_write ( s#pipe_inode_info * , s#file * , t#loff_t * , t#size_t , unsigned int ) 
generic_splice_sendpage extern t#ssize_t generic_splice_sendpage ( s#pipe_inode_info * , s#file * , t#loff_t * , t#size_t , unsigned int ) 
t#splice_direct_actor typedef int ( splice_direct_actor ) ( s#pipe_inode_info * , s#splice_desc * ) 
splice_direct_to_actor extern t#ssize_t splice_direct_to_actor ( s#file * , s#splice_desc * , t#splice_direct_actor * ) 

/* fs/stack.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##page
s##kiocb
s##iovec
s##poll_table_struct
s##vm_area_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
fsstack_copy_inode_size extern void fsstack_copy_inode_size ( s#inode * , const s#inode * ) 
fsstack_copy_attr_all extern void fsstack_copy_attr_all ( s#inode * , const s#inode * , int ( * ) ( s#inode * ) ) 

/* fs/stat.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
generic_fillattr extern void generic_fillattr ( s#inode * , s#kstat * ) 
vfs_getattr extern int vfs_getattr ( s#vfsmount * , s#dentry * , s#kstat * ) 
vfs_fstat extern int vfs_fstat ( unsigned int , s#kstat * ) 
vfs_fstatat extern int vfs_fstatat ( int , char * , s#kstat * , int ) 
vfs_stat extern int vfs_stat ( char * , s#kstat * ) 
vfs_lstat extern int vfs_lstat ( char * , s#kstat * ) 
inode_add_bytes void inode_add_bytes ( s#inode * , t#loff_t ) 
inode_sub_bytes void inode_sub_bytes ( s#inode * , t#loff_t ) 
inode_get_bytes t#loff_t inode_get_bytes ( s#inode * ) 
inode_set_bytes void inode_set_bytes ( s#inode * , t#loff_t ) 

/* fs/super.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##hd_geometry
s##blk_trace
s##timer_rand_state
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##mnt_namespace
s##export_operations
s##xattr_handler
s##mtd_info
deactivate_super void deactivate_super ( s#super_block * ) 
deactivate_locked_super void deactivate_locked_super ( s#super_block * ) 
lock_super extern void lock_super ( s#super_block * ) 
unlock_super extern void unlock_super ( s#super_block * ) 
generic_shutdown_super void generic_shutdown_super ( s#super_block * ) 
sget s#super_block * sget ( s#file_system_type * , int ( * ) ( s#super_block * , void * ) , int ( * ) ( s#super_block * , void * ) , void * ) 
drop_super extern void drop_super ( s#super_block * ) 
get_super extern s#super_block * get_super ( s#block_device * ) 
set_anon_super int set_anon_super ( s#super_block * , void * ) 
kill_anon_super void kill_anon_super ( s#super_block * ) 
kill_litter_super void kill_litter_super ( s#super_block * ) 
get_sb_ns extern int get_sb_ns ( s#file_system_type * , int , void * , int ( * ) ( s#super_block * , void * , int ) , s#vfsmount * ) 
get_sb_bdev extern int get_sb_bdev ( s#file_system_type * , int , const char * , void * , int ( * ) ( s#super_block * , void * , int ) , s#vfsmount * ) 
kill_block_super void kill_block_super ( s#super_block * ) 
get_sb_nodev extern int get_sb_nodev ( s#file_system_type * , int , void * , int ( * ) ( s#super_block * , void * , int ) , s#vfsmount * ) 
get_sb_single extern int get_sb_single ( s#file_system_type * , int , void * , int ( * ) ( s#super_block * , void * , int ) , s#vfsmount * ) 
vfs_kern_mount extern s#vfsmount * vfs_kern_mount ( s#file_system_type * , int , const char * , void * ) 
do_kern_mount extern s#vfsmount * do_kern_mount ( const char * , int , const char * , void * ) 
kern_mount_data extern s#vfsmount * kern_mount_data ( s#file_system_type * , void * ) 

/* fs/sync.o */
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##backing_dev_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##hd_struct
s##gendisk
s##cdev
s##posix_acl
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s##xattr_handler
s##mtd_info
sync_filesystem extern int sync_filesystem ( s#super_block * ) 
file_fsync int file_fsync ( s#file * , s#dentry * , int ) 
vfs_fsync_range extern int vfs_fsync_range ( s#file * , s#dentry * , t#loff_t , t#loff_t , int ) 
vfs_fsync extern int vfs_fsync ( s#file * , s#dentry * , int ) 
generic_write_sync extern int generic_write_sync ( s#file * , t#loff_t , t#loff_t ) 
do_sync_mapping_range extern int do_sync_mapping_range ( s#address_space * , t#loff_t , t#loff_t , unsigned int ) 

/* fs/sysfs/bin.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s#sysfs_elem_dir struct sysfs_elem_dir { s#kobject * kobj ; s#sysfs_dirent * children ; } 
s#sysfs_elem_symlink struct sysfs_elem_symlink { s#sysfs_dirent * target_sd ; } 
s##sysfs_open_dirent
s#sysfs_elem_attr struct sysfs_elem_attr { s#attribute * attr ; s#sysfs_open_dirent * open ; } 
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##kiocb
s##iovec
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##cred
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s#sysfs_elem_bin_attr struct sysfs_elem_bin_attr { s#bin_attribute * bin_attr ; s#hlist_head buffers ; } 
s#sysfs_inode_attrs struct sysfs_inode_attrs { s#iattr ia_iattr ; void * ia_secdata ; t#u32 ia_secdata_len ; } 
s#sysfs_dirent struct sysfs_dirent { t#atomic_t s_count ; t#atomic_t s_active ; s#sysfs_dirent * s_parent ; s#sysfs_dirent * s_sibling ; const char * s_name ; union { s#sysfs_elem_dir s_dir ; s#sysfs_elem_symlink s_symlink ; s#sysfs_elem_attr s_attr ; s#sysfs_elem_bin_attr s_bin_attr ; } ; unsigned int s_flags ; t#ino_t s_ino ; t#umode_t s_mode ; s#sysfs_inode_attrs * s_iattr ; } 
sysfs_create_bin_file int __attribute__ ( ( warn_unused_result ) ) sysfs_create_bin_file ( s#kobject * , s#bin_attribute * ) 
sysfs_remove_bin_file void sysfs_remove_bin_file ( s#kobject * , s#bin_attribute * ) 

/* fs/sysfs/dir.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##mnt_namespace
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_open_dirent
sysfs_get_dirent s#sysfs_dirent * sysfs_get_dirent ( s#sysfs_dirent * , const unsigned char * ) 

/* fs/sysfs/file.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#sysfs_open_dirent struct sysfs_open_dirent { t#atomic_t refcnt ; t#atomic_t event ; t#wait_queue_head_t poll ; s#list_head buffers ; } 
sysfs_notify_dirent void sysfs_notify_dirent ( s#sysfs_dirent * ) 
sysfs_notify void sysfs_notify ( s#kobject * , const char * , const char * ) 
sysfs_add_file_to_group int sysfs_add_file_to_group ( s#kobject * , const s#attribute * , const char * ) 
sysfs_chmod_file int __attribute__ ( ( warn_unused_result ) ) sysfs_chmod_file ( s#kobject * , s#attribute * , t#mode_t ) 
sysfs_remove_file_from_group void sysfs_remove_file_from_group ( s#kobject * , const s#attribute * , const char * ) 
sysfs_schedule_callback int sysfs_schedule_callback ( s#kobject * , void ( * ) ( void * ) , void * , s#module * ) 
sysfs_create_file int __attribute__ ( ( warn_unused_result ) ) sysfs_create_file ( s#kobject * , const s#attribute * ) 
sysfs_remove_file void sysfs_remove_file ( s#kobject * , const s#attribute * ) 

/* fs/sysfs/group.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_open_dirent
s##vm_area_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##kiocb
s##iovec
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##page
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##radix_tree_node
s##writeback_control
s##cdev
s##posix_acl
s##cred
sysfs_create_group int __attribute__ ( ( warn_unused_result ) ) sysfs_create_group ( s#kobject * , const s#attribute_group * ) 
sysfs_update_group int sysfs_update_group ( s#kobject * , const s#attribute_group * ) 
sysfs_remove_group void sysfs_remove_group ( s#kobject * , const s#attribute_group * ) 

/* fs/sysfs/mount.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##mnt_namespace
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_open_dirent
sysfs_get s#sysfs_dirent * sysfs_get ( s#sysfs_dirent * ) 
sysfs_put void sysfs_put ( s#sysfs_dirent * ) 

/* fs/sysfs/symlink.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##mnt_namespace
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_open_dirent
sysfs_create_link int __attribute__ ( ( warn_unused_result ) ) sysfs_create_link ( s#kobject * , s#kobject * , const char * ) 
sysfs_remove_link void sysfs_remove_link ( s#kobject * , const char * ) 

/* fs/xattr.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s#xattr_handler struct xattr_handler { char * prefix ; t#size_t ( * list ) ( s#inode * , char * , t#size_t , const char * , t#size_t ) ; int ( * get ) ( s#inode * , const char * , void * , t#size_t ) ; int ( * set ) ( s#inode * , const char * , const void * , t#size_t , int ) ; } 
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##mnt_namespace
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
vfs_setxattr int vfs_setxattr ( s#dentry * , const char * , const void * , t#size_t , int ) 
xattr_getsecurity t#ssize_t xattr_getsecurity ( s#inode * , const char * , void * , t#size_t ) 
vfs_getxattr t#ssize_t vfs_getxattr ( s#dentry * , const char * , void * , t#size_t ) 
vfs_listxattr t#ssize_t vfs_listxattr ( s#dentry * , char * , t#size_t ) 
vfs_removexattr int vfs_removexattr ( s#dentry * , const char * ) 
generic_getxattr t#ssize_t generic_getxattr ( s#dentry * , const char * , void * , t#size_t ) 
generic_listxattr t#ssize_t generic_listxattr ( s#dentry * , char * , t#size_t ) 
generic_setxattr int generic_setxattr ( s#dentry * , const char * , const void * , t#size_t , int ) 
generic_removexattr int generic_removexattr ( s#dentry * , const char * ) 

/* fs/xattr_acl.o */
posix_acl_from_xattr s#posix_acl * posix_acl_from_xattr ( const void * , t#size_t ) 
posix_acl_to_xattr int posix_acl_to_xattr ( const s#posix_acl * , void * , t#size_t ) 

/* fs/xfs/dmapi/xfs_dm.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##hd_geometry
s##blk_trace
s##timer_rand_state
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##cdev
s##posix_acl
s##mnt_namespace
s##xattr_handler
s##mtd_info
t#__int32_t typedef signed int __int32_t 
t#xfs_tid_t typedef t#__int32_t xfs_tid_t 
s##xfs_ail
t#__uint32_t typedef unsigned int __uint32_t 
t#__uint64_t typedef unsigned long long int __uint64_t 
t#xfs_drfsbno_t typedef t#__uint64_t xfs_drfsbno_t 
t#xfs_drtbno_t typedef t#__uint64_t xfs_drtbno_t 
t#uuid_t typedef struct { unsigned char __u_bits [ 16 ] ; } uuid_t 
t#xfs_dfsbno_t typedef t#__uint64_t xfs_dfsbno_t 
t#xfs_ino_t typedef unsigned long long xfs_ino_t 
t#xfs_agblock_t typedef t#__uint32_t xfs_agblock_t 
t#xfs_agnumber_t typedef t#__uint32_t xfs_agnumber_t 
t#xfs_extlen_t typedef t#__uint32_t xfs_extlen_t 
t#__uint16_t typedef unsigned short int __uint16_t 
t#__uint8_t typedef unsigned char __uint8_t 
s#xfs_sb struct xfs_sb { t#__uint32_t sb_magicnum ; t#__uint32_t sb_blocksize ; t#xfs_drfsbno_t sb_dblocks ; t#xfs_drfsbno_t sb_rblocks ; t#xfs_drtbno_t sb_rextents ; t#uuid_t sb_uuid ; t#xfs_dfsbno_t sb_logstart ; t#xfs_ino_t sb_rootino ; t#xfs_ino_t sb_rbmino ; t#xfs_ino_t sb_rsumino ; t#xfs_agblock_t sb_rextsize ; t#xfs_agblock_t sb_agblocks ; t#xfs_agnumber_t sb_agcount ; t#xfs_extlen_t sb_rbmblocks ; t#xfs_extlen_t sb_logblocks ; t#__uint16_t sb_versionnum ; t#__uint16_t sb_sectsize ; t#__uint16_t sb_inodesize ; t#__uint16_t sb_inopblock ; char sb_fname [ 12 ] ; t#__uint8_t sb_blocklog ; t#__uint8_t sb_sectlog ; t#__uint8_t sb_inodelog ; t#__uint8_t sb_inopblog ; t#__uint8_t sb_agblklog ; t#__uint8_t sb_rextslog ; t#__uint8_t sb_inprogress ; t#__uint8_t sb_imax_pct ; t#__uint64_t sb_icount ; t#__uint64_t sb_ifree ; t#__uint64_t sb_fdblocks ; t#__uint64_t sb_frextents ; t#xfs_ino_t sb_uquotino ; t#xfs_ino_t sb_gquotino ; t#__uint16_t sb_qflags ; t#__uint8_t sb_flags ; t#__uint8_t sb_shared_vn ; t#xfs_extlen_t sb_inoalignmt ; t#__uint32_t sb_unit ; t#__uint32_t sb_width ; t#__uint8_t sb_dirblklog ; t#__uint8_t sb_logsectlog ; t#__uint16_t sb_logsectsize ; t#__uint32_t sb_logsunit ; t#__uint32_t sb_features2 ; t#__uint32_t sb_bad_features2 ; } 
t#xfs_sb_t typedef s#xfs_sb xfs_sb_t 
t#xfs_buf_flags_t typedef enum { XBF_READ = ( 1 << 0 ) , XBF_WRITE = ( 1 << 1 ) , XBF_MAPPED = ( 1 << 2 ) , XBF_ASYNC = ( 1 << 4 ) , XBF_DONE = ( 1 << 5 ) , XBF_DELWRI = ( 1 << 6 ) , XBF_STALE = ( 1 << 7 ) , XBF_FS_MANAGED = ( 1 << 8 ) , XBF_ORDERED = ( 1 << 11 ) , XBF_READ_AHEAD = ( 1 << 12 ) , XBF_LOG_BUFFER = ( 1 << 13 ) , XBF_LOCK = ( 1 << 14 ) , XBF_TRYLOCK = ( 1 << 15 ) , XBF_DONT_BLOCK = ( 1 << 16 ) , _XBF_PAGE_CACHE = ( 1 << 17 ) , _XBF_PAGES = ( 1 << 18 ) , _XBF_RUN_QUEUES = ( 1 << 19 ) , _XBF_DELWRI_Q = ( 1 << 21 ) , _XBF_PAGE_LOCKED = ( 1 << 22 ) , _XFS_BARRIER_FAILED = ( 1 << 23 ) , } xfs_buf_flags_t 
s#xfs_bufhash struct xfs_bufhash { s#list_head bh_list ; t#spinlock_t bh_lock ; } 
t#xfs_bufhash_t typedef s#xfs_bufhash xfs_bufhash_t 
s#xfs_buftarg struct xfs_buftarg { t#dev_t bt_dev ; s#block_device * bt_bdev ; s#address_space * bt_mapping ; unsigned int bt_bsize ; unsigned int bt_sshift ; t#size_t bt_smask ; t#uint bt_hashmask ; t#uint bt_hashshift ; t#xfs_bufhash_t * bt_hash ; s#task_struct * bt_task ; s#list_head bt_list ; s#list_head bt_delwrite_queue ; t#spinlock_t bt_delwrite_lock ; unsigned long bt_flags ; } 
t#xfs_buftarg_t typedef s#xfs_buftarg xfs_buftarg_t 
t#xfs_daddr_t typedef t#__s64 xfs_daddr_t 
t#xfs_off_t typedef t#__s64 xfs_off_t 
t#xfs_buf_iodone_t typedef void ( * xfs_buf_iodone_t ) ( s#xfs_buf * ) 
t#xfs_buf_relse_t typedef void ( * xfs_buf_relse_t ) ( s#xfs_buf * ) 
t#xfs_buf_bdstrat_t typedef int ( * xfs_buf_bdstrat_t ) ( s#xfs_buf * ) 
s#xfs_buf struct xfs_buf { s#semaphore b_sema ; unsigned long b_queuetime ; t#atomic_t b_pin_count ; t#wait_queue_head_t b_waiters ; s#list_head b_list ; t#xfs_buf_flags_t b_flags ; s#list_head b_hash_list ; t#xfs_bufhash_t * b_hash ; t#xfs_buftarg_t * b_target ; t#atomic_t b_hold ; t#xfs_daddr_t b_bn ; t#xfs_off_t b_file_offset ; t#size_t b_buffer_length ; t#size_t b_count_desired ; void * b_addr ; s#work_struct b_iodone_work ; t#atomic_t b_io_remaining ; t#xfs_buf_iodone_t b_iodone ; t#xfs_buf_relse_t b_relse ; t#xfs_buf_bdstrat_t b_strat ; s#completion b_iowait ; void * b_fspriv ; void * b_fspriv2 ; s#xfs_mount * b_mount ; unsigned short b_error ; unsigned int b_page_count ; unsigned int b_offset ; s#page * * b_pages ; s#page * b_page_array [ 2 ] ; } 
s##log
s##xfs_quotainfo
t#xfs_agino_t typedef t#__uint32_t xfs_agino_t 
s#xfs_log_callback struct xfs_log_callback { s#xfs_log_callback * cb_next ; void ( * cb_func ) ( void * , int ) ; void * cb_arg ; } 
t#xfs_log_callback_t typedef s#xfs_log_callback xfs_log_callback_t 
t#xfs_log_ticket_t typedef void * xfs_log_ticket_t 
t#__int64_t typedef signed long long int __int64_t 
t#xfs_lsn_t typedef t#__int64_t xfs_lsn_t 
s##xfs_dquot_acct
t#xfs_trans_callback_t typedef void ( * xfs_trans_callback_t ) ( s#xfs_trans * , void * ) 
t#int64_t typedef t#__s64 int64_t 
t#xfs_log_item_t typedef s#xfs_log_item xfs_log_item_t 
t#xfs_caddr_t typedef char * xfs_caddr_t 
s#xfs_log_iovec struct xfs_log_iovec { t#xfs_caddr_t i_addr ; int i_len ; t#uint i_type ; } 
s#xfs_item_ops struct xfs_item_ops { t#uint ( * iop_size ) ( t#xfs_log_item_t * ) ; void ( * iop_format ) ( t#xfs_log_item_t * , s#xfs_log_iovec * ) ; void ( * iop_pin ) ( t#xfs_log_item_t * ) ; void ( * iop_unpin ) ( t#xfs_log_item_t * , int ) ; void ( * iop_unpin_remove ) ( t#xfs_log_item_t * , s#xfs_trans * ) ; t#uint ( * iop_trylock ) ( t#xfs_log_item_t * ) ; void ( * iop_unlock ) ( t#xfs_log_item_t * ) ; t#xfs_lsn_t ( * iop_committed ) ( t#xfs_log_item_t * , t#xfs_lsn_t ) ; void ( * iop_push ) ( t#xfs_log_item_t * ) ; void ( * iop_pushbuf ) ( t#xfs_log_item_t * ) ; void ( * iop_committing ) ( t#xfs_log_item_t * , t#xfs_lsn_t ) ; } 
s#xfs_log_item struct xfs_log_item { s#list_head li_ail ; t#xfs_lsn_t li_lsn ; s#xfs_log_item_desc * li_desc ; s#xfs_mount * li_mountp ; s#xfs_ail * li_ailp ; t#uint li_type ; t#uint li_flags ; s#xfs_log_item * li_bio_list ; void ( * li_cb ) ( s#xfs_buf * , s#xfs_log_item * ) ; s#xfs_item_ops * li_ops ; } 
s#xfs_log_item_desc struct xfs_log_item_desc { s#xfs_log_item * lid_item ; t#ushort lid_size ; unsigned char lid_flags ; unsigned char lid_index ; } 
t#xfs_log_item_desc_t typedef s#xfs_log_item_desc xfs_log_item_desc_t 
s#xfs_log_item_chunk struct xfs_log_item_chunk { s#xfs_log_item_chunk * lic_next ; t#ushort lic_free ; t#ushort lic_unused ; t#xfs_log_item_desc_t lic_descs [ 15 ] ; } 
t#xfs_log_item_chunk_t typedef s#xfs_log_item_chunk xfs_log_item_chunk_t 
s#xfs_trans_header struct xfs_trans_header { t#uint th_magic ; t#uint th_type ; t#__int32_t th_tid ; t#uint th_num_items ; } 
t#xfs_trans_header_t typedef s#xfs_trans_header xfs_trans_header_t 
s#xfs_log_busy_slot struct xfs_log_busy_slot { t#xfs_agnumber_t lbc_ag ; t#ushort lbc_idx ; } 
t#xfs_log_busy_slot_t typedef s#xfs_log_busy_slot xfs_log_busy_slot_t 
s#xfs_log_busy_chunk struct xfs_log_busy_chunk { s#xfs_log_busy_chunk * lbc_next ; t#uint lbc_free ; t#ushort lbc_unused ; t#xfs_log_busy_slot_t lbc_busy [ 31 ] ; } 
t#xfs_log_busy_chunk_t typedef s#xfs_log_busy_chunk xfs_log_busy_chunk_t 
s#xfs_trans struct xfs_trans { unsigned int t_magic ; t#xfs_log_callback_t t_logcb ; unsigned int t_type ; unsigned int t_log_res ; unsigned int t_log_count ; unsigned int t_blk_res ; unsigned int t_blk_res_used ; unsigned int t_rtx_res ; unsigned int t_rtx_res_used ; t#xfs_log_ticket_t t_ticket ; t#xfs_lsn_t t_lsn ; t#xfs_lsn_t t_commit_lsn ; s#xfs_mount * t_mountp ; s#xfs_dquot_acct * t_dqinfo ; t#xfs_trans_callback_t t_callback ; void * t_callarg ; unsigned int t_flags ; t#int64_t t_icount_delta ; t#int64_t t_ifree_delta ; t#int64_t t_fdblocks_delta ; t#int64_t t_res_fdblocks_delta ; t#int64_t t_frextents_delta ; t#int64_t t_res_frextents_delta ; t#int64_t t_dblocks_delta ; t#int64_t t_agcount_delta ; t#int64_t t_imaxpct_delta ; t#int64_t t_rextsize_delta ; t#int64_t t_rbmblocks_delta ; t#int64_t t_rblocks_delta ; t#int64_t t_rextents_delta ; t#int64_t t_rextslog_delta ; unsigned int t_items_free ; t#xfs_log_item_chunk_t t_items ; t#xfs_trans_header_t t_header ; unsigned int t_busy_free ; t#xfs_log_busy_chunk_t t_busy ; unsigned long t_pflags ; } 
s#xfs_perag_busy struct xfs_perag_busy { t#xfs_agblock_t busy_start ; t#xfs_extlen_t busy_length ; s#xfs_trans * busy_tp ; } 
t#xfs_perag_busy_t typedef s#xfs_perag_busy xfs_perag_busy_t 
s#xfs_perag struct xfs_perag { char pagf_init ; char pagi_init ; char pagf_metadata ; char pagi_inodeok ; t#__uint8_t pagf_levels [ ( ( int ) XFS_BTNUM_CNTi + 1 ) ] ; t#__uint32_t pagf_flcount ; t#xfs_extlen_t pagf_freeblks ; t#xfs_extlen_t pagf_longest ; t#__uint32_t pagf_btreeblks ; t#xfs_agino_t pagi_freecount ; t#xfs_agino_t pagi_count ; int pagb_count ; t#xfs_perag_busy_t * pagb_list ; t#xfs_agino_t pagl_pagino ; t#xfs_agino_t pagl_leftrec ; t#xfs_agino_t pagl_rightrec ; t#spinlock_t pagb_lock ; t#atomic_t pagf_fstrms ; int pag_ici_init ; t#rwlock_t pag_ici_lock ; s#radix_tree_root pag_ici_root ; } 
s#xfs_trans_reservations struct xfs_trans_reservations { t#uint tr_write ; t#uint tr_itruncate ; t#uint tr_rename ; t#uint tr_link ; t#uint tr_remove ; t#uint tr_symlink ; t#uint tr_create ; t#uint tr_mkdir ; t#uint tr_ifree ; t#uint tr_ichange ; t#uint tr_growdata ; t#uint tr_swrite ; t#uint tr_addafork ; t#uint tr_writeid ; t#uint tr_attrinval ; t#uint tr_attrset ; t#uint tr_attrrm ; t#uint tr_clearagi ; t#uint tr_growrtalloc ; t#uint tr_growrtzero ; t#uint tr_growrtfree ; } 
t#xfs_trans_reservations_t typedef s#xfs_trans_reservations xfs_trans_reservations_t 
t#xfs_dahash_t typedef t#__uint32_t xfs_dahash_t 
s#xfs_name struct xfs_name { const char * name ; int len ; } 
e#xfs_dacmp enum xfs_dacmp { XFS_CMP_DIFFERENT , XFS_CMP_EXACT , XFS_CMP_CASE } 
t#xfs_fsblock_t typedef t#__uint64_t xfs_fsblock_t 
s#xfs_bmap_free_item struct xfs_bmap_free_item { t#xfs_fsblock_t xbfi_startblock ; t#xfs_extlen_t xbfi_blockcount ; s#xfs_bmap_free_item * xbfi_next ; } 
t#xfs_bmap_free_item_t typedef s#xfs_bmap_free_item xfs_bmap_free_item_t 
s#xfs_bmap_free struct xfs_bmap_free { t#xfs_bmap_free_item_t * xbf_first ; int xbf_count ; int xbf_low ; } 
t#xfs_dablk_t typedef t#__uint32_t xfs_dablk_t 
s#xfs_da_args struct xfs_da_args { const t#__uint8_t * name ; int namelen ; t#__uint8_t * value ; int valuelen ; int flags ; t#xfs_dahash_t hashval ; t#xfs_ino_t inumber ; s#xfs_inode * dp ; t#xfs_fsblock_t * firstblock ; s#xfs_bmap_free * flist ; s#xfs_trans * trans ; t#xfs_extlen_t total ; int whichfork ; t#xfs_dablk_t blkno ; int index ; t#xfs_dablk_t rmtblkno ; int rmtblkcnt ; t#xfs_dablk_t blkno2 ; int index2 ; t#xfs_dablk_t rmtblkno2 ; int rmtblkcnt2 ; int op_flags ; e#xfs_dacmp cmpresult ; } 
s#xfs_nameops struct xfs_nameops { t#xfs_dahash_t ( * hashname ) ( s#xfs_name * ) ; e#xfs_dacmp ( * compname ) ( s#xfs_da_args * , const char * , int ) ; } 
s##xfs_chash
s##xfs_qmops
s#xfs_icsb_cnts struct xfs_icsb_cnts { t#uint64_t icsb_fdblocks ; t#uint64_t icsb_ifree ; t#uint64_t icsb_icount ; unsigned long icsb_flags ; } 
t#xfs_icsb_cnts_t typedef s#xfs_icsb_cnts xfs_icsb_cnts_t 
s##xfs_mru_cache
s#xfs_sync_work struct xfs_sync_work { s#list_head w_list ; s#xfs_mount * w_mount ; void * w_data ; void ( * w_syncer ) ( s#xfs_mount * , void * ) ; s#completion * w_completion ; } 
t#xfs_sync_work_t typedef s#xfs_sync_work xfs_sync_work_t 
s#xfs_mount struct xfs_mount { s#super_block * m_super ; t#xfs_tid_t m_tid ; s#xfs_ail * m_ail ; t#xfs_sb_t m_sb ; t#spinlock_t m_sb_lock ; s#xfs_buf * m_sb_bp ; char * m_fsname ; int m_fsname_len ; char * m_rtname ; char * m_logname ; int m_bsize ; t#xfs_agnumber_t m_agfrotor ; t#xfs_agnumber_t m_agirotor ; t#spinlock_t m_agirotor_lock ; t#xfs_agnumber_t m_maxagi ; t#uint m_readio_log ; t#uint m_readio_blocks ; t#uint m_writeio_log ; t#uint m_writeio_blocks ; s#log * m_log ; int m_logbufs ; int m_logbsize ; t#uint m_rsumlevels ; t#uint m_rsumsize ; s#xfs_inode * m_rbmip ; s#xfs_inode * m_rsumip ; s#xfs_inode * m_rootip ; s#xfs_quotainfo * m_quotainfo ; t#xfs_buftarg_t * m_ddev_targp ; t#xfs_buftarg_t * m_logdev_targp ; t#xfs_buftarg_t * m_rtdev_targp ; t#__uint8_t m_blkbit_log ; t#__uint8_t m_blkbb_log ; t#__uint8_t m_agno_log ; t#__uint8_t m_agino_log ; t#__uint16_t m_inode_cluster_size ; t#uint m_blockmask ; t#uint m_blockwsize ; t#uint m_blockwmask ; t#uint m_alloc_mxr [ 2 ] ; t#uint m_alloc_mnr [ 2 ] ; t#uint m_bmap_dmxr [ 2 ] ; t#uint m_bmap_dmnr [ 2 ] ; t#uint m_inobt_mxr [ 2 ] ; t#uint m_inobt_mnr [ 2 ] ; t#uint m_ag_maxlevels ; t#uint m_bm_maxlevels [ 2 ] ; t#uint m_in_maxlevels ; s#xfs_perag * m_perag ; s#rw_semaphore m_peraglock ; s#mutex m_growlock ; int m_fixedfsid [ 2 ] ; t#uint m_dmevmask ; t#__uint64_t m_flags ; t#uint m_dir_node_ents ; t#uint m_attr_node_ents ; int m_ialloc_inos ; int m_ialloc_blks ; int m_inoalign_mask ; t#uint m_qflags ; t#xfs_trans_reservations_t m_reservations ; t#__uint64_t m_maxicount ; t#__uint64_t m_maxioffset ; t#__uint64_t m_resblks ; t#__uint64_t m_resblks_avail ; t#__uint64_t m_resblks_save ; int m_dalign ; int m_swidth ; int m_sinoalign ; int m_attr_magicpct ; int m_dir_magicpct ; t#__uint8_t m_sectbb_log ; const s#xfs_nameops * m_dirnameops ; int m_dirblksize ; int m_dirblkfsbs ; t#xfs_dablk_t m_dirdatablk ; t#xfs_dablk_t m_dirleafblk ; t#xfs_dablk_t m_dirfreeblk ; t#uint m_chsize ; s#xfs_chash * m_chash ; s#xfs_dmops * m_dm_ops ; s#xfs_qmops * m_qm_ops ; t#atomic_t m_active_trans ; t#xfs_icsb_cnts_t * m_sb_cnts ; unsigned long m_icsb_counters ; s#notifier_block m_icsb_notifier ; s#mutex m_icsb_mutex ; s#xfs_mru_cache * m_filestream ; s#task_struct * m_sync_task ; t#xfs_sync_work_t m_sync_work ; s#list_head m_sync_list ; t#spinlock_t m_sync_lock ; int m_sync_seq ; t#wait_queue_head_t m_wait_single_sync_task ; t#__int64_t m_update_flags ; s#vfsmount * m_vfsmount ; } 
s##xfs_dquot
s#xfs_imap struct xfs_imap { t#xfs_daddr_t im_blkno ; t#ushort im_len ; t#ushort im_boffset ; } 
s#xfs_btree_block struct xfs_btree_block { t#__be32 bb_magic ; t#__be16 bb_level ; t#__be16 bb_numrecs ; union { struct { t#__be32 bb_leftsib ; t#__be32 bb_rightsib ; } s ; struct { t#__be64 bb_leftsib ; t#__be64 bb_rightsib ; } l ; } bb_u ; } 
t#xfs_extnum_t typedef t#__int32_t xfs_extnum_t 
s#xfs_bmbt_rec_host struct xfs_bmbt_rec_host { t#__uint64_t l0 , l1 ; } 
t#xfs_bmbt_rec_host_t typedef s#xfs_bmbt_rec_host xfs_bmbt_rec_host_t 
s#xfs_ext_irec struct xfs_ext_irec { t#xfs_bmbt_rec_host_t * er_extbuf ; t#xfs_extnum_t er_extoff ; t#xfs_extnum_t er_extcount ; } 
t#xfs_ext_irec_t typedef s#xfs_ext_irec xfs_ext_irec_t 
t#xfs_dev_t typedef t#__u32 xfs_dev_t 
s#xfs_ifork struct xfs_ifork { int if_bytes ; int if_real_bytes ; s#xfs_btree_block * if_broot ; short if_broot_bytes ; unsigned char if_flags ; unsigned char if_ext_max ; t#xfs_extnum_t if_lastex ; union { t#xfs_bmbt_rec_host_t * if_extents ; t#xfs_ext_irec_t * if_ext_irec ; char * if_data ; } if_u1 ; union { t#xfs_bmbt_rec_host_t if_inline_ext [ 2 ] ; char if_inline_data [ 32 ] ; t#xfs_dev_t if_rdev ; t#uuid_t if_uuid ; } if_u2 ; } 
t#xfs_ifork_t typedef s#xfs_ifork xfs_ifork_t 
s#xfs_bmbt_rec struct xfs_bmbt_rec { t#__be64 l0 , l1 ; } 
s#xfs_inode_log_format struct xfs_inode_log_format { t#__uint16_t ilf_type ; t#__uint16_t ilf_size ; t#__uint32_t ilf_fields ; t#__uint16_t ilf_asize ; t#__uint16_t ilf_dsize ; t#__uint64_t ilf_ino ; union { t#__uint32_t ilfu_rdev ; t#uuid_t ilfu_uuid ; } ilf_u ; t#__int64_t ilf_blkno ; t#__int32_t ilf_len ; t#__int32_t ilf_boffset ; } 
t#xfs_inode_log_format_t typedef s#xfs_inode_log_format xfs_inode_log_format_t 
s#xfs_inode_log_item struct xfs_inode_log_item { t#xfs_log_item_t ili_item ; s#xfs_inode * ili_inode ; t#xfs_lsn_t ili_flush_lsn ; t#xfs_lsn_t ili_last_lsn ; unsigned short ili_flags ; unsigned short ili_logged ; unsigned int ili_last_fields ; s#xfs_bmbt_rec * ili_extents_buf ; s#xfs_bmbt_rec * ili_aextents_buf ; unsigned int ili_pushbuf_flag ; t#xfs_inode_log_format_t ili_format ; } 
t#mrlock_t typedef struct { s#rw_semaphore mr_lock ; } mrlock_t 
t#__int8_t typedef signed char __int8_t 
s#xfs_ictimestamp struct xfs_ictimestamp { t#__int32_t t_sec ; t#__int32_t t_nsec ; } 
t#xfs_ictimestamp_t typedef s#xfs_ictimestamp xfs_ictimestamp_t 
t#xfs_fsize_t typedef t#__int64_t xfs_fsize_t 
t#__int16_t typedef signed short int __int16_t 
t#xfs_aextnum_t typedef t#__int16_t xfs_aextnum_t 
s#xfs_icdinode struct xfs_icdinode { t#__uint16_t di_magic ; t#__uint16_t di_mode ; t#__int8_t di_version ; t#__int8_t di_format ; t#__uint16_t di_onlink ; t#__uint32_t di_uid ; t#__uint32_t di_gid ; t#__uint32_t di_nlink ; t#__uint16_t di_projid ; t#__uint8_t di_pad [ 8 ] ; t#__uint16_t di_flushiter ; t#xfs_ictimestamp_t di_atime ; t#xfs_ictimestamp_t di_mtime ; t#xfs_ictimestamp_t di_ctime ; t#xfs_fsize_t di_size ; t#xfs_drfsbno_t di_nblocks ; t#xfs_extlen_t di_extsize ; t#xfs_extnum_t di_nextents ; t#xfs_aextnum_t di_anextents ; t#__uint8_t di_forkoff ; t#__int8_t di_aformat ; t#__uint32_t di_dmevmask ; t#__uint16_t di_dmstate ; t#__uint16_t di_flags ; t#__uint32_t di_gen ; } 
t#xfs_icdinode_t typedef s#xfs_icdinode xfs_icdinode_t 
s#xfs_inode struct xfs_inode { s#xfs_mount * i_mount ; s#xfs_dquot * i_udquot ; s#xfs_dquot * i_gdquot ; t#xfs_ino_t i_ino ; s#xfs_imap i_imap ; t#xfs_ifork_t * i_afp ; t#xfs_ifork_t i_df ; s#xfs_trans * i_transp ; s#xfs_inode_log_item * i_itemp ; t#mrlock_t i_lock ; t#mrlock_t i_iolock ; s#completion i_flush ; t#atomic_t i_pincount ; t#wait_queue_head_t i_ipin_wait ; t#spinlock_t i_flags_lock ; unsigned short i_flags ; unsigned char i_update_core ; unsigned int i_delayed_blks ; t#xfs_icdinode_t i_d ; t#xfs_fsize_t i_size ; t#xfs_fsize_t i_new_size ; t#atomic_t i_iocount ; s#inode i_vnode ; } 
t#xfs_send_data_t typedef int ( * xfs_send_data_t ) ( int , s#xfs_inode * , t#xfs_off_t , t#size_t , int , int * ) 
t#xfs_send_mmap_t typedef int ( * xfs_send_mmap_t ) ( s#vm_area_struct * , t#uint ) 
t#xfs_send_destroy_t typedef int ( * xfs_send_destroy_t ) ( s#xfs_inode * , t#dm_right_t ) 
t#xfs_send_namesp_t typedef int ( * xfs_send_namesp_t ) ( t#dm_eventtype_t , s#xfs_mount * , s#xfs_inode * , t#dm_right_t , s#xfs_inode * , t#dm_right_t , const char * , const char * , t#mode_t , int , int ) 
t#xfs_send_mount_t typedef int ( * xfs_send_mount_t ) ( s#xfs_mount * , t#dm_right_t , char * , char * ) 
t#xfs_send_unmount_t typedef void ( * xfs_send_unmount_t ) ( s#xfs_mount * , s#xfs_inode * , t#dm_right_t , t#mode_t , int , int ) 
s#xfs_dmops struct xfs_dmops { t#xfs_send_data_t xfs_send_data ; t#xfs_send_mmap_t xfs_send_mmap ; t#xfs_send_destroy_t xfs_send_destroy ; t#xfs_send_namesp_t xfs_send_namesp ; t#xfs_send_mount_t xfs_send_mount ; t#xfs_send_unmount_t xfs_send_unmount ; } 
xfs_dmcore_xfs extern s#xfs_dmops xfs_dmcore_xfs 

/* fs/xfs/linux-2.6/xfs_ksyms.o */
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##xattr_handler
s##mtd_info
s##xfs_dquot_acct
s#xfs_ail_cursor struct xfs_ail_cursor { s#xfs_ail_cursor * next ; s#xfs_log_item * item ; } 
s#xfs_ail struct xfs_ail { s#xfs_mount * xa_mount ; s#list_head xa_ail ; t#uint xa_gen ; s#task_struct * xa_task ; t#xfs_lsn_t xa_target ; s#xfs_ail_cursor xa_cursors ; t#spinlock_t xa_lock ; } 
s#xfs_buf_cancel struct xfs_buf_cancel { t#xfs_daddr_t bc_blkno ; t#uint bc_len ; int bc_refcount ; s#xfs_buf_cancel * bc_next ; } 
s#sv_s struct sv_s { t#wait_queue_head_t waiters ; } 
t#sv_t typedef s#sv_s sv_t 
s#xlog_rec_header struct xlog_rec_header { t#__be32 h_magicno ; t#__be32 h_cycle ; t#__be32 h_version ; t#__be32 h_len ; t#__be64 h_lsn ; t#__be64 h_tail_lsn ; t#__be32 h_chksum ; t#__be32 h_prev_block ; t#__be32 h_num_logops ; t#__be32 h_cycle_data [ ( 32 * 1024 ) / ( 1 << 9 ) ] ; t#__be32 h_fmt ; t#uuid_t h_fs_uuid ; t#__be32 h_size ; } 
t#xlog_rec_header_t typedef s#xlog_rec_header xlog_rec_header_t 
s#xlog_rec_ext_header struct xlog_rec_ext_header { t#__be32 xh_cycle ; t#__be32 xh_cycle_data [ ( 32 * 1024 ) / ( 1 << 9 ) ] ; } 
t#xlog_rec_ext_header_t typedef s#xlog_rec_ext_header xlog_rec_ext_header_t 
u#xlog_in_core2 union xlog_in_core2 { t#xlog_rec_header_t hic_header ; t#xlog_rec_ext_header_t hic_xheader ; char hic_sector [ 512 ] ; } 
t#xlog_in_core_2_t typedef u#xlog_in_core2 xlog_in_core_2_t 
s#xlog_in_core struct xlog_in_core { t#sv_t ic_force_wait ; t#sv_t ic_write_wait ; s#xlog_in_core * ic_next ; s#xlog_in_core * ic_prev ; s#xfs_buf * ic_bp ; s#log * ic_log ; int ic_size ; int ic_offset ; int ic_bwritecnt ; unsigned short ic_state ; char * ic_datap ; t#spinlock_t ic_callback_lock __attribute__ ( ( __aligned__ ( ( 1 << ( 7 ) ) ) ) ) ; t#xfs_log_callback_t * ic_callback ; t#xfs_log_callback_t * * ic_callback_tail ; t#atomic_t ic_refcnt __attribute__ ( ( __aligned__ ( ( 1 << ( 7 ) ) ) ) ) ; t#xlog_in_core_2_t * ic_data ; } 
t#xlog_in_core_t typedef s#xlog_in_core xlog_in_core_t 
t#xlog_tid_t typedef t#__uint32_t xlog_tid_t 
s#xlog_res struct xlog_res { t#uint r_len ; t#uint r_type ; } 
t#xlog_res_t typedef s#xlog_res xlog_res_t 
s#xlog_ticket struct xlog_ticket { t#sv_t t_wait ; s#xlog_ticket * t_next ; s#xlog_ticket * t_prev ; t#xlog_tid_t t_tid ; t#atomic_t t_ref ; int t_curr_res ; int t_unit_res ; char t_ocnt ; char t_cnt ; char t_clientid ; char t_flags ; t#uint t_trans_type ; t#uint t_res_num ; t#uint t_res_num_ophdrs ; t#uint t_res_arr_sum ; t#uint t_res_o_flow ; t#xlog_res_t t_res_arr [ 15 ] ; } 
t#xlog_ticket_t typedef s#xlog_ticket xlog_ticket_t 
s#log struct log { s#xfs_mount * l_mp ; s#xfs_ail * l_ailp ; s#xfs_buf * l_xbuf ; s#xfs_buftarg * l_targ ; t#uint l_flags ; t#uint l_quotaoffs_flag ; s#xfs_buf_cancel * * l_buf_cancel_table ; int l_iclog_hsize ; int l_iclog_heads ; t#uint l_sectbb_log ; t#uint l_sectbb_mask ; int l_iclog_size ; int l_iclog_size_log ; int l_iclog_bufs ; t#xfs_daddr_t l_logBBstart ; int l_logsize ; int l_logBBsize ; t#sv_t l_flush_wait __attribute__ ( ( __aligned__ ( ( 1 << ( 7 ) ) ) ) ) ; int l_covered_state ; t#xlog_in_core_t * l_iclog ; t#spinlock_t l_icloglock ; t#xfs_lsn_t l_tail_lsn ; t#xfs_lsn_t l_last_sync_lsn ; int l_curr_cycle ; int l_prev_cycle ; int l_curr_block ; int l_prev_block ; t#spinlock_t l_grant_lock __attribute__ ( ( __aligned__ ( ( 1 << ( 7 ) ) ) ) ) ; t#xlog_ticket_t * l_reserve_headq ; t#xlog_ticket_t * l_write_headq ; int l_grant_reserve_cycle ; int l_grant_reserve_bytes ; int l_grant_write_cycle ; int l_grant_write_bytes ; } 
s##xfs_quotainfo
s##xfs_chash
s##xfs_qmops
s##xfs_mru_cache
s##xfs_dquot
t#xfs_inode_t typedef s#xfs_inode xfs_inode_t 
xfs_iunlock void xfs_iunlock ( t#xfs_inode_t * , t#uint ) 
xfs_attr_remove int xfs_attr_remove ( s#xfs_inode * , const char * , int ) 
xfs_iunlock_map_shared void xfs_iunlock_map_shared ( t#xfs_inode_t * , t#uint ) 
xfs_iget int xfs_iget ( s#xfs_mount * , s#xfs_trans * , t#xfs_ino_t , t#uint , t#uint , t#xfs_inode_t * * , t#xfs_daddr_t ) 
t#xfs_fileoff_t typedef t#__uint64_t xfs_fileoff_t 
t#xfs_filblks_t typedef t#__uint64_t xfs_filblks_t 
t#xfs_exntst_t typedef enum { XFS_EXT_NORM , XFS_EXT_UNWRITTEN , XFS_EXT_DMAPI_OFFLINE , XFS_EXT_INVALID } xfs_exntst_t 
s#xfs_bmbt_irec struct xfs_bmbt_irec { t#xfs_fileoff_t br_startoff ; t#xfs_fsblock_t br_startblock ; t#xfs_filblks_t br_blockcount ; t#xfs_exntst_t br_state ; } 
t#xfs_bmap_free_t typedef s#xfs_bmap_free xfs_bmap_free_t 
s#xfs_extdelta struct xfs_extdelta { t#xfs_fileoff_t xed_startoff ; t#xfs_filblks_t xed_blockcount ; } 
t#xfs_extdelta_t typedef s#xfs_extdelta xfs_extdelta_t 
xfs_bmapi int xfs_bmapi ( s#xfs_trans * , s#xfs_inode * , t#xfs_fileoff_t , t#xfs_filblks_t , int , t#xfs_fsblock_t * , t#xfs_extlen_t , s#xfs_bmbt_irec * , int * , t#xfs_bmap_free_t * , t#xfs_extdelta_t * ) 
t#xfs_mount_t typedef s#xfs_mount xfs_mount_t 
xfs_internal_inum int xfs_internal_inum ( t#xfs_mount_t * , t#xfs_ino_t ) 
xfs_attr_set int xfs_attr_set ( s#xfs_inode * , const char * , char * , int , int ) 
t#xfs_trans_t typedef s#xfs_trans xfs_trans_t 
xfs_trans_reserve int xfs_trans_reserve ( t#xfs_trans_t * , t#uint , t#uint , t#uint , t#uint , t#uint ) 
xfs_trans_ijoin void xfs_trans_ijoin ( t#xfs_trans_t * , s#xfs_inode * , t#uint ) 
xfs_free_eofblocks extern int xfs_free_eofblocks ( s#xfs_mount * , s#xfs_inode * , int ) 
kmem_free extern void kmem_free ( const void * ) 
_xfs_trans_commit int _xfs_trans_commit ( t#xfs_trans_t * , t#uint , int * ) 
xfs_ilock void xfs_ilock ( t#xfs_inode_t * , t#uint ) 
xfs_attr_get int xfs_attr_get ( s#xfs_inode * , const char * , char * , int * , int ) 
xfs_readdir int xfs_readdir ( s#xfs_inode * , void * , t#size_t , t#xfs_off_t * , t#filldir_t ) 
xfs_setattr int xfs_setattr ( s#xfs_inode * , s#iattr * , int ) 
xfs_trans_alloc t#xfs_trans_t * xfs_trans_alloc ( s#xfs_mount * , t#uint ) 
xfs_trans_cancel void xfs_trans_cancel ( t#xfs_trans_t * , int ) 
xfs_fsync int xfs_fsync ( s#xfs_inode * ) 
xfs_iput_new void xfs_iput_new ( t#xfs_inode_t * , t#uint ) 
t#bulkstat_one_pf typedef int ( * bulkstat_one_pf ) ( s#xfs_mount * , t#xfs_ino_t , void * , int , void * , t#xfs_daddr_t , int * , void * , int * ) 
xfs_bulkstat int xfs_bulkstat ( t#xfs_mount_t * , t#xfs_ino_t * , int * , t#bulkstat_one_pf , void * , t#size_t , char * , int , int * ) 
xfs_ilock_map_shared t#uint xfs_ilock_map_shared ( t#xfs_inode_t * ) 
xfs_iput void xfs_iput ( t#xfs_inode_t * , t#uint ) 
xfs_trans_log_inode void xfs_trans_log_inode ( t#xfs_trans_t * , s#xfs_inode * , t#uint ) 
s#attrlist_cursor_kern struct attrlist_cursor_kern { t#__u32 hashval ; t#__u32 blkno ; t#__u32 offset ; t#__u16 pad1 ; t#__u8 pad2 ; t#__u8 initted ; } 
xfs_attr_list int xfs_attr_list ( s#xfs_inode * , char * , int , int , s#attrlist_cursor_kern * ) 
kmem_alloc extern void * kmem_alloc ( t#size_t , unsigned int ) 
s#xfs_flock64 struct xfs_flock64 { t#__s16 l_type ; t#__s16 l_whence ; t#__s64 l_start ; t#__s64 l_len ; t#__s32 l_sysid ; t#__u32 l_pid ; t#__s32 l_pad [ 4 ] ; } 
t#xfs_flock64_t typedef s#xfs_flock64 xfs_flock64_t 
xfs_change_file_space int xfs_change_file_space ( s#xfs_inode * , int , t#xfs_flock64_t * , t#xfs_off_t , int ) 

/* fs/xfs/linux-2.6/xfs_super.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##xattr_handler
s##hd_geometry
s##blk_trace
s##timer_rand_state
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##mnt_namespace
xfs_fs_type s#file_system_type xfs_fs_type 

/* fs/xfs/support/debug.o */
assfail extern void assfail ( char * , char * , int ) 

/* fs/xfs/xfs_rw.o */
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##xattr_handler
s##mtd_info
s##xfs_ail
s##log
s##xfs_quotainfo
s##xfs_dquot_acct
s##xfs_nameops
s##xfs_chash
s##xfs_qmops
s##xfs_mru_cache
s##xfs_dquot
xfs_get_extsz_hint extern t#xfs_extlen_t xfs_get_extsz_hint ( s#xfs_inode * ) 

/* init/main.o */
e#system_states extern enum system_states { SYSTEM_BOOTING , SYSTEM_RUNNING , SYSTEM_HALT , SYSTEM_POWER_OFF , SYSTEM_RESTART , SYSTEM_SUSPEND_DISK , } 
system_state extern e#system_states system_state 
reset_devices extern unsigned int reset_devices 
loops_per_jiffy extern unsigned long loops_per_jiffy 
nr_cpu_ids extern int nr_cpu_ids 

/* init/version.o */
init_uts_ns extern s#uts_namespace init_uts_ns 

/* kdb/kdb_io.o */
kdb_read extern char * kdb_read ( char * , t#size_t ) 

/* kdb/kdbdereference.o */
s#btnode_s struct btnode_s { s#btnode_s * bt_left ; s#btnode_s * bt_right ; s#btnode_s * bt_parent ; char * bt_key ; int bt_height ; } 
t#btnode_t typedef s#btnode_s btnode_t 
s#kltype_s struct kltype_s { char * kl_name ; char * kl_typestr ; void * kl_ptr ; int kl_flags ; int kl_type ; int kl_offset ; int kl_size ; int kl_bit_offset ; int kl_bit_size ; int kl_encoding ; int kl_low_bounds ; int kl_high_bounds ; unsigned int kl_value ; s#kltype_s * kl_member ; s#kltype_s * kl_next ; s#kltype_s * kl_realtype ; s#kltype_s * kl_indextype ; s#kltype_s * kl_elementtype ; } 
t#kltype_t typedef s#kltype_s kltype_t 
s#dbg_sym_s struct dbg_sym_s { t#btnode_t sym_bt ; short sym_dbgtyp ; short sym_state ; short sym_flag ; short sym_type ; short sym_pvttype ; short sym_nmlist ; short sym_srcfile ; short sym_incfile ; int sym_num ; int sym_off ; int sym_stroff ; t#uint64_t sym_typenum ; t#kltype_t * sym_kltype ; s#dbg_sym_s * sym_next ; s#dbg_sym_s * sym_link ; int sym_dup ; } 
t#dbg_sym_t typedef s#dbg_sym_s dbg_sym_t 
types_tree_head t#dbg_sym_t * types_tree_head 
typedefs_tree_head t#dbg_sym_t * typedefs_tree_head 
kltype_array t#kltype_t * kltype_array 
dsym_types_array t#dbg_sym_t * dsym_types_array 
have_debug_file int have_debug_file 
type_tree extern t#dbg_sym_t * type_tree 
typedef_tree extern t#dbg_sym_t * typedef_tree 

/* kdb/kdbmain.o */
kdb_debug_info_filename char kdb_debug_info_filename [ 256 ] 
kdb_grepping_flag int kdb_grepping_flag 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##ipc_namespace
s##mnt_namespace
s##net
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
kdb_current_task extern s#task_struct * kdb_current_task 
kdb_serial_str extern const char kdb_serial_str [ ] 
t#kdb_func_t typedef int ( * kdb_func_t ) ( int , const char * * ) 
kdb_register extern int kdb_register ( char * , t#kdb_func_t , char * , char * , short ) 
t#kdb_repeat_t typedef enum { KDB_REPEAT_NONE = 0 , KDB_REPEAT_NO_ARGS , KDB_REPEAT_WITH_ARGS , } kdb_repeat_t 
kdb_register_repeat extern int kdb_register_repeat ( char * , t#kdb_func_t , char * , char * , short , t#kdb_repeat_t ) 
kdb_unregister extern int kdb_unregister ( char * ) 
kdb_getarea_size extern int kdb_getarea_size ( void * , unsigned long , t#size_t ) 
kdb_putarea_size extern int kdb_putarea_size ( unsigned long , void * , t#size_t ) 
kdb_getuserarea_size extern int kdb_getuserarea_size ( void * , unsigned long , t#size_t ) 
kdb_putuserarea_size extern int kdb_putuserarea_size ( unsigned long , void * , t#size_t ) 
kdbgetularg extern int kdbgetularg ( const char * , unsigned long * ) 
kdbgetenv extern char * kdbgetenv ( const char * ) 
kdbgetintenv extern int kdbgetintenv ( const char * , int * ) 
kdbgetaddrarg extern int kdbgetaddrarg ( int , const char * * , int * , unsigned long * , long * , char * * ) 
t#kdb_reason_t typedef enum { KDB_REASON_ENTER = 1 , KDB_REASON_ENTER_SLAVE , KDB_REASON_BREAK , KDB_REASON_DEBUG , KDB_REASON_OOPS , KDB_REASON_SWITCH , KDB_REASON_KEYBOARD , KDB_REASON_NMI , KDB_REASON_RECURSE , KDB_REASON_CPU_UP , KDB_REASON_SILENT , } kdb_reason_t 
kdb extern int kdb ( t#kdb_reason_t , int , s#pt_regs * ) 
kdb_on extern int kdb_on 
kdb_seqno extern int kdb_seqno 
kdb_initial_cpu extern volatile int kdb_initial_cpu 
s#__ksymtab struct __ksymtab { unsigned long value ; const char * mod_name ; unsigned long mod_start ; unsigned long mod_end ; const char * sec_name ; unsigned long sec_start ; unsigned long sec_end ; const char * sym_name ; unsigned long sym_start ; unsigned long sym_end ; } 
t#kdb_symtab_t typedef s#__ksymtab kdb_symtab_t 
kdbnearsym extern int kdbnearsym ( unsigned long , t#kdb_symtab_t * ) 
kdb_printf extern void kdb_printf ( const char * , ... ) 
t#kdb_machreg_t typedef unsigned long kdb_machreg_t 
kdb_symbol_print extern void kdb_symbol_print ( t#kdb_machreg_t , const t#kdb_symtab_t * , unsigned int ) 
s#kdba_running_process struct kdba_running_process { long sp ; long ip ; } 
s#kdb_running_process struct kdb_running_process { s#task_struct * p ; s#pt_regs * regs ; int seqno ; int irq_depth ; s#kdba_running_process arch ; } 
kdb_running_process extern s#kdb_running_process kdb_running_process [ ] 

/* kdb/kdbsupport.o */
kdbgetsymval extern int kdbgetsymval ( const char * , t#kdb_symtab_t * ) 

/* kernel/async.o */
t#async_cookie_t typedef t#u64 async_cookie_t 
t#async_func_ptr typedef void ( async_func_ptr ) ( void * , t#async_cookie_t ) 
async_schedule extern t#async_cookie_t async_schedule ( t#async_func_ptr * , void * ) 
async_schedule_domain extern t#async_cookie_t async_schedule_domain ( t#async_func_ptr * , void * , s#list_head * ) 
async_synchronize_full extern void async_synchronize_full ( void ) 
async_synchronize_full_domain extern void async_synchronize_full_domain ( s#list_head * ) 
async_synchronize_cookie_domain extern void async_synchronize_cookie_domain ( t#async_cookie_t , s#list_head * ) 
async_synchronize_cookie extern void async_synchronize_cookie ( t#async_cookie_t ) 

/* kernel/audit.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##nameidata
s##tvec_base
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s#audit_buffer struct audit_buffer { s#list_head list ; s#sk_buff * skb ; s#audit_context * ctx ; t#gfp_t gfp_mask ; } 
audit_log_start extern s#audit_buffer * audit_log_start ( s#audit_context * , t#gfp_t , int ) 
audit_log_end extern void audit_log_end ( s#audit_buffer * ) 
audit_log_format extern void audit_log_format ( s#audit_buffer * , const char * , ... ) 
audit_log extern void audit_log ( s#audit_context * , t#gfp_t , int , const char * , ... ) 
audit_log_vformat extern void audit_log_vformat ( s#audit_buffer * , const char * , va_list args ) 
audit_log_untrustedstring extern void audit_log_untrustedstring ( s#audit_buffer * , const char * ) 

/* kernel/auditsc.o */
s##audit_buffer
audit_log_task_context extern void audit_log_task_context ( s#audit_buffer * ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##mnt_namespace
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##nsproxy
s##proc_dir_entry
s##taskstats
s##tty_audit_buf
e#audit_state enum audit_state { AUDIT_DISABLED , AUDIT_SETUP_CONTEXT , AUDIT_BUILD_CONTEXT , AUDIT_RECORD_CONTEXT } 
s#audit_cap_data struct audit_cap_data { t#kernel_cap_t permitted ; t#kernel_cap_t inheritable ; union { unsigned int fE ; t#kernel_cap_t effective ; } ; } 
s#audit_names struct audit_names { const char * name ; int name_len ; unsigned name_put ; unsigned long ino ; t#dev_t dev ; t#umode_t mode ; t#uid_t uid ; t#gid_t gid ; t#dev_t rdev ; t#u32 osid ; s#audit_cap_data fcap ; unsigned int fcap_ver ; } 
s#audit_aux_data struct audit_aux_data { s#audit_aux_data * next ; int type ; } 
s##audit_chunk
s#audit_tree_refs struct audit_tree_refs { s#audit_tree_refs * next ; s#audit_chunk * c [ 31 ] ; } 
t#__kernel_mqd_t typedef int __kernel_mqd_t 
t#mqd_t typedef t#__kernel_mqd_t mqd_t 
s#mq_attr struct mq_attr { long mq_flags ; long mq_maxmsg ; long mq_msgsize ; long mq_curmsgs ; long __reserved [ 4 ] ; } 
s#audit_context struct audit_context { int dummy ; int in_syscall ; e#audit_state state , current_state ; unsigned int serial ; int major ; s#timespec ctime ; unsigned long argv [ 4 ] ; long return_code ; t#u64 prio ; int return_valid ; int name_count ; s#audit_names names [ 20 ] ; char * filterkey ; s#path pwd ; s#audit_context * previous ; s#audit_aux_data * aux ; s#audit_aux_data * aux_pids ; s#__kernel_sockaddr_storage * sockaddr ; t#size_t sockaddr_len ; t#pid_t pid , ppid ; t#uid_t uid , euid , suid , fsuid ; t#gid_t gid , egid , sgid , fsgid ; unsigned long personality ; int arch ; t#pid_t target_pid ; t#uid_t target_auid ; t#uid_t target_uid ; unsigned int target_sessionid ; t#u32 target_sid ; char target_comm [ 16 ] ; s#audit_tree_refs * trees , * first_trees ; s#list_head killed_trees ; int tree_count ; int type ; union { struct { int nargs ; long args [ 6 ] ; } socketcall ; struct { t#uid_t uid ; t#gid_t gid ; t#mode_t mode ; t#u32 osid ; int has_perm ; t#uid_t perm_uid ; t#gid_t perm_gid ; t#mode_t perm_mode ; unsigned long qbytes ; } ipc ; struct { t#mqd_t mqdes ; s#mq_attr mqstat ; } mq_getsetattr ; struct { t#mqd_t mqdes ; int sigev_signo ; } mq_notify ; struct { t#mqd_t mqdes ; t#size_t msg_len ; unsigned int msg_prio ; s#timespec abs_timeout ; } mq_sendrecv ; struct { int oflag ; t#mode_t mode ; s#mq_attr attr ; } mq_open ; struct { t#pid_t pid ; s#audit_cap_data cap ; } capset ; } ; int fds [ 2 ] ; } 
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##posix_acl
__audit_inode_child extern void __audit_inode_child ( const char * , const s#dentry * , const s#inode * ) 

/* kernel/capability.o */
__cap_empty_set extern const t#kernel_cap_t __cap_empty_set 
__cap_full_set extern const t#kernel_cap_t __cap_full_set 
__cap_init_eff_set extern const t#kernel_cap_t __cap_init_eff_set 
capable extern int capable ( int ) 

/* kernel/cpu.o */
get_online_cpus extern void get_online_cpus ( void ) 
put_online_cpus extern void put_online_cpus ( void ) 
register_cpu_notifier extern int register_cpu_notifier ( s#notifier_block * ) 
unregister_cpu_notifier extern void unregister_cpu_notifier ( s#notifier_block * ) 
cpu_down int cpu_down ( unsigned int ) 
cpu_bit_bitmap extern const unsigned long cpu_bit_bitmap [ 64 + 1 ] [ ( ( ( 512 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] 
cpu_all_bits extern const unsigned long cpu_all_bits [ ( ( ( 512 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] 
cpu_possible_mask extern const s#cpumask * const cpu_possible_mask 
cpu_online_mask extern const s#cpumask * const cpu_online_mask 
cpu_present_mask extern const s#cpumask * const cpu_present_mask 
cpu_active_mask extern const s#cpumask * const cpu_active_mask 

/* kernel/cpuset.o */
cpuset_mem_spread_node extern int cpuset_mem_spread_node ( void ) 

/* kernel/cred.o */
s##key_type
s##key_user
s##keyring_list
__put_cred extern void __put_cred ( s#cred * ) 
prepare_creds extern s#cred * prepare_creds ( void ) 
commit_creds extern int commit_creds ( s#cred * ) 
abort_creds extern void abort_creds ( s#cred * ) 
override_creds extern const s#cred * override_creds ( const s#cred * ) 
revert_creds extern void revert_creds ( const s#cred * ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##array_cache
s##kmem_list3
s##bsd_acct_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##ipc_namespace
s##mnt_namespace
s##net_device
s##sock
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##sec_path
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##mem_cgroup
prepare_kernel_cred extern s#cred * prepare_kernel_cred ( s#task_struct * ) 
set_security_override extern int set_security_override ( s#cred * , t#u32 ) 
set_security_override_from_ctx extern int set_security_override_from_ctx ( s#cred * , const char * ) 
set_create_files_as extern int set_create_files_as ( s#cred * , s#inode * ) 

/* kernel/dma.o */
request_dma extern int request_dma ( unsigned int , const char * ) 
free_dma extern void free_dma ( unsigned int ) 
dma_spin_lock extern t#spinlock_t dma_spin_lock 

/* kernel/exec_domain.o */
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##compat_timespec
s##pollfd
s##nameidata
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
register_exec_domain extern int register_exec_domain ( s#exec_domain * ) 
unregister_exec_domain extern int unregister_exec_domain ( s#exec_domain * ) 
__set_personality extern int __set_personality ( unsigned long ) 

/* kernel/exit.o */
allow_signal extern int allow_signal ( int ) 
disallow_signal extern int disallow_signal ( int ) 
daemonize extern void daemonize ( const char * , ... ) 
do_exit void do_exit ( long ) 
complete_and_exit void complete_and_exit ( s#completion * , long ) 

/* kernel/fork.o */
s##rq
s##cfs_rq
s##rt_rq
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##nameidata
s##mnt_namespace
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##array_cache
s##kmem_list3
s##bsd_acct_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##pollfd
s##posix_acl
s##bts_context
s##ds_context
s##uts_namespace
s##ipc_namespace
s##net
s##tty_audit_buf
s##audit_context
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s#robust_list struct robust_list { s#robust_list * next ; } 
s#robust_list_head struct robust_list_head { s#robust_list list ; long futex_offset ; s#robust_list * list_op_pending ; } 
s##futex_pi_state
s##mem_cgroup
free_task extern void free_task ( s#task_struct * ) 
__mmdrop extern void __mmdrop ( s#mm_struct * ) 
mmput extern void mmput ( s#mm_struct * ) 
get_task_mm extern s#mm_struct * get_task_mm ( s#task_struct * ) 

/* kernel/freezer.o */
refrigerator extern void refrigerator ( void ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
thaw_process extern int thaw_process ( s#task_struct * ) 

/* kernel/groups.o */
groups_alloc extern s#group_info * groups_alloc ( int ) 
groups_free extern void groups_free ( s#group_info * ) 
s##key_type
s##key_user
s##keyring_list
s##user_namespace
set_groups extern int set_groups ( s#cred * , s#group_info * ) 
set_current_groups extern int set_current_groups ( s#group_info * ) 
in_group_p extern int in_group_p ( t#gid_t ) 
in_egroup_p extern int in_egroup_p ( t#gid_t ) 

/* kernel/hrtimer.o */
ktime_add_safe extern t#ktime_t ktime_add_safe ( const t#ktime_t , const t#ktime_t ) 
hrtimer_forward extern t#u64 hrtimer_forward ( s#hrtimer * , t#ktime_t , t#ktime_t ) 
e#hrtimer_mode enum hrtimer_mode { HRTIMER_MODE_ABS = 0x0 , HRTIMER_MODE_REL = 0x1 , HRTIMER_MODE_PINNED = 0x02 , HRTIMER_MODE_ABS_PINNED = 0x02 , HRTIMER_MODE_REL_PINNED = 0x03 , } 
hrtimer_start_range_ns extern int hrtimer_start_range_ns ( s#hrtimer * , t#ktime_t , unsigned long , const e#hrtimer_mode ) 
hrtimer_start extern int hrtimer_start ( s#hrtimer * , t#ktime_t , const e#hrtimer_mode ) 
hrtimer_try_to_cancel extern int hrtimer_try_to_cancel ( s#hrtimer * ) 
hrtimer_cancel extern int hrtimer_cancel ( s#hrtimer * ) 
hrtimer_get_remaining extern t#ktime_t hrtimer_get_remaining ( const s#hrtimer * ) 
hrtimer_init extern void hrtimer_init ( s#hrtimer * , t#clockid_t , e#hrtimer_mode ) 
hrtimer_get_res extern int hrtimer_get_res ( const t#clockid_t , s#timespec * ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#hrtimer_sleeper struct hrtimer_sleeper { s#hrtimer timer ; s#task_struct * task ; } 
hrtimer_init_sleeper extern void hrtimer_init_sleeper ( s#hrtimer_sleeper * , s#task_struct * ) 
schedule_hrtimeout_range extern int schedule_hrtimeout_range ( t#ktime_t * , unsigned long , const e#hrtimer_mode ) 
schedule_hrtimeout extern int schedule_hrtimeout ( t#ktime_t * , const e#hrtimer_mode ) 

/* kernel/irq/autoprobe.o */
probe_irq_on extern unsigned long probe_irq_on ( void ) 
probe_irq_mask extern unsigned int probe_irq_mask ( unsigned long ) 
probe_irq_off extern int probe_irq_off ( unsigned long ) 

/* kernel/irq/chip.o */
s#irq_chip struct irq_chip { const char * name ; unsigned int ( * startup ) ( unsigned int ) ; void ( * shutdown ) ( unsigned int ) ; void ( * enable ) ( unsigned int ) ; void ( * disable ) ( unsigned int ) ; void ( * ack ) ( unsigned int ) ; void ( * mask ) ( unsigned int ) ; void ( * mask_ack ) ( unsigned int ) ; void ( * unmask ) ( unsigned int ) ; void ( * eoi ) ( unsigned int ) ; void ( * end ) ( unsigned int ) ; int ( * set_affinity ) ( unsigned int , const s#cpumask * ) ; int ( * retrigger ) ( unsigned int ) ; int ( * set_type ) ( unsigned int , unsigned int ) ; int ( * set_wake ) ( unsigned int , unsigned int ) ; void ( * bus_lock ) ( unsigned int ) ; void ( * bus_sync_unlock ) ( unsigned int ) ; const char * typename ; } 
set_irq_chip extern int set_irq_chip ( unsigned int , s#irq_chip * ) 
set_irq_type extern int set_irq_type ( unsigned int , unsigned int ) 
set_irq_data extern int set_irq_data ( unsigned int , void * ) 
set_irq_chip_data extern int set_irq_chip_data ( unsigned int , void * ) 
set_irq_nested_thread extern void set_irq_nested_thread ( unsigned int , int ) 
handle_nested_irq extern void handle_nested_irq ( unsigned int ) 
s##timer_rand_state
s##irq_2_iommu
t#irq_flow_handler_t typedef void ( * irq_flow_handler_t ) ( unsigned int , s#irq_desc * ) 
s##pci_dev
s#msi_desc struct msi_desc { struct { t#__u8 is_msix : 1 ; t#__u8 multiple : 3 ; t#__u8 maskbit : 1 ; t#__u8 is_64 : 1 ; t#__u8 pos ; t#__u16 entry_nr ; unsigned default_irq ; } msi_attrib ; t#u32 masked ; unsigned int irq ; s#list_head list ; union { void * mask_base ; t#u8 mask_pos ; } ; s#pci_dev * dev ; s#msi_msg msg ; } 
s##proc_dir_entry
s##task_struct
s#irq_desc struct irq_desc { unsigned int irq ; s#timer_rand_state * timer_rand_state ; unsigned int * kstat_irqs ; s#irq_2_iommu * irq_2_iommu ; t#irq_flow_handler_t handle_irq ; s#irq_chip * chip ; s#msi_desc * msi_desc ; void * handler_data ; void * chip_data ; s#irqaction * action ; unsigned int status ; unsigned int depth ; unsigned int wake_depth ; unsigned int irq_count ; unsigned long last_unhandled ; unsigned int irqs_unhandled ; t#spinlock_t lock ; t#cpumask_var_t affinity ; unsigned int node ; t#cpumask_var_t pending_mask ; t#atomic_t threads_active ; t#wait_queue_head_t wait_for_threads ; s#proc_dir_entry * dir ; const char * name ; } 
handle_level_irq extern void handle_level_irq ( unsigned int , s#irq_desc * ) 
__set_irq_handler extern void __set_irq_handler ( unsigned int , t#irq_flow_handler_t , int , const char * ) 

/* kernel/irq/devres.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
devm_request_threaded_irq extern int __attribute__ ( ( warn_unused_result ) ) devm_request_threaded_irq ( s#device * , unsigned int , t#irq_handler_t , t#irq_handler_t , unsigned long , const char * , void * ) 
devm_free_irq extern void devm_free_irq ( s#device * , unsigned int , void * ) 

/* kernel/irq/handle.o */
nr_irqs extern int nr_irqs 
kstat_irqs_cpu extern unsigned int kstat_irqs_cpu ( unsigned int , int ) 

/* kernel/irq/manage.o */
synchronize_irq extern void synchronize_irq ( unsigned int ) 
disable_irq_nosync extern void disable_irq_nosync ( unsigned int ) 
disable_irq extern void disable_irq ( unsigned int ) 
enable_irq extern void enable_irq ( unsigned int ) 
set_irq_wake extern int set_irq_wake ( unsigned int , unsigned int ) 
s##proc_dir_entry
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
setup_irq extern int setup_irq ( unsigned int , s#irqaction * ) 
remove_irq extern void remove_irq ( unsigned int , s#irqaction * ) 
free_irq extern void free_irq ( unsigned int , void * ) 
request_threaded_irq extern int __attribute__ ( ( warn_unused_result ) ) request_threaded_irq ( unsigned int , t#irq_handler_t , t#irq_handler_t , unsigned long , const char * , void * ) 

/* kernel/irq/pm.o */
suspend_device_irqs extern void suspend_device_irqs ( void ) 
resume_device_irqs extern void resume_device_irqs ( void ) 

/* kernel/kallsyms.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
kallsyms_on_each_symbol int kallsyms_on_each_symbol ( int ( * ) ( void * , const char * , s#module * , unsigned long ) , void * ) 
sprint_symbol extern int sprint_symbol ( char * , unsigned long ) 
__print_symbol extern void __print_symbol ( const char * , unsigned long ) 

/* kernel/kfifo.o */
kfifo_init extern s#kfifo * kfifo_init ( unsigned char * , unsigned int , t#gfp_t , t#spinlock_t * ) 
kfifo_alloc extern s#kfifo * kfifo_alloc ( unsigned int , t#gfp_t , t#spinlock_t * ) 
kfifo_free extern void kfifo_free ( s#kfifo * ) 
__kfifo_put extern unsigned int __kfifo_put ( s#kfifo * , const unsigned char * , unsigned int ) 
__kfifo_get extern unsigned int __kfifo_get ( s#kfifo * , unsigned char * , unsigned int ) 

/* kernel/kmod.o */
__request_module extern int __request_module ( t#bool , const char * , ... ) 
s##key_type
s##key_user
s##keyring_list
s##user_namespace
e#umh_wait enum umh_wait { UMH_NO_WAIT = - 1 , UMH_WAIT_EXEC = 0 , UMH_WAIT_PROC = 1 , } 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##poll_table_struct
s##nlm_lockowner
s##nfs4_lock_state
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##mnt_namespace
s#subprocess_info struct subprocess_info { s#work_struct work ; s#completion * complete ; s#cred * cred ; char * path ; char * * argv ; char * * envp ; e#umh_wait wait ; int retval ; s#file * stdin ; void ( * cleanup ) ( char * * , char * * ) ; } 
call_usermodehelper_freeinfo void call_usermodehelper_freeinfo ( s#subprocess_info * ) 
call_usermodehelper_setup s#subprocess_info * call_usermodehelper_setup ( char * , char * * , char * * , t#gfp_t ) 
call_usermodehelper_setkeys void call_usermodehelper_setkeys ( s#subprocess_info * , s#key * ) 
call_usermodehelper_setcleanup void call_usermodehelper_setcleanup ( s#subprocess_info * , void ( * ) ( char * * , char * * ) ) 
call_usermodehelper_stdinpipe int call_usermodehelper_stdinpipe ( s#subprocess_info * , s#file * * ) 
call_usermodehelper_exec int call_usermodehelper_exec ( s#subprocess_info * , e#umh_wait ) 
call_usermodehelper_pipe extern int call_usermodehelper_pipe ( char * , char * [ ] , char * [ ] , s#file * * ) 

/* kernel/kprobes.o */
t#kprobe_opcode_t typedef t#u8 kprobe_opcode_t 
t#kprobe_pre_handler_t typedef int ( * kprobe_pre_handler_t ) ( s#kprobe * , s#pt_regs * ) 
t#kprobe_post_handler_t typedef void ( * kprobe_post_handler_t ) ( s#kprobe * , s#pt_regs * , unsigned long ) 
t#kprobe_fault_handler_t typedef int ( * kprobe_fault_handler_t ) ( s#kprobe * , s#pt_regs * , int ) 
t#kprobe_break_handler_t typedef int ( * kprobe_break_handler_t ) ( s#kprobe * , s#pt_regs * ) 
s#arch_specific_insn struct arch_specific_insn { t#kprobe_opcode_t * insn ; int boostable ; } 
s#kprobe struct kprobe { s#hlist_node hlist ; s#list_head list ; unsigned long nmissed ; t#kprobe_opcode_t * addr ; const char * symbol_name ; unsigned int offset ; t#kprobe_pre_handler_t pre_handler ; t#kprobe_post_handler_t post_handler ; t#kprobe_fault_handler_t fault_handler ; t#kprobe_break_handler_t break_handler ; t#kprobe_opcode_t opcode ; s#arch_specific_insn ainsn ; t#u32 flags ; } 
register_kprobe int register_kprobe ( s#kprobe * ) 
register_kprobes int register_kprobes ( s#kprobe * * , int ) 
unregister_kprobe void unregister_kprobe ( s#kprobe * ) 
unregister_kprobes void unregister_kprobes ( s#kprobe * * , int ) 
s#jprobe struct jprobe { s#kprobe kp ; void * entry ; } 
register_jprobes int register_jprobes ( s#jprobe * * , int ) 
register_jprobe int register_jprobe ( s#jprobe * ) 
unregister_jprobe void unregister_jprobe ( s#jprobe * ) 
unregister_jprobes void unregister_jprobes ( s#jprobe * * , int ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#kretprobe_instance struct kretprobe_instance { s#hlist_node hlist ; s#kretprobe * rp ; t#kprobe_opcode_t * ret_addr ; s#task_struct * task ; char data [ 0 ] ; } 
t#kretprobe_handler_t typedef int ( * kretprobe_handler_t ) ( s#kretprobe_instance * , s#pt_regs * ) 
s#kretprobe struct kretprobe { s#kprobe kp ; t#kretprobe_handler_t handler ; t#kretprobe_handler_t entry_handler ; int maxactive ; int nmissed ; t#size_t data_size ; s#hlist_head free_instances ; t#spinlock_t lock ; } 
register_kretprobe int register_kretprobe ( s#kretprobe * ) 
register_kretprobes int register_kretprobes ( s#kretprobe * * , int ) 
unregister_kretprobe void unregister_kretprobe ( s#kretprobe * ) 
unregister_kretprobes void unregister_kretprobes ( s#kretprobe * * , int ) 
disable_kprobe int disable_kprobe ( s#kprobe * ) 
enable_kprobe int enable_kprobe ( s#kprobe * ) 
jprobe_return void jprobe_return ( void ) 

/* kernel/ksysfs.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
kernel_kobj extern s#kobject * kernel_kobj 

/* kernel/kthread.o */
kthread_should_stop int kthread_should_stop ( void ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##dentry
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
kthread_create s#task_struct * kthread_create ( int ( * ) ( void * ) , void * , const char [ ] , ... ) 
kthread_stop int kthread_stop ( s#task_struct * ) 

/* kernel/module.o */
__tracepoint_module_get extern s#tracepoint __tracepoint_module_get 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
module_mutex extern s#mutex module_mutex 
register_module_notifier int register_module_notifier ( s#notifier_block * ) 
unregister_module_notifier int unregister_module_notifier ( s#notifier_block * ) 
__module_put_and_exit extern void __module_put_and_exit ( s#module * , long ) 
s#symsearch struct symsearch { const s#kernel_symbol * start , * stop ; const unsigned long * crcs ; enum { NOT_GPL_ONLY , GPL_ONLY , WILL_BE_GPL_ONLY , } licence ; t#bool unused ; } 
each_symbol t#bool each_symbol ( t#bool ( * ) ( const s#symsearch * , s#module * , unsigned int , void * ) , void * ) 
find_symbol const s#kernel_symbol * find_symbol ( const char * , s#module * * , const unsigned long * * , t#bool , t#bool ) 
find_module s#module * find_module ( const char * ) 
use_module int use_module ( s#module * , s#module * ) 
module_refcount unsigned int module_refcount ( s#module * ) 
__symbol_put void __symbol_put ( const char * ) 
symbol_put_addr void symbol_put_addr ( void * ) 
module_put extern void module_put ( s#module * ) 
__symbol_get void * __symbol_get ( const char * ) 
__module_address s#module * __module_address ( unsigned long ) 
__module_text_address s#module * __module_text_address ( unsigned long ) 
s#modversion_info struct modversion_info { unsigned long crc ; char name [ ( 64 - sizeof ( unsigned long ) ) ] ; } 
module_layout void module_layout ( s#module * , s#modversion_info * , s#kernel_param * , s#kernel_symbol * , s#tracepoint * ) 

/* kernel/mutex.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
__mutex_init extern void __mutex_init ( s#mutex * , const char * , s#lock_class_key * ) 
mutex_lock extern void mutex_lock ( s#mutex * ) 
mutex_unlock extern void mutex_unlock ( s#mutex * ) 
mutex_lock_interruptible extern int __attribute__ ( ( warn_unused_result ) ) mutex_lock_interruptible ( s#mutex * ) 
mutex_lock_killable extern int __attribute__ ( ( warn_unused_result ) ) mutex_lock_killable ( s#mutex * ) 
mutex_trylock extern int mutex_trylock ( s#mutex * ) 
atomic_dec_and_mutex_lock extern int atomic_dec_and_mutex_lock ( t#atomic_t * , s#mutex * ) 

/* kernel/notifier.o */
s#atomic_notifier_head struct atomic_notifier_head { t#spinlock_t lock ; s#notifier_block * head ; } 
atomic_notifier_chain_register extern int atomic_notifier_chain_register ( s#atomic_notifier_head * , s#notifier_block * ) 
atomic_notifier_chain_unregister extern int atomic_notifier_chain_unregister ( s#atomic_notifier_head * , s#notifier_block * ) 
__atomic_notifier_call_chain extern int __atomic_notifier_call_chain ( s#atomic_notifier_head * , unsigned long , void * , int , int * ) 
atomic_notifier_call_chain extern int atomic_notifier_call_chain ( s#atomic_notifier_head * , unsigned long , void * ) 
blocking_notifier_chain_register extern int blocking_notifier_chain_register ( s#blocking_notifier_head * , s#notifier_block * ) 
blocking_notifier_chain_cond_register extern int blocking_notifier_chain_cond_register ( s#blocking_notifier_head * , s#notifier_block * ) 
blocking_notifier_chain_unregister extern int blocking_notifier_chain_unregister ( s#blocking_notifier_head * , s#notifier_block * ) 
__blocking_notifier_call_chain extern int __blocking_notifier_call_chain ( s#blocking_notifier_head * , unsigned long , void * , int , int * ) 
blocking_notifier_call_chain extern int blocking_notifier_call_chain ( s#blocking_notifier_head * , unsigned long , void * ) 
s#raw_notifier_head struct raw_notifier_head { s#notifier_block * head ; } 
raw_notifier_chain_register extern int raw_notifier_chain_register ( s#raw_notifier_head * , s#notifier_block * ) 
raw_notifier_chain_unregister extern int raw_notifier_chain_unregister ( s#raw_notifier_head * , s#notifier_block * ) 
__raw_notifier_call_chain extern int __raw_notifier_call_chain ( s#raw_notifier_head * , unsigned long , void * , int , int * ) 
raw_notifier_call_chain extern int raw_notifier_call_chain ( s#raw_notifier_head * , unsigned long , void * ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s#srcu_notifier_head struct srcu_notifier_head { s#mutex mutex ; s#srcu_struct srcu ; s#notifier_block * head ; } 
srcu_notifier_chain_register extern int srcu_notifier_chain_register ( s#srcu_notifier_head * , s#notifier_block * ) 
srcu_notifier_chain_unregister extern int srcu_notifier_chain_unregister ( s#srcu_notifier_head * , s#notifier_block * ) 
__srcu_notifier_call_chain extern int __srcu_notifier_call_chain ( s#srcu_notifier_head * , unsigned long , void * , int , int * ) 
srcu_notifier_call_chain extern int srcu_notifier_call_chain ( s#srcu_notifier_head * , unsigned long , void * ) 
srcu_init_notifier_head extern void srcu_init_notifier_head ( s#srcu_notifier_head * ) 
register_reboot_notifier extern int register_reboot_notifier ( s#notifier_block * ) 
unregister_reboot_notifier extern int unregister_reboot_notifier ( s#notifier_block * ) 
register_die_notifier int register_die_notifier ( s#notifier_block * ) 
unregister_die_notifier int unregister_die_notifier ( s#notifier_block * ) 

/* kernel/panic.o */
panic_notifier_list extern s#atomic_notifier_head panic_notifier_list 
panic_blink extern long ( * panic_blink ) ( long ) 
panic void panic ( const char * , ... ) 
test_taint extern int test_taint ( unsigned ) 
add_taint extern void add_taint ( unsigned ) 
warn_slowpath_fmt extern void warn_slowpath_fmt ( const char * , const int , const char * , ... ) 
warn_slowpath_null extern void warn_slowpath_null ( const char * , const int ) 

/* kernel/params.o */
param_set_byte extern int param_set_byte ( const char * , s#kernel_param * ) 
param_get_byte extern int param_get_byte ( char * , s#kernel_param * ) 
param_set_short extern int param_set_short ( const char * , s#kernel_param * ) 
param_get_short extern int param_get_short ( char * , s#kernel_param * ) 
param_set_ushort extern int param_set_ushort ( const char * , s#kernel_param * ) 
param_get_ushort extern int param_get_ushort ( char * , s#kernel_param * ) 
param_set_int extern int param_set_int ( const char * , s#kernel_param * ) 
param_get_int extern int param_get_int ( char * , s#kernel_param * ) 
param_set_uint extern int param_set_uint ( const char * , s#kernel_param * ) 
param_get_uint extern int param_get_uint ( char * , s#kernel_param * ) 
param_set_long extern int param_set_long ( const char * , s#kernel_param * ) 
param_get_long extern int param_get_long ( char * , s#kernel_param * ) 
param_set_ulong extern int param_set_ulong ( const char * , s#kernel_param * ) 
param_get_ulong extern int param_get_ulong ( char * , s#kernel_param * ) 
param_set_charp extern int param_set_charp ( const char * , s#kernel_param * ) 
param_get_charp extern int param_get_charp ( char * , s#kernel_param * ) 
param_set_bool extern int param_set_bool ( const char * , s#kernel_param * ) 
param_get_bool extern int param_get_bool ( char * , s#kernel_param * ) 
param_set_invbool extern int param_set_invbool ( const char * , s#kernel_param * ) 
param_get_invbool extern int param_get_invbool ( char * , s#kernel_param * ) 
param_array_set extern int param_array_set ( const char * , s#kernel_param * ) 
param_array_get extern int param_array_get ( char * , s#kernel_param * ) 
param_set_copystring extern int param_set_copystring ( const char * , s#kernel_param * ) 
param_get_string extern int param_get_string ( char * , s#kernel_param * ) 

/* kernel/perf_event.o */
perf_tp_event extern void perf_tp_event ( int , t#u64 , t#u64 , void * , int ) 

/* kernel/pid.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##ipc_namespace
s##mnt_namespace
s##net_device
s##sock
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##sec_path
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##mem_cgroup
s##bsd_acct_struct
init_pid_ns extern s#pid_namespace init_pid_ns 
is_container_init extern int is_container_init ( s#task_struct * ) 
put_pid extern void put_pid ( s#pid * ) 
find_pid_ns extern s#pid * find_pid_ns ( int , s#pid_namespace * ) 
find_vpid extern s#pid * find_vpid ( int ) 
pid_task extern s#task_struct * pid_task ( s#pid * , e#pid_type ) 
find_get_pid extern s#pid * find_get_pid ( int ) 
pid_vnr t#pid_t pid_vnr ( s#pid * ) 
__task_pid_nr_ns t#pid_t __task_pid_nr_ns ( s#task_struct * , e#pid_type , s#pid_namespace * ) 
task_tgid_nr_ns t#pid_t task_tgid_nr_ns ( s#task_struct * , s#pid_namespace * ) 
task_active_pid_ns extern s#pid_namespace * task_active_pid_ns ( s#task_struct * ) 

/* kernel/pm_qos_params.o */
pm_qos_requirement int pm_qos_requirement ( int ) 
pm_qos_add_requirement int pm_qos_add_requirement ( int , char * , t#s32 ) 
pm_qos_update_requirement int pm_qos_update_requirement ( int , char * , t#s32 ) 
pm_qos_remove_requirement void pm_qos_remove_requirement ( int , char * ) 
pm_qos_add_notifier int pm_qos_add_notifier ( int , s#notifier_block * ) 
pm_qos_remove_notifier int pm_qos_remove_notifier ( int , s#notifier_block * ) 

/* kernel/posix-timers.o */
t#timer_t typedef t#__kernel_timer_t timer_t 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##tty_struct
s##taskstats
s##tty_audit_buf
s#sigqueue struct sigqueue { s#list_head list ; int flags ; t#siginfo_t info ; s#user_struct * user ; } 
u#cpu_time_count union cpu_time_count { t#cputime_t cpu ; unsigned long long sched ; } 
s#cpu_timer_list struct cpu_timer_list { s#list_head entry ; u#cpu_time_count expires , incr ; s#task_struct * task ; int firing ; } 
s#k_itimer struct k_itimer { s#list_head list ; t#spinlock_t it_lock ; t#clockid_t it_clock ; t#timer_t it_id ; int it_overrun ; int it_overrun_last ; int it_requeue_pending ; int it_sigev_notify ; s#signal_struct * it_signal ; union { s#pid * it_pid ; s#task_struct * it_process ; } ; s#sigqueue * sigq ; union { struct { s#hrtimer timer ; t#ktime_t interval ; } real ; s#cpu_timer_list cpu ; struct { unsigned int clock ; unsigned int node ; unsigned long incr ; unsigned long expires ; } mmtimer ; } it ; } 
posix_timer_event int posix_timer_event ( s#k_itimer * , int ) 
s#itimerspec struct itimerspec { s#timespec it_interval ; s#timespec it_value ; } 
s#k_clock struct k_clock { int res ; int ( * clock_getres ) ( const t#clockid_t , s#timespec * ) ; int ( * clock_set ) ( const t#clockid_t , s#timespec * ) ; int ( * clock_get ) ( const t#clockid_t , s#timespec * ) ; int ( * timer_create ) ( s#k_itimer * ) ; int ( * nsleep ) ( const t#clockid_t , int , s#timespec * , s#timespec * ) ; long ( * nsleep_restart ) ( s#restart_block * ) ; int ( * timer_set ) ( s#k_itimer * , int , s#itimerspec * , s#itimerspec * ) ; int ( * timer_del ) ( s#k_itimer * ) ; void ( * timer_get ) ( s#k_itimer * , s#itimerspec * ) ; } 
register_posix_clock void register_posix_clock ( const t#clockid_t , s#k_clock * ) 
do_posix_clock_nosettime int do_posix_clock_nosettime ( const t#clockid_t , s#timespec * ) 
do_posix_clock_nonanosleep int do_posix_clock_nonanosleep ( const t#clockid_t , int , s#timespec * , s#timespec * ) 

/* kernel/power/hibernate.o */
system_entering_hibernation extern t#bool system_entering_hibernation ( void ) 

/* kernel/power/main.o */
pm_flags extern unsigned int pm_flags 
register_pm_notifier extern int register_pm_notifier ( s#notifier_block * ) 
unregister_pm_notifier extern int unregister_pm_notifier ( s#notifier_block * ) 

/* kernel/power/suspend.o */
pm_suspend extern int pm_suspend ( t#suspend_state_t ) 

/* kernel/printk.o */
oops_in_progress extern int oops_in_progress 
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##nameidata
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##sysfs_dirent
console_drivers extern s#console * console_drivers 
console_set_on_cmdline extern int console_set_on_cmdline 
printk int printk ( const char * , ... ) 
vprintk int vprintk ( const char * , va_list args ) 
console_suspend_enabled extern int console_suspend_enabled 
acquire_console_sem extern void acquire_console_sem ( void ) 
try_acquire_console_sem extern int try_acquire_console_sem ( void ) 
release_console_sem extern void release_console_sem ( void ) 
console_conditional_schedule extern void console_conditional_schedule ( void ) 
console_stop extern void console_stop ( s#console * ) 
console_start extern void console_start ( s#console * ) 
register_console extern void register_console ( s#console * ) 
unregister_console extern int unregister_console ( s#console * ) 
printk_ratelimit extern int printk_ratelimit ( void ) 
printk_timed_ratelimit extern t#bool printk_timed_ratelimit ( unsigned long * , unsigned int ) 

/* kernel/profile.o */
prof_on extern int prof_on 
task_handoff_register int task_handoff_register ( s#notifier_block * ) 
task_handoff_unregister int task_handoff_unregister ( s#notifier_block * ) 
e#profile_type enum profile_type { PROFILE_TASK_EXIT , PROFILE_MUNMAP } 
profile_event_register int profile_event_register ( e#profile_type , s#notifier_block * ) 
profile_event_unregister int profile_event_unregister ( e#profile_type , s#notifier_block * ) 
register_timer_hook int register_timer_hook ( int ( * ) ( s#pt_regs * ) ) 
unregister_timer_hook void unregister_timer_hook ( int ( * ) ( s#pt_regs * ) ) 
profile_hits void profile_hits ( int , void * , unsigned int ) 

/* kernel/rcupdate.o */
synchronize_sched extern void synchronize_sched ( void ) 
synchronize_rcu_bh extern void synchronize_rcu_bh ( void ) 

/* kernel/rcutree.o */
rcu_batches_completed_sched extern long rcu_batches_completed_sched ( void ) 
rcu_batches_completed_bh extern long rcu_batches_completed_bh ( void ) 
call_rcu_sched extern void call_rcu_sched ( s#rcu_head * , void ( * ) ( s#rcu_head * ) ) 
call_rcu_bh extern void call_rcu_bh ( s#rcu_head * , void ( * ) ( s#rcu_head * ) ) 
rcu_barrier_bh extern void rcu_barrier_bh ( void ) 
rcu_barrier_sched extern void rcu_barrier_sched ( void ) 
rcu_batches_completed extern long rcu_batches_completed ( void ) 
call_rcu extern void call_rcu ( s#rcu_head * , void ( * ) ( s#rcu_head * ) ) 
synchronize_rcu_expedited extern void synchronize_rcu_expedited ( void ) 
rcu_barrier extern void rcu_barrier ( void ) 

/* kernel/relay.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
relay_buf_full extern int relay_buf_full ( s#rchan_buf * ) 
relay_reset extern void relay_reset ( s#rchan * ) 
relay_open s#rchan * relay_open ( const char * , s#dentry * , t#size_t , t#size_t , s#rchan_callbacks * , void * ) 
relay_switch_subbuf extern t#size_t relay_switch_subbuf ( s#rchan_buf * , t#size_t ) 
relay_subbufs_consumed extern void relay_subbufs_consumed ( s#rchan * , unsigned int , t#size_t ) 
relay_close extern void relay_close ( s#rchan * ) 
relay_flush extern void relay_flush ( s#rchan * ) 
relay_file_operations extern const s#file_operations relay_file_operations 

/* kernel/resource.o */
ioport_resource extern s#resource ioport_resource 
iomem_resource extern s#resource iomem_resource 
request_resource extern int request_resource ( s#resource * , s#resource * ) 
release_resource extern int release_resource ( s#resource * ) 
allocate_resource extern int allocate_resource ( s#resource * , s#resource * , t#resource_size_t , t#resource_size_t , t#resource_size_t , t#resource_size_t , void ( * ) ( void * , s#resource * , t#resource_size_t , t#resource_size_t ) , void * ) 
adjust_resource int adjust_resource ( s#resource * , t#resource_size_t , t#resource_size_t ) 
__request_region extern s#resource * __request_region ( s#resource * , t#resource_size_t , t#resource_size_t , const char * , int ) 
__check_region extern int __check_region ( s#resource * , t#resource_size_t , t#resource_size_t ) 
__release_region extern void __release_region ( s#resource * , t#resource_size_t , t#resource_size_t ) 
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
__devm_request_region extern s#resource * __devm_request_region ( s#device * , s#resource * , t#resource_size_t , t#resource_size_t , const char * ) 
__devm_release_region extern void __devm_release_region ( s#device * , s#resource * , t#resource_size_t , t#resource_size_t ) 

/* kernel/rtmutex.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s#rt_mutex_waiter struct rt_mutex_waiter { s#plist_node list_entry ; s#plist_node pi_list_entry ; s#task_struct * task ; s#rt_mutex * lock ; } 
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s#rt_mutex struct rt_mutex { t#spinlock_t wait_lock ; s#plist_head wait_list ; s#task_struct * owner ; } 
rt_mutex_lock extern void rt_mutex_lock ( s#rt_mutex * ) 
rt_mutex_lock_interruptible extern int rt_mutex_lock_interruptible ( s#rt_mutex * , int ) 
rt_mutex_timed_lock extern int rt_mutex_timed_lock ( s#rt_mutex * , s#hrtimer_sleeper * , int ) 
rt_mutex_trylock extern int rt_mutex_trylock ( s#rt_mutex * ) 
rt_mutex_unlock extern void rt_mutex_unlock ( s#rt_mutex * ) 
rt_mutex_destroy extern void rt_mutex_destroy ( s#rt_mutex * ) 
__rt_mutex_init extern void __rt_mutex_init ( s#rt_mutex * , const char * ) 

/* kernel/rwsem.o */
down_read extern void down_read ( s#rw_semaphore * ) 
down_read_trylock extern int down_read_trylock ( s#rw_semaphore * ) 
down_write extern void down_write ( s#rw_semaphore * ) 
down_write_trylock extern int down_write_trylock ( s#rw_semaphore * ) 
up_read extern void up_read ( s#rw_semaphore * ) 
up_write extern void up_write ( s#rw_semaphore * ) 
downgrade_write extern void downgrade_write ( s#rw_semaphore * ) 

/* kernel/sched.o */
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##anon_vma
s##radix_tree_node
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_geometry
s##blk_trace
s##timer_rand_state
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##bsd_acct_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##cgroupfs_root
s##css_id
s#rt_prio_array struct rt_prio_array { unsigned long bitmap [ ( ( ( 100 + 1 ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; s#list_head queue [ 100 ] ; } 
s#rt_rq struct rt_rq { s#rt_prio_array active ; unsigned long rt_nr_running ; struct { int curr ; int next ; } highest_prio ; unsigned long rt_nr_migratory ; unsigned long rt_nr_total ; int overloaded ; s#plist_head pushable_tasks ; int rt_throttled ; t#u64 rt_time ; t#u64 rt_runtime ; t#spinlock_t rt_runtime_lock ; unsigned long rt_nr_boosted ; s#rq * rq ; s#list_head leaf_rt_rq_list ; s#task_group * tg ; s#sched_rt_entity * rt_se ; } 
s#rt_bandwidth struct rt_bandwidth { t#spinlock_t rt_runtime_lock ; t#ktime_t rt_period ; t#u64 rt_runtime ; s#hrtimer rt_period_timer ; } 
s#task_group struct task_group { s#cgroup_subsys_state css ; s#sched_entity * * se ; s#cfs_rq * * cfs_rq ; unsigned long shares ; s#sched_rt_entity * * rt_se ; s#rt_rq * * rt_rq ; s#rt_bandwidth rt_bandwidth ; s#rcu_head rcu ; s#list_head list ; s#task_group * parent ; s#list_head siblings ; s#list_head children ; } 
s#cfs_rq struct cfs_rq { s#load_weight load ; unsigned long nr_running ; t#u64 exec_clock ; t#u64 min_vruntime ; s#rb_root tasks_timeline ; s#rb_node * rb_leftmost ; s#list_head tasks ; s#list_head * balance_iterator ; s#sched_entity * curr , * next , * last ; unsigned int nr_spread_over ; s#rq * rq ; s#list_head leaf_cfs_rq_list ; s#task_group * tg ; unsigned long task_weight ; unsigned long h_load ; unsigned long shares ; unsigned long rq_weight ; } 
s#cpupri_vec struct cpupri_vec { t#spinlock_t lock ; int count ; t#cpumask_var_t mask ; } 
s#cpupri struct cpupri { s#cpupri_vec pri_to_cpu [ ( 100 + 2 ) ] ; long pri_active [ ( ( ( ( 100 + 2 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; int cpu_to_pri [ 512 ] ; } 
s#root_domain struct root_domain { t#atomic_t refcount ; t#cpumask_var_t span ; t#cpumask_var_t online ; t#cpumask_var_t rto_mask ; t#atomic_t rto_count ; s#cpupri cpupri ; } 
s#rq struct rq { t#spinlock_t lock ; unsigned long nr_running ; unsigned long cpu_load [ 5 ] ; unsigned long last_tick_seen ; unsigned char in_nohz_recently ; s#load_weight load ; unsigned long nr_load_updates ; t#u64 nr_switches ; t#u64 nr_migrations_in ; s#cfs_rq cfs ; s#rt_rq rt ; s#list_head leaf_cfs_rq_list ; s#list_head leaf_rt_rq_list ; unsigned long nr_uninterruptible ; s#task_struct * curr , * idle ; unsigned long next_balance ; s#mm_struct * prev_mm ; t#u64 clock ; t#atomic_t nr_iowait ; s#root_domain * rd ; s#sched_domain * sd ; unsigned char idle_at_tick ; int post_schedule ; int active_balance ; int push_cpu ; int cpu ; int online ; unsigned long avg_load_per_task ; s#task_struct * migration_thread ; s#list_head migration_queue ; t#u64 rt_avg ; t#u64 age_stamp ; t#u64 idle_stamp ; t#u64 avg_idle ; unsigned long calc_load_update ; long calc_load_active ; int hrtick_csd_pending ; s#call_single_data hrtick_csd ; s#hrtimer hrtick_timer ; s#sched_info rq_sched_info ; unsigned long long rq_cpu_time ; unsigned int yld_count ; unsigned int sched_switch ; unsigned int sched_count ; unsigned int sched_goidle ; unsigned int ttwu_count ; unsigned int ttwu_local ; unsigned int bkl_count ; } 
s##bts_context
s##ds_context
s##fs_struct
s##ipc_namespace
s##mnt_namespace
s##net
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##mem_cgroup
kthread_bind void kthread_bind ( s#task_struct * , unsigned int ) 
kick_process extern void kick_process ( s#task_struct * ) 
wake_up_process extern int wake_up_process ( s#task_struct * ) 
preempt_notifier_register void preempt_notifier_register ( s#preempt_notifier * ) 
preempt_notifier_unregister void preempt_notifier_unregister ( s#preempt_notifier * ) 
avenrun extern unsigned long avenrun [ ] 
t#cputime64_t typedef t#u64 cputime64_t 
s#cpu_usage_stat struct cpu_usage_stat { t#cputime64_t user ; t#cputime64_t nice ; t#cputime64_t system ; t#cputime64_t softirq ; t#cputime64_t irq ; t#cputime64_t idle ; t#cputime64_t iowait ; t#cputime64_t steal ; t#cputime64_t guest ; } 
s#kernel_stat struct kernel_stat { s#cpu_usage_stat cpustat ; unsigned int softirqs [ NR_SOFTIRQS ] ; } 
per_cpu__kstat extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( s#kernel_stat ) per_cpu__kstat 
schedule void schedule ( void ) 
default_wake_function int default_wake_function ( t#wait_queue_t * , unsigned , int , void * ) 
__wake_up void __wake_up ( t#wait_queue_head_t * , unsigned int , int , void * ) 
__wake_up_sync_key void __wake_up_sync_key ( t#wait_queue_head_t * , unsigned int , int , void * ) 
__wake_up_sync void __wake_up_sync ( t#wait_queue_head_t * , unsigned int , int ) 
complete extern void complete ( s#completion * ) 
complete_all extern void complete_all ( s#completion * ) 
wait_for_completion extern void wait_for_completion ( s#completion * ) 
wait_for_completion_timeout extern unsigned long wait_for_completion_timeout ( s#completion * , unsigned long ) 
wait_for_completion_interruptible extern int wait_for_completion_interruptible ( s#completion * ) 
wait_for_completion_interruptible_timeout extern unsigned long wait_for_completion_interruptible_timeout ( s#completion * , unsigned long ) 
wait_for_completion_killable extern int wait_for_completion_killable ( s#completion * ) 
try_wait_for_completion extern t#bool try_wait_for_completion ( s#completion * ) 
completion_done extern t#bool completion_done ( s#completion * ) 
interruptible_sleep_on extern void interruptible_sleep_on ( t#wait_queue_head_t * ) 
interruptible_sleep_on_timeout extern long interruptible_sleep_on_timeout ( t#wait_queue_head_t * , signed long ) 
sleep_on extern void sleep_on ( t#wait_queue_head_t * ) 
sleep_on_timeout extern long sleep_on_timeout ( t#wait_queue_head_t * , signed long ) 
set_user_nice extern void set_user_nice ( s#task_struct * , long ) 
task_nice extern int task_nice ( const s#task_struct * ) 
s#sched_param struct sched_param { int sched_priority ; } 
sched_setscheduler extern int sched_setscheduler ( s#task_struct * , int , s#sched_param * ) 
_cond_resched extern int _cond_resched ( void ) 
__cond_resched_lock extern int __cond_resched_lock ( t#spinlock_t * ) 
__cond_resched_softirq extern int __cond_resched_softirq ( void ) 
yield void yield ( void ) 
io_schedule void io_schedule ( void ) 
set_cpus_allowed_ptr extern int set_cpus_allowed_ptr ( s#task_struct * , const s#cpumask * ) 
rcu_expedited_torture_stats extern int rcu_expedited_torture_stats ( char * ) 
synchronize_sched_expedited extern void synchronize_sched_expedited ( void ) 
t#kdb_printf_t typedef void ( * kdb_printf_t ) ( const char * , ... ) 
kdb_runqueue void kdb_runqueue ( unsigned long , t#kdb_printf_t ) 

/* kernel/sched_clock.o */
sched_clock_idle_sleep_event extern void sched_clock_idle_sleep_event ( void ) 
sched_clock_idle_wakeup_event extern void sched_clock_idle_wakeup_event ( t#u64 ) 
cpu_clock extern unsigned long long cpu_clock ( int ) 

/* kernel/semaphore.o */
down extern void down ( s#semaphore * ) 
down_interruptible extern int __attribute__ ( ( warn_unused_result ) ) down_interruptible ( s#semaphore * ) 
down_killable extern int __attribute__ ( ( warn_unused_result ) ) down_killable ( s#semaphore * ) 
down_trylock extern int __attribute__ ( ( warn_unused_result ) ) down_trylock ( s#semaphore * ) 
down_timeout extern int __attribute__ ( ( warn_unused_result ) ) down_timeout ( s#semaphore * , long ) 
up extern void up ( s#semaphore * ) 

/* kernel/signal.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##compat_timespec
s##pollfd
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##net
s##proc_dir_entry
s##taskstats
s##tty_audit_buf
s##audit_context
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##bsd_acct_struct
kill_pid_info_as_uid extern int kill_pid_info_as_uid ( int , s#siginfo * , s#pid * , t#uid_t , t#uid_t , t#u32 ) 
kill_pgrp extern int kill_pgrp ( s#pid * , int , int ) 
kill_pid extern int kill_pid ( s#pid * , int , int ) 
recalc_sigpending extern void recalc_sigpending ( void ) 
dequeue_signal extern int dequeue_signal ( s#task_struct * , t#sigset_t * , t#siginfo_t * ) 
flush_signals extern void flush_signals ( s#task_struct * ) 
force_sig extern void force_sig ( int , s#task_struct * ) 
send_sig extern int send_sig ( int , s#task_struct * , int ) 
send_sig_info extern int send_sig_info ( int , s#siginfo * , s#task_struct * ) 
sigprocmask extern int sigprocmask ( int , t#sigset_t * , t#sigset_t * ) 
block_all_signals extern void block_all_signals ( int ( * ) ( void * ) , void * , t#sigset_t * ) 
unblock_all_signals extern void unblock_all_signals ( void ) 

/* kernel/slow-work.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
slow_work_sleep_till_thread_needed extern t#bool slow_work_sleep_till_thread_needed ( s#slow_work * , signed long * ) 
slow_work_enqueue extern int slow_work_enqueue ( s#slow_work * ) 
slow_work_cancel extern void slow_work_cancel ( s#slow_work * ) 
s#delayed_slow_work struct delayed_slow_work { s#slow_work work ; s#timer_list timer ; } 
delayed_slow_work_enqueue extern int delayed_slow_work_enqueue ( s#delayed_slow_work * , unsigned long ) 
slow_work_register_user extern int slow_work_register_user ( s#module * ) 
slow_work_unregister_user extern void slow_work_unregister_user ( s#module * ) 

/* kernel/smp.o */
smp_call_function_single int smp_call_function_single ( int , void ( * ) ( void * ) , void * , int ) 
smp_call_function_many void smp_call_function_many ( const s#cpumask * , void ( * ) ( void * ) , void * , t#bool ) 
smp_call_function int smp_call_function ( void ( * ) ( void * ) , void * , int ) 

/* kernel/softirq.o */
local_bh_disable extern void local_bh_disable ( void ) 
_local_bh_enable extern void _local_bh_enable ( void ) 
local_bh_enable extern void local_bh_enable ( void ) 
local_bh_enable_ip extern void local_bh_enable_ip ( unsigned long ) 
__tasklet_schedule extern void __tasklet_schedule ( s#tasklet_struct * ) 
__tasklet_hi_schedule extern void __tasklet_hi_schedule ( s#tasklet_struct * ) 
__tasklet_hi_schedule_first extern void __tasklet_hi_schedule_first ( s#tasklet_struct * ) 
tasklet_init extern void tasklet_init ( s#tasklet_struct * , void ( * ) ( unsigned long ) , unsigned long ) 
tasklet_kill extern void tasklet_kill ( s#tasklet_struct * ) 
s#tasklet_hrtimer struct tasklet_hrtimer { s#hrtimer timer ; s#tasklet_struct tasklet ; e#hrtimer_restart ( * function ) ( s#hrtimer * ) ; } 
tasklet_hrtimer_init extern void tasklet_hrtimer_init ( s#tasklet_hrtimer * , e#hrtimer_restart ( * ) ( s#hrtimer * ) , t#clockid_t , e#hrtimer_mode ) 
__send_remote_softirq extern void __send_remote_softirq ( s#call_single_data * , int , int , int ) 
send_remote_softirq extern void send_remote_softirq ( s#call_single_data * , int , int ) 
on_each_cpu int on_each_cpu ( void ( * ) ( void * ) , void * , int ) 

/* kernel/spinlock.o */
_spin_trylock int __attribute__ ( ( section ( ".spinlock.text" ) ) ) _spin_trylock ( t#spinlock_t * ) 
_read_trylock int __attribute__ ( ( section ( ".spinlock.text" ) ) ) _read_trylock ( t#rwlock_t * ) 
_write_trylock int __attribute__ ( ( section ( ".spinlock.text" ) ) ) _write_trylock ( t#rwlock_t * ) 
_read_lock void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _read_lock ( t#rwlock_t * ) 
_spin_lock_irqsave unsigned long __attribute__ ( ( section ( ".spinlock.text" ) ) ) _spin_lock_irqsave ( t#spinlock_t * ) 
_spin_lock_irq void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _spin_lock_irq ( t#spinlock_t * ) 
_spin_lock_bh void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _spin_lock_bh ( t#spinlock_t * ) 
_read_lock_irqsave unsigned long __attribute__ ( ( section ( ".spinlock.text" ) ) ) _read_lock_irqsave ( t#rwlock_t * ) 
_read_lock_irq void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _read_lock_irq ( t#rwlock_t * ) 
_read_lock_bh void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _read_lock_bh ( t#rwlock_t * ) 
_write_lock_irqsave unsigned long __attribute__ ( ( section ( ".spinlock.text" ) ) ) _write_lock_irqsave ( t#rwlock_t * ) 
_write_lock_irq void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _write_lock_irq ( t#rwlock_t * ) 
_write_lock_bh void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _write_lock_bh ( t#rwlock_t * ) 
_spin_lock void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _spin_lock ( t#spinlock_t * ) 
_write_lock void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _write_lock ( t#rwlock_t * ) 
_spin_unlock_irqrestore void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _spin_unlock_irqrestore ( t#spinlock_t * , unsigned long ) 
_spin_unlock_bh void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _spin_unlock_bh ( t#spinlock_t * ) 
_read_unlock_irqrestore void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _read_unlock_irqrestore ( t#rwlock_t * , unsigned long ) 
_read_unlock_bh void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _read_unlock_bh ( t#rwlock_t * ) 
_write_unlock_irqrestore void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _write_unlock_irqrestore ( t#rwlock_t * , unsigned long ) 
_write_unlock_bh void __attribute__ ( ( section ( ".spinlock.text" ) ) ) _write_unlock_bh ( t#rwlock_t * ) 
_spin_trylock_bh int __attribute__ ( ( section ( ".spinlock.text" ) ) ) _spin_trylock_bh ( t#spinlock_t * ) 
in_lock_functions int in_lock_functions ( unsigned long ) 

/* kernel/srcu.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
init_srcu_struct int init_srcu_struct ( s#srcu_struct * ) 
cleanup_srcu_struct void cleanup_srcu_struct ( s#srcu_struct * ) 
srcu_read_lock int srcu_read_lock ( s#srcu_struct * ) 
srcu_read_unlock void srcu_read_unlock ( s#srcu_struct * , int ) 
synchronize_srcu void synchronize_srcu ( s#srcu_struct * ) 
synchronize_srcu_expedited void synchronize_srcu_expedited ( s#srcu_struct * ) 
srcu_batches_completed long srcu_batches_completed ( s#srcu_struct * ) 

/* kernel/stacktrace.o */
print_stack_trace extern void print_stack_trace ( s#stack_trace * , int ) 

/* kernel/stop_machine.o */
stop_machine_create int stop_machine_create ( void ) 
stop_machine_destroy void stop_machine_destroy ( void ) 
stop_machine int stop_machine ( int ( * ) ( void * ) , void * , const s#cpumask * ) 

/* kernel/sys.o */
overflowuid extern int overflowuid 
overflowgid extern int overflowgid 
fs_overflowuid extern int fs_overflowuid 
fs_overflowgid extern int fs_overflowgid 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##pollfd
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##ipc_namespace
s##mnt_namespace
s##net
s##proc_dir_entry
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##ftrace_ret_stack
s##mem_cgroup
s##bsd_acct_struct
cad_pid extern s#pid * cad_pid 
emergency_restart extern void emergency_restart ( void ) 
kernel_restart extern void kernel_restart ( char * ) 
kernel_halt extern void kernel_halt ( void ) 
kernel_power_off extern void kernel_power_off ( void ) 
orderly_poweroff extern int orderly_poweroff ( t#bool ) 

/* kernel/sysctl.o */
proc_dointvec extern int proc_dointvec ( s#ctl_table * , int , void * , t#size_t * , t#loff_t * ) 
proc_dointvec_jiffies extern int proc_dointvec_jiffies ( s#ctl_table * , int , void * , t#size_t * , t#loff_t * ) 
proc_dointvec_minmax extern int proc_dointvec_minmax ( s#ctl_table * , int , void * , t#size_t * , t#loff_t * ) 
proc_dointvec_userhz_jiffies extern int proc_dointvec_userhz_jiffies ( s#ctl_table * , int , void * , t#size_t * , t#loff_t * ) 
proc_dointvec_ms_jiffies extern int proc_dointvec_ms_jiffies ( s#ctl_table * , int , void * , t#size_t * , t#loff_t * ) 
proc_dostring extern int proc_dostring ( s#ctl_table * , int , void * , t#size_t * , t#loff_t * ) 
proc_doulongvec_minmax extern int proc_doulongvec_minmax ( s#ctl_table * , int , void * , t#size_t * , t#loff_t * ) 
proc_doulongvec_ms_jiffies_minmax extern int proc_doulongvec_ms_jiffies_minmax ( s#ctl_table * , int , void * , t#size_t * , t#loff_t * ) 
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##mtd_info
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##compat_timespec
s##cdev
s##radix_tree_node
s##array_cache
s##kmem_list3
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##mem_cgroup
s##bsd_acct_struct
s##iw_handler_def
s##iw_public_data
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##rtable
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
register_sysctl_table s#ctl_table_header * register_sysctl_table ( s#ctl_table * ) 
s#ctl_path struct ctl_path { const char * procname ; int ctl_name ; } 
register_sysctl_paths s#ctl_table_header * register_sysctl_paths ( const s#ctl_path * , s#ctl_table * ) 
sysctl_intvec extern t#ctl_handler sysctl_intvec 
sysctl_jiffies extern t#ctl_handler sysctl_jiffies 
sysctl_ms_jiffies extern t#ctl_handler sysctl_ms_jiffies 
sysctl_string extern t#ctl_handler sysctl_string 
sysctl_data extern t#ctl_handler sysctl_data 
unregister_sysctl_table void unregister_sysctl_table ( s#ctl_table_header * ) 

/* kernel/time.o */
s#timezone struct timezone { int tz_minuteswest ; int tz_dsttime ; } 
sys_tz extern s#timezone sys_tz 
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##hd_struct
s##gendisk
s##cdev
s##posix_acl
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s##xattr_handler
s##mtd_info
current_fs_time extern s#timespec current_fs_time ( s#super_block * ) 
jiffies_to_msecs extern unsigned int jiffies_to_msecs ( const unsigned long ) 
jiffies_to_usecs extern unsigned int jiffies_to_usecs ( const unsigned long ) 
timespec_trunc extern s#timespec timespec_trunc ( s#timespec , unsigned ) 
mktime extern unsigned long mktime ( const unsigned int , const unsigned int , const unsigned int , const unsigned int , const unsigned int , const unsigned int ) 
set_normalized_timespec extern void set_normalized_timespec ( s#timespec * , t#time_t , t#s64 ) 
ns_to_timespec extern s#timespec ns_to_timespec ( const t#s64 ) 
ns_to_timeval extern s#timeval ns_to_timeval ( const t#s64 ) 
msecs_to_jiffies extern unsigned long msecs_to_jiffies ( const unsigned int ) 
usecs_to_jiffies extern unsigned long usecs_to_jiffies ( const unsigned int ) 
timespec_to_jiffies extern unsigned long timespec_to_jiffies ( const s#timespec * ) 
jiffies_to_timespec extern void jiffies_to_timespec ( const unsigned long , s#timespec * ) 
timeval_to_jiffies extern unsigned long timeval_to_jiffies ( const s#timeval * ) 
jiffies_to_timeval extern void jiffies_to_timeval ( const unsigned long , s#timeval * ) 
t#clock_t typedef t#__kernel_clock_t clock_t 
jiffies_to_clock_t extern t#clock_t jiffies_to_clock_t ( long ) 
clock_t_to_jiffies extern unsigned long clock_t_to_jiffies ( unsigned long ) 
jiffies_64_to_clock_t extern t#u64 jiffies_64_to_clock_t ( t#u64 ) 
jiffies extern unsigned long volatile __attribute__ ( ( section ( ".data" ) ) ) jiffies 

/* kernel/time/clockevents.o */
e#clock_event_mode enum clock_event_mode { CLOCK_EVT_MODE_UNUSED = 0 , CLOCK_EVT_MODE_SHUTDOWN , CLOCK_EVT_MODE_PERIODIC , CLOCK_EVT_MODE_ONESHOT , CLOCK_EVT_MODE_RESUME , } 
s#clock_event_device struct clock_event_device { const char * name ; unsigned int features ; unsigned long max_delta_ns ; unsigned long min_delta_ns ; unsigned long mult ; int shift ; int rating ; int irq ; const s#cpumask * cpumask ; int ( * set_next_event ) ( unsigned long , s#clock_event_device * ) ; void ( * set_mode ) ( e#clock_event_mode , s#clock_event_device * ) ; void ( * event_handler ) ( s#clock_event_device * ) ; void ( * broadcast ) ( const s#cpumask * ) ; s#list_head list ; e#clock_event_mode mode ; t#ktime_t next_event ; } 
clockevent_delta2ns extern unsigned long clockevent_delta2ns ( unsigned long , s#clock_event_device * ) 
clockevents_register_device extern void clockevents_register_device ( s#clock_event_device * ) 
clockevents_notify extern void clockevents_notify ( unsigned long , void * ) 

/* kernel/time/clocksource.o */
t#cycle_t typedef t#u64 cycle_t 
s#cyclecounter struct cyclecounter { t#cycle_t ( * read ) ( const s#cyclecounter * ) ; t#cycle_t mask ; t#u32 mult ; t#u32 shift ; } 
s#timecounter struct timecounter { const s#cyclecounter * cc ; t#cycle_t cycle_last ; t#u64 nsec ; } 
timecounter_init extern void timecounter_init ( s#timecounter * , const s#cyclecounter * , t#u64 ) 
timecounter_read extern t#u64 timecounter_read ( s#timecounter * ) 
timecounter_cyc2time extern t#u64 timecounter_cyc2time ( s#timecounter * , t#cycle_t ) 
s#clocksource struct clocksource { char * name ; s#list_head list ; int rating ; t#cycle_t ( * read ) ( s#clocksource * ) ; int ( * enable ) ( s#clocksource * ) ; void ( * disable ) ( s#clocksource * ) ; t#cycle_t mask ; t#u32 mult ; t#u32 shift ; t#u64 max_idle_ns ; unsigned long flags ; t#cycle_t ( * vread ) ( void ) ; void ( * resume ) ( void ) ; t#cycle_t cycle_last __attribute__ ( ( __aligned__ ( ( 1 << ( 7 ) ) ) ) ) ; s#list_head wd_list ; t#cycle_t wd_last ; } 
clocksource_register extern int clocksource_register ( s#clocksource * ) 
clocksource_change_rating extern void clocksource_change_rating ( s#clocksource * , int ) 
clocksource_unregister extern void clocksource_unregister ( s#clocksource * ) 

/* kernel/time/tick-sched.o */
get_cpu_idle_time_us extern t#u64 get_cpu_idle_time_us ( int , t#u64 * ) 

/* kernel/time/timecompare.o */
s#timecompare struct timecompare { s#timecounter * source ; t#ktime_t ( * target ) ( void ) ; int num_samples ; t#s64 offset ; t#s64 skew ; t#u64 last_update ; } 
timecompare_transform extern t#ktime_t timecompare_transform ( s#timecompare * , t#u64 ) 
timecompare_offset extern int timecompare_offset ( s#timecompare * , t#s64 * , t#u64 * ) 
__timecompare_update extern void __timecompare_update ( s#timecompare * , t#u64 ) 

/* kernel/time/timeconv.o */
s#tm struct tm { int tm_sec ; int tm_min ; int tm_hour ; int tm_mday ; int tm_mon ; long tm_year ; int tm_wday ; int tm_yday ; } 
time_to_tm void time_to_tm ( t#time_t , int , s#tm * ) 

/* kernel/time/timekeeping.o */
getnstimeofday extern void getnstimeofday ( s#timespec * ) 
ktime_get extern t#ktime_t ktime_get ( void ) 
ktime_get_ts extern void ktime_get_ts ( s#timespec * ) 
do_gettimeofday extern void do_gettimeofday ( s#timeval * ) 
do_settimeofday extern int do_settimeofday ( s#timespec * ) 
ktime_get_real extern t#ktime_t ktime_get_real ( void ) 
getrawmonotonic extern void getrawmonotonic ( s#timespec * ) 
getboottime extern void getboottime ( s#timespec * ) 
monotonic_to_bootbased extern void monotonic_to_bootbased ( s#timespec * ) 
get_seconds unsigned long get_seconds ( void ) 
current_kernel_time s#timespec current_kernel_time ( void ) 

/* kernel/timer.o */
jiffies_64 extern t#u64 __attribute__ ( ( section ( ".data" ) ) ) jiffies_64 
s#tvec_root struct tvec_root { s#list_head vec [ ( 1 << ( 0 ? 6 : 8 ) ) ] ; } 
s#tvec struct tvec { s#list_head vec [ ( 1 << ( 0 ? 4 : 6 ) ) ] ; } 
s#tvec_base struct tvec_base { t#spinlock_t lock ; s#timer_list * running_timer ; unsigned long timer_jiffies ; unsigned long next_timer ; s#tvec_root tv1 ; s#tvec tv2 ; s#tvec tv3 ; s#tvec tv4 ; s#tvec tv5 ; } 
boot_tvec_bases extern s#tvec_base boot_tvec_bases 
__round_jiffies unsigned long __round_jiffies ( unsigned long , int ) 
__round_jiffies_relative unsigned long __round_jiffies_relative ( unsigned long , int ) 
round_jiffies unsigned long round_jiffies ( unsigned long ) 
round_jiffies_relative unsigned long round_jiffies_relative ( unsigned long ) 
__round_jiffies_up unsigned long __round_jiffies_up ( unsigned long , int ) 
__round_jiffies_up_relative unsigned long __round_jiffies_up_relative ( unsigned long , int ) 
round_jiffies_up unsigned long round_jiffies_up ( unsigned long ) 
round_jiffies_up_relative unsigned long round_jiffies_up_relative ( unsigned long ) 
init_timer_key void init_timer_key ( s#timer_list * , const char * , s#lock_class_key * ) 
init_timer_deferrable_key void init_timer_deferrable_key ( s#timer_list * , const char * , s#lock_class_key * ) 
mod_timer_pending extern int mod_timer_pending ( s#timer_list * , unsigned long ) 
mod_timer extern int mod_timer ( s#timer_list * , unsigned long ) 
mod_timer_pinned extern int mod_timer_pinned ( s#timer_list * , unsigned long ) 
add_timer extern void add_timer ( s#timer_list * ) 
add_timer_on extern void add_timer_on ( s#timer_list * , int ) 
del_timer extern int del_timer ( s#timer_list * ) 
try_to_del_timer_sync extern int try_to_del_timer_sync ( s#timer_list * ) 
del_timer_sync extern int del_timer_sync ( s#timer_list * ) 
schedule_timeout extern signed long schedule_timeout ( signed long ) 
schedule_timeout_interruptible extern signed long schedule_timeout_interruptible ( signed long ) 
schedule_timeout_killable extern signed long schedule_timeout_killable ( signed long ) 
schedule_timeout_uninterruptible extern signed long schedule_timeout_uninterruptible ( signed long ) 
msleep void msleep ( unsigned int ) 
msleep_interruptible unsigned long msleep_interruptible ( unsigned int ) 

/* kernel/trace/blktrace.o */
s##tvec_base
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ring_buffer
s#trace_array_cpu struct trace_array_cpu { t#atomic_t disabled ; void * buffer_page ; unsigned long saved_latency ; unsigned long critical_start ; unsigned long critical_end ; unsigned long critical_sequence ; unsigned long nice ; unsigned long policy ; unsigned long rt_priority ; unsigned long skipped_entries ; t#cycle_t preempt_timestamp ; t#pid_t pid ; t#uid_t uid ; char comm [ 16 ] ; } 
s#trace_array struct trace_array { s#ring_buffer * buffer ; unsigned long entries ; int cpu ; t#cycle_t time_start ; s#task_struct * waiter ; s#trace_array_cpu * data [ 512 ] ; } 
s##vfsmount
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s#tracer_opt struct tracer_opt { const char * name ; t#u32 bit ; } 
s#tracer_flags struct tracer_flags { t#u32 val ; s#tracer_opt * opts ; } 
s#tracer struct tracer { const char * name ; int ( * init ) ( s#trace_array * ) ; void ( * reset ) ( s#trace_array * ) ; void ( * start ) ( s#trace_array * ) ; void ( * stop ) ( s#trace_array * ) ; void ( * open ) ( s#trace_iterator * ) ; void ( * pipe_open ) ( s#trace_iterator * ) ; void ( * wait_pipe ) ( s#trace_iterator * ) ; void ( * close ) ( s#trace_iterator * ) ; t#ssize_t ( * read ) ( s#trace_iterator * , s#file * , char * , t#size_t , t#loff_t * ) ; t#ssize_t ( * splice_read ) ( s#trace_iterator * , s#file * , t#loff_t * , s#pipe_inode_info * , t#size_t , unsigned int ) ; int ( * selftest ) ( s#tracer * , s#trace_array * ) ; void ( * print_header ) ( s#seq_file * ) ; e#print_line_t ( * print_line ) ( s#trace_iterator * ) ; int ( * set_flag ) ( t#u32 , t#u32 , int ) ; s#tracer * next ; int print_max ; s#tracer_flags * flags ; } 
s##ring_buffer_iter
t#filter_pred_fn_t typedef int ( * filter_pred_fn_t ) ( s#filter_pred * , void * , int , int ) 
s#filter_pred struct filter_pred { t#filter_pred_fn_t fn ; t#u64 val ; char str_val [ 256 ] ; int str_len ; char * field_name ; int offset ; int not ; int op ; int pop_n ; } 
s#event_filter struct event_filter { int n_preds ; s#filter_pred * * preds ; char * filter_string ; t#bool no_reset ; } 
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_geometry
s##timer_rand_state
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##mem_cgroup
s##map_segment
s##compat_timespec
s##nameidata
s##cdev
s##posix_acl
__trace_note_message extern void __trace_note_message ( s#blk_trace * , const char * , ... ) 
blk_trace_remove extern int blk_trace_remove ( s#request_queue * ) 
blk_trace_setup extern int blk_trace_setup ( s#request_queue * , char * , t#dev_t , s#block_device * , char * ) 
blk_trace_startstop extern int blk_trace_startstop ( s#request_queue * , int ) 
blk_add_driver_data extern void blk_add_driver_data ( s#request_queue * , s#request * , void * , t#size_t ) 

/* kernel/trace/power-traces.o */
__tracepoint_power_start extern s#tracepoint __tracepoint_power_start 
__tracepoint_power_end extern s#tracepoint __tracepoint_power_end 
__tracepoint_power_frequency extern s#tracepoint __tracepoint_power_frequency 

/* kernel/trace/ring_buffer.o */
tracing_on void tracing_on ( void ) 
tracing_off void tracing_off ( void ) 
tracing_is_on int tracing_is_on ( void ) 
s#ring_buffer_event struct ring_buffer_event { int bitfield_begin [ 0 ] ; ; t#u32 type_len : 5 , time_delta : 27 ; int bitfield_end [ 0 ] ; ; t#u32 array [ ] ; } 
ring_buffer_event_length unsigned ring_buffer_event_length ( s#ring_buffer_event * ) 
ring_buffer_event_data void * ring_buffer_event_data ( s#ring_buffer_event * ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
t#local_t typedef struct { t#atomic_long_t a ; } local_t 
s#buffer_data_page struct buffer_data_page { t#u64 time_stamp ; t#local_t commit ; unsigned char data [ ] ; } 
s#buffer_page struct buffer_page { s#list_head list ; t#local_t write ; unsigned read ; t#local_t entries ; s#buffer_data_page * page ; } 
s#ring_buffer_per_cpu struct ring_buffer_per_cpu { int cpu ; s#ring_buffer * buffer ; t#spinlock_t reader_lock ; t#raw_spinlock_t lock ; s#lock_class_key lock_key ; s#list_head * pages ; s#buffer_page * head_page ; s#buffer_page * tail_page ; s#buffer_page * commit_page ; s#buffer_page * reader_page ; t#local_t commit_overrun ; t#local_t overrun ; t#local_t entries ; t#local_t committing ; t#local_t commits ; unsigned long read ; t#u64 write_stamp ; t#u64 read_stamp ; t#atomic_t record_disabled ; } 
s#ring_buffer_iter struct ring_buffer_iter { s#ring_buffer_per_cpu * cpu_buffer ; unsigned long head ; s#buffer_page * head_page ; t#u64 read_stamp ; } 
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s#ring_buffer struct ring_buffer { unsigned pages ; unsigned flags ; int cpus ; t#atomic_t record_disabled ; t#cpumask_var_t cpumask ; s#lock_class_key * reader_lock_key ; s#mutex mutex ; s#ring_buffer_per_cpu * * buffers ; s#notifier_block cpu_notify ; t#u64 ( * clock ) ( void ) ; } 
ring_buffer_time_stamp t#u64 ring_buffer_time_stamp ( s#ring_buffer * , int ) 
ring_buffer_normalize_time_stamp void ring_buffer_normalize_time_stamp ( s#ring_buffer * , int , t#u64 * ) 
__ring_buffer_alloc s#ring_buffer * __ring_buffer_alloc ( unsigned long , unsigned , s#lock_class_key * ) 
ring_buffer_free void ring_buffer_free ( s#ring_buffer * ) 
ring_buffer_resize int ring_buffer_resize ( s#ring_buffer * , unsigned long ) 
ring_buffer_lock_reserve s#ring_buffer_event * ring_buffer_lock_reserve ( s#ring_buffer * , unsigned long ) 
ring_buffer_unlock_commit int ring_buffer_unlock_commit ( s#ring_buffer * , s#ring_buffer_event * ) 
ring_buffer_discard_commit void ring_buffer_discard_commit ( s#ring_buffer * , s#ring_buffer_event * ) 
ring_buffer_write int ring_buffer_write ( s#ring_buffer * , unsigned long , void * ) 
ring_buffer_record_disable void ring_buffer_record_disable ( s#ring_buffer * ) 
ring_buffer_record_enable void ring_buffer_record_enable ( s#ring_buffer * ) 
ring_buffer_record_disable_cpu void ring_buffer_record_disable_cpu ( s#ring_buffer * , int ) 
ring_buffer_record_enable_cpu void ring_buffer_record_enable_cpu ( s#ring_buffer * , int ) 
ring_buffer_entries_cpu unsigned long ring_buffer_entries_cpu ( s#ring_buffer * , int ) 
ring_buffer_overrun_cpu unsigned long ring_buffer_overrun_cpu ( s#ring_buffer * , int ) 
ring_buffer_commit_overrun_cpu unsigned long ring_buffer_commit_overrun_cpu ( s#ring_buffer * , int ) 
ring_buffer_entries unsigned long ring_buffer_entries ( s#ring_buffer * ) 
ring_buffer_overruns unsigned long ring_buffer_overruns ( s#ring_buffer * ) 
ring_buffer_iter_reset void ring_buffer_iter_reset ( s#ring_buffer_iter * ) 
ring_buffer_iter_empty int ring_buffer_iter_empty ( s#ring_buffer_iter * ) 
ring_buffer_peek s#ring_buffer_event * ring_buffer_peek ( s#ring_buffer * , int , t#u64 * ) 
ring_buffer_iter_peek s#ring_buffer_event * ring_buffer_iter_peek ( s#ring_buffer_iter * , t#u64 * ) 
ring_buffer_consume s#ring_buffer_event * ring_buffer_consume ( s#ring_buffer * , int , t#u64 * ) 
ring_buffer_read_start s#ring_buffer_iter * ring_buffer_read_start ( s#ring_buffer * , int ) 
ring_buffer_read_finish void ring_buffer_read_finish ( s#ring_buffer_iter * ) 
ring_buffer_read s#ring_buffer_event * ring_buffer_read ( s#ring_buffer_iter * , t#u64 * ) 
ring_buffer_size unsigned long ring_buffer_size ( s#ring_buffer * ) 
ring_buffer_reset_cpu void ring_buffer_reset_cpu ( s#ring_buffer * , int ) 
ring_buffer_reset void ring_buffer_reset ( s#ring_buffer * ) 
ring_buffer_empty int ring_buffer_empty ( s#ring_buffer * ) 
ring_buffer_empty_cpu int ring_buffer_empty_cpu ( s#ring_buffer * , int ) 
ring_buffer_swap_cpu int ring_buffer_swap_cpu ( s#ring_buffer * , s#ring_buffer * , int ) 
ring_buffer_alloc_read_page void * ring_buffer_alloc_read_page ( s#ring_buffer * ) 
ring_buffer_free_read_page void ring_buffer_free_read_page ( s#ring_buffer * , void * ) 
ring_buffer_read_page int ring_buffer_read_page ( s#ring_buffer * , void * * , t#size_t , int , int ) 

/* kernel/trace/trace.o */
s##ring_buffer
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##backing_dev_info
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##mem_cgroup
s##map_segment
s##compat_timespec
s##nameidata
s##cdev
s##posix_acl
s##ring_buffer_iter
filter_current_check_discard extern int filter_current_check_discard ( s#ring_buffer * , s#ftrace_event_call * , void * , s#ring_buffer_event * ) 
tracing_generic_entry_update void tracing_generic_entry_update ( s#trace_entry * , unsigned long , int ) 
trace_current_buffer_lock_reserve s#ring_buffer_event * trace_current_buffer_lock_reserve ( s#ring_buffer * * , int , unsigned long , unsigned long , int ) 
trace_current_buffer_unlock_commit void trace_current_buffer_unlock_commit ( s#ring_buffer * , s#ring_buffer_event * , unsigned long , int ) 
trace_nowake_buffer_unlock_commit void trace_nowake_buffer_unlock_commit ( s#ring_buffer * , s#ring_buffer_event * , unsigned long , int ) 
trace_current_buffer_discard_commit void trace_current_buffer_discard_commit ( s#ring_buffer * , s#ring_buffer_event * ) 
trace_vbprintk extern int trace_vbprintk ( unsigned long , const char * , va_list args ) 
trace_vprintk extern int trace_vprintk ( unsigned long , const char * , va_list args ) 

/* kernel/trace/trace_event_profile.o */
trace_profile_buf extern char * trace_profile_buf 
trace_profile_buf_nmi extern char * trace_profile_buf_nmi 

/* kernel/trace/trace_events.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##ring_buffer
s##ring_buffer_iter
trace_define_field extern int trace_define_field ( s#ftrace_event_call * , const char * , const char * , int , int , int , int ) 
trace_define_common_fields extern int trace_define_common_fields ( s#ftrace_event_call * ) 

/* kernel/trace/trace_events_filter.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##ring_buffer
s##ring_buffer_iter
filter_match_preds extern int filter_match_preds ( s#ftrace_event_call * , void * ) 

/* kernel/trace/trace_irqsoff.o */
start_critical_timings extern void start_critical_timings ( void ) 
stop_critical_timings extern void stop_critical_timings ( void ) 
trace_hardirqs_on extern void trace_hardirqs_on ( void ) 
trace_hardirqs_off extern void trace_hardirqs_off ( void ) 
trace_hardirqs_on_caller void trace_hardirqs_on_caller ( unsigned long ) 
trace_hardirqs_off_caller void trace_hardirqs_off_caller ( unsigned long ) 

/* kernel/trace/trace_output.o */
per_cpu__ftrace_event_seq extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( s#trace_seq ) per_cpu__ftrace_event_seq 
trace_seq_printf extern int trace_seq_printf ( s#trace_seq * , const char * , ... ) 
trace_seq_vprintf extern int trace_seq_vprintf ( s#trace_seq * , const char * , va_list args ) 
ftrace_print_flags_seq const char * ftrace_print_flags_seq ( s#trace_seq * , const char * , unsigned long , const s#trace_print_flags * ) 
ftrace_print_symbols_seq const char * ftrace_print_symbols_seq ( s#trace_seq * , unsigned long , const s#trace_print_flags * ) 
s##ring_buffer
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##mem_cgroup
s##ring_buffer_iter
register_ftrace_event extern int register_ftrace_event ( s#trace_event * ) 
unregister_ftrace_event extern int unregister_ftrace_event ( s#trace_event * ) 

/* kernel/trace/trace_printk.o */
__trace_bprintk extern int __trace_bprintk ( unsigned long , const char * , ... ) 
__ftrace_vbprintk extern int __ftrace_vbprintk ( unsigned long , const char * , va_list ap ) 
__trace_printk extern int __trace_printk ( unsigned long , const char * , ... ) 
__ftrace_vprintk extern int __ftrace_vprintk ( unsigned long , const char * , va_list ap ) 

/* kernel/tracepoint.o */
tracepoint_probe_register extern int tracepoint_probe_register ( const char * , void * ) 
tracepoint_probe_unregister extern int tracepoint_probe_unregister ( const char * , void * ) 
tracepoint_probe_register_noupdate extern int tracepoint_probe_register_noupdate ( const char * , void * ) 
tracepoint_probe_unregister_noupdate extern int tracepoint_probe_unregister_noupdate ( const char * , void * ) 
tracepoint_probe_update_all extern void tracepoint_probe_update_all ( void ) 
tracepoint_get_iter_range extern int tracepoint_get_iter_range ( s#tracepoint * * , s#tracepoint * , s#tracepoint * ) 
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s#tracepoint_iter struct tracepoint_iter { s#module * module ; s#tracepoint * tracepoint ; } 
tracepoint_iter_start extern void tracepoint_iter_start ( s#tracepoint_iter * ) 
tracepoint_iter_next extern void tracepoint_iter_next ( s#tracepoint_iter * ) 
tracepoint_iter_stop extern void tracepoint_iter_stop ( s#tracepoint_iter * ) 
tracepoint_iter_reset extern void tracepoint_iter_reset ( s#tracepoint_iter * ) 

/* kernel/unwind.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s#unwind_frame_info struct unwind_frame_info { s#pt_regs regs ; s#task_struct * task ; unsigned call_frame : 1 ; } 
unwind extern int unwind ( s#unwind_frame_info * ) 
unwind_init_frame_info extern int unwind_init_frame_info ( s#unwind_frame_info * , s#task_struct * , s#pt_regs * ) 
unwind_init_blocked extern int unwind_init_blocked ( s#unwind_frame_info * , s#task_struct * ) 
t#unwind_callback_fn typedef int ( * unwind_callback_fn ) ( s#unwind_frame_info * , const s#stacktrace_ops * , void * ) 
unwind_init_running extern int unwind_init_running ( s#unwind_frame_info * , t#unwind_callback_fn , const s#stacktrace_ops * , void * ) 
unwind_to_user extern int unwind_to_user ( s#unwind_frame_info * ) 

/* kernel/user.o */
s##key_type
s##key_user
s##keyring_list
init_user_ns extern s#user_namespace init_user_ns 

/* kernel/user_namespace.o */
free_user_ns extern void free_user_ns ( s#kref * ) 

/* kernel/utrace.o */
__utrace_engine_release void __utrace_engine_release ( s#kref * ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
utrace_attach_task s#utrace_engine * utrace_attach_task ( s#task_struct * , int , const s#utrace_engine_ops * , void * ) 
utrace_attach_pid s#utrace_engine * utrace_attach_pid ( s#pid * , int , const s#utrace_engine_ops * , void * ) 
utrace_set_events int __attribute__ ( ( warn_unused_result ) ) utrace_set_events ( s#task_struct * , s#utrace_engine * , unsigned long ) 
utrace_control int __attribute__ ( ( warn_unused_result ) ) utrace_control ( s#task_struct * , s#utrace_engine * , e#utrace_resume_action ) 
utrace_barrier int __attribute__ ( ( warn_unused_result ) ) utrace_barrier ( s#task_struct * , s#utrace_engine * ) 
s#utrace_examiner struct utrace_examiner { long state ; unsigned long ncsw ; } 
utrace_prepare_examine int __attribute__ ( ( warn_unused_result ) ) utrace_prepare_examine ( s#task_struct * , s#utrace_engine * , s#utrace_examiner * ) 
utrace_finish_examine int __attribute__ ( ( warn_unused_result ) ) utrace_finish_examine ( s#task_struct * , s#utrace_engine * , s#utrace_examiner * ) 
t#user_regset_get_fn typedef int user_regset_get_fn ( s#task_struct * , const s#user_regset * , unsigned int , unsigned int , void * , void * ) 
t#user_regset_set_fn typedef int user_regset_set_fn ( s#task_struct * , const s#user_regset * , unsigned int , unsigned int , const void * , const void * ) 
t#user_regset_active_fn typedef int user_regset_active_fn ( s#task_struct * , const s#user_regset * ) 
t#user_regset_writeback_fn typedef int user_regset_writeback_fn ( s#task_struct * , const s#user_regset * , int ) 
s#user_regset struct user_regset { t#user_regset_get_fn * get ; t#user_regset_set_fn * set ; t#user_regset_active_fn * active ; t#user_regset_writeback_fn * writeback ; unsigned int n ; unsigned int size ; unsigned int align ; unsigned int bias ; unsigned int core_note_type ; } 
s#user_regset_view struct user_regset_view { const char * name ; const s#user_regset * regsets ; unsigned int n ; t#u32 e_flags ; t#u16 e_machine ; t#u8 ei_osabi ; } 
task_user_regset_view const s#user_regset_view * task_user_regset_view ( s#task_struct * ) 

/* kernel/wait.o */
__init_waitqueue_head extern void __init_waitqueue_head ( t#wait_queue_head_t * , s#lock_class_key * ) 
add_wait_queue extern void add_wait_queue ( t#wait_queue_head_t * , t#wait_queue_t * ) 
add_wait_queue_exclusive extern void add_wait_queue_exclusive ( t#wait_queue_head_t * , t#wait_queue_t * ) 
remove_wait_queue extern void remove_wait_queue ( t#wait_queue_head_t * , t#wait_queue_t * ) 
prepare_to_wait void prepare_to_wait ( t#wait_queue_head_t * , t#wait_queue_t * , int ) 
prepare_to_wait_exclusive void prepare_to_wait_exclusive ( t#wait_queue_head_t * , t#wait_queue_t * , int ) 
finish_wait void finish_wait ( t#wait_queue_head_t * , t#wait_queue_t * ) 
abort_exclusive_wait void abort_exclusive_wait ( t#wait_queue_head_t * , t#wait_queue_t * , unsigned int , void * ) 
autoremove_wake_function int autoremove_wake_function ( t#wait_queue_t * , unsigned , int , void * ) 
wake_bit_function int wake_bit_function ( t#wait_queue_t * , unsigned , int , void * ) 
s#wait_bit_key struct wait_bit_key { void * flags ; int bit_nr ; } 
s#wait_bit_queue struct wait_bit_queue { s#wait_bit_key key ; t#wait_queue_t wait ; } 
__wait_on_bit int __wait_on_bit ( t#wait_queue_head_t * , s#wait_bit_queue * , int ( * ) ( void * ) , unsigned ) 
out_of_line_wait_on_bit int out_of_line_wait_on_bit ( void * , int , int ( * ) ( void * ) , unsigned ) 
__wait_on_bit_lock int __wait_on_bit_lock ( t#wait_queue_head_t * , s#wait_bit_queue * , int ( * ) ( void * ) , unsigned ) 
out_of_line_wait_on_bit_lock int out_of_line_wait_on_bit_lock ( void * , int , int ( * ) ( void * ) , unsigned ) 
__wake_up_bit void __wake_up_bit ( t#wait_queue_head_t * , void * , int ) 
wake_up_bit void wake_up_bit ( void * , int ) 
bit_waitqueue t#wait_queue_head_t * bit_waitqueue ( void * , int ) 

/* kernel/workqueue.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#cpu_workqueue_struct struct cpu_workqueue_struct { t#spinlock_t lock ; s#list_head worklist ; t#wait_queue_head_t more_work ; s#work_struct * current_work ; s#workqueue_struct * wq ; s#task_struct * thread ; } 
s#workqueue_struct struct workqueue_struct { s#cpu_workqueue_struct * cpu_wq ; s#list_head list ; const char * name ; int singlethread ; int freezeable ; int rt ; } 
queue_work extern int queue_work ( s#workqueue_struct * , s#work_struct * ) 
queue_work_on extern int queue_work_on ( int , s#workqueue_struct * , s#work_struct * ) 
queue_delayed_work extern int queue_delayed_work ( s#workqueue_struct * , s#delayed_work * , unsigned long ) 
queue_delayed_work_on extern int queue_delayed_work_on ( int , s#workqueue_struct * , s#delayed_work * , unsigned long ) 
flush_workqueue extern void flush_workqueue ( s#workqueue_struct * ) 
flush_work extern int flush_work ( s#work_struct * ) 
cancel_work_sync extern int cancel_work_sync ( s#work_struct * ) 
cancel_delayed_work_sync extern int cancel_delayed_work_sync ( s#delayed_work * ) 
schedule_work extern int schedule_work ( s#work_struct * ) 
schedule_work_on extern int schedule_work_on ( int , s#work_struct * ) 
schedule_delayed_work extern int schedule_delayed_work ( s#delayed_work * , unsigned long ) 
flush_delayed_work extern void flush_delayed_work ( s#delayed_work * ) 
schedule_delayed_work_on extern int schedule_delayed_work_on ( int , s#delayed_work * , unsigned long ) 
flush_scheduled_work extern void flush_scheduled_work ( void ) 
execute_in_process_context int execute_in_process_context ( t#work_func_t , s#execute_work * ) 
__create_workqueue_key extern s#workqueue_struct * __create_workqueue_key ( const char * , int , int , int , s#lock_class_key * , const char * ) 
destroy_workqueue extern void destroy_workqueue ( s#workqueue_struct * ) 
work_on_cpu long work_on_cpu ( unsigned int , long ( * ) ( void * ) , void * ) 

/* lib/argv_split.o */
argv_free extern void argv_free ( char * * ) 
argv_split extern char * * argv_split ( t#gfp_t , const char * , int * ) 

/* lib/bcd.o */
bcd2bin unsigned bcd2bin ( unsigned char ) 
bin2bcd unsigned char bin2bcd ( unsigned ) 

/* lib/bitmap.o */
__bitmap_empty extern int __bitmap_empty ( const unsigned long * , int ) 
__bitmap_full extern int __bitmap_full ( const unsigned long * , int ) 
__bitmap_equal extern int __bitmap_equal ( const unsigned long * , const unsigned long * , int ) 
__bitmap_complement extern void __bitmap_complement ( unsigned long * , const unsigned long * , int ) 
__bitmap_shift_right extern void __bitmap_shift_right ( unsigned long * , const unsigned long * , int , int ) 
__bitmap_shift_left extern void __bitmap_shift_left ( unsigned long * , const unsigned long * , int , int ) 
__bitmap_and extern int __bitmap_and ( unsigned long * , const unsigned long * , const unsigned long * , int ) 
__bitmap_or extern void __bitmap_or ( unsigned long * , const unsigned long * , const unsigned long * , int ) 
__bitmap_xor extern void __bitmap_xor ( unsigned long * , const unsigned long * , const unsigned long * , int ) 
__bitmap_andnot extern int __bitmap_andnot ( unsigned long * , const unsigned long * , const unsigned long * , int ) 
__bitmap_intersects extern int __bitmap_intersects ( const unsigned long * , const unsigned long * , int ) 
__bitmap_subset extern int __bitmap_subset ( const unsigned long * , const unsigned long * , int ) 
__bitmap_weight extern int __bitmap_weight ( const unsigned long * , int ) 
bitmap_scnprintf extern int bitmap_scnprintf ( char * , unsigned int , const unsigned long * , int ) 
__bitmap_parse extern int __bitmap_parse ( const char * , unsigned int , int , unsigned long * , int ) 
bitmap_parse_user extern int bitmap_parse_user ( const char * , unsigned int , unsigned long * , int ) 
bitmap_scnlistprintf extern int bitmap_scnlistprintf ( char * , unsigned int , const unsigned long * , int ) 
bitmap_parselist extern int bitmap_parselist ( const char * , unsigned long * , int ) 
bitmap_remap extern void bitmap_remap ( unsigned long * , const unsigned long * , const unsigned long * , const unsigned long * , int ) 
bitmap_bitremap extern int bitmap_bitremap ( int , const unsigned long * , const unsigned long * , int ) 
bitmap_onto extern void bitmap_onto ( unsigned long * , const unsigned long * , const unsigned long * , int ) 
bitmap_fold extern void bitmap_fold ( unsigned long * , const unsigned long * , int , int ) 
bitmap_find_free_region extern int bitmap_find_free_region ( unsigned long * , int , int ) 
bitmap_release_region extern void bitmap_release_region ( unsigned long * , int , int ) 
bitmap_allocate_region extern int bitmap_allocate_region ( unsigned long * , int , int ) 
bitmap_copy_le extern void bitmap_copy_le ( void * , const unsigned long * , int ) 

/* lib/bitrev.o */
byte_rev_table extern t#u8 const byte_rev_table [ 256 ] 
bitrev16 extern t#u16 bitrev16 ( t#u16 ) 
bitrev32 extern t#u32 bitrev32 ( t#u32 ) 

/* lib/check_signature.o */
check_signature int check_signature ( const volatile void * , const unsigned char * , int ) 

/* lib/cmdline.o */
memparse extern unsigned long long memparse ( const char * , char * * ) 
get_option extern int get_option ( char * * , int * ) 
get_options extern char * get_options ( const char * , int , int * ) 

/* lib/cpumask.o */
__first_cpu int __first_cpu ( const t#cpumask_t * ) 
__next_cpu int __next_cpu ( int , const t#cpumask_t * ) 
__next_cpu_nr int __next_cpu_nr ( int , const t#cpumask_t * ) 
__any_online_cpu int __any_online_cpu ( const t#cpumask_t * ) 
cpumask_next_and int cpumask_next_and ( int , const s#cpumask * , const s#cpumask * ) 

/* lib/crc-ccitt.o */
crc_ccitt_table extern t#u16 const crc_ccitt_table [ 256 ] 
crc_ccitt extern t#u16 crc_ccitt ( t#u16 , const t#u8 * , t#size_t ) 

/* lib/crc-itu-t.o */
crc_itu_t_table extern t#u16 const crc_itu_t_table [ 256 ] 
crc_itu_t extern t#u16 crc_itu_t ( t#u16 , const t#u8 * , t#size_t ) 

/* lib/crc-t10dif.o */
crc_t10dif t#__u16 crc_t10dif ( unsigned char const * , t#size_t ) 

/* lib/crc16.o */
crc16_table extern t#u16 const crc16_table [ 256 ] 
crc16 extern t#u16 crc16 ( t#u16 , const t#u8 * , t#size_t ) 

/* lib/crc32.o */
crc32_le extern t#u32 crc32_le ( t#u32 , unsigned char const * , t#size_t ) 
crc32_be extern t#u32 crc32_be ( t#u32 , unsigned char const * , t#size_t ) 

/* lib/crc7.o */
crc7_syndrome_table extern const t#u8 crc7_syndrome_table [ 256 ] 
crc7 extern t#u8 crc7 ( t#u8 , const t#u8 * , t#size_t ) 

/* lib/ctype.o */
_ctype extern unsigned char _ctype [ ] 

/* lib/dec_and_lock.o */
_atomic_dec_and_lock extern int _atomic_dec_and_lock ( t#atomic_t * , t#spinlock_t * ) 

/* lib/devres.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
devm_ioremap void * devm_ioremap ( s#device * , t#resource_size_t , unsigned long ) 
devm_ioremap_nocache void * devm_ioremap_nocache ( s#device * , t#resource_size_t , unsigned long ) 
devm_iounmap void devm_iounmap ( s#device * , void * ) 
devm_ioport_map void * devm_ioport_map ( s#device * , unsigned long , unsigned int ) 
devm_ioport_unmap void devm_ioport_unmap ( s#device * , void * ) 
s##proc_dir_entry
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
pcim_iomap_table void * const * pcim_iomap_table ( s#pci_dev * ) 
pcim_iomap void * pcim_iomap ( s#pci_dev * , int , unsigned long ) 
pcim_iounmap void pcim_iounmap ( s#pci_dev * , void * ) 
pcim_iomap_regions int pcim_iomap_regions ( s#pci_dev * , t#u16 , const char * ) 
pcim_iomap_regions_request_all int pcim_iomap_regions_request_all ( s#pci_dev * , t#u16 , const char * ) 
pcim_iounmap_regions void pcim_iounmap_regions ( s#pci_dev * , t#u16 ) 

/* lib/div64.o */
iter_div_u64_rem t#u32 iter_div_u64_rem ( t#u64 , t#u32 , t#u64 * ) 

/* lib/dump_stack.o */
dump_stack extern void dump_stack ( void ) 

/* lib/dynamic_debug.o */
dynamic_debug_enabled extern long long dynamic_debug_enabled 
dynamic_debug_enabled2 extern long long dynamic_debug_enabled2 
s#_ddebug struct _ddebug { const char * modname ; const char * function ; const char * filename ; const char * format ; char primary_hash ; char secondary_hash ; unsigned int lineno : 24 ; unsigned int flags : 8 ; } 
ddebug_add_module int ddebug_add_module ( s#_ddebug * , unsigned int , const char * ) 
ddebug_remove_module extern int ddebug_remove_module ( char * ) 

/* lib/find_last_bit.o */
find_last_bit extern unsigned long find_last_bit ( const unsigned long * , unsigned long ) 

/* lib/find_next_bit.o */
find_next_bit extern unsigned long find_next_bit ( const unsigned long * , unsigned long , unsigned long ) 
find_next_zero_bit extern unsigned long find_next_zero_bit ( const unsigned long * , unsigned long , unsigned long ) 
find_first_bit extern unsigned long find_first_bit ( const unsigned long * , unsigned long ) 
find_first_zero_bit extern unsigned long find_first_zero_bit ( const unsigned long * , unsigned long ) 

/* lib/gcd.o */
gcd unsigned long gcd ( unsigned long , unsigned long ) 

/* lib/genalloc.o */
s#gen_pool struct gen_pool { t#rwlock_t lock ; s#list_head chunks ; int min_alloc_order ; } 
gen_pool_create extern s#gen_pool * gen_pool_create ( int , int ) 
gen_pool_add extern int gen_pool_add ( s#gen_pool * , unsigned long , t#size_t , int ) 
gen_pool_destroy extern void gen_pool_destroy ( s#gen_pool * ) 
gen_pool_alloc extern unsigned long gen_pool_alloc ( s#gen_pool * , t#size_t ) 
gen_pool_free extern void gen_pool_free ( s#gen_pool * , unsigned long , t#size_t ) 

/* lib/halfmd4.o */
half_md4_transform t#__u32 half_md4_transform ( t#__u32 [ 4 ] , t#__u32 const [ 8 ] ) 

/* lib/hexdump.o */
hex_asc extern const char hex_asc [ ] 
hex_dump_to_buffer extern void hex_dump_to_buffer ( const void * , t#size_t , int , int , char * , t#size_t , t#bool ) 
print_hex_dump extern void print_hex_dump ( const char * , const char * , int , int , int , const void * , t#size_t , t#bool ) 
print_hex_dump_bytes extern void print_hex_dump_bytes ( const char * , int , const void * , t#size_t ) 

/* lib/hweight.o */
hweight32 extern unsigned int hweight32 ( unsigned int ) 
hweight16 extern unsigned int hweight16 ( unsigned int ) 
hweight8 extern unsigned int hweight8 ( unsigned int ) 
hweight64 extern unsigned long hweight64 ( t#__u64 ) 

/* lib/idr.o */
idr_pre_get int idr_pre_get ( s#idr * , t#gfp_t ) 
idr_get_new_above int idr_get_new_above ( s#idr * , void * , int , int * ) 
idr_get_new int idr_get_new ( s#idr * , void * , int * ) 
idr_remove void idr_remove ( s#idr * , int ) 
idr_remove_all void idr_remove_all ( s#idr * ) 
idr_destroy void idr_destroy ( s#idr * ) 
idr_find void * idr_find ( s#idr * , int ) 
idr_for_each int idr_for_each ( s#idr * , int ( * ) ( int , void * , void * ) , void * ) 
idr_replace void * idr_replace ( s#idr * , void * , int ) 
idr_init void idr_init ( s#idr * ) 
s#ida_bitmap struct ida_bitmap { long nr_busy ; unsigned long bitmap [ ( 128 / sizeof ( long ) - 1 ) ] ; } 
s#ida struct ida { s#idr idr ; s#ida_bitmap * free_bitmap ; } 
ida_pre_get int ida_pre_get ( s#ida * , t#gfp_t ) 
ida_get_new_above int ida_get_new_above ( s#ida * , int , int * ) 
ida_get_new int ida_get_new ( s#ida * , int * ) 
ida_remove void ida_remove ( s#ida * , int ) 
ida_destroy void ida_destroy ( s#ida * ) 
ida_init void ida_init ( s#ida * ) 

/* lib/int_sqrt.o */
int_sqrt unsigned long int_sqrt ( unsigned long ) 

/* lib/iomap.o */
ioread8 extern unsigned int ioread8 ( void * ) 
ioread16 extern unsigned int ioread16 ( void * ) 
ioread16be extern unsigned int ioread16be ( void * ) 
ioread32 extern unsigned int ioread32 ( void * ) 
ioread32be extern unsigned int ioread32be ( void * ) 
iowrite8 extern void iowrite8 ( t#u8 , void * ) 
iowrite16 extern void iowrite16 ( t#u16 , void * ) 
iowrite16be extern void iowrite16be ( t#u16 , void * ) 
iowrite32 extern void iowrite32 ( t#u32 , void * ) 
iowrite32be extern void iowrite32be ( t#u32 , void * ) 
ioread8_rep extern void ioread8_rep ( void * , void * , unsigned long ) 
ioread16_rep extern void ioread16_rep ( void * , void * , unsigned long ) 
ioread32_rep extern void ioread32_rep ( void * , void * , unsigned long ) 
iowrite8_rep extern void iowrite8_rep ( void * , const void * , unsigned long ) 
iowrite16_rep extern void iowrite16_rep ( void * , const void * , unsigned long ) 
iowrite32_rep extern void iowrite32_rep ( void * , const void * , unsigned long ) 
ioport_map extern void * ioport_map ( unsigned long , unsigned int ) 
ioport_unmap extern void ioport_unmap ( void * ) 
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
pci_iomap extern void * pci_iomap ( s#pci_dev * , int , unsigned long ) 
pci_iounmap extern void pci_iounmap ( s#pci_dev * , void * ) 

/* lib/iomap_copy.o */
__iowrite32_copy void __iowrite32_copy ( void * , const void * , t#size_t ) 
__iowrite64_copy void __iowrite64_copy ( void * , const void * , t#size_t ) 

/* lib/iommu-helper.o */
iommu_area_alloc unsigned long iommu_area_alloc ( unsigned long * , unsigned long , unsigned long , unsigned int , unsigned long , unsigned long , unsigned long ) 
iommu_area_free void iommu_area_free ( unsigned long * , unsigned long , unsigned int ) 
iommu_num_pages unsigned long iommu_num_pages ( unsigned long , unsigned long , unsigned long ) 

/* lib/kasprintf.o */
kvasprintf extern char * kvasprintf ( t#gfp_t , const char * , va_list args ) 
kasprintf extern char * kasprintf ( t#gfp_t , const char * , ... ) 

/* lib/kernel_lock.o */
lock_kernel extern void __attribute__ ( ( section ( ".spinlock.text" ) ) ) lock_kernel ( void ) 
unlock_kernel extern void __attribute__ ( ( section ( ".spinlock.text" ) ) ) unlock_kernel ( void ) 

/* lib/klist.o */
klist_init extern void klist_init ( s#klist * , void ( * ) ( s#klist_node * ) , void ( * ) ( s#klist_node * ) ) 
klist_add_head extern void klist_add_head ( s#klist_node * , s#klist * ) 
klist_add_tail extern void klist_add_tail ( s#klist_node * , s#klist * ) 
klist_add_after extern void klist_add_after ( s#klist_node * , s#klist_node * ) 
klist_add_before extern void klist_add_before ( s#klist_node * , s#klist_node * ) 
klist_del extern void klist_del ( s#klist_node * ) 
klist_remove extern void klist_remove ( s#klist_node * ) 
klist_node_attached extern int klist_node_attached ( s#klist_node * ) 
klist_iter_init_node extern void klist_iter_init_node ( s#klist * , s#klist_iter * , s#klist_node * ) 
klist_iter_init extern void klist_iter_init ( s#klist * , s#klist_iter * ) 
klist_iter_exit extern void klist_iter_exit ( s#klist_iter * ) 
klist_next extern s#klist_node * klist_next ( s#klist_iter * ) 

/* lib/kobject.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
kobject_get_path extern char * kobject_get_path ( s#kobject * , t#gfp_t ) 
kobject_set_name extern int kobject_set_name ( s#kobject * , const char * , ... ) 
kobject_init extern void kobject_init ( s#kobject * , s#kobj_type * ) 
kobject_add extern int __attribute__ ( ( warn_unused_result ) ) kobject_add ( s#kobject * , s#kobject * , const char * , ... ) 
kobject_init_and_add extern int __attribute__ ( ( warn_unused_result ) ) kobject_init_and_add ( s#kobject * , s#kobj_type * , s#kobject * , const char * , ... ) 
kobject_rename extern int __attribute__ ( ( warn_unused_result ) ) kobject_rename ( s#kobject * , const char * ) 
kobject_create_and_add extern s#kobject * __attribute__ ( ( warn_unused_result ) ) kobject_create_and_add ( const char * , s#kobject * ) 
kset_create_and_add extern s#kset * __attribute__ ( ( warn_unused_result ) ) kset_create_and_add ( const char * , s#kset_uevent_ops * , s#kobject * ) 
kobject_get extern s#kobject * kobject_get ( s#kobject * ) 
kobject_put extern void kobject_put ( s#kobject * ) 
kobject_del extern void kobject_del ( s#kobject * ) 
kset_register extern int __attribute__ ( ( warn_unused_result ) ) kset_register ( s#kset * ) 
kset_unregister extern void kset_unregister ( s#kset * ) 

/* lib/kobject_uevent.o */
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
e#kobject_action enum kobject_action { KOBJ_ADD , KOBJ_REMOVE , KOBJ_CHANGE , KOBJ_MOVE , KOBJ_ONLINE , KOBJ_OFFLINE , KOBJ_MAX } 
kobject_uevent_env int kobject_uevent_env ( s#kobject * , e#kobject_action , char * [ ] ) 
kobject_uevent int kobject_uevent ( s#kobject * , e#kobject_action ) 
add_uevent_var int add_uevent_var ( s#kobj_uevent_env * , const char * , ... ) 

/* lib/kref.o */
kref_set void kref_set ( s#kref * , int ) 
kref_init void kref_init ( s#kref * ) 
kref_get void kref_get ( s#kref * ) 
kref_put int kref_put ( s#kref * , void ( * ) ( s#kref * ) ) 

/* lib/libcrc32c.o */
crc32c t#u32 crc32c ( t#u32 , const void * , unsigned int ) 

/* lib/lzo/lzo1x_compress.o */
lzo1x_1_compress int lzo1x_1_compress ( const unsigned char * , t#size_t , unsigned char * , t#size_t * , void * ) 

/* lib/lzo/lzo1x_decompress.o */
lzo1x_decompress_safe int lzo1x_decompress_safe ( const unsigned char * , t#size_t , unsigned char * , t#size_t * ) 

/* lib/nlattr.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
__nla_reserve extern s#nlattr * __nla_reserve ( s#sk_buff * , int , int ) 
__nla_reserve_nohdr extern void * __nla_reserve_nohdr ( s#sk_buff * , int ) 
nla_reserve extern s#nlattr * nla_reserve ( s#sk_buff * , int , int ) 
nla_reserve_nohdr extern void * nla_reserve_nohdr ( s#sk_buff * , int ) 
__nla_put extern void __nla_put ( s#sk_buff * , int , int , const void * ) 
__nla_put_nohdr extern void __nla_put_nohdr ( s#sk_buff * , int , const void * ) 
nla_put extern int nla_put ( s#sk_buff * , int , int , const void * ) 
nla_put_nohdr extern int nla_put_nohdr ( s#sk_buff * , int , const void * ) 
nla_append extern int nla_append ( s#sk_buff * , int , const void * ) 
nla_validate extern int nla_validate ( s#nlattr * , int , int , const s#nla_policy * ) 
nla_policy_len extern int nla_policy_len ( const s#nla_policy * , int ) 
nla_parse extern int nla_parse ( s#nlattr * [ ] , int , s#nlattr * , int , const s#nla_policy * ) 
nla_find extern s#nlattr * nla_find ( s#nlattr * , int , int ) 
nla_strlcpy extern t#size_t nla_strlcpy ( char * , const s#nlattr * , t#size_t ) 
nla_memcpy extern int nla_memcpy ( void * , const s#nlattr * , int ) 
nla_memcmp extern int nla_memcmp ( const s#nlattr * , const void * , t#size_t ) 
nla_strcmp extern int nla_strcmp ( const s#nlattr * , const char * ) 

/* lib/parser.o */
s#match_token struct match_token { int token ; const char * pattern ; } 
t#match_table_t typedef s#match_token match_table_t [ ] 
t#substring_t typedef struct { char * from ; char * to ; } substring_t 
match_token int match_token ( char * , const t#match_table_t , t#substring_t [ ] ) 
match_string int match_string ( t#substring_t * , const char * ) 
match_int int match_int ( t#substring_t * , int * ) 
match_octal int match_octal ( t#substring_t * , int * ) 
match_hex int match_hex ( t#substring_t * , int * ) 
match_strlcpy t#size_t match_strlcpy ( char * , const t#substring_t * , t#size_t ) 
match_strdup char * match_strdup ( const t#substring_t * ) 

/* lib/percpu_counter.o */
percpu_counter_set void percpu_counter_set ( s#percpu_counter * , t#s64 ) 
__percpu_counter_add void __percpu_counter_add ( s#percpu_counter * , t#s64 , t#s32 ) 
__percpu_counter_sum t#s64 __percpu_counter_sum ( s#percpu_counter * ) 
__percpu_counter_init int __percpu_counter_init ( s#percpu_counter * , t#s64 , s#lock_class_key * ) 
percpu_counter_destroy void percpu_counter_destroy ( s#percpu_counter * ) 
percpu_counter_batch extern int percpu_counter_batch 

/* lib/radix-tree.o */
radix_tree_preload int radix_tree_preload ( t#gfp_t ) 
s#radix_tree_node struct radix_tree_node { unsigned int height ; unsigned int count ; s#rcu_head rcu_head ; void * slots [ ( 1UL << ( 0 ? 4 : 6 ) ) ] ; unsigned long tags [ 2 ] [ ( ( ( 1UL << ( 0 ? 4 : 6 ) ) + 64 - 1 ) / 64 ) ] ; } 
radix_tree_insert int radix_tree_insert ( s#radix_tree_root * , unsigned long , void * ) 
radix_tree_lookup_slot void * * radix_tree_lookup_slot ( s#radix_tree_root * , unsigned long ) 
radix_tree_lookup void * radix_tree_lookup ( s#radix_tree_root * , unsigned long ) 
radix_tree_tag_set void * radix_tree_tag_set ( s#radix_tree_root * , unsigned long , unsigned int ) 
radix_tree_tag_clear void * radix_tree_tag_clear ( s#radix_tree_root * , unsigned long , unsigned int ) 
radix_tree_tag_get int radix_tree_tag_get ( s#radix_tree_root * , unsigned long , unsigned int ) 
radix_tree_next_hole unsigned long radix_tree_next_hole ( s#radix_tree_root * , unsigned long , unsigned long ) 
radix_tree_prev_hole unsigned long radix_tree_prev_hole ( s#radix_tree_root * , unsigned long , unsigned long ) 
radix_tree_gang_lookup unsigned int radix_tree_gang_lookup ( s#radix_tree_root * , void * * , unsigned long , unsigned int ) 
radix_tree_gang_lookup_slot unsigned int radix_tree_gang_lookup_slot ( s#radix_tree_root * , void * * * , unsigned long , unsigned int ) 
radix_tree_gang_lookup_tag unsigned int radix_tree_gang_lookup_tag ( s#radix_tree_root * , void * * , unsigned long , unsigned int , unsigned int ) 
radix_tree_gang_lookup_tag_slot unsigned int radix_tree_gang_lookup_tag_slot ( s#radix_tree_root * , void * * * , unsigned long , unsigned int , unsigned int ) 
radix_tree_delete void * radix_tree_delete ( s#radix_tree_root * , unsigned long ) 
radix_tree_tagged int radix_tree_tagged ( s#radix_tree_root * , unsigned int ) 

/* lib/random32.o */
random32 t#u32 random32 ( void ) 
srandom32 void srandom32 ( t#u32 ) 

/* lib/ratelimit.o */
s#ratelimit_state struct ratelimit_state { int interval ; int burst ; int printed ; int missed ; unsigned long begin ; } 
__ratelimit extern int __ratelimit ( s#ratelimit_state * ) 

/* lib/rbtree.o */
rb_insert_color extern void rb_insert_color ( s#rb_node * , s#rb_root * ) 
rb_erase extern void rb_erase ( s#rb_node * , s#rb_root * ) 
rb_first extern s#rb_node * rb_first ( const s#rb_root * ) 
rb_last extern s#rb_node * rb_last ( const s#rb_root * ) 
rb_next extern s#rb_node * rb_next ( const s#rb_node * ) 
rb_prev extern s#rb_node * rb_prev ( const s#rb_node * ) 
rb_replace_node extern void rb_replace_node ( s#rb_node * , s#rb_node * , s#rb_root * ) 

/* lib/reed_solomon/reed_solomon.o */
s#rs_control struct rs_control { int mm ; int nn ; t#uint16_t * alpha_to ; t#uint16_t * index_of ; t#uint16_t * genpoly ; int nroots ; int fcr ; int prim ; int iprim ; int gfpoly ; int ( * gffunc ) ( int ) ; int users ; s#list_head list ; } 
decode_rs16 int decode_rs16 ( s#rs_control * , t#uint16_t * , t#uint16_t * , int , t#uint16_t * , int , int * , t#uint16_t , t#uint16_t * ) 
init_rs s#rs_control * init_rs ( int , int , int , int , int ) 
init_rs_non_canonical s#rs_control * init_rs_non_canonical ( int , int ( * ) ( int ) , int , int , int ) 
free_rs void free_rs ( s#rs_control * ) 

/* lib/rwsem.o */
__init_rwsem extern void __init_rwsem ( s#rw_semaphore * , const char * , s#lock_class_key * ) 
rwsem_down_read_failed extern s#rw_semaphore * rwsem_down_read_failed ( s#rw_semaphore * ) 
rwsem_down_write_failed extern s#rw_semaphore * rwsem_down_write_failed ( s#rw_semaphore * ) 
rwsem_wake extern s#rw_semaphore * rwsem_wake ( s#rw_semaphore * ) 
rwsem_downgrade_wake extern s#rw_semaphore * rwsem_downgrade_wake ( s#rw_semaphore * ) 

/* lib/scatterlist.o */
sg_next s#scatterlist * sg_next ( s#scatterlist * ) 
sg_last s#scatterlist * sg_last ( s#scatterlist * , unsigned int ) 
sg_init_table void sg_init_table ( s#scatterlist * , unsigned int ) 
sg_init_one void sg_init_one ( s#scatterlist * , const void * , unsigned int ) 
t#sg_free_fn typedef void ( sg_free_fn ) ( s#scatterlist * , unsigned int ) 
__sg_free_table void __sg_free_table ( s#sg_table * , unsigned int , t#sg_free_fn * ) 
sg_free_table void sg_free_table ( s#sg_table * ) 
t#sg_alloc_fn typedef s#scatterlist * ( sg_alloc_fn ) ( unsigned int , t#gfp_t ) 
__sg_alloc_table int __sg_alloc_table ( s#sg_table * , unsigned int , unsigned int , t#gfp_t , t#sg_alloc_fn * ) 
sg_alloc_table int sg_alloc_table ( s#sg_table * , unsigned int , t#gfp_t ) 
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##kiocb
s##iovec
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
sg_miter_start void sg_miter_start ( s#sg_mapping_iter * , s#scatterlist * , unsigned int , unsigned int ) 
sg_miter_next t#bool sg_miter_next ( s#sg_mapping_iter * ) 
sg_miter_stop void sg_miter_stop ( s#sg_mapping_iter * ) 
sg_copy_from_buffer t#size_t sg_copy_from_buffer ( s#scatterlist * , unsigned int , void * , t#size_t ) 
sg_copy_to_buffer t#size_t sg_copy_to_buffer ( s#scatterlist * , unsigned int , void * , t#size_t ) 

/* lib/sha1.o */
sha_transform void sha_transform ( t#__u32 * , const char * , t#__u32 * ) 

/* lib/sort.o */
sort void sort ( void * , t#size_t , t#size_t , int ( * ) ( const void * , const void * ) , void ( * ) ( void * , void * , int ) ) 

/* lib/string.o */
strnicmp extern int strnicmp ( const char * , const char * , t#__kernel_size_t ) 
strcasecmp extern int strcasecmp ( const char * , const char * ) 
strncasecmp extern int strncasecmp ( const char * , const char * , t#size_t ) 
strcpy char * strcpy ( char * , const char * ) 
strncpy extern char * strncpy ( char * , const char * , t#__kernel_size_t ) 
strlcpy t#size_t strlcpy ( char * , const char * , t#size_t ) 
strcat char * strcat ( char * , const char * ) 
strncat extern char * strncat ( char * , const char * , t#__kernel_size_t ) 
strlcat extern t#size_t strlcat ( char * , const char * , t#__kernel_size_t ) 
strcmp int strcmp ( const char * , const char * ) 
strncmp extern int strncmp ( const char * , const char * , t#__kernel_size_t ) 
strchr extern char * strchr ( const char * , int ) 
strrchr extern char * strrchr ( const char * , int ) 
strnchr extern char * strnchr ( const char * , t#size_t , int ) 
strstrip extern char * __attribute__ ( ( warn_unused_result ) ) strstrip ( char * ) 
strlen t#size_t strlen ( const char * ) 
strnlen extern t#__kernel_size_t strnlen ( const char * , t#__kernel_size_t ) 
strspn extern t#__kernel_size_t strspn ( const char * , const char * ) 
strcspn extern t#__kernel_size_t strcspn ( const char * , const char * ) 
strpbrk extern char * strpbrk ( const char * , const char * ) 
strsep extern char * strsep ( char * * , const char * ) 
sysfs_streq extern t#bool sysfs_streq ( const char * , const char * ) 
memcmp int memcmp ( const void * , const void * , t#size_t ) 
memscan extern void * memscan ( void * , int , t#__kernel_size_t ) 
strstr extern char * strstr ( const char * , const char * ) 
memchr extern void * memchr ( const void * , int , t#__kernel_size_t ) 

/* lib/string_helpers.o */
e#string_size_units enum string_size_units { STRING_UNITS_10 , STRING_UNITS_2 , } 
string_get_size int string_get_size ( t#u64 , e#string_size_units , char * , int ) 

/* lib/swiotlb.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##kiocb
s##iovec
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##class_private
swiotlb_alloc_coherent extern void * swiotlb_alloc_coherent ( s#device * , t#size_t , t#dma_addr_t * , t#gfp_t ) 
swiotlb_free_coherent extern void swiotlb_free_coherent ( s#device * , t#size_t , void * , t#dma_addr_t ) 
swiotlb_map_page extern t#dma_addr_t swiotlb_map_page ( s#device * , s#page * , unsigned long , t#size_t , e#dma_data_direction , s#dma_attrs * ) 
swiotlb_unmap_page extern void swiotlb_unmap_page ( s#device * , t#dma_addr_t , t#size_t , e#dma_data_direction , s#dma_attrs * ) 
swiotlb_sync_single_for_cpu extern void swiotlb_sync_single_for_cpu ( s#device * , t#dma_addr_t , t#size_t , e#dma_data_direction ) 
swiotlb_sync_single_for_device extern void swiotlb_sync_single_for_device ( s#device * , t#dma_addr_t , t#size_t , e#dma_data_direction ) 
swiotlb_sync_single_range_for_cpu extern void swiotlb_sync_single_range_for_cpu ( s#device * , t#dma_addr_t , unsigned long , t#size_t , e#dma_data_direction ) 
swiotlb_sync_single_range_for_device extern void swiotlb_sync_single_range_for_device ( s#device * , t#dma_addr_t , unsigned long , t#size_t , e#dma_data_direction ) 
swiotlb_map_sg_attrs extern int swiotlb_map_sg_attrs ( s#device * , s#scatterlist * , int , e#dma_data_direction , s#dma_attrs * ) 
swiotlb_map_sg extern int swiotlb_map_sg ( s#device * , s#scatterlist * , int , int ) 
swiotlb_unmap_sg_attrs extern void swiotlb_unmap_sg_attrs ( s#device * , s#scatterlist * , int , e#dma_data_direction , s#dma_attrs * ) 
swiotlb_unmap_sg extern void swiotlb_unmap_sg ( s#device * , s#scatterlist * , int , int ) 
swiotlb_sync_sg_for_cpu extern void swiotlb_sync_sg_for_cpu ( s#device * , s#scatterlist * , int , e#dma_data_direction ) 
swiotlb_sync_sg_for_device extern void swiotlb_sync_sg_for_device ( s#device * , s#scatterlist * , int , e#dma_data_direction ) 
swiotlb_dma_mapping_error extern int swiotlb_dma_mapping_error ( s#device * , t#dma_addr_t ) 
swiotlb_dma_supported extern int swiotlb_dma_supported ( s#device * , t#u64 ) 

/* lib/syscall.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
task_current_syscall extern int task_current_syscall ( s#task_struct * , long * , unsigned long [ 6 ] , unsigned int , unsigned long * , unsigned long * ) 

/* lib/textsearch.o */
s#ts_state struct ts_state { unsigned int offset ; char cb [ 40 ] ; } 
s#ts_config struct ts_config { s#ts_ops * ops ; int flags ; unsigned int ( * get_next_block ) ( unsigned int , const t#u8 * * , s#ts_config * , s#ts_state * ) ; void ( * finish ) ( s#ts_config * , s#ts_state * ) ; } 
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s#ts_ops struct ts_ops { const char * name ; s#ts_config * ( * init ) ( const void * , unsigned int , t#gfp_t , int ) ; unsigned int ( * find ) ( s#ts_config * , s#ts_state * ) ; void ( * destroy ) ( s#ts_config * ) ; void * ( * get_pattern ) ( s#ts_config * ) ; unsigned int ( * get_pattern_len ) ( s#ts_config * ) ; s#module * owner ; s#list_head list ; } 
textsearch_register extern int textsearch_register ( s#ts_ops * ) 
textsearch_unregister extern int textsearch_unregister ( s#ts_ops * ) 
textsearch_prepare extern s#ts_config * textsearch_prepare ( const char * , const void * , unsigned int , t#gfp_t , int ) 
textsearch_find_continuous extern unsigned int textsearch_find_continuous ( s#ts_config * , s#ts_state * , const void * , unsigned int ) 
textsearch_destroy extern void textsearch_destroy ( s#ts_config * ) 

/* lib/vsprintf.o */
simple_strtoul extern unsigned long simple_strtoul ( const char * , char * * , unsigned int ) 
simple_strtol extern long simple_strtol ( const char * , char * * , unsigned int ) 
simple_strtoull extern unsigned long long simple_strtoull ( const char * , char * * , unsigned int ) 
strict_strtoul extern int strict_strtoul ( const char * , unsigned int , unsigned long * ) 
strict_strtol extern int strict_strtol ( const char * , unsigned int , long * ) 
strict_strtoull extern int strict_strtoull ( const char * , unsigned int , unsigned long long * ) 
strict_strtoll extern int strict_strtoll ( const char * , unsigned int , long long * ) 
vsnprintf extern int vsnprintf ( char * , t#size_t , const char * , va_list args ) 
vscnprintf extern int vscnprintf ( char * , t#size_t , const char * , va_list args ) 
snprintf extern int snprintf ( char * , t#size_t , const char * , ... ) 
scnprintf extern int scnprintf ( char * , t#size_t , const char * , ... ) 
vsprintf extern int vsprintf ( char * , const char * , va_list ) 
sprintf extern int sprintf ( char * , const char * , ... ) 
vbin_printf int vbin_printf ( t#u32 * , t#size_t , const char * , va_list args ) 
bstr_printf int bstr_printf ( char * , t#size_t , const char * , const t#u32 * ) 
bprintf int bprintf ( t#u32 * , t#size_t , const char * , ... ) 
vsscanf extern int vsscanf ( const char * , const char * , va_list ) 
sscanf extern int sscanf ( const char * , const char * , ... ) 

/* lib/zlib_deflate/deflate_syms.o */
zlib_deflate_workspacesize extern int zlib_deflate_workspacesize ( void ) 
t#Byte typedef unsigned char Byte 
t#uInt typedef unsigned int uInt 
t#uLong typedef unsigned long uLong 
s#internal_state struct internal_state { int dummy ; } 
s#z_stream_s struct z_stream_s { const t#Byte * next_in ; t#uInt avail_in ; t#uLong total_in ; t#Byte * next_out ; t#uInt avail_out ; t#uLong total_out ; char * msg ; s#internal_state * state ; void * workspace ; int data_type ; t#uLong adler ; t#uLong reserved ; } 
t#z_stream typedef s#z_stream_s z_stream 
t#z_streamp typedef t#z_stream * z_streamp 
zlib_deflate extern int zlib_deflate ( t#z_streamp , int ) 
zlib_deflateInit2 extern int zlib_deflateInit2 ( t#z_streamp , int , int , int , int , int ) 
zlib_deflateEnd extern int zlib_deflateEnd ( t#z_streamp ) 
zlib_deflateReset extern int zlib_deflateReset ( t#z_streamp ) 

/* lib/zlib_inflate/inflate_syms.o */
zlib_inflate_workspacesize extern int zlib_inflate_workspacesize ( void ) 
zlib_inflate extern int zlib_inflate ( t#z_streamp , int ) 
zlib_inflateInit2 extern int zlib_inflateInit2 ( t#z_streamp , int ) 
zlib_inflateEnd extern int zlib_inflateEnd ( t#z_streamp ) 
zlib_inflateReset extern int zlib_inflateReset ( t#z_streamp ) 
zlib_inflateIncomp extern int zlib_inflateIncomp ( t#z_stream * ) 
zlib_inflate_blob extern int zlib_inflate_blob ( void * , unsigned , const void * , unsigned ) 

/* mm/backing-dev.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##array_cache
s##kmem_list3
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
default_unplug_io_fn void default_unplug_io_fn ( s#backing_dev_info * , s#page * ) 
default_backing_dev_info extern s#backing_dev_info default_backing_dev_info 
bdi_register int bdi_register ( s#backing_dev_info * , s#device * , const char * , ... ) 
bdi_register_dev int bdi_register_dev ( s#backing_dev_info * , t#dev_t ) 
bdi_unregister void bdi_unregister ( s#backing_dev_info * ) 
bdi_init int bdi_init ( s#backing_dev_info * ) 
bdi_destroy void bdi_destroy ( s#backing_dev_info * ) 
clear_bdi_congested void clear_bdi_congested ( s#backing_dev_info * , int ) 
set_bdi_congested void set_bdi_congested ( s#backing_dev_info * , int ) 
congestion_wait long congestion_wait ( int , long ) 

/* mm/bounce.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##mtd_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##hd_geometry
s##timer_rand_state
blk_queue_bounce extern void blk_queue_bounce ( s#request_queue * , s#bio * * ) 

/* mm/dmapool.o */
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s#dma_pool struct dma_pool { s#list_head page_list ; t#spinlock_t lock ; t#size_t size ; s#device * dev ; t#size_t allocation ; t#size_t boundary ; char name [ 32 ] ; t#wait_queue_head_t waitq ; s#list_head pools ; } 
dma_pool_create s#dma_pool * dma_pool_create ( const char * , s#device * , t#size_t , t#size_t , t#size_t ) 
dma_pool_destroy void dma_pool_destroy ( s#dma_pool * ) 
dma_pool_alloc void * dma_pool_alloc ( s#dma_pool * , t#gfp_t , t#dma_addr_t * ) 
dma_pool_free void dma_pool_free ( s#dma_pool * , void * , t#dma_addr_t ) 
dmam_pool_create s#dma_pool * dmam_pool_create ( const char * , s#device * , t#size_t , t#size_t , t#size_t ) 
dmam_pool_destroy void dmam_pool_destroy ( s#dma_pool * ) 

/* mm/filemap.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
__remove_from_page_cache extern void __remove_from_page_cache ( s#page * ) 
remove_from_page_cache extern void remove_from_page_cache ( s#page * ) 
filemap_fdatawrite extern int filemap_fdatawrite ( s#address_space * ) 
filemap_fdatawrite_range extern int filemap_fdatawrite_range ( s#address_space * , t#loff_t , t#loff_t ) 
filemap_flush extern int filemap_flush ( s#address_space * ) 
filemap_fdatawait_range extern int filemap_fdatawait_range ( s#address_space * , t#loff_t , t#loff_t ) 
sync_page_range int sync_page_range ( s#inode * , s#address_space * , t#loff_t , t#loff_t ) 
sync_page_range_nolock int sync_page_range_nolock ( s#inode * , s#address_space * , t#loff_t , t#loff_t ) 
filemap_fdatawait extern int filemap_fdatawait ( s#address_space * ) 
filemap_write_and_wait extern int filemap_write_and_wait ( s#address_space * ) 
filemap_write_and_wait_range extern int filemap_write_and_wait_range ( s#address_space * , t#loff_t , t#loff_t ) 
add_to_page_cache_locked int add_to_page_cache_locked ( s#page * , s#address_space * , unsigned long , t#gfp_t ) 
add_to_page_cache int add_to_page_cache ( s#page * , s#address_space * , unsigned long , t#gfp_t ) 
add_to_page_cache_lru int add_to_page_cache_lru ( s#page * , s#address_space * , unsigned long , t#gfp_t ) 
__page_cache_alloc extern s#page * __page_cache_alloc ( t#gfp_t ) 
wait_on_page_bit extern void wait_on_page_bit ( s#page * , int ) 
add_page_wait_queue extern void add_page_wait_queue ( s#page * , t#wait_queue_t * ) 
unlock_page extern void unlock_page ( s#page * ) 
end_page_writeback extern void end_page_writeback ( s#page * ) 
__lock_page extern void __lock_page ( s#page * ) 
__lock_page_killable extern int __lock_page_killable ( s#page * ) 
__wait_on_page_locked extern void __wait_on_page_locked ( s#page * ) 
find_get_page extern s#page * find_get_page ( s#address_space * , unsigned long ) 
find_lock_page extern s#page * find_lock_page ( s#address_space * , unsigned long ) 
find_or_create_page extern s#page * find_or_create_page ( s#address_space * , unsigned long , t#gfp_t ) 
find_get_pages unsigned find_get_pages ( s#address_space * , unsigned long , unsigned int , s#page * * ) 
find_get_pages_contig unsigned find_get_pages_contig ( s#address_space * , unsigned long , unsigned int , s#page * * ) 
find_get_pages_tag unsigned find_get_pages_tag ( s#address_space * , unsigned long * , int , unsigned int , s#page * * ) 
grab_cache_page_nowait extern s#page * grab_cache_page_nowait ( s#address_space * , unsigned long ) 
generic_segment_checks extern int generic_segment_checks ( const s#iovec * , unsigned long * , t#size_t * , int ) 
generic_file_aio_read extern t#ssize_t generic_file_aio_read ( s#kiocb * , const s#iovec * , unsigned long , t#loff_t ) 
filemap_fault extern int filemap_fault ( s#vm_area_struct * , s#vm_fault * ) 
generic_file_mmap extern int generic_file_mmap ( s#file * , s#vm_area_struct * ) 
generic_file_readonly_mmap extern int generic_file_readonly_mmap ( s#file * , s#vm_area_struct * ) 
t#filler_t typedef int filler_t ( void * , s#page * ) 
read_cache_page_async extern s#page * read_cache_page_async ( s#address_space * , unsigned long , t#filler_t * , void * ) 
read_cache_page_gfp extern s#page * read_cache_page_gfp ( s#address_space * , unsigned long , t#gfp_t ) 
read_cache_page extern s#page * read_cache_page ( s#address_space * , unsigned long , t#filler_t * , void * ) 
should_remove_suid extern int should_remove_suid ( s#dentry * ) 
file_remove_suid extern int file_remove_suid ( s#file * ) 
s#iov_iter struct iov_iter { const s#iovec * iov ; unsigned long nr_segs ; t#size_t iov_offset ; t#size_t count ; } 
iov_iter_copy_from_user_atomic t#size_t iov_iter_copy_from_user_atomic ( s#page * , s#iov_iter * , unsigned long , t#size_t ) 
iov_iter_copy_from_user t#size_t iov_iter_copy_from_user ( s#page * , s#iov_iter * , unsigned long , t#size_t ) 
iov_iter_advance void iov_iter_advance ( s#iov_iter * , t#size_t ) 
iov_iter_fault_in_readable int iov_iter_fault_in_readable ( s#iov_iter * , t#size_t ) 
iov_iter_single_seg_count t#size_t iov_iter_single_seg_count ( s#iov_iter * ) 
generic_write_checks int generic_write_checks ( s#file * , t#loff_t * , t#size_t * , int ) 
pagecache_write_begin int pagecache_write_begin ( s#file * , s#address_space * , t#loff_t , unsigned , unsigned , s#page * * , void * * ) 
pagecache_write_end int pagecache_write_end ( s#file * , s#address_space * , t#loff_t , unsigned , unsigned , s#page * , void * ) 
generic_file_direct_write extern t#ssize_t generic_file_direct_write ( s#kiocb * , const s#iovec * , unsigned long * , t#loff_t , t#loff_t * , t#size_t , t#size_t ) 
grab_cache_page_write_begin s#page * grab_cache_page_write_begin ( s#address_space * , unsigned long , unsigned ) 
generic_file_buffered_write extern t#ssize_t generic_file_buffered_write ( s#kiocb * , const s#iovec * , unsigned long , t#loff_t , t#loff_t * , t#size_t , t#ssize_t ) 
__generic_file_aio_write extern t#ssize_t __generic_file_aio_write ( s#kiocb * , const s#iovec * , unsigned long , t#loff_t * ) 
generic_file_aio_write extern t#ssize_t generic_file_aio_write ( s#kiocb * , const s#iovec * , unsigned long , t#loff_t ) 
try_to_release_page extern int try_to_release_page ( s#page * , t#gfp_t ) 

/* mm/hugetlb.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##backing_dev_info
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##nlm_lockowner
s##nfs4_lock_state
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##linux_binfmt
s##anon_vma
vma_kernel_pagesize extern unsigned long vma_kernel_pagesize ( s#vm_area_struct * ) 

/* mm/maccess.o */
probe_kernel_read extern long probe_kernel_read ( void * , void * , t#size_t ) 
probe_kernel_write extern long probe_kernel_write ( void * , void * , t#size_t ) 

/* mm/memory.o */
num_physpages extern unsigned long num_physpages 
high_memory extern void * high_memory 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##backing_dev_info
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##nlm_lockowner
s##nfs4_lock_state
s##cdev
s##posix_acl
s##linux_binfmt
s#zap_details struct zap_details { s#vm_area_struct * nonlinear_vma ; s#address_space * check_mapping ; unsigned long first_index ; unsigned long last_index ; t#spinlock_t * i_mmap_lock ; unsigned long truncate_count ; } 
zap_page_range unsigned long zap_page_range ( s#vm_area_struct * , unsigned long , unsigned long , s#zap_details * ) 
zap_vma_ptes int zap_vma_ptes ( s#vm_area_struct * , unsigned long , unsigned long ) 
get_user_pages int get_user_pages ( s#task_struct * , s#mm_struct * , unsigned long , int , int , int , s#page * * , s#vm_area_struct * * ) 
vm_insert_page int vm_insert_page ( s#vm_area_struct * , unsigned long , s#page * ) 
vm_insert_pfn int vm_insert_pfn ( s#vm_area_struct * , unsigned long , unsigned long ) 
vm_insert_mixed int vm_insert_mixed ( s#vm_area_struct * , unsigned long , unsigned long ) 
remap_pfn_range int remap_pfn_range ( s#vm_area_struct * , unsigned long , unsigned long , unsigned long , t#pgprot_t ) 
t#pgtable_t typedef s#page * pgtable_t 
t#pte_fn_t typedef int ( * pte_fn_t ) ( t#pte_t * , t#pgtable_t , unsigned long , void * ) 
apply_to_page_range extern int apply_to_page_range ( s#mm_struct * , unsigned long , unsigned long , t#pte_fn_t , void * ) 
unmap_mapping_range void unmap_mapping_range ( s#address_space * , t#loff_t const , t#loff_t const , int ) 
handle_mm_fault extern int handle_mm_fault ( s#mm_struct * , s#vm_area_struct * , unsigned long , unsigned int ) 
follow_pfn int follow_pfn ( s#vm_area_struct * , unsigned long , unsigned long * ) 

/* mm/memory-failure.o */
hwpoison_filter_enable extern t#u32 hwpoison_filter_enable 
hwpoison_filter_dev_major extern t#u32 hwpoison_filter_dev_major 
hwpoison_filter_dev_minor extern t#u32 hwpoison_filter_dev_minor 
hwpoison_filter_flags_mask extern t#u64 hwpoison_filter_flags_mask 
hwpoison_filter_flags_value extern t#u64 hwpoison_filter_flags_value 
s##rq
s##cfs_rq
s##rt_rq
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##device
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##array_cache
s##kmem_list3
hwpoison_filter extern int hwpoison_filter ( s#page * ) 
shake_page extern void shake_page ( s#page * , int ) 
__memory_failure extern int __memory_failure ( unsigned long , int , int ) 
unpoison_memory extern int unpoison_memory ( unsigned long ) 

/* mm/memory_hotplug.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##array_cache
s##kmem_list3
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
__add_pages extern int __add_pages ( int , s#zone * , unsigned long , unsigned long ) 
__remove_pages extern int __remove_pages ( s#zone * , unsigned long , unsigned long ) 
add_memory extern int add_memory ( int , t#u64 , t#u64 ) 
remove_memory extern int remove_memory ( t#u64 , t#u64 ) 

/* mm/mempolicy.o */
s##rq
s##cfs_rq
s##rt_rq
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##net
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
alloc_pages_current extern s#page * alloc_pages_current ( t#gfp_t , unsigned ) 

/* mm/mempool.o */
mempool_create extern t#mempool_t * mempool_create ( int , t#mempool_alloc_t * , t#mempool_free_t * , void * ) 
mempool_create_node extern t#mempool_t * mempool_create_node ( int , t#mempool_alloc_t * , t#mempool_free_t * , void * , int ) 
mempool_resize extern int mempool_resize ( t#mempool_t * , int , t#gfp_t ) 
mempool_destroy extern void mempool_destroy ( t#mempool_t * ) 
mempool_alloc extern void * mempool_alloc ( t#mempool_t * , t#gfp_t ) 
mempool_free extern void mempool_free ( void * , t#mempool_t * ) 
mempool_alloc_slab void * mempool_alloc_slab ( t#gfp_t , void * ) 
mempool_free_slab void mempool_free_slab ( void * , void * ) 
mempool_kmalloc void * mempool_kmalloc ( t#gfp_t , void * ) 
mempool_kfree void mempool_kfree ( void * , void * ) 
mempool_alloc_pages void * mempool_alloc_pages ( t#gfp_t , void * ) 
mempool_free_pages void mempool_free_pages ( void * , void * ) 

/* mm/migrate.o */
migrate_prep extern int migrate_prep ( void ) 
putback_lru_pages extern int putback_lru_pages ( s#list_head * ) 
s##rq
s##cfs_rq
s##rt_rq
s##array_cache
s##kmem_list3
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##net
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
fail_migrate_page extern int fail_migrate_page ( s#address_space * , s#page * , s#page * ) 
migrate_page extern int migrate_page ( s#address_space * , s#page * , s#page * ) 
buffer_migrate_page extern int buffer_migrate_page ( s#address_space * , s#page * , s#page * ) 
t#new_page_t typedef s#page * new_page_t ( s#page * , unsigned long , int * * ) 
migrate_pages extern int migrate_pages ( s#list_head * , t#new_page_t , unsigned long ) 

/* mm/mlock.o */
can_do_mlock extern int can_do_mlock ( void ) 

/* mm/mm_init.o */
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
mm_kobj extern s#kobject * mm_kobj 

/* mm/mmap.o */
vm_get_page_prot t#pgprot_t vm_get_page_prot ( unsigned long ) 
s##rq
s##cfs_rq
s##rt_rq
s##radix_tree_node
s##device
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##array_cache
s##kmem_list3
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##bts_context
s##bsd_acct_struct
s##ds_context
s##fs_struct
s##files_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##net
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##poll_table_struct
s##nlm_lockowner
s##nfs4_lock_state
s##cdev
s##posix_acl
do_mmap_pgoff extern unsigned long do_mmap_pgoff ( s#file * , unsigned long , unsigned long , unsigned long , unsigned long , unsigned long ) 
get_unmapped_area extern unsigned long get_unmapped_area ( s#file * , unsigned long , unsigned long , unsigned long , unsigned long ) 
find_vma extern s#vm_area_struct * find_vma ( s#mm_struct * , unsigned long ) 
do_munmap extern int do_munmap ( s#mm_struct * , unsigned long , t#size_t ) 
do_brk extern unsigned long do_brk ( unsigned long , unsigned long ) 

/* mm/mmu_notifier.o */
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##rq
s##cfs_rq
s##rt_rq
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
mmu_notifier_register extern int mmu_notifier_register ( s#mmu_notifier * , s#mm_struct * ) 
__mmu_notifier_register extern int __mmu_notifier_register ( s#mmu_notifier * , s#mm_struct * ) 
mmu_notifier_unregister extern void mmu_notifier_unregister ( s#mmu_notifier * , s#mm_struct * ) 

/* mm/mmzone.o */
s##bootmem_data
s##task_struct
first_online_pgdat extern s#pglist_data * first_online_pgdat ( void ) 
next_online_pgdat extern s#pglist_data * next_online_pgdat ( s#pglist_data * ) 

/* mm/oom_kill.o */
register_oom_notifier extern int register_oom_notifier ( s#notifier_block * ) 
unregister_oom_notifier extern int unregister_oom_notifier ( s#notifier_block * ) 

/* mm/page-writeback.o */
laptop_mode extern int laptop_mode 
s##rq
s##cfs_rq
s##rt_rq
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
bdi_writeout_inc extern void bdi_writeout_inc ( s#backing_dev_info * ) 
bdi_set_max_ratio int bdi_set_max_ratio ( s#backing_dev_info * , unsigned int ) 
balance_dirty_pages_ratelimited_nr void balance_dirty_pages_ratelimited_nr ( s#address_space * , unsigned long ) 
t#writepage_t typedef int ( * writepage_t ) ( s#page * , s#writeback_control * , void * ) 
write_cache_pages int write_cache_pages ( s#address_space * , s#writeback_control * , t#writepage_t , void * ) 
generic_writepages int generic_writepages ( s#address_space * , s#writeback_control * ) 
write_one_page int write_one_page ( s#page * , int ) 
__set_page_dirty_nobuffers int __set_page_dirty_nobuffers ( s#page * ) 
set_page_dirty_notag int set_page_dirty_notag ( s#page * ) 
redirty_page_for_writepage int redirty_page_for_writepage ( s#writeback_control * , s#page * ) 
set_page_dirty int set_page_dirty ( s#page * ) 
set_page_dirty_lock int set_page_dirty_lock ( s#page * ) 
clear_page_dirty_for_io int clear_page_dirty_for_io ( s#page * ) 
test_set_page_writeback int test_set_page_writeback ( s#page * ) 
mapping_tagged int mapping_tagged ( s#address_space * , int ) 

/* mm/page_alloc.o */
node_states extern t#nodemask_t node_states [ NR_NODE_STATES ] 
totalram_pages extern unsigned long totalram_pages 
movable_zone extern int movable_zone 
nr_node_ids extern int nr_node_ids 
nr_online_nodes extern int nr_online_nodes 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
__alloc_pages_nodemask s#page * __alloc_pages_nodemask ( t#gfp_t , unsigned int , s#zonelist * , t#nodemask_t * ) 
__get_free_pages extern unsigned long __get_free_pages ( t#gfp_t , unsigned int ) 
get_zeroed_page extern unsigned long get_zeroed_page ( t#gfp_t ) 
__free_pages extern void __free_pages ( s#page * , unsigned int ) 
free_pages extern void free_pages ( unsigned long , unsigned int ) 
alloc_pages_exact void * alloc_pages_exact ( t#size_t , t#gfp_t ) 
free_pages_exact void free_pages_exact ( void * , t#size_t ) 
nr_free_buffer_pages extern unsigned int nr_free_buffer_pages ( void ) 
s#sysinfo struct sysinfo { long uptime ; unsigned long loads [ 3 ] ; unsigned long totalram ; unsigned long freeram ; unsigned long sharedram ; unsigned long bufferram ; unsigned long totalswap ; unsigned long freeswap ; unsigned short procs ; unsigned short pad ; unsigned long totalhigh ; unsigned long freehigh ; unsigned int mem_unit ; char _f [ 20 - 2 * sizeof ( long ) - sizeof ( int ) ] ; } 
si_meminfo extern void si_meminfo ( s#sysinfo * ) 
adjust_memalloc_reserve int adjust_memalloc_reserve ( int ) 

/* mm/percpu.o */
pcpu_base_addr extern void * pcpu_base_addr 
__alloc_percpu extern void * __alloc_percpu ( t#size_t , t#size_t ) 
free_percpu extern void free_percpu ( void * ) 

/* mm/readahead.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##array_cache
s##kmem_list3
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
file_ra_state_init extern void file_ra_state_init ( s#file_ra_state * , s#address_space * ) 
read_cache_pages extern int read_cache_pages ( s#address_space * , s#list_head * , t#filler_t * , void * ) 
page_cache_sync_readahead void page_cache_sync_readahead ( s#address_space * , s#file_ra_state * , s#file * , unsigned long , unsigned long ) 
page_cache_async_readahead void page_cache_async_readahead ( s#address_space * , s#file_ra_state * , s#file * , s#page * , unsigned long , unsigned long ) 

/* mm/reserve.o */
mem_reserve_root extern s#mem_reserve mem_reserve_root 
mem_reserve_init void mem_reserve_init ( s#mem_reserve * , const char * , s#mem_reserve * ) 
mem_reserve_connect int mem_reserve_connect ( s#mem_reserve * , s#mem_reserve * ) 
mem_reserve_disconnect void mem_reserve_disconnect ( s#mem_reserve * ) 
mem_reserve_pages_set int mem_reserve_pages_set ( s#mem_reserve * , long ) 
mem_reserve_pages_charge int mem_reserve_pages_charge ( s#mem_reserve * , long ) 
mem_reserve_kmalloc_set int mem_reserve_kmalloc_set ( s#mem_reserve * , long ) 
mem_reserve_kmalloc_charge int mem_reserve_kmalloc_charge ( s#mem_reserve * , long ) 
s##array_cache
s##kmem_list3
mem_reserve_kmem_cache_set int mem_reserve_kmem_cache_set ( s#mem_reserve * , s#kmem_cache * , int ) 
mem_reserve_kmem_cache_charge int mem_reserve_kmem_cache_charge ( s#mem_reserve * , s#kmem_cache * , long ) 

/* mm/rmap.o */
s##rq
s##cfs_rq
s##rt_rq
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
page_mkclean int page_mkclean ( s#page * ) 

/* mm/shmem.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##blk_trace
s##timer_rand_state
s##mtd_info
s##eventfd_ctx
s##array_cache
s##kmem_list3
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##poll_table_struct
s##nlm_lockowner
s##nfs4_lock_state
s##cdev
s##mnt_namespace
shmem_file_setup s#file * shmem_file_setup ( const char * , t#loff_t , unsigned long ) 

/* mm/slab.o */
s#array_cache struct array_cache { unsigned int avail ; unsigned int limit ; unsigned int batchcount ; unsigned int touched : 1 , reserve : 1 ; t#spinlock_t lock ; void * entry [ ] ; } 
s#kmem_list3 struct kmem_list3 { s#list_head slabs_partial ; s#list_head slabs_full ; s#list_head slabs_free ; unsigned long free_objects ; unsigned int free_limit ; unsigned int colour_next ; t#spinlock_t list_lock ; s#array_cache * shared ; s#array_cache * * alien ; unsigned long next_reap ; int free_touched ; } 
slab_buffer_size extern t#size_t slab_buffer_size ( s#kmem_cache * ) 
s#cache_sizes struct cache_sizes { t#size_t cs_size ; s#kmem_cache * cs_cachep ; s#kmem_cache * cs_dmacachep ; } 
malloc_sizes extern s#cache_sizes malloc_sizes [ ] 
kmem_cache_create s#kmem_cache * kmem_cache_create ( const char * , t#size_t , t#size_t , unsigned long , void ( * ) ( void * ) ) 
kmem_cache_shrink int kmem_cache_shrink ( s#kmem_cache * ) 
kmem_cache_destroy void kmem_cache_destroy ( s#kmem_cache * ) 
kmem_cache_alloc void * kmem_cache_alloc ( s#kmem_cache * , t#gfp_t ) 
kmem_cache_alloc_notrace extern void * kmem_cache_alloc_notrace ( s#kmem_cache * , t#gfp_t ) 
kmem_cache_alloc_node extern void * kmem_cache_alloc_node ( s#kmem_cache * , t#gfp_t , int ) 
kmem_cache_alloc_node_notrace extern void * kmem_cache_alloc_node_notrace ( s#kmem_cache * , t#gfp_t , int ) 
__kmalloc_node extern void * __kmalloc_node ( t#size_t , t#gfp_t , int ) 
__kmalloc_node_track_caller void * __kmalloc_node_track_caller ( t#size_t , t#gfp_t , int , unsigned long ) 
__kmalloc void * __kmalloc ( t#size_t , t#gfp_t ) 
__kmalloc_track_caller void * __kmalloc_track_caller ( t#size_t , t#gfp_t , unsigned long ) 
kmem_cache_free void kmem_cache_free ( s#kmem_cache * , void * ) 
kfree void kfree ( const void * ) 
kmem_cache_size unsigned int kmem_cache_size ( s#kmem_cache * ) 
kmem_cache_name const char * kmem_cache_name ( s#kmem_cache * ) 
kmalloc_estimate_objs unsigned kmalloc_estimate_objs ( t#size_t , t#gfp_t , int ) 
kmalloc_estimate_bytes unsigned kmalloc_estimate_bytes ( t#gfp_t , t#size_t ) 
ksize t#size_t ksize ( const void * ) 

/* mm/sparse.o */
s##page_cgroup
s#mem_section struct mem_section { unsigned long section_mem_map ; unsigned long * pageblock_flags ; s#page_cgroup * page_cgroup ; unsigned long pad ; } 
mem_section extern s#mem_section * mem_section [ ( ( 1UL << ( 46 - 27 ) ) / ( ( ( 1UL ) << 12 ) / sizeof ( struct mem_section ) ) ) ] 

/* mm/swap.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##device
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##array_cache
s##kmem_list3
put_page void put_page ( s#page * ) 
put_pages_list void put_pages_list ( s#list_head * ) 
mark_page_accessed extern void mark_page_accessed ( s#page * ) 
__pagevec_release void __pagevec_release ( s#pagevec * ) 
e#lru_list enum lru_list { LRU_INACTIVE_ANON = 0 , LRU_ACTIVE_ANON = 0 + 1 , LRU_INACTIVE_FILE = 0 + 2 , LRU_ACTIVE_FILE = 0 + 2 + 1 , LRU_UNEVICTABLE , NR_LRU_LISTS } 
____pagevec_lru_add void ____pagevec_lru_add ( s#pagevec * , e#lru_list ) 
pagevec_lookup unsigned pagevec_lookup ( s#pagevec * , s#address_space * , unsigned long , unsigned ) 
pagevec_lookup_tag unsigned pagevec_lookup_tag ( s#pagevec * , s#address_space * , unsigned long * , int , unsigned ) 

/* mm/swapfile.o */
s##rq
s##cfs_rq
s##rt_rq
s##array_cache
s##kmem_list3
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
__page_file_mapping extern s#address_space * __page_file_mapping ( s#page * ) 
__page_file_index extern unsigned long __page_file_index ( s#page * ) 

/* mm/truncate.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##device
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##array_cache
s##kmem_list3
cancel_dirty_page extern void cancel_dirty_page ( s#page * , unsigned int ) 
generic_error_remove_page int generic_error_remove_page ( s#address_space * , s#page * ) 
truncate_inode_pages_range extern void truncate_inode_pages_range ( s#address_space * , t#loff_t , t#loff_t ) 
truncate_inode_pages extern void truncate_inode_pages ( s#address_space * , t#loff_t ) 
invalidate_mapping_pages unsigned long invalidate_mapping_pages ( s#address_space * , unsigned long , unsigned long ) 
invalidate_inode_pages2_range extern int invalidate_inode_pages2_range ( s#address_space * , unsigned long , unsigned long ) 
invalidate_inode_pages2 extern int invalidate_inode_pages2 ( s#address_space * ) 
truncate_pagecache extern void truncate_pagecache ( s#inode * , t#loff_t , t#loff_t ) 
vmtruncate extern int vmtruncate ( s#inode * , t#loff_t ) 

/* mm/util.o */
kstrdup extern char * kstrdup ( const char * , t#gfp_t ) 
kstrndup extern char * kstrndup ( const char * , t#size_t , t#gfp_t ) 
kmemdup extern void * kmemdup ( const void * , t#size_t , t#gfp_t ) 
memdup_user extern void * memdup_user ( const void * , t#size_t ) 
__krealloc void * __attribute__ ( ( warn_unused_result ) ) __krealloc ( const void * , t#size_t , t#gfp_t ) 
krealloc void * __attribute__ ( ( warn_unused_result ) ) krealloc ( const void * , t#size_t , t#gfp_t ) 
kzfree void kzfree ( const void * ) 
strndup_user extern char * strndup_user ( const char * , long ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
get_user_pages_fast int get_user_pages_fast ( unsigned long , int , int , s#page * * ) 
__tracepoint_kmalloc extern s#tracepoint __tracepoint_kmalloc 
__tracepoint_kmem_cache_alloc extern s#tracepoint __tracepoint_kmem_cache_alloc 
__tracepoint_kmalloc_node extern s#tracepoint __tracepoint_kmalloc_node 
__tracepoint_kmem_cache_alloc_node extern s#tracepoint __tracepoint_kmem_cache_alloc_node 
__tracepoint_kfree extern s#tracepoint __tracepoint_kfree 
__tracepoint_kmem_cache_free extern s#tracepoint __tracepoint_kmem_cache_free 

/* mm/vmalloc.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
vmalloc_to_page s#page * vmalloc_to_page ( const void * ) 
vmalloc_to_pfn unsigned long vmalloc_to_pfn ( const void * ) 
vm_unmap_aliases extern void vm_unmap_aliases ( void ) 
vm_unmap_ram extern void vm_unmap_ram ( const void * , unsigned int ) 
vm_map_ram extern void * vm_map_ram ( s#page * * , unsigned int , int , t#pgprot_t ) 
s#vm_struct struct vm_struct { s#vm_struct * next ; void * addr ; unsigned long size ; unsigned long flags ; s#page * * pages ; unsigned int nr_pages ; unsigned long phys_addr ; void * caller ; } 
map_vm_area extern int map_vm_area ( s#vm_struct * , t#pgprot_t , s#page * * * ) 
__get_vm_area extern s#vm_struct * __get_vm_area ( unsigned long , unsigned long , unsigned long , unsigned long ) 
vfree extern void vfree ( const void * ) 
vunmap extern void vunmap ( const void * ) 
vmap extern void * vmap ( s#page * * , unsigned int , unsigned long , t#pgprot_t ) 
__vmalloc extern void * __vmalloc ( unsigned long , t#gfp_t , t#pgprot_t ) 
vmalloc extern void * vmalloc ( unsigned long ) 
vmalloc_user extern void * vmalloc_user ( unsigned long ) 
vmalloc_node extern void * vmalloc_node ( unsigned long , int ) 
vmalloc_32 extern void * vmalloc_32 ( unsigned long ) 
vmalloc_32_user extern void * vmalloc_32_user ( unsigned long ) 
remap_vmalloc_range extern int remap_vmalloc_range ( s#vm_area_struct * , void * , unsigned long ) 
alloc_vm_area extern s#vm_struct * alloc_vm_area ( t#size_t ) 
free_vm_area extern void free_vm_area ( s#vm_struct * ) 

/* mm/vmscan.o */
s#shrinker struct shrinker { int ( * shrink ) ( int , t#gfp_t ) ; int seeks ; s#list_head list ; long nr ; } 
register_shrinker extern void register_shrinker ( s#shrinker * ) 
unregister_shrinker extern void unregister_shrinker ( s#shrinker * ) 
s##rq
s##cfs_rq
s##rt_rq
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##hd_geometry
s##radix_tree_node
s##blk_trace
s##timer_rand_state
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##array_cache
s##kmem_list3
isolate_lru_page extern int isolate_lru_page ( s#page * ) 

/* mm/vmstat.o */
s#vm_event_state struct vm_event_state { unsigned long event [ NR_VM_EVENT_ITEMS ] ; } 
per_cpu__vm_event_states extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( s#vm_event_state ) per_cpu__vm_event_states 
all_vm_events extern void all_vm_events ( unsigned long * ) 
vm_stat extern t#atomic_long_t vm_stat [ NR_VM_ZONE_STAT_ITEMS ] 
s##bootmem_data
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
e#zone_stat_item enum zone_stat_item { NR_FREE_PAGES , NR_LRU_BASE , NR_INACTIVE_ANON = NR_LRU_BASE , NR_ACTIVE_ANON , NR_INACTIVE_FILE , NR_ACTIVE_FILE , NR_UNEVICTABLE , NR_MLOCK , NR_ANON_PAGES , NR_FILE_MAPPED , NR_FILE_PAGES , NR_FILE_DIRTY , NR_WRITEBACK , NR_SLAB_RECLAIMABLE , NR_SLAB_UNRECLAIMABLE , NR_PAGETABLE , NR_KERNEL_STACK , NR_UNSTABLE_NFS , NR_BOUNCE , NR_VMSCAN_WRITE , NR_WRITEBACK_TEMP , NR_ISOLATED_ANON , NR_ISOLATED_FILE , NR_SHMEM , NUMA_HIT , NUMA_MISS , NUMA_FOREIGN , NUMA_INTERLEAVE_HIT , NUMA_LOCAL , NUMA_OTHER , NR_VM_ZONE_STAT_ITEMS } 
__mod_zone_page_state void __mod_zone_page_state ( s#zone * , e#zone_stat_item , int ) 
mod_zone_page_state void mod_zone_page_state ( s#zone * , e#zone_stat_item , int ) 
__inc_zone_page_state void __inc_zone_page_state ( s#page * , e#zone_stat_item ) 
__dec_zone_page_state void __dec_zone_page_state ( s#page * , e#zone_stat_item ) 
inc_zone_page_state void inc_zone_page_state ( s#page * , e#zone_stat_item ) 
dec_zone_page_state void dec_zone_page_state ( s#page * , e#zone_stat_item ) 

/* net/802/fc.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##tvec_base
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
alloc_fcdev extern s#net_device * alloc_fcdev ( int ) 

/* net/802/fddi.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
fddi_type_trans extern t#__be16 fddi_type_trans ( s#sk_buff * , s#net_device * ) 
fddi_change_mtu extern int fddi_change_mtu ( s#net_device * , int ) 
alloc_fddidev extern s#net_device * alloc_fddidev ( int ) 

/* net/802/garp.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
e#garp_applications enum garp_applications { GARP_APPLICATION_GVRP , __GARP_APPLICATION_MAX } 
s#stp_proto struct stp_proto { unsigned char group_address [ 6 ] ; void ( * rcv ) ( const s#stp_proto * , s#sk_buff * , s#net_device * ) ; void * data ; } 
s#garp_application struct garp_application { e#garp_applications type ; unsigned int maxattr ; s#stp_proto proto ; } 
s#garp_applicant struct garp_applicant { s#garp_application * app ; s#net_device * dev ; s#timer_list join_timer ; t#spinlock_t lock ; s#sk_buff_head queue ; s#sk_buff * pdu ; s#rb_root gid ; } 
s#garp_port struct garp_port { s#garp_applicant * applicants [ ( __GARP_APPLICATION_MAX - 1 ) + 1 ] ; } 
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
garp_request_join extern int garp_request_join ( const s#net_device * , const s#garp_application * , const void * , t#u8 , t#u8 ) 
garp_request_leave extern void garp_request_leave ( const s#net_device * , const s#garp_application * , const void * , t#u8 , t#u8 ) 
garp_init_applicant extern int garp_init_applicant ( s#net_device * , s#garp_application * ) 
garp_uninit_applicant extern void garp_uninit_applicant ( s#net_device * , s#garp_application * ) 
garp_register_application extern int garp_register_application ( s#garp_application * ) 
garp_unregister_application extern void garp_unregister_application ( s#garp_application * ) 

/* net/802/hippi.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
hippi_type_trans extern t#__be16 hippi_type_trans ( s#sk_buff * , s#net_device * ) 
hippi_change_mtu extern int hippi_change_mtu ( s#net_device * , int ) 
hippi_mac_addr extern int hippi_mac_addr ( s#net_device * , void * ) 
hippi_neigh_setup_dev extern int hippi_neigh_setup_dev ( s#net_device * , s#neigh_parms * ) 
alloc_hippi_dev extern s#net_device * alloc_hippi_dev ( int ) 

/* net/802/p8022.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
s#packet_type struct packet_type { t#__be16 type ; s#net_device * dev ; int ( * func ) ( s#sk_buff * , s#net_device * , s#packet_type * , s#net_device * ) ; s#sk_buff * ( * gso_segment ) ( s#sk_buff * , int ) ; int ( * gso_send_check ) ( s#sk_buff * ) ; s#sk_buff * * ( * gro_receive ) ( s#sk_buff * * , s#sk_buff * ) ; int ( * gro_complete ) ( s#sk_buff * ) ; void * af_packet_priv ; s#list_head list ; } 
s#llc_addr struct llc_addr { unsigned char lsap ; unsigned char mac [ 6 ] ; } 
s#llc_sap struct llc_sap { unsigned char state ; unsigned char p_bit ; unsigned char f_bit ; t#atomic_t refcnt ; int ( * rcv_func ) ( s#sk_buff * , s#net_device * , s#packet_type * , s#net_device * ) ; s#llc_addr laddr ; s#list_head node ; struct { t#rwlock_t lock ; s#hlist_head list ; } sk_list ; } 
s#datalink_proto struct datalink_proto { unsigned char type [ 8 ] ; s#llc_sap * sap ; unsigned short header_length ; int ( * rcvfunc ) ( s#sk_buff * , s#net_device * , s#packet_type * , s#net_device * ) ; int ( * request ) ( s#datalink_proto * , s#sk_buff * , unsigned char * ) ; s#list_head node ; } 
register_8022_client extern s#datalink_proto * register_8022_client ( unsigned char , int ( * ) ( s#sk_buff * , s#net_device * , s#packet_type * , s#net_device * ) ) 
unregister_8022_client extern void unregister_8022_client ( s#datalink_proto * ) 

/* net/802/p8023.o */
s##llc_sap
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
destroy_8023_client extern void destroy_8023_client ( s#datalink_proto * ) 
make_8023_client extern s#datalink_proto * make_8023_client ( void ) 

/* net/802/psnap.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
register_snap_client extern s#datalink_proto * register_snap_client ( const unsigned char * , int ( * ) ( s#sk_buff * , s#net_device * , s#packet_type * , s#net_device * ) ) 
unregister_snap_client extern void unregister_snap_client ( s#datalink_proto * ) 

/* net/802/stp.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
stp_proto_register extern int stp_proto_register ( const s#stp_proto * ) 
stp_proto_unregister extern void stp_proto_unregister ( const s#stp_proto * ) 

/* net/802/tr.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##tvec_base
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
tr_type_trans extern t#__be16 tr_type_trans ( s#sk_buff * , s#net_device * ) 
alloc_trdev extern s#net_device * alloc_trdev ( int ) 

/* net/8021q/vlan_core.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s#netpoll struct netpoll { s#net_device * dev ; char dev_name [ 16 ] ; const char * name ; void ( * rx_hook ) ( s#netpoll * , int , char * , int ) ; t#__be32 local_ip , remote_ip ; t#u16 local_port , remote_port ; t#u8 remote_mac [ 6 ] ; } 
s#netpoll_info struct netpoll_info { t#atomic_t refcnt ; int rx_flags ; t#spinlock_t rx_lock ; s#netpoll * rx_np ; s#sk_buff_head arp_tx ; s#sk_buff_head txq ; s#delayed_work tx_work ; } 
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
__vlan_hwaccel_rx extern int __vlan_hwaccel_rx ( s#sk_buff * , s#vlan_group * , t#u16 , int ) 
vlan_dev_real_dev extern s#net_device * vlan_dev_real_dev ( const s#net_device * ) 
vlan_dev_vlan_id extern t#u16 vlan_dev_vlan_id ( const s#net_device * ) 
s#napi_struct struct napi_struct { s#list_head poll_list ; unsigned long state ; int weight ; int ( * poll ) ( s#napi_struct * , int ) ; t#spinlock_t poll_lock ; int poll_owner ; unsigned int gro_count ; s#net_device * dev ; s#list_head dev_list ; s#sk_buff * gro_list ; s#sk_buff * skb ; } 
vlan_gro_receive extern int vlan_gro_receive ( s#napi_struct * , s#vlan_group * , unsigned int , s#sk_buff * ) 
vlan_gro_frags extern int vlan_gro_frags ( s#napi_struct * , s#vlan_group * , unsigned int ) 

/* net/9p/client.o */
s#p9_fcall struct p9_fcall { t#u32 size ; t#u8 id ; t#u16 tag ; t#size_t offset ; t#size_t capacity ; t#uint8_t * sdata ; } 
s#p9_req_t struct p9_req_t { int status ; int t_err ; t#wait_queue_head_t * wq ; s#p9_fcall * tc ; s#p9_fcall * rc ; void * aux ; s#list_head req_list ; } 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#p9_trans_module struct p9_trans_module { s#list_head list ; char * name ; int maxsize ; int def ; s#module * owner ; int ( * create ) ( s#p9_client * , const char * , char * ) ; void ( * close ) ( s#p9_client * ) ; int ( * request ) ( s#p9_client * , s#p9_req_t * ) ; int ( * cancel ) ( s#p9_client * , s#p9_req_t * ) ; } 
e#p9_trans_status enum p9_trans_status { Connected , Disconnected , Hung , } 
s##p9_conn
s##p9_idpool
s#p9_client struct p9_client { t#spinlock_t lock ; int msize ; unsigned char dotu ; s#p9_trans_module * trans_mod ; e#p9_trans_status status ; void * trans ; s#p9_conn * conn ; s#p9_idpool * fidpool ; s#list_head fidlist ; s#p9_idpool * tagpool ; s#p9_req_t * reqs [ 255 ] ; int max_tag ; } 
p9_tag_lookup s#p9_req_t * p9_tag_lookup ( s#p9_client * , t#u16 ) 
p9_client_cb void p9_client_cb ( s#p9_client * , s#p9_req_t * ) 
p9_parse_header int p9_parse_header ( s#p9_fcall * , t#int32_t * , t#int8_t * , t#int16_t * , int ) 
p9_client_version int p9_client_version ( s#p9_client * ) 
p9_client_create s#p9_client * p9_client_create ( const char * , char * ) 
p9_client_destroy void p9_client_destroy ( s#p9_client * ) 
p9_client_disconnect void p9_client_disconnect ( s#p9_client * ) 
s#p9_qid struct p9_qid { t#u8 type ; t#u32 version ; t#u64 path ; } 
s#p9_fid struct p9_fid { s#p9_client * clnt ; t#u32 fid ; int mode ; s#p9_qid qid ; t#u32 iounit ; t#uid_t uid ; void * rdir ; s#list_head flist ; s#list_head dlist ; } 
p9_client_attach s#p9_fid * p9_client_attach ( s#p9_client * , s#p9_fid * , char * , t#u32 , char * ) 
p9_client_auth s#p9_fid * p9_client_auth ( s#p9_client * , char * , t#u32 , char * ) 
p9_client_walk s#p9_fid * p9_client_walk ( s#p9_fid * , int , char * * , int ) 
p9_client_open int p9_client_open ( s#p9_fid * , int ) 
p9_client_fcreate int p9_client_fcreate ( s#p9_fid * , char * , t#u32 , int , char * ) 
p9_client_clunk int p9_client_clunk ( s#p9_fid * ) 
p9_client_remove int p9_client_remove ( s#p9_fid * ) 
p9_client_read int p9_client_read ( s#p9_fid * , char * , char * , t#u64 , t#u32 ) 
p9_client_write int p9_client_write ( s#p9_fid * , char * , const char * , t#u64 , t#u32 ) 
s#p9_wstat struct p9_wstat { t#u16 size ; t#u16 type ; t#u32 dev ; s#p9_qid qid ; t#u32 mode ; t#u32 atime ; t#u32 mtime ; t#u64 length ; char * name ; char * uid ; char * gid ; char * muid ; char * extension ; t#u32 n_uid ; t#u32 n_gid ; t#u32 n_muid ; } 
p9_client_stat s#p9_wstat * p9_client_stat ( s#p9_fid * ) 
p9_client_wstat int p9_client_wstat ( s#p9_fid * , s#p9_wstat * ) 

/* net/9p/error.o */
p9_error_init int p9_error_init ( void ) 
p9_errstr2errno int p9_errstr2errno ( char * , int ) 

/* net/9p/mod.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##p9_conn
s##p9_idpool
v9fs_register_trans void v9fs_register_trans ( s#p9_trans_module * ) 
v9fs_unregister_trans void v9fs_unregister_trans ( s#p9_trans_module * ) 
v9fs_get_trans_by_name s#p9_trans_module * v9fs_get_trans_by_name ( const t#substring_t * ) 
v9fs_get_default_trans s#p9_trans_module * v9fs_get_default_trans ( void ) 

/* net/9p/protocol.o */
p9pdu_dump void p9pdu_dump ( int , s#p9_fcall * ) 
p9stat_free void p9stat_free ( s#p9_wstat * ) 
p9stat_read int p9stat_read ( char * , int , s#p9_wstat * , int ) 

/* net/9p/util.o */
s#p9_idpool struct p9_idpool { t#spinlock_t lock ; s#idr pool ; } 
p9_idpool_create s#p9_idpool * p9_idpool_create ( void ) 
p9_idpool_destroy void p9_idpool_destroy ( s#p9_idpool * ) 
p9_idpool_get int p9_idpool_get ( s#p9_idpool * ) 
p9_idpool_put void p9_idpool_put ( int , s#p9_idpool * ) 
p9_idpool_check int p9_idpool_check ( int , s#p9_idpool * ) 

/* net/appletalk/aarp.o */
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s#atalk_addr struct atalk_addr { t#__be16 s_net ; t#__u8 s_node ; } 
aarp_send_ddp extern int aarp_send_ddp ( s#net_device * , s#sk_buff * , s#atalk_addr * , void * ) 

/* net/appletalk/ddp.o */
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
atrtr_get_dev extern s#net_device * atrtr_get_dev ( s#atalk_addr * ) 
atalk_find_dev_addr extern s#atalk_addr * atalk_find_dev_addr ( s#net_device * ) 

/* net/appletalk/dev.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
alloc_ltalkdev extern s#net_device * alloc_ltalkdev ( int ) 

/* net/atm/atm_misc.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
atm_charge int atm_charge ( s#atm_vcc * , int ) 
atm_alloc_charge s#sk_buff * atm_alloc_charge ( s#atm_vcc * , int , t#gfp_t ) 
atm_pcr_goal int atm_pcr_goal ( const s#atm_trafprm * ) 
s#k_sonet_stats struct k_sonet_stats { t#atomic_t section_bip ; t#atomic_t line_bip ; t#atomic_t path_bip ; t#atomic_t line_febe ; t#atomic_t path_febe ; t#atomic_t corr_hcs ; t#atomic_t uncorr_hcs ; t#atomic_t tx_cells ; t#atomic_t rx_cells ; } 
s#sonet_stats struct sonet_stats { int section_bip ; int line_bip ; int path_bip ; int line_febe ; int path_febe ; int corr_hcs ; int uncorr_hcs ; int tx_cells ; int rx_cells ; } 
sonet_copy_stats extern void sonet_copy_stats ( s#k_sonet_stats * , s#sonet_stats * ) 
sonet_subtract_stats extern void sonet_subtract_stats ( s#k_sonet_stats * , s#sonet_stats * ) 

/* net/atm/common.o */
vcc_hash extern s#hlist_head vcc_hash [ 32 ] 
vcc_sklist_lock extern t#rwlock_t vcc_sklist_lock 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
vcc_insert_socket void vcc_insert_socket ( s#sock * ) 
vcc_release_async void vcc_release_async ( s#atm_vcc * , int ) 

/* net/atm/ioctl.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s#atm_ioctl struct atm_ioctl { s#module * owner ; int ( * ioctl ) ( s#socket * , unsigned int , unsigned long ) ; s#list_head list ; } 
register_atm_ioctl void register_atm_ioctl ( s#atm_ioctl * ) 
deregister_atm_ioctl void deregister_atm_ioctl ( s#atm_ioctl * ) 

/* net/atm/proc.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##cdev
s##posix_acl
atm_proc_root extern s#proc_dir_entry * atm_proc_root 

/* net/atm/raw.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
atm_init_aal5 int atm_init_aal5 ( s#atm_vcc * ) 

/* net/atm/resources.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
atm_dev_register s#atm_dev * atm_dev_register ( const char * , const s#atmdev_ops * , int , unsigned long * ) 
atm_dev_deregister void atm_dev_deregister ( s#atm_dev * ) 
atm_dev_lookup s#atm_dev * atm_dev_lookup ( int ) 

/* net/ax25/af_ax25.o */
t#ax25_address typedef struct { char ax25_call [ 7 ] ; } ax25_address 
t#ax25_digi typedef struct { t#ax25_address calls [ 8 ] ; unsigned char repeated [ 8 ] ; unsigned char ndigi ; signed char lastrepeat ; } ax25_digi 
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
t#ax25_dama_info typedef struct { char slave ; s#timer_list slave_timer ; unsigned short slave_timeout ; } ax25_dama_info 
s#ax25_dev struct ax25_dev { s#ax25_dev * next ; s#net_device * dev ; s#net_device * forward ; s#ctl_table * systable ; int values [ AX25_MAX_VALUES ] ; t#ax25_dama_info dama ; } 
t#ax25_dev typedef s#ax25_dev ax25_dev 
s#ax25_cb struct ax25_cb { s#hlist_node ax25_node ; t#ax25_address source_addr , dest_addr ; t#ax25_digi * digipeat ; t#ax25_dev * ax25_dev ; unsigned char iamdigi ; unsigned char state , modulus , pidincl ; unsigned short vs , vr , va ; unsigned char condition , backoff ; unsigned char n2 , n2count ; s#timer_list t1timer , t2timer , t3timer , idletimer ; unsigned long t1 , t2 , t3 , idle , rtt ; unsigned short paclen , fragno , fraglen ; s#sk_buff_head write_queue ; s#sk_buff_head reseq_queue ; s#sk_buff_head ack_queue ; s#sk_buff_head frag_queue ; unsigned char window ; s#timer_list timer , dtimer ; s#sock * sk ; t#atomic_t refcount ; } 
t#ax25_cb typedef s#ax25_cb ax25_cb 
ax25_find_cb extern t#ax25_cb * ax25_find_cb ( t#ax25_address * , t#ax25_address * , t#ax25_digi * , s#net_device * ) 

/* net/ax25/ax25_addr.o */
ax25_bcast extern const t#ax25_address ax25_bcast 
ax25_defaddr extern const t#ax25_address ax25_defaddr 
null_ax25_address extern const t#ax25_address null_ax25_address 
ax2asc extern char * ax2asc ( char * , const t#ax25_address * ) 
asc2ax extern void asc2ax ( t#ax25_address * , const char * ) 
ax25cmp extern int ax25cmp ( const t#ax25_address * , const t#ax25_address * ) 

/* net/ax25/ax25_iface.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s#ax25_protocol struct ax25_protocol { s#ax25_protocol * next ; unsigned int pid ; int ( * func ) ( s#sk_buff * , t#ax25_cb * ) ; } 
ax25_register_pid extern void ax25_register_pid ( s#ax25_protocol * ) 
ax25_protocol_release extern void ax25_protocol_release ( unsigned int ) 
s#ax25_linkfail struct ax25_linkfail { s#hlist_node lf_node ; void ( * func ) ( t#ax25_cb * , int ) ; } 
ax25_linkfail_register extern void ax25_linkfail_register ( s#ax25_linkfail * ) 
ax25_linkfail_release extern void ax25_linkfail_release ( s#ax25_linkfail * ) 
ax25_listen_register extern int __attribute__ ( ( warn_unused_result ) ) ax25_listen_register ( t#ax25_address * , s#net_device * ) 
ax25_listen_release extern void ax25_listen_release ( t#ax25_address * , s#net_device * ) 

/* net/ax25/ax25_ip.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
ax25_hard_header extern int ax25_hard_header ( s#sk_buff * , s#net_device * , unsigned short , const void * , const void * , unsigned int ) 
ax25_rebuild_header extern int ax25_rebuild_header ( s#sk_buff * ) 
ax25_header_ops extern const s#header_ops ax25_header_ops 

/* net/ax25/ax25_out.o */
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
ax25_send_frame extern t#ax25_cb * ax25_send_frame ( s#sk_buff * , int , t#ax25_address * , t#ax25_address * , t#ax25_digi * , s#net_device * ) 

/* net/ax25/ax25_timer.o */
s##tvec_base
ax25_display_timer extern unsigned long ax25_display_timer ( s#timer_list * ) 

/* net/ax25/ax25_uid.o */
ax25_uid_policy extern int ax25_uid_policy 
s#ax25_uid_assoc struct ax25_uid_assoc { s#hlist_node uid_node ; t#atomic_t refcount ; t#uid_t uid ; t#ax25_address call ; } 
t#ax25_uid_assoc typedef s#ax25_uid_assoc ax25_uid_assoc 
ax25_findbyuid extern t#ax25_uid_assoc * ax25_findbyuid ( t#uid_t ) 

/* net/bluetooth/af_bluetooth.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##rtable
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s#net_proto_family struct net_proto_family { int family ; int ( * create ) ( s#net * , s#socket * , int ) ; s#module * owner ; } 
bt_sock_register int bt_sock_register ( int , s#net_proto_family * ) 
bt_sock_unregister int bt_sock_unregister ( int ) 
s#bt_sock_list struct bt_sock_list { s#hlist_head head ; t#rwlock_t lock ; } 
bt_sock_link void bt_sock_link ( s#bt_sock_list * , s#sock * ) 
bt_sock_unlink void bt_sock_unlink ( s#bt_sock_list * , s#sock * ) 
bt_accept_enqueue void bt_accept_enqueue ( s#sock * , s#sock * ) 
bt_accept_unlink void bt_accept_unlink ( s#sock * ) 
bt_accept_dequeue s#sock * bt_accept_dequeue ( s#sock * , s#socket * ) 
bt_sock_recvmsg int bt_sock_recvmsg ( s#kiocb * , s#socket * , s#msghdr * , t#size_t , int ) 
bt_sock_poll t#uint bt_sock_poll ( s#file * , s#socket * , t#poll_table * ) 
bt_sock_ioctl int bt_sock_ioctl ( s#socket * , unsigned int , unsigned long ) 
bt_sock_wait_state int bt_sock_wait_state ( s#sock * , int , unsigned long ) 

/* net/bluetooth/hci_conn.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##rfkill
hci_get_route s#hci_dev * hci_get_route ( t#bdaddr_t * , t#bdaddr_t * ) 
s#hci_conn struct hci_conn { s#list_head list ; t#atomic_t refcnt ; t#spinlock_t lock ; t#bdaddr_t dst ; t#__u16 handle ; t#__u16 state ; t#__u8 mode ; t#__u8 type ; t#__u8 out ; t#__u8 attempt ; t#__u8 dev_class [ 3 ] ; t#__u8 features [ 8 ] ; t#__u8 ssp_mode ; t#__u16 interval ; t#__u16 pkt_type ; t#__u16 link_policy ; t#__u32 link_mode ; t#__u8 auth_type ; t#__u8 sec_level ; t#__u8 power_save ; t#__u16 disc_timeout ; unsigned long pend ; unsigned int sent ; s#sk_buff_head data_q ; s#timer_list disc_timer ; s#timer_list idle_timer ; s#work_struct work_add ; s#work_struct work_del ; s#device dev ; t#atomic_t devref ; s#hci_dev * hdev ; void * l2cap_data ; void * sco_data ; void * priv ; s#hci_conn * link ; } 
hci_connect s#hci_conn * hci_connect ( s#hci_dev * , int , t#bdaddr_t * , t#__u8 , t#__u8 ) 
hci_conn_check_link_mode int hci_conn_check_link_mode ( s#hci_conn * ) 
hci_conn_security int hci_conn_security ( s#hci_conn * , t#__u8 , t#__u8 ) 
hci_conn_change_link_key int hci_conn_change_link_key ( s#hci_conn * ) 
hci_conn_switch_role int hci_conn_switch_role ( s#hci_conn * , t#__u8 ) 
hci_conn_hold_device void hci_conn_hold_device ( s#hci_conn * ) 
hci_conn_put_device void hci_conn_put_device ( s#hci_conn * ) 

/* net/bluetooth/hci_core.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##rfkill
hci_alloc_dev s#hci_dev * hci_alloc_dev ( void ) 
hci_free_dev void hci_free_dev ( s#hci_dev * ) 
hci_register_dev int hci_register_dev ( s#hci_dev * ) 
hci_unregister_dev int hci_unregister_dev ( s#hci_dev * ) 
hci_suspend_dev int hci_suspend_dev ( s#hci_dev * ) 
hci_resume_dev int hci_resume_dev ( s#hci_dev * ) 
hci_recv_fragment int hci_recv_fragment ( s#hci_dev * , int , void * , int ) 
s#hci_proto struct hci_proto { char * name ; unsigned int id ; unsigned long flags ; void * priv ; int ( * connect_ind ) ( s#hci_dev * , t#bdaddr_t * , t#__u8 ) ; int ( * connect_cfm ) ( s#hci_conn * , t#__u8 ) ; int ( * disconn_ind ) ( s#hci_conn * ) ; int ( * disconn_cfm ) ( s#hci_conn * , t#__u8 ) ; int ( * recv_acldata ) ( s#hci_conn * , s#sk_buff * , t#__u16 ) ; int ( * recv_scodata ) ( s#hci_conn * , s#sk_buff * ) ; int ( * security_cfm ) ( s#hci_conn * , t#__u8 , t#__u8 ) ; } 
hci_register_proto int hci_register_proto ( s#hci_proto * ) 
hci_unregister_proto int hci_unregister_proto ( s#hci_proto * ) 
s#hci_cb struct hci_cb { s#list_head list ; char * name ; void ( * security_cfm ) ( s#hci_conn * , t#__u8 , t#__u8 ) ; void ( * key_change_cfm ) ( s#hci_conn * , t#__u8 ) ; void ( * role_switch_cfm ) ( s#hci_conn * , t#__u8 , t#__u8 ) ; } 
hci_register_cb int hci_register_cb ( s#hci_cb * ) 
hci_unregister_cb int hci_unregister_cb ( s#hci_cb * ) 
hci_send_acl int hci_send_acl ( s#hci_conn * , s#sk_buff * , t#__u16 ) 
hci_send_sco int hci_send_sco ( s#hci_conn * , s#sk_buff * ) 

/* net/bluetooth/hci_sysfs.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
bt_class extern s#class * bt_class 

/* net/bluetooth/l2cap.o */
l2cap_load void l2cap_load ( void ) 

/* net/bluetooth/lib.o */
baswap void baswap ( t#bdaddr_t * , t#bdaddr_t * ) 
batostr char * batostr ( t#bdaddr_t * ) 
bt_err int bt_err ( t#__u16 ) 

/* net/bridge/br.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##xfrm_state
s##rt6_info
s##dn_route
s##in_device
s#bridge_id struct bridge_id { unsigned char prio [ 2 ] ; unsigned char addr [ 6 ] ; } 
t#bridge_id typedef s#bridge_id bridge_id 
s#net_bridge struct net_bridge { t#spinlock_t lock ; s#list_head port_list ; s#net_device * dev ; t#spinlock_t hash_lock ; s#hlist_head hash [ ( 1 << 8 ) ] ; s#list_head age_list ; unsigned long feature_mask ; s#rtable fake_rtable ; unsigned long flags ; t#bridge_id designated_root ; t#bridge_id t#bridge_id ; t#u32 root_path_cost ; unsigned long max_age ; unsigned long hello_time ; unsigned long forward_delay ; unsigned long bridge_max_age ; unsigned long ageing_time ; unsigned long bridge_hello_time ; unsigned long bridge_forward_delay ; t#u8 group_addr [ 6 ] ; t#u16 root_port ; enum { BR_NO_STP , BR_KERNEL_STP , BR_USER_STP , } stp_enabled ; unsigned char topology_change ; unsigned char topology_change_detected ; s#timer_list hello_timer ; s#timer_list tcn_timer ; s#timer_list topology_change_timer ; s#timer_list gc_timer ; s#kobject * ifobj ; } 
t#port_id typedef t#__u16 port_id 
s#net_bridge_port struct net_bridge_port { s#net_bridge * br ; s#net_device * dev ; s#list_head list ; t#u8 priority ; t#u8 state ; t#u16 port_no ; unsigned char topology_change_ack ; unsigned char config_pending ; t#port_id t#port_id ; t#port_id designated_port ; t#bridge_id designated_root ; t#bridge_id designated_bridge ; t#u32 path_cost ; t#u32 designated_cost ; s#timer_list forward_delay_timer ; s#timer_list hold_timer ; s#timer_list message_age_timer ; s#kobject kobj ; s#rcu_head rcu ; unsigned long flags ; } 
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
br_should_route_hook extern int ( * br_should_route_hook ) ( s#sk_buff * ) 

/* net/bridge/netfilter/ebtables.o */
s#ebt_entries struct ebt_entries { unsigned int distinguisher ; char name [ 32 ] ; unsigned int counter_offset ; int policy ; unsigned int nentries ; char data [ 0 ] __attribute__ ( ( aligned ( __alignof__ ( struct ebt_replace ) ) ) ) ; } 
s#ebt_counter struct ebt_counter { t#uint64_t pcnt ; t#uint64_t bcnt ; } 
s#ebt_replace_kernel struct ebt_replace_kernel { char name [ 32 ] ; unsigned int valid_hooks ; unsigned int nentries ; unsigned int entries_size ; s#ebt_entries * hook_entry [ 6 ] ; unsigned int num_counters ; s#ebt_counter * counters ; char * entries ; } 
s#ebt_entry struct ebt_entry { unsigned int bitmask ; unsigned int invflags ; t#__be16 ethproto ; char in [ 16 ] ; char logical_in [ 16 ] ; char out [ 16 ] ; char logical_out [ 16 ] ; unsigned char sourcemac [ 6 ] ; unsigned char sourcemsk [ 6 ] ; unsigned char destmac [ 6 ] ; unsigned char destmsk [ 6 ] ; unsigned int watchers_offset ; unsigned int target_offset ; unsigned int next_offset ; unsigned char elems [ 0 ] __attribute__ ( ( aligned ( __alignof__ ( struct ebt_replace ) ) ) ) ; } 
s#ebt_chainstack struct ebt_chainstack { s#ebt_entries * chaininfo ; s#ebt_entry * e ; unsigned int n ; } 
s#ebt_table_info struct ebt_table_info { unsigned int entries_size ; unsigned int nentries ; s#ebt_entries * hook_entry [ 6 ] ; s#ebt_chainstack * * chainstack ; char * entries ; s#ebt_counter counters [ 0 ] __attribute__ ( ( __aligned__ ( ( 1 << ( 7 ) ) ) ) ) ; } 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#ebt_table struct ebt_table { s#list_head list ; char name [ 32 ] ; s#ebt_replace_kernel * table ; unsigned int valid_hooks ; t#rwlock_t lock ; int ( * check ) ( const s#ebt_table_info * , unsigned int ) ; s#ebt_table_info * private ; s#module * me ; } 
s##iw_handler_def
s##iw_public_data
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##in_device
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##wireless_dev
s##Qdisc
s##netpoll_info
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s#xt_table_info struct xt_table_info { unsigned int size ; unsigned int number ; unsigned int initial_entries ; unsigned int hook_entry [ NF_INET_NUMHOOKS ] ; unsigned int underflow [ NF_INET_NUMHOOKS ] ; void * entries [ 1 ] ; } 
s#xt_table struct xt_table { s#list_head list ; unsigned int valid_hooks ; s#xt_table_info * private ; s#module * me ; t#u_int8_t af ; const char name [ 32 ] ; } 
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_statistics
s##fib6_table
s##ip_conntrack_stat
s##net_generic
ebt_register_table extern s#ebt_table * ebt_register_table ( s#net * , const s#ebt_table * ) 
ebt_unregister_table extern void ebt_unregister_table ( s#ebt_table * ) 
ebt_do_table extern unsigned int ebt_do_table ( unsigned int , s#sk_buff * , const s#net_device * , const s#net_device * , s#ebt_table * ) 

/* net/can/af_can.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
can_send extern int can_send ( s#sk_buff * , int ) 
t#canid_t typedef t#__u32 canid_t 
can_rx_register extern int can_rx_register ( s#net_device * , t#canid_t , t#canid_t , void ( * ) ( s#sk_buff * , void * ) , void * , char * ) 
can_rx_unregister extern void can_rx_unregister ( s#net_device * , t#canid_t , t#canid_t , void ( * ) ( s#sk_buff * , void * ) , void * ) 
s#can_proto struct can_proto { int type ; int protocol ; int capability ; s#proto_ops * ops ; s#proto * prot ; } 
can_proto_register extern int can_proto_register ( s#can_proto * ) 
can_proto_unregister extern void can_proto_unregister ( s#can_proto * ) 

/* net/compat.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##iw_handler_def
s##iw_public_data
s##sec_path
s##tvec_base
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
compat_sock_get_timestamp extern int compat_sock_get_timestamp ( s#sock * , s#timeval * ) 
compat_sock_get_timestampns extern int compat_sock_get_timestampns ( s#sock * , s#timespec * ) 
compat_mc_setsockopt extern int compat_mc_setsockopt ( s#sock * , int , int , char * , unsigned int , int ( * ) ( s#sock * , int , int , char * , unsigned int ) ) 
compat_mc_getsockopt extern int compat_mc_getsockopt ( s#sock * , int , int , char * , int * , int ( * ) ( s#sock * , int , int , char * , int * ) ) 

/* net/core/datagram.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
__skb_recv_datagram extern s#sk_buff * __skb_recv_datagram ( s#sock * , unsigned , int * , int * ) 
skb_free_datagram extern void skb_free_datagram ( s#sock * , s#sk_buff * ) 
skb_free_datagram_locked extern void skb_free_datagram_locked ( s#sock * , s#sk_buff * ) 
skb_kill_datagram extern int skb_kill_datagram ( s#sock * , s#sk_buff * , unsigned int ) 
skb_copy_datagram_const_iovec extern int skb_copy_datagram_const_iovec ( const s#sk_buff * , int , const s#iovec * , int , int ) 
skb_copy_datagram_from_iovec extern int skb_copy_datagram_from_iovec ( s#sk_buff * , int , const s#iovec * , int , int ) 
__skb_checksum_complete_head extern t#__sum16 __skb_checksum_complete_head ( s#sk_buff * , int ) 
__skb_checksum_complete extern t#__sum16 __skb_checksum_complete ( s#sk_buff * ) 
datagram_poll extern unsigned int datagram_poll ( s#file * , s#socket * , s#poll_table_struct * ) 
skb_copy_and_csum_datagram_iovec extern int skb_copy_and_csum_datagram_iovec ( s#sk_buff * , int , s#iovec * ) 
skb_copy_datagram_iovec extern int skb_copy_datagram_iovec ( const s#sk_buff * , int , s#iovec * , int ) 
skb_recv_datagram extern s#sk_buff * skb_recv_datagram ( s#sock * , unsigned , int , int * ) 

/* net/core/dev.o */
dev_base_lock extern t#rwlock_t dev_base_lock 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##libipw_device
s##wireless_dev
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##tcf_walker
s#softnet_data struct softnet_data { s#Qdisc * output_queue ; s#sk_buff_head input_pkt_queue ; s#list_head poll_list ; s#sk_buff * completion_queue ; s#napi_struct backlog ; } 
per_cpu__softnet_data extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( s#softnet_data ) per_cpu__softnet_data 
dev_add_pack extern void dev_add_pack ( s#packet_type * ) 
__dev_remove_pack extern void __dev_remove_pack ( s#packet_type * ) 
dev_remove_pack extern void dev_remove_pack ( s#packet_type * ) 
netdev_boot_setup_check extern int netdev_boot_setup_check ( s#net_device * ) 
__dev_get_by_name extern s#net_device * __dev_get_by_name ( s#net * , const char * ) 
dev_get_by_name extern s#net_device * dev_get_by_name ( s#net * , const char * ) 
__dev_get_by_index extern s#net_device * __dev_get_by_index ( s#net * , int ) 
dev_get_by_index extern s#net_device * dev_get_by_index ( s#net * , int ) 
dev_getbyhwaddr extern s#net_device * dev_getbyhwaddr ( s#net * , unsigned short , char * ) 
__dev_getfirstbyhwtype extern s#net_device * __dev_getfirstbyhwtype ( s#net * , unsigned short ) 
dev_getfirstbyhwtype extern s#net_device * dev_getfirstbyhwtype ( s#net * , unsigned short ) 
dev_get_by_flags extern s#net_device * dev_get_by_flags ( s#net * , unsigned short , unsigned short ) 
dev_valid_name extern int dev_valid_name ( const char * ) 
dev_alloc_name extern int dev_alloc_name ( s#net_device * , const char * ) 
netdev_features_change extern void netdev_features_change ( s#net_device * ) 
netdev_state_change extern void netdev_state_change ( s#net_device * ) 
netdev_bonding_change extern void netdev_bonding_change ( s#net_device * , unsigned long ) 
dev_load extern void dev_load ( s#net * , const char * ) 
dev_open extern int dev_open ( s#net_device * ) 
dev_close extern int dev_close ( s#net_device * ) 
dev_disable_lro extern void dev_disable_lro ( s#net_device * ) 
register_netdevice_notifier extern int register_netdevice_notifier ( s#notifier_block * ) 
unregister_netdevice_notifier extern int unregister_netdevice_notifier ( s#notifier_block * ) 
net_enable_timestamp extern void net_enable_timestamp ( void ) 
net_disable_timestamp extern void net_disable_timestamp ( void ) 
__netif_schedule extern void __netif_schedule ( s#Qdisc * ) 
dev_kfree_skb_irq extern void dev_kfree_skb_irq ( s#sk_buff * ) 
dev_kfree_skb_any extern void dev_kfree_skb_any ( s#sk_buff * ) 
netif_device_detach extern void netif_device_detach ( s#net_device * ) 
netif_device_attach extern void netif_device_attach ( s#net_device * ) 
skb_checksum_help extern int skb_checksum_help ( s#sk_buff * ) 
skb_gso_segment extern s#sk_buff * skb_gso_segment ( s#sk_buff * , int ) 
netdev_rx_csum_fault extern void netdev_rx_csum_fault ( s#net_device * ) 
skb_tx_hash extern t#u16 skb_tx_hash ( const s#net_device * , const s#sk_buff * ) 
dev_queue_xmit extern int dev_queue_xmit ( s#sk_buff * ) 
netif_rx extern int netif_rx ( s#sk_buff * ) 
netif_rx_ni extern int netif_rx_ni ( s#sk_buff * ) 
br_fdb_test_addr_hook int ( * br_fdb_test_addr_hook ) ( s#net_device * , unsigned char * ) 
br_handle_frame_hook extern s#sk_buff * ( * br_handle_frame_hook ) ( s#net_bridge_port * , s#sk_buff * ) 
macvlan_handle_frame_hook extern s#sk_buff * ( * macvlan_handle_frame_hook ) ( s#sk_buff * ) 
netif_receive_skb extern int netif_receive_skb ( s#sk_buff * ) 
napi_gro_flush extern void napi_gro_flush ( s#napi_struct * ) 
dev_gro_receive extern int dev_gro_receive ( s#napi_struct * , s#sk_buff * ) 
napi_skb_finish extern int napi_skb_finish ( int , s#sk_buff * ) 
skb_gro_reset_offset extern void skb_gro_reset_offset ( s#sk_buff * ) 
napi_gro_receive extern int napi_gro_receive ( s#napi_struct * , s#sk_buff * ) 
napi_reuse_skb extern void napi_reuse_skb ( s#napi_struct * , s#sk_buff * ) 
napi_get_frags extern s#sk_buff * napi_get_frags ( s#napi_struct * ) 
napi_frags_finish extern int napi_frags_finish ( s#napi_struct * , s#sk_buff * , int ) 
napi_frags_skb extern s#sk_buff * napi_frags_skb ( s#napi_struct * ) 
napi_gro_frags extern int napi_gro_frags ( s#napi_struct * ) 
__napi_schedule extern void __napi_schedule ( s#napi_struct * ) 
__napi_complete extern void __napi_complete ( s#napi_struct * ) 
napi_complete extern void napi_complete ( s#napi_struct * ) 
netif_napi_add void netif_napi_add ( s#net_device * , s#napi_struct * , int ( * ) ( s#napi_struct * , int ) , int ) 
netif_napi_del void netif_napi_del ( s#napi_struct * ) 
t#gifconf_func_t typedef int gifconf_func_t ( s#net_device * , char * , int ) 
register_gifconf extern int register_gifconf ( unsigned int , t#gifconf_func_t * ) 
netdev_set_master extern int netdev_set_master ( s#net_device * , s#net_device * ) 
dev_set_promiscuity extern int dev_set_promiscuity ( s#net_device * , int ) 
dev_set_allmulti extern int dev_set_allmulti ( s#net_device * , int ) 
dev_addr_add extern int dev_addr_add ( s#net_device * , unsigned char * , unsigned char ) 
dev_addr_del extern int dev_addr_del ( s#net_device * , unsigned char * , unsigned char ) 
dev_addr_add_multiple extern int dev_addr_add_multiple ( s#net_device * , s#net_device * , unsigned char ) 
dev_addr_del_multiple extern int dev_addr_del_multiple ( s#net_device * , s#net_device * , unsigned char ) 
dev_unicast_delete extern int dev_unicast_delete ( s#net_device * , void * ) 
dev_unicast_add extern int dev_unicast_add ( s#net_device * , void * ) 
__dev_addr_sync extern int __dev_addr_sync ( s#dev_addr_list * * , int * , s#dev_addr_list * * , int * ) 
__dev_addr_unsync extern void __dev_addr_unsync ( s#dev_addr_list * * , int * , s#dev_addr_list * * , int * ) 
dev_unicast_sync extern int dev_unicast_sync ( s#net_device * , s#net_device * ) 
dev_unicast_unsync extern void dev_unicast_unsync ( s#net_device * , s#net_device * ) 
dev_get_flags extern unsigned dev_get_flags ( const s#net_device * ) 
dev_change_flags extern int dev_change_flags ( s#net_device * , unsigned ) 
dev_set_mtu extern int dev_set_mtu ( s#net_device * , int ) 
dev_set_mac_address extern int dev_set_mac_address ( s#net_device * , s#sockaddr * ) 
netdev_fix_features unsigned long netdev_fix_features ( unsigned long , const char * ) 
register_netdevice extern int register_netdevice ( s#net_device * ) 
init_dummy_netdev extern int init_dummy_netdev ( s#net_device * ) 
register_netdev extern int register_netdev ( s#net_device * ) 
dev_get_stats extern const s#net_device_stats * dev_get_stats ( s#net_device * ) 
alloc_netdev_mq extern s#net_device * alloc_netdev_mq ( int , const char * , void ( * ) ( s#net_device * ) , unsigned int ) 
free_netdev extern void free_netdev ( s#net_device * ) 
synchronize_net extern void synchronize_net ( void ) 
unregister_netdevice extern void unregister_netdevice ( s#net_device * ) 
unregister_netdev extern void unregister_netdev ( s#net_device * ) 
dev_change_net_namespace extern int dev_change_net_namespace ( s#net_device * , s#net * , const char * ) 
netdev_increment_features unsigned long netdev_increment_features ( unsigned long , unsigned long , unsigned long ) 

/* net/core/dev_mcast.o */
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
dev_mc_sync extern int dev_mc_sync ( s#net_device * , s#net_device * ) 
dev_mc_unsync extern void dev_mc_unsync ( s#net_device * , s#net_device * ) 
dev_mc_add extern int dev_mc_add ( s#net_device * , void * , int , int ) 
dev_mc_delete extern int dev_mc_delete ( s#net_device * , void * , int , int ) 

/* net/core/dst.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
dst_discard extern int dst_discard ( s#sk_buff * ) 
dst_release extern void dst_release ( s#dst_entry * ) 
__dst_free extern void __dst_free ( s#dst_entry * ) 
dst_alloc extern void * dst_alloc ( s#dst_ops * ) 
dst_destroy extern s#dst_entry * dst_destroy ( s#dst_entry * ) 

/* net/core/ethtool.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
ethtool_op_get_rx_csum t#u32 ethtool_op_get_rx_csum ( s#net_device * ) 
ethtool_op_get_tx_csum t#u32 ethtool_op_get_tx_csum ( s#net_device * ) 
ethtool_op_get_link t#u32 ethtool_op_get_link ( s#net_device * ) 
ethtool_op_get_sg t#u32 ethtool_op_get_sg ( s#net_device * ) 
ethtool_op_get_tso t#u32 ethtool_op_get_tso ( s#net_device * ) 
ethtool_op_set_sg int ethtool_op_set_sg ( s#net_device * , t#u32 ) 
ethtool_op_set_tso int ethtool_op_set_tso ( s#net_device * , t#u32 ) 
ethtool_op_set_tx_csum int ethtool_op_set_tx_csum ( s#net_device * , t#u32 ) 
ethtool_op_set_tx_hw_csum int ethtool_op_set_tx_hw_csum ( s#net_device * , t#u32 ) 
ethtool_op_set_tx_ipv6_csum int ethtool_op_set_tx_ipv6_csum ( s#net_device * , t#u32 ) 
ethtool_op_set_ufo int ethtool_op_set_ufo ( s#net_device * , t#u32 ) 
ethtool_op_get_ufo t#u32 ethtool_op_get_ufo ( s#net_device * ) 
ethtool_op_set_flags int ethtool_op_set_flags ( s#net_device * , t#u32 ) 
ethtool_op_get_flags t#u32 ethtool_op_get_flags ( s#net_device * ) 

/* net/core/fib_rules.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##rtable
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s#fib_rule struct fib_rule { s#list_head list ; t#atomic_t refcnt ; int ifindex ; char ifname [ 16 ] ; t#u32 mark ; t#u32 mark_mask ; t#u32 pref ; t#u32 flags ; t#u32 table ; t#u8 action ; t#u32 target ; s#fib_rule * ctarget ; s#rcu_head rcu ; s#net * fr_net ; } 
s#fib_lookup_arg struct fib_lookup_arg { void * lookup_ptr ; void * result ; s#fib_rule * rule ; } 
s#fib_rule_hdr struct fib_rule_hdr { t#__u8 family ; t#__u8 dst_len ; t#__u8 src_len ; t#__u8 tos ; t#__u8 table ; t#__u8 res1 ; t#__u8 res2 ; t#__u8 action ; t#__u32 flags ; } 
s#fib_rules_ops struct fib_rules_ops { int family ; s#list_head list ; int rule_size ; int addr_size ; int unresolved_rules ; int nr_goto_rules ; int ( * action ) ( s#fib_rule * , s#flowi * , int , s#fib_lookup_arg * ) ; int ( * match ) ( s#fib_rule * , s#flowi * , int ) ; int ( * configure ) ( s#fib_rule * , s#sk_buff * , s#fib_rule_hdr * , s#nlattr * * ) ; int ( * compare ) ( s#fib_rule * , s#fib_rule_hdr * , s#nlattr * * ) ; int ( * fill ) ( s#fib_rule * , s#sk_buff * , s#fib_rule_hdr * ) ; t#u32 ( * default_pref ) ( s#fib_rules_ops * ) ; t#size_t ( * nlmsg_payload ) ( s#fib_rule * ) ; void ( * flush_cache ) ( s#fib_rules_ops * ) ; int nlgroup ; const s#nla_policy * policy ; s#list_head rules_list ; s#module * owner ; s#net * fro_net ; } 
fib_default_rule_add extern int fib_default_rule_add ( s#fib_rules_ops * , t#u32 , t#u32 , t#u32 ) 
fib_rules_register extern int fib_rules_register ( s#fib_rules_ops * ) 
fib_rules_cleanup_ops extern void fib_rules_cleanup_ops ( s#fib_rules_ops * ) 
fib_rules_unregister extern void fib_rules_unregister ( s#fib_rules_ops * ) 
fib_rules_lookup extern int fib_rules_lookup ( s#fib_rules_ops * , s#flowi * , int , s#fib_lookup_arg * ) 

/* net/core/filter.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
sk_filter extern int sk_filter ( s#sock * , s#sk_buff * ) 
sk_run_filter extern unsigned int sk_run_filter ( s#sk_buff * , s#sock_filter * , int ) 
sk_chk_filter extern int sk_chk_filter ( s#sock_filter * , int ) 

/* net/core/flow.o */
flow_cache_genid extern t#atomic_t flow_cache_genid 
s##net
t#flow_resolve_t typedef int ( * flow_resolve_t ) ( s#net * , s#flowi * , t#u16 , t#u8 , void * * , t#atomic_t * * ) 
flow_cache_lookup extern void * flow_cache_lookup ( s#net * , s#flowi * , t#u16 , t#u8 , t#flow_resolve_t ) 

/* net/core/gen_estimator.o */
gen_new_estimator extern int gen_new_estimator ( s#gnet_stats_basic_packed * , s#gnet_stats_rate_est * , t#spinlock_t * , s#nlattr * ) 
gen_kill_estimator extern void gen_kill_estimator ( s#gnet_stats_basic_packed * , s#gnet_stats_rate_est * ) 
gen_replace_estimator extern int gen_replace_estimator ( s#gnet_stats_basic_packed * , s#gnet_stats_rate_est * , t#spinlock_t * , s#nlattr * ) 
gen_estimator_active extern t#bool gen_estimator_active ( const s#gnet_stats_basic_packed * , const s#gnet_stats_rate_est * ) 

/* net/core/gen_stats.o */
s##sock
s##net_device
s##sec_path
gnet_stats_start_copy extern int gnet_stats_start_copy ( s#sk_buff * , int , t#spinlock_t * , s#gnet_dump * ) 
gnet_stats_start_copy_compat extern int gnet_stats_start_copy_compat ( s#sk_buff * , int , int , int , t#spinlock_t * , s#gnet_dump * ) 
gnet_stats_copy_basic extern int gnet_stats_copy_basic ( s#gnet_dump * , s#gnet_stats_basic_packed * ) 
gnet_stats_copy_rate_est extern int gnet_stats_copy_rate_est ( s#gnet_dump * , s#gnet_stats_rate_est * ) 
gnet_stats_copy_queue extern int gnet_stats_copy_queue ( s#gnet_dump * , s#gnet_stats_queue * ) 
gnet_stats_copy_app extern int gnet_stats_copy_app ( s#gnet_dump * , void * , int ) 
gnet_stats_finish_copy extern int gnet_stats_finish_copy ( s#gnet_dump * ) 

/* net/core/iovec.o */
csum_partial_copy_fromiovecend extern int csum_partial_copy_fromiovecend ( unsigned char * , s#iovec * , int , unsigned int , t#__wsum * ) 
memcpy_fromiovec extern int memcpy_fromiovec ( unsigned char * , s#iovec * , int ) 
memcpy_fromiovecend extern int memcpy_fromiovecend ( unsigned char * , const s#iovec * , int , int ) 
memcpy_toiovec extern int memcpy_toiovec ( s#iovec * , unsigned char * , int ) 
memcpy_toiovecend extern int memcpy_toiovecend ( const s#iovec * , unsigned char * , int , int ) 

/* net/core/link_watch.o */
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##tcf_walker
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
linkwatch_fire_event extern void linkwatch_fire_event ( s#net_device * ) 

/* net/core/neighbour.o */
neigh_rand_reach_time extern unsigned long neigh_rand_reach_time ( unsigned long ) 
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
neigh_changeaddr extern void neigh_changeaddr ( s#neigh_table * , s#net_device * ) 
neigh_ifdown extern int neigh_ifdown ( s#neigh_table * , s#net_device * ) 
neigh_lookup extern s#neighbour * neigh_lookup ( s#neigh_table * , const void * , s#net_device * ) 
neigh_lookup_nodev extern s#neighbour * neigh_lookup_nodev ( s#neigh_table * , s#net * , const void * ) 
neigh_create extern s#neighbour * neigh_create ( s#neigh_table * , const void * , s#net_device * ) 
__pneigh_lookup extern s#pneigh_entry * __pneigh_lookup ( s#neigh_table * , s#net * , const void * , s#net_device * ) 
pneigh_lookup extern s#pneigh_entry * pneigh_lookup ( s#neigh_table * , s#net * , const void * , s#net_device * , int ) 
neigh_destroy extern void neigh_destroy ( s#neighbour * ) 
__neigh_event_send extern int __neigh_event_send ( s#neighbour * , s#sk_buff * ) 
neigh_update extern int neigh_update ( s#neighbour * , const t#u8 * , t#u8 , t#u32 ) 
neigh_event_ns extern s#neighbour * neigh_event_ns ( s#neigh_table * , t#u8 * , void * , s#net_device * ) 
neigh_compat_output extern int neigh_compat_output ( s#sk_buff * ) 
neigh_resolve_output extern int neigh_resolve_output ( s#sk_buff * ) 
neigh_connected_output extern int neigh_connected_output ( s#sk_buff * ) 
pneigh_enqueue extern void pneigh_enqueue ( s#neigh_table * , s#neigh_parms * , s#sk_buff * ) 
neigh_parms_alloc extern s#neigh_parms * neigh_parms_alloc ( s#net_device * , s#neigh_table * ) 
neigh_parms_release extern void neigh_parms_release ( s#neigh_table * , s#neigh_parms * ) 
neigh_table_init_no_netlink extern void neigh_table_init_no_netlink ( s#neigh_table * ) 
neigh_table_init extern void neigh_table_init ( s#neigh_table * ) 
neigh_table_clear extern int neigh_table_clear ( s#neigh_table * ) 
neigh_for_each extern void neigh_for_each ( s#neigh_table * , void ( * ) ( s#neighbour * , void * ) , void * ) 
__neigh_for_each_release extern void __neigh_for_each_release ( s#neigh_table * , int ( * ) ( s#neighbour * ) ) 
neigh_seq_start extern void * neigh_seq_start ( s#seq_file * , t#loff_t * , s#neigh_table * , unsigned int ) 
neigh_seq_next extern void * neigh_seq_next ( s#seq_file * , void * , t#loff_t * ) 
neigh_seq_stop extern void neigh_seq_stop ( s#seq_file * , void * ) 
neigh_sysctl_register extern int neigh_sysctl_register ( s#net_device * , s#neigh_parms * , int , int , char * , t#proc_handler * , t#ctl_handler * ) 
neigh_sysctl_unregister extern void neigh_sysctl_unregister ( s#neigh_parms * ) 

/* net/core/net-sysfs.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
netdev_class_create_file extern int netdev_class_create_file ( s#class_attribute * ) 
netdev_class_remove_file extern void netdev_class_remove_file ( s#class_attribute * ) 

/* net/core/net-traces.o */
__tracepoint_kfree_skb extern s#tracepoint __tracepoint_kfree_skb 
__tracepoint_napi_poll s#tracepoint __tracepoint_napi_poll __attribute__ ( ( section ( "__tracepoints" ) , aligned ( 32 ) ) ) 

/* net/core/net_namespace.o */
net_namespace_list extern s#list_head net_namespace_list 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##net_device
s##sock
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##sec_path
s##ebt_table
s##ip_conntrack_stat
init_net extern s#net init_net 
__put_net extern void __put_net ( s#net * ) 
get_net_ns_by_pid extern s#net * get_net_ns_by_pid ( t#pid_t ) 
s#pernet_operations struct pernet_operations { s#list_head list ; int ( * init ) ( s#net * ) ; void ( * exit ) ( s#net * ) ; } 
register_pernet_subsys extern int register_pernet_subsys ( s#pernet_operations * ) 
unregister_pernet_subsys extern void unregister_pernet_subsys ( s#pernet_operations * ) 
register_pernet_gen_subsys extern int register_pernet_gen_subsys ( int * , s#pernet_operations * ) 
unregister_pernet_gen_subsys extern void unregister_pernet_gen_subsys ( int , s#pernet_operations * ) 
register_pernet_device extern int register_pernet_device ( s#pernet_operations * ) 
register_pernet_gen_device extern int register_pernet_gen_device ( int * , s#pernet_operations * ) 
unregister_pernet_device extern void unregister_pernet_device ( s#pernet_operations * ) 
unregister_pernet_gen_device extern void unregister_pernet_gen_device ( int , s#pernet_operations * ) 
net_assign_generic extern int net_assign_generic ( s#net * , int , void * ) 

/* net/core/netevent.o */
register_netevent_notifier extern int register_netevent_notifier ( s#notifier_block * ) 
unregister_netevent_notifier extern int unregister_netevent_notifier ( s#notifier_block * ) 
call_netevent_notifiers extern int call_netevent_notifiers ( unsigned long , void * ) 

/* net/core/netpoll.o */
netpoll_set_trap void netpoll_set_trap ( int ) 
netpoll_trap extern int netpoll_trap ( void ) 
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s#udp_hslot struct udp_hslot { s#hlist_nulls_head head ; t#spinlock_t lock ; } 
s#udp_table struct udp_table { s#udp_hslot hash [ 128 ] ; } 
s##raw_hashinfo
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##ip_mc_list
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
netpoll_print_options void netpoll_print_options ( s#netpoll * ) 
netpoll_parse_options int netpoll_parse_options ( s#netpoll * , char * ) 
netpoll_setup int netpoll_setup ( s#netpoll * ) 
netpoll_cleanup void netpoll_cleanup ( s#netpoll * ) 
netpoll_send_udp void netpoll_send_udp ( s#netpoll * , const char * , int ) 
netpoll_poll void netpoll_poll ( s#netpoll * ) 

/* net/core/rtnetlink.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##tcf_walker
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
t#rtnl_doit_func typedef int ( * rtnl_doit_func ) ( s#sk_buff * , s#nlmsghdr * , void * ) 
s#netlink_callback struct netlink_callback { s#sk_buff * skb ; const s#nlmsghdr * nlh ; int ( * dump ) ( s#sk_buff * , s#netlink_callback * ) ; int ( * done ) ( s#netlink_callback * ) ; int family ; long args [ 6 ] ; } 
t#rtnl_dumpit_func typedef int ( * rtnl_dumpit_func ) ( s#sk_buff * , s#netlink_callback * ) 
__rtnl_register extern int __rtnl_register ( int , int , t#rtnl_doit_func , t#rtnl_dumpit_func ) 
rtnl_register extern void rtnl_register ( int , int , t#rtnl_doit_func , t#rtnl_dumpit_func ) 
rtnl_unregister extern int rtnl_unregister ( int , int ) 
rtnl_unregister_all extern void rtnl_unregister_all ( int ) 
__rtnl_link_register extern int __rtnl_link_register ( s#rtnl_link_ops * ) 
rtnl_link_register extern int rtnl_link_register ( s#rtnl_link_ops * ) 
rtnl_kill_links extern void rtnl_kill_links ( s#net * , s#rtnl_link_ops * ) 
__rtnl_link_unregister extern void __rtnl_link_unregister ( s#rtnl_link_ops * ) 
rtnl_link_unregister extern void rtnl_link_unregister ( s#rtnl_link_ops * ) 
rtnl_put_cacheinfo extern int rtnl_put_cacheinfo ( s#sk_buff * , s#dst_entry * , t#u32 , t#u32 , t#u32 , long , t#u32 ) 
__rta_fill extern void __rta_fill ( s#sk_buff * , int , int , const void * ) 
rtnetlink_put_metrics extern int rtnetlink_put_metrics ( s#sk_buff * , t#u32 * ) 
rtnl_lock extern void rtnl_lock ( void ) 
rtnl_trylock extern int rtnl_trylock ( void ) 
rtnl_unlock extern void rtnl_unlock ( void ) 
rtnl_is_locked extern int rtnl_is_locked ( void ) 
rtnl_unicast extern int rtnl_unicast ( s#sk_buff * , s#net * , t#u32 ) 
rtnl_notify extern void rtnl_notify ( s#sk_buff * , s#net * , t#u32 , t#u32 , s#nlmsghdr * , t#gfp_t ) 
rtnl_set_sk_err extern void rtnl_set_sk_err ( s#net * , t#u32 , int ) 
rtnl_create_link extern s#net_device * rtnl_create_link ( s#net * , char * , const s#rtnl_link_ops * , s#nlattr * [ ] ) 
ifla_policy extern const s#nla_policy ifla_policy [ ( __IFLA_MAX - 1 ) + 1 ] 

/* net/core/scm.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##iw_handler_def
s##iw_public_data
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##rtable
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s#scm_fp_list struct scm_fp_list { s#list_head list ; int count ; s#file * fp [ 255 ] ; } 
s#scm_cookie struct scm_cookie { s#ucred creds ; s#scm_fp_list * fp ; t#u32 secid ; } 
__scm_destroy extern void __scm_destroy ( s#scm_cookie * ) 
__scm_send extern int __scm_send ( s#socket * , s#msghdr * , s#scm_cookie * ) 
put_cmsg extern int put_cmsg ( s#msghdr * , int , int , int , void * ) 
scm_detach_fds extern void scm_detach_fds ( s#msghdr * , s#scm_cookie * ) 
scm_fp_dup extern s#scm_fp_list * scm_fp_dup ( s#scm_fp_list * ) 

/* net/core/skb_dma_map.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##address_space
s##array_cache
s##kmem_list3
s##class_private
s##sock
s##net_device
s##sec_path
skb_dma_map extern int skb_dma_map ( s#device * , s#sk_buff * , e#dma_data_direction ) 
skb_dma_unmap extern void skb_dma_unmap ( s#device * , s#sk_buff * , e#dma_data_direction ) 

/* net/core/skbuff.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##tcf_walker
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
t#xfrm_address_t typedef union { t#__be32 a4 ; t#__be32 a6 [ 4 ] ; } xfrm_address_t 
s#xfrm_id struct xfrm_id { t#xfrm_address_t daddr ; t#__be32 spi ; t#__u8 proto ; } 
s#xfrm_selector struct xfrm_selector { t#xfrm_address_t daddr ; t#xfrm_address_t saddr ; t#__be16 dport ; t#__be16 dport_mask ; t#__be16 sport ; t#__be16 sport_mask ; t#__u16 family ; t#__u8 prefixlen_d ; t#__u8 prefixlen_s ; t#__u8 proto ; int ifindex ; t#__kernel_uid32_t user ; } 
s#xfrm_state_walk struct xfrm_state_walk { s#list_head all ; t#u8 state ; union { t#u8 dying ; t#u8 proto ; } ; t#u32 seq ; } 
s#xfrm_lifetime_cfg struct xfrm_lifetime_cfg { t#__u64 soft_byte_limit ; t#__u64 hard_byte_limit ; t#__u64 soft_packet_limit ; t#__u64 hard_packet_limit ; t#__u64 soft_add_expires_seconds ; t#__u64 hard_add_expires_seconds ; t#__u64 soft_use_expires_seconds ; t#__u64 hard_use_expires_seconds ; } 
s#xfrm_algo struct xfrm_algo { char alg_name [ 64 ] ; unsigned int alg_key_len ; char alg_key [ 0 ] ; } 
s#xfrm_algo_aead struct xfrm_algo_aead { char alg_name [ 64 ] ; unsigned int alg_key_len ; unsigned int alg_icv_len ; char alg_key [ 0 ] ; } 
s#xfrm_encap_tmpl struct xfrm_encap_tmpl { t#__u16 encap_type ; t#__be16 encap_sport ; t#__be16 encap_dport ; t#xfrm_address_t encap_oa ; } 
s#xfrm_replay_state struct xfrm_replay_state { t#__u32 oseq ; t#__u32 seq ; t#__u32 bitmap ; } 
s#xfrm_stats struct xfrm_stats { t#__u32 replay_window ; t#__u32 replay ; t#__u32 integrity_failed ; } 
s#xfrm_lifetime_cur struct xfrm_lifetime_cur { t#__u64 bytes ; t#__u64 packets ; t#__u64 add_time ; t#__u64 use_time ; } 
s#xfrm_type struct xfrm_type { char * description ; s#module * owner ; t#__u8 proto ; t#__u8 flags ; int ( * init_state ) ( s#xfrm_state * ) ; void ( * destructor ) ( s#xfrm_state * ) ; int ( * input ) ( s#xfrm_state * , s#sk_buff * ) ; int ( * output ) ( s#xfrm_state * , s#sk_buff * ) ; int ( * reject ) ( s#xfrm_state * , s#sk_buff * , s#flowi * ) ; int ( * hdr_offset ) ( s#xfrm_state * , s#sk_buff * , t#u8 * * ) ; t#u32 ( * get_mtu ) ( s#xfrm_state * , int ) ; } 
s#xfrm_tmpl struct xfrm_tmpl { s#xfrm_id id ; t#xfrm_address_t saddr ; unsigned short encap_family ; t#__u32 reqid ; t#__u8 mode ; t#__u8 share ; t#__u8 optional ; t#__u8 allalgs ; t#__u32 aalgos ; t#__u32 ealgos ; t#__u32 calgos ; } 
s#xfrm_state_afinfo struct xfrm_state_afinfo { unsigned int family ; unsigned int proto ; t#__be16 eth_proto ; s#module * owner ; const s#xfrm_type * type_map [ IPPROTO_MAX ] ; s#xfrm_mode * mode_map [ 5 ] ; int ( * init_flags ) ( s#xfrm_state * ) ; void ( * init_tempsel ) ( s#xfrm_state * , s#flowi * , s#xfrm_tmpl * , t#xfrm_address_t * , t#xfrm_address_t * ) ; int ( * tmpl_sort ) ( s#xfrm_tmpl * * , s#xfrm_tmpl * * , int ) ; int ( * state_sort ) ( s#xfrm_state * * , s#xfrm_state * * , int ) ; int ( * output ) ( s#sk_buff * ) ; int ( * extract_input ) ( s#xfrm_state * , s#sk_buff * ) ; int ( * extract_output ) ( s#xfrm_state * , s#sk_buff * ) ; int ( * transport_finish ) ( s#sk_buff * , int ) ; } 
s#xfrm_mode struct xfrm_mode { int ( * input2 ) ( s#xfrm_state * , s#sk_buff * ) ; int ( * input ) ( s#xfrm_state * , s#sk_buff * ) ; int ( * output2 ) ( s#xfrm_state * , s#sk_buff * ) ; int ( * output ) ( s#xfrm_state * , s#sk_buff * ) ; s#xfrm_state_afinfo * afinfo ; s#module * owner ; unsigned int encap ; int flags ; } 
s#xfrm_sec_ctx struct xfrm_sec_ctx { t#__u8 ctx_doi ; t#__u8 ctx_alg ; t#__u16 ctx_len ; t#__u32 ctx_sid ; char ctx_str [ 0 ] ; } 
s#xfrm_state struct xfrm_state { s#net * xs_net ; union { s#hlist_node gclist ; s#hlist_node bydst ; } ; s#hlist_node bysrc ; s#hlist_node byspi ; t#atomic_t refcnt ; t#spinlock_t lock ; s#xfrm_id id ; s#xfrm_selector sel ; t#u32 genid ; s#xfrm_state_walk km ; struct { t#u32 reqid ; t#u8 mode ; t#u8 replay_window ; t#u8 aalgo , ealgo , calgo ; t#u8 flags ; t#u16 family ; t#xfrm_address_t saddr ; int header_len ; int trailer_len ; } props ; s#xfrm_lifetime_cfg lft ; s#xfrm_algo * aalg ; s#xfrm_algo * ealg ; s#xfrm_algo * calg ; s#xfrm_algo_aead * aead ; s#xfrm_encap_tmpl * encap ; t#xfrm_address_t * coaddr ; s#xfrm_state * tunnel ; t#atomic_t tunnel_users ; s#xfrm_replay_state replay ; s#xfrm_replay_state preplay ; t#u32 xflags ; t#u32 replay_maxage ; t#u32 replay_maxdiff ; s#timer_list rtimer ; s#xfrm_stats stats ; s#xfrm_lifetime_cur curlft ; s#timer_list timer ; unsigned long lastused ; const s#xfrm_type * type ; s#xfrm_mode * inner_mode ; s#xfrm_mode * inner_mode_iaf ; s#xfrm_mode * outer_mode ; s#xfrm_sec_ctx * security ; void * data ; } 
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s#xfrm_policy_walk_entry struct xfrm_policy_walk_entry { s#list_head all ; t#u8 dead ; } 
s#xfrm_policy struct xfrm_policy { s#net * xp_net ; s#hlist_node bydst ; s#hlist_node byidx ; t#rwlock_t lock ; t#atomic_t refcnt ; s#timer_list timer ; t#u32 priority ; t#u32 index ; s#xfrm_selector selector ; s#xfrm_lifetime_cfg lft ; s#xfrm_lifetime_cur curlft ; s#dst_entry * bundles ; s#xfrm_policy_walk_entry walk ; t#u8 type ; t#u8 action ; t#u8 flags ; t#u8 xfrm_nr ; t#u16 family ; s#xfrm_sec_ctx * security ; s#xfrm_tmpl xfrm_vec [ 6 ] ; } 
s#sec_path struct sec_path { t#atomic_t refcnt ; int len ; s#xfrm_state * xvec [ 6 ] ; } 
skb_over_panic extern void skb_over_panic ( s#sk_buff * , int , void * ) 
skb_under_panic extern void skb_under_panic ( s#sk_buff * , int , void * ) 
__alloc_skb extern s#sk_buff * __alloc_skb ( unsigned int , t#gfp_t , int , int ) 
__netdev_alloc_skb extern s#sk_buff * __netdev_alloc_skb ( s#net_device * , unsigned int , t#gfp_t ) 
__netdev_alloc_page extern s#page * __netdev_alloc_page ( s#net_device * , t#gfp_t ) 
__netdev_free_page extern void __netdev_free_page ( s#net_device * , s#page * ) 
skb_add_rx_frag extern void skb_add_rx_frag ( s#sk_buff * , int , s#page * , int , int ) 
dev_alloc_skb extern s#sk_buff * dev_alloc_skb ( unsigned int ) 
__kfree_skb extern void __kfree_skb ( s#sk_buff * ) 
kfree_skb extern void kfree_skb ( s#sk_buff * ) 
consume_skb extern void consume_skb ( s#sk_buff * ) 
skb_recycle_check extern int skb_recycle_check ( s#sk_buff * , int ) 
skb_morph extern s#sk_buff * skb_morph ( s#sk_buff * , s#sk_buff * ) 
skb_clone extern s#sk_buff * skb_clone ( s#sk_buff * , t#gfp_t ) 
skb_copy extern s#sk_buff * skb_copy ( const s#sk_buff * , t#gfp_t ) 
pskb_copy extern s#sk_buff * pskb_copy ( s#sk_buff * , t#gfp_t ) 
pskb_expand_head extern int pskb_expand_head ( s#sk_buff * , int , int , t#gfp_t ) 
skb_realloc_headroom extern s#sk_buff * skb_realloc_headroom ( s#sk_buff * , unsigned int ) 
skb_copy_expand extern s#sk_buff * skb_copy_expand ( const s#sk_buff * , int , int , t#gfp_t ) 
skb_pad extern int skb_pad ( s#sk_buff * , int ) 
skb_put extern unsigned char * skb_put ( s#sk_buff * , unsigned int ) 
skb_push extern unsigned char * skb_push ( s#sk_buff * , unsigned int ) 
skb_pull extern unsigned char * skb_pull ( s#sk_buff * , unsigned int ) 
skb_trim extern void skb_trim ( s#sk_buff * , unsigned int ) 
___pskb_trim extern int ___pskb_trim ( s#sk_buff * , unsigned int ) 
__pskb_pull_tail extern unsigned char * __pskb_pull_tail ( s#sk_buff * , int ) 
skb_copy_bits extern int skb_copy_bits ( const s#sk_buff * , int , void * , int ) 
skb_store_bits extern int skb_store_bits ( s#sk_buff * , int , const void * , int ) 
skb_checksum extern t#__wsum skb_checksum ( const s#sk_buff * , int , int , t#__wsum ) 
skb_copy_and_csum_bits extern t#__wsum skb_copy_and_csum_bits ( const s#sk_buff * , int , t#u8 * , int , t#__wsum ) 
skb_copy_and_csum_dev extern void skb_copy_and_csum_dev ( const s#sk_buff * , t#u8 * ) 
skb_dequeue extern s#sk_buff * skb_dequeue ( s#sk_buff_head * ) 
skb_dequeue_tail extern s#sk_buff * skb_dequeue_tail ( s#sk_buff_head * ) 
skb_queue_purge extern void skb_queue_purge ( s#sk_buff_head * ) 
skb_queue_head extern void skb_queue_head ( s#sk_buff_head * , s#sk_buff * ) 
skb_queue_tail extern void skb_queue_tail ( s#sk_buff_head * , s#sk_buff * ) 
skb_unlink extern void skb_unlink ( s#sk_buff * , s#sk_buff_head * ) 
skb_append extern void skb_append ( s#sk_buff * , s#sk_buff * , s#sk_buff_head * ) 
skb_insert extern void skb_insert ( s#sk_buff * , s#sk_buff * , s#sk_buff_head * ) 
skb_split extern void skb_split ( s#sk_buff * , s#sk_buff * , const t#u32 ) 
s#skb_seq_state struct skb_seq_state { t#__u32 lower_offset ; t#__u32 upper_offset ; t#__u32 frag_idx ; t#__u32 stepped_offset ; s#sk_buff * root_skb ; s#sk_buff * cur_skb ; t#__u8 * frag_data ; } 
skb_prepare_seq_read extern void skb_prepare_seq_read ( s#sk_buff * , unsigned int , unsigned int , s#skb_seq_state * ) 
skb_seq_read extern unsigned int skb_seq_read ( unsigned int , const t#u8 * * , s#skb_seq_state * ) 
skb_abort_seq_read extern void skb_abort_seq_read ( s#skb_seq_state * ) 
skb_find_text extern unsigned int skb_find_text ( s#sk_buff * , unsigned int , unsigned int , s#ts_config * , s#ts_state * ) 
skb_append_datato_frags extern int skb_append_datato_frags ( s#sock * , s#sk_buff * , int ( void * , char * , int , int , int , s#sk_buff * ) , void * , int ) 
skb_pull_rcsum unsigned char * skb_pull_rcsum ( s#sk_buff * , unsigned int ) 
skb_segment extern s#sk_buff * skb_segment ( s#sk_buff * , int ) 
skb_gro_receive extern int skb_gro_receive ( s#sk_buff * * , s#sk_buff * ) 
skb_to_sgvec extern int skb_to_sgvec ( s#sk_buff * , s#scatterlist * , int , int ) 
skb_cow_data extern int skb_cow_data ( s#sk_buff * , int , s#sk_buff * * ) 
s#skb_shared_hwtstamps struct skb_shared_hwtstamps { t#ktime_t hwtstamp ; t#ktime_t syststamp ; } 
skb_tstamp_tx extern void skb_tstamp_tx ( s#sk_buff * , s#skb_shared_hwtstamps * ) 
skb_partial_csum_set t#bool skb_partial_csum_set ( s#sk_buff * , t#u16 , t#u16 ) 
__skb_warn_lro_forwarding extern void __skb_warn_lro_forwarding ( const s#sk_buff * ) 

/* net/core/sock.o */
sysctl_optmem_max extern int sysctl_optmem_max 
net_rx_reserve extern s#mem_reserve net_rx_reserve 
net_skb_reserve extern s#mem_reserve net_skb_reserve 
sk_adjust_memalloc extern int sk_adjust_memalloc ( int , long ) 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##udp_table
s##raw_hashinfo
sk_set_memalloc extern int sk_set_memalloc ( s#sock * ) 
sk_clear_memalloc extern int sk_clear_memalloc ( s#sock * ) 
__sk_backlog_rcv extern int __sk_backlog_rcv ( s#sock * , s#sk_buff * ) 
sock_queue_rcv_skb extern int sock_queue_rcv_skb ( s#sock * , s#sk_buff * ) 
sk_receive_skb extern int sk_receive_skb ( s#sock * , s#sk_buff * , const int ) 
__sk_dst_check extern s#dst_entry * __sk_dst_check ( s#sock * , t#u32 ) 
sk_dst_check extern s#dst_entry * sk_dst_check ( s#sock * , t#u32 ) 
sock_setsockopt extern int sock_setsockopt ( s#socket * , int , int , char * , unsigned int ) 
sk_alloc extern s#sock * sk_alloc ( s#net * , int , t#gfp_t , s#proto * ) 
sk_free extern void sk_free ( s#sock * ) 
sk_release_kernel extern void sk_release_kernel ( s#sock * ) 
sk_clone extern s#sock * sk_clone ( const s#sock * , const t#gfp_t ) 
sk_setup_caps extern void sk_setup_caps ( s#sock * , s#dst_entry * ) 
sock_wfree extern void sock_wfree ( s#sk_buff * ) 
sock_rfree extern void sock_rfree ( s#sk_buff * ) 
sock_i_uid extern int sock_i_uid ( s#sock * ) 
sock_i_ino extern unsigned long sock_i_ino ( s#sock * ) 
sock_wmalloc extern s#sk_buff * sock_wmalloc ( s#sock * , unsigned long , int , t#gfp_t ) 
sock_kmalloc extern void * sock_kmalloc ( s#sock * , int , t#gfp_t ) 
sock_kfree_s extern void sock_kfree_s ( s#sock * , void * , int ) 
sock_alloc_send_pskb extern s#sk_buff * sock_alloc_send_pskb ( s#sock * , unsigned long , unsigned long , int , int * ) 
sock_alloc_send_skb extern s#sk_buff * sock_alloc_send_skb ( s#sock * , unsigned long , int , int * ) 
sk_wait_data extern int sk_wait_data ( s#sock * , long * ) 
__sk_mem_schedule extern int __sk_mem_schedule ( s#sock * , int , int ) 
__sk_mem_reclaim extern void __sk_mem_reclaim ( s#sock * ) 
sock_no_bind extern int sock_no_bind ( s#socket * , s#sockaddr * , int ) 
sock_no_connect extern int sock_no_connect ( s#socket * , s#sockaddr * , int , int ) 
sock_no_socketpair extern int sock_no_socketpair ( s#socket * , s#socket * ) 
sock_no_accept extern int sock_no_accept ( s#socket * , s#socket * , int ) 
sock_no_getname extern int sock_no_getname ( s#socket * , s#sockaddr * , int * , int ) 
sock_no_poll extern unsigned int sock_no_poll ( s#file * , s#socket * , s#poll_table_struct * ) 
sock_no_ioctl extern int sock_no_ioctl ( s#socket * , unsigned int , unsigned long ) 
sock_no_listen extern int sock_no_listen ( s#socket * , int ) 
sock_no_shutdown extern int sock_no_shutdown ( s#socket * , int ) 
sock_no_setsockopt extern int sock_no_setsockopt ( s#socket * , int , int , char * , unsigned int ) 
sock_no_getsockopt extern int sock_no_getsockopt ( s#socket * , int , int , char * , int * ) 
sock_no_sendmsg extern int sock_no_sendmsg ( s#kiocb * , s#socket * , s#msghdr * , t#size_t ) 
sock_no_recvmsg extern int sock_no_recvmsg ( s#kiocb * , s#socket * , s#msghdr * , t#size_t , int ) 
sock_no_mmap extern int sock_no_mmap ( s#file * , s#socket * , s#vm_area_struct * ) 
sock_no_sendpage extern t#ssize_t sock_no_sendpage ( s#socket * , s#page * , int , t#size_t , int ) 
sk_send_sigurg extern void sk_send_sigurg ( s#sock * ) 
sk_reset_timer extern void sk_reset_timer ( s#sock * , s#timer_list * , unsigned long ) 
sk_stop_timer extern void sk_stop_timer ( s#sock * , s#timer_list * ) 
sock_init_data extern void sock_init_data ( s#socket * , s#sock * ) 
lock_sock_nested extern void lock_sock_nested ( s#sock * , int ) 
release_sock extern void release_sock ( s#sock * ) 
sock_get_timestamp extern int sock_get_timestamp ( s#sock * , s#timeval * ) 
sock_get_timestampns extern int sock_get_timestampns ( s#sock * , s#timespec * ) 
sock_common_getsockopt extern int sock_common_getsockopt ( s#socket * , int , int , char * , int * ) 
compat_sock_common_getsockopt extern int compat_sock_common_getsockopt ( s#socket * , int , int , char * , int * ) 
sock_common_recvmsg extern int sock_common_recvmsg ( s#kiocb * , s#socket * , s#msghdr * , t#size_t , int ) 
sock_common_setsockopt extern int sock_common_setsockopt ( s#socket * , int , int , char * , unsigned int ) 
compat_sock_common_setsockopt extern int compat_sock_common_setsockopt ( s#socket * , int , int , char * , unsigned int ) 
sk_common_release extern void sk_common_release ( s#sock * ) 
sock_prot_inuse_add extern void sock_prot_inuse_add ( s#net * , s#proto * , int ) 
sock_prot_inuse_get extern int sock_prot_inuse_get ( s#net * , s#proto * ) 
proto_register extern int proto_register ( s#proto * , int ) 
proto_unregister extern void proto_unregister ( s#proto * ) 

/* net/core/stream.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
sk_stream_write_space extern void sk_stream_write_space ( s#sock * ) 
sk_stream_wait_connect extern int sk_stream_wait_connect ( s#sock * , long * ) 
sk_stream_wait_close extern void sk_stream_wait_close ( s#sock * , long ) 
sk_stream_wait_memory extern int sk_stream_wait_memory ( s#sock * , long * ) 
sk_stream_error extern int sk_stream_error ( s#sock * , int , int ) 
sk_stream_kill_queues extern void sk_stream_kill_queues ( s#sock * ) 

/* net/core/user_dma.o */
sysctl_tcp_dma_copybreak extern int sysctl_tcp_dma_copybreak 

/* net/core/utils.o */
net_msg_warn extern int net_msg_warn 
net_ratelimit extern int net_ratelimit ( void ) 
in_aton extern t#__be32 in_aton ( const char * ) 
in4_pton extern int in4_pton ( const char * , int , t#u8 * , int , const char * * ) 
in6_pton extern int in6_pton ( const char * , int , t#u8 * , int , const char * * ) 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
inet_proto_csum_replace4 extern void inet_proto_csum_replace4 ( t#__sum16 * , s#sk_buff * , t#__be32 , t#__be32 , int ) 

/* net/dccp/feat.o */
dccp_feat_list_purge extern void dccp_feat_list_purge ( s#list_head * ) 

/* net/dccp/input.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s#dccp_hdr struct dccp_hdr { t#__be16 dccph_sport , dccph_dport ; t#__u8 dccph_doff ; t#__u8 dccph_cscov : 4 , dccph_ccval : 4 ; t#__sum16 dccph_checksum ; t#__u8 dccph_x : 1 , dccph_type : 4 , dccph_reserved : 3 ; t#__u8 dccph_seq2 ; t#__be16 dccph_seq ; } 
dccp_rcv_established extern int dccp_rcv_established ( s#sock * , s#sk_buff * , const s#dccp_hdr * , const unsigned ) 
dccp_rcv_state_process extern int dccp_rcv_state_process ( s#sock * , s#sk_buff * , s#dccp_hdr * , unsigned ) 

/* net/dccp/ipv4.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##udp_table
s##raw_hashinfo
dccp_v4_connect extern int dccp_v4_connect ( s#sock * , s#sockaddr * , int ) 
dccp_v4_send_check extern void dccp_v4_send_check ( s#sock * , int , s#sk_buff * ) 
dccp_v4_request_recv_sock extern s#sock * dccp_v4_request_recv_sock ( s#sock * , s#sk_buff * , s#request_sock * , s#dst_entry * ) 
dccp_v4_conn_request extern int dccp_v4_conn_request ( s#sock * , s#sk_buff * ) 
dccp_v4_do_rcv extern int dccp_v4_do_rcv ( s#sock * , s#sk_buff * ) 
dccp_invalid_packet extern int dccp_invalid_packet ( s#sk_buff * ) 

/* net/dccp/minisocks.o */
s##tvec_base
s##array_cache
s##kmem_list3
s#inet_timewait_death_row struct inet_timewait_death_row { int twcal_hand ; unsigned long twcal_jiffie ; s#timer_list twcal_timer ; s#hlist_head twcal_row [ ( 1 << 5 ) ] ; t#spinlock_t death_lock ; int tw_count ; int period ; t#u32 thread_slots ; s#work_struct twkill_work ; s#timer_list tw_timer ; int slot ; s#hlist_head cells [ 8 ] ; s#inet_hashinfo * hashinfo ; int sysctl_tw_recycle ; int sysctl_max_tw_buckets ; } 
dccp_death_row extern s#inet_timewait_death_row dccp_death_row 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##udp_table
s##raw_hashinfo
dccp_create_openreq_child extern s#sock * dccp_create_openreq_child ( s#sock * , const s#request_sock * , const s#sk_buff * ) 
dccp_check_req extern s#sock * dccp_check_req ( s#sock * , s#sk_buff * , s#request_sock * , s#request_sock * * ) 
dccp_child_process extern int dccp_child_process ( s#sock * , s#sock * , s#sk_buff * ) 
dccp_reqsk_send_ack extern void dccp_reqsk_send_ack ( s#sock * , s#sk_buff * , s#request_sock * ) 
s#in6_pktinfo struct in6_pktinfo { s#in6_addr ipi6_addr ; int ipi6_ifindex ; } 
s#ip6_sf_socklist struct ip6_sf_socklist { unsigned int sl_max ; unsigned int sl_count ; s#in6_addr sl_addr [ 0 ] ; } 
s#ipv6_mc_socklist struct ipv6_mc_socklist { s#in6_addr addr ; int ifindex ; s#ipv6_mc_socklist * next ; t#rwlock_t sflock ; unsigned int sfmode ; s#ip6_sf_socklist * sflist ; } 
s#ipv6_ac_socklist struct ipv6_ac_socklist { s#in6_addr acl_addr ; int acl_ifindex ; s#ipv6_ac_socklist * acl_next ; } 
s#ipv6_opt_hdr struct ipv6_opt_hdr { t#__u8 nexthdr ; t#__u8 hdrlen ; } 
s#ipv6_rt_hdr struct ipv6_rt_hdr { t#__u8 nexthdr ; t#__u8 hdrlen ; t#__u8 type ; t#__u8 segments_left ; } 
s#ipv6_txoptions struct ipv6_txoptions { int tot_len ; t#__u16 opt_flen ; t#__u16 opt_nflen ; s#ipv6_opt_hdr * hopopt ; s#ipv6_opt_hdr * dst0opt ; s#ipv6_rt_hdr * srcrt ; s#ipv6_opt_hdr * dst1opt ; } 
s#ip6_flowlabel struct ip6_flowlabel { s#ip6_flowlabel * next ; t#__be32 label ; t#atomic_t users ; s#in6_addr dst ; s#ipv6_txoptions * opt ; unsigned long linger ; t#u8 share ; t#u32 owner ; unsigned long lastuse ; unsigned long expires ; s#net * fl_net ; } 
s#ipv6_fl_socklist struct ipv6_fl_socklist { s#ipv6_fl_socklist * next ; s#ip6_flowlabel * fl ; } 
s#ipv6_pinfo struct ipv6_pinfo { s#in6_addr saddr ; s#in6_addr rcv_saddr ; s#in6_addr daddr ; s#in6_pktinfo sticky_pktinfo ; s#in6_addr * daddr_cache ; s#in6_addr * saddr_cache ; t#__be32 flow_label ; t#__u32 frag_size ; t#__u16 __unused_1 : 7 ; t#__s16 hop_limit : 9 ; t#__u16 mc_loop : 1 , __unused_2 : 6 ; t#__s16 mcast_hops : 9 ; int mcast_oif ; union { struct { t#__u16 srcrt : 1 , osrcrt : 1 , rxinfo : 1 , rxoinfo : 1 , rxhlim : 1 , rxohlim : 1 , hopopts : 1 , ohopopts : 1 , dstopts : 1 , odstopts : 1 , rxflow : 1 , rxtclass : 1 ; } bits ; t#__u16 all ; } rxopt ; t#__u8 recverr : 1 , sndflow : 1 , pmtudisc : 2 , ipv6only : 1 , srcprefs : 3 ; t#__u8 tclass ; t#__u32 dst_cookie ; s#ipv6_mc_socklist * ipv6_mc_list ; s#ipv6_ac_socklist * ipv6_ac_list ; s#ipv6_fl_socklist * ipv6_fl_list ; s#ipv6_txoptions * opt ; s#sk_buff * pktoptions ; struct { s#ipv6_txoptions * opt ; t#u8 hop_limit ; t#u8 tclass ; } cork ; } 
s#ip_options struct ip_options { t#__be32 faddr ; unsigned char optlen ; unsigned char srr ; unsigned char rr ; unsigned char ts ; unsigned char is_strictroute : 1 , srr_is_hit : 1 , is_changed : 1 , rr_needaddr : 1 , ts_needtime : 1 , ts_needaddr : 1 ; unsigned char router_alert ; unsigned char cipso ; unsigned char __pad2 ; unsigned char __data [ 0 ] ; } 
s##ip_mc_socklist
s#inet_sock struct inet_sock { s#sock sk ; s#ipv6_pinfo * pinet6 ; t#__be32 daddr ; t#__be32 rcv_saddr ; t#__be16 dport ; t#__u16 num ; t#__be32 saddr ; t#__s16 uc_ttl ; t#__u16 cmsg_flags ; s#ip_options * opt ; t#__be16 sport ; t#__u16 id ; t#__u8 tos ; t#__u8 mc_ttl ; t#__u8 pmtudisc ; t#__u8 recverr : 1 , is_icsk : 1 , freebind : 1 , hdrincl : 1 , mc_loop : 1 , transparent : 1 , mc_all : 1 ; int mc_index ; t#__be32 mc_addr ; s#ip_mc_socklist * mc_list ; struct { unsigned int flags ; unsigned int fragsize ; s#ip_options * opt ; s#dst_entry * dst ; int length ; t#__be32 addr ; s#flowi fl ; } cork ; } 
s#listen_sock struct listen_sock { t#u8 max_qlen_log ; int qlen ; int qlen_young ; int clock_hand ; t#u32 hash_rnd ; t#u32 nr_table_entries ; s#request_sock * syn_table [ 0 ] ; } 
s#request_sock_queue struct request_sock_queue { s#request_sock * rskq_accept_head ; s#request_sock * rskq_accept_tail ; t#rwlock_t syn_wait_lock ; t#u8 rskq_defer_accept ; s#listen_sock * listen_opt ; } 
s#inet_bind_bucket struct inet_bind_bucket { s#net * ib_net ; unsigned short port ; signed short fastreuse ; int num_owners ; s#hlist_node node ; s#hlist_head owners ; } 
e#tcp_ca_event enum tcp_ca_event { CA_EVENT_TX_START , CA_EVENT_CWND_RESTART , CA_EVENT_COMPLETE_CWR , CA_EVENT_FRTO , CA_EVENT_LOSS , CA_EVENT_FAST_ACK , CA_EVENT_SLOW_ACK , } 
s#tcp_congestion_ops struct tcp_congestion_ops { s#list_head list ; unsigned long flags ; void ( * init ) ( s#sock * ) ; void ( * release ) ( s#sock * ) ; t#u32 ( * ssthresh ) ( s#sock * ) ; t#u32 ( * min_cwnd ) ( const s#sock * ) ; void ( * cong_avoid ) ( s#sock * , t#u32 , t#u32 ) ; void ( * set_state ) ( s#sock * , t#u8 ) ; void ( * cwnd_event ) ( s#sock * , e#tcp_ca_event ) ; t#u32 ( * undo_cwnd ) ( s#sock * ) ; void ( * pkts_acked ) ( s#sock * , t#u32 , t#s32 ) ; void ( * get_info ) ( s#sock * , t#u32 , s#sk_buff * ) ; char name [ 16 ] ; s#module * owner ; } 
s#inet_connection_sock_af_ops struct inet_connection_sock_af_ops { int ( * queue_xmit ) ( s#sk_buff * , int ) ; void ( * send_check ) ( s#sock * , int , s#sk_buff * ) ; int ( * rebuild_header ) ( s#sock * ) ; int ( * conn_request ) ( s#sock * , s#sk_buff * ) ; s#sock * ( * syn_recv_sock ) ( s#sock * , s#sk_buff * , s#request_sock * , s#dst_entry * ) ; int ( * remember_stamp ) ( s#sock * ) ; t#u16 net_header_len ; t#u16 sockaddr_len ; int ( * setsockopt ) ( s#sock * , int , int , char * , unsigned int ) ; int ( * getsockopt ) ( s#sock * , int , int , char * , int * ) ; int ( * compat_setsockopt ) ( s#sock * , int , int , char * , unsigned int ) ; int ( * compat_getsockopt ) ( s#sock * , int , int , char * , int * ) ; void ( * addr2sockaddr ) ( s#sock * , s#sockaddr * ) ; int ( * bind_conflict ) ( const s#sock * , const s#inet_bind_bucket * ) ; } 
s#inet_connection_sock struct inet_connection_sock { s#inet_sock icsk_inet ; s#request_sock_queue icsk_accept_queue ; s#inet_bind_bucket * icsk_bind_hash ; unsigned long icsk_timeout ; s#timer_list icsk_retransmit_timer ; s#timer_list icsk_delack_timer ; t#__u32 icsk_rto ; t#__u32 icsk_pmtu_cookie ; const s#tcp_congestion_ops * icsk_ca_ops ; const s#inet_connection_sock_af_ops * icsk_af_ops ; unsigned int ( * icsk_sync_mss ) ( s#sock * , t#u32 ) ; t#__u8 icsk_ca_state ; t#__u8 icsk_retransmits ; t#__u8 icsk_pending ; t#__u8 icsk_backoff ; t#__u8 icsk_syn_retries ; t#__u8 icsk_probes_out ; t#__u16 icsk_ext_hdr_len ; struct { t#__u8 pending ; t#__u8 quick ; t#__u8 pingpong ; t#__u8 blocked ; t#__u32 ato ; unsigned long timeout ; t#__u32 lrcvtime ; t#__u16 last_seg_size ; t#__u16 rcv_mss ; } icsk_ack ; struct { int enabled ; int search_high ; int search_low ; int probe_size ; } icsk_mtup ; t#u32 icsk_ca_priv [ 16 ] ; } 
s#dccp_service_list struct dccp_service_list { t#__u32 dccpsl_nr ; t#__be32 dccpsl_list [ 0 ] ; } 
s#dccp_ackvec struct dccp_ackvec { t#u64 av_buf_ackno ; s#list_head av_records ; t#ktime_t av_time ; t#u16 av_buf_head ; t#u16 av_vec_len ; t#u8 av_buf_nonce ; t#u8 av_ack_nonce ; t#u8 av_buf [ ( 253 * 2 ) ] ; } 
s#tcp_info struct tcp_info { t#__u8 tcpi_state ; t#__u8 tcpi_ca_state ; t#__u8 tcpi_retransmits ; t#__u8 tcpi_probes ; t#__u8 tcpi_backoff ; t#__u8 tcpi_options ; t#__u8 tcpi_snd_wscale : 4 , tcpi_rcv_wscale : 4 ; t#__u32 tcpi_rto ; t#__u32 tcpi_ato ; t#__u32 tcpi_snd_mss ; t#__u32 tcpi_rcv_mss ; t#__u32 tcpi_unacked ; t#__u32 tcpi_sacked ; t#__u32 tcpi_lost ; t#__u32 tcpi_retrans ; t#__u32 tcpi_fackets ; t#__u32 tcpi_last_data_sent ; t#__u32 tcpi_last_ack_sent ; t#__u32 tcpi_last_data_recv ; t#__u32 tcpi_last_ack_recv ; t#__u32 tcpi_pmtu ; t#__u32 tcpi_rcv_ssthresh ; t#__u32 tcpi_rtt ; t#__u32 tcpi_rttvar ; t#__u32 tcpi_snd_ssthresh ; t#__u32 tcpi_snd_cwnd ; t#__u32 tcpi_advmss ; t#__u32 tcpi_reordering ; t#__u32 tcpi_rcv_rtt ; t#__u32 tcpi_rcv_space ; t#__u32 tcpi_total_retrans ; } 
s#ccid_operations struct ccid_operations { unsigned char ccid_id ; t#__u32 ccid_ccmps ; const char * ccid_name ; s#kmem_cache * ccid_hc_rx_slab , * ccid_hc_tx_slab ; t#__u32 ccid_hc_rx_obj_size , ccid_hc_tx_obj_size ; int ( * ccid_hc_rx_init ) ( s#ccid * , s#sock * ) ; int ( * ccid_hc_tx_init ) ( s#ccid * , s#sock * ) ; void ( * ccid_hc_rx_exit ) ( s#sock * ) ; void ( * ccid_hc_tx_exit ) ( s#sock * ) ; void ( * ccid_hc_rx_packet_recv ) ( s#sock * , s#sk_buff * ) ; int ( * ccid_hc_rx_parse_options ) ( s#sock * , unsigned char , unsigned char , t#u16 , unsigned char * ) ; int ( * ccid_hc_rx_insert_options ) ( s#sock * , s#sk_buff * ) ; void ( * ccid_hc_tx_packet_recv ) ( s#sock * , s#sk_buff * ) ; int ( * ccid_hc_tx_parse_options ) ( s#sock * , unsigned char , unsigned char , t#u16 , unsigned char * ) ; int ( * ccid_hc_tx_send_packet ) ( s#sock * , s#sk_buff * ) ; void ( * ccid_hc_tx_packet_sent ) ( s#sock * , int , unsigned int ) ; void ( * ccid_hc_rx_get_info ) ( s#sock * , s#tcp_info * ) ; void ( * ccid_hc_tx_get_info ) ( s#sock * , s#tcp_info * ) ; int ( * ccid_hc_rx_getsockopt ) ( s#sock * , const int , int , t#u32 * , int * ) ; int ( * ccid_hc_tx_getsockopt ) ( s#sock * , const int , int , t#u32 * , int * ) ; } 
s#ccid struct ccid { s#ccid_operations * ccid_ops ; char ccid_priv [ 0 ] ; } 
s#dccp_options_received struct dccp_options_received { t#u64 dccpor_ndp : 48 ; t#u32 dccpor_timestamp ; t#u32 dccpor_timestamp_echo ; t#u32 dccpor_elapsed_time ; } 
e#dccp_role enum dccp_role { DCCP_ROLE_UNDEFINED , DCCP_ROLE_LISTEN , DCCP_ROLE_CLIENT , DCCP_ROLE_SERVER , } 
s#dccp_sock struct dccp_sock { s#inet_connection_sock dccps_inet_connection ; t#__u64 dccps_swl ; t#__u64 dccps_swh ; t#__u64 dccps_awl ; t#__u64 dccps_awh ; t#__u64 dccps_iss ; t#__u64 dccps_isr ; t#__u64 dccps_osr ; t#__u64 dccps_gss ; t#__u64 dccps_gsr ; t#__u64 dccps_gar ; t#__be32 dccps_service ; t#__u32 dccps_mss_cache ; s#dccp_service_list * dccps_service_list ; t#__u32 dccps_timestamp_echo ; t#__u32 dccps_timestamp_time ; t#__u16 dccps_l_ack_ratio ; t#__u16 dccps_r_ack_ratio ; t#__u64 dccps_l_seq_win : 48 ; t#__u64 dccps_r_seq_win : 48 ; t#__u8 dccps_pcslen : 4 ; t#__u8 dccps_pcrlen : 4 ; t#__u8 dccps_send_ndp_count : 1 ; t#__u64 dccps_ndp_count : 48 ; unsigned long dccps_rate_last ; s#list_head dccps_featneg ; s#dccp_ackvec * dccps_hc_rx_ackvec ; s#ccid * dccps_hc_rx_ccid ; s#ccid * dccps_hc_tx_ccid ; s#dccp_options_received dccps_options_received ; e#dccp_role dccps_role : 2 ; t#__u8 dccps_hc_rx_insert_options : 1 ; t#__u8 dccps_hc_tx_insert_options : 1 ; t#__u8 dccps_server_timewait : 1 ; s#timer_list dccps_xmit_timer ; } 
dccp_reqsk_init extern int dccp_reqsk_init ( s#request_sock * , s#dccp_sock const * , s#sk_buff const * ) 

/* net/dccp/options.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s#inet_request_sock struct inet_request_sock { s#request_sock req ; t#u16 inet6_rsk_offset ; t#__be16 loc_port ; t#__be32 loc_addr ; t#__be32 rmt_addr ; t#__be16 rmt_port ; int flags_begin [ 0 ] ; ; t#u16 snd_wscale : 4 , rcv_wscale : 4 , tstamp_ok : 1 , sack_ok : 1 , wscale_ok : 1 , ecn_ok : 1 , acked : 1 , no_srccheck : 1 ; int flags_end [ 0 ] ; ; s#ip_options * opt ; } 
s#dccp_request_sock struct dccp_request_sock { s#inet_request_sock dreq_inet_rsk ; t#__u64 dreq_iss ; t#__u64 dreq_isr ; t#__be32 dreq_service ; s#list_head dreq_featneg ; t#__u32 dreq_timestamp_echo ; t#__u32 dreq_timestamp_time ; } 
dccp_parse_options extern int dccp_parse_options ( s#sock * , s#dccp_request_sock * , s#sk_buff * ) 
dccp_insert_option extern int dccp_insert_option ( s#sock * , s#sk_buff * , unsigned char , const void * , unsigned char ) 
dccp_insert_option_elapsed_time extern int dccp_insert_option_elapsed_time ( s#sock * , s#sk_buff * , t#u32 ) 
dccp_insert_option_timestamp extern int dccp_insert_option_timestamp ( s#sock * , s#sk_buff * ) 

/* net/dccp/output.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##udp_table
s##raw_hashinfo
s##xfrm_policy
dccp_sync_mss extern unsigned int dccp_sync_mss ( s#sock * , t#u32 ) 
dccp_make_response extern s#sk_buff * dccp_make_response ( s#sock * , s#dst_entry * , s#request_sock * ) 
dccp_ctl_make_reset extern s#sk_buff * dccp_ctl_make_reset ( s#sock * , s#sk_buff * ) 
dccp_connect extern int dccp_connect ( s#sock * ) 
dccp_send_ack extern void dccp_send_ack ( s#sock * ) 
e#dccp_pkt_type enum dccp_pkt_type { DCCP_PKT_REQUEST = 0 , DCCP_PKT_RESPONSE , DCCP_PKT_DATA , DCCP_PKT_ACK , DCCP_PKT_DATAACK , DCCP_PKT_CLOSEREQ , DCCP_PKT_CLOSE , DCCP_PKT_RESET , DCCP_PKT_SYNC , DCCP_PKT_SYNCACK , DCCP_PKT_INVALID , } 
dccp_send_sync extern void dccp_send_sync ( s#sock * , const t#u64 , const e#dccp_pkt_type ) 

/* net/dccp/proto.o */
s#dccp_mib struct dccp_mib { unsigned long mibs [ __DCCP_MIB_MAX ] ; } 
dccp_statistics extern __typeof__ ( s#dccp_mib ) * dccp_statistics [ 2 ] 
dccp_orphan_count extern s#percpu_counter dccp_orphan_count 
s##array_cache
s##kmem_list3
dccp_hashinfo extern s#inet_hashinfo dccp_hashinfo 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##udp_table
s##raw_hashinfo
dccp_set_state extern void dccp_set_state ( s#sock * , const int ) 
dccp_done extern void dccp_done ( s#sock * ) 
dccp_packet_name extern const char * dccp_packet_name ( const int ) 
dccp_state_name extern const char * dccp_state_name ( const int ) 
dccp_init_sock extern int dccp_init_sock ( s#sock * , const t#__u8 ) 
dccp_destroy_sock extern void dccp_destroy_sock ( s#sock * ) 
dccp_disconnect extern int dccp_disconnect ( s#sock * , int ) 
dccp_poll extern unsigned int dccp_poll ( s#file * , s#socket * , t#poll_table * ) 
dccp_ioctl extern int dccp_ioctl ( s#sock * , int , unsigned long ) 
dccp_setsockopt extern int dccp_setsockopt ( s#sock * , int , int , char * , unsigned int ) 
compat_dccp_setsockopt extern int compat_dccp_setsockopt ( s#sock * , int , int , char * , unsigned int ) 
dccp_getsockopt extern int dccp_getsockopt ( s#sock * , int , int , char * , int * ) 
compat_dccp_getsockopt extern int compat_dccp_getsockopt ( s#sock * , int , int , char * , int * ) 
dccp_sendmsg extern int dccp_sendmsg ( s#kiocb * , s#sock * , s#msghdr * , t#size_t ) 
dccp_recvmsg extern int dccp_recvmsg ( s#kiocb * , s#sock * , s#msghdr * , t#size_t , int , int , int * ) 
inet_dccp_listen extern int inet_dccp_listen ( s#socket * , int ) 
dccp_close extern void dccp_close ( s#sock * , long ) 
dccp_shutdown extern void dccp_shutdown ( s#sock * , int ) 

/* net/dccp/timer.o */
dccp_timestamp extern t#u32 dccp_timestamp ( void ) 

/* net/ethernet/eth.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
eth_header extern int eth_header ( s#sk_buff * , s#net_device * , unsigned short , const void * , const void * , unsigned ) 
eth_rebuild_header extern int eth_rebuild_header ( s#sk_buff * ) 
eth_type_trans extern t#__be16 eth_type_trans ( s#sk_buff * , s#net_device * ) 
eth_header_parse int eth_header_parse ( const s#sk_buff * , unsigned char * ) 
eth_header_cache extern int eth_header_cache ( const s#neighbour * , s#hh_cache * ) 
eth_header_cache_update extern void eth_header_cache_update ( s#hh_cache * , const s#net_device * , const unsigned char * ) 
eth_mac_addr extern int eth_mac_addr ( s#net_device * , void * ) 
eth_change_mtu extern int eth_change_mtu ( s#net_device * , int ) 
eth_validate_addr extern int eth_validate_addr ( s#net_device * ) 
ether_setup extern void ether_setup ( s#net_device * ) 
alloc_etherdev_mq extern s#net_device * alloc_etherdev_mq ( int , unsigned int ) 
sysfs_format_mac extern t#ssize_t sysfs_format_mac ( char * , const unsigned char * , int ) 
print_mac extern char * print_mac ( char * , const unsigned char * ) 

/* net/ethernet/pe2.o */
s##llc_sap
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
destroy_EII_client void destroy_EII_client ( s#datalink_proto * ) 
make_EII_client s#datalink_proto * make_EII_client ( void ) 

/* net/ieee802154/netlink.o */
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s#ieee802154_addr struct ieee802154_addr { int addr_type ; t#u16 pan_id ; union { t#u8 hwaddr [ 8 ] ; t#u16 short_addr ; } ; } 
ieee802154_nl_assoc_indic int ieee802154_nl_assoc_indic ( s#net_device * , s#ieee802154_addr * , t#u8 ) 
ieee802154_nl_assoc_confirm int ieee802154_nl_assoc_confirm ( s#net_device * , t#u16 , t#u8 ) 
ieee802154_nl_disassoc_indic int ieee802154_nl_disassoc_indic ( s#net_device * , s#ieee802154_addr * , t#u8 ) 
ieee802154_nl_disassoc_confirm int ieee802154_nl_disassoc_confirm ( s#net_device * , t#u8 ) 
ieee802154_nl_beacon_indic int ieee802154_nl_beacon_indic ( s#net_device * , t#u16 , t#u16 ) 
ieee802154_nl_scan_confirm int ieee802154_nl_scan_confirm ( s#net_device * , t#u8 , t#u8 , t#u32 , t#u8 , t#u8 * ) 
ieee802154_nl_start_confirm int ieee802154_nl_start_confirm ( s#net_device * , t#u8 ) 

/* net/ieee802154/wpan-class.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##nameidata
s##vfsmount
s##kstatfs
s##kiocb
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##class_private
s#wpan_phy struct wpan_phy { s#mutex pib_lock ; t#u8 current_channel ; t#u8 current_page ; t#u32 channels_supported ; t#u8 transmit_power ; t#u8 cca_mode ; s#device dev ; int idx ; char priv [ 0 ] __attribute__ ( ( __aligned__ ( 32 ) ) ) ; } 
wpan_phy_find s#wpan_phy * wpan_phy_find ( const char * ) 
wpan_phy_alloc s#wpan_phy * wpan_phy_alloc ( t#size_t ) 
wpan_phy_register int wpan_phy_register ( s#device * , s#wpan_phy * ) 
wpan_phy_unregister void wpan_phy_unregister ( s#wpan_phy * ) 
wpan_phy_free void wpan_phy_free ( s#wpan_phy * ) 

/* net/ipv4/af_inet.o */
s#ipv4_config struct ipv4_config { int log_martians ; int no_pmtu_disc ; } 
ipv4_config extern s#ipv4_config ipv4_config 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##xt_table
t#vifi_t typedef unsigned short vifi_t 
s#mfc_cache struct mfc_cache { s#mfc_cache * next ; s#net * mfc_net ; t#__be32 mfc_mcastgrp ; t#__be32 mfc_origin ; t#vifi_t mfc_parent ; int mfc_flags ; union { struct { unsigned long expires ; s#sk_buff_head unresolved ; } unres ; struct { unsigned long last_assert ; int minvif ; int maxvif ; unsigned long bytes ; unsigned long pkt ; unsigned long wrong_if ; unsigned char ttls [ 32 ] ; } res ; } mfc_un ; } 
s#vif_device struct vif_device { s#net_device * dev ; unsigned long bytes_in , bytes_out ; unsigned long pkt_in , pkt_out ; unsigned long rate_limit ; unsigned char threshold ; unsigned short flags ; t#__be32 local , remote ; int link ; } 
s#ip_sf_list struct ip_sf_list { s#ip_sf_list * sf_next ; t#__be32 sf_inaddr ; unsigned long sf_count [ 2 ] ; unsigned char sf_gsresp ; unsigned char sf_oldin ; unsigned char sf_crcount ; } 
s#ip_mc_list struct ip_mc_list { s#in_device * interface ; t#__be32 multiaddr ; s#ip_sf_list * sources ; s#ip_sf_list * tomb ; unsigned int sfmode ; unsigned long sfcount [ 2 ] ; s#ip_mc_list * next ; s#timer_list timer ; int users ; t#atomic_t refcnt ; t#spinlock_t lock ; char tm_running ; char reporter ; char unsolicit_count ; char loaded ; unsigned char gsquery ; unsigned char crcount ; } 
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s#raw_hashinfo struct raw_hashinfo { t#rwlock_t lock ; s#hlist_head ht [ 256 ] ; } 
inet_sock_destruct extern void inet_sock_destruct ( s#sock * ) 
inet_listen extern int inet_listen ( s#socket * , int ) 
inet_ehash_secret extern t#u32 inet_ehash_secret 
build_ehash_secret extern void build_ehash_secret ( void ) 
inet_release extern int inet_release ( s#socket * ) 
sysctl_ip_nonlocal_bind extern int sysctl_ip_nonlocal_bind 
inet_bind extern int inet_bind ( s#socket * , s#sockaddr * , int ) 
inet_dgram_connect extern int inet_dgram_connect ( s#socket * , s#sockaddr * , int , int ) 
inet_stream_connect extern int inet_stream_connect ( s#socket * , s#sockaddr * , int , int ) 
inet_accept extern int inet_accept ( s#socket * , s#socket * , int ) 
inet_getname extern int inet_getname ( s#socket * , s#sockaddr * , int * , int ) 
inet_sendmsg extern int inet_sendmsg ( s#kiocb * , s#socket * , s#msghdr * , t#size_t ) 
inet_shutdown extern int inet_shutdown ( s#socket * , int ) 
inet_ioctl extern int inet_ioctl ( s#socket * , unsigned int , unsigned long ) 
inet_stream_ops extern const s#proto_ops inet_stream_ops 
inet_dgram_ops extern const s#proto_ops inet_dgram_ops 
s#inet_protosw struct inet_protosw { s#list_head list ; unsigned short type ; unsigned short protocol ; s#proto * prot ; const s#proto_ops * ops ; int capability ; char no_check ; unsigned char flags ; } 
inet_register_protosw extern void inet_register_protosw ( s#inet_protosw * ) 
inet_unregister_protosw extern void inet_unregister_protosw ( s#inet_protosw * ) 
inet_sk_rebuild_header extern int inet_sk_rebuild_header ( s#sock * ) 
inet_ctl_sock_create extern int inet_ctl_sock_create ( s#sock * * , unsigned short , unsigned short , unsigned char , s#net * ) 
snmp_fold_field extern unsigned long snmp_fold_field ( void * [ ] , int ) 
snmp_mib_init extern int snmp_mib_init ( void * [ 2 ] , t#size_t ) 
snmp_mib_free extern void snmp_mib_free ( void * [ 2 ] ) 

/* net/ipv4/arp.o */
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##ip_mc_list
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
arp_broken_ops extern const s#neigh_ops arp_broken_ops 
arp_find extern int arp_find ( unsigned char * , s#sk_buff * ) 
arp_create extern s#sk_buff * arp_create ( int , int , t#__be32 , s#net_device * , t#__be32 , const unsigned char * , const unsigned char * , const unsigned char * ) 
arp_xmit extern void arp_xmit ( s#sk_buff * ) 
arp_send extern void arp_send ( int , int , t#__be32 , s#net_device * , t#__be32 , const unsigned char * , const unsigned char * , const unsigned char * ) 
arp_tbl extern s#neigh_table arp_tbl 
clip_tbl_hook extern s#neigh_table * clip_tbl_hook 

/* net/ipv4/datagram.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
ip4_datagram_connect extern int ip4_datagram_connect ( s#sock * , s#sockaddr * , int ) 

/* net/ipv4/devinet.o */
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
in_dev_finish_destroy extern void in_dev_finish_destroy ( s#in_device * ) 
inet_select_addr extern t#__be32 inet_select_addr ( const s#net_device * , t#__be32 , int ) 
inetdev_by_index extern s#in_device * inetdev_by_index ( s#net * , int ) 
register_inetaddr_notifier extern int register_inetaddr_notifier ( s#notifier_block * ) 
unregister_inetaddr_notifier extern int unregister_inetaddr_notifier ( s#notifier_block * ) 

/* net/ipv4/fib_frontend.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##ip_mc_list
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
inet_addr_type extern unsigned inet_addr_type ( s#net * , t#__be32 ) 
inet_dev_addr_type extern unsigned inet_dev_addr_type ( s#net * , const s#net_device * , t#__be32 ) 
ip_dev_find extern s#net_device * ip_dev_find ( s#net * , t#__be32 ) 

/* net/ipv4/icmp.o */
s#icmp_err struct icmp_err { int errno ; unsigned fatal : 1 ; } 
icmp_err_convert extern s#icmp_err icmp_err_convert [ ] 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ip_mc_list
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
icmp_send extern void icmp_send ( s#sk_buff * , int , int , t#__be32 ) 
xrlim_allow extern int xrlim_allow ( s#dst_entry * , int ) 

/* net/ipv4/igmp.o */
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
ip_mc_dec_group extern void ip_mc_dec_group ( s#in_device * , t#__be32 ) 
ip_mc_inc_group extern void ip_mc_inc_group ( s#in_device * , t#__be32 ) 
s#ip_mreqn struct ip_mreqn { s#in_addr imr_multiaddr ; s#in_addr imr_address ; int imr_ifindex ; } 
ip_mc_join_group extern int ip_mc_join_group ( s#sock * , s#ip_mreqn * ) 
ip_mc_rejoin_group extern void ip_mc_rejoin_group ( s#ip_mc_list * ) 

/* net/ipv4/inet_connection_sock.o */
inet_csk_timer_bug_msg extern const char inet_csk_timer_bug_msg [ ] 
inet_get_local_port_range extern void inet_get_local_port_range ( int * , int * ) 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##udp_table
s##raw_hashinfo
inet_csk_bind_conflict extern int inet_csk_bind_conflict ( const s#sock * , const s#inet_bind_bucket * ) 
inet_csk_get_port extern int inet_csk_get_port ( s#sock * , unsigned short ) 
inet_csk_accept extern s#sock * inet_csk_accept ( s#sock * , int , int * ) 
inet_csk_init_xmit_timers extern void inet_csk_init_xmit_timers ( s#sock * , void ( * ) ( unsigned long ) , void ( * ) ( unsigned long ) , void ( * ) ( unsigned long ) ) 
inet_csk_clear_xmit_timers extern void inet_csk_clear_xmit_timers ( s#sock * ) 
inet_csk_delete_keepalive_timer extern void inet_csk_delete_keepalive_timer ( s#sock * ) 
inet_csk_reset_keepalive_timer extern void inet_csk_reset_keepalive_timer ( s#sock * , unsigned long ) 
inet_csk_route_req extern s#dst_entry * inet_csk_route_req ( s#sock * , const s#request_sock * ) 
inet_csk_search_req extern s#request_sock * inet_csk_search_req ( const s#sock * , s#request_sock * * * , const t#__be16 , const t#__be32 , const t#__be32 ) 
inet_csk_reqsk_queue_hash_add extern void inet_csk_reqsk_queue_hash_add ( s#sock * , s#request_sock * , unsigned long ) 
inet_csk_reqsk_queue_prune extern void inet_csk_reqsk_queue_prune ( s#sock * , const unsigned long , const unsigned long , const unsigned long ) 
inet_csk_clone extern s#sock * inet_csk_clone ( s#sock * , const s#request_sock * , const t#gfp_t ) 
inet_csk_destroy_sock extern void inet_csk_destroy_sock ( s#sock * ) 
inet_csk_listen_start extern int inet_csk_listen_start ( s#sock * , const int ) 
inet_csk_listen_stop extern void inet_csk_listen_stop ( s#sock * ) 
inet_csk_addr2sockaddr extern void inet_csk_addr2sockaddr ( s#sock * , s#sockaddr * ) 
inet_csk_compat_getsockopt extern int inet_csk_compat_getsockopt ( s#sock * , int , int , char * , int * ) 
inet_csk_compat_setsockopt extern int inet_csk_compat_setsockopt ( s#sock * , int , int , char * , unsigned int ) 

/* net/ipv4/inet_diag.o */
s##array_cache
s##kmem_list3
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s#inet_diag_sockid struct inet_diag_sockid { t#__be16 idiag_sport ; t#__be16 idiag_dport ; t#__be32 idiag_src [ 4 ] ; t#__be32 idiag_dst [ 4 ] ; t#__u32 idiag_if ; t#__u32 idiag_cookie [ 2 ] ; } 
s#inet_diag_msg struct inet_diag_msg { t#__u8 idiag_family ; t#__u8 idiag_state ; t#__u8 idiag_timer ; t#__u8 idiag_retrans ; s#inet_diag_sockid id ; t#__u32 idiag_expires ; t#__u32 idiag_rqueue ; t#__u32 idiag_wqueue ; t#__u32 idiag_uid ; t#__u32 idiag_inode ; } 
s#inet_diag_handler struct inet_diag_handler { s#inet_hashinfo * idiag_hashinfo ; void ( * idiag_get_info ) ( s#sock * , s#inet_diag_msg * , void * ) ; t#__u16 idiag_info_size ; t#__u16 idiag_type ; } 
inet_diag_register extern int inet_diag_register ( const s#inet_diag_handler * ) 
inet_diag_unregister extern void inet_diag_unregister ( const s#inet_diag_handler * ) 

/* net/ipv4/inet_fragment.o */
s##tvec_base
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##sock
s##net_device
s##sec_path
s#inet_frag_queue struct inet_frag_queue { s#hlist_node list ; s#netns_frags * net ; s#list_head lru_list ; t#spinlock_t lock ; t#atomic_t refcnt ; s#timer_list timer ; s#sk_buff * fragments ; t#ktime_t stamp ; int len ; int meat ; t#__u8 last_in ; } 
s#inet_frags struct inet_frags { s#hlist_head hash [ 64 ] ; t#rwlock_t lock ; t#u32 rnd ; int qsize ; int secret_interval ; s#timer_list secret_timer ; unsigned int ( * hashfn ) ( s#inet_frag_queue * ) ; void ( * constructor ) ( s#inet_frag_queue * , void * ) ; void ( * destructor ) ( s#inet_frag_queue * ) ; void ( * skb_free ) ( s#sk_buff * ) ; int ( * match ) ( s#inet_frag_queue * , void * ) ; void ( * frag_expire ) ( unsigned long ) ; } 
inet_frags_init void inet_frags_init ( s#inet_frags * ) 
inet_frags_init_net void inet_frags_init_net ( s#netns_frags * ) 
inet_frags_fini void inet_frags_fini ( s#inet_frags * ) 
inet_frags_exit_net void inet_frags_exit_net ( s#netns_frags * , s#inet_frags * ) 
inet_frag_kill void inet_frag_kill ( s#inet_frag_queue * , s#inet_frags * ) 
inet_frag_destroy void inet_frag_destroy ( s#inet_frag_queue * , s#inet_frags * , int * ) 
inet_frag_evictor int inet_frag_evictor ( s#netns_frags * , s#inet_frags * ) 
inet_frag_find s#inet_frag_queue * inet_frag_find ( s#netns_frags * , s#inet_frags * , void * , unsigned int ) 

/* net/ipv4/inet_hashtables.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##udp_table
s##raw_hashinfo
s##xfrm_policy
inet_put_port extern void inet_put_port ( s#sock * ) 
__inet_inherit_port extern void __inet_inherit_port ( s#sock * , s#sock * ) 
__inet_lookup_listener extern s#sock * __inet_lookup_listener ( s#net * , s#inet_hashinfo * , const t#__be32 , const unsigned short , const int ) 
__inet_lookup_established extern s#sock * __inet_lookup_established ( s#net * , s#inet_hashinfo * , const t#__be32 , const t#__be16 , const t#__be32 , const t#u16 , const int ) 
__inet_hash_nolisten extern void __inet_hash_nolisten ( s#sock * ) 
inet_hash extern void inet_hash ( s#sock * ) 
inet_unhash extern void inet_unhash ( s#sock * ) 
inet_hash_connect extern int inet_hash_connect ( s#inet_timewait_death_row * , s#sock * ) 
inet_hashinfo_init void inet_hashinfo_init ( s#inet_hashinfo * ) 

/* net/ipv4/inet_lro.o */
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s#net_lro_stats struct net_lro_stats { unsigned long aggregated ; unsigned long flushed ; unsigned long no_desc ; } 
s#skb_frag_struct struct skb_frag_struct { s#page * page ; t#__u32 page_offset ; t#__u32 size ; } 
s#net_lro_desc struct net_lro_desc { s#sk_buff * parent ; s#sk_buff * last_skb ; s#skb_frag_struct * next_frag ; s#iphdr * iph ; s#tcphdr * tcph ; s#vlan_group * vgrp ; t#__wsum data_csum ; t#__be32 tcp_rcv_tsecr ; t#__be32 tcp_rcv_tsval ; t#__be32 tcp_ack ; t#u32 tcp_next_seq ; t#u32 skb_tot_frags_len ; t#u16 ip_tot_len ; t#u16 tcp_saw_tstamp ; t#__be16 tcp_window ; t#u16 vlan_tag ; int pkt_aggr_cnt ; int vlan_packet ; int mss ; int active ; } 
s#net_lro_mgr struct net_lro_mgr { s#net_device * dev ; s#net_lro_stats stats ; unsigned long features ; t#u32 ip_summed ; t#u32 ip_summed_aggr ; int max_desc ; int max_aggr ; int frag_align_pad ; s#net_lro_desc * lro_arr ; int ( * get_skb_header ) ( s#sk_buff * , void * * , void * * , t#u64 * , void * ) ; int ( * get_frag_header ) ( s#skb_frag_struct * , void * * , void * * , void * * , t#u64 * , void * ) ; } 
lro_receive_skb void lro_receive_skb ( s#net_lro_mgr * , s#sk_buff * , void * ) 
lro_vlan_hwaccel_receive_skb void lro_vlan_hwaccel_receive_skb ( s#net_lro_mgr * , s#sk_buff * , s#vlan_group * , t#u16 , void * ) 
lro_receive_frags void lro_receive_frags ( s#net_lro_mgr * , s#skb_frag_struct * , int , int , void * , t#__wsum ) 
lro_vlan_hwaccel_receive_frags void lro_vlan_hwaccel_receive_frags ( s#net_lro_mgr * , s#skb_frag_struct * , int , int , s#vlan_group * , t#u16 , void * , t#__wsum ) 
lro_flush_all void lro_flush_all ( s#net_lro_mgr * ) 
lro_flush_pkt void lro_flush_pkt ( s#net_lro_mgr * , s#iphdr * , s#tcphdr * ) 

/* net/ipv4/inet_timewait_sock.o */
s##iw_handler_def
s##iw_public_data
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##xfrm_policy
s##udp_table
s##raw_hashinfo
s#inet_timewait_sock struct inet_timewait_sock { s#sock_common __tw_common ; int tw_timeout ; volatile unsigned char tw_substate ; unsigned char tw_rcv_wscale ; t#__be16 tw_sport ; t#__be32 tw_daddr __attribute__ ( ( aligned ( 8 ) ) ) ; t#__be32 tw_rcv_saddr ; t#__be16 tw_dport ; t#__u16 tw_num ; int flags_begin [ 0 ] ; ; unsigned int tw_ipv6only : 1 , tw_transparent : 1 , tw_pad : 14 , tw_ipv6_offset : 16 ; int flags_end [ 0 ] ; ; unsigned long tw_ttd ; s#inet_bind_bucket * tw_tb ; s#hlist_node tw_death_node ; } 
inet_twsk_put extern void inet_twsk_put ( s#inet_timewait_sock * ) 
__inet_twsk_hashdance extern void __inet_twsk_hashdance ( s#inet_timewait_sock * , s#sock * , s#inet_hashinfo * ) 
inet_twsk_alloc extern s#inet_timewait_sock * inet_twsk_alloc ( const s#sock * , const int ) 
inet_twdr_hangman extern void inet_twdr_hangman ( unsigned long ) 
inet_twdr_twkill_work extern void inet_twdr_twkill_work ( s#work_struct * ) 
inet_twsk_deschedule extern void inet_twsk_deschedule ( s#inet_timewait_sock * , s#inet_timewait_death_row * ) 
inet_twsk_schedule extern void inet_twsk_schedule ( s#inet_timewait_sock * , s#inet_timewait_death_row * , const int , const int ) 
inet_twdr_twcal_tick extern void inet_twdr_twcal_tick ( unsigned long ) 
inet_twsk_purge extern void inet_twsk_purge ( s#net * , s#inet_hashinfo * , s#inet_timewait_death_row * , int ) 

/* net/ipv4/ip_fragment.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##iw_handler_def
s##iw_public_data
s##tvec_base
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s##sec_path
ip_defrag int ip_defrag ( s#sk_buff * , t#u32 ) 

/* net/ipv4/ip_output.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
ip_local_out extern int ip_local_out ( s#sk_buff * ) 
ip_build_and_send_pkt extern int ip_build_and_send_pkt ( s#sk_buff * , s#sock * , t#__be32 , t#__be32 , s#ip_options * ) 
ip_fragment extern int ip_fragment ( s#sk_buff * , int ( * ) ( s#sk_buff * ) ) 
ip_generic_getfrag extern int ip_generic_getfrag ( void * , char * , int , int , int , s#sk_buff * ) 
ip_queue_xmit extern int ip_queue_xmit ( s#sk_buff * , int ) 
ip_send_check extern void ip_send_check ( s#iphdr * ) 

/* net/ipv4/ip_sockglue.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
ip_cmsg_recv extern void ip_cmsg_recv ( s#msghdr * , s#sk_buff * ) 
ip_setsockopt extern int ip_setsockopt ( s#sock * , int , int , char * , unsigned int ) 
compat_ip_setsockopt extern int compat_ip_setsockopt ( s#sock * , int , int , char * , unsigned int ) 
ip_getsockopt extern int ip_getsockopt ( s#sock * , int , int , char * , int * ) 
compat_ip_getsockopt extern int compat_ip_getsockopt ( s#sock * , int , int , char * , int * ) 

/* net/ipv4/netfilter.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
ip_route_me_harder extern int ip_route_me_harder ( s#sk_buff * , unsigned ) 
ip_xfrm_me_harder extern int ip_xfrm_me_harder ( s#sk_buff * ) 
ip_nat_decode_session extern void ( * ip_nat_decode_session ) ( s#sk_buff * , s#flowi * ) 
nf_ip_checksum extern t#__sum16 nf_ip_checksum ( s#sk_buff * , unsigned int , unsigned int , t#u_int8_t ) 
nf_net_ipv4_netfilter_sysctl_path extern s#ctl_path nf_net_ipv4_netfilter_sysctl_path [ ] 

/* net/ipv4/netfilter/arp_tables.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##iw_handler_def
s##iw_public_data
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##rtable
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s#xt_counters struct xt_counters { t#__u64 pcnt , bcnt ; } 
s#arpt_devaddr_info struct arpt_devaddr_info { char addr [ 16 ] ; char mask [ 16 ] ; } 
s#arpt_arp struct arpt_arp { s#in_addr src , tgt ; s#in_addr smsk , tmsk ; t#u_int8_t arhln , arhln_mask ; s#arpt_devaddr_info src_devaddr ; s#arpt_devaddr_info tgt_devaddr ; t#__be16 arpop , arpop_mask ; t#__be16 arhrd , arhrd_mask ; t#__be16 arpro , arpro_mask ; char iniface [ 16 ] , outiface [ 16 ] ; unsigned char iniface_mask [ 16 ] , outiface_mask [ 16 ] ; t#u_int8_t flags ; t#u_int16_t invflags ; } 
s#arpt_entry struct arpt_entry { s#arpt_arp arp ; t#u_int16_t target_offset ; t#u_int16_t next_offset ; unsigned int comefrom ; s#xt_counters counters ; unsigned char elems [ 0 ] ; } 
s#arpt_replace struct arpt_replace { char name [ 32 ] ; unsigned int valid_hooks ; unsigned int num_entries ; unsigned int size ; unsigned int hook_entry [ 3 ] ; unsigned int underflow [ 3 ] ; unsigned int num_counters ; s#xt_counters * counters ; s#arpt_entry entries [ 0 ] ; } 
arpt_register_table extern s#xt_table * arpt_register_table ( s#net * , const s#xt_table * , const s#arpt_replace * ) 
arpt_unregister_table extern void arpt_unregister_table ( s#xt_table * ) 
arpt_do_table extern unsigned int arpt_do_table ( s#sk_buff * , unsigned int , const s#net_device * , const s#net_device * , s#xt_table * ) 

/* net/ipv4/netfilter/ip_tables.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##iw_handler_def
s##iw_public_data
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##rtable
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s#ipt_ip struct ipt_ip { s#in_addr src , dst ; s#in_addr smsk , dmsk ; char iniface [ 16 ] , outiface [ 16 ] ; unsigned char iniface_mask [ 16 ] , outiface_mask [ 16 ] ; t#u_int16_t proto ; t#u_int8_t flags ; t#u_int8_t invflags ; } 
s#ipt_entry struct ipt_entry { s#ipt_ip ip ; unsigned int nfcache ; t#u_int16_t target_offset ; t#u_int16_t next_offset ; unsigned int comefrom ; s#xt_counters counters ; unsigned char elems [ 0 ] ; } 
s#ipt_replace struct ipt_replace { char name [ 32 ] ; unsigned int valid_hooks ; unsigned int num_entries ; unsigned int size ; unsigned int hook_entry [ NF_INET_NUMHOOKS ] ; unsigned int underflow [ NF_INET_NUMHOOKS ] ; unsigned int num_counters ; s#xt_counters * counters ; s#ipt_entry entries [ 0 ] ; } 
ipt_register_table extern s#xt_table * ipt_register_table ( s#net * , const s#xt_table * , const s#ipt_replace * ) 
ipt_unregister_table extern void ipt_unregister_table ( s#xt_table * ) 
ipt_do_table extern unsigned int ipt_do_table ( s#sk_buff * , unsigned int , const s#net_device * , const s#net_device * , s#xt_table * ) 

/* net/ipv4/netfilter/nf_conntrack_l3proto_ipv4.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s#ip_conntrack_stat struct ip_conntrack_stat { unsigned int searched ; unsigned int found ; unsigned int new ; unsigned int invalid ; unsigned int ignore ; unsigned int delete ; unsigned int delete_list ; unsigned int insert ; unsigned int insert_failed ; unsigned int drop ; unsigned int early_drop ; unsigned int error ; unsigned int expect_new ; unsigned int expect_create ; unsigned int expect_delete ; } 
s##net_generic
s##xfrm_policy
s##sec_path
u#nf_inet_addr union nf_inet_addr { t#__u32 all [ 4 ] ; t#__be32 ip ; t#__be32 ip6 [ 4 ] ; s#in_addr in ; s#in6_addr in6 ; } 
u#nf_conntrack_man_proto union nf_conntrack_man_proto { t#__be16 all ; struct { t#__be16 port ; } tcp ; struct { t#__be16 port ; } udp ; struct { t#__be16 id ; } icmp ; struct { t#__be16 port ; } dccp ; struct { t#__be16 port ; } sctp ; struct { t#__be16 key ; } gre ; } 
s#nf_conntrack_man struct nf_conntrack_man { u#nf_inet_addr u3 ; u#nf_conntrack_man_proto u ; t#u_int16_t l3num ; } 
s#nf_conntrack_tuple struct nf_conntrack_tuple { s#nf_conntrack_man src ; struct { u#nf_inet_addr u3 ; union { t#__be16 all ; struct { t#__be16 port ; } tcp ; struct { t#__be16 port ; } udp ; struct { t#u_int8_t type , code ; } icmp ; struct { t#__be16 port ; } dccp ; struct { t#__be16 port ; } sctp ; struct { t#__be16 key ; } gre ; } u ; t#u_int8_t protonum ; t#u_int8_t dir ; } dst ; } 
s#nf_conntrack_tuple_hash struct nf_conntrack_tuple_hash { s#hlist_nulls_node hnnode ; s#nf_conntrack_tuple tuple ; } 
t#u_int64_t typedef t#__u64 u_int64_t 
s#nf_ct_dccp struct nf_ct_dccp { t#u_int8_t role [ IP_CT_DIR_MAX ] ; t#u_int8_t state ; t#u_int8_t last_pkt ; t#u_int8_t last_dir ; t#u_int64_t handshake_seq ; } 
e#sctp_conntrack enum sctp_conntrack { SCTP_CONNTRACK_NONE , SCTP_CONNTRACK_CLOSED , SCTP_CONNTRACK_COOKIE_WAIT , SCTP_CONNTRACK_COOKIE_ECHOED , SCTP_CONNTRACK_ESTABLISHED , SCTP_CONNTRACK_SHUTDOWN_SENT , SCTP_CONNTRACK_SHUTDOWN_RECD , SCTP_CONNTRACK_SHUTDOWN_ACK_SENT , SCTP_CONNTRACK_MAX } 
s#ip_ct_sctp struct ip_ct_sctp { e#sctp_conntrack state ; t#__be32 vtag [ IP_CT_DIR_MAX ] ; } 
s#ip_ct_tcp_state struct ip_ct_tcp_state { t#u_int32_t td_end ; t#u_int32_t td_maxend ; t#u_int32_t td_maxwin ; t#u_int32_t td_maxack ; t#u_int8_t td_scale ; t#u_int8_t flags ; } 
s#ip_ct_tcp struct ip_ct_tcp { s#ip_ct_tcp_state seen [ 2 ] ; t#u_int8_t state ; t#u_int8_t last_dir ; t#u_int8_t retrans ; t#u_int8_t last_index ; t#u_int32_t last_seq ; t#u_int32_t last_ack ; t#u_int32_t last_end ; t#u_int16_t last_win ; } 
s#nf_ct_gre struct nf_ct_gre { unsigned int stream_timeout ; unsigned int timeout ; } 
u#nf_conntrack_proto union nf_conntrack_proto { s#nf_ct_dccp dccp ; s#ip_ct_sctp sctp ; s#ip_ct_tcp tcp ; s#nf_ct_gre gre ; } 
s#nf_ct_ext struct nf_ct_ext { s#rcu_head rcu ; t#u8 offset [ NF_CT_EXT_NUM ] ; t#u8 len ; char data [ 0 ] ; } 
s#nf_conn struct nf_conn { s#nf_conntrack ct_general ; t#spinlock_t lock ; s#nf_conntrack_tuple_hash tuplehash [ IP_CT_DIR_MAX ] ; unsigned long status ; s#nf_conn * master ; s#timer_list timeout ; t#u_int32_t mark ; t#u_int32_t secmark ; u#nf_conntrack_proto proto ; s#nf_ct_ext * ext ; s#net * ct_net ; } 
e#ip_conntrack_info enum ip_conntrack_info { IP_CT_ESTABLISHED , IP_CT_RELATED , IP_CT_NEW , IP_CT_IS_REPLY , IP_CT_NUMBER = IP_CT_IS_REPLY * 2 - 1 } 
nf_nat_seq_adjust_hook extern int ( * nf_nat_seq_adjust_hook ) ( s#sk_buff * , s#nf_conn * , e#ip_conntrack_info ) 
need_ipv4_conntrack extern void need_ipv4_conntrack ( void ) 

/* net/ipv4/netfilter/nf_defrag_ipv4.o */
nf_defrag_ipv4_enable extern void nf_defrag_ipv4_enable ( void ) 

/* net/ipv4/netfilter/nf_nat_core.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##net_generic
s##xfrm_policy
s##sec_path
e#nf_nat_manip_type enum nf_nat_manip_type { IP_NAT_MANIP_SRC , IP_NAT_MANIP_DST } 
s#nf_nat_range struct nf_nat_range { unsigned int flags ; t#__be32 min_ip , max_ip ; u#nf_conntrack_man_proto min , max ; } 
s#nf_nat_protocol struct nf_nat_protocol { unsigned int protonum ; s#module * me ; t#bool ( * manip_pkt ) ( s#sk_buff * , unsigned int , const s#nf_conntrack_tuple * , e#nf_nat_manip_type ) ; t#bool ( * in_range ) ( const s#nf_conntrack_tuple * , e#nf_nat_manip_type , const u#nf_conntrack_man_proto * , const u#nf_conntrack_man_proto * ) ; t#bool ( * unique_tuple ) ( s#nf_conntrack_tuple * , const s#nf_nat_range * , e#nf_nat_manip_type , const s#nf_conn * ) ; int ( * range_to_nlattr ) ( s#sk_buff * , const s#nf_nat_range * ) ; int ( * nlattr_to_range ) ( s#nlattr * [ ] , s#nf_nat_range * ) ; } 
nf_nat_proto_find_get extern const s#nf_nat_protocol * nf_nat_proto_find_get ( t#u_int8_t ) 
nf_nat_proto_put extern void nf_nat_proto_put ( const s#nf_nat_protocol * ) 
nf_nat_used_tuple extern int nf_nat_used_tuple ( const s#nf_conntrack_tuple * , const s#nf_conn * ) 
nf_nat_setup_info extern unsigned int nf_nat_setup_info ( s#nf_conn * , const s#nf_nat_range * , e#nf_nat_manip_type ) 
nf_nat_packet extern unsigned int nf_nat_packet ( s#nf_conn * , e#ip_conntrack_info , unsigned int , s#sk_buff * ) 
nf_nat_icmp_reply_translation extern int nf_nat_icmp_reply_translation ( s#nf_conn * , e#ip_conntrack_info , unsigned int , s#sk_buff * ) 
nf_nat_protocol_register extern int nf_nat_protocol_register ( const s#nf_nat_protocol * ) 
nf_nat_protocol_unregister extern void nf_nat_protocol_unregister ( const s#nf_nat_protocol * ) 

/* net/ipv4/netfilter/nf_nat_helper.o */
s##tvec_base
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##in_device
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##rt6_statistics
s##fib6_table
s##ebt_table
s##net_generic
e#ip_conntrack_dir enum ip_conntrack_dir { IP_CT_DIR_ORIGINAL , IP_CT_DIR_REPLY , IP_CT_DIR_MAX } 
nf_nat_get_offset extern t#s16 nf_nat_get_offset ( const s#nf_conn * , e#ip_conntrack_dir , t#u32 ) 
nf_nat_mangle_tcp_packet extern int nf_nat_mangle_tcp_packet ( s#sk_buff * , s#nf_conn * , e#ip_conntrack_info , unsigned int , unsigned int , const char * , unsigned int ) 
nf_nat_mangle_udp_packet extern int nf_nat_mangle_udp_packet ( s#sk_buff * , s#nf_conn * , e#ip_conntrack_info , unsigned int , unsigned int , const char * , unsigned int ) 
s#nf_conntrack_tuple_mask struct nf_conntrack_tuple_mask { struct { u#nf_inet_addr u3 ; u#nf_conntrack_man_proto u ; } src ; } 
s#nf_conntrack_expect_policy struct nf_conntrack_expect_policy { unsigned int max_expected ; unsigned int timeout ; } 
s#nf_conntrack_helper struct nf_conntrack_helper { s#hlist_node hnode ; const char * name ; s#module * me ; const s#nf_conntrack_expect_policy * expect_policy ; s#nf_conntrack_tuple tuple ; int ( * help ) ( s#sk_buff * , unsigned int , s#nf_conn * , e#ip_conntrack_info ) ; void ( * destroy ) ( s#nf_conn * ) ; int ( * to_nlattr ) ( s#sk_buff * , const s#nf_conn * ) ; unsigned int expect_class_max ; } 
s#nf_conntrack_expect struct nf_conntrack_expect { s#hlist_node lnode ; s#hlist_node hnode ; s#nf_conntrack_tuple tuple ; s#nf_conntrack_tuple_mask mask ; void ( * expectfn ) ( s#nf_conn * , s#nf_conntrack_expect * ) ; s#nf_conntrack_helper * helper ; s#nf_conn * master ; s#timer_list timeout ; t#atomic_t use ; unsigned int flags ; unsigned int class ; t#__be32 saved_ip ; u#nf_conntrack_man_proto saved_proto ; e#ip_conntrack_dir dir ; s#rcu_head rcu ; } 
nf_nat_follow_master extern void nf_nat_follow_master ( s#nf_conn * , s#nf_conntrack_expect * ) 

/* net/ipv4/netfilter/nf_nat_proto_common.o */
nf_nat_proto_in_range extern t#bool nf_nat_proto_in_range ( const s#nf_conntrack_tuple * , e#nf_nat_manip_type , const u#nf_conntrack_man_proto * , const u#nf_conntrack_man_proto * ) 
s##tvec_base
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##net_generic
nf_nat_proto_unique_tuple extern t#bool nf_nat_proto_unique_tuple ( s#nf_conntrack_tuple * , const s#nf_nat_range * , e#nf_nat_manip_type , const s#nf_conn * , t#u_int16_t * ) 
nf_nat_proto_nlattr_to_range extern int nf_nat_proto_nlattr_to_range ( s#nlattr * [ ] , s#nf_nat_range * ) 
nf_nat_proto_range_to_nlattr extern int nf_nat_proto_range_to_nlattr ( s#sk_buff * , const s#nf_nat_range * ) 

/* net/ipv4/netfilter/nf_nat_proto_gre.o */
nf_nat_need_gre extern void nf_nat_need_gre ( void ) 

/* net/ipv4/protocol.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s#net_protocol struct net_protocol { int ( * handler ) ( s#sk_buff * ) ; void ( * err_handler ) ( s#sk_buff * , t#u32 ) ; int ( * gso_send_check ) ( s#sk_buff * ) ; s#sk_buff * ( * gso_segment ) ( s#sk_buff * , int ) ; s#sk_buff * * ( * gro_receive ) ( s#sk_buff * * , s#sk_buff * ) ; int ( * gro_complete ) ( s#sk_buff * ) ; unsigned int no_policy : 1 , netns_ok : 1 ; } 
inet_add_protocol extern int inet_add_protocol ( const s#net_protocol * , unsigned char ) 
inet_del_protocol extern int inet_del_protocol ( const s#net_protocol * , unsigned char ) 

/* net/ipv4/raw.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##inet_hashinfo
raw_hash_sk void raw_hash_sk ( s#sock * ) 
raw_unhash_sk void raw_unhash_sk ( s#sock * ) 
raw_seq_start void * raw_seq_start ( s#seq_file * , t#loff_t * ) 
raw_seq_next void * raw_seq_next ( s#seq_file * , void * , t#loff_t * ) 
raw_seq_stop void raw_seq_stop ( s#seq_file * , void * ) 
raw_seq_open int raw_seq_open ( s#inode * , s#file * , s#raw_hashinfo * , const s#seq_operations * ) 

/* net/ipv4/route.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##udp_table
s##raw_hashinfo
s##dn_route
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##xt_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
__ip_route_output_key extern int __ip_route_output_key ( s#net * , s#rtable * * , const s#flowi * ) 
ip_route_output_flow extern int ip_route_output_flow ( s#net * , s#rtable * * , s#flowi * , s#sock * , int ) 
__ip_select_ident extern void __ip_select_ident ( s#iphdr * , s#dst_entry * , int ) 
ip_route_input extern int ip_route_input ( s#sk_buff * , t#__be32 , t#__be32 , t#u8 , s#net_device * ) 
ip_route_output_key extern int ip_route_output_key ( s#net * , s#rtable * * , s#flowi * ) 

/* net/ipv4/syncookies.o */
syncookie_secret extern t#__u32 syncookie_secret [ 2 ] [ 16 - 4 + 5 ] 
s#tcp_options_received struct tcp_options_received { long ts_recent_stamp ; t#u32 ts_recent ; t#u32 rcv_tsval ; t#u32 rcv_tsecr ; t#u16 saw_tstamp : 1 , tstamp_ok : 1 , dsack : 1 , wscale_ok : 1 , sack_ok : 4 , snd_wscale : 4 , rcv_wscale : 4 ; t#u8 num_sacks ; t#u16 user_mss ; t#u16 mss_clamp ; } 
cookie_check_timestamp extern void cookie_check_timestamp ( s#tcp_options_received * ) 

/* net/ipv4/sysctl_net_ipv4.o */
net_ipv4_ctl_path extern s#ctl_path net_ipv4_ctl_path [ ] 

/* net/ipv4/tcp.o */
tcp_orphan_count extern s#percpu_counter tcp_orphan_count 
sysctl_tcp_mem extern int sysctl_tcp_mem [ 3 ] 
sysctl_tcp_rmem extern int sysctl_tcp_rmem [ 3 ] 
sysctl_tcp_wmem extern int sysctl_tcp_wmem [ 3 ] 
tcp_memory_allocated extern t#atomic_t tcp_memory_allocated 
tcp_sockets_allocated extern s#percpu_counter tcp_sockets_allocated 
tcp_memory_pressure extern int tcp_memory_pressure 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##udp_table
s##raw_hashinfo
tcp_enter_memory_pressure extern void tcp_enter_memory_pressure ( s#sock * ) 
tcp_set_state extern void tcp_set_state ( s#sock * , int ) 
compat_tcp_setsockopt extern int compat_tcp_setsockopt ( s#sock * , int , int , char * , unsigned int ) 
tcp_get_info extern void tcp_get_info ( s#sock * , s#tcp_info * ) 
compat_tcp_getsockopt extern int compat_tcp_getsockopt ( s#sock * , int , int , char * , int * ) 
tcp_tso_segment extern s#sk_buff * tcp_tso_segment ( s#sk_buff * , int ) 
tcp_gro_receive extern s#sk_buff * * tcp_gro_receive ( s#sk_buff * * , s#sk_buff * ) 
tcp_gro_complete extern int tcp_gro_complete ( s#sk_buff * ) 
tcp_done extern void tcp_done ( s#sock * ) 
tcp_close extern void tcp_close ( s#sock * , long ) 
tcp_disconnect extern int tcp_disconnect ( s#sock * , int ) 
tcp_getsockopt extern int tcp_getsockopt ( s#sock * , int , int , char * , int * ) 
tcp_ioctl extern int tcp_ioctl ( s#sock * , int , unsigned long ) 
tcp_poll extern unsigned int tcp_poll ( s#file * , s#socket * , s#poll_table_struct * ) 
t#sk_read_actor_t typedef int ( * sk_read_actor_t ) ( t#read_descriptor_t * , s#sk_buff * , unsigned int , t#size_t ) 
tcp_read_sock extern int tcp_read_sock ( s#sock * , t#read_descriptor_t * , t#sk_read_actor_t ) 
tcp_recvmsg extern int tcp_recvmsg ( s#kiocb * , s#sock * , s#msghdr * , t#size_t , int , int , int * ) 
tcp_sendmsg extern int tcp_sendmsg ( s#kiocb * , s#socket * , s#msghdr * , t#size_t ) 
tcp_splice_read extern t#ssize_t tcp_splice_read ( s#socket * , t#loff_t * , s#pipe_inode_info * , t#size_t , unsigned int ) 
tcp_sendpage extern t#ssize_t tcp_sendpage ( s#socket * , s#page * , int , t#size_t , int ) 
tcp_setsockopt extern int tcp_setsockopt ( s#sock * , int , int , char * , unsigned int ) 
tcp_shutdown extern void tcp_shutdown ( s#sock * , int ) 

/* net/ipv4/tcp_cong.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##udp_table
s##raw_hashinfo
s##xfrm_policy
tcp_register_congestion_control extern int tcp_register_congestion_control ( s#tcp_congestion_ops * ) 
tcp_unregister_congestion_control extern void tcp_unregister_congestion_control ( s#tcp_congestion_ops * ) 
tcp_is_cwnd_limited extern int tcp_is_cwnd_limited ( const s#sock * , t#u32 ) 
s##ipv6_mc_socklist
s##ipv6_ac_socklist
s##ipv6_fl_socklist
s##ipv6_txoptions
s##ip_mc_socklist
s#dma_page_list struct dma_page_list { char * base_address ; int nr_pages ; s#page * * pages ; } 
s#dma_pinned_list struct dma_pinned_list { int nr_iovecs ; s#dma_page_list page_list [ 0 ] ; } 
s#tcp_sack_block struct tcp_sack_block { t#u32 start_seq ; t#u32 end_seq ; } 
s#tcp_sock struct tcp_sock { s#inet_connection_sock inet_conn ; t#u16 tcp_header_len ; t#u16 xmit_size_goal_segs ; t#__be32 pred_flags ; t#u32 rcv_nxt ; t#u32 copied_seq ; t#u32 rcv_wup ; t#u32 snd_nxt ; t#u32 snd_una ; t#u32 snd_sml ; t#u32 rcv_tstamp ; t#u32 lsndtime ; struct { s#sk_buff_head prequeue ; s#task_struct * task ; s#iovec * iov ; int memory ; int len ; s#dma_chan * dma_chan ; int wakeup ; s#dma_pinned_list * pinned_list ; t#dma_cookie_t dma_cookie ; } ucopy ; t#u32 snd_wl1 ; t#u32 snd_wnd ; t#u32 max_window ; t#u32 mss_cache ; t#u32 window_clamp ; t#u32 rcv_ssthresh ; t#u32 frto_highmark ; t#u16 advmss ; t#u8 frto_counter ; t#u8 nonagle ; t#u32 srtt ; t#u32 mdev ; t#u32 mdev_max ; t#u32 rttvar ; t#u32 rtt_seq ; t#u32 packets_out ; t#u32 retrans_out ; t#u16 urg_data ; t#u8 ecn_flags ; t#u8 reordering ; t#u32 snd_up ; t#u8 keepalive_probes ; s#tcp_options_received rx_opt ; t#u32 snd_ssthresh ; t#u32 snd_cwnd ; t#u32 snd_cwnd_cnt ; t#u32 snd_cwnd_clamp ; t#u32 snd_cwnd_used ; t#u32 snd_cwnd_stamp ; t#u32 rcv_wnd ; t#u32 write_seq ; t#u32 pushed_seq ; t#u32 lost_out ; t#u32 sacked_out ; t#u32 fackets_out ; t#u32 tso_deferred ; t#u32 bytes_acked ; s#sk_buff * lost_skb_hint ; s#sk_buff * scoreboard_skb_hint ; s#sk_buff * retransmit_skb_hint ; s#sk_buff_head out_of_order_queue ; s#tcp_sack_block duplicate_sack [ 1 ] ; s#tcp_sack_block selective_acks [ 4 ] ; s#tcp_sack_block recv_sack_cache [ 4 ] ; s#sk_buff * highest_sack ; int lost_cnt_hint ; t#u32 retransmit_high ; t#u32 lost_retrans_low ; t#u32 prior_ssthresh ; t#u32 high_seq ; t#u32 retrans_stamp ; t#u32 undo_marker ; int undo_retrans ; t#u32 total_retrans ; t#u32 urg_seq ; unsigned int keepalive_time ; unsigned int keepalive_intvl ; int linger2 ; struct { t#u32 rtt ; t#u32 seq ; t#u32 time ; } rcv_rtt_est ; struct { int space ; t#u32 seq ; t#u32 time ; } rcvq_space ; struct { t#u32 probe_seq_start ; t#u32 probe_seq_end ; } mtu_probe ; } 
tcp_slow_start extern void tcp_slow_start ( s#tcp_sock * ) 
tcp_cong_avoid_ai extern void tcp_cong_avoid_ai ( s#tcp_sock * , t#u32 ) 
tcp_reno_cong_avoid extern void tcp_reno_cong_avoid ( s#sock * , t#u32 , t#u32 ) 
tcp_reno_ssthresh extern t#u32 tcp_reno_ssthresh ( s#sock * ) 
tcp_reno_min_cwnd extern t#u32 tcp_reno_min_cwnd ( const s#sock * ) 
tcp_init_congestion_ops extern s#tcp_congestion_ops tcp_init_congestion_ops 

/* net/ipv4/tcp_input.o */
sysctl_tcp_ecn extern int sysctl_tcp_ecn 
sysctl_tcp_reordering extern int sysctl_tcp_reordering 
sysctl_tcp_adv_win_scale extern int sysctl_tcp_adv_win_scale 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
tcp_parse_options extern void tcp_parse_options ( s#sk_buff * , s#tcp_options_received * , int ) 
tcp_rcv_established extern int tcp_rcv_established ( s#sock * , s#sk_buff * , s#tcphdr * , unsigned ) 
tcp_rcv_state_process extern int tcp_rcv_state_process ( s#sock * , s#sk_buff * , s#tcphdr * , unsigned ) 
tcp_initialize_rcv_mss extern void tcp_initialize_rcv_mss ( s#sock * ) 

/* net/ipv4/tcp_ipv4.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##udp_table
s##raw_hashinfo
tcp_twsk_unique extern int tcp_twsk_unique ( s#sock * , s#sock * , void * ) 
tcp_v4_destroy_sock extern void tcp_v4_destroy_sock ( s#sock * ) 
tcp4_gro_receive extern s#sk_buff * * tcp4_gro_receive ( s#sk_buff * * , s#sk_buff * ) 
tcp4_gro_complete extern int tcp4_gro_complete ( s#sk_buff * ) 
ipv4_specific extern const s#inet_connection_sock_af_ops ipv4_specific 
tcp_hashinfo extern s#inet_hashinfo tcp_hashinfo 
tcp_prot extern s#proto tcp_prot 
tcp_v4_conn_request extern int tcp_v4_conn_request ( s#sock * , s#sk_buff * ) 
tcp_v4_connect extern int tcp_v4_connect ( s#sock * , s#sockaddr * , int ) 
tcp_v4_do_rcv extern int tcp_v4_do_rcv ( s#sock * , s#sk_buff * ) 
tcp_v4_remember_stamp extern int tcp_v4_remember_stamp ( s#sock * ) 
tcp_v4_send_check extern void tcp_v4_send_check ( s#sock * , int , s#sk_buff * ) 
tcp_v4_syn_recv_sock extern s#sock * tcp_v4_syn_recv_sock ( s#sock * , s#sk_buff * , s#request_sock * , s#dst_entry * ) 
s#tcp_seq_afinfo struct tcp_seq_afinfo { char * name ; t#sa_family_t family ; s#file_operations seq_fops ; s#seq_operations seq_ops ; } 
tcp_proc_register extern int tcp_proc_register ( s#net * , s#tcp_seq_afinfo * ) 
tcp_proc_unregister extern void tcp_proc_unregister ( s#net * , s#tcp_seq_afinfo * ) 
sysctl_tcp_low_latency extern int sysctl_tcp_low_latency 

/* net/ipv4/tcp_minisocks.o */
sysctl_tcp_syncookies extern int sysctl_tcp_syncookies 
s##tvec_base
s##array_cache
s##kmem_list3
tcp_death_row extern s#inet_timewait_death_row tcp_death_row 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##udp_table
s##raw_hashinfo
tcp_twsk_destructor extern void tcp_twsk_destructor ( s#sock * ) 
tcp_check_req extern s#sock * tcp_check_req ( s#sock * , s#sk_buff * , s#request_sock * , s#request_sock * * ) 
tcp_child_process extern int tcp_child_process ( s#sock * , s#sock * , s#sk_buff * ) 
tcp_create_openreq_child extern s#sock * tcp_create_openreq_child ( s#sock * , s#request_sock * , s#sk_buff * ) 
e#tcp_tw_status enum tcp_tw_status { TCP_TW_SUCCESS = 0 , TCP_TW_RST = 1 , TCP_TW_ACK = 2 , TCP_TW_SYN = 3 } 
tcp_timewait_state_process extern e#tcp_tw_status tcp_timewait_state_process ( s#inet_timewait_sock * , s#sk_buff * , const s#tcphdr * ) 

/* net/ipv4/tcp_output.o */
tcp_select_initial_window extern void tcp_select_initial_window ( int , t#__u32 , t#__u32 * , t#__u32 * , int , t#__u8 * ) 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##udp_table
s##raw_hashinfo
s##xfrm_policy
tcp_connect extern int tcp_connect ( s#sock * ) 
tcp_make_synack extern s#sk_buff * tcp_make_synack ( s#sock * , s#dst_entry * , s#request_sock * ) 
tcp_simple_retransmit extern void tcp_simple_retransmit ( s#sock * ) 
tcp_sync_mss extern unsigned int tcp_sync_mss ( s#sock * , t#u32 ) 
tcp_mtup_init extern void tcp_mtup_init ( s#sock * ) 

/* net/ipv4/tcp_timer.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##udp_table
s##raw_hashinfo
s##xfrm_policy
tcp_init_xmit_timers extern void tcp_init_xmit_timers ( s#sock * ) 

/* net/ipv4/tcp_vegas.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##udp_table
s##raw_hashinfo
s##xfrm_policy
tcp_vegas_init extern void tcp_vegas_init ( s#sock * ) 
tcp_vegas_pkts_acked extern void tcp_vegas_pkts_acked ( s#sock * , t#u32 , t#s32 ) 
tcp_vegas_state extern void tcp_vegas_state ( s#sock * , t#u8 ) 
tcp_vegas_cwnd_event extern void tcp_vegas_cwnd_event ( s#sock * , e#tcp_ca_event ) 
tcp_vegas_get_info extern void tcp_vegas_get_info ( s#sock * , t#u32 , s#sk_buff * ) 

/* net/ipv4/tunnel4.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s#xfrm_tunnel struct xfrm_tunnel { int ( * handler ) ( s#sk_buff * ) ; int ( * err_handler ) ( s#sk_buff * , t#__u32 ) ; s#xfrm_tunnel * next ; int priority ; } 
xfrm4_tunnel_register extern int xfrm4_tunnel_register ( s#xfrm_tunnel * , unsigned short ) 
xfrm4_tunnel_deregister extern int xfrm4_tunnel_deregister ( s#xfrm_tunnel * , unsigned short ) 

/* net/ipv4/udp.o */
udp_table extern s#udp_table udp_table 
sysctl_udp_mem extern int sysctl_udp_mem [ 3 ] 
sysctl_udp_rmem_min extern int sysctl_udp_rmem_min 
sysctl_udp_wmem_min extern int sysctl_udp_wmem_min 
udp_memory_allocated extern t#atomic_t udp_memory_allocated 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##inet_hashinfo
s##raw_hashinfo
udp_lib_get_port extern int udp_lib_get_port ( s#sock * , unsigned short , int ( * ) ( const s#sock * , const s#sock * ) ) 
udp4_lib_lookup extern s#sock * udp4_lib_lookup ( s#net * , t#__be32 , t#__be16 , t#__be32 , t#__be16 , int ) 
udp_flush_pending_frames extern void udp_flush_pending_frames ( s#sock * ) 
udp_sendmsg extern int udp_sendmsg ( s#kiocb * , s#sock * , s#msghdr * , t#size_t ) 
udp_ioctl extern int udp_ioctl ( s#sock * , int , unsigned long ) 
udp_disconnect extern int udp_disconnect ( s#sock * , int ) 
udp_lib_unhash extern void udp_lib_unhash ( s#sock * ) 
udp_lib_setsockopt extern int udp_lib_setsockopt ( s#sock * , int , int , char * , unsigned int , int ( * ) ( s#sock * ) ) 
udp_lib_getsockopt extern int udp_lib_getsockopt ( s#sock * , int , int , char * , int * ) 
udp_poll extern unsigned int udp_poll ( s#file * , s#socket * , t#poll_table * ) 
udp_prot extern s#proto udp_prot 
s#udp_seq_afinfo struct udp_seq_afinfo { char * name ; t#sa_family_t family ; s#udp_table * udp_table ; s#file_operations seq_fops ; s#seq_operations seq_ops ; } 
udp_proc_register extern int udp_proc_register ( s#net * , s#udp_seq_afinfo * ) 
udp_proc_unregister extern void udp_proc_unregister ( s#net * , s#udp_seq_afinfo * ) 

/* net/ipv4/udplite.o */
udplite_table extern s#udp_table udplite_table 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##inet_hashinfo
s##raw_hashinfo
udplite_prot extern s#proto udplite_prot 

/* net/ipv4/xfrm4_input.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
xfrm4_rcv_encap extern int xfrm4_rcv_encap ( s#sk_buff * , int , t#__be32 , int ) 
xfrm4_rcv extern int xfrm4_rcv ( s#sk_buff * ) 

/* net/ipv4/xfrm4_output.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##in_device
s##dn_route
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ebt_table
s##ip_conntrack_stat
s##net_generic
xfrm4_prepare_output extern int xfrm4_prepare_output ( s#xfrm_state * , s#sk_buff * ) 

/* net/ipv6/addrconf.o */
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##xfrm_state
s##ip_mc_list
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##tcf_walker
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
in6_dev_finish_destroy extern void in6_dev_finish_destroy ( s#inet6_dev * ) 
ipv6_dev_get_saddr extern int ipv6_dev_get_saddr ( s#net * , s#net_device * , const s#in6_addr * , unsigned int , s#in6_addr * ) 
ipv6_chk_addr extern int ipv6_chk_addr ( s#net * , s#in6_addr * , s#net_device * , int ) 
ipv6_chk_prefix extern int ipv6_chk_prefix ( s#in6_addr * , s#net_device * ) 
__ipv6_isatap_ifid extern int __ipv6_isatap_ifid ( t#u8 * , t#__be32 ) 
register_inet6addr_notifier extern int register_inet6addr_notifier ( s#notifier_block * ) 
unregister_inet6addr_notifier extern int unregister_inet6addr_notifier ( s#notifier_block * ) 

/* net/ipv6/addrconf_core.o */
__ipv6_addr_type extern int __ipv6_addr_type ( const s#in6_addr * ) 

/* net/ipv6/af_inet6.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##raw_hashinfo
s##xfrm_policy
inet6_bind extern int inet6_bind ( s#socket * , s#sockaddr * , int ) 
inet6_release extern int inet6_release ( s#socket * ) 
inet6_destroy_sock extern void inet6_destroy_sock ( s#sock * ) 
inet6_getname extern int inet6_getname ( s#socket * , s#sockaddr * , int * , int ) 
inet6_ioctl extern int inet6_ioctl ( s#socket * , unsigned int , unsigned long ) 
inet6_register_protosw extern int inet6_register_protosw ( s#inet_protosw * ) 
inet6_unregister_protosw extern void inet6_unregister_protosw ( s#inet_protosw * ) 
inet6_sk_rebuild_header extern int inet6_sk_rebuild_header ( s#sock * ) 
ipv6_opt_accepted extern int ipv6_opt_accepted ( s#sock * , s#sk_buff * ) 

/* net/ipv6/exthdrs.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
ipv6_find_tlv extern int ipv6_find_tlv ( s#sk_buff * , int , int ) 
ipv6_push_nfrag_opts extern void ipv6_push_nfrag_opts ( s#sk_buff * , s#ipv6_txoptions * , t#u8 * , s#in6_addr * * ) 
ipv6_dup_options extern s#ipv6_txoptions * ipv6_dup_options ( s#sock * , s#ipv6_txoptions * ) 

/* net/ipv6/exthdrs_core.o */
ipv6_ext_hdr extern int ipv6_ext_hdr ( t#u8 ) 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
ipv6_skip_exthdr extern int ipv6_skip_exthdr ( const s#sk_buff * , int , t#u8 * ) 

/* net/ipv6/icmp.o */
icmpv6_statistics __typeof__ ( s#icmpv6_mib ) * icmpv6_statistics [ 2 ] 
icmpv6msg_statistics __typeof__ ( s#icmpv6msg_mib ) * icmpv6msg_statistics [ 2 ] 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
icmpv6_send extern void icmpv6_send ( s#sk_buff * , t#u8 , t#u8 , t#__u32 , s#net_device * ) 
icmpv6_err_convert extern int icmpv6_err_convert ( t#u8 , t#u8 , int * ) 

/* net/ipv6/inet6_connection_sock.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##udp_table
s##raw_hashinfo
s##xfrm_policy
inet6_csk_bind_conflict extern int inet6_csk_bind_conflict ( const s#sock * , const s#inet_bind_bucket * ) 
inet6_csk_search_req extern s#request_sock * inet6_csk_search_req ( const s#sock * , s#request_sock * * * , const t#__be16 , const s#in6_addr * , const s#in6_addr * , const int ) 
inet6_csk_reqsk_queue_hash_add extern void inet6_csk_reqsk_queue_hash_add ( s#sock * , s#request_sock * , const unsigned long ) 
inet6_csk_addr2sockaddr extern void inet6_csk_addr2sockaddr ( s#sock * , s#sockaddr * ) 
inet6_csk_xmit extern int inet6_csk_xmit ( s#sk_buff * , int ) 

/* net/ipv6/inet6_hashtables.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##udp_table
s##raw_hashinfo
s##xfrm_policy
__inet6_hash extern void __inet6_hash ( s#sock * ) 
__inet6_lookup_established extern s#sock * __inet6_lookup_established ( s#net * , s#inet_hashinfo * , const s#in6_addr * , const t#__be16 , const s#in6_addr * , const t#u16 , const int ) 
inet6_lookup_listener extern s#sock * inet6_lookup_listener ( s#net * , s#inet_hashinfo * , const s#in6_addr * , const unsigned short , const int ) 
inet6_lookup extern s#sock * inet6_lookup ( s#net * , s#inet_hashinfo * , const s#in6_addr * , const t#__be16 , const s#in6_addr * , const t#__be16 , const int ) 
inet6_hash_connect extern int inet6_hash_connect ( s#inet_timewait_death_row * , s#sock * ) 

/* net/ipv6/ip6_flowlabel.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##rtable
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ebt_table
s##ip_conntrack_stat
s##net_generic
fl6_sock_lookup extern s#ip6_flowlabel * fl6_sock_lookup ( s#sock * , t#__be32 ) 

/* net/ipv6/ip6_output.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
ip6_local_out extern int ip6_local_out ( s#sk_buff * ) 
ip6_xmit extern int ip6_xmit ( s#sock * , s#sk_buff * , s#flowi * , s#ipv6_txoptions * , int ) 
ip6_dst_lookup extern int ip6_dst_lookup ( s#sock * , s#dst_entry * * , s#flowi * ) 
ip6_sk_dst_lookup extern int ip6_sk_dst_lookup ( s#sock * , s#dst_entry * * , s#flowi * ) 

/* net/ipv6/ipv6_sockglue.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##raw_hashinfo
ipv6_setsockopt extern int ipv6_setsockopt ( s#sock * , int , int , char * , unsigned int ) 
compat_ipv6_setsockopt extern int compat_ipv6_setsockopt ( s#sock * , int , int , char * , unsigned int ) 
ipv6_getsockopt extern int ipv6_getsockopt ( s#sock * , int , int , char * , int * ) 
compat_ipv6_getsockopt extern int compat_ipv6_getsockopt ( s#sock * , int , int , char * , int * ) 

/* net/ipv6/ndisc.o */
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
ndisc_mc_map extern int ndisc_mc_map ( s#in6_addr * , char * , s#net_device * , int ) 
ndisc_build_skb extern s#sk_buff * ndisc_build_skb ( s#net_device * , const s#in6_addr * , const s#in6_addr * , s#icmp6hdr * , const s#in6_addr * , int ) 
ndisc_send_skb extern void ndisc_send_skb ( s#sk_buff * , s#net_device * , s#neighbour * , const s#in6_addr * , const s#in6_addr * , s#icmp6hdr * ) 

/* net/ipv6/netfilter.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
ip6_route_me_harder extern int ip6_route_me_harder ( s#sk_buff * ) 
nf_ip6_checksum extern t#__sum16 nf_ip6_checksum ( s#sk_buff * , unsigned int , unsigned int , t#u_int8_t ) 

/* net/ipv6/netfilter/ip6_tables.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##iw_handler_def
s##iw_public_data
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##rtable
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s#ip6t_ip6 struct ip6t_ip6 { s#in6_addr src , dst ; s#in6_addr smsk , dmsk ; char iniface [ 16 ] , outiface [ 16 ] ; unsigned char iniface_mask [ 16 ] , outiface_mask [ 16 ] ; t#u_int16_t proto ; t#u_int8_t tos ; t#u_int8_t flags ; t#u_int8_t invflags ; } 
s#ip6t_entry struct ip6t_entry { s#ip6t_ip6 ipv6 ; unsigned int nfcache ; t#u_int16_t target_offset ; t#u_int16_t next_offset ; unsigned int comefrom ; s#xt_counters counters ; unsigned char elems [ 0 ] ; } 
s#ip6t_replace struct ip6t_replace { char name [ 32 ] ; unsigned int valid_hooks ; unsigned int num_entries ; unsigned int size ; unsigned int hook_entry [ NF_INET_NUMHOOKS ] ; unsigned int underflow [ NF_INET_NUMHOOKS ] ; unsigned int num_counters ; s#xt_counters * counters ; s#ip6t_entry entries [ 0 ] ; } 
ip6t_register_table extern s#xt_table * ip6t_register_table ( s#net * , const s#xt_table * , const s#ip6t_replace * ) 
ip6t_unregister_table extern void ip6t_unregister_table ( s#xt_table * ) 
ip6t_do_table extern unsigned int ip6t_do_table ( s#sk_buff * , unsigned int , const s#net_device * , const s#net_device * , s#xt_table * ) 
ip6t_ext_hdr extern int ip6t_ext_hdr ( t#u8 ) 
ipv6_find_hdr extern int ipv6_find_hdr ( const s#sk_buff * , unsigned int * , int , unsigned short * ) 

/* net/ipv6/protocol.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s#inet6_skb_parm struct inet6_skb_parm { int iif ; t#__u16 ra ; t#__u16 hop ; t#__u16 dst0 ; t#__u16 srcrt ; t#__u16 dst1 ; t#__u16 lastopt ; t#__u32 nhoff ; t#__u16 flags ; t#__u16 dsthao ; } 
s#inet6_protocol struct inet6_protocol { int ( * handler ) ( s#sk_buff * ) ; void ( * err_handler ) ( s#sk_buff * , s#inet6_skb_parm * , t#u8 , t#u8 , int , t#__be32 ) ; int ( * gso_send_check ) ( s#sk_buff * ) ; s#sk_buff * ( * gso_segment ) ( s#sk_buff * , int ) ; s#sk_buff * * ( * gro_receive ) ( s#sk_buff * * , s#sk_buff * ) ; int ( * gro_complete ) ( s#sk_buff * ) ; unsigned int flags ; } 
inet6_add_protocol extern int inet6_add_protocol ( const s#inet6_protocol * , unsigned char ) 
inet6_del_protocol extern int inet6_del_protocol ( const s#inet6_protocol * , unsigned char ) 

/* net/ipv6/raw.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##inet_hashinfo
rawv6_mh_filter_register int rawv6_mh_filter_register ( int ( * ) ( s#sock * , s#sk_buff * ) ) 
rawv6_mh_filter_unregister int rawv6_mh_filter_unregister ( int ( * ) ( s#sock * , s#sk_buff * ) ) 

/* net/ipv6/reassembly.o */
inet6_hash_frag extern unsigned int inet6_hash_frag ( t#__be32 , const s#in6_addr * , const s#in6_addr * , t#u32 ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
ip6_frag_match int ip6_frag_match ( s#inet_frag_queue * , void * ) 
ip6_frag_init void ip6_frag_init ( s#inet_frag_queue * , void * ) 

/* net/ipv6/route.o */
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##tvec_base
s##mfc_cache
s##vif_device
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##eventfd_ctx
s##udp_table
s##raw_hashinfo
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##in_device
s##dn_route
rt6_lookup extern s#rt6_info * rt6_lookup ( s#net * , const s#in6_addr * , const s#in6_addr * , int , int ) 
ip6_route_output extern s#dst_entry * ip6_route_output ( s#net * , s#sock * , s#flowi * ) 
ip6_dst_blackhole extern int ip6_dst_blackhole ( s#sock * , s#dst_entry * * , s#flowi * ) 

/* net/ipv6/sysctl_net_ipv6.o */
net_ipv6_ctl_path extern s#ctl_path net_ipv6_ctl_path [ ] 

/* net/ipv6/tunnel6.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s#xfrm6_tunnel struct xfrm6_tunnel { int ( * handler ) ( s#sk_buff * ) ; int ( * err_handler ) ( s#sk_buff * , s#inet6_skb_parm * , t#u8 , t#u8 , int , t#__be32 ) ; s#xfrm6_tunnel * next ; int priority ; } 
xfrm6_tunnel_register extern int xfrm6_tunnel_register ( s#xfrm6_tunnel * , unsigned short ) 
xfrm6_tunnel_deregister extern int xfrm6_tunnel_deregister ( s#xfrm6_tunnel * , unsigned short ) 

/* net/ipv6/xfrm6_input.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
xfrm6_rcv_spi extern int xfrm6_rcv_spi ( s#sk_buff * , int , t#__be32 ) 
xfrm6_rcv extern int xfrm6_rcv ( s#sk_buff * ) 
xfrm6_input_addr extern int xfrm6_input_addr ( s#sk_buff * , t#xfrm_address_t * , t#xfrm_address_t * , t#u8 ) 

/* net/ipv6/xfrm6_output.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##in_device
s##dn_route
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ebt_table
s##ip_conntrack_stat
s##net_generic
xfrm6_find_1stfragopt extern int xfrm6_find_1stfragopt ( s#xfrm_state * , s#sk_buff * , t#u8 * * ) 
xfrm6_prepare_output extern int xfrm6_prepare_output ( s#xfrm_state * , s#sk_buff * ) 

/* net/ipv6/xfrm6_tunnel.o */
xfrm6_tunnel_spi_lookup extern t#__be32 xfrm6_tunnel_spi_lookup ( t#xfrm_address_t * ) 
xfrm6_tunnel_alloc_spi extern t#__be32 xfrm6_tunnel_alloc_spi ( t#xfrm_address_t * ) 
xfrm6_tunnel_free_spi extern void xfrm6_tunnel_free_spi ( t#xfrm_address_t * ) 

/* net/irda/ircomm/ircomm_core.o */
s#irda_queue struct irda_queue { s#irda_queue * q_next ; s#irda_queue * q_prev ; char q_name [ 32 ] ; long q_hash ; } 
t#irda_queue_t typedef s#irda_queue irda_queue_t 
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
t#LM_REASON typedef enum { LM_USER_REQUEST = 1 , LM_LAP_DISCONNECT , LM_CONNECT_FAILURE , LM_LAP_RESET , LM_INIT_DISCONNECT , LM_LSAP_NOTCONN , LM_NON_RESP_CLIENT , LM_NO_AVAIL_CLIENT , LM_CONN_HALF_OPEN , LM_BAD_SOURCE_ADDR , } LM_REASON 
t#LOCAL_FLOW typedef enum { FLOW_STOP , FLOW_START } LOCAL_FLOW 
t#LINK_STATUS typedef enum { STATUS_OK , STATUS_ABORTED , STATUS_NO_ACTIVITY , STATUS_NOISY , STATUS_REMOTE , } LINK_STATUS 
t#LOCK_STATUS typedef enum { LOCK_NO_CHANGE , LOCK_LOCKED , LOCK_UNLOCKED , } LOCK_STATUS 
t#notify_t typedef struct { int ( * data_indication ) ( void * , void * , s#sk_buff * ) ; int ( * udata_indication ) ( void * , void * , s#sk_buff * ) ; void ( * connect_confirm ) ( void * , void * , s#qos_info * , t#__u32 , t#__u8 , s#sk_buff * ) ; void ( * connect_indication ) ( void * , void * , s#qos_info * , t#__u32 , t#__u8 , s#sk_buff * ) ; void ( * disconnect_indication ) ( void * , void * , t#LM_REASON , s#sk_buff * ) ; void ( * flow_indication ) ( void * , void * , t#LOCAL_FLOW ) ; void ( * status_indication ) ( void * , t#LINK_STATUS , t#LOCK_STATUS ) ; void * instance ; char name [ 16 ] ; } notify_t 
s#ircomm_info struct ircomm_info { t#__u32 saddr ; t#__u32 daddr ; t#__u8 dlsap_sel ; t#LM_REASON reason ; t#__u32 max_data_size ; t#__u32 max_header_size ; s#qos_info * qos ; } 
t#call_t typedef struct { int ( * data_request ) ( s#ircomm_cb * , s#sk_buff * , int ) ; int ( * connect_request ) ( s#ircomm_cb * , s#sk_buff * , s#ircomm_info * ) ; int ( * connect_response ) ( s#ircomm_cb * , s#sk_buff * ) ; int ( * disconnect_request ) ( s#ircomm_cb * , s#sk_buff * , s#ircomm_info * ) ; } call_t 
t#LSAP_STATE typedef enum { LSAP_DISCONNECTED , LSAP_CONNECT , LSAP_CONNECT_PEND , LSAP_DATA_TRANSFER_READY , LSAP_SETUP , LSAP_SETUP_PEND , } LSAP_STATE 
t#IRLMP_STATE typedef enum { LAP_STANDBY , LAP_U_CONNECT , LAP_ACTIVE , } IRLMP_STATE 
t#IRLAP_STATE typedef enum { LAP_NDM , LAP_QUERY , LAP_REPLY , LAP_CONN , LAP_SETUP , LAP_OFFLINE , LAP_XMIT_P , LAP_PCLOSE , LAP_NRM_P , LAP_RESET_WAIT , LAP_RESET , LAP_NRM_S , LAP_XMIT_S , LAP_SCLOSE , LAP_RESET_CHECK , } IRLAP_STATE 
s#hashbin_t struct hashbin_t { t#__u32 magic ; int hb_type ; int hb_size ; t#spinlock_t hb_spinlock ; t#irda_queue_t * hb_queue [ 8 ] __attribute__ ( ( aligned ) ) ; t#irda_queue_t * hb_current ; } 
t#hashbin_t typedef s#hashbin_t hashbin_t 
s#irda_device_info struct irda_device_info { t#__u32 saddr ; t#__u32 daddr ; char info [ 22 ] ; t#__u8 charset ; t#__u8 hints [ 2 ] ; } 
t#discinfo_t typedef s#irda_device_info discinfo_t 
t#LAP_REASON typedef enum { LAP_DISC_INDICATION = 1 , LAP_NO_RESPONSE , LAP_RESET_INDICATION , LAP_FOUND_NONE , LAP_MEDIA_BUSY , LAP_PRIMARY_CONFLICT , } LAP_REASON 
s#discovery_t struct discovery_t { t#irda_queue_t q ; t#discinfo_t data ; int name_len ; t#LAP_REASON condition ; int gen_addr_bit ; int nslots ; unsigned long timestamp ; unsigned long firststamp ; } 
t#discovery_t typedef s#discovery_t discovery_t 
s#irlap_cb struct irlap_cb { t#irda_queue_t q ; t#magic_t magic ; s#net_device * netdev ; char hw_name [ 2 * 16 + 1 ] ; volatile t#IRLAP_STATE state ; s#timer_list query_timer ; s#timer_list slot_timer ; s#timer_list discovery_timer ; s#timer_list final_timer ; s#timer_list poll_timer ; s#timer_list wd_timer ; s#timer_list backoff_timer ; s#timer_list media_busy_timer ; int media_busy ; int slot_timeout ; int poll_timeout ; int final_timeout ; int wd_timeout ; s#sk_buff_head txq ; s#sk_buff_head txq_ultra ; t#__u8 caddr ; t#__u32 saddr ; t#__u32 daddr ; int retry_count ; int add_wait ; t#__u8 connect_pending ; t#__u8 disconnect_pending ; int N1 ; int N2 ; int N3 ; int local_busy ; int remote_busy ; int xmitflag ; t#__u8 vs ; t#__u8 vr ; t#__u8 va ; int window ; int window_size ; t#__u32 line_capacity ; t#__u32 bytes_left ; s#sk_buff_head wx_list ; t#__u8 ack_required ; t#__u8 S ; t#__u8 slot ; t#__u8 s ; int frame_sent ; t#hashbin_t * discovery_log ; t#discovery_t * discovery_cmd ; t#__u32 speed ; s#qos_info qos_tx ; s#qos_info qos_rx ; s#qos_info * qos_dev ; t#notify_t notify ; int mtt_required ; int xbofs_delay ; int bofs_count ; int next_bofs ; int mode ; } 
t#CACHE_ENTRY typedef struct { int valid ; t#__u8 slsap_sel ; t#__u8 dlsap_sel ; s#lsap_cb * lsap ; } CACHE_ENTRY 
s#lap_cb struct lap_cb { t#irda_queue_t queue ; t#magic_t magic ; int reason ; t#IRLMP_STATE lap_state ; s#irlap_cb * irlap ; t#hashbin_t * lsaps ; s#lsap_cb * flow_next ; t#__u8 caddr ; t#__u32 saddr ; t#__u32 daddr ; s#qos_info * qos ; s#timer_list idle_timer ; t#CACHE_ENTRY cache ; } 
s#lsap_cb struct lsap_cb { t#irda_queue_t queue ; t#magic_t magic ; unsigned long connected ; int persistent ; t#__u8 slsap_sel ; t#__u8 dlsap_sel ; t#__u8 pid ; s#sk_buff * conn_skb ; s#timer_list watchdog_timer ; t#LSAP_STATE lsap_state ; t#notify_t notify ; s#qos_info qos ; s#lap_cb * lap ; } 
s#tsap_cb struct tsap_cb { t#irda_queue_t q ; t#magic_t magic ; t#__u8 stsap_sel ; t#__u8 dtsap_sel ; s#lsap_cb * lsap ; t#__u8 connected ; t#__u8 initial_credit ; int avail_credit ; int remote_credit ; int send_credit ; s#sk_buff_head tx_queue ; s#sk_buff_head rx_queue ; s#sk_buff_head rx_fragments ; int tx_queue_lock ; int rx_queue_lock ; t#spinlock_t lock ; t#notify_t notify ; s#net_device_stats stats ; s#timer_list todo_timer ; t#__u32 max_seg_size ; t#__u8 max_header_size ; int rx_sdu_busy ; t#__u32 rx_sdu_size ; t#__u32 rx_max_sdu_size ; int tx_sdu_busy ; t#__u32 tx_max_sdu_size ; int close_pend ; unsigned long disconnect_pend ; s#sk_buff * disconnect_skb ; } 
s#ircomm_cb struct ircomm_cb { t#irda_queue_t queue ; t#magic_t magic ; t#notify_t notify ; t#call_t issue ; int state ; int line ; s#tsap_cb * tsap ; s#lsap_cb * lsap ; t#__u8 dlsap_sel ; t#__u8 slsap_sel ; t#__u32 saddr ; t#__u32 daddr ; int max_header_size ; int max_data_size ; t#LOCAL_FLOW flow_status ; int pkt_count ; t#__u8 service_type ; } 
ircomm_open s#ircomm_cb * ircomm_open ( t#notify_t * , t#__u8 , int ) 
ircomm_close int ircomm_close ( s#ircomm_cb * ) 
ircomm_connect_request int ircomm_connect_request ( s#ircomm_cb * , t#__u8 , t#__u32 , t#__u32 , s#sk_buff * , t#__u8 ) 
ircomm_connect_response int ircomm_connect_response ( s#ircomm_cb * , s#sk_buff * ) 
ircomm_data_request int ircomm_data_request ( s#ircomm_cb * , s#sk_buff * ) 
ircomm_control_request int ircomm_control_request ( s#ircomm_cb * , s#sk_buff * ) 
ircomm_disconnect_request int ircomm_disconnect_request ( s#ircomm_cb * , s#sk_buff * ) 
ircomm_flow_request void ircomm_flow_request ( s#ircomm_cb * , t#LOCAL_FLOW ) 

/* net/irda/irda_device.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##tcf_walker
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##tvec_base
s##netpoll_info
s##map_segment
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
irda_device_set_media_busy void irda_device_set_media_busy ( s#net_device * , int ) 
alloc_irdadev s#net_device * alloc_irdadev ( int ) 
irda_setup_dma void irda_setup_dma ( int , t#dma_addr_t , int , int ) 

/* net/irda/iriap.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
t#IRIAP_STATE typedef enum { S_DISCONNECT , S_CONNECTING , S_CALL , S_MAKE_CALL , S_CALLING , S_OUTSTANDING , S_REPLYING , S_WAIT_FOR_CALL , S_WAIT_ACTIVE , R_DISCONNECT , R_CALL , R_WAITING , R_WAIT_ACTIVE , R_RECEIVING , R_EXECUTE , R_RETURNING , } IRIAP_STATE 
s#ias_value struct ias_value { t#__u8 type ; t#__u8 owner ; int charset ; int len ; union { int integer ; char * string ; t#__u8 * oct_seq ; } t ; } 
t#CONFIRM_CALLBACK typedef void ( * CONFIRM_CALLBACK ) ( int , t#__u16 , s#ias_value * , void * ) 
s#iriap_cb struct iriap_cb { t#irda_queue_t q ; t#magic_t magic ; int mode ; t#__u32 saddr ; t#__u32 daddr ; t#__u8 operation ; s#sk_buff * request_skb ; s#lsap_cb * lsap ; t#__u8 slsap_sel ; t#IRIAP_STATE client_state ; t#IRIAP_STATE call_state ; t#IRIAP_STATE server_state ; t#IRIAP_STATE r_connect_state ; t#CONFIRM_CALLBACK confirm ; void * priv ; t#__u8 max_header_size ; t#__u32 max_data_size ; s#timer_list watchdog_timer ; } 
iriap_open s#iriap_cb * iriap_open ( t#__u8 , int , void * , t#CONFIRM_CALLBACK ) 
iriap_close void iriap_close ( s#iriap_cb * ) 
iriap_getvaluebyclass_request int iriap_getvaluebyclass_request ( s#iriap_cb * , t#__u32 , t#__u32 , char * , char * ) 

/* net/irda/irias_object.o */
s#ias_object struct ias_object { t#irda_queue_t q ; t#magic_t magic ; char * name ; int id ; t#hashbin_t * attribs ; } 
irias_new_object s#ias_object * irias_new_object ( char * , int ) 
irias_delete_object int irias_delete_object ( s#ias_object * ) 
irias_insert_object void irias_insert_object ( s#ias_object * ) 
irias_find_object s#ias_object * irias_find_object ( char * ) 
irias_object_change_attribute int irias_object_change_attribute ( char * , char * , s#ias_value * ) 
irias_add_integer_attrib void irias_add_integer_attrib ( s#ias_object * , char * , int , int ) 
irias_add_octseq_attrib void irias_add_octseq_attrib ( s#ias_object * , char * , t#__u8 * , int , int ) 
irias_add_string_attrib void irias_add_string_attrib ( s#ias_object * , char * , char * , int ) 
irias_new_integer_value s#ias_value * irias_new_integer_value ( int ) 
irias_delete_value void irias_delete_value ( s#ias_value * ) 

/* net/irda/irlap.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##tcf_walker
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##tvec_base
s##netpoll_info
s##map_segment
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
irlap_open s#irlap_cb * irlap_open ( s#net_device * , s#qos_info * , const char * ) 
irlap_close void irlap_close ( s#irlap_cb * ) 

/* net/irda/irlmp.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
irlmp_open_lsap s#lsap_cb * irlmp_open_lsap ( t#__u8 , t#notify_t * , t#__u8 ) 
irlmp_close_lsap void irlmp_close_lsap ( s#lsap_cb * ) 
irlmp_connect_request int irlmp_connect_request ( s#lsap_cb * , t#__u8 , t#__u32 , t#__u32 , s#qos_info * , s#sk_buff * ) 
irlmp_connect_response int irlmp_connect_response ( s#lsap_cb * , s#sk_buff * ) 
irlmp_disconnect_request int irlmp_disconnect_request ( s#lsap_cb * , s#sk_buff * ) 
irlmp_discovery_request void irlmp_discovery_request ( int ) 
irlmp_get_discoveries t#discinfo_t * irlmp_get_discoveries ( int * , t#__u16 , int ) 
irlmp_data_request int irlmp_data_request ( s#lsap_cb * , s#sk_buff * ) 
irlmp_service_to_hint t#__u16 irlmp_service_to_hint ( int ) 
irlmp_register_service void * irlmp_register_service ( t#__u16 ) 
irlmp_unregister_service int irlmp_unregister_service ( void * ) 
t#DISCOVERY_MODE typedef enum { DISCOVERY_LOG , DISCOVERY_ACTIVE , DISCOVERY_PASSIVE , EXPIRY_TIMEOUT , } DISCOVERY_MODE 
t#DISCOVERY_CALLBACK1 typedef void ( * DISCOVERY_CALLBACK1 ) ( t#discinfo_t * , t#DISCOVERY_MODE , void * ) 
t#DISCOVERY_CALLBACK2 typedef void ( * DISCOVERY_CALLBACK2 ) ( t#discinfo_t * , t#DISCOVERY_MODE , void * ) 
irlmp_register_client void * irlmp_register_client ( t#__u16 , t#DISCOVERY_CALLBACK1 , t#DISCOVERY_CALLBACK2 , void * ) 
irlmp_update_client int irlmp_update_client ( void * , t#__u16 , t#DISCOVERY_CALLBACK1 , t#DISCOVERY_CALLBACK2 , void * ) 
irlmp_unregister_client int irlmp_unregister_client ( void * ) 

/* net/irda/irmod.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##tcf_walker
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##tvec_base
s##netpoll_info
s##map_segment
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
irda_notify_init void irda_notify_init ( t#notify_t * ) 

/* net/irda/irproc.o */
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
proc_irda s#proc_dir_entry * proc_irda 

/* net/irda/irqueue.o */
hashbin_new t#hashbin_t * hashbin_new ( int ) 
t#FREE_FUNC typedef void ( * FREE_FUNC ) ( void * ) 
hashbin_delete int hashbin_delete ( t#hashbin_t * , t#FREE_FUNC ) 
hashbin_insert void hashbin_insert ( t#hashbin_t * , t#irda_queue_t * , long , const char * ) 
hashbin_remove void * hashbin_remove ( t#hashbin_t * , long , const char * ) 
hashbin_remove_this void * hashbin_remove_this ( t#hashbin_t * , t#irda_queue_t * ) 
hashbin_find void * hashbin_find ( t#hashbin_t * , long , const char * ) 
hashbin_lock_find void * hashbin_lock_find ( t#hashbin_t * , long , const char * ) 
hashbin_get_first t#irda_queue_t * hashbin_get_first ( t#hashbin_t * ) 
hashbin_get_next t#irda_queue_t * hashbin_get_next ( t#hashbin_t * ) 

/* net/irda/irttp.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
irttp_open_tsap s#tsap_cb * irttp_open_tsap ( t#__u8 , int , t#notify_t * ) 
irttp_close_tsap int irttp_close_tsap ( s#tsap_cb * ) 
irttp_udata_request int irttp_udata_request ( s#tsap_cb * , s#sk_buff * ) 
irttp_data_request int irttp_data_request ( s#tsap_cb * , s#sk_buff * ) 
irttp_flow_request void irttp_flow_request ( s#tsap_cb * , t#LOCAL_FLOW ) 
irttp_connect_request int irttp_connect_request ( s#tsap_cb * , t#__u8 , t#__u32 , t#__u32 , s#qos_info * , t#__u32 , s#sk_buff * ) 
irttp_connect_response int irttp_connect_response ( s#tsap_cb * , t#__u32 , s#sk_buff * ) 
irttp_dup s#tsap_cb * irttp_dup ( s#tsap_cb * , void * ) 
irttp_disconnect_request int irttp_disconnect_request ( s#tsap_cb * , s#sk_buff * , int ) 

/* net/irda/parameters.o */
irda_param_pack int irda_param_pack ( t#__u8 * , char * , ... ) 
t#irda_pv_t typedef union { char * c ; t#__u32 i ; t#__u32 * ip ; } irda_pv_t 
t#irda_param_t typedef struct { t#__u8 pi ; t#__u8 pl ; t#irda_pv_t pv ; } irda_param_t 
t#PI_HANDLER typedef int ( * PI_HANDLER ) ( void * , t#irda_param_t * , int ) 
t#PV_TYPE typedef enum { PV_INTEGER , PV_INT_8_BITS , PV_INT_16_BITS , PV_STRING , PV_INT_32_BITS , PV_OCT_SEQ , PV_NO_VALUE } PV_TYPE 
t#pi_minor_info_t typedef struct { t#PI_HANDLER func ; t#PV_TYPE type ; } pi_minor_info_t 
t#pi_major_info_t typedef struct { t#pi_minor_info_t * pi_minor_call_table ; int len ; } pi_major_info_t 
t#pi_param_info_t typedef struct { t#pi_major_info_t * tables ; int len ; t#__u8 pi_mask ; int pi_major_offset ; } pi_param_info_t 
irda_param_insert int irda_param_insert ( void * , t#__u8 , t#__u8 * , int , t#pi_param_info_t * ) 
irda_param_extract_all int irda_param_extract_all ( void * , t#__u8 * , int , t#pi_param_info_t * ) 

/* net/irda/qos.o */
irda_init_max_qos_capabilies void irda_init_max_qos_capabilies ( s#qos_info * ) 
irda_qos_bits_to_value void irda_qos_bits_to_value ( s#qos_info * ) 

/* net/irda/wrapper.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##tcf_walker
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##tvec_base
s##netpoll_info
s##map_segment
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
async_wrap_skb int async_wrap_skb ( s#sk_buff * , t#__u8 * , int ) 
async_unwrap_char void async_unwrap_char ( s#net_device * , s#net_device_stats * , t#iobuff_t * , t#__u8 ) 

/* net/lapb/lapb_iface.o */
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s#lapb_register_struct struct lapb_register_struct { void ( * connect_confirmation ) ( s#net_device * , int ) ; void ( * connect_indication ) ( s#net_device * , int ) ; void ( * disconnect_confirmation ) ( s#net_device * , int ) ; void ( * disconnect_indication ) ( s#net_device * , int ) ; int ( * data_indication ) ( s#net_device * , s#sk_buff * ) ; void ( * data_transmit ) ( s#net_device * , s#sk_buff * ) ; } 
lapb_register extern int lapb_register ( s#net_device * , s#lapb_register_struct * ) 
lapb_unregister extern int lapb_unregister ( s#net_device * ) 
s#lapb_parms_struct struct lapb_parms_struct { unsigned int t1 ; unsigned int t1timer ; unsigned int t2 ; unsigned int t2timer ; unsigned int n2 ; unsigned int n2count ; unsigned int window ; unsigned int state ; unsigned int mode ; } 
lapb_getparms extern int lapb_getparms ( s#net_device * , s#lapb_parms_struct * ) 
lapb_setparms extern int lapb_setparms ( s#net_device * , s#lapb_parms_struct * ) 
lapb_connect_request extern int lapb_connect_request ( s#net_device * ) 
lapb_disconnect_request extern int lapb_disconnect_request ( s#net_device * ) 
lapb_data_request extern int lapb_data_request ( s#net_device * , s#sk_buff * ) 
lapb_data_received extern int lapb_data_received ( s#net_device * , s#sk_buff * ) 

/* net/llc/llc_core.o */
llc_sap_list extern s#list_head llc_sap_list 
llc_sap_list_lock extern t#rwlock_t llc_sap_list_lock 
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
llc_sap_find extern s#llc_sap * llc_sap_find ( unsigned char ) 
llc_sap_open extern s#llc_sap * llc_sap_open ( unsigned char , int ( * ) ( s#sk_buff * , s#net_device * , s#packet_type * , s#net_device * ) ) 
llc_sap_close extern void llc_sap_close ( s#llc_sap * ) 

/* net/llc/llc_input.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
llc_add_pack extern void llc_add_pack ( int , void ( * ) ( s#llc_sap * , s#sk_buff * ) ) 
llc_remove_pack extern void llc_remove_pack ( int ) 
llc_set_station_handler extern void llc_set_station_handler ( void ( * ) ( s#sk_buff * ) ) 

/* net/llc/llc_output.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
llc_mac_hdr_init extern int llc_mac_hdr_init ( s#sk_buff * , const unsigned char * , const unsigned char * ) 
llc_build_and_send_ui_pkt extern int llc_build_and_send_ui_pkt ( s#llc_sap * , s#sk_buff * , unsigned char * , unsigned char ) 

/* net/mac80211/agg-tx.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
ieee80211_start_tx_ba_session int ieee80211_start_tx_ba_session ( s#ieee80211_hw * , t#u8 * , t#u16 ) 
ieee80211_start_tx_ba_cb void ieee80211_start_tx_ba_cb ( s#ieee80211_hw * , t#u8 * , t#u16 ) 
ieee80211_start_tx_ba_cb_irqsafe void ieee80211_start_tx_ba_cb_irqsafe ( s#ieee80211_hw * , const t#u8 * , t#u16 ) 
e#ieee80211_back_parties enum ieee80211_back_parties { WLAN_BACK_RECIPIENT = 0 , WLAN_BACK_INITIATOR = 1 , WLAN_BACK_TIMER = 2 , } 
ieee80211_stop_tx_ba_session int ieee80211_stop_tx_ba_session ( s#ieee80211_hw * , t#u8 * , t#u16 , e#ieee80211_back_parties ) 
ieee80211_stop_tx_ba_cb void ieee80211_stop_tx_ba_cb ( s#ieee80211_hw * , t#u8 * , t#u8 ) 
ieee80211_stop_tx_ba_cb_irqsafe void ieee80211_stop_tx_ba_cb_irqsafe ( s#ieee80211_hw * , const t#u8 * , t#u16 ) 

/* net/mac80211/led.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
__ieee80211_get_radio_led_name extern char * __ieee80211_get_radio_led_name ( s#ieee80211_hw * ) 
__ieee80211_get_assoc_led_name extern char * __ieee80211_get_assoc_led_name ( s#ieee80211_hw * ) 
__ieee80211_get_tx_led_name extern char * __ieee80211_get_tx_led_name ( s#ieee80211_hw * ) 
__ieee80211_get_rx_led_name extern char * __ieee80211_get_rx_led_name ( s#ieee80211_hw * ) 

/* net/mac80211/main.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
ieee80211_tx_status_irqsafe void ieee80211_tx_status_irqsafe ( s#ieee80211_hw * , s#sk_buff * ) 
ieee80211_tx_status void ieee80211_tx_status ( s#ieee80211_hw * , s#sk_buff * ) 
ieee80211_restart_hw void ieee80211_restart_hw ( s#ieee80211_hw * ) 
ieee80211_alloc_hw s#ieee80211_hw * ieee80211_alloc_hw ( t#size_t , const s#ieee80211_ops * ) 
ieee80211_register_hw int ieee80211_register_hw ( s#ieee80211_hw * ) 
ieee80211_unregister_hw void ieee80211_unregister_hw ( s#ieee80211_hw * ) 
ieee80211_free_hw void ieee80211_free_hw ( s#ieee80211_hw * ) 

/* net/mac80211/mlme.o */
ieee80211_beacon_loss void ieee80211_beacon_loss ( s#ieee80211_vif * ) 

/* net/mac80211/rate.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s#ieee80211_tx_rate_control struct ieee80211_tx_rate_control { s#ieee80211_hw * hw ; s#ieee80211_supported_band * sband ; s#ieee80211_bss_conf * bss_conf ; s#sk_buff * skb ; s#ieee80211_tx_rate reported_rate ; t#bool rts , short_preamble ; t#u8 max_rate_idx ; } 
s#rate_control_ops struct rate_control_ops { s#module * module ; const char * name ; void * ( * alloc ) ( s#ieee80211_hw * , s#dentry * ) ; void ( * free ) ( void * ) ; void * ( * alloc_sta ) ( void * , s#ieee80211_sta * , t#gfp_t ) ; void ( * rate_init ) ( void * , s#ieee80211_supported_band * , s#ieee80211_sta * , void * ) ; void ( * rate_update ) ( void * , s#ieee80211_supported_band * , s#ieee80211_sta * , void * , t#u32 ) ; void ( * free_sta ) ( void * , s#ieee80211_sta * , void * ) ; void ( * tx_status ) ( void * , s#ieee80211_supported_band * , s#ieee80211_sta * , void * , s#sk_buff * ) ; void ( * get_rate ) ( void * , s#ieee80211_sta * , void * , s#ieee80211_tx_rate_control * ) ; void ( * add_sta_debugfs ) ( void * , void * , s#dentry * ) ; void ( * remove_sta_debugfs ) ( void * , void * ) ; } 
ieee80211_rate_control_register int ieee80211_rate_control_register ( s#rate_control_ops * ) 
ieee80211_rate_control_unregister void ieee80211_rate_control_unregister ( s#rate_control_ops * ) 
rate_control_send_low t#bool rate_control_send_low ( s#ieee80211_sta * , void * , s#ieee80211_tx_rate_control * ) 

/* net/mac80211/rx.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
ieee80211_rx void ieee80211_rx ( s#ieee80211_hw * , s#sk_buff * ) 
ieee80211_rx_irqsafe void ieee80211_rx_irqsafe ( s#ieee80211_hw * , s#sk_buff * ) 

/* net/mac80211/scan.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
ieee80211_scan_completed void ieee80211_scan_completed ( s#ieee80211_hw * , t#bool ) 

/* net/mac80211/sta_info.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
ieee80211_find_sta s#ieee80211_sta * ieee80211_find_sta ( s#ieee80211_hw * , const t#u8 * ) 

/* net/mac80211/tkip.o */
s##sock
s##libipw_device
s##neigh_parms
s##vlan_group
s##neighbour
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##sec_path
e#ieee80211_tkip_key_type enum ieee80211_tkip_key_type { IEEE80211_TKIP_P1_KEY , IEEE80211_TKIP_P2_KEY , } 
ieee80211_get_tkip_key void ieee80211_get_tkip_key ( s#ieee80211_key_conf * , s#sk_buff * , e#ieee80211_tkip_key_type , t#u8 * ) 

/* net/mac80211/tx.o */
s##sock
s##libipw_device
s##neigh_parms
s##vlan_group
s##neighbour
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##sec_path
ieee80211_beacon_get s#sk_buff * ieee80211_beacon_get ( s#ieee80211_hw * , s#ieee80211_vif * ) 
s#ieee80211_rts struct ieee80211_rts { t#__le16 frame_control ; t#__le16 duration ; t#u8 ra [ 6 ] ; t#u8 ta [ 6 ] ; } 
ieee80211_rts_get void ieee80211_rts_get ( s#ieee80211_hw * , s#ieee80211_vif * , const void * , t#size_t , const s#ieee80211_tx_info * , s#ieee80211_rts * ) 
s#ieee80211_cts struct ieee80211_cts { t#__le16 frame_control ; t#__le16 duration ; t#u8 ra [ 6 ] ; } 
ieee80211_ctstoself_get void ieee80211_ctstoself_get ( s#ieee80211_hw * , s#ieee80211_vif * , const void * , t#size_t , const s#ieee80211_tx_info * , s#ieee80211_cts * ) 
ieee80211_get_buffered_bc s#sk_buff * ieee80211_get_buffered_bc ( s#ieee80211_hw * , s#ieee80211_vif * ) 

/* net/mac80211/util.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##cfg80211_cached_keys
s##cfg80211_internal_bss
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
wiphy_to_ieee80211_hw s#ieee80211_hw * wiphy_to_ieee80211_hw ( s#wiphy * ) 
ieee80211_generic_frame_duration t#__le16 ieee80211_generic_frame_duration ( s#ieee80211_hw * , s#ieee80211_vif * , t#size_t , s#ieee80211_rate * ) 
ieee80211_rts_duration t#__le16 ieee80211_rts_duration ( s#ieee80211_hw * , s#ieee80211_vif * , t#size_t , const s#ieee80211_tx_info * ) 
ieee80211_ctstoself_duration t#__le16 ieee80211_ctstoself_duration ( s#ieee80211_hw * , s#ieee80211_vif * , t#size_t , const s#ieee80211_tx_info * ) 
ieee80211_wake_queue void ieee80211_wake_queue ( s#ieee80211_hw * , int ) 
ieee80211_stop_queue void ieee80211_stop_queue ( s#ieee80211_hw * , int ) 
ieee80211_stop_queues void ieee80211_stop_queues ( s#ieee80211_hw * ) 
ieee80211_queue_stopped int ieee80211_queue_stopped ( s#ieee80211_hw * , int ) 
ieee80211_wake_queues void ieee80211_wake_queues ( s#ieee80211_hw * ) 
ieee80211_iterate_active_interfaces void ieee80211_iterate_active_interfaces ( s#ieee80211_hw * , void ( * ) ( void * , t#u8 * , s#ieee80211_vif * ) , void * ) 
ieee80211_iterate_active_interfaces_atomic void ieee80211_iterate_active_interfaces_atomic ( s#ieee80211_hw * , void ( * ) ( void * , t#u8 * , s#ieee80211_vif * ) , void * ) 
ieee80211_queue_work void ieee80211_queue_work ( s#ieee80211_hw * , s#work_struct * ) 
ieee80211_queue_delayed_work void ieee80211_queue_delayed_work ( s#ieee80211_hw * , s#delayed_work * , unsigned long ) 

/* net/netfilter/core.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##nf_queue_entry
s#nf_afinfo struct nf_afinfo { unsigned short family ; t#__sum16 ( * checksum ) ( s#sk_buff * , unsigned int , unsigned int , t#u_int8_t ) ; t#__sum16 ( * checksum_partial ) ( s#sk_buff * , unsigned int , unsigned int , unsigned int , t#u_int8_t ) ; int ( * route ) ( s#dst_entry * * , s#flowi * ) ; void ( * saveroute ) ( const s#sk_buff * , s#nf_queue_entry * ) ; int ( * reroute ) ( s#sk_buff * , const s#nf_queue_entry * ) ; int route_key_size ; } 
nf_afinfo extern const s#nf_afinfo * nf_afinfo [ NFPROTO_NUMPROTO ] 
nf_register_afinfo extern int nf_register_afinfo ( const s#nf_afinfo * ) 
nf_unregister_afinfo extern void nf_unregister_afinfo ( const s#nf_afinfo * ) 
nf_hooks extern s#list_head nf_hooks [ NFPROTO_NUMPROTO ] [ 8 ] 
t#nf_hookfn typedef unsigned int nf_hookfn ( unsigned int , s#sk_buff * , const s#net_device * , const s#net_device * , int ( * ) ( s#sk_buff * ) ) 
s#nf_hook_ops struct nf_hook_ops { s#list_head list ; t#nf_hookfn * hook ; s#module * owner ; t#u_int8_t pf ; unsigned int hooknum ; int priority ; } 
nf_register_hook int nf_register_hook ( s#nf_hook_ops * ) 
nf_unregister_hook void nf_unregister_hook ( s#nf_hook_ops * ) 
nf_register_hooks int nf_register_hooks ( s#nf_hook_ops * , unsigned int ) 
nf_unregister_hooks void nf_unregister_hooks ( s#nf_hook_ops * , unsigned int ) 
nf_hook_slow int nf_hook_slow ( t#u_int8_t , unsigned int , s#sk_buff * , s#net_device * , s#net_device * , int ( * ) ( s#sk_buff * ) , int ) 
skb_make_writable extern int skb_make_writable ( s#sk_buff * , unsigned int ) 
ip_ct_attach extern void ( * ip_ct_attach ) ( s#sk_buff * , s#sk_buff * ) 
nf_ct_attach extern void nf_ct_attach ( s#sk_buff * , s#sk_buff * ) 
nf_ct_destroy extern void ( * nf_ct_destroy ) ( s#nf_conntrack * ) 
nf_conntrack_destroy extern void nf_conntrack_destroy ( s#nf_conntrack * ) 
proc_net_netfilter extern s#proc_dir_entry * proc_net_netfilter 
nf_net_netfilter_sysctl_path extern s#ctl_path nf_net_netfilter_sysctl_path [ ] 

/* net/netfilter/ipvs/ip_vs_app.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#ip_vs_stats_user struct ip_vs_stats_user { t#__u32 conns ; t#__u32 inpkts ; t#__u32 outpkts ; t#__u64 inbytes ; t#__u64 outbytes ; t#__u32 cps ; t#__u32 inpps ; t#__u32 outpps ; t#__u32 inbps ; t#__u32 outbps ; } 
s#ip_vs_estimator struct ip_vs_estimator { s#list_head list ; t#u64 last_inbytes ; t#u64 last_outbytes ; t#u32 last_conns ; t#u32 last_inpkts ; t#u32 last_outpkts ; t#u32 cps ; t#u32 inpps ; t#u32 outpps ; t#u32 inbps ; t#u32 outbps ; } 
s#ip_vs_stats struct ip_vs_stats { s#ip_vs_stats_user ustats ; s#ip_vs_estimator est ; t#spinlock_t lock ; } 
s##iw_handler_def
s##iw_public_data
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##xfrm_state
s##in_device
s##dn_route
s#ip_vs_scheduler struct ip_vs_scheduler { s#list_head n_list ; char * name ; t#atomic_t refcnt ; s#module * module ; int ( * init_service ) ( s#ip_vs_service * ) ; int ( * done_service ) ( s#ip_vs_service * ) ; int ( * update_service ) ( s#ip_vs_service * ) ; s#ip_vs_dest * ( * schedule ) ( s#ip_vs_service * , const s#sk_buff * ) ; } 
s#ip_vs_service struct ip_vs_service { s#list_head s_list ; s#list_head f_list ; t#atomic_t refcnt ; t#atomic_t usecnt ; t#u16 af ; t#__u16 protocol ; u#nf_inet_addr addr ; t#__be16 port ; t#__u32 fwmark ; unsigned flags ; unsigned timeout ; t#__be32 netmask ; s#list_head destinations ; t#__u32 num_dests ; s#ip_vs_stats stats ; s#ip_vs_app * inc ; s#ip_vs_scheduler * scheduler ; t#rwlock_t sched_lock ; void * sched_data ; } 
s#ip_vs_dest struct ip_vs_dest { s#list_head n_list ; s#list_head d_list ; t#u16 af ; u#nf_inet_addr addr ; t#__be16 port ; volatile unsigned flags ; t#atomic_t conn_flags ; t#atomic_t weight ; t#atomic_t refcnt ; s#ip_vs_stats stats ; t#atomic_t activeconns ; t#atomic_t inactconns ; t#atomic_t persistconns ; t#__u32 u_threshold ; t#__u32 l_threshold ; t#spinlock_t dst_lock ; s#dst_entry * dst_cache ; t#u32 dst_rtos ; s#ip_vs_service * svc ; t#__u16 protocol ; u#nf_inet_addr vaddr ; t#__be16 vport ; t#__u32 vfwmark ; } 
s#ip_vs_iphdr struct ip_vs_iphdr { int len ; t#__u8 protocol ; u#nf_inet_addr saddr ; u#nf_inet_addr daddr ; } 
s#ip_vs_protocol struct ip_vs_protocol { s#ip_vs_protocol * next ; char * name ; t#u16 protocol ; t#u16 num_states ; int dont_defrag ; t#atomic_t appcnt ; int * timeout_table ; void ( * init ) ( s#ip_vs_protocol * ) ; void ( * exit ) ( s#ip_vs_protocol * ) ; int ( * conn_schedule ) ( int , s#sk_buff * , s#ip_vs_protocol * , int * , s#ip_vs_conn * * ) ; s#ip_vs_conn * ( * conn_in_get ) ( int , const s#sk_buff * , s#ip_vs_protocol * , const s#ip_vs_iphdr * , unsigned int , int ) ; s#ip_vs_conn * ( * conn_out_get ) ( int , const s#sk_buff * , s#ip_vs_protocol * , const s#ip_vs_iphdr * , unsigned int , int ) ; int ( * snat_handler ) ( s#sk_buff * , s#ip_vs_protocol * , s#ip_vs_conn * ) ; int ( * dnat_handler ) ( s#sk_buff * , s#ip_vs_protocol * , s#ip_vs_conn * ) ; int ( * csum_check ) ( int , s#sk_buff * , s#ip_vs_protocol * ) ; const char * ( * state_name ) ( int ) ; int ( * state_transition ) ( s#ip_vs_conn * , int , const s#sk_buff * , s#ip_vs_protocol * ) ; int ( * register_app ) ( s#ip_vs_app * ) ; void ( * unregister_app ) ( s#ip_vs_app * ) ; int ( * app_conn_bind ) ( s#ip_vs_conn * ) ; void ( * debug_packet ) ( s#ip_vs_protocol * , const s#sk_buff * , int , const char * ) ; void ( * timeout_change ) ( s#ip_vs_protocol * , int ) ; int ( * set_state_timeout ) ( s#ip_vs_protocol * , char * , int ) ; } 
s#ip_vs_seq struct ip_vs_seq { t#__u32 init_seq ; t#__u32 delta ; t#__u32 previous_delta ; } 
s#ip_vs_conn struct ip_vs_conn { s#list_head c_list ; t#u16 af ; u#nf_inet_addr caddr ; u#nf_inet_addr vaddr ; u#nf_inet_addr daddr ; t#__be16 cport ; t#__be16 vport ; t#__be16 dport ; t#__u16 protocol ; t#atomic_t refcnt ; s#timer_list timer ; volatile unsigned long timeout ; t#spinlock_t lock ; volatile t#__u16 flags ; volatile t#__u16 state ; volatile t#__u16 old_state ; s#ip_vs_conn * control ; t#atomic_t n_control ; s#ip_vs_dest * dest ; t#atomic_t in_pkts ; int ( * packet_xmit ) ( s#sk_buff * , s#ip_vs_conn * , s#ip_vs_protocol * ) ; s#ip_vs_app * app ; void * app_data ; s#ip_vs_seq in_seq ; s#ip_vs_seq out_seq ; } 
s#ip_vs_app struct ip_vs_app { s#list_head a_list ; int type ; char * name ; t#__u16 protocol ; s#module * module ; s#list_head incs_list ; s#list_head p_list ; s#ip_vs_app * app ; t#__be16 port ; t#atomic_t usecnt ; int ( * pkt_out ) ( s#ip_vs_app * , s#ip_vs_conn * , s#sk_buff * , int * ) ; int ( * pkt_in ) ( s#ip_vs_app * , s#ip_vs_conn * , s#sk_buff * , int * ) ; int ( * init_conn ) ( s#ip_vs_app * , s#ip_vs_conn * ) ; int ( * done_conn ) ( s#ip_vs_app * , s#ip_vs_conn * ) ; int ( * bind_conn ) ( s#ip_vs_app * , s#ip_vs_conn * , s#ip_vs_protocol * ) ; void ( * unbind_conn ) ( s#ip_vs_app * , s#ip_vs_conn * ) ; int * timeout_table ; int * timeouts ; int timeouts_size ; int ( * conn_schedule ) ( s#sk_buff * , s#ip_vs_app * , int * , s#ip_vs_conn * * ) ; s#ip_vs_conn * ( * conn_in_get ) ( const s#sk_buff * , s#ip_vs_app * , const s#iphdr * , unsigned int , int ) ; s#ip_vs_conn * ( * conn_out_get ) ( const s#sk_buff * , s#ip_vs_app * , const s#iphdr * , unsigned int , int ) ; int ( * state_transition ) ( s#ip_vs_conn * , int , const s#sk_buff * , s#ip_vs_app * ) ; void ( * timeout_change ) ( s#ip_vs_app * , int ) ; } 
register_ip_vs_app extern int register_ip_vs_app ( s#ip_vs_app * ) 
unregister_ip_vs_app extern void unregister_ip_vs_app ( s#ip_vs_app * ) 
register_ip_vs_app_inc extern int register_ip_vs_app_inc ( s#ip_vs_app * , t#__u16 , t#__u16 ) 

/* net/netfilter/ipvs/ip_vs_core.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##iw_handler_def
s##iw_public_data
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##xfrm_state
s##in_device
s##dn_route
register_ip_vs_scheduler extern int register_ip_vs_scheduler ( s#ip_vs_scheduler * ) 
unregister_ip_vs_scheduler extern int unregister_ip_vs_scheduler ( s#ip_vs_scheduler * ) 
ip_vs_skb_replace extern int ip_vs_skb_replace ( s#sk_buff * , t#gfp_t , char * , int , char * , int ) 
ip_vs_proto_name extern const char * ip_vs_proto_name ( unsigned ) 
ip_vs_conn_new extern s#ip_vs_conn * ip_vs_conn_new ( int , int , const u#nf_inet_addr * , t#__be16 , const u#nf_inet_addr * , t#__be16 , const u#nf_inet_addr * , t#__be16 , unsigned , s#ip_vs_dest * ) 
ip_vs_conn_in_get extern s#ip_vs_conn * ip_vs_conn_in_get ( int , int , const u#nf_inet_addr * , t#__be16 , const u#nf_inet_addr * , t#__be16 ) 
ip_vs_conn_out_get extern s#ip_vs_conn * ip_vs_conn_out_get ( int , int , const u#nf_inet_addr * , t#__be16 , const u#nf_inet_addr * , t#__be16 ) 
ip_vs_tcp_conn_listen extern void ip_vs_tcp_conn_listen ( s#ip_vs_conn * ) 
ip_vs_conn_put extern void ip_vs_conn_put ( s#ip_vs_conn * ) 

/* net/netfilter/ipvs/ip_vs_ctl.o */
net_vs_ctl_path extern const s#ctl_path net_vs_ctl_path [ ] 

/* net/netfilter/nf_conntrack_acct.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##net_generic
seq_print_acct extern unsigned int seq_print_acct ( s#seq_file * , const s#nf_conn * , int ) 

/* net/netfilter/nf_conntrack_amanda.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##net_generic
s##xfrm_policy
s##sec_path
nf_nat_amanda_hook extern unsigned int ( * nf_nat_amanda_hook ) ( s#sk_buff * , e#ip_conntrack_info , unsigned int , unsigned int , s#nf_conntrack_expect * ) 

/* net/netfilter/nf_conntrack_core.o */
s##tvec_base
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##net_generic
nfnetlink_parse_nat_setup_hook extern int ( * nfnetlink_parse_nat_setup_hook ) ( s#nf_conn * , e#nf_nat_manip_type , const s#nlattr * ) 
nf_conntrack_lock extern t#spinlock_t nf_conntrack_lock 
nf_conntrack_htable_size extern unsigned int nf_conntrack_htable_size 
nf_conntrack_max extern unsigned int nf_conntrack_max 
nf_conntrack_untracked extern s#nf_conn nf_conntrack_untracked 
s#nf_conntrack_l3proto struct nf_conntrack_l3proto { t#u_int16_t l3proto ; const char * name ; t#bool ( * pkt_to_tuple ) ( const s#sk_buff * , unsigned int , s#nf_conntrack_tuple * ) ; t#bool ( * invert_tuple ) ( s#nf_conntrack_tuple * , const s#nf_conntrack_tuple * ) ; int ( * print_tuple ) ( s#seq_file * , const s#nf_conntrack_tuple * ) ; int ( * get_l4proto ) ( const s#sk_buff * , unsigned int , unsigned int * , t#u_int8_t * ) ; int ( * tuple_to_nlattr ) ( s#sk_buff * , const s#nf_conntrack_tuple * ) ; int ( * nlattr_tuple_size ) ( void ) ; int ( * nlattr_to_tuple ) ( s#nlattr * [ ] , s#nf_conntrack_tuple * ) ; const s#nla_policy * nla_policy ; t#size_t nla_size ; s#ctl_table_header * ctl_table_header ; s#ctl_path * ctl_table_path ; s#ctl_table * ctl_table ; s#module * me ; } 
s#nf_conntrack_l4proto struct nf_conntrack_l4proto { t#u_int16_t l3proto ; t#u_int8_t l4proto ; t#bool ( * pkt_to_tuple ) ( const s#sk_buff * , unsigned int , s#nf_conntrack_tuple * ) ; t#bool ( * invert_tuple ) ( s#nf_conntrack_tuple * , const s#nf_conntrack_tuple * ) ; int ( * packet ) ( s#nf_conn * , const s#sk_buff * , unsigned int , e#ip_conntrack_info , t#u_int8_t , unsigned int ) ; t#bool ( * new ) ( s#nf_conn * , const s#sk_buff * , unsigned int ) ; void ( * destroy ) ( s#nf_conn * ) ; int ( * error ) ( s#net * , s#sk_buff * , unsigned int , e#ip_conntrack_info * , t#u_int8_t , unsigned int ) ; int ( * print_tuple ) ( s#seq_file * , const s#nf_conntrack_tuple * ) ; int ( * print_conntrack ) ( s#seq_file * , s#nf_conn * ) ; int ( * to_nlattr ) ( s#sk_buff * , s#nlattr * , s#nf_conn * ) ; int ( * nlattr_size ) ( void ) ; int ( * from_nlattr ) ( s#nlattr * [ ] , s#nf_conn * ) ; int ( * tuple_to_nlattr ) ( s#sk_buff * , const s#nf_conntrack_tuple * ) ; int ( * nlattr_tuple_size ) ( void ) ; int ( * nlattr_to_tuple ) ( s#nlattr * [ ] , s#nf_conntrack_tuple * ) ; const s#nla_policy * nla_policy ; t#size_t nla_size ; s#ctl_table_header * * ctl_table_header ; s#ctl_table * ctl_table ; unsigned int * ctl_table_users ; const char * name ; s#module * me ; } 
nf_ct_get_tuple extern t#bool nf_ct_get_tuple ( const s#sk_buff * , unsigned int , unsigned int , t#u_int16_t , t#u_int8_t , s#nf_conntrack_tuple * , const s#nf_conntrack_l3proto * , const s#nf_conntrack_l4proto * ) 
nf_ct_get_tuplepr extern t#bool nf_ct_get_tuplepr ( const s#sk_buff * , unsigned int , t#u_int16_t , s#nf_conntrack_tuple * ) 
nf_ct_invert_tuple extern t#bool nf_ct_invert_tuple ( s#nf_conntrack_tuple * , const s#nf_conntrack_tuple * , const s#nf_conntrack_l3proto * , const s#nf_conntrack_l4proto * ) 
nf_ct_delete_from_lists extern void nf_ct_delete_from_lists ( s#nf_conn * ) 
nf_ct_insert_dying_list extern void nf_ct_insert_dying_list ( s#nf_conn * ) 
__nf_conntrack_find extern s#nf_conntrack_tuple_hash * __nf_conntrack_find ( s#net * , const s#nf_conntrack_tuple * ) 
nf_conntrack_find_get extern s#nf_conntrack_tuple_hash * nf_conntrack_find_get ( s#net * , const s#nf_conntrack_tuple * ) 
nf_conntrack_hash_insert extern void nf_conntrack_hash_insert ( s#nf_conn * ) 
__nf_conntrack_confirm extern int __nf_conntrack_confirm ( s#sk_buff * ) 
nf_conntrack_tuple_taken extern int nf_conntrack_tuple_taken ( const s#nf_conntrack_tuple * , const s#nf_conn * ) 
nf_conntrack_alloc extern s#nf_conn * nf_conntrack_alloc ( s#net * , const s#nf_conntrack_tuple * , const s#nf_conntrack_tuple * , t#gfp_t ) 
nf_conntrack_free extern void nf_conntrack_free ( s#nf_conn * ) 
nf_conntrack_in extern unsigned int nf_conntrack_in ( s#net * , t#u_int8_t , unsigned int , s#sk_buff * ) 
nf_ct_invert_tuplepr extern t#bool nf_ct_invert_tuplepr ( s#nf_conntrack_tuple * , const s#nf_conntrack_tuple * ) 
nf_conntrack_alter_reply extern void nf_conntrack_alter_reply ( s#nf_conn * , const s#nf_conntrack_tuple * ) 
__nf_ct_refresh_acct extern void __nf_ct_refresh_acct ( s#nf_conn * , e#ip_conntrack_info , const s#sk_buff * , unsigned long , int ) 
__nf_ct_kill_acct extern t#bool __nf_ct_kill_acct ( s#nf_conn * , e#ip_conntrack_info , const s#sk_buff * , int ) 
nf_ct_port_tuple_to_nlattr extern int nf_ct_port_tuple_to_nlattr ( s#sk_buff * , const s#nf_conntrack_tuple * ) 
nf_ct_port_nla_policy extern const s#nla_policy nf_ct_port_nla_policy [ ] 
nf_ct_port_nlattr_to_tuple extern int nf_ct_port_nlattr_to_tuple ( s#nlattr * [ ] , s#nf_conntrack_tuple * ) 
nf_ct_port_nlattr_tuple_size extern int nf_ct_port_nlattr_tuple_size ( void ) 
nf_ct_iterate_cleanup extern void nf_ct_iterate_cleanup ( s#net * , int ( * ) ( s#nf_conn * , void * ) , void * ) 
nf_ct_free_hashtable extern void nf_ct_free_hashtable ( void * , int , unsigned int ) 
nf_conntrack_flush_report extern void nf_conntrack_flush_report ( s#net * , t#u32 , int ) 
nf_ct_alloc_hashtable extern void * nf_ct_alloc_hashtable ( unsigned int * , int * , int ) 
nf_conntrack_set_hashsize extern int nf_conntrack_set_hashsize ( const char * , s#kernel_param * ) 
nf_ct_nat_offset extern t#s16 ( * nf_ct_nat_offset ) ( const s#nf_conn * , e#ip_conntrack_dir , t#u32 ) 

/* net/netfilter/nf_conntrack_ecache.o */
s##tvec_base
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##net_generic
s#nf_ct_event struct nf_ct_event { s#nf_conn * ct ; t#u32 pid ; int report ; } 
s#nf_ct_event_notifier struct nf_ct_event_notifier { int ( * fcn ) ( unsigned int , s#nf_ct_event * ) ; } 
nf_conntrack_event_cb extern s#nf_ct_event_notifier * nf_conntrack_event_cb 
s##nf_conntrack_helper
s#nf_exp_event struct nf_exp_event { s#nf_conntrack_expect * exp ; t#u32 pid ; int report ; } 
s#nf_exp_event_notifier struct nf_exp_event_notifier { int ( * fcn ) ( unsigned int , s#nf_exp_event * ) ; } 
nf_expect_event_cb extern s#nf_exp_event_notifier * nf_expect_event_cb 
nf_ct_deliver_cached_events extern void nf_ct_deliver_cached_events ( s#nf_conn * ) 
nf_conntrack_register_notifier extern int nf_conntrack_register_notifier ( s#nf_ct_event_notifier * ) 
nf_conntrack_unregister_notifier extern void nf_conntrack_unregister_notifier ( s#nf_ct_event_notifier * ) 
nf_ct_expect_register_notifier extern int nf_ct_expect_register_notifier ( s#nf_exp_event_notifier * ) 
nf_ct_expect_unregister_notifier extern void nf_ct_expect_unregister_notifier ( s#nf_exp_event_notifier * ) 

/* net/netfilter/nf_conntrack_expect.o */
nf_ct_expect_hsize extern unsigned int nf_ct_expect_hsize 
s##tvec_base
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##net_generic
nf_ct_unlink_expect void nf_ct_unlink_expect ( s#nf_conntrack_expect * ) 
__nf_ct_expect_find s#nf_conntrack_expect * __nf_ct_expect_find ( s#net * , const s#nf_conntrack_tuple * ) 
nf_ct_expect_find_get s#nf_conntrack_expect * nf_ct_expect_find_get ( s#net * , const s#nf_conntrack_tuple * ) 
nf_ct_remove_expectations void nf_ct_remove_expectations ( s#nf_conn * ) 
nf_ct_unexpect_related void nf_ct_unexpect_related ( s#nf_conntrack_expect * ) 
nf_ct_expect_alloc s#nf_conntrack_expect * nf_ct_expect_alloc ( s#nf_conn * ) 
nf_ct_expect_init void nf_ct_expect_init ( s#nf_conntrack_expect * , unsigned int , t#u_int8_t , const u#nf_inet_addr * , const u#nf_inet_addr * , t#u_int8_t , const t#__be16 * , const t#__be16 * ) 
nf_ct_expect_put void nf_ct_expect_put ( s#nf_conntrack_expect * ) 
nf_ct_expect_related_report int nf_ct_expect_related_report ( s#nf_conntrack_expect * , t#u32 , int ) 

/* net/netfilter/nf_conntrack_extend.o */
s##tvec_base
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##net_generic
__nf_ct_ext_destroy extern void __nf_ct_ext_destroy ( s#nf_conn * ) 
e#nf_ct_ext_id enum nf_ct_ext_id { NF_CT_EXT_HELPER , NF_CT_EXT_NAT , NF_CT_EXT_ACCT , NF_CT_EXT_ECACHE , NF_CT_EXT_NUM , } 
__nf_ct_ext_add void * __nf_ct_ext_add ( s#nf_conn * , e#nf_ct_ext_id , t#gfp_t ) 
s#nf_ct_ext_type struct nf_ct_ext_type { void ( * destroy ) ( s#nf_conn * ) ; void ( * move ) ( void * , void * ) ; e#nf_ct_ext_id id ; unsigned int flags ; t#u8 len ; t#u8 align ; t#u8 alloc_size ; } 
nf_ct_extend_register int nf_ct_extend_register ( s#nf_ct_ext_type * ) 
nf_ct_extend_unregister void nf_ct_extend_unregister ( s#nf_ct_ext_type * ) 

/* net/netfilter/nf_conntrack_ftp.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##net_generic
s##xfrm_policy
s##sec_path
e#nf_ct_ftp_type enum nf_ct_ftp_type { NF_CT_FTP_PORT , NF_CT_FTP_PASV , NF_CT_FTP_EPRT , NF_CT_FTP_EPSV , } 
nf_nat_ftp_hook extern unsigned int ( * nf_nat_ftp_hook ) ( s#sk_buff * , e#ip_conntrack_info , e#nf_ct_ftp_type , unsigned int , unsigned int , s#nf_conntrack_expect * ) 

/* net/netfilter/nf_conntrack_h323_main.o */
s##tvec_base
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##in_device
s##inet6_dev
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ebt_table
s##net_generic
s#TransportAddress_ipAddress struct TransportAddress_ipAddress { int options ; unsigned ip ; } 
t#TransportAddress_ipAddress typedef s#TransportAddress_ipAddress TransportAddress_ipAddress 
s#TransportAddress_ip6Address struct TransportAddress_ip6Address { int options ; unsigned ip ; } 
t#TransportAddress_ip6Address typedef s#TransportAddress_ip6Address TransportAddress_ip6Address 
s#TransportAddress struct TransportAddress { enum { eTransportAddress_ipAddress , eTransportAddress_ipSourceRoute , eTransportAddress_ipxAddress , eTransportAddress_ip6Address , eTransportAddress_netBios , eTransportAddress_nsap , eTransportAddress_nonStandardAddress , } choice ; union { t#TransportAddress_ipAddress ipAddress ; t#TransportAddress_ip6Address ip6Address ; } ; } 
t#TransportAddress typedef s#TransportAddress TransportAddress 
get_h225_addr extern int get_h225_addr ( s#nf_conn * , unsigned char * , t#TransportAddress * , u#nf_inet_addr * , t#__be16 * ) 
s#UnicastAddress_iPAddress struct UnicastAddress_iPAddress { int options ; unsigned network ; } 
t#UnicastAddress_iPAddress typedef s#UnicastAddress_iPAddress UnicastAddress_iPAddress 
s#UnicastAddress_iP6Address struct UnicastAddress_iP6Address { int options ; unsigned network ; } 
t#UnicastAddress_iP6Address typedef s#UnicastAddress_iP6Address UnicastAddress_iP6Address 
s#UnicastAddress struct UnicastAddress { enum { eUnicastAddress_iPAddress , eUnicastAddress_iPXAddress , eUnicastAddress_iP6Address , eUnicastAddress_netBios , eUnicastAddress_iPSourceRouteAddress , eUnicastAddress_nsap , eUnicastAddress_nonStandardAddress , } choice ; union { t#UnicastAddress_iPAddress iPAddress ; t#UnicastAddress_iP6Address iP6Address ; } ; } 
t#UnicastAddress typedef s#UnicastAddress UnicastAddress 
s#H245_TransportAddress struct H245_TransportAddress { enum { eH245_TransportAddress_unicastAddress , eH245_TransportAddress_multicastAddress , } choice ; union { t#UnicastAddress unicastAddress ; } ; } 
t#H245_TransportAddress typedef s#H245_TransportAddress H245_TransportAddress 
set_h245_addr_hook extern int ( * set_h245_addr_hook ) ( s#sk_buff * , unsigned char * * , int , t#H245_TransportAddress * , u#nf_inet_addr * , t#__be16 ) 
set_h225_addr_hook extern int ( * set_h225_addr_hook ) ( s#sk_buff * , unsigned char * * , int , t#TransportAddress * , u#nf_inet_addr * , t#__be16 ) 
set_sig_addr_hook extern int ( * set_sig_addr_hook ) ( s#sk_buff * , s#nf_conn * , e#ip_conntrack_info , unsigned char * * , t#TransportAddress * , int ) 
set_ras_addr_hook extern int ( * set_ras_addr_hook ) ( s#sk_buff * , s#nf_conn * , e#ip_conntrack_info , unsigned char * * , t#TransportAddress * , int ) 
nat_rtp_rtcp_hook extern int ( * nat_rtp_rtcp_hook ) ( s#sk_buff * , s#nf_conn * , e#ip_conntrack_info , unsigned char * * , int , t#H245_TransportAddress * , t#__be16 , t#__be16 , s#nf_conntrack_expect * , s#nf_conntrack_expect * ) 
nat_t120_hook extern int ( * nat_t120_hook ) ( s#sk_buff * , s#nf_conn * , e#ip_conntrack_info , unsigned char * * , int , t#H245_TransportAddress * , t#__be16 , s#nf_conntrack_expect * ) 
nat_h245_hook extern int ( * nat_h245_hook ) ( s#sk_buff * , s#nf_conn * , e#ip_conntrack_info , unsigned char * * , int , t#TransportAddress * , t#__be16 , s#nf_conntrack_expect * ) 
nat_callforwarding_hook extern int ( * nat_callforwarding_hook ) ( s#sk_buff * , s#nf_conn * , e#ip_conntrack_info , unsigned char * * , int , t#TransportAddress * , t#__be16 , s#nf_conntrack_expect * ) 
nat_q931_hook extern int ( * nat_q931_hook ) ( s#sk_buff * , s#nf_conn * , e#ip_conntrack_info , unsigned char * * , t#TransportAddress * , int , t#__be16 , s#nf_conntrack_expect * ) 

/* net/netfilter/nf_conntrack_helper.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
__nf_conntrack_helper_find_byname extern s#nf_conntrack_helper * __nf_conntrack_helper_find_byname ( const char * ) 
s#nf_ct_ftp_master struct nf_ct_ftp_master { t#u_int32_t seq_aft_nl [ IP_CT_DIR_MAX ] [ 2 ] ; int seq_aft_nl_num [ IP_CT_DIR_MAX ] ; } 
e#pptp_ctrlsess_state enum pptp_ctrlsess_state { PPTP_SESSION_NONE , PPTP_SESSION_ERROR , PPTP_SESSION_STOPREQ , PPTP_SESSION_REQUESTED , PPTP_SESSION_CONFIRMED , } 
e#pptp_ctrlcall_state enum pptp_ctrlcall_state { PPTP_CALL_NONE , PPTP_CALL_ERROR , PPTP_CALL_OUT_REQ , PPTP_CALL_OUT_CONF , PPTP_CALL_IN_REQ , PPTP_CALL_IN_REP , PPTP_CALL_IN_CONF , PPTP_CALL_CLEAR_REQ , } 
s#nf_ct_gre_keymap struct nf_ct_gre_keymap { s#list_head list ; s#nf_conntrack_tuple tuple ; } 
s#nf_ct_pptp_master struct nf_ct_pptp_master { e#pptp_ctrlsess_state sstate ; e#pptp_ctrlcall_state cstate ; t#__be16 pac_call_id ; t#__be16 pns_call_id ; s#nf_ct_gre_keymap * keymap [ IP_CT_DIR_MAX ] ; } 
s#nf_ct_h323_master struct nf_ct_h323_master { t#__be16 sig_port [ IP_CT_DIR_MAX ] ; t#__be16 rtp_port [ 4 ] [ IP_CT_DIR_MAX ] ; union { t#u_int32_t timeout ; t#u_int16_t tpkt_len [ IP_CT_DIR_MAX ] ; } ; } 
e#sane_state enum sane_state { SANE_STATE_NORMAL , SANE_STATE_START_REQUESTED , } 
s#nf_ct_sane_master struct nf_ct_sane_master { e#sane_state state ; } 
s#nf_ct_sip_master struct nf_ct_sip_master { unsigned int register_cseq ; unsigned int invite_cseq ; } 
u#nf_conntrack_help union nf_conntrack_help { s#nf_ct_ftp_master ct_ftp_info ; s#nf_ct_pptp_master ct_pptp_info ; s#nf_ct_h323_master ct_h323_info ; s#nf_ct_sane_master ct_sane_info ; s#nf_ct_sip_master ct_sip_info ; } 
s#nf_conn_help struct nf_conn_help { s#nf_conntrack_helper * helper ; u#nf_conntrack_help help ; s#hlist_head expectations ; t#u8 expecting [ 3 ] ; } 
nf_ct_helper_ext_add extern s#nf_conn_help * nf_ct_helper_ext_add ( s#nf_conn * , t#gfp_t ) 
__nf_ct_try_assign_helper extern int __nf_ct_try_assign_helper ( s#nf_conn * , t#gfp_t ) 
nf_conntrack_helper_register extern int nf_conntrack_helper_register ( s#nf_conntrack_helper * ) 
nf_conntrack_helper_unregister extern void nf_conntrack_helper_unregister ( s#nf_conntrack_helper * ) 

/* net/netfilter/nf_conntrack_irc.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##net_generic
s##xfrm_policy
s##sec_path
nf_nat_irc_hook extern unsigned int ( * nf_nat_irc_hook ) ( s#sk_buff * , e#ip_conntrack_info , unsigned int , unsigned int , s#nf_conntrack_expect * ) 

/* net/netfilter/nf_conntrack_l3proto_generic.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##net_generic
s##xfrm_policy
s##sec_path
nf_conntrack_l3proto_generic extern s#nf_conntrack_l3proto nf_conntrack_l3proto_generic 

/* net/netfilter/nf_conntrack_pptp.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##net_generic
s##xfrm_policy
s##sec_path
s#PptpControlHeader struct PptpControlHeader { t#__be16 messageType ; t#__u16 reserved ; } 
s#PptpStartSessionRequest struct PptpStartSessionRequest { t#__be16 protocolVersion ; t#__u16 reserved1 ; t#__be32 framingCapability ; t#__be32 bearerCapability ; t#__be16 maxChannels ; t#__be16 firmwareRevision ; t#__u8 hostName [ 64 ] ; t#__u8 vendorString [ 64 ] ; } 
s#PptpStartSessionReply struct PptpStartSessionReply { t#__be16 protocolVersion ; t#__u8 resultCode ; t#__u8 generalErrorCode ; t#__be32 framingCapability ; t#__be32 bearerCapability ; t#__be16 maxChannels ; t#__be16 firmwareRevision ; t#__u8 hostName [ 64 ] ; t#__u8 vendorString [ 64 ] ; } 
s#PptpStopSessionRequest struct PptpStopSessionRequest { t#__u8 reason ; t#__u8 reserved1 ; t#__u16 reserved2 ; } 
s#PptpStopSessionReply struct PptpStopSessionReply { t#__u8 resultCode ; t#__u8 generalErrorCode ; t#__u16 reserved1 ; } 
s#PptpOutCallRequest struct PptpOutCallRequest { t#__be16 callID ; t#__be16 callSerialNumber ; t#__be32 minBPS ; t#__be32 maxBPS ; t#__be32 bearerType ; t#__be32 framingType ; t#__be16 packetWindow ; t#__be16 packetProcDelay ; t#__be16 phoneNumberLength ; t#__u16 reserved1 ; t#__u8 phoneNumber [ 64 ] ; t#__u8 subAddress [ 64 ] ; } 
s#PptpOutCallReply struct PptpOutCallReply { t#__be16 callID ; t#__be16 peersCallID ; t#__u8 resultCode ; t#__u8 generalErrorCode ; t#__be16 causeCode ; t#__be32 connectSpeed ; t#__be16 packetWindow ; t#__be16 packetProcDelay ; t#__be32 physChannelID ; } 
s#PptpInCallRequest struct PptpInCallRequest { t#__be16 callID ; t#__be16 callSerialNumber ; t#__be32 callBearerType ; t#__be32 physChannelID ; t#__be16 dialedNumberLength ; t#__be16 dialingNumberLength ; t#__u8 dialedNumber [ 64 ] ; t#__u8 dialingNumber [ 64 ] ; t#__u8 subAddress [ 64 ] ; } 
s#PptpInCallReply struct PptpInCallReply { t#__be16 callID ; t#__be16 peersCallID ; t#__u8 resultCode ; t#__u8 generalErrorCode ; t#__be16 packetWindow ; t#__be16 packetProcDelay ; t#__u16 reserved ; } 
s#PptpInCallConnected struct PptpInCallConnected { t#__be16 peersCallID ; t#__u16 reserved ; t#__be32 connectSpeed ; t#__be16 packetWindow ; t#__be16 packetProcDelay ; t#__be32 callFramingType ; } 
s#PptpClearCallRequest struct PptpClearCallRequest { t#__be16 callID ; t#__u16 reserved ; } 
s#PptpCallDisconnectNotify struct PptpCallDisconnectNotify { t#__be16 callID ; t#__u8 resultCode ; t#__u8 generalErrorCode ; t#__be16 causeCode ; t#__u16 reserved ; t#__u8 callStatistics [ 128 ] ; } 
s#PptpWanErrorNotify struct PptpWanErrorNotify { t#__be16 peersCallID ; t#__u16 reserved ; t#__be32 crcErrors ; t#__be32 framingErrors ; t#__be32 hardwareOverRuns ; t#__be32 bufferOverRuns ; t#__be32 timeoutErrors ; t#__be32 alignmentErrors ; } 
s#PptpSetLinkInfo struct PptpSetLinkInfo { t#__be16 peersCallID ; t#__u16 reserved ; t#__be32 sendAccm ; t#__be32 recvAccm ; } 
u#pptp_ctrl_union union pptp_ctrl_union { s#PptpStartSessionRequest sreq ; s#PptpStartSessionReply srep ; s#PptpStopSessionRequest streq ; s#PptpStopSessionReply strep ; s#PptpOutCallRequest ocreq ; s#PptpOutCallReply ocack ; s#PptpInCallRequest icreq ; s#PptpInCallReply icack ; s#PptpInCallConnected iccon ; s#PptpClearCallRequest clrreq ; s#PptpCallDisconnectNotify disc ; s#PptpWanErrorNotify wanerr ; s#PptpSetLinkInfo setlink ; } 
nf_nat_pptp_hook_outbound extern int ( * nf_nat_pptp_hook_outbound ) ( s#sk_buff * , s#nf_conn * , e#ip_conntrack_info , s#PptpControlHeader * , u#pptp_ctrl_union * ) 
nf_nat_pptp_hook_inbound extern int ( * nf_nat_pptp_hook_inbound ) ( s#sk_buff * , s#nf_conn * , e#ip_conntrack_info , s#PptpControlHeader * , u#pptp_ctrl_union * ) 
nf_nat_pptp_hook_exp_gre extern void ( * nf_nat_pptp_hook_exp_gre ) ( s#nf_conntrack_expect * , s#nf_conntrack_expect * ) 
nf_nat_pptp_hook_expectfn extern void ( * nf_nat_pptp_hook_expectfn ) ( s#nf_conn * , s#nf_conntrack_expect * ) 
pptp_msg_name extern const char * const pptp_msg_name [ ] 

/* net/netfilter/nf_conntrack_proto.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
nf_ct_l3protos extern s#nf_conntrack_l3proto * nf_ct_l3protos [ 37 ] 
__nf_ct_l4proto_find extern s#nf_conntrack_l4proto * __nf_ct_l4proto_find ( t#u_int16_t , t#u_int8_t ) 
nf_ct_l3proto_find_get extern s#nf_conntrack_l3proto * nf_ct_l3proto_find_get ( t#u_int16_t ) 
nf_ct_l3proto_put extern void nf_ct_l3proto_put ( s#nf_conntrack_l3proto * ) 
nf_ct_l3proto_try_module_get extern int nf_ct_l3proto_try_module_get ( unsigned short ) 
nf_ct_l3proto_module_put extern void nf_ct_l3proto_module_put ( unsigned short ) 
nf_conntrack_l3proto_register extern int nf_conntrack_l3proto_register ( s#nf_conntrack_l3proto * ) 
nf_conntrack_l3proto_unregister extern void nf_conntrack_l3proto_unregister ( s#nf_conntrack_l3proto * ) 
nf_conntrack_l4proto_register extern int nf_conntrack_l4proto_register ( s#nf_conntrack_l4proto * ) 
nf_conntrack_l4proto_unregister extern void nf_conntrack_l4proto_unregister ( s#nf_conntrack_l4proto * ) 

/* net/netfilter/nf_conntrack_proto_gre.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
nf_ct_gre_keymap_flush extern void nf_ct_gre_keymap_flush ( s#net * ) 
nf_ct_gre_keymap_add int nf_ct_gre_keymap_add ( s#nf_conn * , e#ip_conntrack_dir , s#nf_conntrack_tuple * ) 
nf_ct_gre_keymap_destroy void nf_ct_gre_keymap_destroy ( s#nf_conn * ) 

/* net/netfilter/nf_conntrack_proto_tcp.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##net_generic
s##xfrm_policy
s##sec_path
nf_conntrack_l4proto_tcp4 extern s#nf_conntrack_l4proto nf_conntrack_l4proto_tcp4 
nf_conntrack_l4proto_tcp6 extern s#nf_conntrack_l4proto nf_conntrack_l4proto_tcp6 

/* net/netfilter/nf_conntrack_proto_udp.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##net_generic
s##xfrm_policy
s##sec_path
nf_conntrack_l4proto_udp4 extern s#nf_conntrack_l4proto nf_conntrack_l4proto_udp4 
nf_conntrack_l4proto_udp6 extern s#nf_conntrack_l4proto nf_conntrack_l4proto_udp6 

/* net/netfilter/nf_conntrack_sip.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##net_generic
s##xfrm_policy
s##sec_path
nf_nat_sip_hook extern unsigned int ( * nf_nat_sip_hook ) ( s#sk_buff * , const char * * , unsigned int * ) 
nf_nat_sip_expect_hook extern unsigned int ( * nf_nat_sip_expect_hook ) ( s#sk_buff * , const char * * , unsigned int * , s#nf_conntrack_expect * , unsigned int , unsigned int ) 
e#sdp_header_types enum sdp_header_types { SDP_HDR_UNSPEC , SDP_HDR_VERSION , SDP_HDR_OWNER_IP4 , SDP_HDR_CONNECTION_IP4 , SDP_HDR_OWNER_IP6 , SDP_HDR_CONNECTION_IP6 , SDP_HDR_MEDIA , } 
nf_nat_sdp_addr_hook extern unsigned int ( * nf_nat_sdp_addr_hook ) ( s#sk_buff * , const char * * , unsigned int , unsigned int * , e#sdp_header_types , e#sdp_header_types , const u#nf_inet_addr * ) 
nf_nat_sdp_port_hook extern unsigned int ( * nf_nat_sdp_port_hook ) ( s#sk_buff * , const char * * , unsigned int * , unsigned int , unsigned int , t#u_int16_t ) 
nf_nat_sdp_session_hook extern unsigned int ( * nf_nat_sdp_session_hook ) ( s#sk_buff * , const char * * , unsigned int , unsigned int * , const u#nf_inet_addr * ) 
nf_nat_sdp_media_hook extern unsigned int ( * nf_nat_sdp_media_hook ) ( s#sk_buff * , const char * * , unsigned int * , s#nf_conntrack_expect * , s#nf_conntrack_expect * , unsigned int , unsigned int , u#nf_inet_addr * ) 
ct_sip_parse_request extern int ct_sip_parse_request ( const s#nf_conn * , const char * , unsigned int , unsigned int * , unsigned int * , u#nf_inet_addr * , t#__be16 * ) 
e#sip_header_types enum sip_header_types { SIP_HDR_CSEQ , SIP_HDR_FROM , SIP_HDR_TO , SIP_HDR_CONTACT , SIP_HDR_VIA , SIP_HDR_EXPIRES , SIP_HDR_CONTENT_LENGTH , } 
ct_sip_get_header extern int ct_sip_get_header ( const s#nf_conn * , const char * , unsigned int , unsigned int , e#sip_header_types , unsigned int * , unsigned int * ) 
ct_sip_parse_header_uri extern int ct_sip_parse_header_uri ( const s#nf_conn * , const char * , unsigned int * , unsigned int , e#sip_header_types , int * , unsigned int * , unsigned int * , u#nf_inet_addr * , t#__be16 * ) 
ct_sip_parse_address_param extern int ct_sip_parse_address_param ( const s#nf_conn * , const char * , unsigned int , unsigned int , const char * , unsigned int * , unsigned int * , u#nf_inet_addr * ) 
ct_sip_parse_numerical_param extern int ct_sip_parse_numerical_param ( const s#nf_conn * , const char * , unsigned int , unsigned int , const char * , unsigned int * , unsigned int * , unsigned int * ) 
ct_sip_get_sdp_header extern int ct_sip_get_sdp_header ( const s#nf_conn * , const char * , unsigned int , unsigned int , e#sdp_header_types , e#sdp_header_types , unsigned int * , unsigned int * ) 

/* net/netfilter/nf_conntrack_standalone.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##netpoll_info
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
print_tuple int print_tuple ( s#seq_file * , const s#nf_conntrack_tuple * , const s#nf_conntrack_l3proto * , const s#nf_conntrack_l4proto * ) 
need_conntrack extern void need_conntrack ( void ) 

/* net/netfilter/nf_conntrack_tftp.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##net_generic
s##xfrm_policy
s##sec_path
nf_nat_tftp_hook extern unsigned int ( * nf_nat_tftp_hook ) ( s#sk_buff * , e#ip_conntrack_info , s#nf_conntrack_expect * ) 

/* net/netfilter/nf_log.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s#nf_loginfo struct nf_loginfo { t#u_int8_t type ; union { struct { t#u_int32_t copy_len ; t#u_int16_t group ; t#u_int16_t qthreshold ; } ulog ; struct { t#u_int8_t level ; t#u_int8_t logflags ; } log ; } u ; } 
t#nf_logfn typedef void nf_logfn ( t#u_int8_t , unsigned int , const s#sk_buff * , const s#net_device * , const s#net_device * , const s#nf_loginfo * , const char * ) 
s#nf_logger struct nf_logger { s#module * me ; t#nf_logfn * logfn ; char * name ; s#list_head list [ NFPROTO_NUMPROTO ] ; } 
nf_log_register int nf_log_register ( t#u_int8_t , s#nf_logger * ) 
nf_log_unregister void nf_log_unregister ( s#nf_logger * ) 
nf_log_bind_pf int nf_log_bind_pf ( t#u_int8_t , const s#nf_logger * ) 
nf_log_unbind_pf void nf_log_unbind_pf ( t#u_int8_t ) 
nf_log_packet void nf_log_packet ( t#u_int8_t , unsigned int , const s#sk_buff * , const s#net_device * , const s#net_device * , const s#nf_loginfo * , const char * , ... ) 

/* net/netfilter/nf_queue.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s#nf_queue_entry struct nf_queue_entry { s#list_head list ; s#sk_buff * skb ; unsigned int id ; s#nf_hook_ops * elem ; t#u_int8_t pf ; unsigned int hook ; s#net_device * indev ; s#net_device * outdev ; int ( * okfn ) ( s#sk_buff * ) ; } 
s#nf_queue_handler struct nf_queue_handler { int ( * outfn ) ( s#nf_queue_entry * , unsigned int ) ; char * name ; } 
nf_register_queue_handler extern int nf_register_queue_handler ( t#u_int8_t , const s#nf_queue_handler * ) 
nf_unregister_queue_handler extern int nf_unregister_queue_handler ( t#u_int8_t , const s#nf_queue_handler * ) 
nf_unregister_queue_handlers extern void nf_unregister_queue_handlers ( const s#nf_queue_handler * ) 
nf_reinject extern void nf_reinject ( s#nf_queue_entry * , unsigned int ) 

/* net/netfilter/nf_sockopt.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s#nf_sockopt_ops struct nf_sockopt_ops { s#list_head list ; t#u_int8_t pf ; int set_optmin ; int set_optmax ; int ( * set ) ( s#sock * , int , void * , unsigned int ) ; int ( * compat_set ) ( s#sock * , int , void * , unsigned int ) ; int get_optmin ; int get_optmax ; int ( * get ) ( s#sock * , int , void * , int * ) ; int ( * compat_get ) ( s#sock * , int , void * , int * ) ; s#module * owner ; } 
nf_register_sockopt int nf_register_sockopt ( s#nf_sockopt_ops * ) 
nf_unregister_sockopt void nf_unregister_sockopt ( s#nf_sockopt_ops * ) 
nf_setsockopt int nf_setsockopt ( s#sock * , t#u_int8_t , int , char * , unsigned int ) 
nf_getsockopt int nf_getsockopt ( s#sock * , t#u_int8_t , int , char * , int * ) 
compat_nf_setsockopt int compat_nf_setsockopt ( s#sock * , t#u_int8_t , int , char * , unsigned int ) 
compat_nf_getsockopt int compat_nf_getsockopt ( s#sock * , t#u_int8_t , int , char * , int * ) 

/* net/netfilter/nf_tproxy_core.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##raw_hashinfo
s##xfrm_policy
nf_tproxy_get_sock_v4 extern s#sock * nf_tproxy_get_sock_v4 ( s#net * , const t#u8 , const t#__be32 , const t#__be32 , const t#__be16 , const t#__be16 , const s#net_device * , t#bool ) 
nf_tproxy_assign_sock int nf_tproxy_assign_sock ( s#sk_buff * , s#sock * ) 

/* net/netfilter/nfnetlink.o */
nfnl_lock extern void nfnl_lock ( void ) 
nfnl_unlock extern void nfnl_unlock ( void ) 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s#nfnl_callback struct nfnl_callback { int ( * call ) ( s#sock * , s#sk_buff * , const s#nlmsghdr * , const s#nlattr * const [ ] ) ; const s#nla_policy * policy ; const t#u_int16_t attr_count ; } 
s#nfnetlink_subsystem struct nfnetlink_subsystem { const char * name ; t#__u8 subsys_id ; t#__u8 cb_count ; const s#nfnl_callback * cb ; } 
nfnetlink_subsys_register extern int nfnetlink_subsys_register ( const s#nfnetlink_subsystem * ) 
nfnetlink_subsys_unregister extern int nfnetlink_subsys_unregister ( const s#nfnetlink_subsystem * ) 
nfnetlink_has_listeners extern int nfnetlink_has_listeners ( unsigned int ) 
nfnetlink_send extern int nfnetlink_send ( s#sk_buff * , t#u32 , unsigned , int , t#gfp_t ) 
nfnetlink_set_err extern void nfnetlink_set_err ( t#u32 , t#u32 , int ) 
nfnetlink_unicast extern int nfnetlink_unicast ( s#sk_buff * , t#u_int32_t , int ) 

/* net/netfilter/nfnetlink_log.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##xfrm_state
s##rt6_info
s##dn_route
s##in_device
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
nfulnl_log_packet void nfulnl_log_packet ( t#u_int8_t , unsigned int , const s#sk_buff * , const s#net_device * , const s#net_device * , const s#nf_loginfo * , const char * ) 

/* net/netfilter/x_tables.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
s#xt_target_param struct xt_target_param { const s#net_device * in , * out ; const s#xt_target * target ; const void * targinfo ; unsigned int hooknum ; t#u_int8_t family ; } 
s#xt_tgchk_param struct xt_tgchk_param { const char * table ; const void * entryinfo ; const s#xt_target * target ; void * targinfo ; unsigned int hook_mask ; t#u_int8_t family ; } 
s#xt_tgdtor_param struct xt_tgdtor_param { const s#xt_target * target ; void * targinfo ; t#u_int8_t family ; } 
s#xt_target struct xt_target { s#list_head list ; const char name [ 30 - 1 ] ; unsigned int ( * target ) ( s#sk_buff * , const s#xt_target_param * ) ; t#bool ( * checkentry ) ( const s#xt_tgchk_param * ) ; void ( * destroy ) ( const s#xt_tgdtor_param * ) ; void ( * compat_from_user ) ( void * , void * ) ; int ( * compat_to_user ) ( void * , void * ) ; s#module * me ; const char * table ; unsigned int targetsize ; unsigned int compatsize ; unsigned int hooks ; unsigned short proto ; unsigned short family ; t#u_int8_t revision ; } 
xt_register_target extern int xt_register_target ( s#xt_target * ) 
xt_unregister_target extern void xt_unregister_target ( s#xt_target * ) 
xt_register_targets extern int xt_register_targets ( s#xt_target * , unsigned int ) 
xt_unregister_targets extern void xt_unregister_targets ( s#xt_target * , unsigned int ) 
s#xt_match_param struct xt_match_param { const s#net_device * in , * out ; const s#xt_match * match ; const void * matchinfo ; int fragoff ; unsigned int thoff ; unsigned int hooknum ; t#u_int8_t family ; t#bool * hotdrop ; } 
s#xt_mtchk_param struct xt_mtchk_param { const char * table ; const void * entryinfo ; const s#xt_match * match ; void * matchinfo ; unsigned int hook_mask ; t#u_int8_t family ; } 
s#xt_mtdtor_param struct xt_mtdtor_param { const s#xt_match * match ; void * matchinfo ; t#u_int8_t family ; } 
s#xt_match struct xt_match { s#list_head list ; const char name [ 30 - 1 ] ; t#u_int8_t revision ; t#bool ( * match ) ( const s#sk_buff * , const s#xt_match_param * ) ; t#bool ( * checkentry ) ( const s#xt_mtchk_param * ) ; void ( * destroy ) ( const s#xt_mtdtor_param * ) ; void ( * compat_from_user ) ( void * , void * ) ; int ( * compat_to_user ) ( void * , void * ) ; s#module * me ; unsigned long data ; const char * table ; unsigned int matchsize ; unsigned int compatsize ; unsigned int hooks ; unsigned short proto ; unsigned short family ; } 
xt_register_match extern int xt_register_match ( s#xt_match * ) 
xt_unregister_match extern void xt_unregister_match ( s#xt_match * ) 
xt_register_matches extern int xt_register_matches ( s#xt_match * , unsigned int ) 
xt_unregister_matches extern void xt_unregister_matches ( s#xt_match * , unsigned int ) 
xt_find_match extern s#xt_match * xt_find_match ( t#u8 , const char * , t#u8 ) 
xt_find_target extern s#xt_target * xt_find_target ( t#u8 , const char * , t#u8 ) 
xt_request_find_target extern s#xt_target * xt_request_find_target ( t#u8 , const char * , t#u8 ) 
xt_find_revision extern int xt_find_revision ( t#u8 , const char * , t#u8 , int , int * ) 
xt_check_match extern int xt_check_match ( s#xt_mtchk_param * , unsigned int , t#u_int8_t , t#bool ) 
xt_compat_add_offset extern int xt_compat_add_offset ( t#u_int8_t , unsigned int , short ) 
xt_compat_flush_offsets extern void xt_compat_flush_offsets ( t#u_int8_t ) 
xt_compat_calc_jump extern short xt_compat_calc_jump ( t#u_int8_t , unsigned int ) 
xt_compat_match_offset extern int xt_compat_match_offset ( const s#xt_match * ) 
s#xt_entry_match struct xt_entry_match { union { struct { t#__u16 match_size ; char name [ 30 - 1 ] ; t#__u8 revision ; } user ; struct { t#__u16 match_size ; s#xt_match * match ; } kernel ; t#__u16 match_size ; } u ; unsigned char data [ 0 ] ; } 
xt_compat_match_from_user extern int xt_compat_match_from_user ( s#xt_entry_match * , void * * , unsigned int * ) 
xt_compat_match_to_user extern int xt_compat_match_to_user ( s#xt_entry_match * , void * * , unsigned int * ) 
xt_check_target extern int xt_check_target ( s#xt_tgchk_param * , unsigned int , t#u_int8_t , t#bool ) 
xt_compat_target_offset extern int xt_compat_target_offset ( const s#xt_target * ) 
s#xt_entry_target struct xt_entry_target { union { struct { t#__u16 target_size ; char name [ 30 - 1 ] ; t#__u8 revision ; } user ; struct { t#__u16 target_size ; s#xt_target * target ; } kernel ; t#__u16 target_size ; } u ; unsigned char data [ 0 ] ; } 
xt_compat_target_from_user extern void xt_compat_target_from_user ( s#xt_entry_target * , void * * , unsigned int * ) 
xt_compat_target_to_user extern int xt_compat_target_to_user ( s#xt_entry_target * , void * * , unsigned int * ) 
xt_alloc_table_info extern s#xt_table_info * xt_alloc_table_info ( unsigned int ) 
xt_free_table_info extern void xt_free_table_info ( s#xt_table_info * ) 
xt_find_table_lock extern s#xt_table * xt_find_table_lock ( s#net * , t#u_int8_t , const char * ) 
xt_table_unlock extern void xt_table_unlock ( s#xt_table * ) 
xt_compat_lock extern void xt_compat_lock ( t#u_int8_t ) 
xt_compat_unlock extern void xt_compat_unlock ( t#u_int8_t ) 
s#xt_info_lock struct xt_info_lock { t#spinlock_t lock ; unsigned char readers ; } 
per_cpu__xt_info_locks extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( s#xt_info_lock ) per_cpu__xt_info_locks 
xt_replace_table extern s#xt_table_info * xt_replace_table ( s#xt_table * , unsigned int , s#xt_table_info * , int * ) 
xt_register_table extern s#xt_table * xt_register_table ( s#net * , const s#xt_table * , s#xt_table_info * , s#xt_table_info * ) 
xt_unregister_table extern void * xt_unregister_table ( s#xt_table * ) 
xt_proto_init extern int xt_proto_init ( s#net * , t#u_int8_t ) 
xt_proto_fini extern void xt_proto_fini ( s#net * , t#u_int8_t ) 

/* net/netfilter/xt_RATEEST.o */
s#gnet_estimator struct gnet_estimator { signed char interval ; unsigned char ewma_log ; } 
s#xt_rateest struct xt_rateest { s#hlist_node list ; char name [ 16 ] ; unsigned int refcnt ; t#spinlock_t lock ; s#gnet_estimator params ; s#gnet_stats_rate_est rstats ; s#gnet_stats_basic_packed bstats ; } 
xt_rateest_lookup extern s#xt_rateest * xt_rateest_lookup ( const char * ) 
xt_rateest_put extern void xt_rateest_put ( s#xt_rateest * ) 

/* net/netlink/af_netlink.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##iw_handler_def
s##iw_public_data
s##sec_path
s##tvec_base
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
netlink_unicast extern int netlink_unicast ( s#sock * , s#sk_buff * , t#__u32 , int ) 
netlink_has_listeners extern int netlink_has_listeners ( s#sock * , unsigned int ) 
netlink_broadcast extern int netlink_broadcast ( s#sock * , s#sk_buff * , t#__u32 , t#__u32 , t#gfp_t ) 
netlink_set_err extern void netlink_set_err ( s#sock * , t#__u32 , t#__u32 , int ) 
netlink_kernel_create extern s#sock * netlink_kernel_create ( s#net * , int , unsigned int , void ( * ) ( s#sk_buff * ) , s#mutex * , s#module * ) 
netlink_kernel_release extern void netlink_kernel_release ( s#sock * ) 
netlink_set_nonroot extern void netlink_set_nonroot ( int , unsigned ) 
netlink_dump_start extern int netlink_dump_start ( s#sock * , s#sk_buff * , const s#nlmsghdr * , int ( * ) ( s#sk_buff * , s#netlink_callback * ) , int ( * ) ( s#netlink_callback * ) ) 
netlink_ack extern void netlink_ack ( s#sk_buff * , s#nlmsghdr * , int ) 
netlink_rcv_skb extern int netlink_rcv_skb ( s#sk_buff * , int ( * ) ( s#sk_buff * , s#nlmsghdr * ) ) 
nlmsg_notify extern int nlmsg_notify ( s#sock * , s#sk_buff * , t#u32 , unsigned int , int , t#gfp_t ) 
netlink_register_notifier extern int netlink_register_notifier ( s#notifier_block * ) 
netlink_unregister_notifier extern int netlink_unregister_notifier ( s#notifier_block * ) 

/* net/netlink/genetlink.o */
s#genl_family struct genl_family { unsigned int id ; unsigned int hdrsize ; char name [ 16 ] ; unsigned int version ; unsigned int maxattr ; t#bool netnsok ; s#nlattr * * attrbuf ; s#list_head ops_list ; s#list_head family_list ; s#list_head mcast_groups ; } 
s#genl_multicast_group struct genl_multicast_group { s#genl_family * family ; s#list_head list ; char name [ 16 ] ; t#u32 id ; } 
genl_register_mc_group extern int genl_register_mc_group ( s#genl_family * , s#genl_multicast_group * ) 
genl_unregister_mc_group extern void genl_unregister_mc_group ( s#genl_family * , s#genl_multicast_group * ) 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s#genl_ops struct genl_ops { t#u8 cmd ; unsigned int flags ; const s#nla_policy * policy ; int ( * doit ) ( s#sk_buff * , s#genl_info * ) ; int ( * dumpit ) ( s#sk_buff * , s#netlink_callback * ) ; int ( * done ) ( s#netlink_callback * ) ; s#list_head ops_list ; } 
genl_register_family_with_ops extern int genl_register_family_with_ops ( s#genl_family * , s#genl_ops * , t#size_t ) 
genl_register_ops extern int genl_register_ops ( s#genl_family * , s#genl_ops * ) 
genl_unregister_ops extern int genl_unregister_ops ( s#genl_family * , s#genl_ops * ) 
genl_register_family extern int genl_register_family ( s#genl_family * ) 
genl_unregister_family extern int genl_unregister_family ( s#genl_family * ) 
genlmsg_multicast_allns int genlmsg_multicast_allns ( s#sk_buff * , t#u32 , unsigned int , t#gfp_t ) 

/* net/phonet/af_phonet.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
phonet_header_ops extern s#header_ops phonet_header_ops 
s#sockaddr_pn struct sockaddr_pn { t#sa_family_t spn_family ; t#__u8 spn_obj ; t#__u8 spn_dev ; t#__u8 spn_resource ; t#__u8 spn_zero [ sizeof ( struct sockaddr ) - sizeof ( sa_family_t ) - 3 ] ; } 
pn_skb_send int pn_skb_send ( s#sock * , s#sk_buff * , const s#sockaddr_pn * ) 
s#phonet_protocol struct phonet_protocol { const s#proto_ops * ops ; s#proto * prot ; int sock_type ; } 
phonet_proto_register int phonet_proto_register ( int , s#phonet_protocol * ) 
phonet_proto_unregister void phonet_proto_unregister ( int , s#phonet_protocol * ) 

/* net/phonet/socket.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
pn_sock_hash void pn_sock_hash ( s#sock * ) 
pn_sock_unhash void pn_sock_unhash ( s#sock * ) 
phonet_stream_ops extern const s#proto_ops phonet_stream_ops 
pn_sock_get_port int pn_sock_get_port ( s#sock * , unsigned short ) 

/* net/rds/cong.o */
s#rds_cong_map struct rds_cong_map { s#rb_node m_rb_node ; t#__be32 m_addr ; t#wait_queue_head_t m_waitq ; s#list_head m_conn_list ; unsigned long m_page_addrs [ ( ( ( ( ( 65536 / 8 ) ) + ( ( typeof ( ( 65536 / 8 ) ) ) ( ( ( 1UL ) << 12 ) ) - 1 ) ) & ~ ( ( typeof ( ( 65536 / 8 ) ) ) ( ( ( 1UL ) << 12 ) ) - 1 ) ) / ( ( 1UL ) << 12 ) ) ] ; } 
rds_cong_map_updated void rds_cong_map_updated ( s#rds_cong_map * , t#uint64_t ) 

/* net/rds/connection.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s#rds_header struct rds_header { t#__be64 h_sequence ; t#__be64 h_ack ; t#__be32 h_len ; t#__be16 h_sport ; t#__be16 h_dport ; t#u8 h_flags ; t#u8 h_credit ; t#u8 h_padding [ 4 ] ; t#__sum16 h_csum ; t#u8 h_exthdr [ 16 ] ; } 
t#rds_rdma_cookie_t typedef t#u_int64_t rds_rdma_cookie_t 
s#rds_incoming struct rds_incoming { t#atomic_t i_refcount ; s#list_head i_item ; s#rds_connection * i_conn ; s#rds_header i_hdr ; unsigned long i_rx_jiffies ; t#__be32 i_saddr ; t#rds_rdma_cookie_t i_rdma_cookie ; } 
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s#rds_notifier struct rds_notifier { s#list_head n_list ; t#uint64_t n_user_token ; int n_status ; } 
s#rds_rdma_op struct rds_rdma_op { t#u32 r_key ; t#u64 r_remote_addr ; unsigned int r_write : 1 ; unsigned int r_fence : 1 ; unsigned int r_notify : 1 ; unsigned int r_recverr : 1 ; unsigned int r_mapped : 1 ; s#rds_notifier * r_notifier ; unsigned int r_bytes ; unsigned int r_nents ; unsigned int r_count ; s#scatterlist r_sg [ 0 ] ; } 
s##ib_pkey_cache
s##ib_gid_cache
s##iw_cm_verbs
s##rds_info_iterator
s#rds_transport struct rds_transport { char t_name [ 16 ] ; s#list_head t_item ; s#module * t_owner ; unsigned int t_prefer_loopback : 1 ; unsigned int t_type ; int ( * laddr_check ) ( t#__be32 ) ; int ( * conn_alloc ) ( s#rds_connection * , t#gfp_t ) ; void ( * conn_free ) ( void * ) ; int ( * conn_connect ) ( s#rds_connection * ) ; void ( * conn_shutdown ) ( s#rds_connection * ) ; void ( * xmit_prepare ) ( s#rds_connection * ) ; void ( * xmit_complete ) ( s#rds_connection * ) ; int ( * xmit ) ( s#rds_connection * , s#rds_message * , unsigned int , unsigned int , unsigned int ) ; int ( * xmit_cong_map ) ( s#rds_connection * , s#rds_cong_map * , unsigned long ) ; int ( * xmit_rdma ) ( s#rds_connection * , s#rds_rdma_op * ) ; int ( * recv ) ( s#rds_connection * ) ; int ( * inc_copy_to_user ) ( s#rds_incoming * , s#iovec * , t#size_t ) ; void ( * inc_purge ) ( s#rds_incoming * ) ; void ( * inc_free ) ( s#rds_incoming * ) ; int ( * cm_handle_connect ) ( s#rdma_cm_id * , s#rdma_cm_event * ) ; int ( * cm_initiate_connect ) ( s#rdma_cm_id * ) ; void ( * cm_connect_complete ) ( s#rds_connection * , s#rdma_cm_event * ) ; unsigned int ( * stats_info_copy ) ( s#rds_info_iterator * , unsigned int ) ; void ( * exit ) ( void ) ; void * ( * get_mr ) ( s#scatterlist * , unsigned long , s#rds_sock * , t#u32 * ) ; void ( * sync_mr ) ( void * , int ) ; void ( * free_mr ) ( void * , int ) ; void ( * flush_mrs ) ( void ) ; } 
s#rds_sock struct rds_sock { s#sock rs_sk ; t#u64 rs_user_addr ; t#u64 rs_user_bytes ; s#rb_node rs_bound_node ; t#__be32 rs_bound_addr ; t#__be32 rs_conn_addr ; t#__be16 rs_bound_port ; t#__be16 rs_conn_port ; s#rds_transport * rs_transport ; s#rds_connection * rs_conn ; int rs_congested ; t#spinlock_t rs_lock ; s#list_head rs_send_queue ; t#u32 rs_snd_bytes ; int rs_rcv_bytes ; s#list_head rs_notify_queue ; t#uint64_t rs_cong_mask ; t#uint64_t rs_cong_notify ; s#list_head rs_cong_list ; unsigned long rs_cong_track ; t#rwlock_t rs_recv_lock ; s#list_head rs_recv_queue ; s#list_head rs_item ; t#spinlock_t rs_rdma_lock ; s#rb_root rs_rdma_keys ; unsigned char rs_recverr , rs_cong_monitor ; } 
s#rds_mr struct rds_mr { s#rb_node r_rb_node ; t#atomic_t r_refcount ; t#u32 r_key ; unsigned int r_use_once : 1 ; unsigned int r_invalidate : 1 ; unsigned int r_write : 1 ; unsigned long r_state ; s#rds_sock * r_sock ; s#rds_transport * r_trans ; void * r_trans_private ; } 
s#rds_message struct rds_message { t#atomic_t m_refcount ; s#list_head m_sock_item ; s#list_head m_conn_item ; s#rds_incoming m_inc ; t#u64 m_ack_seq ; t#__be32 m_daddr ; unsigned long m_flags ; t#spinlock_t m_rs_lock ; s#rds_sock * m_rs ; s#rds_rdma_op * m_rdma_op ; t#rds_rdma_cookie_t m_rdma_cookie ; s#rds_mr * m_rdma_mr ; unsigned int m_nents ; unsigned int m_count ; s#scatterlist m_sg [ 0 ] ; } 
s#rds_connection struct rds_connection { s#hlist_node c_hash_node ; t#__be32 c_laddr ; t#__be32 c_faddr ; unsigned int c_loopback : 1 ; s#rds_connection * c_passive ; s#rds_cong_map * c_lcong ; s#rds_cong_map * c_fcong ; s#mutex c_send_lock ; s#rds_message * c_xmit_rm ; unsigned long c_xmit_sg ; unsigned int c_xmit_hdr_off ; unsigned int c_xmit_data_off ; unsigned int c_xmit_rdma_sent ; t#spinlock_t c_lock ; t#u64 c_next_tx_seq ; s#list_head c_send_queue ; s#list_head c_retrans ; t#u64 c_next_rx_seq ; s#rds_transport * c_trans ; void * c_transport_data ; t#atomic_t c_state ; unsigned long c_flags ; unsigned long c_reconnect_jiffies ; s#delayed_work c_send_w ; s#delayed_work c_recv_w ; s#delayed_work c_conn_w ; s#work_struct c_down_w ; s#mutex c_cm_lock ; s#list_head c_map_item ; unsigned long c_map_queued ; unsigned long c_map_offset ; unsigned long c_map_bytes ; unsigned int c_unacked_packets ; unsigned int c_unacked_bytes ; unsigned int c_version ; } 
rds_conn_create s#rds_connection * rds_conn_create ( t#__be32 , t#__be32 , s#rds_transport * , t#gfp_t ) 
rds_conn_create_outgoing s#rds_connection * rds_conn_create_outgoing ( t#__be32 , t#__be32 , s#rds_transport * , t#gfp_t ) 
rds_conn_destroy void rds_conn_destroy ( s#rds_connection * ) 
s#rds_info_lengths struct rds_info_lengths { unsigned int nr ; unsigned int each ; } 
rds_for_each_conn_info void rds_for_each_conn_info ( s#socket * , unsigned int , s#rds_info_iterator * , s#rds_info_lengths * , int ( * ) ( s#rds_connection * , void * ) , t#size_t ) 
rds_conn_drop void rds_conn_drop ( s#rds_connection * ) 

/* net/rds/info.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s#rds_info_iterator struct rds_info_iterator { s#page * * pages ; void * addr ; unsigned long offset ; } 
t#rds_info_func typedef void ( * rds_info_func ) ( s#socket * , unsigned int , s#rds_info_iterator * , s#rds_info_lengths * ) 
rds_info_register_func void rds_info_register_func ( int , t#rds_info_func ) 
rds_info_deregister_func void rds_info_deregister_func ( int , t#rds_info_func ) 
rds_info_copy void rds_info_copy ( s#rds_info_iterator * , void * , unsigned long ) 

/* net/rds/message.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##ib_pkey_cache
s##ib_gid_cache
s##iw_cm_verbs
s##iw_handler_def
s##iw_public_data
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rds_info_iterator
rds_message_addref void rds_message_addref ( s#rds_message * ) 
rds_message_put void rds_message_put ( s#rds_message * ) 
rds_message_populate_header void rds_message_populate_header ( s#rds_header * , t#__be16 , t#__be16 , t#u64 ) 
rds_message_add_extension int rds_message_add_extension ( s#rds_header * , unsigned int , const void * , unsigned int ) 
rds_message_add_rdma_dest_extension int rds_message_add_rdma_dest_extension ( s#rds_header * , t#u32 , t#u32 ) 
rds_message_unmapped void rds_message_unmapped ( s#rds_message * ) 

/* net/rds/page.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
rds_page_copy_user int rds_page_copy_user ( s#page * , unsigned long , void * , unsigned long , int ) 

/* net/rds/recv.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s##ib_pkey_cache
s##ib_gid_cache
s##iw_cm_verbs
s##rds_info_iterator
rds_inc_init void rds_inc_init ( s#rds_incoming * , s#rds_connection * , t#__be32 ) 
rds_inc_addref void rds_inc_addref ( s#rds_incoming * ) 
rds_inc_put void rds_inc_put ( s#rds_incoming * ) 
e#km_type enum km_type { KM_BOUNCE_READ , KM_SKB_SUNRPC_DATA , KM_SKB_DATA_SOFTIRQ , KM_USER0 , KM_USER1 , KM_BIO_SRC_IRQ , KM_BIO_DST_IRQ , KM_PTE0 , KM_PTE1 , KM_IRQ0 , KM_IRQ1 , KM_SOFTIRQ0 , KM_SOFTIRQ1 , KM_SYNC_ICACHE , KM_SYNC_DCACHE , KM_UML_USERCOPY , KM_IRQ_PTE , KM_NMI , KM_NMI_PTE , KM_KDB , KM_TYPE_NR } 
rds_recv_incoming void rds_recv_incoming ( s#rds_connection * , t#__be32 , t#__be32 , s#rds_incoming * , t#gfp_t , e#km_type ) 

/* net/rds/send.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##ib_pkey_cache
s##ib_gid_cache
s##iw_cm_verbs
s##iw_handler_def
s##iw_public_data
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rds_info_iterator
rds_rdma_send_complete void rds_rdma_send_complete ( s#rds_message * , int ) 
rds_send_get_message s#rds_message * rds_send_get_message ( s#rds_connection * , s#rds_rdma_op * ) 
t#is_acked_func typedef int ( * is_acked_func ) ( s#rds_message * , t#uint64_t ) 
rds_send_drop_acked void rds_send_drop_acked ( s#rds_connection * , t#u64 , t#is_acked_func ) 

/* net/rds/stats.o */
s#rds_statistics struct rds_statistics { t#uint64_t s_conn_reset ; t#uint64_t s_recv_drop_bad_checksum ; t#uint64_t s_recv_drop_old_seq ; t#uint64_t s_recv_drop_no_sock ; t#uint64_t s_recv_drop_dead_sock ; t#uint64_t s_recv_deliver_raced ; t#uint64_t s_recv_delivered ; t#uint64_t s_recv_queued ; t#uint64_t s_recv_immediate_retry ; t#uint64_t s_recv_delayed_retry ; t#uint64_t s_recv_ack_required ; t#uint64_t s_recv_rdma_bytes ; t#uint64_t s_recv_ping ; t#uint64_t s_send_queue_empty ; t#uint64_t s_send_queue_full ; t#uint64_t s_send_sem_contention ; t#uint64_t s_send_sem_queue_raced ; t#uint64_t s_send_immediate_retry ; t#uint64_t s_send_delayed_retry ; t#uint64_t s_send_drop_acked ; t#uint64_t s_send_ack_required ; t#uint64_t s_send_queued ; t#uint64_t s_send_rdma ; t#uint64_t s_send_rdma_bytes ; t#uint64_t s_send_pong ; t#uint64_t s_page_remainder_hit ; t#uint64_t s_page_remainder_miss ; t#uint64_t s_copy_to_user ; t#uint64_t s_copy_from_user ; t#uint64_t s_cong_update_queued ; t#uint64_t s_cong_update_received ; t#uint64_t s_cong_send_error ; t#uint64_t s_cong_send_blocked ; } 
per_cpu__rds_stats extern __attribute__ ( ( section ( ".data.percpu" "" ) ) ) __typeof__ ( s#rds_statistics ) per_cpu__rds_stats 
s##rds_info_iterator
rds_stats_info_copy void rds_stats_info_copy ( s#rds_info_iterator * , t#uint64_t * , const char * const * , t#size_t ) 

/* net/rds/threads.o */
s##workqueue_struct
rds_wq extern s#workqueue_struct * rds_wq 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s##rds_rdma_op
s##ib_pkey_cache
s##ib_gid_cache
s##iw_cm_verbs
s##rds_info_iterator
s##rds_mr
rds_connect_complete void rds_connect_complete ( s#rds_connection * ) 

/* net/rds/transport.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s##rds_rdma_op
s##rds_mr
s##ib_pkey_cache
s##ib_gid_cache
s##iw_cm_verbs
s##rds_info_iterator
rds_trans_register int rds_trans_register ( s#rds_transport * ) 
rds_trans_unregister void rds_trans_unregister ( s#rds_transport * ) 

/* net/rfkill/core.o */
e#rfkill_type enum rfkill_type { RFKILL_TYPE_ALL = 0 , RFKILL_TYPE_WLAN , RFKILL_TYPE_BLUETOOTH , RFKILL_TYPE_UWB , RFKILL_TYPE_WIMAX , RFKILL_TYPE_WWAN , RFKILL_TYPE_GPS , NUM_RFKILL_TYPES , } 
s#rfkill_ops struct rfkill_ops { void ( * poll ) ( s#rfkill * , void * ) ; void ( * query ) ( s#rfkill * , void * ) ; int ( * set_block ) ( void * , t#bool ) ; } 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#rfkill struct rfkill { t#spinlock_t lock ; const char * name ; e#rfkill_type type ; unsigned long state ; t#u32 idx ; t#bool registered ; t#bool persistent ; const s#rfkill_ops * ops ; void * data ; s#led_trigger led_trigger ; const char * ledtrigname ; s#device dev ; s#list_head node ; s#delayed_work poll_work ; s#work_struct uevent_work ; s#work_struct sync_work ; } 
rfkill_get_led_trigger_name const char * rfkill_get_led_trigger_name ( s#rfkill * ) 
rfkill_set_led_trigger_name void rfkill_set_led_trigger_name ( s#rfkill * , const char * ) 
rfkill_set_hw_state t#bool rfkill_set_hw_state ( s#rfkill * , t#bool ) 
rfkill_set_sw_state t#bool rfkill_set_sw_state ( s#rfkill * , t#bool ) 
rfkill_init_sw_state void rfkill_init_sw_state ( s#rfkill * , t#bool ) 
rfkill_set_states void rfkill_set_states ( s#rfkill * , t#bool , t#bool ) 
rfkill_pause_polling void rfkill_pause_polling ( s#rfkill * ) 
rfkill_resume_polling void rfkill_resume_polling ( s#rfkill * ) 
rfkill_blocked t#bool rfkill_blocked ( s#rfkill * ) 
rfkill_alloc s#rfkill * __attribute__ ( ( warn_unused_result ) ) rfkill_alloc ( const char * , s#device * , const e#rfkill_type , const s#rfkill_ops * , void * ) 
rfkill_register int __attribute__ ( ( warn_unused_result ) ) rfkill_register ( s#rfkill * ) 
rfkill_unregister void rfkill_unregister ( s#rfkill * ) 
rfkill_destroy void rfkill_destroy ( s#rfkill * ) 

/* net/rxrpc/af_rxrpc.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s#key_construction struct key_construction { s#key * key ; s#key * authkey ; } 
t#request_key_actor_t typedef int ( * request_key_actor_t ) ( s#key_construction * , const char * , void * ) 
s#key_type struct key_type { const char * name ; t#size_t def_datalen ; int ( * instantiate ) ( s#key * , const void * , t#size_t ) ; int ( * update ) ( s#key * , const void * , t#size_t ) ; int ( * match ) ( const s#key * , const void * ) ; void ( * revoke ) ( s#key * ) ; void ( * destroy ) ( s#key * ) ; void ( * describe ) ( const s#key * , s#seq_file * ) ; long ( * read ) ( const s#key * , char * , t#size_t ) ; t#request_key_actor_t request_key ; s#list_head link ; } 
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s#sockaddr_rxrpc struct sockaddr_rxrpc { t#sa_family_t srx_family ; t#u16 srx_service ; t#u16 transport_type ; t#u16 transport_len ; union { t#sa_family_t family ; s#sockaddr_in sin ; s#sockaddr_in6 sin6 ; } transport ; } 
s#rxrpc_local struct rxrpc_local { s#socket * socket ; s#work_struct destroyer ; s#work_struct acceptor ; s#work_struct rejecter ; s#list_head services ; s#list_head link ; s#rw_semaphore defrag_sem ; s#sk_buff_head accept_queue ; s#sk_buff_head reject_queue ; t#spinlock_t lock ; t#rwlock_t services_lock ; t#atomic_t usage ; int debug_id ; volatile char error_rcvd ; s#sockaddr_rxrpc srx ; } 
t#suseconds_t typedef t#__kernel_suseconds_t suseconds_t 
s#rxrpc_peer struct rxrpc_peer { s#work_struct destroyer ; s#list_head link ; s#list_head error_targets ; t#spinlock_t lock ; t#atomic_t usage ; unsigned if_mtu ; unsigned mtu ; unsigned maxdata ; unsigned short hdrsize ; int debug_id ; int net_error ; s#sockaddr_rxrpc srx ; t#suseconds_t rtt ; unsigned rtt_point ; unsigned rtt_usage ; t#suseconds_t rtt_cache [ 32 ] ; } 
s#rxrpc_transport struct rxrpc_transport { s#rxrpc_local * local ; s#rxrpc_peer * peer ; s#work_struct error_handler ; s#rb_root bundles ; s#rb_root client_conns ; s#rb_root server_conns ; s#list_head link ; s#sk_buff_head error_queue ; t#time_t put_time ; t#spinlock_t client_lock ; t#rwlock_t conn_lock ; t#atomic_t usage ; int debug_id ; unsigned int conn_idcounter ; } 
s#rxrpc_conn_bundle struct rxrpc_conn_bundle { s#rb_node node ; s#list_head unused_conns ; s#list_head avail_conns ; s#list_head busy_conns ; s#key * key ; t#wait_queue_head_t chanwait ; t#atomic_t usage ; int debug_id ; unsigned short num_conns ; t#__be16 service_id ; t#u8 security_ix ; } 
s#rxrpc_security struct rxrpc_security { s#module * owner ; s#list_head link ; const char * name ; t#u8 security_index ; int ( * init_connection_security ) ( s#rxrpc_connection * ) ; void ( * prime_packet_security ) ( s#rxrpc_connection * ) ; int ( * secure_packet ) ( const s#rxrpc_call * , s#sk_buff * , t#size_t , void * ) ; int ( * verify_packet ) ( const s#rxrpc_call * , s#sk_buff * , t#u32 * ) ; int ( * issue_challenge ) ( s#rxrpc_connection * ) ; int ( * respond_to_challenge ) ( s#rxrpc_connection * , s#sk_buff * , t#u32 * ) ; int ( * verify_response ) ( s#rxrpc_connection * , s#sk_buff * , t#u32 * ) ; void ( * clear ) ( s#rxrpc_connection * ) ; } 
s##crypto_blkcipher
s#rxrpc_crypt struct rxrpc_crypt { union { t#u8 x [ 8 ] ; t#__be32 n [ 2 ] ; } ; } 
s#rxrpc_connection struct rxrpc_connection { s#rxrpc_transport * trans ; s#rxrpc_conn_bundle * bundle ; s#work_struct processor ; s#rb_node node ; s#list_head link ; s#list_head bundle_link ; s#rb_root calls ; s#sk_buff_head rx_queue ; s#rxrpc_call * channels [ 4 ] ; s#rxrpc_security * security ; s#key * key ; s#key * server_key ; s#crypto_blkcipher * cipher ; s#rxrpc_crypt csum_iv ; unsigned long events ; t#time_t put_time ; t#rwlock_t lock ; t#spinlock_t state_lock ; t#atomic_t usage ; t#u32 real_conn_id ; enum { RXRPC_CONN_UNUSED , RXRPC_CONN_CLIENT , RXRPC_CONN_SERVER_UNSECURED , RXRPC_CONN_SERVER_CHALLENGING , RXRPC_CONN_SERVER , RXRPC_CONN_REMOTELY_ABORTED , RXRPC_CONN_LOCALLY_ABORTED , RXRPC_CONN_NETWORK_ERROR , } state ; int error ; int debug_id ; unsigned call_counter ; t#atomic_t serial ; t#atomic_t hi_serial ; t#u8 avail_calls ; t#u8 size_align ; t#u8 header_size ; t#u8 security_size ; t#u32 security_level ; t#u32 security_nonce ; t#__be32 epoch ; t#__be32 cid ; t#__be16 service_id ; t#u8 security_ix ; t#u8 in_clientflag ; t#u8 out_clientflag ; } 
t#rxrpc_interceptor_t typedef void ( * rxrpc_interceptor_t ) ( s#sock * , unsigned long , s#sk_buff * ) 
s#rxrpc_sock struct rxrpc_sock { s#sock sk ; t#rxrpc_interceptor_t interceptor ; s#rxrpc_local * local ; s#rxrpc_transport * trans ; s#rxrpc_conn_bundle * bundle ; s#rxrpc_connection * conn ; s#list_head listen_link ; s#list_head secureq ; s#list_head acceptq ; s#key * key ; s#key * securities ; s#rb_root calls ; unsigned long flags ; t#rwlock_t call_lock ; t#u32 min_sec_level ; s#sockaddr_rxrpc srx ; t#sa_family_t proto ; t#__be16 service_id ; } 
t#rxrpc_seq_t typedef t#u32 rxrpc_seq_t 
t#rxrpc_seq_net_t typedef t#__be32 rxrpc_seq_net_t 
s#rxrpc_call struct rxrpc_call { s#rxrpc_connection * conn ; s#rxrpc_sock * socket ; s#timer_list lifetimer ; s#timer_list deadspan ; s#timer_list ack_timer ; s#timer_list resend_timer ; s#work_struct destroyer ; s#work_struct processor ; s#list_head link ; s#list_head error_link ; s#list_head accept_link ; s#rb_node sock_node ; s#rb_node conn_node ; s#sk_buff_head rx_queue ; s#sk_buff_head rx_oos_queue ; s#sk_buff * tx_pending ; t#wait_queue_head_t tx_waitq ; unsigned long user_call_ID ; unsigned long creation_jif ; unsigned long flags ; unsigned long events ; t#spinlock_t lock ; t#rwlock_t state_lock ; t#atomic_t usage ; t#atomic_t sequence ; t#u32 abort_code ; enum { RXRPC_CALL_CLIENT_SEND_REQUEST , RXRPC_CALL_CLIENT_AWAIT_REPLY , RXRPC_CALL_CLIENT_RECV_REPLY , RXRPC_CALL_CLIENT_FINAL_ACK , RXRPC_CALL_SERVER_SECURING , RXRPC_CALL_SERVER_ACCEPTING , RXRPC_CALL_SERVER_RECV_REQUEST , RXRPC_CALL_SERVER_ACK_REQUEST , RXRPC_CALL_SERVER_SEND_REPLY , RXRPC_CALL_SERVER_AWAIT_ACK , RXRPC_CALL_COMPLETE , RXRPC_CALL_SERVER_BUSY , RXRPC_CALL_REMOTELY_ABORTED , RXRPC_CALL_LOCALLY_ABORTED , RXRPC_CALL_NETWORK_ERROR , RXRPC_CALL_DEAD , } state ; int debug_id ; t#u8 channel ; t#u8 acks_head ; t#u8 acks_tail ; t#u8 acks_winsz ; t#u8 acks_unacked ; int acks_latest ; t#rxrpc_seq_t acks_hard ; unsigned long * acks_window ; t#rxrpc_seq_t rx_data_expect ; t#rxrpc_seq_t rx_data_post ; t#rxrpc_seq_t rx_data_recv ; t#rxrpc_seq_t rx_data_eaten ; t#rxrpc_seq_t rx_first_oos ; t#rxrpc_seq_t ackr_win_top ; t#rxrpc_seq_net_t ackr_prev_seq ; t#u8 ackr_reason ; t#__be32 ackr_serial ; t#atomic_t ackr_not_idle ; unsigned long ackr_window [ ( ( ( 255 ) + ( 64 ) - 1 ) / ( 64 ) ) + 1 ] ; t#__be32 cid ; t#__be32 call_id ; } 
rxrpc_kernel_begin_call extern s#rxrpc_call * rxrpc_kernel_begin_call ( s#socket * , s#sockaddr_rxrpc * , s#key * , unsigned long , t#gfp_t ) 
rxrpc_kernel_end_call extern void rxrpc_kernel_end_call ( s#rxrpc_call * ) 
rxrpc_kernel_intercept_rx_messages extern void rxrpc_kernel_intercept_rx_messages ( s#socket * , t#rxrpc_interceptor_t ) 

/* net/rxrpc/ar-accept.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s##crypto_blkcipher
rxrpc_kernel_accept_call extern s#rxrpc_call * rxrpc_kernel_accept_call ( s#socket * , unsigned long ) 
rxrpc_kernel_reject_call extern int rxrpc_kernel_reject_call ( s#socket * ) 

/* net/rxrpc/ar-key.o */
s##key_user
s##keyring_list
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
key_type_rxrpc extern s#key_type key_type_rxrpc 
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s##skcipher_givcrypt_request
s##aead_givcrypt_request
s##crypto_type
rxrpc_get_server_data_key extern int rxrpc_get_server_data_key ( s#rxrpc_connection * , const void * , t#time_t , t#u32 ) 
rxrpc_get_null_key extern s#key * rxrpc_get_null_key ( const char * ) 

/* net/rxrpc/ar-output.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s##crypto_blkcipher
rxrpc_kernel_send_data extern int rxrpc_kernel_send_data ( s#rxrpc_call * , s#msghdr * , t#size_t ) 
rxrpc_kernel_abort_call extern void rxrpc_kernel_abort_call ( s#rxrpc_call * , t#u32 ) 

/* net/rxrpc/ar-recvmsg.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
rxrpc_kernel_data_delivered extern void rxrpc_kernel_data_delivered ( s#sk_buff * ) 
rxrpc_kernel_is_data_last extern t#bool rxrpc_kernel_is_data_last ( s#sk_buff * ) 
rxrpc_kernel_get_abort_code extern t#u32 rxrpc_kernel_get_abort_code ( s#sk_buff * ) 
rxrpc_kernel_get_error_number extern int rxrpc_kernel_get_error_number ( s#sk_buff * ) 

/* net/rxrpc/ar-security.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##iw_handler_def
s##iw_public_data
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
s##skcipher_givcrypt_request
s##aead_givcrypt_request
s##crypto_type
rxrpc_register_security extern int rxrpc_register_security ( s#rxrpc_security * ) 
rxrpc_unregister_security extern void rxrpc_unregister_security ( s#rxrpc_security * ) 

/* net/rxrpc/ar-skbuff.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
rxrpc_kernel_free_skb extern void rxrpc_kernel_free_skb ( s#sk_buff * ) 

/* net/sched/act_api.o */
s#tcf_t struct tcf_t { t#__u64 install ; t#__u64 lastuse ; t#__u64 expires ; } 
s#tcf_common struct tcf_common { s#tcf_common * tcfc_next ; t#u32 tcfc_index ; int tcfc_refcnt ; int tcfc_bindcnt ; t#u32 tcfc_capab ; int tcfc_action ; s#tcf_t tcfc_tm ; s#gnet_stats_basic_packed tcfc_bstats ; s#gnet_stats_queue tcfc_qstats ; s#gnet_stats_rate_est tcfc_rate_est ; t#spinlock_t tcfc_lock ; } 
s#tcf_hashinfo struct tcf_hashinfo { s#tcf_common * * htab ; unsigned int hmask ; t#rwlock_t * lock ; } 
tcf_hash_destroy extern void tcf_hash_destroy ( s#tcf_common * , s#tcf_hashinfo * ) 
tcf_hash_release extern int tcf_hash_release ( s#tcf_common * , int , s#tcf_hashinfo * ) 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##tcf_walker
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s#tc_action_ops struct tc_action_ops { s#tc_action_ops * next ; s#tcf_hashinfo * hinfo ; char kind [ 16 ] ; t#__u32 type ; t#__u32 capab ; s#module * owner ; int ( * act ) ( s#sk_buff * , s#tc_action * , s#tcf_result * ) ; int ( * get_stats ) ( s#sk_buff * , s#tc_action * ) ; int ( * dump ) ( s#sk_buff * , s#tc_action * , int , int ) ; int ( * cleanup ) ( s#tc_action * , int ) ; int ( * lookup ) ( s#tc_action * , t#u32 ) ; int ( * init ) ( s#nlattr * , s#nlattr * , s#tc_action * , int , int ) ; int ( * walk ) ( s#sk_buff * , s#netlink_callback * , int , s#tc_action * ) ; } 
s#tc_action struct tc_action { void * priv ; s#tc_action_ops * ops ; t#__u32 type ; t#__u32 order ; s#tc_action * next ; } 
tcf_generic_walker extern int tcf_generic_walker ( s#sk_buff * , s#netlink_callback * , int , s#tc_action * ) 
tcf_hash_lookup extern s#tcf_common * tcf_hash_lookup ( t#u32 , s#tcf_hashinfo * ) 
tcf_hash_new_index extern t#u32 tcf_hash_new_index ( t#u32 * , s#tcf_hashinfo * ) 
tcf_hash_search extern int tcf_hash_search ( s#tc_action * , t#u32 ) 
tcf_hash_check extern s#tcf_common * tcf_hash_check ( t#u32 , s#tc_action * , int , s#tcf_hashinfo * ) 
tcf_hash_create extern s#tcf_common * tcf_hash_create ( t#u32 , s#nlattr * , s#tc_action * , int , int , t#u32 * , s#tcf_hashinfo * ) 
tcf_hash_insert extern void tcf_hash_insert ( s#tcf_common * , s#tcf_hashinfo * ) 
tcf_register_action extern int tcf_register_action ( s#tc_action_ops * ) 
tcf_unregister_action extern int tcf_unregister_action ( s#tc_action_ops * ) 
tcf_action_exec extern int tcf_action_exec ( s#sk_buff * , s#tc_action * , s#tcf_result * ) 
tcf_action_dump_1 extern int tcf_action_dump_1 ( s#sk_buff * , s#tc_action * , int , int ) 

/* net/sched/cls_api.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s#tcf_walker struct tcf_walker { int stop ; int skip ; int count ; int ( * fn ) ( s#tcf_proto * , unsigned long , s#tcf_walker * ) ; } 
register_tcf_proto_ops extern int register_tcf_proto_ops ( s#tcf_proto_ops * ) 
unregister_tcf_proto_ops extern int unregister_tcf_proto_ops ( s#tcf_proto_ops * ) 
s#tcf_exts struct tcf_exts { s#tc_action * action ; } 
tcf_exts_destroy extern void tcf_exts_destroy ( s#tcf_proto * , s#tcf_exts * ) 
s#tcf_ext_map struct tcf_ext_map { int action ; int police ; } 
tcf_exts_validate extern int tcf_exts_validate ( s#tcf_proto * , s#nlattr * * , s#nlattr * , s#tcf_exts * , const s#tcf_ext_map * ) 
tcf_exts_change extern void tcf_exts_change ( s#tcf_proto * , s#tcf_exts * , s#tcf_exts * ) 
tcf_exts_dump extern int tcf_exts_dump ( s#sk_buff * , s#tcf_exts * , const s#tcf_ext_map * ) 
tcf_exts_dump_stats extern int tcf_exts_dump_stats ( s#sk_buff * , s#tcf_exts * , const s#tcf_ext_map * ) 

/* net/sched/ematch.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##tvec_base
s##netpoll_info
s##map_segment
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##sec_path
s#tcf_ematch struct tcf_ematch { s#tcf_ematch_ops * ops ; unsigned long data ; unsigned int datalen ; t#u16 matchid ; t#u16 flags ; } 
s#tcf_pkt_info struct tcf_pkt_info { unsigned char * ptr ; int nexthdr ; } 
s#tcf_ematch_ops struct tcf_ematch_ops { int kind ; int datalen ; int ( * change ) ( s#tcf_proto * , void * , int , s#tcf_ematch * ) ; int ( * match ) ( s#sk_buff * , s#tcf_ematch * , s#tcf_pkt_info * ) ; void ( * destroy ) ( s#tcf_proto * , s#tcf_ematch * ) ; int ( * dump ) ( s#sk_buff * , s#tcf_ematch * ) ; s#module * owner ; s#list_head link ; } 
tcf_em_register extern int tcf_em_register ( s#tcf_ematch_ops * ) 
tcf_em_unregister extern void tcf_em_unregister ( s#tcf_ematch_ops * ) 
s#tcf_ematch_tree_hdr struct tcf_ematch_tree_hdr { t#__u16 nmatches ; t#__u16 progid ; } 
s#tcf_ematch_tree struct tcf_ematch_tree { s#tcf_ematch_tree_hdr hdr ; s#tcf_ematch * matches ; } 
tcf_em_tree_validate extern int tcf_em_tree_validate ( s#tcf_proto * , s#nlattr * , s#tcf_ematch_tree * ) 
tcf_em_tree_destroy extern void tcf_em_tree_destroy ( s#tcf_proto * , s#tcf_ematch_tree * ) 
tcf_em_tree_dump extern int tcf_em_tree_dump ( s#sk_buff * , s#tcf_ematch_tree * , int ) 
__tcf_em_tree_match extern int __tcf_em_tree_match ( s#sk_buff * , s#tcf_ematch_tree * , s#tcf_pkt_info * ) 

/* net/sched/sch_api.o */
s##iw_handler_def
s##iw_public_data
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##tcf_walker
register_qdisc extern int register_qdisc ( s#Qdisc_ops * ) 
unregister_qdisc extern int unregister_qdisc ( s#Qdisc_ops * ) 
qdisc_list_del extern void qdisc_list_del ( s#Qdisc * ) 
s#tc_ratespec struct tc_ratespec { unsigned char cell_log ; unsigned char __reserved ; unsigned short overhead ; short cell_align ; unsigned short mpu ; t#__u32 rate ; } 
s#qdisc_rate_table struct qdisc_rate_table { s#tc_ratespec rate ; t#u32 data [ 256 ] ; s#qdisc_rate_table * next ; int refcnt ; } 
qdisc_get_rtab extern s#qdisc_rate_table * qdisc_get_rtab ( s#tc_ratespec * , s#nlattr * ) 
qdisc_put_rtab extern void qdisc_put_rtab ( s#qdisc_rate_table * ) 
qdisc_put_stab extern void qdisc_put_stab ( s#qdisc_size_table * ) 
qdisc_calculate_pkt_len extern void qdisc_calculate_pkt_len ( s#sk_buff * , s#qdisc_size_table * ) 
qdisc_warn_nonwc extern void qdisc_warn_nonwc ( char * , s#Qdisc * ) 
s#qdisc_watchdog struct qdisc_watchdog { s#hrtimer timer ; s#Qdisc * qdisc ; } 
qdisc_watchdog_init extern void qdisc_watchdog_init ( s#qdisc_watchdog * , s#Qdisc * ) 
t#psched_time_t typedef t#u64 psched_time_t 
qdisc_watchdog_schedule extern void qdisc_watchdog_schedule ( s#qdisc_watchdog * , t#psched_time_t ) 
qdisc_watchdog_cancel extern void qdisc_watchdog_cancel ( s#qdisc_watchdog * ) 
s#Qdisc_class_hash struct Qdisc_class_hash { s#hlist_head * hash ; unsigned int hashsize ; unsigned int hashmask ; unsigned int hashelems ; } 
qdisc_class_hash_grow extern void qdisc_class_hash_grow ( s#Qdisc * , s#Qdisc_class_hash * ) 
qdisc_class_hash_init extern int qdisc_class_hash_init ( s#Qdisc_class_hash * ) 
qdisc_class_hash_destroy extern void qdisc_class_hash_destroy ( s#Qdisc_class_hash * ) 
s#Qdisc_class_common struct Qdisc_class_common { t#u32 classid ; s#hlist_node hnode ; } 
qdisc_class_hash_insert extern void qdisc_class_hash_insert ( s#Qdisc_class_hash * , s#Qdisc_class_common * ) 
qdisc_class_hash_remove extern void qdisc_class_hash_remove ( s#Qdisc_class_hash * , s#Qdisc_class_common * ) 
qdisc_tree_decrease_qlen extern void qdisc_tree_decrease_qlen ( s#Qdisc * , unsigned int ) 
tc_classify_compat extern int tc_classify_compat ( s#sk_buff * , s#tcf_proto * , s#tcf_result * ) 
tc_classify extern int tc_classify ( s#sk_buff * , s#tcf_proto * , s#tcf_result * ) 
tcf_destroy_chain extern void tcf_destroy_chain ( s#tcf_proto * * ) 

/* net/sched/sch_fifo.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##tcf_walker
pfifo_qdisc_ops extern s#Qdisc_ops pfifo_qdisc_ops 
bfifo_qdisc_ops extern s#Qdisc_ops bfifo_qdisc_ops 
fifo_set_limit extern int fifo_set_limit ( s#Qdisc * , unsigned int ) 
fifo_create_dflt extern s#Qdisc * fifo_create_dflt ( s#Qdisc * , s#Qdisc_ops * , unsigned int ) 

/* net/sched/sch_generic.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##tcf_walker
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##netpoll_info
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
dev_trans_start extern unsigned long dev_trans_start ( s#net_device * ) 
netif_carrier_on extern void netif_carrier_on ( s#net_device * ) 
netif_carrier_off extern void netif_carrier_off ( s#net_device * ) 
noop_qdisc extern s#Qdisc noop_qdisc 
qdisc_create_dflt extern s#Qdisc * qdisc_create_dflt ( s#net_device * , s#netdev_queue * , s#Qdisc_ops * , t#u32 ) 
qdisc_reset extern void qdisc_reset ( s#Qdisc * ) 
qdisc_destroy extern void qdisc_destroy ( s#Qdisc * ) 

/* net/socket.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##iw_handler_def
s##iw_public_data
s##sec_path
s##tvec_base
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##eventfd_ctx
s##request_sock_ops
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_policy
u#skb_shared_tx union skb_shared_tx { struct { t#__u8 hardware : 1 , software : 1 , in_progress : 1 ; } ; t#__u8 flags ; } 
sock_tx_timestamp extern int sock_tx_timestamp ( s#msghdr * , s#sock * , u#skb_shared_tx * ) 
__sock_recv_timestamp extern void __sock_recv_timestamp ( s#msghdr * , s#sock * , s#sk_buff * ) 
brioctl_set extern void brioctl_set ( int ( * ) ( s#net * , unsigned int , void * ) ) 
vlan_ioctl_set extern void vlan_ioctl_set ( int ( * ) ( s#net * , void * ) ) 
dlci_ioctl_set extern void dlci_ioctl_set ( int ( * ) ( unsigned int , void * ) ) 
sock_create extern int sock_create ( int , int , int , s#socket * * ) 
sock_create_kern extern int sock_create_kern ( int , int , int , s#socket * * ) 
sock_create_lite extern int sock_create_lite ( int , int , int , s#socket * * ) 
sock_map_fd extern int sock_map_fd ( s#socket * , int ) 
sock_recvmsg extern int sock_recvmsg ( s#socket * , s#msghdr * , t#size_t , int ) 
sock_register extern int sock_register ( const s#net_proto_family * ) 
sock_release extern void sock_release ( s#socket * ) 
sock_sendmsg extern int sock_sendmsg ( s#socket * , s#msghdr * , t#size_t ) 
sock_unregister extern void sock_unregister ( int ) 
sock_wake_async extern int sock_wake_async ( s#socket * , int , int ) 
sockfd_lookup extern s#socket * sockfd_lookup ( int , int * ) 
kernel_sendmsg extern int kernel_sendmsg ( s#socket * , s#msghdr * , s#kvec * , t#size_t , t#size_t ) 
kernel_recvmsg extern int kernel_recvmsg ( s#socket * , s#msghdr * , s#kvec * , t#size_t , t#size_t , int ) 
kernel_bind extern int kernel_bind ( s#socket * , s#sockaddr * , int ) 
kernel_listen extern int kernel_listen ( s#socket * , int ) 
kernel_accept extern int kernel_accept ( s#socket * , s#socket * * , int ) 
kernel_connect extern int kernel_connect ( s#socket * , s#sockaddr * , int , int ) 
kernel_getsockname extern int kernel_getsockname ( s#socket * , s#sockaddr * , int * ) 
kernel_getpeername extern int kernel_getpeername ( s#socket * , s#sockaddr * , int * ) 
kernel_getsockopt extern int kernel_getsockopt ( s#socket * , int , int , char * , int * ) 
kernel_setsockopt extern int kernel_setsockopt ( s#socket * , int , int , char * , unsigned int ) 
kernel_sendpage extern int kernel_sendpage ( s#socket * , s#page * , int , t#size_t , int ) 
kernel_sock_ioctl extern int kernel_sock_ioctl ( s#socket * , int , unsigned long ) 
e#sock_shutdown_cmd enum sock_shutdown_cmd { SHUT_RD = 0 , SHUT_WR = 1 , SHUT_RDWR = 2 , } 
kernel_sock_shutdown extern int kernel_sock_shutdown ( s#socket * , e#sock_shutdown_cmd ) 

/* net/sunrpc/addr.o */
rpc_ntop t#size_t rpc_ntop ( const s#sockaddr * , char * , const t#size_t ) 
rpc_pton t#size_t rpc_pton ( const char * , const t#size_t , s#sockaddr * , const t#size_t ) 
rpc_sockaddr2uaddr char * rpc_sockaddr2uaddr ( const s#sockaddr * ) 
rpc_uaddr2sockaddr t#size_t rpc_uaddr2sockaddr ( const char * , const t#size_t , s#sockaddr * , const t#size_t ) 

/* net/sunrpc/auth.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##workqueue_struct
s##svc_xprt
s##rpc_iostats
rpcauth_register int rpcauth_register ( const s#rpc_authops * ) 
rpcauth_unregister int rpcauth_unregister ( const s#rpc_authops * ) 
rpcauth_create s#rpc_auth * rpcauth_create ( t#rpc_authflavor_t , s#rpc_clnt * ) 
rpcauth_init_credcache int rpcauth_init_credcache ( s#rpc_auth * ) 
rpcauth_destroy_credcache void rpcauth_destroy_credcache ( s#rpc_auth * ) 
rpcauth_lookup_credcache s#rpc_cred * rpcauth_lookup_credcache ( s#rpc_auth * , s#auth_cred * , int ) 
rpcauth_init_cred void rpcauth_init_cred ( s#rpc_cred * , const s#auth_cred * , s#rpc_auth * , const s#rpc_credops * ) 
rpcauth_generic_bind_cred void rpcauth_generic_bind_cred ( s#rpc_task * , s#rpc_cred * , int ) 
put_rpccred void put_rpccred ( s#rpc_cred * ) 

/* net/sunrpc/auth_generic.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##workqueue_struct
s##svc_xprt
s##rpc_iostats
rpc_lookup_cred s#rpc_cred * rpc_lookup_cred ( void ) 
rpc_lookup_machine_cred s#rpc_cred * rpc_lookup_machine_cred ( void ) 

/* net/sunrpc/auth_gss/gss_generic_token.o */
s#xdr_netobj struct xdr_netobj { unsigned int len ; t#u8 * data ; } 
g_token_size int g_token_size ( s#xdr_netobj * , unsigned int ) 
g_make_token_header void g_make_token_header ( s#xdr_netobj * , int , unsigned char * * ) 
g_verify_token_header t#u32 g_verify_token_header ( s#xdr_netobj * , int * , unsigned char * * , int ) 

/* net/sunrpc/auth_gss/gss_mech_switch.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#gss_ctx struct gss_ctx { s#gss_api_mech * mech_type ; void * internal_ctx_id ; } 
s#gss_api_ops struct gss_api_ops { int ( * gss_import_sec_context ) ( const void * , t#size_t , s#gss_ctx * ) ; t#u32 ( * gss_get_mic ) ( s#gss_ctx * , s#xdr_buf * , s#xdr_netobj * ) ; t#u32 ( * gss_verify_mic ) ( s#gss_ctx * , s#xdr_buf * , s#xdr_netobj * ) ; t#u32 ( * gss_wrap ) ( s#gss_ctx * , int , s#xdr_buf * , s#page * * ) ; t#u32 ( * gss_unwrap ) ( s#gss_ctx * , int , s#xdr_buf * ) ; void ( * gss_delete_sec_context ) ( void * ) ; } 
s#pf_desc struct pf_desc { t#u32 pseudoflavor ; t#u32 service ; char * name ; char * auth_domain_name ; } 
s#gss_api_mech struct gss_api_mech { s#list_head gm_list ; s#module * gm_owner ; s#xdr_netobj gm_oid ; char * gm_name ; const s#gss_api_ops * gm_ops ; int gm_pf_num ; s#pf_desc * gm_pfs ; } 
gss_mech_register int gss_mech_register ( s#gss_api_mech * ) 
gss_mech_unregister void gss_mech_unregister ( s#gss_api_mech * ) 
gss_mech_get s#gss_api_mech * gss_mech_get ( s#gss_api_mech * ) 
gss_mech_get_by_name s#gss_api_mech * gss_mech_get_by_name ( const char * ) 
gss_mech_get_by_pseudoflavor s#gss_api_mech * gss_mech_get_by_pseudoflavor ( t#u32 ) 
gss_svc_to_pseudoflavor t#u32 gss_svc_to_pseudoflavor ( s#gss_api_mech * , t#u32 ) 
gss_pseudoflavor_to_service t#u32 gss_pseudoflavor_to_service ( s#gss_api_mech * , t#u32 ) 
gss_service_to_auth_domain_name char * gss_service_to_auth_domain_name ( s#gss_api_mech * , t#u32 ) 
gss_mech_put void gss_mech_put ( s#gss_api_mech * ) 

/* net/sunrpc/auth_gss/svcauth_gss.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##svc_stat
s##svc_cacherep
s##knfsd_fh
svcauth_gss_flavor t#u32 svcauth_gss_flavor ( s#auth_domain * ) 
svcauth_gss_register_pseudoflavor int svcauth_gss_register_pseudoflavor ( t#u32 , char * ) 
svc_gss_principal char * svc_gss_principal ( s#svc_rqst * ) 

/* net/sunrpc/cache.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#cache_detail_procfs struct cache_detail_procfs { s#proc_dir_entry * proc_ent ; s#proc_dir_entry * flush_ent , * channel_ent , * content_ent ; } 
s#cache_detail_pipefs struct cache_detail_pipefs { s#dentry * dir ; } 
s#cache_detail struct cache_detail { s#module * owner ; int hash_size ; s#cache_head * * hash_table ; t#rwlock_t hash_lock ; t#atomic_t inuse ; char * name ; void ( * cache_put ) ( s#kref * ) ; int ( * cache_upcall ) ( s#cache_detail * , s#cache_head * ) ; int ( * cache_parse ) ( s#cache_detail * , char * , int ) ; int ( * cache_show ) ( s#seq_file * , s#cache_detail * , s#cache_head * ) ; void ( * warn_no_listener ) ( s#cache_detail * , int ) ; s#cache_head * ( * alloc ) ( void ) ; int ( * match ) ( s#cache_head * , s#cache_head * ) ; void ( * init ) ( s#cache_head * , s#cache_head * ) ; void ( * update ) ( s#cache_head * , s#cache_head * ) ; t#time_t flush_time ; s#list_head others ; t#time_t nextcheck ; int entries ; s#list_head queue ; t#atomic_t readers ; t#time_t last_close ; t#time_t last_warn ; union { s#cache_detail_procfs procfs ; s#cache_detail_pipefs pipefs ; } u ; } 
sunrpc_cache_lookup extern s#cache_head * sunrpc_cache_lookup ( s#cache_detail * , s#cache_head * , int ) 
sunrpc_cache_update extern s#cache_head * sunrpc_cache_update ( s#cache_detail * , s#cache_head * , s#cache_head * , int ) 
cache_check extern int cache_check ( s#cache_detail * , s#cache_head * , s#cache_req * ) 
cache_flush extern void cache_flush ( void ) 
cache_purge extern void cache_purge ( s#cache_detail * ) 
qword_add extern void qword_add ( char * * , int * , char * ) 
qword_addhex extern void qword_addhex ( char * * , int * , char * , int ) 
sunrpc_cache_pipe_upcall extern int sunrpc_cache_pipe_upcall ( s#cache_detail * , s#cache_head * , void ( * ) ( s#cache_detail * , s#cache_head * , char * * , int * ) ) 
qword_get extern int qword_get ( char * * , char * , int ) 
cache_register extern int cache_register ( s#cache_detail * ) 
cache_unregister extern void cache_unregister ( s#cache_detail * ) 
sunrpc_cache_register_pipefs extern int sunrpc_cache_register_pipefs ( s#dentry * , const char * , t#mode_t , s#cache_detail * ) 
sunrpc_cache_unregister_pipefs extern void sunrpc_cache_unregister_pipefs ( s#cache_detail * ) 

/* net/sunrpc/clnt.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##mnt_namespace
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##ipc_namespace
s##iw_handler_def
s##iw_public_data
s##array_cache
s##kmem_list3
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##rtable
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##workqueue_struct
s##svc_cacherep
s##knfsd_fh
s#rpc_iostats struct rpc_iostats { unsigned long om_ops , om_ntrans , om_timeouts ; unsigned long long om_bytes_sent , om_bytes_recv ; unsigned long long om_queue , om_rtt , om_execute ; } 
s#rpc_create_args struct rpc_create_args { int protocol ; s#sockaddr * address ; t#size_t addrsize ; s#sockaddr * saddress ; const s#rpc_timeout * timeout ; char * servername ; s#rpc_program * program ; t#u32 prognumber ; t#u32 version ; t#rpc_authflavor_t authflavor ; unsigned long flags ; char * client_name ; s#svc_xprt * bc_xprt ; } 
rpc_create s#rpc_clnt * rpc_create ( s#rpc_create_args * ) 
rpc_clone_client s#rpc_clnt * rpc_clone_client ( s#rpc_clnt * ) 
rpc_shutdown_client void rpc_shutdown_client ( s#rpc_clnt * ) 
rpc_bind_new_program s#rpc_clnt * rpc_bind_new_program ( s#rpc_clnt * , s#rpc_program * , t#u32 ) 
s#rpc_task_setup struct rpc_task_setup { s#rpc_task * task ; s#rpc_clnt * rpc_client ; const s#rpc_message * rpc_message ; const s#rpc_call_ops * callback_ops ; void * callback_data ; s#workqueue_struct * workqueue ; unsigned short flags ; signed char priority ; } 
rpc_run_task s#rpc_task * rpc_run_task ( const s#rpc_task_setup * ) 
rpc_call_sync int rpc_call_sync ( s#rpc_clnt * , const s#rpc_message * , int ) 
rpc_call_async int rpc_call_async ( s#rpc_clnt * , const s#rpc_message * , int , const s#rpc_call_ops * , void * ) 
rpc_call_start void rpc_call_start ( s#rpc_task * ) 
rpc_peeraddr t#size_t rpc_peeraddr ( s#rpc_clnt * , s#sockaddr * , t#size_t ) 
e#rpc_display_format_t enum rpc_display_format_t { RPC_DISPLAY_ADDR = 0 , RPC_DISPLAY_PORT , RPC_DISPLAY_PROTO , RPC_DISPLAY_HEX_ADDR , RPC_DISPLAY_HEX_PORT , RPC_DISPLAY_NETID , RPC_DISPLAY_MAX , } 
rpc_peeraddr2str const char * rpc_peeraddr2str ( s#rpc_clnt * , e#rpc_display_format_t ) 
rpc_setbufsize void rpc_setbufsize ( s#rpc_clnt * , unsigned int , unsigned int ) 
rpc_max_payload t#size_t rpc_max_payload ( s#rpc_clnt * ) 
rpc_force_rebind void rpc_force_rebind ( s#rpc_clnt * ) 
rpc_restart_call_prepare void rpc_restart_call_prepare ( s#rpc_task * ) 
rpc_restart_call void rpc_restart_call ( s#rpc_task * ) 
rpc_call_null s#rpc_task * rpc_call_null ( s#rpc_clnt * , s#rpc_cred * , int ) 

/* net/sunrpc/rpc_pipe.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##mnt_namespace
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s#rpc_pipe_msg struct rpc_pipe_msg { s#list_head list ; void * data ; t#size_t len ; t#size_t copied ; int errno ; } 
rpc_queue_upcall extern int rpc_queue_upcall ( s#inode * , s#rpc_pipe_msg * ) 
rpc_get_mount extern s#vfsmount * rpc_get_mount ( void ) 
rpc_put_mount extern void rpc_put_mount ( void ) 
s#rpc_pipe_ops struct rpc_pipe_ops { t#ssize_t ( * upcall ) ( s#file * , s#rpc_pipe_msg * , char * , t#size_t ) ; t#ssize_t ( * downcall ) ( s#file * , const char * , t#size_t ) ; void ( * release_pipe ) ( s#inode * ) ; int ( * open_pipe ) ( s#inode * ) ; void ( * destroy_msg ) ( s#rpc_pipe_msg * ) ; } 
rpc_mkpipe extern s#dentry * rpc_mkpipe ( s#dentry * , const char * , void * , const s#rpc_pipe_ops * , int ) 
rpc_unlink extern int rpc_unlink ( s#dentry * ) 

/* net/sunrpc/rpcb_clnt.o */
rpcb_getport_sync int rpcb_getport_sync ( s#sockaddr_in * , t#u32 , t#u32 , int ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##svc_xprt
s##rpc_iostats
s##workqueue_struct
rpcb_getport_async void rpcb_getport_async ( s#rpc_task * ) 

/* net/sunrpc/sched.o */
s##tvec_base
rpc_init_wait_queue void rpc_init_wait_queue ( s#rpc_wait_queue * , const char * ) 
rpc_destroy_wait_queue void rpc_destroy_wait_queue ( s#rpc_wait_queue * ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##svc_xprt
s##rpc_iostats
s##workqueue_struct
__rpc_wait_for_completion_task int __rpc_wait_for_completion_task ( s#rpc_task * , int ( * ) ( void * ) ) 
t#rpc_action typedef void ( * rpc_action ) ( s#rpc_task * ) 
rpc_sleep_on void rpc_sleep_on ( s#rpc_wait_queue * , s#rpc_task * , t#rpc_action ) 
rpc_wake_up_queued_task void rpc_wake_up_queued_task ( s#rpc_wait_queue * , s#rpc_task * ) 
rpc_wake_up_next s#rpc_task * rpc_wake_up_next ( s#rpc_wait_queue * ) 
rpc_wake_up void rpc_wake_up ( s#rpc_wait_queue * ) 
rpc_wake_up_status void rpc_wake_up_status ( s#rpc_wait_queue * , int ) 
rpc_delay void rpc_delay ( s#rpc_task * , unsigned long ) 
rpc_exit_task void rpc_exit_task ( s#rpc_task * ) 
rpc_malloc void * rpc_malloc ( s#rpc_task * , t#size_t ) 
rpc_free void rpc_free ( void * ) 
rpc_put_task void rpc_put_task ( s#rpc_task * ) 
rpc_killall_tasks void rpc_killall_tasks ( s#rpc_clnt * ) 

/* net/sunrpc/socklib.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##timewait_sock_ops
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##xfrm_state
s##rtable
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##xfrm_policy
s##sec_path
s#xdr_skb_reader struct xdr_skb_reader { s#sk_buff * skb ; unsigned int offset ; t#size_t count ; t#__wsum csum ; } 
xdr_skb_read_bits t#size_t xdr_skb_read_bits ( s#xdr_skb_reader * , void * , t#size_t ) 
t#xdr_skb_read_actor typedef t#size_t ( * xdr_skb_read_actor ) ( s#xdr_skb_reader * , void * , t#size_t ) 
xdr_partial_copy_from_skb extern t#ssize_t xdr_partial_copy_from_skb ( s#xdr_buf * , unsigned int , s#xdr_skb_reader * , t#xdr_skb_read_actor ) 
csum_partial_copy_to_xdr extern int csum_partial_copy_to_xdr ( s#xdr_buf * , s#sk_buff * ) 

/* net/sunrpc/stats.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##svc_cacherep
s##knfsd_fh
svc_seq_show void svc_seq_show ( s#seq_file * , const s#svc_stat * ) 
s##workqueue_struct
rpc_alloc_iostats s#rpc_iostats * rpc_alloc_iostats ( s#rpc_clnt * ) 
rpc_free_iostats void rpc_free_iostats ( s#rpc_iostats * ) 
rpc_print_iostats void rpc_print_iostats ( s#seq_file * , s#rpc_clnt * ) 
rpc_proc_register s#proc_dir_entry * rpc_proc_register ( s#rpc_stat * ) 
rpc_proc_unregister void rpc_proc_unregister ( const char * ) 
svc_proc_register s#proc_dir_entry * svc_proc_register ( s#svc_stat * , const s#file_operations * ) 
svc_proc_unregister void svc_proc_unregister ( const char * ) 

/* net/sunrpc/svc.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##svc_cacherep
s##knfsd_fh
svc_create s#svc_serv * svc_create ( s#svc_program * , unsigned int , void ( * ) ( s#svc_serv * ) ) 
svc_create_pooled s#svc_serv * svc_create_pooled ( s#svc_program * , unsigned int , void ( * ) ( s#svc_serv * ) , t#svc_thread_fn , s#module * ) 
svc_destroy void svc_destroy ( s#svc_serv * ) 
svc_prepare_thread s#svc_rqst * svc_prepare_thread ( s#svc_serv * , s#svc_pool * ) 
svc_set_num_threads int svc_set_num_threads ( s#svc_serv * , s#svc_pool * , int ) 
svc_exit_thread void svc_exit_thread ( s#svc_rqst * ) 
svc_process int svc_process ( s#svc_rqst * ) 
svc_max_payload extern t#u32 svc_max_payload ( const s#svc_rqst * ) 

/* net/sunrpc/svc_xprt.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##svc_cacherep
s##knfsd_fh
svc_reg_xprt_class int svc_reg_xprt_class ( s#svc_xprt_class * ) 
svc_unreg_xprt_class void svc_unreg_xprt_class ( s#svc_xprt_class * ) 
svc_xprt_put void svc_xprt_put ( s#svc_xprt * ) 
svc_xprt_init void svc_xprt_init ( s#svc_xprt_class * , s#svc_xprt * , s#svc_serv * ) 
svc_create_xprt int svc_create_xprt ( s#svc_serv * , const char * , const int , const unsigned short , int ) 
svc_xprt_copy_addrs void svc_xprt_copy_addrs ( s#svc_rqst * , s#svc_xprt * ) 
svc_print_addr char * svc_print_addr ( s#svc_rqst * , char * , t#size_t ) 
svc_xprt_enqueue void svc_xprt_enqueue ( s#svc_xprt * ) 
svc_xprt_received void svc_xprt_received ( s#svc_xprt * ) 
svc_reserve void svc_reserve ( s#svc_rqst * , int ) 
svc_wake_up void svc_wake_up ( s#svc_serv * ) 
svc_recv int svc_recv ( s#svc_rqst * , long ) 
svc_drop void svc_drop ( s#svc_rqst * ) 
svc_close_xprt void svc_close_xprt ( s#svc_xprt * ) 
svc_find_xprt s#svc_xprt * svc_find_xprt ( s#svc_serv * , const char * , const t#sa_family_t , const unsigned short ) 
svc_xprt_names int svc_xprt_names ( s#svc_serv * , char * , const int ) 
svc_pool_stats_open int svc_pool_stats_open ( s#svc_serv * , s#file * ) 

/* net/sunrpc/svcauth.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##svc_stat
s##tvec_base
s##map_segment
s##compat_timespec
s##pollfd
s##group_info
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##kiocb
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##svc_cacherep
s##knfsd_fh
svc_authenticate extern int svc_authenticate ( s#svc_rqst * , t#__be32 * ) 
svc_set_client extern int svc_set_client ( s#svc_rqst * ) 
svc_auth_register extern int svc_auth_register ( t#rpc_authflavor_t , s#auth_ops * ) 
svc_auth_unregister extern void svc_auth_unregister ( t#rpc_authflavor_t ) 
auth_domain_put extern void auth_domain_put ( s#auth_domain * ) 
auth_domain_lookup extern s#auth_domain * auth_domain_lookup ( char * , s#auth_domain * ) 
auth_domain_find extern s#auth_domain * auth_domain_find ( char * ) 

/* net/sunrpc/svcauth_unix.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##svc_stat
s##svc_cacherep
s##knfsd_fh
unix_domain_find extern s#auth_domain * unix_domain_find ( char * ) 
auth_unix_add_addr extern int auth_unix_add_addr ( s#in6_addr * , s#auth_domain * ) 
auth_unix_forget_old extern int auth_unix_forget_old ( s#auth_domain * ) 
auth_unix_lookup extern s#auth_domain * auth_unix_lookup ( s#in6_addr * ) 
svcauth_unix_purge extern void svcauth_unix_purge ( void ) 
svcauth_unix_set_client extern int svcauth_unix_set_client ( s#svc_rqst * ) 

/* net/sunrpc/svcsock.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##svc_cacherep
s##knfsd_fh
svc_sock_names int svc_sock_names ( s#svc_serv * , char * , const t#size_t , const char * ) 
svc_sock_update_bufs void svc_sock_update_bufs ( s#svc_serv * ) 
svc_addsock int svc_addsock ( s#svc_serv * , const int , char * , const t#size_t ) 
svc_sock_create s#svc_xprt * svc_sock_create ( s#svc_serv * , int ) 
svc_sock_destroy void svc_sock_destroy ( s#svc_xprt * ) 

/* net/sunrpc/sysctl.o */
rpc_debug extern unsigned int rpc_debug 
nfs_debug extern unsigned int nfs_debug 
nfsd_debug extern unsigned int nfsd_debug 
nlm_debug extern unsigned int nlm_debug 

/* net/sunrpc/timer.o */
rpc_init_rtt extern void rpc_init_rtt ( s#rpc_rtt * , unsigned long ) 
rpc_update_rtt extern void rpc_update_rtt ( s#rpc_rtt * , unsigned , long ) 
rpc_calc_rto extern unsigned long rpc_calc_rto ( s#rpc_rtt * , unsigned ) 

/* net/sunrpc/xdr.o */
xdr_encode_netobj t#__be32 * xdr_encode_netobj ( t#__be32 * , const s#xdr_netobj * ) 
xdr_decode_netobj t#__be32 * xdr_decode_netobj ( t#__be32 * , s#xdr_netobj * ) 
xdr_encode_opaque_fixed t#__be32 * xdr_encode_opaque_fixed ( t#__be32 * , const void * , unsigned int ) 
xdr_encode_opaque t#__be32 * xdr_encode_opaque ( t#__be32 * , const void * , unsigned int ) 
xdr_encode_string t#__be32 * xdr_encode_string ( t#__be32 * , const char * ) 
xdr_decode_string_inplace t#__be32 * xdr_decode_string_inplace ( t#__be32 * , char * * , unsigned int * , unsigned int ) 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##mempolicy
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
xdr_encode_pages void xdr_encode_pages ( s#xdr_buf * , s#page * * , unsigned int , unsigned int ) 
xdr_inline_pages void xdr_inline_pages ( s#xdr_buf * , unsigned int , s#page * * , unsigned int , unsigned int ) 
xdr_shift_buf extern void xdr_shift_buf ( s#xdr_buf * , t#size_t ) 
s#xdr_stream struct xdr_stream { t#__be32 * p ; s#xdr_buf * buf ; t#__be32 * end ; s#kvec * iov ; } 
xdr_init_encode extern void xdr_init_encode ( s#xdr_stream * , s#xdr_buf * , t#__be32 * ) 
xdr_reserve_space extern t#__be32 * xdr_reserve_space ( s#xdr_stream * , t#size_t ) 
xdr_write_pages extern void xdr_write_pages ( s#xdr_stream * , s#page * * , unsigned int , unsigned int ) 
xdr_init_decode extern void xdr_init_decode ( s#xdr_stream * , s#xdr_buf * , t#__be32 * ) 
xdr_inline_decode extern t#__be32 * xdr_inline_decode ( s#xdr_stream * , t#size_t ) 
xdr_read_pages extern void xdr_read_pages ( s#xdr_stream * , unsigned int ) 
xdr_enter_page extern void xdr_enter_page ( s#xdr_stream * , unsigned int ) 
xdr_buf_from_iov extern void xdr_buf_from_iov ( s#kvec * , s#xdr_buf * ) 
xdr_buf_subsegment extern int xdr_buf_subsegment ( s#xdr_buf * , s#xdr_buf * , unsigned int , unsigned int ) 
read_bytes_from_xdr_buf extern int read_bytes_from_xdr_buf ( s#xdr_buf * , unsigned int , void * , unsigned int ) 
xdr_decode_word extern int xdr_decode_word ( s#xdr_buf * , unsigned int , t#u32 * ) 
xdr_encode_word extern int xdr_encode_word ( s#xdr_buf * , unsigned int , t#u32 ) 
xdr_buf_read_netobj extern int xdr_buf_read_netobj ( s#xdr_buf * , s#xdr_netobj * , unsigned int ) 
t#xdr_xcode_elem_t typedef int ( * xdr_xcode_elem_t ) ( s#xdr_array2_desc * , void * ) 
s#xdr_array2_desc struct xdr_array2_desc { unsigned int elem_size ; unsigned int array_len ; unsigned int array_maxlen ; t#xdr_xcode_elem_t xcode ; } 
xdr_decode_array2 extern int xdr_decode_array2 ( s#xdr_buf * , unsigned int , s#xdr_array2_desc * ) 
xdr_encode_array2 extern int xdr_encode_array2 ( s#xdr_buf * , unsigned int , s#xdr_array2_desc * ) 
xdr_process_buf extern int xdr_process_buf ( s#xdr_buf * , unsigned int , unsigned int , int ( * ) ( s#scatterlist * , void * ) , void * ) 

/* net/sunrpc/xprt.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##workqueue_struct
s##svc_xprt
s#xprt_create struct xprt_create { int ident ; s#sockaddr * srcaddr ; s#sockaddr * dstaddr ; t#size_t addrlen ; s#svc_xprt * bc_xprt ; } 
s#xprt_class struct xprt_class { s#list_head list ; int ident ; s#rpc_xprt * ( * setup ) ( s#xprt_create * ) ; s#module * owner ; char name [ 32 ] ; } 
xprt_register_transport int xprt_register_transport ( s#xprt_class * ) 
xprt_unregister_transport int xprt_unregister_transport ( s#xprt_class * ) 
xprt_load_transport int xprt_load_transport ( const char * ) 
xprt_reserve_xprt int xprt_reserve_xprt ( s#rpc_task * ) 
xprt_reserve_xprt_cong int xprt_reserve_xprt_cong ( s#rpc_task * ) 
xprt_release_xprt void xprt_release_xprt ( s#rpc_xprt * , s#rpc_task * ) 
xprt_release_xprt_cong void xprt_release_xprt_cong ( s#rpc_xprt * , s#rpc_task * ) 
xprt_release_rqst_cong void xprt_release_rqst_cong ( s#rpc_task * ) 
xprt_adjust_cwnd void xprt_adjust_cwnd ( s#rpc_task * , int ) 
xprt_wake_pending_tasks void xprt_wake_pending_tasks ( s#rpc_xprt * , int ) 
xprt_wait_for_buffer_space void xprt_wait_for_buffer_space ( s#rpc_task * , t#rpc_action ) 
xprt_write_space void xprt_write_space ( s#rpc_xprt * ) 
xprt_set_retrans_timeout_def void xprt_set_retrans_timeout_def ( s#rpc_task * ) 
xprt_set_retrans_timeout_rtt void xprt_set_retrans_timeout_rtt ( s#rpc_task * ) 
xprt_disconnect_done void xprt_disconnect_done ( s#rpc_xprt * ) 
xprt_lookup_rqst s#rpc_rqst * xprt_lookup_rqst ( s#rpc_xprt * , t#__be32 ) 
xprt_update_rtt void xprt_update_rtt ( s#rpc_task * ) 
xprt_complete_rqst void xprt_complete_rqst ( s#rpc_task * , int ) 

/* net/sunrpc/xprtsock.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##rpc_iostats
s##workqueue_struct
s##svc_cacherep
s##knfsd_fh
xs_swapper int xs_swapper ( s#rpc_xprt * , int ) 

/* net/sysctl_net.o */
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##pid_namespace
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##rtable
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
register_net_sysctl_table extern s#ctl_table_header * register_net_sysctl_table ( s#net * , const s#ctl_path * , s#ctl_table * ) 
register_net_sysctl_rotable extern s#ctl_table_header * register_net_sysctl_rotable ( const s#ctl_path * , s#ctl_table * ) 
unregister_net_sysctl_table extern void unregister_net_sysctl_table ( s#ctl_table_header * ) 

/* net/wanrouter/wanmain.o */
s#wan_x25_conf struct wan_x25_conf { unsigned lo_pvc ; unsigned hi_pvc ; unsigned lo_svc ; unsigned hi_svc ; unsigned hdlc_window ; unsigned pkt_window ; unsigned t1 ; unsigned t2 ; unsigned t4 ; unsigned n2 ; unsigned t10_t20 ; unsigned t11_t21 ; unsigned t12_t22 ; unsigned t13_t23 ; unsigned t16_t26 ; unsigned t28 ; unsigned r10_r20 ; unsigned r12_r22 ; unsigned r13_r23 ; unsigned ccitt_compat ; unsigned x25_conf_opt ; unsigned char LAPB_hdlc_only ; unsigned char logging ; unsigned char oob_on_modem ; } 
t#wan_x25_conf_t typedef s#wan_x25_conf wan_x25_conf_t 
s#wan_ppp_conf struct wan_ppp_conf { unsigned restart_tmr ; unsigned auth_rsrt_tmr ; unsigned auth_wait_tmr ; unsigned mdm_fail_tmr ; unsigned dtr_drop_tmr ; unsigned connect_tmout ; unsigned conf_retry ; unsigned term_retry ; unsigned fail_retry ; unsigned auth_retry ; unsigned auth_options ; unsigned ip_options ; char authenticator ; char ip_mode ; } 
t#wan_ppp_conf_t typedef s#wan_ppp_conf wan_ppp_conf_t 
s#wan_fr_conf struct wan_fr_conf { unsigned signalling ; unsigned t391 ; unsigned t392 ; unsigned n391 ; unsigned n392 ; unsigned n393 ; unsigned dlci_num ; unsigned dlci [ 100 ] ; } 
t#wan_fr_conf_t typedef s#wan_fr_conf wan_fr_conf_t 
s#wan_chdlc_conf struct wan_chdlc_conf { unsigned char ignore_dcd ; unsigned char ignore_cts ; unsigned char ignore_keepalive ; unsigned char hdlc_streaming ; unsigned char receive_only ; unsigned keepalive_tx_tmr ; unsigned keepalive_rx_tmr ; unsigned keepalive_err_margin ; unsigned slarp_timer ; } 
t#wan_chdlc_conf_t typedef s#wan_chdlc_conf wan_chdlc_conf_t 
s#wandev_conf struct wandev_conf { unsigned magic ; unsigned config_id ; unsigned ioport ; unsigned long maddr ; unsigned msize ; int irq ; int dma ; char S514_CPU_no [ 1 ] ; unsigned PCI_slot_no ; char auto_pci_cfg ; char comm_port ; unsigned bps ; unsigned mtu ; unsigned udp_port ; unsigned char ttl ; unsigned char ft1 ; char interface ; char clocking ; char line_coding ; char station ; char connection ; char read_mode ; char receive_only ; char tty ; unsigned tty_major ; unsigned tty_minor ; unsigned tty_mode ; char backup ; unsigned hw_opt [ 4 ] ; unsigned reserved [ 4 ] ; unsigned data_size ; void * data ; union { t#wan_x25_conf_t x25 ; t#wan_ppp_conf_t ppp ; t#wan_fr_conf_t fr ; t#wan_chdlc_conf_t chdlc ; } u ; } 
t#wandev_conf_t typedef s#wandev_conf wandev_conf_t 
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s#wanif_conf struct wanif_conf { unsigned magic ; unsigned config_id ; char name [ 15 + 1 ] ; char addr [ 31 + 1 ] ; char usedby [ 8 ] ; unsigned idle_timeout ; unsigned hold_timeout ; unsigned cir ; unsigned bc ; unsigned be ; unsigned char enable_IPX ; unsigned char inarp ; unsigned inarp_interval ; unsigned long network_number ; char mc ; char local_addr [ 31 + 1 ] ; unsigned char port ; unsigned char protocol ; char pap ; char chap ; unsigned char userid [ 511 ] ; unsigned char passwd [ 511 ] ; unsigned char sysname [ 31 ] ; unsigned char ignore_dcd ; unsigned char ignore_cts ; unsigned char ignore_keepalive ; unsigned char hdlc_streaming ; unsigned keepalive_tx_tmr ; unsigned keepalive_rx_tmr ; unsigned keepalive_err_margin ; unsigned slarp_timer ; unsigned char ttl ; char interface ; char clocking ; unsigned bps ; unsigned mtu ; unsigned char if_down ; unsigned char gateway ; unsigned char true_if_encoding ; unsigned char asy_data_trans ; unsigned char rts_hs_for_receive ; unsigned char xon_xoff_hs_for_receive ; unsigned char xon_xoff_hs_for_transmit ; unsigned char dcd_hs_for_transmit ; unsigned char cts_hs_for_transmit ; unsigned char async_mode ; unsigned tx_bits_per_char ; unsigned rx_bits_per_char ; unsigned stop_bits ; unsigned char parity ; unsigned break_timer ; unsigned inter_char_timer ; unsigned rx_complete_length ; unsigned xon_char ; unsigned xoff_char ; unsigned char receive_only ; } 
t#wanif_conf_t typedef s#wanif_conf wanif_conf_t 
s#wan_device struct wan_device { unsigned magic ; char * name ; void * private ; unsigned config_id ; unsigned ioport ; char S514_cpu_no [ 1 ] ; unsigned char S514_slot_no ; unsigned long maddr ; unsigned msize ; int irq ; int dma ; unsigned bps ; unsigned mtu ; unsigned udp_port ; unsigned char ttl ; unsigned enable_tx_int ; char interface ; char clocking ; char line_coding ; char station ; char connection ; char signalling ; char read_mode ; char new_if_cnt ; char del_if_cnt ; unsigned char piggyback ; unsigned hw_opt [ 4 ] ; char state ; char api_status ; s#net_device_stats stats ; unsigned reserved [ 16 ] ; unsigned long critical ; t#spinlock_t lock ; int ( * setup ) ( s#wan_device * , t#wandev_conf_t * ) ; int ( * shutdown ) ( s#wan_device * ) ; int ( * update ) ( s#wan_device * ) ; int ( * ioctl ) ( s#wan_device * , unsigned , unsigned long ) ; int ( * new_if ) ( s#wan_device * , s#net_device * , t#wanif_conf_t * ) ; int ( * del_if ) ( s#wan_device * , s#net_device * ) ; s#wan_device * next ; s#net_device * dev ; unsigned ndev ; s#proc_dir_entry * dent ; } 
register_wan_device extern int register_wan_device ( s#wan_device * ) 
unregister_wan_device extern int unregister_wan_device ( char * ) 

/* net/wimax/op-msg.o */
s##sock
s##iw_handler_def
s##iw_public_data
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##sec_path
s##rfkill
s##input_dev
wimax_msg_alloc extern s#sk_buff * wimax_msg_alloc ( s#wimax_dev * , const char * , const void * , t#size_t , t#gfp_t ) 
wimax_msg_data_len extern const void * wimax_msg_data_len ( s#sk_buff * , t#size_t * ) 
wimax_msg_data extern const void * wimax_msg_data ( s#sk_buff * ) 
wimax_msg_len extern t#ssize_t wimax_msg_len ( s#sk_buff * ) 
wimax_msg_send extern int wimax_msg_send ( s#wimax_dev * , s#sk_buff * ) 
wimax_msg extern int wimax_msg ( s#wimax_dev * , const char * , const void * , t#size_t , t#gfp_t ) 

/* net/wimax/op-reset.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##rfkill
s##input_dev
wimax_reset extern int wimax_reset ( s#wimax_dev * ) 

/* net/wimax/op-rfkill.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##rfkill
s##input_dev
wimax_report_rfkill_hw extern void wimax_report_rfkill_hw ( s#wimax_dev * , e#wimax_rf_state ) 
wimax_report_rfkill_sw extern void wimax_report_rfkill_sw ( s#wimax_dev * , e#wimax_rf_state ) 
wimax_rfkill extern int wimax_rfkill ( s#wimax_dev * , e#wimax_rf_state ) 

/* net/wimax/stack.o */
s##iw_handler_def
s##iw_public_data
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##task_struct
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##vfsmount
s##nameidata
s##kstatfs
s##radix_tree_node
s##writeback_control
s##kiocb
s##backing_dev_info
s##array_cache
s##kmem_list3
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##pid_namespace
s##cred
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cdev
s##posix_acl
s##nsproxy
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
s##rfkill
s##input_dev
wimax_state_change extern void wimax_state_change ( s#wimax_dev * , e#wimax_st ) 
wimax_state_get extern e#wimax_st wimax_state_get ( s#wimax_dev * ) 
wimax_dev_init extern void wimax_dev_init ( s#wimax_dev * ) 
wimax_dev_add extern int wimax_dev_add ( s#wimax_dev * , s#net_device * ) 
wimax_dev_rm extern void wimax_dev_rm ( s#wimax_dev * ) 

/* net/wireless/core.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s#cfg80211_cached_keys struct cfg80211_cached_keys { s#key_params params [ 6 ] ; t#u8 data [ 6 ] [ 32 ] ; int def , defmgmt ; } 
s#cfg80211_bss struct cfg80211_bss { s#ieee80211_channel * channel ; t#u8 bssid [ 6 ] ; t#u64 tsf ; t#u16 beacon_interval ; t#u16 capability ; t#u8 * information_elements ; t#size_t len_information_elements ; t#s32 signal ; void ( * free_priv ) ( s#cfg80211_bss * ) ; t#u8 priv [ 0 ] __attribute__ ( ( __aligned__ ( sizeof ( void * ) ) ) ) ; } 
s#cfg80211_internal_bss struct cfg80211_internal_bss { s#list_head list ; s#rb_node rbn ; unsigned long ts ; s#kref ref ; t#atomic_t hold ; t#bool ies_allocated ; s#cfg80211_bss pub ; } 
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s#vif_params struct vif_params { t#u8 * mesh_id ; int mesh_id_len ; } 
s#beacon_parameters struct beacon_parameters { t#u8 * head , * tail ; int interval , dtim_period ; int head_len , tail_len ; } 
s#ieee80211_ht_cap struct ieee80211_ht_cap { t#__le16 cap_info ; t#u8 ampdu_params_info ; s#ieee80211_mcs_info mcs ; t#__le16 extended_ht_cap_info ; t#__le32 tx_BF_cap_info ; t#u8 antenna_selection_info ; } 
s#station_parameters struct station_parameters { t#u8 * supported_rates ; s#net_device * vlan ; t#u32 sta_flags_mask , sta_flags_set ; int listen_interval ; t#u16 aid ; t#u8 supported_rates_len ; t#u8 plink_action ; s#ieee80211_ht_cap * ht_capa ; } 
s#rate_info struct rate_info { t#u8 flags ; t#u8 mcs ; t#u16 legacy ; } 
s#station_info struct station_info { t#u32 filled ; t#u32 inactive_time ; t#u32 rx_bytes ; t#u32 tx_bytes ; t#u16 llid ; t#u16 plid ; t#u8 plink_state ; t#s8 signal ; s#rate_info txrate ; t#u32 rx_packets ; t#u32 tx_packets ; int generation ; } 
s#mpath_info struct mpath_info { t#u32 filled ; t#u32 frame_qlen ; t#u32 dsn ; t#u32 metric ; t#u32 exptime ; t#u32 discovery_timeout ; t#u8 discovery_retries ; t#u8 flags ; int generation ; } 
s#mesh_config struct mesh_config { t#u16 dot11MeshRetryTimeout ; t#u16 dot11MeshConfirmTimeout ; t#u16 dot11MeshHoldingTimeout ; t#u16 dot11MeshMaxPeerLinks ; t#u8 dot11MeshMaxRetries ; t#u8 dot11MeshTTL ; t#bool auto_open_plinks ; t#u8 dot11MeshHWMPmaxPREQretries ; t#u32 path_refresh_time ; t#u16 min_discovery_timeout ; t#u32 dot11MeshHWMPactivePathTimeout ; t#u16 dot11MeshHWMPpreqMinInterval ; t#u16 dot11MeshHWMPnetDiameterTraversalTime ; } 
s#bss_parameters struct bss_parameters { int use_cts_prot ; int use_short_preamble ; int use_short_slot_time ; t#u8 * basic_rates ; t#u8 basic_rates_len ; } 
e#nl80211_txq_q enum nl80211_txq_q { NL80211_TXQ_Q_VO , NL80211_TXQ_Q_VI , NL80211_TXQ_Q_BE , NL80211_TXQ_Q_BK } 
s#ieee80211_txq_params struct ieee80211_txq_params { e#nl80211_txq_q queue ; t#u16 txop ; t#u16 cwmin ; t#u16 cwmax ; t#u8 aifs ; } 
s#cfg80211_auth_request struct cfg80211_auth_request { s#cfg80211_bss * bss ; const t#u8 * ie ; t#size_t ie_len ; e#nl80211_auth_type auth_type ; const t#u8 * key ; t#u8 key_len , key_idx ; } 
s#cfg80211_assoc_request struct cfg80211_assoc_request { s#cfg80211_bss * bss ; const t#u8 * ie , * prev_bssid ; t#size_t ie_len ; s#cfg80211_crypto_settings crypto ; t#bool use_mfp ; } 
s#cfg80211_deauth_request struct cfg80211_deauth_request { s#cfg80211_bss * bss ; const t#u8 * ie ; t#size_t ie_len ; t#u16 reason_code ; } 
s#cfg80211_disassoc_request struct cfg80211_disassoc_request { s#cfg80211_bss * bss ; const t#u8 * ie ; t#size_t ie_len ; t#u16 reason_code ; } 
e#tx_power_setting enum tx_power_setting { TX_POWER_AUTOMATIC , TX_POWER_LIMITED , TX_POWER_FIXED , } 
s#cfg80211_bitrate_mask struct cfg80211_bitrate_mask { t#u32 fixed ; t#u32 maxrate ; } 
s#cfg80211_ops struct cfg80211_ops { int ( * suspend ) ( s#wiphy * ) ; int ( * resume ) ( s#wiphy * ) ; int ( * add_virtual_intf ) ( s#wiphy * , char * , e#nl80211_iftype , t#u32 * , s#vif_params * ) ; int ( * del_virtual_intf ) ( s#wiphy * , s#net_device * ) ; int ( * change_virtual_intf ) ( s#wiphy * , s#net_device * , e#nl80211_iftype , t#u32 * , s#vif_params * ) ; int ( * add_key ) ( s#wiphy * , s#net_device * , t#u8 , const t#u8 * , s#key_params * ) ; int ( * get_key ) ( s#wiphy * , s#net_device * , t#u8 , const t#u8 * , void * , void ( * ) ( void * , s#key_params * ) ) ; int ( * del_key ) ( s#wiphy * , s#net_device * , t#u8 , const t#u8 * ) ; int ( * set_default_key ) ( s#wiphy * , s#net_device * , t#u8 ) ; int ( * set_default_mgmt_key ) ( s#wiphy * , s#net_device * , t#u8 ) ; int ( * add_beacon ) ( s#wiphy * , s#net_device * , s#beacon_parameters * ) ; int ( * set_beacon ) ( s#wiphy * , s#net_device * , s#beacon_parameters * ) ; int ( * del_beacon ) ( s#wiphy * , s#net_device * ) ; int ( * add_station ) ( s#wiphy * , s#net_device * , t#u8 * , s#station_parameters * ) ; int ( * del_station ) ( s#wiphy * , s#net_device * , t#u8 * ) ; int ( * change_station ) ( s#wiphy * , s#net_device * , t#u8 * , s#station_parameters * ) ; int ( * get_station ) ( s#wiphy * , s#net_device * , t#u8 * , s#station_info * ) ; int ( * dump_station ) ( s#wiphy * , s#net_device * , int , t#u8 * , s#station_info * ) ; int ( * add_mpath ) ( s#wiphy * , s#net_device * , t#u8 * , t#u8 * ) ; int ( * del_mpath ) ( s#wiphy * , s#net_device * , t#u8 * ) ; int ( * change_mpath ) ( s#wiphy * , s#net_device * , t#u8 * , t#u8 * ) ; int ( * get_mpath ) ( s#wiphy * , s#net_device * , t#u8 * , t#u8 * , s#mpath_info * ) ; int ( * dump_mpath ) ( s#wiphy * , s#net_device * , int , t#u8 * , t#u8 * , s#mpath_info * ) ; int ( * get_mesh_params ) ( s#wiphy * , s#net_device * , s#mesh_config * ) ; int ( * set_mesh_params ) ( s#wiphy * , s#net_device * , const s#mesh_config * , t#u32 ) ; int ( * change_bss ) ( s#wiphy * , s#net_device * , s#bss_parameters * ) ; int ( * set_txq_params ) ( s#wiphy * , s#ieee80211_txq_params * ) ; int ( * set_channel ) ( s#wiphy * , s#ieee80211_channel * , e#nl80211_channel_type ) ; int ( * scan ) ( s#wiphy * , s#net_device * , s#cfg80211_scan_request * ) ; int ( * auth ) ( s#wiphy * , s#net_device * , s#cfg80211_auth_request * ) ; int ( * assoc ) ( s#wiphy * , s#net_device * , s#cfg80211_assoc_request * ) ; int ( * deauth ) ( s#wiphy * , s#net_device * , s#cfg80211_deauth_request * , void * ) ; int ( * disassoc ) ( s#wiphy * , s#net_device * , s#cfg80211_disassoc_request * , void * ) ; int ( * connect ) ( s#wiphy * , s#net_device * , s#cfg80211_connect_params * ) ; int ( * disconnect ) ( s#wiphy * , s#net_device * , t#u16 ) ; int ( * join_ibss ) ( s#wiphy * , s#net_device * , s#cfg80211_ibss_params * ) ; int ( * leave_ibss ) ( s#wiphy * , s#net_device * ) ; int ( * set_wiphy_params ) ( s#wiphy * , t#u32 ) ; int ( * set_tx_power ) ( s#wiphy * , e#tx_power_setting , int ) ; int ( * get_tx_power ) ( s#wiphy * , int * ) ; int ( * set_wds_peer ) ( s#wiphy * , s#net_device * , t#u8 * ) ; void ( * rfkill_poll ) ( s#wiphy * ) ; int ( * set_bitrate_mask ) ( s#wiphy * , s#net_device * , const t#u8 * , const s#cfg80211_bitrate_mask * ) ; int ( * set_power_mgmt ) ( s#wiphy * , s#net_device * , t#bool , int ) ; } 
wiphy_new s#wiphy * wiphy_new ( const s#cfg80211_ops * , int ) 
wiphy_register extern int wiphy_register ( s#wiphy * ) 
wiphy_rfkill_start_polling void wiphy_rfkill_start_polling ( s#wiphy * ) 
wiphy_rfkill_stop_polling void wiphy_rfkill_stop_polling ( s#wiphy * ) 
wiphy_unregister extern void wiphy_unregister ( s#wiphy * ) 
wiphy_free extern void wiphy_free ( s#wiphy * ) 
wiphy_rfkill_set_hw_state void wiphy_rfkill_set_hw_state ( s#wiphy * , t#bool ) 

/* net/wireless/ibss.o */
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##cfg80211_conn
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
cfg80211_ibss_joined void cfg80211_ibss_joined ( s#net_device * , const t#u8 * , t#gfp_t ) 

/* net/wireless/lib80211.o */
print_ssid const char * print_ssid ( char * , const char * , t#u8 ) 
s##sock
s##net_device
s##sec_path
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##tvec_base
lib80211_crypt_info_init int lib80211_crypt_info_init ( s#lib80211_crypt_info * , char * , t#spinlock_t * ) 
lib80211_crypt_info_free void lib80211_crypt_info_free ( s#lib80211_crypt_info * ) 
lib80211_crypt_deinit_entries void lib80211_crypt_deinit_entries ( s#lib80211_crypt_info * , int ) 
lib80211_crypt_quiescing void lib80211_crypt_quiescing ( s#lib80211_crypt_info * ) 
lib80211_crypt_deinit_handler void lib80211_crypt_deinit_handler ( unsigned long ) 
lib80211_crypt_delayed_deinit void lib80211_crypt_delayed_deinit ( s#lib80211_crypt_info * , s#lib80211_crypt_data * * ) 
lib80211_register_crypto_ops int lib80211_register_crypto_ops ( s#lib80211_crypto_ops * ) 
lib80211_unregister_crypto_ops int lib80211_unregister_crypto_ops ( s#lib80211_crypto_ops * ) 
lib80211_get_crypto_ops s#lib80211_crypto_ops * lib80211_get_crypto_ops ( const char * ) 

/* net/wireless/mlme.o */
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##cfg80211_conn
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
cfg80211_send_rx_auth void cfg80211_send_rx_auth ( s#net_device * , const t#u8 * , t#size_t ) 
cfg80211_send_rx_assoc void cfg80211_send_rx_assoc ( s#net_device * , const t#u8 * , t#size_t ) 
cfg80211_send_deauth void cfg80211_send_deauth ( s#net_device * , const t#u8 * , t#size_t , void * ) 
cfg80211_send_disassoc void cfg80211_send_disassoc ( s#net_device * , const t#u8 * , t#size_t , void * ) 
cfg80211_send_auth_timeout void cfg80211_send_auth_timeout ( s#net_device * , const t#u8 * ) 
cfg80211_send_assoc_timeout void cfg80211_send_assoc_timeout ( s#net_device * , const t#u8 * ) 
e#nl80211_key_type enum nl80211_key_type { NL80211_KEYTYPE_GROUP , NL80211_KEYTYPE_PAIRWISE , NL80211_KEYTYPE_PEERKEY , } 
cfg80211_michael_mic_failure void cfg80211_michael_mic_failure ( s#net_device * , const t#u8 * , e#nl80211_key_type , int , const t#u8 * , t#gfp_t ) 

/* net/wireless/radiotap.o */
s#ieee80211_radiotap_header struct ieee80211_radiotap_header { t#u8 it_version ; t#u8 it_pad ; t#__le16 it_len ; t#__le32 it_present ; } 
s#ieee80211_radiotap_iterator struct ieee80211_radiotap_iterator { s#ieee80211_radiotap_header * rtheader ; int max_length ; int this_arg_index ; t#u8 * this_arg ; int arg_index ; t#u8 * arg ; t#__le32 * next_bitmap ; t#u32 bitmap_shifter ; } 
ieee80211_radiotap_iterator_init extern int ieee80211_radiotap_iterator_init ( s#ieee80211_radiotap_iterator * , s#ieee80211_radiotap_header * , int ) 
ieee80211_radiotap_iterator_next extern int ieee80211_radiotap_iterator_next ( s#ieee80211_radiotap_iterator * ) 

/* net/wireless/reg.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##cfg80211_conn
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
freq_reg_info extern int freq_reg_info ( s#wiphy * , t#u32 , t#u32 , const s#ieee80211_reg_rule * * ) 
wiphy_apply_custom_regulatory extern void wiphy_apply_custom_regulatory ( s#wiphy * , const s#ieee80211_regdomain * ) 
regulatory_hint extern int regulatory_hint ( s#wiphy * , const char * ) 

/* net/wireless/scan.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##sock
s##sec_path
s##vlan_group
s##cfg80211_conn
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
cfg80211_scan_done void cfg80211_scan_done ( s#cfg80211_scan_request * , t#bool ) 
cfg80211_get_bss s#cfg80211_bss * cfg80211_get_bss ( s#wiphy * , s#ieee80211_channel * , const t#u8 * , const t#u8 * , t#size_t , t#u16 , t#u16 ) 
cfg80211_get_mesh s#cfg80211_bss * cfg80211_get_mesh ( s#wiphy * , s#ieee80211_channel * , const t#u8 * , t#size_t , const t#u8 * ) 
cfg80211_inform_bss s#cfg80211_bss * cfg80211_inform_bss ( s#wiphy * , s#ieee80211_channel * , const t#u8 * , t#u64 , t#u16 , t#u16 , const t#u8 * , t#size_t , t#s32 , t#gfp_t ) 
cfg80211_inform_bss_frame s#cfg80211_bss * cfg80211_inform_bss_frame ( s#wiphy * , s#ieee80211_channel * , s#ieee80211_mgmt * , t#size_t , t#s32 , t#gfp_t ) 
cfg80211_put_bss void cfg80211_put_bss ( s#cfg80211_bss * ) 
cfg80211_unlink_bss void cfg80211_unlink_bss ( s#wiphy * , s#cfg80211_bss * ) 
cfg80211_wext_siwscan int cfg80211_wext_siwscan ( s#net_device * , s#iw_request_info * , u#iwreq_data * , char * ) 
cfg80211_wext_giwscan int cfg80211_wext_giwscan ( s#net_device * , s#iw_request_info * , s#iw_point * , char * ) 

/* net/wireless/sme.o */
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s#cfg80211_conn struct cfg80211_conn { s#cfg80211_connect_params params ; enum { CFG80211_CONN_IDLE , CFG80211_CONN_SCANNING , CFG80211_CONN_SCAN_AGAIN , CFG80211_CONN_AUTHENTICATE_NEXT , CFG80211_CONN_AUTHENTICATING , CFG80211_CONN_ASSOCIATE_NEXT , CFG80211_CONN_ASSOCIATING , CFG80211_CONN_DEAUTH_ASSOC_FAIL , } state ; t#u8 bssid [ 6 ] , prev_bssid [ 6 ] ; t#u8 * ie ; t#size_t ie_len ; t#bool auto_auth , prev_bssid_valid ; } 
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
cfg80211_connect_result void cfg80211_connect_result ( s#net_device * , const t#u8 * , const t#u8 * , t#size_t , const t#u8 * , t#size_t , t#u16 , t#gfp_t ) 
cfg80211_roamed void cfg80211_roamed ( s#net_device * , const t#u8 * , const t#u8 * , t#size_t , const t#u8 * , t#size_t , t#gfp_t ) 
cfg80211_disconnected void cfg80211_disconnected ( s#net_device * , t#u16 , t#u8 * , t#size_t , t#gfp_t ) 

/* net/wireless/util.o */
ieee80211_get_response_rate s#ieee80211_rate * ieee80211_get_response_rate ( s#ieee80211_supported_band * , t#u32 , int ) 
ieee80211_channel_to_frequency extern int ieee80211_channel_to_frequency ( int ) 
ieee80211_frequency_to_channel extern int ieee80211_frequency_to_channel ( int ) 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##libipw_device
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##xfrm_state
s##rtable
s##rt6_info
s##dn_route
s##xfrm_policy
s##sec_path
s##vlan_group
s##cfg80211_conn
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##rt6_statistics
s##fib6_table
s##ebt_table
s##ip_conntrack_stat
s##net_generic
__ieee80211_get_channel extern s#ieee80211_channel * __ieee80211_get_channel ( s#wiphy * , int ) 
rfc1042_header extern const unsigned char rfc1042_header [ 6 ] 
bridge_tunnel_header extern const unsigned char bridge_tunnel_header [ 6 ] 
ieee80211_hdrlen unsigned int ieee80211_hdrlen ( t#__le16 ) 
ieee80211_get_hdrlen_from_skb unsigned int ieee80211_get_hdrlen_from_skb ( const s#sk_buff * ) 
ieee80211_data_to_8023 int ieee80211_data_to_8023 ( s#sk_buff * , t#u8 * , e#nl80211_iftype ) 
ieee80211_data_from_8023 int ieee80211_data_from_8023 ( s#sk_buff * , t#u8 * , e#nl80211_iftype , t#u8 * , t#bool ) 
cfg80211_classify8021d unsigned int cfg80211_classify8021d ( s#sk_buff * ) 
ieee80211_bss_get_ie const t#u8 * ieee80211_bss_get_ie ( s#cfg80211_bss * , t#u8 ) 

/* net/wireless/wext.o */
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##wireless_dev
s##Qdisc
s##tvec_base
s##netpoll_info
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##cdev
s##posix_acl
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##rtnl_link_ops
wireless_send_event extern void wireless_send_event ( s#net_device * , unsigned int , u#iwreq_data * , const char * ) 
iw_handler_set_spy extern int iw_handler_set_spy ( s#net_device * , s#iw_request_info * , u#iwreq_data * , char * ) 
iw_handler_get_spy extern int iw_handler_get_spy ( s#net_device * , s#iw_request_info * , u#iwreq_data * , char * ) 
iw_handler_set_thrspy extern int iw_handler_set_thrspy ( s#net_device * , s#iw_request_info * , u#iwreq_data * , char * ) 
iw_handler_get_thrspy extern int iw_handler_get_thrspy ( s#net_device * , s#iw_request_info * , u#iwreq_data * , char * ) 
wireless_spy_update extern void wireless_spy_update ( s#net_device * , unsigned char * , s#iw_quality * ) 

/* net/wireless/wext-compat.o */
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##cfg80211_conn
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
cfg80211_wext_giwname int cfg80211_wext_giwname ( s#net_device * , s#iw_request_info * , char * , char * ) 
cfg80211_wext_siwmode int cfg80211_wext_siwmode ( s#net_device * , s#iw_request_info * , t#u32 * , char * ) 
cfg80211_wext_giwmode int cfg80211_wext_giwmode ( s#net_device * , s#iw_request_info * , t#u32 * , char * ) 
cfg80211_wext_giwrange int cfg80211_wext_giwrange ( s#net_device * , s#iw_request_info * , s#iw_point * , char * ) 
cfg80211_wext_siwrts int cfg80211_wext_siwrts ( s#net_device * , s#iw_request_info * , s#iw_param * , char * ) 
cfg80211_wext_giwrts int cfg80211_wext_giwrts ( s#net_device * , s#iw_request_info * , s#iw_param * , char * ) 
cfg80211_wext_siwfrag int cfg80211_wext_siwfrag ( s#net_device * , s#iw_request_info * , s#iw_param * , char * ) 
cfg80211_wext_giwfrag int cfg80211_wext_giwfrag ( s#net_device * , s#iw_request_info * , s#iw_param * , char * ) 
cfg80211_wext_siwretry int cfg80211_wext_siwretry ( s#net_device * , s#iw_request_info * , s#iw_param * , char * ) 
cfg80211_wext_giwretry int cfg80211_wext_giwretry ( s#net_device * , s#iw_request_info * , s#iw_param * , char * ) 
cfg80211_wext_siwencode int cfg80211_wext_siwencode ( s#net_device * , s#iw_request_info * , s#iw_point * , char * ) 
cfg80211_wext_siwencodeext int cfg80211_wext_siwencodeext ( s#net_device * , s#iw_request_info * , s#iw_point * , char * ) 
cfg80211_wext_giwencode int cfg80211_wext_giwencode ( s#net_device * , s#iw_request_info * , s#iw_point * , char * ) 
cfg80211_wext_siwfreq int cfg80211_wext_siwfreq ( s#net_device * , s#iw_request_info * , s#iw_freq * , char * ) 
cfg80211_wext_giwfreq int cfg80211_wext_giwfreq ( s#net_device * , s#iw_request_info * , s#iw_freq * , char * ) 
cfg80211_wext_siwtxpower int cfg80211_wext_siwtxpower ( s#net_device * , s#iw_request_info * , u#iwreq_data * , char * ) 
cfg80211_wext_giwtxpower int cfg80211_wext_giwtxpower ( s#net_device * , s#iw_request_info * , u#iwreq_data * , char * ) 
cfg80211_wext_siwauth int cfg80211_wext_siwauth ( s#net_device * , s#iw_request_info * , s#iw_param * , char * ) 
cfg80211_wext_giwauth int cfg80211_wext_giwauth ( s#net_device * , s#iw_request_info * , s#iw_param * , char * ) 
cfg80211_wext_siwpower int cfg80211_wext_siwpower ( s#net_device * , s#iw_request_info * , s#iw_param * , char * ) 
cfg80211_wext_giwpower int cfg80211_wext_giwpower ( s#net_device * , s#iw_request_info * , s#iw_param * , char * ) 
cfg80211_wext_siwrate int cfg80211_wext_siwrate ( s#net_device * , s#iw_request_info * , s#iw_param * , char * ) 
cfg80211_wext_giwrate int cfg80211_wext_giwrate ( s#net_device * , s#iw_request_info * , s#iw_param * , char * ) 
cfg80211_wireless_stats s#iw_statistics * cfg80211_wireless_stats ( s#net_device * ) 
cfg80211_wext_siwap int cfg80211_wext_siwap ( s#net_device * , s#iw_request_info * , s#sockaddr * , char * ) 
cfg80211_wext_giwap int cfg80211_wext_giwap ( s#net_device * , s#iw_request_info * , s#sockaddr * , char * ) 
cfg80211_wext_siwessid int cfg80211_wext_siwessid ( s#net_device * , s#iw_request_info * , s#iw_point * , char * ) 
cfg80211_wext_giwessid int cfg80211_wext_giwessid ( s#net_device * , s#iw_request_info * , s#iw_point * , char * ) 

/* net/wireless/wext-sme.o */
s##libipw_device
s##sock
s##sec_path
s##neigh_parms
s##vlan_group
s##neighbour
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ipv6_devconf
s##rt6_info
s##rt6_statistics
s##fib6_table
s##dst_entry
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##cfg80211_conn
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##rtnl_link_ops
cfg80211_wext_siwgenie int cfg80211_wext_siwgenie ( s#net_device * , s#iw_request_info * , s#iw_point * , char * ) 
cfg80211_wext_siwmlme int cfg80211_wext_siwmlme ( s#net_device * , s#iw_request_info * , s#iw_point * , char * ) 

/* net/xfrm/xfrm_algo.o */
s#xfrm_algo_aead_info struct xfrm_algo_aead_info { t#u16 icv_truncbits ; } 
s#xfrm_algo_auth_info struct xfrm_algo_auth_info { t#u16 icv_truncbits ; t#u16 icv_fullbits ; } 
s#xfrm_algo_encr_info struct xfrm_algo_encr_info { t#u16 blockbits ; t#u16 defkeybits ; } 
s#xfrm_algo_comp_info struct xfrm_algo_comp_info { t#u16 threshold ; } 
s#sadb_alg struct sadb_alg { t#__u8 sadb_alg_id ; t#__u8 sadb_alg_ivlen ; t#__u16 sadb_alg_minbits ; t#__u16 sadb_alg_maxbits ; t#__u16 sadb_alg_reserved ; } 
s#xfrm_algo_desc struct xfrm_algo_desc { char * name ; char * compat ; t#u8 available : 1 ; union { s#xfrm_algo_aead_info aead ; s#xfrm_algo_auth_info auth ; s#xfrm_algo_encr_info encr ; s#xfrm_algo_comp_info comp ; } uinfo ; s#sadb_alg desc ; } 
xfrm_aalg_get_byid extern s#xfrm_algo_desc * xfrm_aalg_get_byid ( int ) 
xfrm_ealg_get_byid extern s#xfrm_algo_desc * xfrm_ealg_get_byid ( int ) 
xfrm_calg_get_byid extern s#xfrm_algo_desc * xfrm_calg_get_byid ( int ) 
xfrm_aalg_get_byname extern s#xfrm_algo_desc * xfrm_aalg_get_byname ( char * , int ) 
xfrm_ealg_get_byname extern s#xfrm_algo_desc * xfrm_ealg_get_byname ( char * , int ) 
xfrm_calg_get_byname extern s#xfrm_algo_desc * xfrm_calg_get_byname ( char * , int ) 
xfrm_aead_get_byname extern s#xfrm_algo_desc * xfrm_aead_get_byname ( char * , int , int ) 
xfrm_aalg_get_byidx extern s#xfrm_algo_desc * xfrm_aalg_get_byidx ( unsigned int ) 
xfrm_ealg_get_byidx extern s#xfrm_algo_desc * xfrm_ealg_get_byidx ( unsigned int ) 
xfrm_probe_algs extern void xfrm_probe_algs ( void ) 
xfrm_count_auth_supported extern int xfrm_count_auth_supported ( void ) 
xfrm_count_enc_supported extern int xfrm_count_enc_supported ( void ) 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
s##skcipher_givcrypt_request
s##aead_givcrypt_request
s##crypto_type
t#icv_update_fn_t typedef int ( icv_update_fn_t ) ( s#hash_desc * , s#scatterlist * , unsigned int ) 
skb_icv_walk extern int skb_icv_walk ( const s#sk_buff * , s#hash_desc * , int , int , t#icv_update_fn_t ) 
pskb_put extern void * pskb_put ( s#sk_buff * , s#sk_buff * , int ) 

/* net/xfrm/xfrm_input.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##in_device
s##dn_route
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ebt_table
s##ip_conntrack_stat
s##net_generic
__secpath_destroy extern void __secpath_destroy ( s#sec_path * ) 
secpath_dup extern s#sec_path * secpath_dup ( s#sec_path * ) 
xfrm_prepare_input extern int xfrm_prepare_input ( s#xfrm_state * , s#sk_buff * ) 
xfrm_input extern int xfrm_input ( s#sk_buff * , int , t#__be32 , int ) 
xfrm_input_resume extern int xfrm_input_resume ( s#sk_buff * , int ) 

/* net/xfrm/xfrm_ipcomp.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##vfsmount
s##nameidata
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##cdev
s##posix_acl
s##iw_handler_def
s##iw_public_data
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##in_device
s##dn_route
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ebt_table
s##ip_conntrack_stat
s##net_generic
ipcomp_input int ipcomp_input ( s#xfrm_state * , s#sk_buff * ) 
ipcomp_output int ipcomp_output ( s#xfrm_state * , s#sk_buff * ) 
ipcomp_destroy void ipcomp_destroy ( s#xfrm_state * ) 
ipcomp_init_state int ipcomp_init_state ( s#xfrm_state * ) 

/* net/xfrm/xfrm_output.o */
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##kstatfs
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##tvec_base
s##eventfd_ctx
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##iw_handler_def
s##iw_public_data
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##in_device
s##dn_route
s##ebt_table
s##ip_conntrack_stat
s##net_generic
xfrm_output_resume extern int xfrm_output_resume ( s#sk_buff * , int ) 
xfrm_output extern int xfrm_output ( s#sk_buff * ) 
xfrm_inner_extract_output extern int xfrm_inner_extract_output ( s#xfrm_state * , s#sk_buff * ) 

/* net/xfrm/xfrm_policy.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
xfrm_cfg_mutex extern s#mutex xfrm_cfg_mutex 
s##iw_handler_def
s##iw_public_data
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##in_device
s##dn_route
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ebt_table
s##ip_conntrack_stat
s##net_generic
xfrm_policy_alloc s#xfrm_policy * xfrm_policy_alloc ( s#net * , t#gfp_t ) 
xfrm_policy_destroy extern void xfrm_policy_destroy ( s#xfrm_policy * ) 
s#xfrmk_spdinfo struct xfrmk_spdinfo { t#u32 incnt ; t#u32 outcnt ; t#u32 fwdcnt ; t#u32 inscnt ; t#u32 outscnt ; t#u32 fwdscnt ; t#u32 spdhcnt ; t#u32 spdhmcnt ; } 
xfrm_spd_getinfo extern void xfrm_spd_getinfo ( s#xfrmk_spdinfo * ) 
xfrm_policy_insert int xfrm_policy_insert ( int , s#xfrm_policy * , int ) 
xfrm_policy_bysel_ctx s#xfrm_policy * xfrm_policy_bysel_ctx ( s#net * , t#u8 , int , s#xfrm_selector * , s#xfrm_sec_ctx * , int , int * ) 
xfrm_policy_byid s#xfrm_policy * xfrm_policy_byid ( s#net * , t#u8 , int , t#u32 , int , int * ) 
s#xfrm_audit struct xfrm_audit { t#u32 secid ; t#uid_t loginuid ; t#u32 sessionid ; } 
xfrm_policy_flush int xfrm_policy_flush ( s#net * , t#u8 , s#xfrm_audit * ) 
s#xfrm_policy_walk struct xfrm_policy_walk { s#xfrm_policy_walk_entry walk ; t#u8 type ; t#u32 seq ; } 
xfrm_policy_walk extern int xfrm_policy_walk ( s#net * , s#xfrm_policy_walk * , int ( * ) ( s#xfrm_policy * , int , int , void * ) , void * ) 
xfrm_policy_walk_init extern void xfrm_policy_walk_init ( s#xfrm_policy_walk * , t#u8 ) 
xfrm_policy_walk_done extern void xfrm_policy_walk_done ( s#xfrm_policy_walk * ) 
xfrm_policy_delete extern int xfrm_policy_delete ( s#xfrm_policy * , int ) 
__xfrm_lookup extern int __xfrm_lookup ( s#net * , s#dst_entry * * , s#flowi * , s#sock * , int ) 
xfrm_lookup extern int xfrm_lookup ( s#net * , s#dst_entry * * , s#flowi * , s#sock * , int ) 
__xfrm_decode_session extern int __xfrm_decode_session ( s#sk_buff * , s#flowi * , unsigned int , int ) 
__xfrm_policy_check extern int __xfrm_policy_check ( s#sock * , int , s#sk_buff * , unsigned short ) 
__xfrm_route_forward extern int __xfrm_route_forward ( s#sk_buff * , unsigned short ) 
xfrm_dst_ifdown extern void xfrm_dst_ifdown ( s#dst_entry * , s#net_device * ) 
s#xfrm_dst struct xfrm_dst { union { s#dst_entry dst ; s#rtable rt ; s#rt6_info rt6 ; } u ; s#dst_entry * route ; s#flowi * origin ; s#xfrm_selector * partner ; t#u32 genid ; t#u32 route_mtu_cached ; t#u32 child_mtu_cached ; t#u32 route_cookie ; t#u32 path_cookie ; } 
xfrm_bundle_ok extern int xfrm_bundle_ok ( s#xfrm_policy * , s#xfrm_dst * , s#flowi * , int , int ) 
s#xfrm_policy_afinfo struct xfrm_policy_afinfo { unsigned short family ; s#dst_ops * dst_ops ; void ( * garbage_collect ) ( s#net * ) ; s#dst_entry * ( * dst_lookup ) ( s#net * , int , t#xfrm_address_t * , t#xfrm_address_t * ) ; int ( * get_saddr ) ( s#net * , t#xfrm_address_t * , t#xfrm_address_t * ) ; s#dst_entry * ( * find_bundle ) ( s#flowi * , s#xfrm_policy * ) ; void ( * decode_session ) ( s#sk_buff * , s#flowi * , int ) ; int ( * get_tos ) ( s#flowi * ) ; int ( * init_path ) ( s#xfrm_dst * , s#dst_entry * , int ) ; int ( * fill_dst ) ( s#xfrm_dst * , s#net_device * ) ; } 
xfrm_policy_register_afinfo extern int xfrm_policy_register_afinfo ( s#xfrm_policy_afinfo * ) 
xfrm_policy_unregister_afinfo extern int xfrm_policy_unregister_afinfo ( s#xfrm_policy_afinfo * ) 
xfrm_audit_policy_add extern void xfrm_audit_policy_add ( s#xfrm_policy * , int , t#u32 , t#u32 , t#u32 ) 
xfrm_audit_policy_delete extern void xfrm_audit_policy_delete ( s#xfrm_policy * , int , t#u32 , t#u32 , t#u32 ) 
s#xfrm_migrate struct xfrm_migrate { t#xfrm_address_t old_daddr ; t#xfrm_address_t old_saddr ; t#xfrm_address_t new_daddr ; t#xfrm_address_t new_saddr ; t#u8 proto ; t#u8 mode ; t#u16 reserved ; t#u32 reqid ; t#u16 old_family ; t#u16 new_family ; } 
s#xfrm_kmaddress struct xfrm_kmaddress { t#xfrm_address_t local ; t#xfrm_address_t remote ; t#u32 reserved ; t#u16 family ; } 
xfrm_migrate extern int xfrm_migrate ( s#xfrm_selector * , t#u8 , t#u8 , s#xfrm_migrate * , int , s#xfrm_kmaddress * ) 

/* net/xfrm/xfrm_state.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##iw_handler_def
s##iw_public_data
s##inet_hashinfo
s##udp_table
s##raw_hashinfo
s##in_device
s##dn_route
s##vlan_group
s##wireless_dev
s##Qdisc
s##netpoll_info
s##net_bridge_port
s##macvlan_port
s##garp_port
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##prot_inuse
s##ipv4_devconf
s##fib_rules_ops
s##xt_table
s##mfc_cache
s##vif_device
s##ebt_table
s##ip_conntrack_stat
s##net_generic
xfrm_register_type extern int xfrm_register_type ( const s#xfrm_type * , unsigned short ) 
xfrm_unregister_type extern int xfrm_unregister_type ( const s#xfrm_type * , unsigned short ) 
xfrm_register_mode extern int xfrm_register_mode ( s#xfrm_mode * , int ) 
xfrm_unregister_mode extern int xfrm_unregister_mode ( s#xfrm_mode * , int ) 
xfrm_state_alloc extern s#xfrm_state * xfrm_state_alloc ( s#net * ) 
__xfrm_state_destroy extern void __xfrm_state_destroy ( s#xfrm_state * ) 
__xfrm_state_delete extern int __xfrm_state_delete ( s#xfrm_state * ) 
xfrm_state_delete extern int xfrm_state_delete ( s#xfrm_state * ) 
xfrm_state_flush extern int xfrm_state_flush ( s#net * , t#u8 , s#xfrm_audit * ) 
s#xfrmk_sadinfo struct xfrmk_sadinfo { t#u32 sadhcnt ; t#u32 sadhmcnt ; t#u32 sadcnt ; } 
xfrm_sad_getinfo extern void xfrm_sad_getinfo ( s#xfrmk_sadinfo * ) 
xfrm_stateonly_find extern s#xfrm_state * xfrm_stateonly_find ( s#net * , t#xfrm_address_t * , t#xfrm_address_t * , unsigned short , t#u8 , t#u8 , t#u32 ) 
xfrm_state_insert extern void xfrm_state_insert ( s#xfrm_state * ) 
xfrm_state_add extern int xfrm_state_add ( s#xfrm_state * ) 
xfrm_migrate_state_find extern s#xfrm_state * xfrm_migrate_state_find ( s#xfrm_migrate * ) 
xfrm_state_migrate extern s#xfrm_state * xfrm_state_migrate ( s#xfrm_state * , s#xfrm_migrate * ) 
xfrm_state_update extern int xfrm_state_update ( s#xfrm_state * ) 
xfrm_state_check_expire extern int xfrm_state_check_expire ( s#xfrm_state * ) 
xfrm_state_lookup extern s#xfrm_state * xfrm_state_lookup ( s#net * , t#xfrm_address_t * , t#__be32 , t#u8 , unsigned short ) 
xfrm_state_lookup_byaddr extern s#xfrm_state * xfrm_state_lookup_byaddr ( s#net * , t#xfrm_address_t * , t#xfrm_address_t * , t#u8 , unsigned short ) 
xfrm_find_acq s#xfrm_state * xfrm_find_acq ( s#net * , t#u8 , t#u32 , t#u8 , t#xfrm_address_t * , t#xfrm_address_t * , int , unsigned short ) 
xfrm_tmpl_sort extern int xfrm_tmpl_sort ( s#xfrm_tmpl * * , s#xfrm_tmpl * * , int , unsigned short ) 
xfrm_state_sort extern int xfrm_state_sort ( s#xfrm_state * * , s#xfrm_state * * , int , unsigned short ) 
xfrm_find_acq_byseq extern s#xfrm_state * xfrm_find_acq_byseq ( s#net * , t#u32 ) 
xfrm_get_acqseq t#u32 xfrm_get_acqseq ( void ) 
xfrm_alloc_spi extern int xfrm_alloc_spi ( s#xfrm_state * , t#u32 , t#u32 ) 
xfrm_state_walk extern int xfrm_state_walk ( s#net * , s#xfrm_state_walk * , int ( * ) ( s#xfrm_state * , int , void * ) , void * ) 
xfrm_state_walk_init extern void xfrm_state_walk_init ( s#xfrm_state_walk * , t#u8 ) 
xfrm_state_walk_done extern void xfrm_state_walk_done ( s#xfrm_state_walk * ) 
s#km_event struct km_event { union { t#u32 hard ; t#u32 proto ; t#u32 byid ; t#u32 aevent ; t#u32 type ; } data ; t#u32 seq ; t#u32 pid ; t#u32 event ; s#net * net ; } 
km_policy_notify extern void km_policy_notify ( s#xfrm_policy * , int , s#km_event * ) 
km_state_notify extern void km_state_notify ( s#xfrm_state * , s#km_event * ) 
km_state_expired extern void km_state_expired ( s#xfrm_state * , int , t#u32 ) 
km_query extern int km_query ( s#xfrm_state * , s#xfrm_tmpl * , s#xfrm_policy * ) 
km_new_mapping extern int km_new_mapping ( s#xfrm_state * , t#xfrm_address_t * , t#__be16 ) 
km_policy_expired extern void km_policy_expired ( s#xfrm_policy * , int , int , t#u32 ) 
km_migrate extern int km_migrate ( s#xfrm_selector * , t#u8 , t#u8 , s#xfrm_migrate * , int , s#xfrm_kmaddress * ) 
km_report extern int km_report ( s#net * , t#u8 , s#xfrm_selector * , t#xfrm_address_t * ) 
xfrm_user_policy extern int xfrm_user_policy ( s#sock * , int , t#u8 * , int ) 
s#xfrm_mgr struct xfrm_mgr { s#list_head list ; char * id ; int ( * notify ) ( s#xfrm_state * , s#km_event * ) ; int ( * acquire ) ( s#xfrm_state * , s#xfrm_tmpl * , s#xfrm_policy * , int ) ; s#xfrm_policy * ( * compile_policy ) ( s#sock * , int , t#u8 * , int , int * ) ; int ( * new_mapping ) ( s#xfrm_state * , t#xfrm_address_t * , t#__be16 ) ; int ( * notify_policy ) ( s#xfrm_policy * , int , s#km_event * ) ; int ( * report ) ( s#net * , t#u8 , s#xfrm_selector * , t#xfrm_address_t * ) ; int ( * migrate ) ( s#xfrm_selector * , t#u8 , t#u8 , s#xfrm_migrate * , int , s#xfrm_kmaddress * ) ; } 
xfrm_register_km extern int xfrm_register_km ( s#xfrm_mgr * ) 
xfrm_unregister_km extern int xfrm_unregister_km ( s#xfrm_mgr * ) 
xfrm_state_register_afinfo extern int xfrm_state_register_afinfo ( s#xfrm_state_afinfo * ) 
xfrm_state_unregister_afinfo extern int xfrm_state_unregister_afinfo ( s#xfrm_state_afinfo * ) 
xfrm_state_delete_tunnel extern void xfrm_state_delete_tunnel ( s#xfrm_state * ) 
xfrm_init_state extern int xfrm_init_state ( s#xfrm_state * ) 
xfrm_audit_state_add extern void xfrm_audit_state_add ( s#xfrm_state * , int , t#u32 , t#u32 , t#u32 ) 
xfrm_audit_state_delete extern void xfrm_audit_state_delete ( s#xfrm_state * , int , t#u32 , t#u32 , t#u32 ) 
xfrm_audit_state_replay_overflow extern void xfrm_audit_state_replay_overflow ( s#xfrm_state * , s#sk_buff * ) 
xfrm_audit_state_notfound_simple extern void xfrm_audit_state_notfound_simple ( s#sk_buff * , t#u16 ) 
xfrm_audit_state_notfound extern void xfrm_audit_state_notfound ( s#sk_buff * , t#u16 , t#__be32 , t#__be32 ) 
xfrm_audit_state_icvfail extern void xfrm_audit_state_icvfail ( s#xfrm_state * , s#sk_buff * , t#u8 ) 

/* security/commoncap.o */
s##sock
s##net_device
s##sec_path
cap_netlink_recv extern int cap_netlink_recv ( s#sk_buff * , int ) 

/* security/inode.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##mnt_namespace
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##cdev
s##posix_acl
securityfs_create_file extern s#dentry * securityfs_create_file ( const char * , t#mode_t , s#dentry * , void * , const s#file_operations * ) 
securityfs_create_dir extern s#dentry * securityfs_create_dir ( const char * , s#dentry * ) 
securityfs_remove extern void securityfs_remove ( s#dentry * ) 

/* security/keys/key.o */
s##seq_file
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##uts_namespace
s##ipc_namespace
s##mnt_namespace
s##net
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s#key_user struct key_user { s#rb_node node ; s#mutex cons_lock ; t#spinlock_t lock ; t#atomic_t usage ; t#atomic_t nkeys ; t#atomic_t nikeys ; t#uid_t uid ; s#user_namespace * user_ns ; int qnkeys ; int qnbytes ; } 
s##keyring_list
key_alloc extern s#key * key_alloc ( s#key_type * , const char * , t#uid_t , t#gid_t , const s#cred * , t#key_perm_t , unsigned long ) 
key_payload_reserve extern int key_payload_reserve ( s#key * , t#size_t ) 
key_instantiate_and_link extern int key_instantiate_and_link ( s#key * , const void * , t#size_t , s#key * , s#key * ) 
key_negate_and_link extern int key_negate_and_link ( s#key * , unsigned , s#key * , s#key * ) 
key_put extern void key_put ( s#key * ) 
s##__key_reference_with_attributes
t#key_ref_t typedef s#__key_reference_with_attributes * key_ref_t 
key_create_or_update extern t#key_ref_t key_create_or_update ( t#key_ref_t , const char * , const char * , const void * , t#size_t , t#key_perm_t , unsigned long ) 
key_update extern int key_update ( t#key_ref_t , const void * , t#size_t ) 
key_revoke extern void key_revoke ( s#key * ) 
register_key_type extern int register_key_type ( s#key_type * ) 
unregister_key_type extern void unregister_key_type ( s#key_type * ) 

/* security/keys/keyring.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s#keyring_list struct keyring_list { s#rcu_head rcu ; unsigned short maxkeys ; unsigned short nkeys ; unsigned short delkey ; s#key * keys [ 0 ] ; } 
key_type_keyring extern s#key_type key_type_keyring 
s##__key_reference_with_attributes
keyring_search extern t#key_ref_t keyring_search ( t#key_ref_t , s#key_type * , const char * ) 
key_link extern int key_link ( s#key * , s#key * ) 
key_unlink extern int key_unlink ( s#key * , s#key * ) 
keyring_clear extern int keyring_clear ( s#key * ) 

/* security/keys/permission.o */
s##__key_reference_with_attributes
s##seq_file
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##compat_timespec
s##pollfd
s##user_namespace
s##keyring_list
key_task_permission extern int key_task_permission ( const t#key_ref_t , const s#cred * , t#key_perm_t ) 
key_validate extern int key_validate ( s#key * ) 

/* security/keys/request_key.o */
s##seq_file
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##keyring_list
complete_request_key extern void complete_request_key ( s#key_construction * , int ) 
wait_for_key_construction extern int wait_for_key_construction ( s#key * , t#bool ) 
request_key extern s#key * request_key ( s#key_type * , const char * , const char * ) 
request_key_with_auxdata extern s#key * request_key_with_auxdata ( s#key_type * , const char * , const void * , t#size_t , void * ) 
request_key_async extern s#key * request_key_async ( s#key_type * , const char * , const void * , t#size_t ) 
request_key_async_with_auxdata extern s#key * request_key_async_with_auxdata ( s#key_type * , const char * , const void * , t#size_t , void * ) 

/* security/keys/user_defined.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##keyring_list
key_type_user extern s#key_type key_type_user 
user_instantiate extern int user_instantiate ( s#key * , const void * , t#size_t ) 
user_update extern int user_update ( s#key * , const void * , t#size_t ) 
user_match extern int user_match ( const s#key * , const void * ) 
user_revoke extern void user_revoke ( s#key * ) 
user_destroy extern void user_destroy ( s#key * ) 
user_describe extern void user_describe ( const s#key * , s#seq_file * ) 
user_read extern long user_read ( const s#key * , char * , t#size_t ) 

/* security/security.o */
security_sb_copy_data int security_sb_copy_data ( char * , char * ) 
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##hd_struct
s##gendisk
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##mtd_info
s#security_mnt_opts struct security_mnt_opts { char * * mnt_opts ; int * mnt_opts_flags ; int num_mnt_opts ; } 
security_sb_set_mnt_opts int security_sb_set_mnt_opts ( s#super_block * , s#security_mnt_opts * ) 
security_sb_clone_mnt_opts void security_sb_clone_mnt_opts ( const s#super_block * , s#super_block * ) 
security_sb_parse_opts_str int security_sb_parse_opts_str ( char * , s#security_mnt_opts * ) 
security_inode_init_security int security_inode_init_security ( s#inode * , s#inode * , char * * , void * * , t#size_t * ) 
security_path_mknod int security_path_mknod ( s#path * , s#dentry * , int , unsigned int ) 
security_inode_create int security_inode_create ( s#inode * , s#dentry * , int ) 
security_inode_mkdir int security_inode_mkdir ( s#inode * , s#dentry * , int ) 
security_inode_permission int security_inode_permission ( s#inode * , int ) 
security_inode_setattr int security_inode_setattr ( s#dentry * , s#iattr * ) 
security_task_getsecid void security_task_getsecid ( s#task_struct * , t#u32 * ) 
security_d_instantiate void security_d_instantiate ( s#dentry * , s#inode * ) 
s##sk_buff
security_netlink_recv int security_netlink_recv ( s#sk_buff * , int ) 
security_secid_to_secctx int security_secid_to_secctx ( t#u32 , char * * , t#u32 * ) 
security_secctx_to_secid int security_secctx_to_secid ( const char * , t#u32 , t#u32 * ) 
security_release_secctx void security_release_secctx ( char * , t#u32 ) 
security_inode_notifysecctx int security_inode_notifysecctx ( s#inode * , void * , t#u32 ) 
security_inode_setsecctx int security_inode_setsecctx ( s#dentry * , void * , t#u32 ) 
security_inode_getsecctx int security_inode_getsecctx ( s#inode * , void * * , t#u32 * ) 
s##socket
s##sock
security_unix_stream_connect int security_unix_stream_connect ( s#socket * , s#socket * , s#sock * ) 
security_unix_may_send int security_unix_may_send ( s#socket * , s#socket * ) 
security_sock_rcv_skb int security_sock_rcv_skb ( s#sock * , s#sk_buff * ) 
security_socket_getpeersec_dgram int security_socket_getpeersec_dgram ( s#socket * , s#sk_buff * , t#u32 * ) 
security_sk_classify_flow void security_sk_classify_flow ( s#sock * , s#flowi * ) 
s##request_sock
security_req_classify_flow void security_req_classify_flow ( const s#request_sock * , s#flowi * ) 
security_sock_graft void security_sock_graft ( s#sock * , s#socket * ) 
security_inet_conn_request int security_inet_conn_request ( s#sock * , s#sk_buff * , s#request_sock * ) 
security_tun_dev_create int security_tun_dev_create ( void ) 
security_tun_dev_post_create void security_tun_dev_post_create ( s#sock * ) 
security_tun_dev_attach int security_tun_dev_attach ( s#sock * ) 
s#xfrm_user_sec_ctx struct xfrm_user_sec_ctx { t#__u16 len ; t#__u16 exttype ; t#__u8 ctx_alg ; t#__u8 ctx_doi ; t#__u16 ctx_len ; } 
security_xfrm_policy_alloc int security_xfrm_policy_alloc ( s#xfrm_sec_ctx * * , s#xfrm_user_sec_ctx * ) 
security_xfrm_policy_free void security_xfrm_policy_free ( s#xfrm_sec_ctx * ) 
s##xfrm_state
security_xfrm_state_alloc int security_xfrm_state_alloc ( s#xfrm_state * , s#xfrm_user_sec_ctx * ) 
security_xfrm_state_delete int security_xfrm_state_delete ( s#xfrm_state * ) 
security_skb_classify_flow void security_skb_classify_flow ( s#sk_buff * , s#flowi * ) 

/* security/selinux/exports.o */
selinux_string_to_sid int selinux_string_to_sid ( char * , t#u32 * ) 
selinux_secmark_relabel_packet_permission int selinux_secmark_relabel_packet_permission ( t#u32 ) 
selinux_secmark_refcount_inc void selinux_secmark_refcount_inc ( void ) 
selinux_secmark_refcount_dec void selinux_secmark_refcount_dec ( void ) 
selinux_is_enabled t#bool selinux_is_enabled ( void ) 

/* sound/ac97_bus.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##device_private
s##driver_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##bus_type_private
ac97_bus_type extern s#bus_type ac97_bus_type 

/* sound/core/control.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
t#snd_ctl_elem_iface_t typedef int snd_ctl_elem_iface_t 
s#snd_ctl_elem_id struct snd_ctl_elem_id { unsigned int numid ; t#snd_ctl_elem_iface_t iface ; unsigned int device ; unsigned int subdevice ; unsigned char name [ 44 ] ; unsigned int index ; } 
snd_ctl_notify void snd_ctl_notify ( s#snd_card * , unsigned int , s#snd_ctl_elem_id * ) 
t#snd_ctl_elem_type_t typedef int snd_ctl_elem_type_t 
s#snd_ctl_elem_info struct snd_ctl_elem_info { s#snd_ctl_elem_id id ; t#snd_ctl_elem_type_t type ; unsigned int access ; unsigned int count ; t#__kernel_pid_t owner ; union { struct { long min ; long max ; long step ; } integer ; struct { long long min ; long long max ; long long step ; } integer64 ; struct { unsigned int items ; unsigned int item ; char name [ 64 ] ; } enumerated ; unsigned char reserved [ 128 ] ; } value ; union { unsigned short d [ 4 ] ; unsigned short * d_ptr ; } dimen ; unsigned char reserved [ 64 - 4 * sizeof ( unsigned short ) ] ; } 
t#snd_kcontrol_info_t typedef int ( snd_kcontrol_info_t ) ( s#snd_kcontrol * , s#snd_ctl_elem_info * ) 
s#snd_aes_iec958 struct snd_aes_iec958 { unsigned char status [ 24 ] ; unsigned char subcode [ 147 ] ; unsigned char pad ; unsigned char dig_subframe [ 4 ] ; } 
s#snd_ctl_elem_value struct snd_ctl_elem_value { s#snd_ctl_elem_id id ; unsigned int indirect : 1 ; union { union { long value [ 128 ] ; long * value_ptr ; } integer ; union { long long value [ 64 ] ; long long * value_ptr ; } integer64 ; union { unsigned int item [ 128 ] ; unsigned int * item_ptr ; } enumerated ; union { unsigned char data [ 512 ] ; unsigned char * data_ptr ; } bytes ; s#snd_aes_iec958 iec958 ; } value ; s#timespec tstamp ; unsigned char reserved [ 128 - sizeof ( struct timespec ) ] ; } 
t#snd_kcontrol_get_t typedef int ( snd_kcontrol_get_t ) ( s#snd_kcontrol * , s#snd_ctl_elem_value * ) 
t#snd_kcontrol_put_t typedef int ( snd_kcontrol_put_t ) ( s#snd_kcontrol * , s#snd_ctl_elem_value * ) 
t#snd_kcontrol_tlv_rw_t typedef int ( snd_kcontrol_tlv_rw_t ) ( s#snd_kcontrol * , int , unsigned int , unsigned int * ) 
s#snd_ctl_file struct snd_ctl_file { s#list_head list ; s#snd_card * card ; t#pid_t pid ; int prefer_pcm_subdevice ; int prefer_rawmidi_subdevice ; t#wait_queue_head_t change_sleep ; t#spinlock_t read_lock ; s#fasync_struct * fasync ; int subscribed ; s#list_head events ; } 
s#snd_kcontrol_volatile struct snd_kcontrol_volatile { s#snd_ctl_file * owner ; t#pid_t owner_pid ; unsigned int access ; } 
s#snd_kcontrol struct snd_kcontrol { s#list_head list ; s#snd_ctl_elem_id id ; unsigned int count ; t#snd_kcontrol_info_t * info ; t#snd_kcontrol_get_t * get ; t#snd_kcontrol_put_t * put ; union { t#snd_kcontrol_tlv_rw_t * c ; const unsigned int * p ; } tlv ; unsigned long private_value ; void * private_data ; void ( * private_free ) ( s#snd_kcontrol * ) ; s#snd_kcontrol_volatile vd [ 0 ] ; } 
s#snd_kcontrol_new struct snd_kcontrol_new { t#snd_ctl_elem_iface_t iface ; unsigned int device ; unsigned int subdevice ; unsigned char * name ; unsigned int index ; unsigned int access ; unsigned int count ; t#snd_kcontrol_info_t * info ; t#snd_kcontrol_get_t * get ; t#snd_kcontrol_put_t * put ; union { t#snd_kcontrol_tlv_rw_t * c ; const unsigned int * p ; } tlv ; unsigned long private_value ; } 
snd_ctl_new1 s#snd_kcontrol * snd_ctl_new1 ( const s#snd_kcontrol_new * , void * ) 
snd_ctl_free_one void snd_ctl_free_one ( s#snd_kcontrol * ) 
snd_ctl_add int snd_ctl_add ( s#snd_card * , s#snd_kcontrol * ) 
snd_ctl_remove int snd_ctl_remove ( s#snd_card * , s#snd_kcontrol * ) 
snd_ctl_remove_id int snd_ctl_remove_id ( s#snd_card * , s#snd_ctl_elem_id * ) 
snd_ctl_rename_id int snd_ctl_rename_id ( s#snd_card * , s#snd_ctl_elem_id * , s#snd_ctl_elem_id * ) 
snd_ctl_find_numid s#snd_kcontrol * snd_ctl_find_numid ( s#snd_card * , unsigned int ) 
snd_ctl_find_id s#snd_kcontrol * snd_ctl_find_id ( s#snd_card * , s#snd_ctl_elem_id * ) 
t#snd_kctl_ioctl_func_t typedef int ( * snd_kctl_ioctl_func_t ) ( s#snd_card * , s#snd_ctl_file * , unsigned int , unsigned long ) 
snd_ctl_register_ioctl int snd_ctl_register_ioctl ( t#snd_kctl_ioctl_func_t ) 
snd_ctl_register_ioctl_compat int snd_ctl_register_ioctl_compat ( t#snd_kctl_ioctl_func_t ) 
snd_ctl_unregister_ioctl int snd_ctl_unregister_ioctl ( t#snd_kctl_ioctl_func_t ) 
snd_ctl_unregister_ioctl_compat int snd_ctl_unregister_ioctl_compat ( t#snd_kctl_ioctl_func_t ) 
snd_ctl_boolean_mono_info int snd_ctl_boolean_mono_info ( s#snd_kcontrol * , s#snd_ctl_elem_info * ) 
snd_ctl_boolean_stereo_info int snd_ctl_boolean_stereo_info ( s#snd_kcontrol * , s#snd_ctl_elem_info * ) 

/* sound/core/device.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##snd_info_entry
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
t#snd_device_type_t typedef int snd_device_type_t 
t#snd_device_state_t typedef int snd_device_state_t 
s#snd_device struct snd_device { s#list_head list ; s#snd_card * card ; t#snd_device_state_t state ; t#snd_device_type_t type ; void * device_data ; s#snd_device_ops * ops ; } 
s#snd_device_ops struct snd_device_ops { int ( * dev_free ) ( s#snd_device * ) ; int ( * dev_register ) ( s#snd_device * ) ; int ( * dev_disconnect ) ( s#snd_device * ) ; } 
snd_device_new int snd_device_new ( s#snd_card * , t#snd_device_type_t , void * , s#snd_device_ops * ) 
snd_device_free int snd_device_free ( s#snd_card * , void * ) 
snd_device_register int snd_device_register ( s#snd_card * , void * ) 

/* sound/core/hwdep.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s#snd_hwdep_dsp_status struct snd_hwdep_dsp_status { unsigned int version ; unsigned char id [ 32 ] ; unsigned int num_dsps ; unsigned int dsp_loaded ; unsigned int chip_ready ; unsigned char reserved [ 16 ] ; } 
s#snd_hwdep_dsp_image struct snd_hwdep_dsp_image { unsigned int index ; unsigned char name [ 64 ] ; unsigned char * image ; t#size_t length ; unsigned long driver_data ; } 
s#snd_hwdep_ops struct snd_hwdep_ops { long long ( * llseek ) ( s#snd_hwdep * , s#file * , long long , int ) ; long ( * read ) ( s#snd_hwdep * , char * , long , t#loff_t * ) ; long ( * write ) ( s#snd_hwdep * , const char * , long , t#loff_t * ) ; int ( * open ) ( s#snd_hwdep * , s#file * ) ; int ( * release ) ( s#snd_hwdep * , s#file * ) ; unsigned int ( * poll ) ( s#snd_hwdep * , s#file * , t#poll_table * ) ; int ( * ioctl ) ( s#snd_hwdep * , s#file * , unsigned int , unsigned long ) ; int ( * ioctl_compat ) ( s#snd_hwdep * , s#file * , unsigned int , unsigned long ) ; int ( * mmap ) ( s#snd_hwdep * , s#file * , s#vm_area_struct * ) ; int ( * dsp_status ) ( s#snd_hwdep * , s#snd_hwdep_dsp_status * ) ; int ( * dsp_load ) ( s#snd_hwdep * , s#snd_hwdep_dsp_image * ) ; } 
s#snd_hwdep struct snd_hwdep { s#snd_card * card ; s#list_head list ; int device ; char id [ 32 ] ; char name [ 80 ] ; int iface ; char oss_dev [ 32 ] ; int oss_type ; int ossreg ; s#snd_hwdep_ops ops ; t#wait_queue_head_t open_wait ; void * private_data ; void ( * private_free ) ( s#snd_hwdep * ) ; s#mutex open_mutex ; int used ; unsigned int dsp_loaded ; unsigned int exclusive : 1 ; } 
snd_hwdep_new extern int snd_hwdep_new ( s#snd_card * , char * , int , s#snd_hwdep * * ) 

/* sound/core/info.o */
snd_iprintf int snd_iprintf ( s#snd_info_buffer * , const char * , ... ) 
s##vfsmount
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##radix_tree_node
s##writeback_control
s##tvec_base
s##eventfd_ctx
s##backing_dev_info
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##nameidata
s##nlm_lockowner
s##nfs4_lock_state
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
snd_seq_root extern s#snd_info_entry * snd_seq_root 
snd_info_get_line int snd_info_get_line ( s#snd_info_buffer * , char * , int ) 
snd_info_get_str const char * snd_info_get_str ( char * , const char * , int ) 
snd_info_create_module_entry s#snd_info_entry * snd_info_create_module_entry ( s#module * , const char * , s#snd_info_entry * ) 
snd_info_create_card_entry s#snd_info_entry * snd_info_create_card_entry ( s#snd_card * , const char * , s#snd_info_entry * ) 
snd_card_proc_new int snd_card_proc_new ( s#snd_card * , const char * , s#snd_info_entry * * ) 
snd_info_free_entry void snd_info_free_entry ( s#snd_info_entry * ) 
snd_info_register int snd_info_register ( s#snd_info_entry * ) 

/* sound/core/info_oss.o */
snd_oss_info_register int snd_oss_info_register ( int , int , char * ) 

/* sound/core/init.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
snd_cards extern s#snd_card * snd_cards [ 32 ] 
snd_mixer_oss_notify_callback extern int ( * snd_mixer_oss_notify_callback ) ( s#snd_card * , int ) 
snd_card_create int snd_card_create ( int , const char * , s#module * , int , s#snd_card * * ) 
snd_card_disconnect int snd_card_disconnect ( s#snd_card * ) 
snd_card_free_when_closed int snd_card_free_when_closed ( s#snd_card * ) 
snd_card_free int snd_card_free ( s#snd_card * ) 
snd_card_set_id void snd_card_set_id ( s#snd_card * , const char * ) 
snd_card_register int snd_card_register ( s#snd_card * ) 
snd_component_add int snd_component_add ( s#snd_card * , const char * ) 
snd_card_file_add int snd_card_file_add ( s#snd_card * , s#file * ) 
snd_card_file_remove int snd_card_file_remove ( s#snd_card * , s#file * ) 
snd_power_wait int snd_power_wait ( s#snd_card * , unsigned int ) 

/* sound/core/isadma.o */
snd_dma_program void snd_dma_program ( unsigned long , unsigned long , unsigned int , unsigned short ) 
snd_dma_disable void snd_dma_disable ( unsigned long ) 
snd_dma_pointer unsigned int snd_dma_pointer ( unsigned long , unsigned int ) 

/* sound/core/jack.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_info_entry
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s#snd_jack struct snd_jack { s#input_dev * input_dev ; int registered ; int type ; const char * id ; char name [ 100 ] ; void * private_data ; void ( * private_free ) ( s#snd_jack * ) ; } 
snd_jack_new int snd_jack_new ( s#snd_card * , const char * , int , s#snd_jack * * ) 
snd_jack_set_parent void snd_jack_set_parent ( s#snd_jack * , s#device * ) 
snd_jack_report void snd_jack_report ( s#snd_jack * , int ) 

/* sound/core/memalloc.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##task_struct
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##vfsmount
s##kstatfs
s##kiocb
s##iovec
s##poll_table_struct
s##linux_binfmt
s##mmu_notifier_mm
s##anon_vma
s##mempolicy
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##cred
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##class_private
snd_dma_alloc_pages int snd_dma_alloc_pages ( int , s#device * , t#size_t , s#snd_dma_buffer * ) 
snd_dma_alloc_pages_fallback int snd_dma_alloc_pages_fallback ( int , s#device * , t#size_t , s#snd_dma_buffer * ) 
snd_dma_free_pages void snd_dma_free_pages ( s#snd_dma_buffer * ) 
snd_dma_get_reserved_buf t#size_t snd_dma_get_reserved_buf ( s#snd_dma_buffer * , unsigned int ) 
snd_dma_reserve_buf int snd_dma_reserve_buf ( s#snd_dma_buffer * , unsigned int ) 
snd_malloc_pages void * snd_malloc_pages ( t#size_t , t#gfp_t ) 
snd_free_pages void snd_free_pages ( void * , t#size_t ) 

/* sound/core/memory.o */
copy_to_user_fromio int copy_to_user_fromio ( void * , const volatile void * , t#size_t ) 
copy_from_user_toio int copy_from_user_toio ( volatile void * , const void * , t#size_t ) 

/* sound/core/misc.o */
release_and_free_resource void release_and_free_resource ( s#resource * ) 
__snd_printk void __snd_printk ( unsigned int , const char * , int , const char * , ... ) 
s#snd_pci_quirk struct snd_pci_quirk { unsigned short subvendor ; unsigned short subdevice ; unsigned short subdevice_mask ; int value ; } 
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##address_space
s##array_cache
s##kmem_list3
s##mempolicy
s##file
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
snd_pci_quirk_lookup const s#snd_pci_quirk * snd_pci_quirk_lookup ( s#pci_dev * , const s#snd_pci_quirk * ) 

/* sound/core/oss/mixer_oss.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#snd_mixer_oss_file struct snd_mixer_oss_file { s#snd_card * card ; s#snd_mixer_oss * mixer ; } 
s#snd_mixer_oss_slot struct snd_mixer_oss_slot { int number ; unsigned int stereo : 1 ; int ( * get_volume ) ( s#snd_mixer_oss_file * , s#snd_mixer_oss_slot * , int * , int * ) ; int ( * put_volume ) ( s#snd_mixer_oss_file * , s#snd_mixer_oss_slot * , int , int ) ; int ( * get_recsrc ) ( s#snd_mixer_oss_file * , s#snd_mixer_oss_slot * , int * ) ; int ( * put_recsrc ) ( s#snd_mixer_oss_file * , s#snd_mixer_oss_slot * , int ) ; unsigned long private_value ; void * private_data ; void ( * private_free ) ( s#snd_mixer_oss_slot * ) ; int volume [ 2 ] ; } 
s#snd_mixer_oss struct snd_mixer_oss { s#snd_card * card ; char id [ 16 ] ; char name [ 32 ] ; s#snd_mixer_oss_slot slots [ 32 ] ; unsigned int mask_recsrc ; int ( * get_recsrc ) ( s#snd_mixer_oss_file * , unsigned int * ) ; int ( * put_recsrc ) ( s#snd_mixer_oss_file * , unsigned int ) ; void * private_data_recsrc ; void ( * private_free_recsrc ) ( s#snd_mixer_oss * ) ; s#mutex reg_mutex ; s#snd_info_entry * proc_entry ; int oss_dev_alloc ; int oss_recsrc ; } 
snd_mixer_oss_ioctl_card int snd_mixer_oss_ioctl_card ( s#snd_card * , unsigned int , unsigned long ) 

/* sound/core/pcm.o */
snd_pcm_format_name const char * snd_pcm_format_name ( t#snd_pcm_format_t ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s##snd_pcm_plugin
s##snd_timer
snd_pcm_new_stream int snd_pcm_new_stream ( s#snd_pcm * , int , int ) 
snd_pcm_new int snd_pcm_new ( s#snd_card * , const char * , int , int , int , s#snd_pcm * * ) 
s#snd_pcm_notify struct snd_pcm_notify { int ( * n_register ) ( s#snd_pcm * ) ; int ( * n_disconnect ) ( s#snd_pcm * ) ; int ( * n_unregister ) ( s#snd_pcm * ) ; s#list_head list ; } 
snd_pcm_notify int snd_pcm_notify ( s#snd_pcm_notify * , int ) 

/* sound/core/pcm_lib.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s##snd_pcm_plugin
s#snd_timer_hardware struct snd_timer_hardware { unsigned int flags ; unsigned long resolution ; unsigned long resolution_min ; unsigned long resolution_max ; unsigned long ticks ; int ( * open ) ( s#snd_timer * ) ; int ( * close ) ( s#snd_timer * ) ; unsigned long ( * c_resolution ) ( s#snd_timer * ) ; int ( * start ) ( s#snd_timer * ) ; int ( * stop ) ( s#snd_timer * ) ; int ( * set_period ) ( s#snd_timer * , unsigned long , unsigned long ) ; int ( * precise_resolution ) ( s#snd_timer * , unsigned long * , unsigned long * ) ; } 
s#snd_timer struct snd_timer { int tmr_class ; s#snd_card * card ; s#module * module ; int tmr_device ; int tmr_subdevice ; char id [ 64 ] ; char name [ 80 ] ; unsigned int flags ; int running ; unsigned long sticks ; void * private_data ; void ( * private_free ) ( s#snd_timer * ) ; s#snd_timer_hardware hw ; t#spinlock_t lock ; s#list_head device_list ; s#list_head open_list_head ; s#list_head active_list_head ; s#list_head ack_list_head ; s#list_head sack_list_head ; s#tasklet_struct task_queue ; } 
snd_pcm_set_ops void snd_pcm_set_ops ( s#snd_pcm * , int , s#snd_pcm_ops * ) 
snd_pcm_set_sync void snd_pcm_set_sync ( s#snd_pcm_substream * ) 
snd_interval_refine int snd_interval_refine ( s#snd_interval * , const s#snd_interval * ) 
s#snd_ratnum struct snd_ratnum { unsigned int num ; unsigned int den_min , den_max , den_step ; } 
snd_interval_ratnum int snd_interval_ratnum ( s#snd_interval * , unsigned int , s#snd_ratnum * , unsigned int * , unsigned int * ) 
snd_interval_list int snd_interval_list ( s#snd_interval * , unsigned int , unsigned int * , unsigned int ) 
snd_pcm_hw_rule_add int snd_pcm_hw_rule_add ( s#snd_pcm_runtime * , unsigned int , int , t#snd_pcm_hw_rule_func_t , void * , int , ... ) 
t#snd_pcm_hw_param_t typedef int snd_pcm_hw_param_t 
snd_pcm_hw_constraint_integer int snd_pcm_hw_constraint_integer ( s#snd_pcm_runtime * , t#snd_pcm_hw_param_t ) 
snd_pcm_hw_constraint_minmax int snd_pcm_hw_constraint_minmax ( s#snd_pcm_runtime * , t#snd_pcm_hw_param_t , unsigned int , unsigned int ) 
s#snd_pcm_hw_constraint_list struct snd_pcm_hw_constraint_list { unsigned int count ; unsigned int * list ; unsigned int mask ; } 
snd_pcm_hw_constraint_list int snd_pcm_hw_constraint_list ( s#snd_pcm_runtime * , unsigned int , t#snd_pcm_hw_param_t , s#snd_pcm_hw_constraint_list * ) 
s#snd_pcm_hw_constraint_ratnums struct snd_pcm_hw_constraint_ratnums { int nrats ; s#snd_ratnum * rats ; } 
snd_pcm_hw_constraint_ratnums int snd_pcm_hw_constraint_ratnums ( s#snd_pcm_runtime * , unsigned int , t#snd_pcm_hw_param_t , s#snd_pcm_hw_constraint_ratnums * ) 
s#snd_ratden struct snd_ratden { unsigned int num_min , num_max , num_step ; unsigned int den ; } 
s#snd_pcm_hw_constraint_ratdens struct snd_pcm_hw_constraint_ratdens { int nrats ; s#snd_ratden * rats ; } 
snd_pcm_hw_constraint_ratdens int snd_pcm_hw_constraint_ratdens ( s#snd_pcm_runtime * , unsigned int , t#snd_pcm_hw_param_t , s#snd_pcm_hw_constraint_ratdens * ) 
snd_pcm_hw_constraint_msbits int snd_pcm_hw_constraint_msbits ( s#snd_pcm_runtime * , unsigned int , unsigned int , unsigned int ) 
snd_pcm_hw_constraint_step int snd_pcm_hw_constraint_step ( s#snd_pcm_runtime * , unsigned int , t#snd_pcm_hw_param_t , unsigned long ) 
snd_pcm_hw_constraint_pow2 int snd_pcm_hw_constraint_pow2 ( s#snd_pcm_runtime * , unsigned int , t#snd_pcm_hw_param_t ) 
_snd_pcm_hw_params_any void _snd_pcm_hw_params_any ( s#snd_pcm_hw_params * ) 
snd_pcm_hw_param_value int snd_pcm_hw_param_value ( const s#snd_pcm_hw_params * , t#snd_pcm_hw_param_t , int * ) 
_snd_pcm_hw_param_setempty void _snd_pcm_hw_param_setempty ( s#snd_pcm_hw_params * , t#snd_pcm_hw_param_t ) 
snd_pcm_hw_param_first int snd_pcm_hw_param_first ( s#snd_pcm_substream * , s#snd_pcm_hw_params * , t#snd_pcm_hw_param_t , int * ) 
snd_pcm_hw_param_last int snd_pcm_hw_param_last ( s#snd_pcm_substream * , s#snd_pcm_hw_params * , t#snd_pcm_hw_param_t , int * ) 
snd_pcm_lib_ioctl int snd_pcm_lib_ioctl ( s#snd_pcm_substream * , unsigned int , void * ) 
snd_pcm_period_elapsed void snd_pcm_period_elapsed ( s#snd_pcm_substream * ) 
snd_pcm_lib_write t#snd_pcm_sframes_t snd_pcm_lib_write ( s#snd_pcm_substream * , const void * , t#snd_pcm_uframes_t ) 
snd_pcm_lib_writev t#snd_pcm_sframes_t snd_pcm_lib_writev ( s#snd_pcm_substream * , void * * , t#snd_pcm_uframes_t ) 
snd_pcm_lib_read t#snd_pcm_sframes_t snd_pcm_lib_read ( s#snd_pcm_substream * , void * , t#snd_pcm_uframes_t ) 
snd_pcm_lib_readv t#snd_pcm_sframes_t snd_pcm_lib_readv ( s#snd_pcm_substream * , void * * , t#snd_pcm_uframes_t ) 

/* sound/core/pcm_memory.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s##snd_pcm_plugin
s##snd_timer
snd_pcm_lib_preallocate_free_for_all int snd_pcm_lib_preallocate_free_for_all ( s#snd_pcm * ) 
snd_pcm_lib_preallocate_pages int snd_pcm_lib_preallocate_pages ( s#snd_pcm_substream * , int , s#device * , t#size_t , t#size_t ) 
snd_pcm_lib_preallocate_pages_for_all int snd_pcm_lib_preallocate_pages_for_all ( s#snd_pcm * , int , void * , t#size_t , t#size_t ) 
snd_pcm_sgbuf_ops_page s#page * snd_pcm_sgbuf_ops_page ( s#snd_pcm_substream * , unsigned long ) 
snd_pcm_sgbuf_get_chunk_size unsigned int snd_pcm_sgbuf_get_chunk_size ( s#snd_pcm_substream * , unsigned int , unsigned int ) 
snd_pcm_lib_malloc_pages int snd_pcm_lib_malloc_pages ( s#snd_pcm_substream * , t#size_t ) 
snd_pcm_lib_free_pages int snd_pcm_lib_free_pages ( s#snd_pcm_substream * ) 

/* sound/core/pcm_misc.o */
snd_pcm_format_signed int snd_pcm_format_signed ( t#snd_pcm_format_t ) 
snd_pcm_format_unsigned int snd_pcm_format_unsigned ( t#snd_pcm_format_t ) 
snd_pcm_format_linear int snd_pcm_format_linear ( t#snd_pcm_format_t ) 
snd_pcm_format_little_endian int snd_pcm_format_little_endian ( t#snd_pcm_format_t ) 
snd_pcm_format_big_endian int snd_pcm_format_big_endian ( t#snd_pcm_format_t ) 
snd_pcm_format_width int snd_pcm_format_width ( t#snd_pcm_format_t ) 
snd_pcm_format_physical_width int snd_pcm_format_physical_width ( t#snd_pcm_format_t ) 
snd_pcm_format_size t#ssize_t snd_pcm_format_size ( t#snd_pcm_format_t , t#size_t ) 
snd_pcm_format_silence_64 const unsigned char * snd_pcm_format_silence_64 ( t#snd_pcm_format_t ) 
snd_pcm_format_set_silence int snd_pcm_format_set_silence ( t#snd_pcm_format_t , void * , unsigned int ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_info_entry
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s##snd_timer
s##snd_pcm_plugin
snd_pcm_limit_hw_rates int snd_pcm_limit_hw_rates ( s#snd_pcm_runtime * ) 
snd_pcm_rate_to_rate_bit unsigned int snd_pcm_rate_to_rate_bit ( unsigned int ) 

/* sound/core/pcm_native.o */
snd_pcm_link_rwlock extern t#rwlock_t snd_pcm_link_rwlock 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s##snd_pcm_plugin
snd_pcm_hw_refine int snd_pcm_hw_refine ( s#snd_pcm_substream * , s#snd_pcm_hw_params * ) 
snd_pcm_stop int snd_pcm_stop ( s#snd_pcm_substream * , int ) 
snd_pcm_suspend int snd_pcm_suspend ( s#snd_pcm_substream * ) 
snd_pcm_suspend_all int snd_pcm_suspend_all ( s#snd_pcm * ) 
snd_pcm_release_substream void snd_pcm_release_substream ( s#snd_pcm_substream * ) 
snd_pcm_open_substream int snd_pcm_open_substream ( s#snd_pcm * , int , s#file * , s#snd_pcm_substream * * ) 
snd_pcm_kernel_ioctl int snd_pcm_kernel_ioctl ( s#snd_pcm_substream * , unsigned int , void * ) 
snd_pcm_lib_mmap_iomem int snd_pcm_lib_mmap_iomem ( s#snd_pcm_substream * , s#vm_area_struct * ) 
snd_pcm_mmap_data int snd_pcm_mmap_data ( s#snd_pcm_substream * , s#file * , s#vm_area_struct * ) 

/* sound/core/rawmidi.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s##snd_seq_port_info
s#snd_rawmidi_global_ops struct snd_rawmidi_global_ops { int ( * dev_register ) ( s#snd_rawmidi * ) ; int ( * dev_unregister ) ( s#snd_rawmidi * ) ; void ( * get_port_info ) ( s#snd_rawmidi * , int , s#snd_seq_port_info * ) ; } 
s#snd_rawmidi_str struct snd_rawmidi_str { unsigned int substream_count ; unsigned int substream_opened ; s#list_head substreams ; } 
s#snd_seq_device struct snd_seq_device { s#snd_card * card ; int device ; char id [ 32 ] ; char name [ 80 ] ; int argsize ; void * driver_data ; int status ; void * private_data ; void ( * private_free ) ( s#snd_seq_device * ) ; s#list_head list ; } 
s#snd_rawmidi struct snd_rawmidi { s#snd_card * card ; s#list_head list ; unsigned int device ; unsigned int info_flags ; char id [ 64 ] ; char name [ 80 ] ; int ossreg ; s#snd_rawmidi_global_ops * ops ; s#snd_rawmidi_str streams [ 2 ] ; void * private_data ; void ( * private_free ) ( s#snd_rawmidi * ) ; s#mutex open_mutex ; t#wait_queue_head_t open_wait ; s#snd_info_entry * dev ; s#snd_info_entry * proc_entry ; s#snd_seq_device * seq_dev ; } 
s#snd_rawmidi_runtime struct snd_rawmidi_runtime { unsigned int drain : 1 , oss : 1 ; unsigned char * buffer ; t#size_t buffer_size ; t#size_t appl_ptr ; t#size_t hw_ptr ; t#size_t avail_min ; t#size_t avail ; t#size_t xruns ; t#spinlock_t lock ; t#wait_queue_head_t sleep ; void ( * event ) ( s#snd_rawmidi_substream * ) ; s#tasklet_struct tasklet ; void * private_data ; void ( * private_free ) ( s#snd_rawmidi_substream * ) ; } 
s#snd_rawmidi_ops struct snd_rawmidi_ops { int ( * open ) ( s#snd_rawmidi_substream * ) ; int ( * close ) ( s#snd_rawmidi_substream * ) ; void ( * trigger ) ( s#snd_rawmidi_substream * , int ) ; void ( * drain ) ( s#snd_rawmidi_substream * ) ; } 
s#snd_rawmidi_substream struct snd_rawmidi_substream { s#list_head list ; int stream ; int number ; unsigned int opened : 1 , append : 1 , active_sensing : 1 ; int use_count ; t#size_t bytes ; s#snd_rawmidi * rmidi ; s#snd_rawmidi_str * pstr ; char name [ 32 ] ; s#snd_rawmidi_runtime * runtime ; s#snd_rawmidi_ops * ops ; } 
s#snd_rawmidi_params struct snd_rawmidi_params { int stream ; t#size_t buffer_size ; t#size_t avail_min ; unsigned int no_active_sensing : 1 ; unsigned char reserved [ 16 ] ; } 
snd_rawmidi_output_params int snd_rawmidi_output_params ( s#snd_rawmidi_substream * , s#snd_rawmidi_params * ) 
snd_rawmidi_input_params int snd_rawmidi_input_params ( s#snd_rawmidi_substream * , s#snd_rawmidi_params * ) 
snd_rawmidi_drop_output int snd_rawmidi_drop_output ( s#snd_rawmidi_substream * ) 
snd_rawmidi_drain_output int snd_rawmidi_drain_output ( s#snd_rawmidi_substream * ) 
snd_rawmidi_drain_input int snd_rawmidi_drain_input ( s#snd_rawmidi_substream * ) 
snd_rawmidi_receive int snd_rawmidi_receive ( s#snd_rawmidi_substream * , const unsigned char * , int ) 
snd_rawmidi_transmit_empty int snd_rawmidi_transmit_empty ( s#snd_rawmidi_substream * ) 
snd_rawmidi_transmit_peek int snd_rawmidi_transmit_peek ( s#snd_rawmidi_substream * , unsigned char * , int ) 
snd_rawmidi_transmit_ack int snd_rawmidi_transmit_ack ( s#snd_rawmidi_substream * , int ) 
snd_rawmidi_transmit int snd_rawmidi_transmit ( s#snd_rawmidi_substream * , unsigned char * , int ) 
snd_rawmidi_new int snd_rawmidi_new ( s#snd_card * , char * , int , int , int , s#snd_rawmidi * * ) 
snd_rawmidi_set_ops void snd_rawmidi_set_ops ( s#snd_rawmidi * , int , s#snd_rawmidi_ops * ) 
s#snd_rawmidi_info struct snd_rawmidi_info { unsigned int device ; unsigned int subdevice ; int stream ; int card ; unsigned int flags ; unsigned char id [ 64 ] ; unsigned char name [ 80 ] ; unsigned char subname [ 32 ] ; unsigned int subdevices_count ; unsigned int subdevices_avail ; unsigned char reserved [ 64 ] ; } 
snd_rawmidi_info_select int snd_rawmidi_info_select ( s#snd_card * , s#snd_rawmidi_info * ) 
s#snd_rawmidi_file struct snd_rawmidi_file { s#snd_rawmidi * rmidi ; s#snd_rawmidi_substream * input ; s#snd_rawmidi_substream * output ; } 
snd_rawmidi_kernel_open int snd_rawmidi_kernel_open ( s#snd_card * , int , int , int , s#snd_rawmidi_file * ) 
snd_rawmidi_kernel_release int snd_rawmidi_kernel_release ( s#snd_rawmidi_file * ) 
snd_rawmidi_kernel_read long snd_rawmidi_kernel_read ( s#snd_rawmidi_substream * , unsigned char * , long ) 
snd_rawmidi_kernel_write long snd_rawmidi_kernel_write ( s#snd_rawmidi_substream * , const unsigned char * , long ) 

/* sound/core/seq/seq_clientmgr.o */
s#snd_seq_queue_tempo struct snd_seq_queue_tempo { int queue ; unsigned int tempo ; int ppq ; unsigned int skew_value ; unsigned int skew_base ; char reserved [ 24 ] ; } 
snd_seq_set_queue_tempo int snd_seq_set_queue_tempo ( int , s#snd_seq_queue_tempo * ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
snd_seq_create_kernel_client int snd_seq_create_kernel_client ( s#snd_card * , int , const char * , ... ) 
snd_seq_delete_kernel_client int snd_seq_delete_kernel_client ( int ) 
t#snd_seq_event_type_t typedef unsigned char snd_seq_event_type_t 
t#snd_seq_tick_time_t typedef unsigned int snd_seq_tick_time_t 
s#snd_seq_real_time struct snd_seq_real_time { unsigned int tv_sec ; unsigned int tv_nsec ; } 
u#snd_seq_timestamp union snd_seq_timestamp { t#snd_seq_tick_time_t tick ; s#snd_seq_real_time time ; } 
s#snd_seq_addr struct snd_seq_addr { unsigned char client ; unsigned char port ; } 
s#snd_seq_ev_note struct snd_seq_ev_note { unsigned char channel ; unsigned char note ; unsigned char velocity ; unsigned char off_velocity ; unsigned int duration ; } 
s#snd_seq_ev_ctrl struct snd_seq_ev_ctrl { unsigned char channel ; unsigned char unused1 , unused2 , unused3 ; unsigned int param ; signed int value ; } 
s#snd_seq_ev_raw8 struct snd_seq_ev_raw8 { unsigned char d [ 12 ] ; } 
s#snd_seq_ev_raw32 struct snd_seq_ev_raw32 { unsigned int d [ 3 ] ; } 
s#snd_seq_ev_ext struct snd_seq_ev_ext { unsigned int len ; void * ptr ; } 
s#snd_seq_queue_skew struct snd_seq_queue_skew { unsigned int value ; unsigned int base ; } 
s#snd_seq_ev_queue_control struct snd_seq_ev_queue_control { unsigned char queue ; unsigned char pad [ 3 ] ; union { signed int value ; u#snd_seq_timestamp time ; unsigned int position ; s#snd_seq_queue_skew skew ; unsigned int d32 [ 2 ] ; unsigned char d8 [ 8 ] ; } param ; } 
s#snd_seq_connect struct snd_seq_connect { s#snd_seq_addr sender ; s#snd_seq_addr dest ; } 
s#snd_seq_result struct snd_seq_result { int event ; int result ; } 
s#snd_seq_ev_quote struct snd_seq_ev_quote { s#snd_seq_addr origin ; unsigned short value ; s#snd_seq_event * event ; } 
s#snd_seq_event struct snd_seq_event { t#snd_seq_event_type_t type ; unsigned char flags ; char tag ; unsigned char queue ; u#snd_seq_timestamp time ; s#snd_seq_addr source ; s#snd_seq_addr dest ; union { s#snd_seq_ev_note note ; s#snd_seq_ev_ctrl control ; s#snd_seq_ev_raw8 raw8 ; s#snd_seq_ev_raw32 raw32 ; s#snd_seq_ev_ext ext ; s#snd_seq_ev_queue_control queue ; u#snd_seq_timestamp time ; s#snd_seq_addr addr ; s#snd_seq_connect connect ; s#snd_seq_result result ; s#snd_seq_ev_quote quote ; } data ; } 
snd_seq_kernel_client_enqueue int snd_seq_kernel_client_enqueue ( int , s#snd_seq_event * , int , int ) 
snd_seq_kernel_client_enqueue_blocking int snd_seq_kernel_client_enqueue_blocking ( int , s#snd_seq_event * , s#file * , int , int ) 
snd_seq_kernel_client_dispatch int snd_seq_kernel_client_dispatch ( int , s#snd_seq_event * , int , int ) 
snd_seq_kernel_client_ctl int snd_seq_kernel_client_ctl ( int , unsigned int , void * ) 
snd_seq_kernel_client_write_poll int snd_seq_kernel_client_write_poll ( int , s#file * , t#poll_table * ) 

/* sound/core/seq/seq_device.o */
snd_seq_device_load_drivers void snd_seq_device_load_drivers ( void ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
snd_seq_device_new int snd_seq_device_new ( s#snd_card * , int , char * , int , s#snd_seq_device * * ) 
s#snd_seq_dev_ops struct snd_seq_dev_ops { int ( * init_device ) ( s#snd_seq_device * ) ; int ( * free_device ) ( s#snd_seq_device * ) ; } 
snd_seq_device_register_driver int snd_seq_device_register_driver ( char * , s#snd_seq_dev_ops * , int ) 
snd_seq_device_unregister_driver int snd_seq_device_unregister_driver ( char * ) 
snd_seq_autoload_lock void snd_seq_autoload_lock ( void ) 
snd_seq_autoload_unlock void snd_seq_autoload_unlock ( void ) 

/* sound/core/seq/seq_lock.o */
t#snd_use_lock_t typedef t#atomic_t snd_use_lock_t 
snd_use_lock_sync_helper void snd_use_lock_sync_helper ( t#snd_use_lock_t * , const char * , int ) 

/* sound/core/seq/seq_memory.o */
t#snd_seq_dump_func_t typedef int ( * snd_seq_dump_func_t ) ( void * , void * , int ) 
snd_seq_dump_var_event int snd_seq_dump_var_event ( const s#snd_seq_event * , t#snd_seq_dump_func_t , void * ) 
snd_seq_expand_var_event int snd_seq_expand_var_event ( const s#snd_seq_event * , int , char * , int , int ) 

/* sound/core/seq/seq_midi_emul.o */
s#snd_midi_channel struct snd_midi_channel { void * private ; int number ; int client ; int port ; unsigned char midi_mode ; unsigned int drum_channel : 1 , param_type : 1 ; unsigned char midi_aftertouch ; unsigned char midi_pressure ; unsigned char midi_program ; short midi_pitchbend ; unsigned char control [ 128 ] ; unsigned char note [ 128 ] ; short gm_rpn_pitch_bend_range ; short gm_rpn_fine_tuning ; short gm_rpn_coarse_tuning ; } 
s#snd_midi_channel_set struct snd_midi_channel_set { void * private_data ; int client ; int port ; int max_channels ; s#snd_midi_channel * channels ; unsigned char midi_mode ; unsigned char gs_master_volume ; unsigned char gs_chorus_mode ; unsigned char gs_reverb_mode ; } 
s#snd_midi_op struct snd_midi_op { void ( * note_on ) ( void * , int , int , s#snd_midi_channel * ) ; void ( * note_off ) ( void * , int , int , s#snd_midi_channel * ) ; void ( * key_press ) ( void * , int , int , s#snd_midi_channel * ) ; void ( * note_terminate ) ( void * , int , s#snd_midi_channel * ) ; void ( * control ) ( void * , int , s#snd_midi_channel * ) ; void ( * nrpn ) ( void * , s#snd_midi_channel * , s#snd_midi_channel_set * ) ; void ( * sysex ) ( void * , unsigned char * , int , int , s#snd_midi_channel_set * ) ; } 
snd_midi_process_event void snd_midi_process_event ( s#snd_midi_op * , s#snd_seq_event * , s#snd_midi_channel_set * ) 
snd_midi_channel_set_clear void snd_midi_channel_set_clear ( s#snd_midi_channel_set * ) 
snd_midi_channel_alloc_set s#snd_midi_channel_set * snd_midi_channel_alloc_set ( int ) 
snd_midi_channel_free_set void snd_midi_channel_free_set ( s#snd_midi_channel_set * ) 

/* sound/core/seq/seq_midi_event.o */
s#snd_midi_event struct snd_midi_event { int qlen ; int read ; int type ; unsigned char lastcmd ; unsigned char nostat ; int bufsize ; unsigned char * buf ; t#spinlock_t lock ; } 
snd_midi_event_new int snd_midi_event_new ( int , s#snd_midi_event * * ) 
snd_midi_event_free void snd_midi_event_free ( s#snd_midi_event * ) 
snd_midi_event_reset_encode void snd_midi_event_reset_encode ( s#snd_midi_event * ) 
snd_midi_event_reset_decode void snd_midi_event_reset_decode ( s#snd_midi_event * ) 
snd_midi_event_no_status void snd_midi_event_no_status ( s#snd_midi_event * , int ) 
snd_midi_event_encode long snd_midi_event_encode ( s#snd_midi_event * , unsigned char * , long , s#snd_seq_event * ) 
snd_midi_event_encode_byte int snd_midi_event_encode_byte ( s#snd_midi_event * , int , s#snd_seq_event * ) 
snd_midi_event_decode long snd_midi_event_decode ( s#snd_midi_event * , unsigned char * , long , s#snd_seq_event * ) 

/* sound/core/seq/seq_ports.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#snd_seq_port_subscribe struct snd_seq_port_subscribe { s#snd_seq_addr sender ; s#snd_seq_addr dest ; unsigned int voices ; unsigned int flags ; unsigned char queue ; unsigned char pad [ 3 ] ; char reserved [ 64 ] ; } 
s#snd_seq_port_callback struct snd_seq_port_callback { s#module * owner ; void * private_data ; int ( * subscribe ) ( void * , s#snd_seq_port_subscribe * ) ; int ( * unsubscribe ) ( void * , s#snd_seq_port_subscribe * ) ; int ( * use ) ( void * , s#snd_seq_port_subscribe * ) ; int ( * unuse ) ( void * , s#snd_seq_port_subscribe * ) ; int ( * event_input ) ( s#snd_seq_event * , int , void * , int , int ) ; void ( * private_free ) ( void * ) ; unsigned int callback_all ; } 
snd_seq_event_port_attach int snd_seq_event_port_attach ( int , s#snd_seq_port_callback * , int , int , int , int , char * ) 
snd_seq_event_port_detach int snd_seq_event_port_detach ( int , int ) 

/* sound/core/seq/seq_virmidi.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s#snd_seq_port_info struct snd_seq_port_info { s#snd_seq_addr addr ; char name [ 64 ] ; unsigned int capability ; unsigned int type ; int midi_channels ; int midi_voices ; int synth_voices ; int read_use ; int write_use ; void * kernel ; unsigned int flags ; unsigned char time_queue ; char reserved [ 59 ] ; } 
snd_virmidi_new int snd_virmidi_new ( s#snd_card * , int , s#snd_rawmidi * * ) 

/* sound/core/sound.o */
snd_major extern int snd_major 
snd_ecards_limit extern int snd_ecards_limit 
snd_request_card void snd_request_card ( int ) 
snd_lookup_minor_data void * snd_lookup_minor_data ( unsigned int , int ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
snd_register_device_for_dev int snd_register_device_for_dev ( int , s#snd_card * , int , const s#file_operations * , void * , const char * , s#device * ) 
snd_unregister_device int snd_unregister_device ( int , s#snd_card * , int ) 
snd_add_device_sysfs_file int snd_add_device_sysfs_file ( int , s#snd_card * , int , s#device_attribute * ) 

/* sound/core/sound_oss.o */
snd_lookup_oss_minor_data void * snd_lookup_oss_minor_data ( unsigned int , int ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
snd_register_oss_device int snd_register_oss_device ( int , s#snd_card * , int , const s#file_operations * , void * , const char * ) 
snd_unregister_oss_device int snd_unregister_oss_device ( int , s#snd_card * , int ) 

/* sound/core/timer.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s#snd_timer_instance struct snd_timer_instance { s#snd_timer * timer ; char * owner ; unsigned int flags ; void * private_data ; void ( * private_free ) ( s#snd_timer_instance * ) ; void ( * callback ) ( s#snd_timer_instance * , unsigned long , unsigned long ) ; void ( * ccallback ) ( s#snd_timer_instance * , int , s#timespec * , unsigned long ) ; void * callback_data ; unsigned long ticks ; unsigned long cticks ; unsigned long pticks ; unsigned long resolution ; unsigned long lost ; int slave_class ; unsigned int slave_id ; s#list_head open_list ; s#list_head active_list ; s#list_head ack_list ; s#list_head slave_list_head ; s#list_head slave_active_head ; s#snd_timer_instance * master ; } 
s#snd_timer_id struct snd_timer_id { int dev_class ; int dev_sclass ; int card ; int device ; int subdevice ; } 
snd_timer_open int snd_timer_open ( s#snd_timer_instance * * , char * , s#snd_timer_id * , unsigned int ) 
snd_timer_close int snd_timer_close ( s#snd_timer_instance * ) 
snd_timer_resolution unsigned long snd_timer_resolution ( s#snd_timer_instance * ) 
snd_timer_start int snd_timer_start ( s#snd_timer_instance * , unsigned int ) 
snd_timer_stop int snd_timer_stop ( s#snd_timer_instance * ) 
snd_timer_continue int snd_timer_continue ( s#snd_timer_instance * ) 
snd_timer_pause int snd_timer_pause ( s#snd_timer_instance * ) 
snd_timer_new int snd_timer_new ( s#snd_card * , char * , s#snd_timer_id * , s#snd_timer * * ) 
snd_timer_notify void snd_timer_notify ( s#snd_timer * , int , s#timespec * ) 
snd_timer_global_new int snd_timer_global_new ( char * , int , s#snd_timer * * ) 
snd_timer_global_free int snd_timer_global_free ( s#snd_timer * ) 
snd_timer_global_register int snd_timer_global_register ( s#snd_timer * ) 
snd_timer_interrupt void snd_timer_interrupt ( s#snd_timer * , unsigned long ) 

/* sound/core/vmaster.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##snd_info_entry
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s##fasync_struct
_snd_ctl_add_slave int _snd_ctl_add_slave ( s#snd_kcontrol * , s#snd_kcontrol * , unsigned int ) 
snd_ctl_make_virtual_master s#snd_kcontrol * snd_ctl_make_virtual_master ( char * , const unsigned int * ) 

/* sound/drivers/mpu401/mpu401_uart.o */
snd_mpu401_uart_interrupt t#irqreturn_t snd_mpu401_uart_interrupt ( int , void * ) 
snd_mpu401_uart_interrupt_tx t#irqreturn_t snd_mpu401_uart_interrupt_tx ( int , void * ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##snd_info_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s##snd_seq_port_info
snd_mpu401_uart_new int snd_mpu401_uart_new ( s#snd_card * , int , unsigned short , unsigned long , unsigned int , int , int , s#snd_rawmidi * * ) 

/* sound/drivers/opl3/opl3_lib.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_info_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
snd_opl3_interrupt void snd_opl3_interrupt ( s#snd_hwdep * ) 
s#fm_operator struct fm_operator { unsigned char am_vib ; unsigned char ksl_level ; unsigned char attack_decay ; unsigned char sustain_release ; unsigned char wave_select ; } 
s#fm_instrument struct fm_instrument { s#fm_operator op [ 4 ] ; unsigned char feedback_connection [ 2 ] ; unsigned char echo_delay ; unsigned char echo_atten ; unsigned char chorus_spread ; unsigned char trnsps ; unsigned char fix_dur ; unsigned char modes ; unsigned char fix_key ; } 
s#fm_patch struct fm_patch { unsigned char prog ; unsigned char bank ; unsigned char type ; s#fm_instrument inst ; char name [ 24 ] ; s#fm_patch * next ; } 
s#snd_opl3_voice struct snd_opl3_voice { int state ; unsigned int time ; unsigned char note ; unsigned long note_off ; int note_off_check ; unsigned char keyon_reg ; s#snd_midi_channel * chan ; } 
s#snd_opl3 struct snd_opl3 { unsigned long l_port ; unsigned long r_port ; s#resource * res_l_port ; s#resource * res_r_port ; unsigned short hardware ; void ( * command ) ( s#snd_opl3 * , unsigned short , unsigned char ) ; unsigned short timer_enable ; int seq_dev_num ; s#snd_timer * timer1 ; s#snd_timer * timer2 ; t#spinlock_t timer_lock ; void * private_data ; void ( * private_free ) ( s#snd_opl3 * ) ; s#snd_hwdep * hwdep ; t#spinlock_t reg_lock ; s#snd_card * card ; unsigned char fm_mode ; unsigned char rhythm ; unsigned char max_voices ; int synth_mode ; int seq_client ; s#snd_seq_device * seq_dev ; s#snd_midi_channel_set * chset ; s#snd_seq_device * oss_seq_dev ; s#snd_midi_channel_set * oss_chset ; s#fm_patch * patch_table [ 32 ] ; s#snd_opl3_voice voices [ 18 ] ; int use_time ; unsigned short connection_reg ; unsigned char drum_reg ; t#spinlock_t voice_lock ; s#timer_list tlist ; int sys_timer_status ; t#spinlock_t sys_timer_lock ; } 
snd_opl3_new int snd_opl3_new ( s#snd_card * , unsigned short , s#snd_opl3 * * ) 
snd_opl3_init int snd_opl3_init ( s#snd_opl3 * ) 
snd_opl3_create int snd_opl3_create ( s#snd_card * , unsigned long , unsigned long , unsigned short , int , s#snd_opl3 * * ) 
snd_opl3_timer_new int snd_opl3_timer_new ( s#snd_opl3 * , int , int ) 
snd_opl3_hwdep_new int snd_opl3_hwdep_new ( s#snd_opl3 * , int , int , s#snd_hwdep * * ) 

/* sound/drivers/opl3/opl3_synth.o */
snd_opl3_regmap char snd_opl3_regmap [ 9 ] [ 4 ] 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_info_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
snd_opl3_load_patch int snd_opl3_load_patch ( s#snd_opl3 * , int , int , int , const char * , const unsigned char * , const unsigned char * ) 
snd_opl3_find_patch s#fm_patch * snd_opl3_find_patch ( s#snd_opl3 * , int , int , int ) 
snd_opl3_reset void snd_opl3_reset ( s#snd_opl3 * ) 

/* sound/drivers/vx/vx_core.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s##snd_pcm_plugin
s##snd_timer
s#snd_vx_hardware struct snd_vx_hardware { const char * name ; int type ; unsigned int num_codecs ; unsigned int num_ins ; unsigned int num_outs ; unsigned int output_level_max ; const unsigned int * output_level_db_scale ; } 
t#pcx_time_t typedef t#u64 pcx_time_t 
s#vx_pipe struct vx_pipe { int number ; unsigned int is_capture : 1 ; unsigned int data_mode : 1 ; unsigned int running : 1 ; unsigned int prepared : 1 ; int channels ; unsigned int differed_type ; t#pcx_time_t pcx_time ; s#snd_pcm_substream * substream ; int hbuf_size ; int buffer_bytes ; int period_bytes ; int hw_ptr ; int position ; int transferred ; int align ; t#u64 cur_count ; unsigned int references ; s#vx_pipe * monitoring_pipe ; s#tasklet_struct start_tq ; } 
s#snd_vx_ops struct snd_vx_ops { unsigned char ( * in8 ) ( s#vx_core * , int ) ; unsigned int ( * in32 ) ( s#vx_core * , int ) ; void ( * out8 ) ( s#vx_core * , int , unsigned char ) ; void ( * out32 ) ( s#vx_core * , int , unsigned int ) ; int ( * test_and_ack ) ( s#vx_core * ) ; void ( * validate_irq ) ( s#vx_core * , int ) ; void ( * write_codec ) ( s#vx_core * , int , unsigned int ) ; void ( * akm_write ) ( s#vx_core * , int , unsigned int ) ; void ( * reset_codec ) ( s#vx_core * ) ; void ( * change_audio_source ) ( s#vx_core * , int ) ; void ( * set_clock_source ) ( s#vx_core * , int ) ; int ( * load_dsp ) ( s#vx_core * , int , const s#firmware * ) ; void ( * reset_dsp ) ( s#vx_core * ) ; void ( * reset_board ) ( s#vx_core * , int ) ; int ( * add_controls ) ( s#vx_core * ) ; void ( * dma_write ) ( s#vx_core * , s#snd_pcm_runtime * , s#vx_pipe * , int ) ; void ( * dma_read ) ( s#vx_core * , s#snd_pcm_runtime * , s#vx_pipe * , int ) ; } 
s#vx_rmh struct vx_rmh { t#u16 LgCmd ; t#u16 LgStat ; t#u32 Cmd [ 0x10 ] ; t#u32 Stat [ 0x10 ] ; t#u16 DspStat ; } 
s#vx_ibl_info struct vx_ibl_info { int size ; int max_size ; int min_size ; int granularity ; } 
s#vx_core struct vx_core { s#snd_card * card ; s#snd_pcm * pcm [ 2 ] ; int type ; int irq ; s#snd_vx_hardware * hw ; s#snd_vx_ops * ops ; t#spinlock_t lock ; t#spinlock_t irq_lock ; s#tasklet_struct tq ; unsigned int chip_status ; unsigned int pcm_running ; s#device * dev ; s#snd_hwdep * hwdep ; s#vx_rmh irq_rmh ; unsigned int audio_info ; unsigned int audio_ins ; unsigned int audio_outs ; s#vx_pipe * * playback_pipes ; s#vx_pipe * * capture_pipes ; unsigned int audio_source ; unsigned int audio_source_target ; unsigned int clock_mode ; unsigned int clock_source ; unsigned int freq ; unsigned int freq_detected ; unsigned int uer_detected ; unsigned int uer_bits ; s#vx_ibl_info ibl ; int output_level [ 2 ] [ 2 ] ; int audio_gain [ 2 ] [ 4 ] ; unsigned char audio_active [ 4 ] ; int audio_monitor [ 4 ] ; unsigned char audio_monitor_active [ 4 ] ; s#mutex mixer_mutex ; const s#firmware * firmware [ 4 ] ; } 
snd_vx_check_reg_bit int snd_vx_check_reg_bit ( s#vx_core * , int , int , int , int ) 
snd_vx_load_boot_image int snd_vx_load_boot_image ( s#vx_core * , const s#firmware * ) 
snd_vx_irq_handler t#irqreturn_t snd_vx_irq_handler ( int , void * ) 
snd_vx_dsp_boot int snd_vx_dsp_boot ( s#vx_core * , const s#firmware * ) 
snd_vx_dsp_load int snd_vx_dsp_load ( s#vx_core * , const s#firmware * ) 
snd_vx_suspend int snd_vx_suspend ( s#vx_core * , t#pm_message_t ) 
snd_vx_resume int snd_vx_resume ( s#vx_core * ) 
snd_vx_create s#vx_core * snd_vx_create ( s#snd_card * , s#snd_vx_hardware * , s#snd_vx_ops * , int ) 

/* sound/drivers/vx/vx_hwdep.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_info_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s##snd_pcm_plugin
s##snd_timer
snd_vx_setup_firmware int snd_vx_setup_firmware ( s#vx_core * ) 
snd_vx_free_firmware void snd_vx_free_firmware ( s#vx_core * ) 

/* sound/i2c/cs8427.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_info_entry
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s#snd_i2c_bit_ops struct snd_i2c_bit_ops { void ( * start ) ( s#snd_i2c_bus * ) ; void ( * stop ) ( s#snd_i2c_bus * ) ; void ( * direction ) ( s#snd_i2c_bus * , int , int ) ; void ( * setlines ) ( s#snd_i2c_bus * , int , int ) ; int ( * getclock ) ( s#snd_i2c_bus * ) ; int ( * getdata ) ( s#snd_i2c_bus * , int ) ; } 
s#snd_i2c_ops struct snd_i2c_ops { int ( * sendbytes ) ( s#snd_i2c_device * , unsigned char * , int ) ; int ( * readbytes ) ( s#snd_i2c_device * , unsigned char * , int ) ; int ( * probeaddr ) ( s#snd_i2c_bus * , unsigned short ) ; } 
s#snd_i2c_bus struct snd_i2c_bus { s#snd_card * card ; char name [ 32 ] ; s#mutex lock_mutex ; s#snd_i2c_bus * master ; s#list_head buses ; s#list_head devices ; union { s#snd_i2c_bit_ops * bit ; void * ops ; } hw_ops ; s#snd_i2c_ops * ops ; unsigned long private_value ; void * private_data ; void ( * private_free ) ( s#snd_i2c_bus * ) ; } 
s#snd_i2c_device struct snd_i2c_device { s#list_head list ; s#snd_i2c_bus * bus ; char name [ 32 ] ; unsigned short flags ; unsigned short addr ; unsigned long private_value ; void * private_data ; void ( * private_free ) ( s#snd_i2c_device * ) ; } 
snd_cs8427_reg_write int snd_cs8427_reg_write ( s#snd_i2c_device * , unsigned char , unsigned char ) 
snd_cs8427_create int snd_cs8427_create ( s#snd_i2c_bus * , unsigned char , unsigned int , s#snd_i2c_device * * ) 
s##snd_pcm_plugin
s##snd_timer
snd_cs8427_iec958_build int snd_cs8427_iec958_build ( s#snd_i2c_device * , s#snd_pcm_substream * , s#snd_pcm_substream * ) 
snd_cs8427_iec958_active int snd_cs8427_iec958_active ( s#snd_i2c_device * , int ) 
snd_cs8427_iec958_pcm int snd_cs8427_iec958_pcm ( s#snd_i2c_device * , unsigned int ) 

/* sound/i2c/i2c.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##snd_info_entry
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
snd_i2c_bus_create int snd_i2c_bus_create ( s#snd_card * , const char * , s#snd_i2c_bus * , s#snd_i2c_bus * * ) 
snd_i2c_device_create int snd_i2c_device_create ( s#snd_i2c_bus * , const char * , unsigned char , s#snd_i2c_device * * ) 
snd_i2c_device_free int snd_i2c_device_free ( s#snd_i2c_device * ) 
snd_i2c_sendbytes int snd_i2c_sendbytes ( s#snd_i2c_device * , unsigned char * , int ) 
snd_i2c_readbytes int snd_i2c_readbytes ( s#snd_i2c_device * , unsigned char * , int ) 
snd_i2c_probeaddr int snd_i2c_probeaddr ( s#snd_i2c_bus * , unsigned short ) 

/* sound/i2c/other/ak4114.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
t#ak4114_read_t typedef unsigned char ( ak4114_read_t ) ( void * , unsigned char ) 
t#ak4114_write_t typedef void ( ak4114_write_t ) ( void * , unsigned char , unsigned char ) 
s##snd_pcm_plugin
s##snd_timer
s#ak4114 struct ak4114 { s#snd_card * card ; t#ak4114_write_t * write ; t#ak4114_read_t * read ; void * private_data ; unsigned int init : 1 ; t#spinlock_t lock ; unsigned char regmap [ 7 ] ; unsigned char txcsb [ 5 ] ; s#snd_kcontrol * kctls [ 15 ] ; s#snd_pcm_substream * playback_substream ; s#snd_pcm_substream * capture_substream ; unsigned long parity_errors ; unsigned long v_bit_errors ; unsigned long qcrc_errors ; unsigned long ccrc_errors ; unsigned char rcs0 ; unsigned char rcs1 ; s#delayed_work work ; unsigned int check_flags ; void * change_callback_private ; void ( * change_callback ) ( s#ak4114 * , unsigned char , unsigned char ) ; } 
snd_ak4114_create int snd_ak4114_create ( s#snd_card * , t#ak4114_read_t * , t#ak4114_write_t * , const unsigned char [ 7 ] , const unsigned char [ 5 ] , void * , s#ak4114 * * ) 
snd_ak4114_reg_write void snd_ak4114_reg_write ( s#ak4114 * , unsigned char , unsigned char , unsigned char ) 
snd_ak4114_reinit void snd_ak4114_reinit ( s#ak4114 * ) 
snd_ak4114_build int snd_ak4114_build ( s#ak4114 * , s#snd_pcm_substream * , s#snd_pcm_substream * ) 
snd_ak4114_external_rate int snd_ak4114_external_rate ( s#ak4114 * ) 
snd_ak4114_check_rate_and_errors int snd_ak4114_check_rate_and_errors ( s#ak4114 * , unsigned int ) 

/* sound/i2c/other/ak4117.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_info_entry
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
t#ak4117_read_t typedef unsigned char ( ak4117_read_t ) ( void * , unsigned char ) 
t#ak4117_write_t typedef void ( ak4117_write_t ) ( void * , unsigned char , unsigned char ) 
s##snd_pcm_plugin
s##snd_timer
s#ak4117 struct ak4117 { s#snd_card * card ; t#ak4117_write_t * write ; t#ak4117_read_t * read ; void * private_data ; unsigned int init : 1 ; t#spinlock_t lock ; unsigned char regmap [ 5 ] ; s#snd_kcontrol * kctls [ 13 ] ; s#snd_pcm_substream * substream ; unsigned long parity_errors ; unsigned long v_bit_errors ; unsigned long qcrc_errors ; unsigned long ccrc_errors ; unsigned char rcs0 ; unsigned char rcs1 ; unsigned char rcs2 ; s#timer_list timer ; void * change_callback_private ; void ( * change_callback ) ( s#ak4117 * , unsigned char , unsigned char ) ; } 
snd_ak4117_create int snd_ak4117_create ( s#snd_card * , t#ak4117_read_t * , t#ak4117_write_t * , const unsigned char [ 5 ] , void * , s#ak4117 * * ) 
snd_ak4117_reg_write void snd_ak4117_reg_write ( s#ak4117 * , unsigned char , unsigned char , unsigned char ) 
snd_ak4117_reinit void snd_ak4117_reinit ( s#ak4117 * ) 
snd_ak4117_build int snd_ak4117_build ( s#ak4117 * , s#snd_pcm_substream * ) 
snd_ak4117_external_rate int snd_ak4117_external_rate ( s#ak4117 * ) 
snd_ak4117_check_rate_and_errors int snd_ak4117_check_rate_and_errors ( s#ak4117 * , unsigned int ) 

/* sound/i2c/other/ak4xxx-adda.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##snd_info_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s#snd_akm4xxx_dac_channel struct snd_akm4xxx_dac_channel { char * name ; unsigned int num_channels ; char * switch_name ; } 
s#snd_akm4xxx_adc_channel struct snd_akm4xxx_adc_channel { char * name ; char * switch_name ; unsigned int num_channels ; char * selector_name ; const char * * input_names ; } 
s#snd_ak4xxx_ops struct snd_ak4xxx_ops { void ( * lock ) ( s#snd_akm4xxx * , int ) ; void ( * unlock ) ( s#snd_akm4xxx * , int ) ; void ( * write ) ( s#snd_akm4xxx * , int , unsigned char , unsigned char ) ; void ( * set_rate_val ) ( s#snd_akm4xxx * , unsigned int ) ; } 
s#snd_akm4xxx struct snd_akm4xxx { s#snd_card * card ; unsigned int num_adcs ; unsigned int num_dacs ; unsigned char images [ ( 4 * 16 ) ] ; unsigned char volumes [ ( 4 * 16 ) ] ; unsigned long private_value [ 4 ] ; void * private_data [ 4 ] ; unsigned int idx_offset ; enum { SND_AK4524 , SND_AK4528 , SND_AK4529 , SND_AK4355 , SND_AK4358 , SND_AK4381 , SND_AK5365 } type ; const s#snd_akm4xxx_dac_channel * dac_info ; const s#snd_akm4xxx_adc_channel * adc_info ; s#snd_ak4xxx_ops ops ; } 
snd_akm4xxx_write void snd_akm4xxx_write ( s#snd_akm4xxx * , int , unsigned char , unsigned char ) 
snd_akm4xxx_reset void snd_akm4xxx_reset ( s#snd_akm4xxx * , int ) 
snd_akm4xxx_init void snd_akm4xxx_init ( s#snd_akm4xxx * ) 
snd_akm4xxx_build_controls int snd_akm4xxx_build_controls ( s#snd_akm4xxx * ) 

/* sound/i2c/other/pt2258.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##snd_info_entry
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s#snd_pt2258 struct snd_pt2258 { s#snd_card * card ; s#snd_i2c_bus * i2c_bus ; s#snd_i2c_device * i2c_dev ; unsigned char volume [ 6 ] ; int mute ; } 
snd_pt2258_reset extern int snd_pt2258_reset ( s#snd_pt2258 * ) 
snd_pt2258_build_controls extern int snd_pt2258_build_controls ( s#snd_pt2258 * ) 

/* sound/i2c/other/tea575x-tuner.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_info_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s##v4l2_device
s#snd_tea575x_ops struct snd_tea575x_ops { void ( * write ) ( s#snd_tea575x * , unsigned int ) ; unsigned int ( * read ) ( s#snd_tea575x * ) ; void ( * mute ) ( s#snd_tea575x * , unsigned int ) ; } 
s#snd_tea575x struct snd_tea575x { s#snd_card * card ; s#video_device * vd ; int dev_nr ; int tea5759 ; int mute ; unsigned int freq_fixup ; unsigned int val ; unsigned long freq ; unsigned long in_use ; s#snd_tea575x_ops * ops ; void * private_data ; } 
snd_tea575x_init void snd_tea575x_init ( s#snd_tea575x * ) 
snd_tea575x_exit void snd_tea575x_exit ( s#snd_tea575x * ) 

/* sound/isa/sb/sb16_main.o */
e#sb_hw_type enum sb_hw_type { SB_HW_AUTO , SB_HW_10 , SB_HW_20 , SB_HW_201 , SB_HW_PRO , SB_HW_16 , SB_HW_16CSP , SB_HW_ALS100 , SB_HW_ALS4000 , SB_HW_DT019X , SB_HW_CS5530 , } 
s##pci_dev
s##tvec_base
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s##snd_pcm_plugin
s##snd_timer
s##snd_seq_port_info
s#snd_sb struct snd_sb { unsigned long port ; s#resource * res_port ; unsigned long mpu_port ; int irq ; int dma8 ; int dma16 ; unsigned short version ; e#sb_hw_type hardware ; unsigned long alt_port ; s#pci_dev * pci ; unsigned int open ; unsigned int mode ; unsigned int force_mode16 ; unsigned int locked_rate ; unsigned int playback_format ; unsigned int capture_format ; s#timer_list midi_timer ; unsigned int p_dma_size ; unsigned int p_period_size ; unsigned int c_dma_size ; unsigned int c_period_size ; t#spinlock_t mixer_lock ; char name [ 32 ] ; void * csp ; s#snd_card * card ; s#snd_pcm * pcm ; s#snd_pcm_substream * playback_substream ; s#snd_pcm_substream * capture_substream ; s#snd_rawmidi * rmidi ; s#snd_rawmidi_substream * midi_substream_input ; s#snd_rawmidi_substream * midi_substream_output ; t#irq_handler_t rmidi_callback ; t#spinlock_t reg_lock ; t#spinlock_t open_lock ; t#spinlock_t midi_input_lock ; s#snd_info_entry * proc_entry ; unsigned char saved_regs [ 0x20 ] ; } 
snd_sb16dsp_pcm int snd_sb16dsp_pcm ( s#snd_sb * , int , s#snd_pcm * * ) 
snd_sb16dsp_get_pcm_ops const s#snd_pcm_ops * snd_sb16dsp_get_pcm_ops ( int ) 
snd_sb16dsp_configure int snd_sb16dsp_configure ( s#snd_sb * ) 
snd_sb16dsp_interrupt t#irqreturn_t snd_sb16dsp_interrupt ( int , void * ) 

/* sound/isa/sb/sb_common.o */
s##pci_dev
s##tvec_base
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_info_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s##snd_pcm_plugin
s##snd_timer
s##snd_seq_port_info
snd_sbdsp_command int snd_sbdsp_command ( s#snd_sb * , unsigned char ) 
snd_sbdsp_get_byte int snd_sbdsp_get_byte ( s#snd_sb * ) 
snd_sbdsp_reset int snd_sbdsp_reset ( s#snd_sb * ) 
snd_sbdsp_create int snd_sbdsp_create ( s#snd_card * , unsigned long , int , t#irq_handler_t , int , int , unsigned short , s#snd_sb * * ) 
snd_sbmixer_write void snd_sbmixer_write ( s#snd_sb * , unsigned char , unsigned char ) 
snd_sbmixer_read unsigned char snd_sbmixer_read ( s#snd_sb * , unsigned char ) 
snd_sbmixer_new int snd_sbmixer_new ( s#snd_sb * ) 
snd_sbmixer_add_ctl int snd_sbmixer_add_ctl ( s#snd_sb * , const char * , int , int , unsigned long ) 
snd_sbmixer_suspend void snd_sbmixer_suspend ( s#snd_sb * ) 
snd_sbmixer_resume void snd_sbmixer_resume ( s#snd_sb * ) 

/* sound/oss/ad1848.o */
ad1848_detect int ad1848_detect ( s#resource * , int * , int * ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
ad1848_init int ad1848_init ( char * , s#resource * , int , int , int , int , int * , s#module * ) 
ad1848_unload void ad1848_unload ( int , int , int , int , int ) 
ad1848_control int ad1848_control ( int , int ) 
s#address_info struct address_info { int io_base ; int irq ; int dma ; int dma2 ; int always_detect ; char * name ; int driver_use_1 ; int driver_use_2 ; int * osp ; int card_subtype ; void * memptr ; int slots [ 6 ] ; } 
probe_ms_sound int probe_ms_sound ( s#address_info * , s#resource * ) 
attach_ms_sound void attach_ms_sound ( s#address_info * , s#resource * , s#module * ) 
unload_ms_sound void unload_ms_sound ( s#address_info * ) 

/* sound/oss/dev_table.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s#audio_driver struct audio_driver { s#module * owner ; int ( * open ) ( int , int ) ; void ( * close ) ( int ) ; void ( * output_block ) ( int , unsigned long , int , int ) ; void ( * start_input ) ( int , unsigned long , int , int ) ; int ( * ioctl ) ( int , unsigned int , void * ) ; int ( * prepare_for_input ) ( int , int , int ) ; int ( * prepare_for_output ) ( int , int , int ) ; void ( * halt_io ) ( int ) ; int ( * local_qlen ) ( int ) ; void ( * copy_user ) ( int , char * , int , const char * , int , int , int , int * , int * , int ) ; void ( * halt_input ) ( int ) ; void ( * halt_output ) ( int ) ; void ( * trigger ) ( int , int ) ; int ( * set_speed ) ( int , int ) ; unsigned int ( * set_bits ) ( int , unsigned int ) ; short ( * set_channels ) ( int , short ) ; void ( * postprocess_write ) ( int ) ; void ( * preprocess_read ) ( int ) ; void ( * mmap ) ( int ) ; } 
s#dma_buffparms struct dma_buffparms { int dma_mode ; int closing ; char * raw_buf ; unsigned long raw_buf_phys ; int buffsize ; unsigned long flags ; int open_mode ; int qlen ; int qhead ; int qtail ; t#spinlock_t lock ; int cfrag ; int nbufs ; int counts [ ( 32 * 4 ) ] ; int subdivision ; int fragment_size ; int needs_reorg ; int max_fragments ; int bytes_in_use ; int underrun_count ; unsigned long byte_counter ; unsigned long user_counter ; unsigned long max_byte_counter ; int data_rate ; int mapping_flags ; char neutral_byte ; int dma ; int applic_profile ; void ( * audio_callback ) ( int , int ) ; int callback_parm ; int buf_flags [ ( 32 * 4 ) ] ; } 
s#coproc_operations struct coproc_operations { char name [ 64 ] ; s#module * owner ; int ( * open ) ( void * , int ) ; void ( * close ) ( void * , int ) ; int ( * ioctl ) ( void * , unsigned int , void * , int ) ; void ( * reset ) ( void * ) ; void * devc ; } 
s#audio_operations struct audio_operations { char name [ 128 ] ; int flags ; int format_mask ; void * devc ; s#audio_driver * d ; void * portc ; s#dma_buffparms * dmap_in , * dmap_out ; s#coproc_operations * coproc ; int mixer_dev ; int enable_bits ; int open_mode ; int go ; int min_fragment ; int max_fragment ; int parent_dev ; t#wait_queue_head_t in_sleeper ; t#wait_queue_head_t out_sleeper ; t#wait_queue_head_t poll_sleeper ; int audio_mode ; int local_format ; int audio_format ; int local_conversion ; s#dma_buffparms dmaps [ 2 ] ; } 
audio_devs extern s#audio_operations * audio_devs [ 5 ] 
num_audiodevs extern int num_audiodevs 
s#mixer_operations struct mixer_operations { s#module * owner ; char id [ 16 ] ; char name [ 64 ] ; int ( * ioctl ) ( int , unsigned int , void * ) ; void * devc ; int modify_counter ; } 
mixer_devs extern s#mixer_operations * mixer_devs [ 5 ] 
num_mixers extern int num_mixers 
s#synth_info struct synth_info { char name [ 30 ] ; int device ; int synth_type ; int synth_subtype ; int perc_mode ; int nr_voices ; int nr_drums ; int instr_bank_size ; unsigned int capabilities ; int dummies [ 19 ] ; } 
s#voice_alloc_info struct voice_alloc_info { int max_voice ; int used_voices ; int ptr ; unsigned short map [ 32 ] ; int timestamp ; int alloc_times [ 32 ] ; } 
s#channel_info struct channel_info { int pgm_num ; int bender_value ; int bender_range ; unsigned char controllers [ 128 ] ; } 
s#synth_operations struct synth_operations { s#module * owner ; char * id ; s#synth_info * info ; int midi_dev ; int synth_type ; int synth_subtype ; int ( * open ) ( int , int ) ; void ( * close ) ( int ) ; int ( * ioctl ) ( int , unsigned int , void * ) ; int ( * kill_note ) ( int , int , int , int ) ; int ( * start_note ) ( int , int , int , int ) ; int ( * set_instr ) ( int , int , int ) ; void ( * reset ) ( int ) ; void ( * hw_control ) ( int , unsigned char * ) ; int ( * load_patch ) ( int , int , const char * , int , int , int ) ; void ( * aftertouch ) ( int , int , int ) ; void ( * controller ) ( int , int , int , int ) ; void ( * panning ) ( int , int , int ) ; void ( * volume_method ) ( int , int ) ; void ( * bender ) ( int , int , int ) ; int ( * alloc_voice ) ( int , int , int , s#voice_alloc_info * ) ; void ( * setup_voice ) ( int , int , int ) ; int ( * send_sysex ) ( int , unsigned char * , int ) ; s#voice_alloc_info alloc ; s#channel_info chn_info [ 16 ] ; int emulation ; unsigned char sysex_buf [ 64 ] ; int sysex_ptr ; } 
synth_devs extern s#synth_operations * synth_devs [ 5 + 6 ] 
s#midi_info struct midi_info { char name [ 30 ] ; int device ; unsigned int capabilities ; int dev_type ; int dummies [ 18 ] ; } 
s#midi_input_info struct midi_input_info { volatile int m_busy ; unsigned char m_buf [ 10 ] ; unsigned char m_prev_status ; int m_ptr ; int m_state ; int m_left ; } 
s#midi_operations struct midi_operations { s#module * owner ; s#midi_info info ; s#synth_operations * converter ; s#midi_input_info in_info ; int ( * open ) ( int , int , void ( * ) ( int , unsigned char ) , void ( * ) ( int ) ) ; void ( * close ) ( int ) ; int ( * ioctl ) ( int , unsigned int , void * ) ; int ( * outputc ) ( int , unsigned char ) ; int ( * start_read ) ( int ) ; int ( * end_read ) ( int ) ; void ( * kick ) ( int ) ; int ( * command ) ( int , unsigned char * ) ; int ( * buffer_status ) ( int ) ; int ( * prefix_cmd ) ( int , unsigned char ) ; s#coproc_operations * coproc ; void * devc ; } 
midi_devs extern s#midi_operations * midi_devs [ 6 ] 
num_midis extern int num_midis 
s#sound_timer_info struct sound_timer_info { char name [ 32 ] ; int caps ; } 
s#sound_timer_operations struct sound_timer_operations { s#module * owner ; s#sound_timer_info info ; int priority ; int devlink ; int ( * open ) ( int , int ) ; void ( * close ) ( int ) ; int ( * event ) ( int , unsigned char * ) ; unsigned long ( * get_time ) ( int ) ; int ( * ioctl ) ( int , unsigned int , void * ) ; void ( * arm_timer ) ( int , long ) ; } 
sound_timer_devs extern s#sound_timer_operations * sound_timer_devs [ 4 ] 
sound_install_audiodrv int sound_install_audiodrv ( int , char * , s#audio_driver * , int , int , unsigned int , void * , int , int ) 
sound_install_mixer int sound_install_mixer ( int , char * , s#mixer_operations * , int , void * ) 
sound_unload_audiodev void sound_unload_audiodev ( int ) 
sound_alloc_mididev int sound_alloc_mididev ( void ) 
sound_alloc_synthdev int sound_alloc_synthdev ( void ) 
sound_alloc_mixerdev int sound_alloc_mixerdev ( void ) 
sound_alloc_timerdev int sound_alloc_timerdev ( void ) 
sound_unload_mixerdev void sound_unload_mixerdev ( int ) 
sound_unload_mididev void sound_unload_mididev ( int ) 
sound_unload_synthdev void sound_unload_synthdev ( int ) 
sound_unload_timerdev void sound_unload_timerdev ( int ) 

/* sound/oss/dmabuf.o */
DMAbuf_start_dma int DMAbuf_start_dma ( int , unsigned long , int , int ) 
DMAbuf_outputintr void DMAbuf_outputintr ( int , int ) 
DMAbuf_inputintr void DMAbuf_inputintr ( int ) 

/* sound/oss/midi_synth.o */
do_midi_msg void do_midi_msg ( int , unsigned char * , int ) 
midi_synth_ioctl int midi_synth_ioctl ( int , unsigned int , void * ) 
midi_synth_kill_note int midi_synth_kill_note ( int , int , int , int ) 
midi_synth_set_instr int midi_synth_set_instr ( int , int , int ) 
midi_synth_start_note int midi_synth_start_note ( int , int , int , int ) 
midi_synth_reset void midi_synth_reset ( int ) 
midi_synth_open int midi_synth_open ( int , int ) 
midi_synth_close void midi_synth_close ( int ) 
midi_synth_hw_control void midi_synth_hw_control ( int , unsigned char * ) 
midi_synth_load_patch int midi_synth_load_patch ( int , int , const char * , int , int , int ) 
midi_synth_panning void midi_synth_panning ( int , int , int ) 
midi_synth_aftertouch void midi_synth_aftertouch ( int , int , int ) 
midi_synth_controller void midi_synth_controller ( int , int , int , int ) 
midi_synth_bender void midi_synth_bender ( int , int , int ) 
midi_synth_setup_voice void midi_synth_setup_voice ( int , int , int ) 
midi_synth_send_sysex int midi_synth_send_sysex ( int , unsigned char * , int ) 

/* sound/oss/midibuf.o */
MIDIbuf_avail int MIDIbuf_avail ( int ) 

/* sound/oss/mpu401.o */
probe_mpu401 int probe_mpu401 ( s#address_info * , s#resource * ) 
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
attach_mpu401 int attach_mpu401 ( s#address_info * , s#module * ) 
unload_mpu401 void unload_mpu401 ( s#address_info * ) 

/* sound/oss/sb_common.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
sb_dsp_init int sb_dsp_init ( s#address_info * , s#module * ) 
s#sb_module_options struct sb_module_options { int esstype ; int acer ; int sm_games ; } 
sb_dsp_detect int sb_dsp_detect ( s#address_info * , int , int , s#sb_module_options * ) 
sb_dsp_unload void sb_dsp_unload ( s#address_info * , int ) 
sb_be_quiet int sb_be_quiet 
probe_sbmpu int probe_sbmpu ( s#address_info * , s#module * ) 
unload_sbmpu void unload_sbmpu ( s#address_info * ) 
smw_free void * smw_free 

/* sound/oss/sequencer.o */
seq_copy_to_input void seq_copy_to_input ( unsigned char * , int ) 
seq_input_event void seq_input_event ( unsigned char * , int ) 
sequencer_timer void sequencer_timer ( unsigned long ) 
note_to_freq int note_to_freq ( int ) 
compute_finetune unsigned long compute_finetune ( unsigned long , int , int , int ) 
sequencer_init void sequencer_init ( void ) 

/* sound/oss/sound_timer.o */
sound_timer_syncinterval void sound_timer_syncinterval ( unsigned int ) 
sound_timer_interrupt void sound_timer_interrupt ( void ) 
s#sound_lowlev_timer struct sound_lowlev_timer { int dev ; int priority ; unsigned int ( * tmr_start ) ( int , unsigned int ) ; void ( * tmr_disable ) ( int ) ; void ( * tmr_restart ) ( int ) ; } 
sound_timer_init void sound_timer_init ( s#sound_lowlev_timer * , char * ) 

/* sound/oss/soundcard.o */
load_mixer_volumes int * load_mixer_volumes ( char * , int * , int ) 
sound_alloc_dma extern int sound_alloc_dma ( int , char * ) 
sound_open_dma extern int sound_open_dma ( int , char * ) 
sound_free_dma extern void sound_free_dma ( int ) 
sound_close_dma extern void sound_close_dma ( int ) 
conf_printf void conf_printf ( char * , s#address_info * ) 
conf_printf2 void conf_printf2 ( char * , int , int , int , int ) 

/* sound/oss/uart401.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
probe_uart401 int probe_uart401 ( s#address_info * , s#module * ) 
unload_uart401 void unload_uart401 ( s#address_info * ) 
uart401intr t#irqreturn_t uart401intr ( int , void * ) 

/* sound/pci/ac97/ac97_codec.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##snd_mixer_oss
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
snd_ac97_write void snd_ac97_write ( s#snd_ac97 * , unsigned short , unsigned short ) 
snd_ac97_read unsigned short snd_ac97_read ( s#snd_ac97 * , unsigned short ) 
snd_ac97_write_cache void snd_ac97_write_cache ( s#snd_ac97 * , unsigned short , unsigned short ) 
snd_ac97_update int snd_ac97_update ( s#snd_ac97 * , unsigned short , unsigned short ) 
snd_ac97_update_bits int snd_ac97_update_bits ( s#snd_ac97 * , unsigned short , unsigned short , unsigned short ) 
snd_ac97_get_short_name const char * snd_ac97_get_short_name ( s#snd_ac97 * ) 
snd_ac97_bus int snd_ac97_bus ( s#snd_card * , int , s#snd_ac97_bus_ops * , void * , s#snd_ac97_bus * * ) 
s#snd_ac97_template struct snd_ac97_template { void * private_data ; void ( * private_free ) ( s#snd_ac97 * ) ; s#pci_dev * pci ; unsigned short num ; unsigned short addr ; unsigned int scaps ; const s#snd_ac97_res_table * res_table ; } 
snd_ac97_mixer int snd_ac97_mixer ( s#snd_ac97_bus * , s#snd_ac97_template * , s#snd_ac97 * * ) 
snd_ac97_update_power int snd_ac97_update_power ( s#snd_ac97 * , int , int ) 
snd_ac97_suspend void snd_ac97_suspend ( s#snd_ac97 * ) 
snd_ac97_resume void snd_ac97_resume ( s#snd_ac97 * ) 
s#ac97_quirk struct ac97_quirk { unsigned short subvendor ; unsigned short subdevice ; unsigned short mask ; unsigned int codec_id ; const char * name ; int type ; } 
snd_ac97_tune_hardware int snd_ac97_tune_hardware ( s#snd_ac97 * , s#ac97_quirk * , const char * ) 

/* sound/pci/ac97/ac97_pcm.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s##pci_dev
snd_ac97_set_rate int snd_ac97_set_rate ( s#snd_ac97 * , int , unsigned int ) 
snd_ac97_pcm_assign int snd_ac97_pcm_assign ( s#snd_ac97_bus * , unsigned short , const s#ac97_pcm * ) 
e#ac97_pcm_cfg enum ac97_pcm_cfg { AC97_PCM_CFG_FRONT = 2 , AC97_PCM_CFG_REAR = 10 , AC97_PCM_CFG_LFE = 11 , AC97_PCM_CFG_40 = 4 , AC97_PCM_CFG_51 = 6 , AC97_PCM_CFG_SPDIF = 20 } 
snd_ac97_pcm_open int snd_ac97_pcm_open ( s#ac97_pcm * , unsigned int , e#ac97_pcm_cfg , unsigned short ) 
snd_ac97_pcm_close int snd_ac97_pcm_close ( s#ac97_pcm * ) 
s##snd_timer
s##snd_pcm_plugin
snd_ac97_pcm_double_rate_rules int snd_ac97_pcm_double_rate_rules ( s#snd_pcm_runtime * ) 

/* sound/pci/emu10k1/io.o */
s#snd_emu_chip_details struct snd_emu_chip_details { t#u32 vendor ; t#u32 device ; t#u32 subsystem ; unsigned char revision ; unsigned char emu10k1_chip ; unsigned char emu10k2_chip ; unsigned char ca0102_chip ; unsigned char ca0108_chip ; unsigned char ca_cardbus_chip ; unsigned char ca0151_chip ; unsigned char spk71 ; unsigned char sblive51 ; unsigned char spdif_bug ; unsigned char ac97_chip ; unsigned char ecard ; unsigned char emu_model ; unsigned char spi_dac ; unsigned char i2c_adc ; unsigned char adc_1361t ; unsigned char invert_shared_spdif ; const char * driver ; const char * name ; const char * id ; } 
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s#snd_util_memhdr struct snd_util_memhdr { unsigned int size ; s#list_head block ; int nblocks ; unsigned int used ; int block_extra_size ; s#mutex block_mutex ; } 
s#snd_util_memblk struct snd_util_memblk { unsigned int size ; unsigned int offset ; s#list_head list ; } 
s#snd_emu10k1_memblk struct snd_emu10k1_memblk { s#snd_util_memblk mem ; int first_page , last_page , pages , mapped_page ; unsigned int map_locked ; s#list_head mapped_link ; s#list_head mapped_order_link ; } 
s#snd_pcm_indirect struct snd_pcm_indirect { unsigned int hw_buffer_size ; unsigned int hw_queue_size ; unsigned int hw_data ; unsigned int hw_io ; int hw_ready ; unsigned int sw_buffer_size ; unsigned int sw_data ; unsigned int sw_io ; int sw_ready ; t#snd_pcm_uframes_t appl_ptr ; } 
t#snd_fx8010_irq_handler_t typedef void ( snd_fx8010_irq_handler_t ) ( s#snd_emu10k1 * , void * ) 
s#snd_emu10k1_fx8010_irq struct snd_emu10k1_fx8010_irq { s#snd_emu10k1_fx8010_irq * next ; t#snd_fx8010_irq_handler_t * handler ; unsigned short gpr_running ; void * private_data ; } 
s#snd_emu10k1_fx8010_pcm struct snd_emu10k1_fx8010_pcm { unsigned int valid : 1 , opened : 1 , active : 1 ; unsigned int channels ; unsigned int tram_start ; unsigned int buffer_size ; unsigned short gpr_size ; unsigned short gpr_ptr ; unsigned short gpr_count ; unsigned short gpr_tmpcount ; unsigned short gpr_trigger ; unsigned short gpr_running ; unsigned char etram [ 32 ] ; s#snd_pcm_indirect pcm_rec ; unsigned int tram_pos ; unsigned int tram_shift ; s#snd_emu10k1_fx8010_irq * irq ; } 
s#snd_emu10k1_fx8010 struct snd_emu10k1_fx8010 { unsigned short fxbus_mask ; unsigned short extin_mask ; unsigned short extout_mask ; unsigned short pad1 ; unsigned int itram_size ; s#snd_dma_buffer etram_pages ; unsigned int dbg ; unsigned char name [ 128 ] ; int gpr_size ; int gpr_count ; s#list_head gpr_ctl ; s#mutex lock ; s#snd_emu10k1_fx8010_pcm pcm [ 8 ] ; t#spinlock_t irq_lock ; s#snd_emu10k1_fx8010_irq * irq_handlers ; } 
s##snd_shutdown_f_ops
s##snd_mixer_oss
s##pci_dev
s##snd_pcm_plugin
s#snd_emu10k1_pcm struct snd_emu10k1_pcm { s#snd_emu10k1 * emu ; int type ; s#snd_pcm_substream * substream ; s#snd_emu10k1_voice * voices [ 16 ] ; s#snd_emu10k1_voice * extra ; unsigned short running ; unsigned short first_ptr ; s#snd_util_memblk * memblk ; unsigned int start_addr ; unsigned int ccca_start_addr ; unsigned int capture_ipr ; unsigned int capture_inte ; unsigned int capture_ba_reg ; unsigned int capture_bs_reg ; unsigned int capture_idx_reg ; unsigned int capture_cr_val ; unsigned int capture_cr_val2 ; unsigned int capture_bs_val ; unsigned int capture_bufsize ; } 
s#snd_emu10k1_voice struct snd_emu10k1_voice { s#snd_emu10k1 * emu ; int number ; unsigned int use : 1 , pcm : 1 , efx : 1 , synth : 1 , midi : 1 ; void ( * interrupt ) ( s#snd_emu10k1 * , s#snd_emu10k1_voice * ) ; s#snd_emu10k1_pcm * epcm ; } 
s#snd_emu1010 struct snd_emu1010 { unsigned int output_source [ 64 ] ; unsigned int input_source [ 64 ] ; unsigned int adc_pads ; unsigned int dac_pads ; unsigned int internal_clock ; unsigned int optical_in ; unsigned int optical_out ; s#task_struct * firmware_thread ; } 
s#snd_emu10k1_pcm_mixer struct snd_emu10k1_pcm_mixer { unsigned char send_routing [ 3 ] [ 8 ] ; unsigned char send_volume [ 3 ] [ 8 ] ; unsigned short attn [ 3 ] ; s#snd_emu10k1_pcm * epcm ; } 
s##snd_seq_port_info
s#snd_emu10k1_midi struct snd_emu10k1_midi { s#snd_emu10k1 * emu ; s#snd_rawmidi * rmidi ; s#snd_rawmidi_substream * substream_input ; s#snd_rawmidi_substream * substream_output ; unsigned int midi_mode ; t#spinlock_t input_lock ; t#spinlock_t output_lock ; t#spinlock_t open_lock ; int tx_enable , rx_enable ; int port ; int ipr_tx , ipr_rx ; void ( * interrupt ) ( s#snd_emu10k1 * , unsigned int ) ; } 
s#snd_emu10k1 struct snd_emu10k1 { int irq ; unsigned long port ; unsigned int tos_link : 1 , rear_ac97 : 1 , enable_ir : 1 ; unsigned int support_tlv : 1 ; const s#snd_emu_chip_details * card_capabilities ; unsigned int audigy ; unsigned int revision ; unsigned int serial ; unsigned short model ; unsigned int card_type ; unsigned int ecard_ctrl ; unsigned long dma_mask ; int max_cache_pages ; s#snd_dma_buffer silent_page ; s#snd_dma_buffer ptb_pages ; s#snd_dma_device p16v_dma_dev ; s#snd_dma_buffer p16v_buffer ; s#snd_util_memhdr * memhdr ; s#snd_emu10k1_memblk * reserved_page ; s#list_head mapped_link_head ; s#list_head mapped_order_link_head ; void * * page_ptr_table ; unsigned long * page_addr_table ; t#spinlock_t memblk_lock ; unsigned int spdif_bits [ 3 ] ; unsigned int i2c_capture_source ; t#u8 i2c_capture_volume [ 4 ] [ 2 ] ; s#snd_emu10k1_fx8010 fx8010 ; int gpr_base ; s#snd_ac97 * ac97 ; s#pci_dev * pci ; s#snd_card * card ; s#snd_pcm * pcm ; s#snd_pcm * pcm_mic ; s#snd_pcm * pcm_efx ; s#snd_pcm * pcm_multi ; s#snd_pcm * pcm_p16v ; t#spinlock_t synth_lock ; void * synth ; int ( * get_synth_voice ) ( s#snd_emu10k1 * ) ; t#spinlock_t reg_lock ; t#spinlock_t emu_lock ; t#spinlock_t voice_lock ; t#spinlock_t spi_lock ; t#spinlock_t i2c_lock ; s#snd_emu10k1_voice voices [ 64 ] ; s#snd_emu10k1_voice p16v_voices [ 4 ] ; s#snd_emu10k1_voice p16v_capture_voice ; int p16v_device_offset ; t#u32 p16v_capture_source ; t#u32 p16v_capture_channel ; s#snd_emu1010 emu1010 ; s#snd_emu10k1_pcm_mixer pcm_mixer [ 32 ] ; s#snd_emu10k1_pcm_mixer efx_pcm_mixer [ 16 ] ; s#snd_kcontrol * ctl_send_routing ; s#snd_kcontrol * ctl_send_volume ; s#snd_kcontrol * ctl_attn ; s#snd_kcontrol * ctl_efx_send_routing ; s#snd_kcontrol * ctl_efx_send_volume ; s#snd_kcontrol * ctl_efx_attn ; void ( * hwvol_interrupt ) ( s#snd_emu10k1 * , unsigned int ) ; void ( * capture_interrupt ) ( s#snd_emu10k1 * , unsigned int ) ; void ( * capture_mic_interrupt ) ( s#snd_emu10k1 * , unsigned int ) ; void ( * capture_efx_interrupt ) ( s#snd_emu10k1 * , unsigned int ) ; void ( * spdif_interrupt ) ( s#snd_emu10k1 * , unsigned int ) ; void ( * dsp_interrupt ) ( s#snd_emu10k1 * ) ; s#snd_pcm_substream * pcm_capture_substream ; s#snd_pcm_substream * pcm_capture_mic_substream ; s#snd_pcm_substream * pcm_capture_efx_substream ; s#snd_pcm_substream * pcm_playback_efx_substream ; s#snd_timer * timer ; s#snd_emu10k1_midi midi ; s#snd_emu10k1_midi midi2 ; unsigned int efx_voices_mask [ 2 ] ; unsigned int next_free_voice ; unsigned int * saved_ptr ; unsigned int * saved_gpr ; unsigned int * tram_val_saved ; unsigned int * tram_addr_saved ; unsigned int * saved_icode ; unsigned int * p16v_saved ; unsigned int saved_a_iocfg , saved_hcfg ; } 
snd_emu10k1_ptr_read unsigned int snd_emu10k1_ptr_read ( s#snd_emu10k1 * , unsigned int , unsigned int ) 
snd_emu10k1_ptr_write void snd_emu10k1_ptr_write ( s#snd_emu10k1 * , unsigned int , unsigned int , unsigned int ) 

/* sound/pci/emu10k1/memory.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##snd_shutdown_f_ops
s##snd_mixer_oss
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##snd_pcm_plugin
s##snd_seq_port_info
snd_emu10k1_memblk_map int snd_emu10k1_memblk_map ( s#snd_emu10k1 * , s#snd_emu10k1_memblk * ) 
snd_emu10k1_synth_alloc s#snd_util_memblk * snd_emu10k1_synth_alloc ( s#snd_emu10k1 * , unsigned int ) 
snd_emu10k1_synth_free int snd_emu10k1_synth_free ( s#snd_emu10k1 * , s#snd_util_memblk * ) 
snd_emu10k1_synth_bzero int snd_emu10k1_synth_bzero ( s#snd_emu10k1 * , s#snd_util_memblk * , int , int ) 
snd_emu10k1_synth_copy_from_user int snd_emu10k1_synth_copy_from_user ( s#snd_emu10k1 * , s#snd_util_memblk * , int , const char * , int ) 

/* sound/pci/emu10k1/voice.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_shutdown_f_ops
s##snd_mixer_oss
s##pci_dev
s##snd_pcm_plugin
s##snd_seq_port_info
snd_emu10k1_voice_alloc int snd_emu10k1_voice_alloc ( s#snd_emu10k1 * , int , int , s#snd_emu10k1_voice * * ) 
snd_emu10k1_voice_free int snd_emu10k1_voice_free ( s#snd_emu10k1 * , s#snd_emu10k1_voice * ) 

/* sound/pci/hda/hda_beep.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##snd_mixer_oss
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
t#hda_nid_t typedef t#u16 hda_nid_t 
s##snd_pcm_plugin
s##snd_timer
s#hda_pcm_ops struct hda_pcm_ops { int ( * open ) ( s#hda_pcm_stream * , s#hda_codec * , s#snd_pcm_substream * ) ; int ( * close ) ( s#hda_pcm_stream * , s#hda_codec * , s#snd_pcm_substream * ) ; int ( * prepare ) ( s#hda_pcm_stream * , s#hda_codec * , unsigned int , unsigned int , s#snd_pcm_substream * ) ; int ( * cleanup ) ( s#hda_pcm_stream * , s#hda_codec * , s#snd_pcm_substream * ) ; } 
s#hda_pcm_stream struct hda_pcm_stream { unsigned int substreams ; unsigned int channels_min ; unsigned int channels_max ; t#hda_nid_t nid ; t#u32 rates ; t#u64 formats ; unsigned int maxbps ; s#hda_pcm_ops ops ; } 
s#hda_pcm struct hda_pcm { char * name ; s#hda_pcm_stream stream [ 2 ] ; unsigned int pcm_type ; int device ; s#snd_pcm * pcm ; } 
s#hda_bus_ops struct hda_bus_ops { int ( * command ) ( s#hda_bus * , unsigned int ) ; unsigned int ( * get_response ) ( s#hda_bus * , unsigned int ) ; void ( * private_free ) ( s#hda_bus * ) ; int ( * attach_pcm ) ( s#hda_bus * , s#hda_codec * , s#hda_pcm * ) ; void ( * bus_reset ) ( s#hda_bus * ) ; void ( * pm_notify ) ( s#hda_bus * ) ; } 
s#hda_bus_unsolicited struct hda_bus_unsolicited { t#u32 queue [ 64 * 2 ] ; unsigned int rp , wp ; s#work_struct work ; s#hda_bus * bus ; } 
s##workqueue_struct
s#hda_bus struct hda_bus { s#snd_card * card ; void * private_data ; s#pci_dev * pci ; const char * modelname ; int * power_save ; s#hda_bus_ops ops ; s#list_head codec_list ; s#hda_codec * caddr_tbl [ 0x0f + 1 ] ; s#mutex cmd_mutex ; s#hda_bus_unsolicited * unsol ; char workq_name [ 16 ] ; s#workqueue_struct * workq ; unsigned long pcm_dev_bits [ ( ( ( ( 256 - 2 ) ) + ( 8 * sizeof ( long ) ) - 1 ) / ( 8 * sizeof ( long ) ) ) ] ; unsigned int needs_damn_long_delay : 1 ; unsigned int allow_bus_reset : 1 ; unsigned int sync_write : 1 ; unsigned int shutdown : 1 ; unsigned int rirb_error : 1 ; unsigned int response_reset : 1 ; unsigned int in_reset : 1 ; unsigned int power_keep_link_on : 1 ; } 
s#hda_codec_preset struct hda_codec_preset { unsigned int id ; unsigned int mask ; unsigned int subs ; unsigned int subs_mask ; unsigned int rev ; t#hda_nid_t afg , mfg ; const char * name ; int ( * patch ) ( s#hda_codec * ) ; } 
s#hda_codec_ops struct hda_codec_ops { int ( * build_controls ) ( s#hda_codec * ) ; int ( * build_pcms ) ( s#hda_codec * ) ; int ( * init ) ( s#hda_codec * ) ; void ( * free ) ( s#hda_codec * ) ; void ( * unsol_event ) ( s#hda_codec * , unsigned int ) ; int ( * suspend ) ( s#hda_codec * , t#pm_message_t ) ; int ( * resume ) ( s#hda_codec * ) ; int ( * check_power_status ) ( s#hda_codec * , t#hda_nid_t ) ; void ( * reboot_notify ) ( s#hda_codec * ) ; } 
s#hda_beep struct hda_beep { s#input_dev * dev ; s#hda_codec * codec ; char phys [ 32 ] ; int tone ; t#hda_nid_t nid ; unsigned int enabled : 1 ; unsigned int linear_tone : 1 ; s#work_struct beep_work ; } 
s#snd_array struct snd_array { unsigned int used ; unsigned int alloced ; unsigned int elem_size ; unsigned int alloc_align ; void * list ; } 
s#hda_cache_rec struct hda_cache_rec { t#u16 hash [ 64 ] ; s#snd_array buf ; } 
s#hda_codec struct hda_codec { s#hda_bus * bus ; unsigned int addr ; s#list_head list ; t#hda_nid_t afg ; t#hda_nid_t mfg ; t#u32 function_id ; t#u32 vendor_id ; t#u32 subsystem_id ; t#u32 revision_id ; const s#hda_codec_preset * preset ; s#module * owner ; const char * vendor_name ; const char * chip_name ; const char * modelname ; s#hda_codec_ops patch_ops ; unsigned int num_pcms ; s#hda_pcm * pcm_info ; void * spec ; s#hda_beep * beep ; unsigned int num_nodes ; t#hda_nid_t start_nid ; t#u32 * wcaps ; s#snd_array mixers ; s#hda_cache_rec amp_cache ; s#hda_cache_rec cmd_cache ; s#mutex spdif_mutex ; s#mutex control_mutex ; unsigned int spdif_status ; unsigned short spdif_ctls ; unsigned int spdif_in_enable ; t#hda_nid_t * slave_dig_outs ; s#snd_array init_pins ; s#snd_array driver_pins ; s#snd_hwdep * hwdep ; s#snd_array init_verbs ; s#snd_array hints ; s#snd_array user_pins ; unsigned int spdif_status_reset : 1 ; unsigned int pin_amp_workaround : 1 ; unsigned int power_on : 1 ; unsigned int power_transition : 1 ; int power_count ; s#delayed_work power_work ; unsigned long power_on_acct ; unsigned long power_off_acct ; unsigned long power_jiffies ; void ( * proc_widget_hook ) ( s#snd_info_buffer * , s#hda_codec * , t#hda_nid_t ) ; } 
snd_hda_attach_beep_device int snd_hda_attach_beep_device ( s#hda_codec * , int ) 
snd_hda_detach_beep_device void snd_hda_detach_beep_device ( s#hda_codec * ) 

/* sound/pci/hda/hda_codec.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##snd_mixer_oss
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##snd_pcm_plugin
s##snd_timer
s##workqueue_struct
s##hda_beep
s#hda_codec_preset_list struct hda_codec_preset_list { const s#hda_codec_preset * preset ; s#module * owner ; s#list_head list ; } 
snd_hda_add_codec_preset int snd_hda_add_codec_preset ( s#hda_codec_preset_list * ) 
snd_hda_delete_codec_preset int snd_hda_delete_codec_preset ( s#hda_codec_preset_list * ) 
snd_hda_get_jack_location const char * snd_hda_get_jack_location ( t#u32 ) 
snd_hda_get_jack_connectivity const char * snd_hda_get_jack_connectivity ( t#u32 ) 
snd_hda_get_jack_type const char * snd_hda_get_jack_type ( t#u32 ) 
snd_hda_codec_read unsigned int snd_hda_codec_read ( s#hda_codec * , t#hda_nid_t , int , unsigned int , unsigned int ) 
snd_hda_codec_write int snd_hda_codec_write ( s#hda_codec * , t#hda_nid_t , int , unsigned int , unsigned int ) 
s#hda_verb struct hda_verb { t#hda_nid_t nid ; t#u32 verb ; t#u32 param ; } 
snd_hda_sequence_write void snd_hda_sequence_write ( s#hda_codec * , const s#hda_verb * ) 
snd_hda_get_sub_nodes int snd_hda_get_sub_nodes ( s#hda_codec * , t#hda_nid_t , t#hda_nid_t * ) 
snd_hda_get_connections int snd_hda_get_connections ( s#hda_codec * , t#hda_nid_t , t#hda_nid_t * , int ) 
snd_hda_queue_unsol_event int snd_hda_queue_unsol_event ( s#hda_bus * , t#u32 , t#u32 ) 
s#hda_bus_template struct hda_bus_template { void * private_data ; s#pci_dev * pci ; const char * modelname ; int * power_save ; s#hda_bus_ops ops ; } 
snd_hda_bus_new int snd_hda_bus_new ( s#snd_card * , const s#hda_bus_template * , s#hda_bus * * ) 
snd_hda_codec_set_pincfg int snd_hda_codec_set_pincfg ( s#hda_codec * , t#hda_nid_t , unsigned int ) 
snd_hda_codec_get_pincfg unsigned int snd_hda_codec_get_pincfg ( s#hda_codec * , t#hda_nid_t ) 
snd_hda_codec_new int snd_hda_codec_new ( s#hda_bus * , unsigned int , s#hda_codec * * ) 
snd_hda_codec_configure int snd_hda_codec_configure ( s#hda_codec * ) 
snd_hda_codec_setup_stream void snd_hda_codec_setup_stream ( s#hda_codec * , t#hda_nid_t , t#u32 , int , int ) 
snd_hda_codec_cleanup_stream void snd_hda_codec_cleanup_stream ( s#hda_codec * , t#hda_nid_t ) 
query_amp_caps t#u32 query_amp_caps ( s#hda_codec * , t#hda_nid_t , int ) 
snd_hda_override_amp_caps int snd_hda_override_amp_caps ( s#hda_codec * , t#hda_nid_t , int , unsigned int ) 
snd_hda_query_pin_caps t#u32 snd_hda_query_pin_caps ( s#hda_codec * , t#hda_nid_t ) 
snd_hda_pin_sense t#u32 snd_hda_pin_sense ( s#hda_codec * , t#hda_nid_t ) 
snd_hda_jack_detect int snd_hda_jack_detect ( s#hda_codec * , t#hda_nid_t ) 
snd_hda_codec_amp_read int snd_hda_codec_amp_read ( s#hda_codec * , t#hda_nid_t , int , int , int ) 
snd_hda_codec_amp_update int snd_hda_codec_amp_update ( s#hda_codec * , t#hda_nid_t , int , int , int , int , int ) 
snd_hda_codec_amp_stereo int snd_hda_codec_amp_stereo ( s#hda_codec * , t#hda_nid_t , int , int , int , int ) 
snd_hda_codec_resume_amp void snd_hda_codec_resume_amp ( s#hda_codec * ) 
snd_hda_mixer_amp_volume_info int snd_hda_mixer_amp_volume_info ( s#snd_kcontrol * , s#snd_ctl_elem_info * ) 
snd_hda_mixer_amp_volume_get int snd_hda_mixer_amp_volume_get ( s#snd_kcontrol * , s#snd_ctl_elem_value * ) 
snd_hda_mixer_amp_volume_put int snd_hda_mixer_amp_volume_put ( s#snd_kcontrol * , s#snd_ctl_elem_value * ) 
snd_hda_mixer_amp_tlv int snd_hda_mixer_amp_tlv ( s#snd_kcontrol * , int , unsigned int , unsigned int * ) 
snd_hda_set_vmaster_tlv void snd_hda_set_vmaster_tlv ( s#hda_codec * , t#hda_nid_t , int , unsigned int * ) 
snd_hda_find_mixer_ctl s#snd_kcontrol * snd_hda_find_mixer_ctl ( s#hda_codec * , const char * ) 
snd_hda_ctl_add int snd_hda_ctl_add ( s#hda_codec * , s#snd_kcontrol * ) 
snd_hda_add_vmaster int snd_hda_add_vmaster ( s#hda_codec * , char * , unsigned int * , const char * * ) 
snd_hda_mixer_amp_switch_info int snd_hda_mixer_amp_switch_info ( s#snd_kcontrol * , s#snd_ctl_elem_info * ) 
snd_hda_mixer_amp_switch_get int snd_hda_mixer_amp_switch_get ( s#snd_kcontrol * , s#snd_ctl_elem_value * ) 
snd_hda_mixer_amp_switch_put int snd_hda_mixer_amp_switch_put ( s#snd_kcontrol * , s#snd_ctl_elem_value * ) 
snd_hda_mixer_bind_switch_get int snd_hda_mixer_bind_switch_get ( s#snd_kcontrol * , s#snd_ctl_elem_value * ) 
snd_hda_mixer_bind_switch_put int snd_hda_mixer_bind_switch_put ( s#snd_kcontrol * , s#snd_ctl_elem_value * ) 
snd_hda_mixer_bind_ctls_info int snd_hda_mixer_bind_ctls_info ( s#snd_kcontrol * , s#snd_ctl_elem_info * ) 
snd_hda_mixer_bind_ctls_get int snd_hda_mixer_bind_ctls_get ( s#snd_kcontrol * , s#snd_ctl_elem_value * ) 
snd_hda_mixer_bind_ctls_put int snd_hda_mixer_bind_ctls_put ( s#snd_kcontrol * , s#snd_ctl_elem_value * ) 
snd_hda_mixer_bind_tlv int snd_hda_mixer_bind_tlv ( s#snd_kcontrol * , int , unsigned int , unsigned int * ) 
s#hda_ctl_ops struct hda_ctl_ops { t#snd_kcontrol_info_t * info ; t#snd_kcontrol_get_t * get ; t#snd_kcontrol_put_t * put ; t#snd_kcontrol_tlv_rw_t * tlv ; } 
snd_hda_bind_vol extern s#hda_ctl_ops snd_hda_bind_vol 
snd_hda_bind_sw extern s#hda_ctl_ops snd_hda_bind_sw 
snd_hda_create_spdif_out_ctls int snd_hda_create_spdif_out_ctls ( s#hda_codec * , t#hda_nid_t ) 
s#hda_multi_out struct hda_multi_out { int num_dacs ; t#hda_nid_t * dac_nids ; t#hda_nid_t hp_nid ; t#hda_nid_t extra_out_nid [ 3 ] ; t#hda_nid_t dig_out_nid ; t#hda_nid_t * slave_dig_outs ; int max_channels ; int dig_out_used ; int no_share_stream ; int share_spdif ; unsigned int analog_rates ; unsigned int analog_maxbps ; t#u64 analog_formats ; unsigned int spdif_rates ; unsigned int spdif_maxbps ; t#u64 spdif_formats ; } 
snd_hda_create_spdif_share_sw int snd_hda_create_spdif_share_sw ( s#hda_codec * , s#hda_multi_out * ) 
snd_hda_create_spdif_in_ctls int snd_hda_create_spdif_in_ctls ( s#hda_codec * , t#hda_nid_t ) 
snd_hda_codec_write_cache int snd_hda_codec_write_cache ( s#hda_codec * , t#hda_nid_t , int , unsigned int , unsigned int ) 
snd_hda_codec_resume_cache void snd_hda_codec_resume_cache ( s#hda_codec * ) 
snd_hda_sequence_write_cache void snd_hda_sequence_write_cache ( s#hda_codec * , const s#hda_verb * ) 
snd_hda_build_controls int snd_hda_build_controls ( s#hda_bus * ) 
snd_hda_calc_stream_format unsigned int snd_hda_calc_stream_format ( unsigned int , unsigned int , unsigned int , unsigned int ) 
snd_hda_is_supported_format int snd_hda_is_supported_format ( s#hda_codec * , t#hda_nid_t , unsigned int ) 
snd_hda_build_pcms int snd_hda_build_pcms ( s#hda_bus * ) 
snd_hda_check_board_config int snd_hda_check_board_config ( s#hda_codec * , int , const char * * , const s#snd_pci_quirk * ) 
snd_hda_check_board_codec_sid_config int snd_hda_check_board_codec_sid_config ( s#hda_codec * , int , const char * * , const s#snd_pci_quirk * ) 
snd_hda_add_new_ctls int snd_hda_add_new_ctls ( s#hda_codec * , s#snd_kcontrol_new * ) 
snd_hda_power_up void snd_hda_power_up ( s#hda_codec * ) 
snd_hda_power_down void snd_hda_power_down ( s#hda_codec * ) 
s#hda_amp_list struct hda_amp_list { t#hda_nid_t nid ; unsigned char dir ; unsigned char idx ; } 
s#hda_loopback_check struct hda_loopback_check { s#hda_amp_list * amplist ; int power_on ; } 
snd_hda_check_amp_list_power int snd_hda_check_amp_list_power ( s#hda_codec * , s#hda_loopback_check * , t#hda_nid_t ) 
s#hda_channel_mode struct hda_channel_mode { int channels ; const s#hda_verb * sequence ; } 
snd_hda_ch_mode_info int snd_hda_ch_mode_info ( s#hda_codec * , s#snd_ctl_elem_info * , const s#hda_channel_mode * , int ) 
snd_hda_ch_mode_get int snd_hda_ch_mode_get ( s#hda_codec * , s#snd_ctl_elem_value * , const s#hda_channel_mode * , int , int ) 
snd_hda_ch_mode_put int snd_hda_ch_mode_put ( s#hda_codec * , s#snd_ctl_elem_value * , const s#hda_channel_mode * , int , int * ) 
s#hda_input_mux_item struct hda_input_mux_item { const char * label ; unsigned int index ; } 
s#hda_input_mux struct hda_input_mux { unsigned int num_items ; s#hda_input_mux_item items [ 16 ] ; } 
snd_hda_input_mux_info int snd_hda_input_mux_info ( const s#hda_input_mux * , s#snd_ctl_elem_info * ) 
snd_hda_input_mux_put int snd_hda_input_mux_put ( s#hda_codec * , const s#hda_input_mux * , s#snd_ctl_elem_value * , t#hda_nid_t , unsigned int * ) 
snd_hda_bus_reboot_notify void snd_hda_bus_reboot_notify ( s#hda_bus * ) 
snd_hda_multi_out_dig_open int snd_hda_multi_out_dig_open ( s#hda_codec * , s#hda_multi_out * ) 
snd_hda_multi_out_dig_prepare int snd_hda_multi_out_dig_prepare ( s#hda_codec * , s#hda_multi_out * , unsigned int , unsigned int , s#snd_pcm_substream * ) 
snd_hda_multi_out_dig_cleanup int snd_hda_multi_out_dig_cleanup ( s#hda_codec * , s#hda_multi_out * ) 
snd_hda_multi_out_dig_close int snd_hda_multi_out_dig_close ( s#hda_codec * , s#hda_multi_out * ) 
snd_hda_multi_out_analog_open int snd_hda_multi_out_analog_open ( s#hda_codec * , s#hda_multi_out * , s#snd_pcm_substream * , s#hda_pcm_stream * ) 
snd_hda_multi_out_analog_prepare int snd_hda_multi_out_analog_prepare ( s#hda_codec * , s#hda_multi_out * , unsigned int , unsigned int , s#snd_pcm_substream * ) 
snd_hda_multi_out_analog_cleanup int snd_hda_multi_out_analog_cleanup ( s#hda_codec * , s#hda_multi_out * ) 
s#auto_pin_cfg struct auto_pin_cfg { int line_outs ; t#hda_nid_t line_out_pins [ 5 ] ; int speaker_outs ; t#hda_nid_t speaker_pins [ 5 ] ; int hp_outs ; int line_out_type ; t#hda_nid_t hp_pins [ 5 ] ; t#hda_nid_t input_pins [ AUTO_PIN_LAST ] ; int dig_outs ; t#hda_nid_t dig_out_pins [ 2 ] ; t#hda_nid_t dig_in_pin ; t#hda_nid_t mono_out_pin ; int dig_out_type [ 2 ] ; int dig_in_type ; } 
snd_hda_parse_pin_def_config int snd_hda_parse_pin_def_config ( s#hda_codec * , s#auto_pin_cfg * , t#hda_nid_t * ) 
auto_pin_cfg_labels extern const char * auto_pin_cfg_labels [ AUTO_PIN_LAST ] 
snd_hda_suspend int snd_hda_suspend ( s#hda_bus * ) 
snd_hda_resume int snd_hda_resume ( s#hda_bus * ) 
snd_array_new void * snd_array_new ( s#snd_array * ) 
snd_array_free void snd_array_free ( s#snd_array * ) 
snd_print_pcm_rates void snd_print_pcm_rates ( int , char * , int ) 
snd_print_pcm_bits void snd_print_pcm_bits ( int , char * , int ) 

/* sound/pci/hda/hda_generic.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s##pci_dev
s##snd_pcm_plugin
s##snd_timer
s##workqueue_struct
s##hda_beep
snd_hda_parse_generic_codec int snd_hda_parse_generic_codec ( s#hda_codec * ) 

/* sound/pci/hda/hda_hwdep.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##proc_dir_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##snd_mixer_oss
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##snd_pcm_plugin
s##snd_timer
s##workqueue_struct
s##hda_beep
snd_hda_get_hint const char * snd_hda_get_hint ( s#hda_codec * , const char * ) 
snd_hda_get_bool_hint int snd_hda_get_bool_hint ( s#hda_codec * , const char * ) 
snd_hda_load_patch int snd_hda_load_patch ( s#hda_bus * , const char * ) 

/* sound/pci/ice1712/ak4xxx.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s#snd_akm4xxx_ops struct snd_akm4xxx_ops { void ( * set_rate_val ) ( s#snd_akm4xxx * , unsigned int ) ; } 
s#snd_ak4xxx_private struct snd_ak4xxx_private { unsigned int cif : 1 ; unsigned char caddr ; unsigned int data_mask ; unsigned int clk_mask ; unsigned int cs_mask ; unsigned int cs_addr ; unsigned int cs_none ; unsigned int add_flags ; unsigned int mask_flags ; s#snd_akm4xxx_ops ops ; } 
s##pci_dev
s##snd_pcm_plugin
s##snd_timer
s##snd_seq_port_info
s#snd_ice1712_eeprom struct snd_ice1712_eeprom { unsigned int subvendor ; unsigned char size ; unsigned char version ; unsigned char data [ 32 ] ; unsigned int gpiomask ; unsigned int gpiostate ; unsigned int gpiodir ; } 
s#snd_ice1712_spdif_ops struct snd_ice1712_spdif_ops { void ( * open ) ( s#snd_ice1712 * , s#snd_pcm_substream * ) ; void ( * setup_rate ) ( s#snd_ice1712 * , int ) ; void ( * close ) ( s#snd_ice1712 * , s#snd_pcm_substream * ) ; void ( * default_get ) ( s#snd_ice1712 * , s#snd_ctl_elem_value * ) ; int ( * default_put ) ( s#snd_ice1712 * , s#snd_ctl_elem_value * ) ; void ( * stream_get ) ( s#snd_ice1712 * , s#snd_ctl_elem_value * ) ; int ( * stream_put ) ( s#snd_ice1712 * , s#snd_ctl_elem_value * ) ; } 
s#snd_ice1712_spdif struct snd_ice1712_spdif { unsigned char cs8403_bits ; unsigned char cs8403_stream_bits ; s#snd_kcontrol * stream_ctl ; s#snd_ice1712_spdif_ops ops ; } 
s#ice1712_gpio struct ice1712_gpio { unsigned int direction ; unsigned int write_mask ; unsigned int saved [ 2 ] ; void ( * set_mask ) ( s#snd_ice1712 * , unsigned int ) ; void ( * set_dir ) ( s#snd_ice1712 * , unsigned int ) ; void ( * set_data ) ( s#snd_ice1712 * , unsigned int ) ; unsigned int ( * get_data ) ( s#snd_ice1712 * ) ; void ( * set_pro_rate ) ( s#snd_ice1712 * , unsigned int ) ; void ( * i2s_mclk_changed ) ( s#snd_ice1712 * ) ; } 
s#snd_ice1712 struct snd_ice1712 { unsigned long conp_dma_size ; unsigned long conc_dma_size ; unsigned long prop_dma_size ; unsigned long proc_dma_size ; int irq ; unsigned long port ; unsigned long ddma_port ; unsigned long dmapath_port ; unsigned long profi_port ; s#pci_dev * pci ; s#snd_card * card ; s#snd_pcm * pcm ; s#snd_pcm * pcm_ds ; s#snd_pcm * pcm_pro ; s#snd_pcm_substream * playback_con_substream ; s#snd_pcm_substream * playback_con_substream_ds [ 6 ] ; s#snd_pcm_substream * capture_con_substream ; s#snd_pcm_substream * playback_pro_substream ; s#snd_pcm_substream * capture_pro_substream ; unsigned int playback_pro_size ; unsigned int capture_pro_size ; unsigned int playback_con_virt_addr [ 6 ] ; unsigned int playback_con_active_buf [ 6 ] ; unsigned int capture_con_virt_addr ; unsigned int ac97_ext_id ; s#snd_ac97 * ac97 ; s#snd_rawmidi * rmidi [ 2 ] ; t#spinlock_t reg_lock ; s#snd_info_entry * proc_entry ; s#snd_ice1712_eeprom eeprom ; unsigned int pro_volumes [ 20 ] ; unsigned int omni : 1 ; unsigned int dxr_enable : 1 ; unsigned int vt1724 : 1 ; unsigned int vt1720 : 1 ; unsigned int has_spdif : 1 ; unsigned int force_pdma4 : 1 ; unsigned int force_rdma1 : 1 ; unsigned int midi_output : 1 ; unsigned int midi_input : 1 ; unsigned int own_routing : 1 ; unsigned int num_total_dacs ; unsigned int num_total_adcs ; unsigned int cur_rate ; s#mutex open_mutex ; s#snd_pcm_substream * pcm_reserved [ 4 ] ; s#snd_pcm_hw_constraint_list * hw_rates ; unsigned int akm_codecs ; s#snd_akm4xxx * akm ; s#snd_ice1712_spdif spdif ; s#mutex i2c_mutex ; s#snd_i2c_bus * i2c ; s#snd_i2c_device * cs8427 ; unsigned int cs8427_timeout ; s#ice1712_gpio gpio ; s#mutex gpio_mutex ; void * spec ; int pro_rate_default ; int ( * is_spdif_master ) ( s#snd_ice1712 * ) ; unsigned int ( * get_rate ) ( s#snd_ice1712 * ) ; void ( * set_rate ) ( s#snd_ice1712 * , unsigned int ) ; unsigned char ( * set_mclk ) ( s#snd_ice1712 * , unsigned int ) ; void ( * set_spdif_clock ) ( s#snd_ice1712 * ) ; int ( * pm_suspend ) ( s#snd_ice1712 * ) ; int ( * pm_resume ) ( s#snd_ice1712 * ) ; unsigned int pm_suspend_enabled : 1 ; unsigned int pm_saved_is_spdif_master : 1 ; unsigned int pm_saved_spdif_ctrl ; unsigned char pm_saved_spdif_cfg ; unsigned int pm_saved_route ; } 
snd_ice1712_akm4xxx_init int snd_ice1712_akm4xxx_init ( s#snd_akm4xxx * , const s#snd_akm4xxx * , const s#snd_ak4xxx_private * , s#snd_ice1712 * ) 
snd_ice1712_akm4xxx_free void snd_ice1712_akm4xxx_free ( s#snd_ice1712 * ) 
snd_ice1712_akm4xxx_build_controls int snd_ice1712_akm4xxx_build_controls ( s#snd_ice1712 * ) 

/* sound/pci/oxygen/oxygen_io.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
s##snd_info_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s##pci_dev
s##snd_seq_port_info
s##snd_pcm_substream
s##snd_kcontrol
s##snd_kcontrol_new
s##snd_pcm_hardware
s#oxygen_model struct oxygen_model { const char * shortname ; const char * longname ; const char * chip ; void ( * init ) ( s#oxygen * ) ; int ( * control_filter ) ( s#snd_kcontrol_new * ) ; int ( * mixer_init ) ( s#oxygen * ) ; void ( * cleanup ) ( s#oxygen * ) ; void ( * suspend ) ( s#oxygen * ) ; void ( * resume ) ( s#oxygen * ) ; void ( * pcm_hardware_filter ) ( unsigned int , s#snd_pcm_hardware * ) ; void ( * set_dac_params ) ( s#oxygen * , s#snd_pcm_hw_params * ) ; void ( * set_adc_params ) ( s#oxygen * , s#snd_pcm_hw_params * ) ; void ( * update_dac_volume ) ( s#oxygen * ) ; void ( * update_dac_mute ) ( s#oxygen * ) ; void ( * gpio_changed ) ( s#oxygen * ) ; void ( * uart_input ) ( s#oxygen * ) ; void ( * ac97_switch ) ( s#oxygen * , unsigned int , unsigned int ) ; const unsigned int * dac_tlv ; unsigned long private_data ; t#size_t model_data_size ; unsigned int device_config ; t#u8 dac_channels ; t#u8 dac_volume_min ; t#u8 dac_volume_max ; t#u8 misc_flags ; t#u8 function_flags ; t#u16 dac_i2s_format ; t#u16 adc_i2s_format ; } 
s#oxygen struct oxygen { unsigned long addr ; t#spinlock_t reg_lock ; s#mutex mutex ; s#snd_card * card ; s#pci_dev * pci ; s#snd_rawmidi * midi ; int irq ; void * model_data ; unsigned int interrupt_mask ; t#u8 dac_volume [ 8 ] ; t#u8 dac_mute ; t#u8 pcm_active ; t#u8 pcm_running ; t#u8 dac_routing ; t#u8 spdif_playback_enable ; t#u8 revision ; t#u8 has_ac97_0 ; t#u8 has_ac97_1 ; t#u32 spdif_bits ; t#u32 spdif_pcm_bits ; s#snd_pcm_substream * streams [ 6 ] ; s#snd_kcontrol * controls [ CONTROL_COUNT ] ; s#work_struct spdif_input_bits_work ; s#work_struct gpio_work ; t#wait_queue_head_t ac97_waitqueue ; union { t#u8 _8 [ 0x100 ] ; t#__le16 _16 [ 0x100 / 2 ] ; t#__le32 _32 [ 0x100 / 4 ] ; } saved_registers ; t#u16 saved_ac97_registers [ 2 ] [ 0x40 ] ; unsigned int uart_input_count ; t#u8 uart_input [ 32 ] ; s#oxygen_model model ; } 
oxygen_read8 t#u8 oxygen_read8 ( s#oxygen * , unsigned int ) 
oxygen_read16 t#u16 oxygen_read16 ( s#oxygen * , unsigned int ) 
oxygen_read32 t#u32 oxygen_read32 ( s#oxygen * , unsigned int ) 
oxygen_write8 void oxygen_write8 ( s#oxygen * , unsigned int , t#u8 ) 
oxygen_write16 void oxygen_write16 ( s#oxygen * , unsigned int , t#u16 ) 
oxygen_write32 void oxygen_write32 ( s#oxygen * , unsigned int , t#u32 ) 
oxygen_write8_masked void oxygen_write8_masked ( s#oxygen * , unsigned int , t#u8 , t#u8 ) 
oxygen_write16_masked void oxygen_write16_masked ( s#oxygen * , unsigned int , t#u16 , t#u16 ) 
oxygen_write32_masked void oxygen_write32_masked ( s#oxygen * , unsigned int , t#u32 , t#u32 ) 
oxygen_write_ac97 void oxygen_write_ac97 ( s#oxygen * , unsigned int , unsigned int , t#u16 ) 
oxygen_read_ac97 t#u16 oxygen_read_ac97 ( s#oxygen * , unsigned int , unsigned int ) 
oxygen_write_ac97_masked void oxygen_write_ac97_masked ( s#oxygen * , unsigned int , unsigned int , t#u16 , t#u16 ) 
oxygen_write_spi void oxygen_write_spi ( s#oxygen * , t#u8 , unsigned int ) 
oxygen_write_i2c void oxygen_write_i2c ( s#oxygen * , t#u8 , t#u8 , t#u8 ) 
oxygen_reset_uart void oxygen_reset_uart ( s#oxygen * ) 
oxygen_write_uart void oxygen_write_uart ( s#oxygen * , t#u8 ) 

/* sound/pci/oxygen/oxygen_lib.o */
s##proc_dir_entry
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##snd_shutdown_f_ops
s##snd_mixer_oss
s##snd_seq_port_info
s##snd_pcm_plugin
s##snd_timer
oxygen_pci_probe int oxygen_pci_probe ( s#pci_dev * , int , char * , s#module * , const s#pci_device_id * , int ( * ) ( s#oxygen * , const s#pci_device_id * ) ) 
oxygen_pci_remove void oxygen_pci_remove ( s#pci_dev * ) 
oxygen_pci_suspend int oxygen_pci_suspend ( s#pci_dev * , t#pm_message_t ) 
oxygen_pci_resume int oxygen_pci_resume ( s#pci_dev * ) 

/* sound/pci/trident/trident_main.o */
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##map_segment
s##compat_timespec
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##tvec_base
s##eventfd_ctx
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##class_private
s#snd_trident_tlb struct snd_trident_tlb { unsigned int * entries ; t#dma_addr_t entries_dmaaddr ; unsigned long * shadow_entries ; s#snd_dma_buffer buffer ; s#snd_util_memhdr * memhdr ; s#snd_dma_buffer silent_page ; } 
s##snd_shutdown_f_ops
s##snd_mixer_oss
s##snd_midi_channel_set
s#snd_trident_port struct snd_trident_port { s#snd_midi_channel_set * chset ; s#snd_trident * trident ; int mode ; int client ; int port ; unsigned int midi_has_voices : 1 ; } 
s##snd_trident_sample_ops
s##snd_pcm_plugin
s##snd_timer
s#snd_trident_voice struct snd_trident_voice { unsigned int number ; unsigned int use : 1 , pcm : 1 , synth : 1 , midi : 1 ; unsigned int flags ; unsigned char client ; unsigned char port ; unsigned char index ; s#snd_trident_sample_ops * sample_ops ; unsigned int CSO ; unsigned int ESO ; unsigned int LBA ; unsigned short EC ; unsigned short Alpha ; unsigned short Delta ; unsigned short Attribute ; unsigned short Vol ; unsigned char Pan ; unsigned char GVSel ; unsigned char RVol ; unsigned char CVol ; unsigned char FMC ; unsigned char CTRL ; unsigned char FMS ; unsigned char LFO ; unsigned int negCSO ; s#snd_util_memblk * memblk ; s#snd_trident * trident ; s#snd_pcm_substream * substream ; s#snd_trident_voice * extra ; unsigned int running : 1 , capture : 1 , spdif : 1 , foldback : 1 , isync : 1 , isync2 : 1 , isync3 : 1 ; int foldback_chan ; unsigned int stimer ; unsigned int spurious_threshold ; unsigned int isync_mark ; unsigned int isync_max ; unsigned int isync_ESO ; void * private_data ; void ( * private_free ) ( s#snd_trident_voice * ) ; } 
s#snd_4dwave struct snd_4dwave { int seq_client ; s#snd_trident_port seq_ports [ 4 ] ; s#snd_trident_voice voices [ 64 ] ; int ChanSynthCount ; int max_size ; int current_size ; } 
s##hotplug_slot
s##pcie_link_state
s##pci_vpd
s##pci_sriov
s##pci_ats
s##snd_seq_port_info
s#snd_trident_pcm_mixer struct snd_trident_pcm_mixer { s#snd_trident_voice * voice ; unsigned short vol ; unsigned char pan ; unsigned char rvol ; unsigned char cvol ; unsigned char pad ; } 
s#snd_trident struct snd_trident { int irq ; unsigned int device ; unsigned char bDMAStart ; unsigned long port ; unsigned long midi_port ; unsigned int spurious_irq_count ; unsigned int spurious_irq_max_delta ; s#snd_trident_tlb tlb ; unsigned char spdif_ctrl ; unsigned char spdif_pcm_ctrl ; unsigned int spdif_bits ; unsigned int spdif_pcm_bits ; s#snd_kcontrol * spdif_pcm_ctl ; unsigned int ac97_ctrl ; unsigned int ChanMap [ 2 ] ; int ChanPCM ; int ChanPCMcnt ; unsigned int ac97_detect : 1 ; unsigned int in_suspend : 1 ; s#snd_4dwave synth ; t#spinlock_t event_lock ; t#spinlock_t voice_alloc ; s#snd_dma_device dma_dev ; s#pci_dev * pci ; s#snd_card * card ; s#snd_pcm * pcm ; s#snd_pcm * foldback ; s#snd_pcm * spdif ; s#snd_rawmidi * rmidi ; s#snd_ac97_bus * ac97_bus ; s#snd_ac97 * ac97 ; s#snd_ac97 * ac97_sec ; unsigned int musicvol_wavevol ; s#snd_trident_pcm_mixer pcm_mixer [ 32 ] ; s#snd_kcontrol * ctl_vol ; s#snd_kcontrol * ctl_pan ; s#snd_kcontrol * ctl_rvol ; s#snd_kcontrol * ctl_cvol ; t#spinlock_t reg_lock ; s#gameport * gameport ; } 
snd_trident_start_voice void snd_trident_start_voice ( s#snd_trident * , unsigned int ) 
snd_trident_stop_voice void snd_trident_stop_voice ( s#snd_trident * , unsigned int ) 
snd_trident_write_voice_regs void snd_trident_write_voice_regs ( s#snd_trident * , s#snd_trident_voice * ) 
snd_trident_alloc_voice s#snd_trident_voice * snd_trident_alloc_voice ( s#snd_trident * , int , int , int ) 
snd_trident_free_voice void snd_trident_free_voice ( s#snd_trident * , s#snd_trident_voice * ) 

/* sound/sound_core.o */
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
sound_class extern s#class * sound_class 
s##nameidata
s##vfsmount
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##nlm_lockowner
s##nfs4_lock_state
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##array_cache
s##kmem_list3
s##eventfd_ctx
s##poll_table_struct
register_sound_special_device extern int register_sound_special_device ( const s#file_operations * , int , s#device * ) 
register_sound_special extern int register_sound_special ( const s#file_operations * , int ) 
register_sound_mixer extern int register_sound_mixer ( const s#file_operations * , int ) 
register_sound_midi extern int register_sound_midi ( const s#file_operations * , int ) 
register_sound_dsp extern int register_sound_dsp ( const s#file_operations * , int ) 
unregister_sound_special extern void unregister_sound_special ( int ) 
unregister_sound_mixer extern void unregister_sound_mixer ( int ) 
unregister_sound_midi extern void unregister_sound_midi ( int ) 
unregister_sound_dsp extern void unregister_sound_dsp ( int ) 

/* sound/sound_firmware.o */
mod_firmware_load extern int mod_firmware_load ( const char * , char * * ) 

/* sound/synth/emux/emux.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##snd_info_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s#soundfont_voice_parm struct soundfont_voice_parm { unsigned short moddelay ; unsigned short modatkhld ; unsigned short moddcysus ; unsigned short modrelease ; short modkeyhold , modkeydecay ; unsigned short voldelay ; unsigned short volatkhld ; unsigned short voldcysus ; unsigned short volrelease ; short volkeyhold , volkeydecay ; unsigned short lfo1delay ; unsigned short lfo2delay ; unsigned short pefe ; unsigned short fmmod ; unsigned short tremfrq ; unsigned short fm2frq2 ; unsigned char cutoff ; unsigned char filterQ ; unsigned char chorus ; unsigned char reverb ; unsigned short reserved [ 4 ] ; } 
s#soundfont_voice_info struct soundfont_voice_info { unsigned short sf_id ; unsigned short sample ; int start , end ; int loopstart , loopend ; short rate_offset ; unsigned short mode ; short root ; short tune ; unsigned char low , high ; unsigned char vellow , velhigh ; signed char fixkey , fixvel ; signed char pan , fixpan ; short exclusiveClass ; unsigned char amplitude ; unsigned char attenuation ; short scaleTuning ; s#soundfont_voice_parm parm ; unsigned short sample_mode ; } 
s#soundfont_sample_info struct soundfont_sample_info { unsigned short sf_id ; unsigned short sample ; int start , end ; int loopstart , loopend ; int size ; short dummy ; unsigned short mode_flags ; unsigned int truesize ; } 
s#snd_sf_sample struct snd_sf_sample { s#soundfont_sample_info v ; int counter ; s#snd_util_memblk * block ; s#snd_sf_sample * next ; } 
s#snd_sf_zone struct snd_sf_zone { s#snd_sf_zone * next ; unsigned char bank ; unsigned char instr ; unsigned char mapped ; s#soundfont_voice_info v ; int counter ; s#snd_sf_sample * sample ; s#snd_sf_zone * next_instr ; s#snd_sf_zone * next_zone ; } 
s#snd_emux_effect_table struct snd_emux_effect_table { short val [ EMUX_FX_END ] ; unsigned char flag [ EMUX_FX_END ] ; } 
s#snd_seq_oss_arg struct snd_seq_oss_arg { int app_index ; int file_mode ; int seq_mode ; s#snd_seq_addr addr ; void * private_data ; int event_passing ; } 
s#snd_emux_port struct snd_emux_port { s#snd_midi_channel_set chset ; s#snd_emux * emu ; char port_mode ; int volume_atten ; unsigned long drum_flags ; int ctrls [ EMUX_MD_END ] ; s#snd_emux_effect_table * effect ; s#snd_seq_oss_arg * oss_arg ; } 
s#snd_emux_voice struct snd_emux_voice { int ch ; int state ; unsigned int time ; unsigned char note ; unsigned char key ; unsigned char velocity ; s#snd_sf_zone * zone ; void * block ; s#snd_midi_channel * chan ; s#snd_emux_port * port ; s#snd_emux * emu ; void * hw ; unsigned long ontime ; s#soundfont_voice_info reg ; int avol ; int acutoff ; int apitch ; int apan ; int aaux ; int ptarget ; int vtarget ; int ftarget ; } 
s#snd_emux_operators struct snd_emux_operators { s#module * owner ; s#snd_emux_voice * ( * get_voice ) ( s#snd_emux * , s#snd_emux_port * ) ; int ( * prepare ) ( s#snd_emux_voice * ) ; void ( * trigger ) ( s#snd_emux_voice * ) ; void ( * release ) ( s#snd_emux_voice * ) ; void ( * update ) ( s#snd_emux_voice * , int ) ; void ( * terminate ) ( s#snd_emux_voice * ) ; void ( * free_voice ) ( s#snd_emux_voice * ) ; void ( * reset ) ( s#snd_emux * , int ) ; int ( * sample_new ) ( s#snd_emux * , s#snd_sf_sample * , s#snd_util_memhdr * , const void * , long ) ; int ( * sample_free ) ( s#snd_emux * , s#snd_sf_sample * , s#snd_util_memhdr * ) ; void ( * sample_reset ) ( s#snd_emux * ) ; int ( * load_fx ) ( s#snd_emux * , int , int , const void * , long ) ; void ( * sysex ) ( s#snd_emux * , char * , int , int , s#snd_midi_channel_set * ) ; int ( * oss_ioctl ) ( s#snd_emux * , int , int , int ) ; } 
s##snd_hwdep
s#snd_soundfont struct snd_soundfont { s#snd_soundfont * next ; short id ; short type ; unsigned char name [ 32 ] ; s#snd_sf_zone * zones ; s#snd_sf_sample * samples ; } 
s#snd_sf_callback struct snd_sf_callback { void * private_data ; int ( * sample_new ) ( void * , s#snd_sf_sample * , s#snd_util_memhdr * , const void * , long ) ; int ( * sample_free ) ( void * , s#snd_sf_sample * , s#snd_util_memhdr * ) ; void ( * sample_reset ) ( void * ) ; } 
s#snd_sf_list struct snd_sf_list { s#snd_soundfont * currsf ; int open_client ; int mem_used ; s#snd_sf_zone * presets [ 256 ] ; s#snd_soundfont * fonts ; int fonts_size ; int zone_counter ; int sample_counter ; int zone_locked ; int sample_locked ; s#snd_sf_callback callback ; int presets_locked ; s#mutex presets_mutex ; t#spinlock_t lock ; s#snd_util_memhdr * memhdr ; } 
s#snd_emux struct snd_emux { s#snd_card * card ; int max_voices ; int mem_size ; int num_ports ; int pitch_shift ; s#snd_emux_operators ops ; void * hw ; unsigned long flags ; int midi_ports ; int midi_devidx ; unsigned int linear_panning : 1 ; int hwdep_idx ; s#snd_hwdep * hwdep ; int num_voices ; s#snd_sf_list * sflist ; s#snd_emux_voice * voices ; int use_time ; t#spinlock_t voice_lock ; s#mutex register_mutex ; int client ; int ports [ 32 ] ; s#snd_emux_port * portptrs [ 32 ] ; int used ; char * name ; s#snd_rawmidi * * vmidi ; s#timer_list tlist ; int timer_active ; s#snd_util_memhdr * memhdr ; s#snd_info_entry * proc ; s#snd_seq_device * oss_synth ; } 
snd_emux_new int snd_emux_new ( s#snd_emux * * ) 
snd_emux_register int snd_emux_register ( s#snd_emux * , s#snd_card * , int , char * ) 
snd_emux_free int snd_emux_free ( s#snd_emux * ) 

/* sound/synth/emux/emux_synth.o */
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##map_segment
s##compat_timespec
s##pollfd
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##snd_info_entry
s##snd_shutdown_f_ops
s##device_private
s##driver_private
s##bus_type_private
s##tvec_base
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##snd_mixer_oss
s##snd_hwdep
snd_emux_terminate_all void snd_emux_terminate_all ( s#snd_emux * ) 
snd_emux_lock_voice void snd_emux_lock_voice ( s#snd_emux * , int ) 
snd_emux_unlock_voice void snd_emux_unlock_voice ( s#snd_emux * , int ) 

/* sound/synth/emux/soundfont.o */
snd_sf_linear_to_log int snd_sf_linear_to_log ( unsigned int , int , int ) 

/* sound/synth/util_mem.o */
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##file
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##pid_namespace
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##ds_context
s##fs_struct
s##files_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##irqaction
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##backing_dev_info
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##pipe_inode_info
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##sysfs_dirent
s##module_param_attrs
s##exception_table_entry
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##compat_timespec
s##pollfd
snd_util_memhdr_new s#snd_util_memhdr * snd_util_memhdr_new ( int ) 
snd_util_memhdr_free void snd_util_memhdr_free ( s#snd_util_memhdr * ) 
snd_util_mem_alloc s#snd_util_memblk * snd_util_mem_alloc ( s#snd_util_memhdr * , int ) 
snd_util_mem_free int snd_util_mem_free ( s#snd_util_memhdr * , s#snd_util_memblk * ) 
snd_util_mem_avail int snd_util_mem_avail ( s#snd_util_memhdr * ) 
__snd_util_mem_alloc s#snd_util_memblk * __snd_util_mem_alloc ( s#snd_util_memhdr * , int ) 
__snd_util_mem_free void __snd_util_mem_free ( s#snd_util_memhdr * , s#snd_util_memblk * ) 
__snd_util_memblk_new s#snd_util_memblk * __snd_util_memblk_new ( s#snd_util_memhdr * , unsigned int , s#list_head * ) 

/* sound/usb/usbmidi.o */
s##usb_tt
s##device_private
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##ftrace_event_call
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##vm_operations_struct
s##vfsmount
s##map_segment
s##compat_timespec
s##pollfd
s##nameidata
s##radix_tree_node
s##writeback_control
s##backing_dev_info
s##array_cache
s##kmem_list3
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##kstatfs
s##seq_file
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##mtd_info
s##cdev
s##posix_acl
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##mempolicy
s##linux_binfmt
s##mmu_notifier_mm
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##taskstats
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##reclaim_state
s##io_context
s##css_set
s##robust_list_head
s##compat_robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##sysfs_dirent
s##driver_private
s##bus_type_private
s##dma_coherent_mem
s##dma_map_ops
s##class_private
s##mon_bus
s##ep_device
s##wusb_dev
s##snd_info_entry
s##snd_shutdown_f_ops
s##snd_mixer_oss
s#snd_usb_audio struct snd_usb_audio { int index ; s#usb_device * dev ; s#snd_card * card ; t#u32 usb_id ; int shutdown ; int num_interfaces ; int num_suspended_intf ; s#list_head pcm_list ; int pcm_devs ; s#list_head midi_list ; int next_midi_device ; s#list_head mixer_list ; } 
s#snd_usb_audio_quirk struct snd_usb_audio_quirk { const char * vendor_name ; const char * product_name ; t#int16_t ifnum ; t#uint16_t type ; const void * data ; } 
snd_usb_create_midi_interface int snd_usb_create_midi_interface ( s#snd_usb_audio * , s#usb_interface * , const s#snd_usb_audio_quirk * ) 
snd_usbmidi_input_stop void snd_usbmidi_input_stop ( s#list_head * ) 
snd_usbmidi_input_start void snd_usbmidi_input_start ( s#list_head * ) 
snd_usbmidi_disconnect void snd_usbmidi_disconnect ( s#list_head * ) 

/* virt/kvm/kvm_main.o */
s##array_cache
s##kmem_list3
kvm_vcpu_cache extern s#kmem_cache * kvm_vcpu_cache 
s##rq
s##cfs_rq
s##rt_rq
s##anon_vma
s##nameidata
s##vfsmount
s##sysfs_dirent
s##module_param_attrs
s##module_sect_attrs
s##module_notes_attrs
s##trace_array
s##tracer
s##ring_buffer_iter
s##event_filter
s##kstatfs
s##tvec_base
s##eventfd_ctx
s##poll_table_struct
s##files_struct
s##pid_namespace
s##nlm_lockowner
s##nfs4_lock_state
s##pipe_inode_info
s##key_type
s##key_user
s##keyring_list
s##user_namespace
s##export_operations
s##xattr_handler
s##hd_struct
s##gendisk
s##backing_dev_info
s##mtd_info
s##cdev
s##posix_acl
s##radix_tree_node
s##writeback_control
s##mempolicy
s##linux_binfmt
s##bts_context
s##ds_context
s##fs_struct
s##nsproxy
s##tty_struct
s##tty_audit_buf
s##audit_context
s##utrace_engine
s##proc_dir_entry
s##rt_mutex_waiter
s##bio
s##io_context
s##cgroupfs_root
s##css_id
s##robust_list_head
s##futex_pi_state
s##perf_event_context
s##ftrace_ret_stack
s##mem_cgroup
s##map_segment
s##pollfd
s##iommu_domain
s##kvm_pit
s#kvm_coalesced_mmio_zone struct kvm_coalesced_mmio_zone { t#__u64 addr ; t#__u32 size ; t#__u32 pad ; } 
s#kvm_coalesced_mmio_dev struct kvm_coalesced_mmio_dev { s#kvm_io_device dev ; s#kvm * kvm ; t#spinlock_t lock ; int nb_zones ; s#kvm_coalesced_mmio_zone zone [ 100 ] ; } 
kvm_vcpu_init int kvm_vcpu_init ( s#kvm_vcpu * , s#kvm * , unsigned ) 
kvm_vcpu_uninit void kvm_vcpu_uninit ( s#kvm_vcpu * ) 
kvm_get_kvm void kvm_get_kvm ( s#kvm * ) 
kvm_put_kvm void kvm_put_kvm ( s#kvm * ) 
s#kvm_userspace_memory_region struct kvm_userspace_memory_region { t#__u32 slot ; t#__u32 flags ; t#__u64 guest_phys_addr ; t#__u64 memory_size ; t#__u64 userspace_addr ; } 
__kvm_set_memory_region int __kvm_set_memory_region ( s#kvm * , s#kvm_userspace_memory_region * , int ) 
kvm_set_memory_region int kvm_set_memory_region ( s#kvm * , s#kvm_userspace_memory_region * , int ) 
kvm_disable_largepages void kvm_disable_largepages ( void ) 
is_error_page int is_error_page ( s#page * ) 
is_error_pfn int is_error_pfn ( t#pfn_t ) 
kvm_is_error_hva int kvm_is_error_hva ( unsigned long ) 
gfn_to_memslot_unaliased s#kvm_memory_slot * gfn_to_memslot_unaliased ( s#kvm * , t#gfn_t ) 
kvm_is_visible_gfn int kvm_is_visible_gfn ( s#kvm * , t#gfn_t ) 
gfn_to_hva unsigned long gfn_to_hva ( s#kvm * , t#gfn_t ) 
gfn_to_pfn t#pfn_t gfn_to_pfn ( s#kvm * , t#gfn_t ) 
gfn_to_page s#page * gfn_to_page ( s#kvm * , t#gfn_t ) 
kvm_release_page_clean void kvm_release_page_clean ( s#page * ) 
kvm_release_pfn_clean void kvm_release_pfn_clean ( t#pfn_t ) 
kvm_release_page_dirty void kvm_release_page_dirty ( s#page * ) 
kvm_release_pfn_dirty void kvm_release_pfn_dirty ( t#pfn_t ) 
kvm_set_page_dirty void kvm_set_page_dirty ( s#page * ) 
kvm_set_pfn_dirty void kvm_set_pfn_dirty ( t#pfn_t ) 
kvm_set_pfn_accessed void kvm_set_pfn_accessed ( t#pfn_t ) 
kvm_get_pfn void kvm_get_pfn ( t#pfn_t ) 
kvm_read_guest_page int kvm_read_guest_page ( s#kvm * , t#gfn_t , void * , int , int ) 
kvm_read_guest int kvm_read_guest ( s#kvm * , t#gpa_t , void * , unsigned long ) 
kvm_read_guest_atomic int kvm_read_guest_atomic ( s#kvm * , t#gpa_t , void * , unsigned long ) 
kvm_write_guest_page int kvm_write_guest_page ( s#kvm * , t#gfn_t , const void * , int , int ) 
kvm_clear_guest_page int kvm_clear_guest_page ( s#kvm * , t#gfn_t , int , int ) 
kvm_clear_guest int kvm_clear_guest ( s#kvm * , t#gpa_t , unsigned long ) 
kvm_resched void kvm_resched ( s#kvm_vcpu * ) 
kvm_vcpu_on_spin void kvm_vcpu_on_spin ( s#kvm_vcpu * ) 
kvm_handle_fault_on_reboot void kvm_handle_fault_on_reboot ( void ) 
kvm_init int kvm_init ( void * , unsigned int , s#module * ) 
kvm_exit void kvm_exit ( void ) 

